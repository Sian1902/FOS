
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 e0 18 00 	lgdtl  0x18e018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc df 18 f0       	mov    $0xf018dfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 18 be 2b f0 01 	movl   $0x1,0xf02bbe18
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 ec bd 2b f0 01 	movl   $0x1,0xf02bbdec
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 8c e5 2d f0       	mov    $0xf02de58c,%edx
f010006a:	b8 06 2f 25 f0       	mov    $0xf0252f06,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 06 2f 25 f0       	push   $0xf0252f06
f010007e:	e8 07 f2 02 00       	call   f012f28a <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 14 be 2b f0 ff 	movl   $0xffffffff,0xf02bbe14
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 e4 0c 00 00       	call   f0100d79 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 9d 00 00 00       	call   f0100137 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 d6 6a 00 00       	call   f0106b75 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 af 66 00 00       	call   f0106753 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 2a 6e 00 00       	call   f0106ed3 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 b3 9a 00 00       	call   f0109b61 <env_init>
	idt_init();
f01000ae:	e8 d5 af 00 00       	call   f010b088 <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 df d7 00 00       	call   f010d897 <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 64                	push   $0x64
f01000c7:	e8 d9 79 00 00       	call   f0107aa5 <create_shares_array>
f01000cc:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000cf:	83 ec 0c             	sub    $0xc,%esp
f01000d2:	6a 64                	push   $0x64
f01000d4:	e8 a8 d9 00 00       	call   f010da81 <create_semaphores_array>
f01000d9:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f01000dc:	83 ec 0c             	sub    $0xc,%esp
f01000df:	6a 00                	push   $0x0
f01000e1:	e8 ae d8 00 00       	call   f010d994 <enableBuffering>
f01000e6:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000e9:	83 ec 0c             	sub    $0xc,%esp
f01000ec:	6a 00                	push   $0x0
f01000ee:	e8 89 d8 00 00       	call   f010d97c <enableModifiedBuffer>
f01000f3:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000f6:	83 ec 0c             	sub    $0xc,%esp
f01000f9:	68 e8 03 00 00       	push   $0x3e8
f01000fe:	e8 a9 d8 00 00       	call   f010d9ac <setModifiedBufferLength>
f0100103:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100106:	e8 c2 64 00 00       	call   f01065cd <pic_init>
	sched_init() ;
f010010b:	e8 bf 60 00 00       	call   f01061cf <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100110:	83 ec 0c             	sub    $0xc,%esp
f0100113:	68 60 06 13 f0       	push   $0xf0130660
f0100118:	e8 14 0d 00 00       	call   f0100e31 <cprintf>
f010011d:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 8c 06 13 f0       	push   $0xf013068c
f0100128:	e8 04 0d 00 00       	call   f0100e31 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100130:	e8 1b 1a 00 00       	call   f0101b50 <run_command_prompt>
	}
f0100135:	eb d9                	jmp    f0100110 <FOS_initialize+0xb1>

f0100137 <print_welcome_message>:
}


void print_welcome_message()
{
f0100137:	55                   	push   %ebp
f0100138:	89 e5                	mov    %esp,%ebp
f010013a:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013d:	83 ec 0c             	sub    $0xc,%esp
f0100140:	68 b1 06 13 f0       	push   $0xf01306b1
f0100145:	e8 e7 0c 00 00       	call   f0100e31 <cprintf>
f010014a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014d:	83 ec 0c             	sub    $0xc,%esp
f0100150:	68 b8 06 13 f0       	push   $0xf01306b8
f0100155:	e8 d7 0c 00 00       	call   f0100e31 <cprintf>
f010015a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015d:	83 ec 0c             	sub    $0xc,%esp
f0100160:	68 00 07 13 f0       	push   $0xf0130700
f0100165:	e8 c7 0c 00 00       	call   f0100e31 <cprintf>
f010016a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016d:	83 ec 0c             	sub    $0xc,%esp
f0100170:	68 48 07 13 f0       	push   $0xf0130748
f0100175:	e8 b7 0c 00 00       	call   f0100e31 <cprintf>
f010017a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017d:	83 ec 0c             	sub    $0xc,%esp
f0100180:	68 00 07 13 f0       	push   $0xf0130700
f0100185:	e8 a7 0c 00 00       	call   f0100e31 <cprintf>
f010018a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018d:	83 ec 0c             	sub    $0xc,%esp
f0100190:	68 b8 06 13 f0       	push   $0xf01306b8
f0100195:	e8 97 0c 00 00       	call   f0100e31 <cprintf>
f010019a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019d:	83 ec 0c             	sub    $0xc,%esp
f01001a0:	68 8d 07 13 f0       	push   $0xf013078d
f01001a5:	e8 87 0c 00 00       	call   f0100e31 <cprintf>
f01001aa:	83 c4 10             	add    $0x10,%esp
}
f01001ad:	90                   	nop
f01001ae:	c9                   	leave  
f01001af:	c3                   	ret    

f01001b0 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001b0:	55                   	push   %ebp
f01001b1:	89 e5                	mov    %esp,%ebp
f01001b3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b9:	a3 20 2f 25 f0       	mov    %eax,0xf0252f20

	va_start(ap, fmt);
f01001be:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c1:	83 c0 04             	add    $0x4,%eax
f01001c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c7:	83 ec 04             	sub    $0x4,%esp
f01001ca:	ff 75 0c             	pushl  0xc(%ebp)
f01001cd:	ff 75 08             	pushl  0x8(%ebp)
f01001d0:	68 92 07 13 f0       	push   $0xf0130792
f01001d5:	e8 57 0c 00 00       	call   f0100e31 <cprintf>
f01001da:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01001e0:	83 ec 08             	sub    $0x8,%esp
f01001e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e6:	50                   	push   %eax
f01001e7:	e8 1c 0c 00 00       	call   f0100e08 <vcprintf>
f01001ec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ef:	83 ec 0c             	sub    $0xc,%esp
f01001f2:	68 ab 07 13 f0       	push   $0xf01307ab
f01001f7:	e8 35 0c 00 00       	call   f0100e31 <cprintf>
f01001fc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001ff:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0100204:	85 c0                	test   %eax,%eax
f0100206:	74 12                	je     f010021a <_panic+0x6a>
f0100208:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010020d:	8b 40 54             	mov    0x54(%eax),%eax
f0100210:	83 f8 02             	cmp    $0x2,%eax
f0100213:	75 05                	jne    f010021a <_panic+0x6a>
	{
		//2015
		env_exit();
f0100215:	e8 31 98 00 00       	call   f0109a4b <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010021a:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f010021f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100222:	74 1b                	je     f010023f <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100224:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f0100229:	83 ec 08             	sub    $0x8,%esp
f010022c:	50                   	push   %eax
f010022d:	68 ad 07 13 f0       	push   $0xf01307ad
f0100232:	e8 fa 0b 00 00       	call   f0100e31 <cprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010023a:	e8 da 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010023f:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f0100246:	00 00 00 
		lcr3(phys_page_directory);
f0100249:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f010024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100254:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100257:	83 ec 0c             	sub    $0xc,%esp
f010025a:	6a 00                	push   $0x0
f010025c:	e8 ef 18 00 00       	call   f0101b50 <run_command_prompt>
f0100261:	83 c4 10             	add    $0x10,%esp
f0100264:	eb f1                	jmp    f0100257 <_panic+0xa7>

f0100266 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100266:	55                   	push   %ebp
f0100267:	89 e5                	mov    %esp,%ebp
f0100269:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010026c:	8b 45 10             	mov    0x10(%ebp),%eax
f010026f:	a3 20 2f 25 f0       	mov    %eax,0xf0252f20

	va_start(ap, fmt);
f0100274:	8d 45 10             	lea    0x10(%ebp),%eax
f0100277:	83 c0 04             	add    $0x4,%eax
f010027a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010027d:	83 ec 04             	sub    $0x4,%esp
f0100280:	ff 75 0c             	pushl  0xc(%ebp)
f0100283:	ff 75 08             	pushl  0x8(%ebp)
f0100286:	68 92 07 13 f0       	push   $0xf0130792
f010028b:	e8 a1 0b 00 00       	call   f0100e31 <cprintf>
f0100290:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100293:	8b 45 10             	mov    0x10(%ebp),%eax
f0100296:	83 ec 08             	sub    $0x8,%esp
f0100299:	ff 75 f4             	pushl  -0xc(%ebp)
f010029c:	50                   	push   %eax
f010029d:	e8 66 0b 00 00       	call   f0100e08 <vcprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a5:	83 ec 0c             	sub    $0xc,%esp
f01002a8:	68 ab 07 13 f0       	push   $0xf01307ab
f01002ad:	e8 7f 0b 00 00       	call   f0100e31 <cprintf>
f01002b2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01002b5:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f01002ba:	83 f8 ff             	cmp    $0xffffffff,%eax
f01002bd:	74 27                	je     f01002e6 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f01002bf:	e8 cc 5c 00 00       	call   f0105f90 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f01002c4:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01002c9:	85 c0                	test   %eax,%eax
f01002cb:	74 14                	je     f01002e1 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f01002cd:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01002d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002d5:	83 ec 0c             	sub    $0xc,%esp
f01002d8:	50                   	push   %eax
f01002d9:	e8 f3 50 00 00       	call   f01053d1 <sched_exit_env>
f01002de:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f01002e1:	e8 33 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002e6:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f01002ed:	00 00 00 
		lcr3(phys_page_directory);
f01002f0:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01002f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002fb:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	6a 00                	push   $0x0
f0100303:	e8 48 18 00 00       	call   f0101b50 <run_command_prompt>
f0100308:	83 c4 10             	add    $0x10,%esp
f010030b:	eb f1                	jmp    f01002fe <_panic_all+0x98>

f010030d <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010030d:	55                   	push   %ebp
f010030e:	89 e5                	mov    %esp,%ebp
f0100310:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100313:	8b 45 10             	mov    0x10(%ebp),%eax
f0100316:	a3 20 2f 25 f0       	mov    %eax,0xf0252f20

	va_start(ap, fmt);
f010031b:	8d 45 10             	lea    0x10(%ebp),%eax
f010031e:	83 c0 04             	add    $0x4,%eax
f0100321:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100324:	83 ec 04             	sub    $0x4,%esp
f0100327:	ff 75 0c             	pushl  0xc(%ebp)
f010032a:	ff 75 08             	pushl  0x8(%ebp)
f010032d:	68 92 07 13 f0       	push   $0xf0130792
f0100332:	e8 fa 0a 00 00       	call   f0100e31 <cprintf>
f0100337:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010033a:	8b 45 10             	mov    0x10(%ebp),%eax
f010033d:	83 ec 08             	sub    $0x8,%esp
f0100340:	ff 75 f4             	pushl  -0xc(%ebp)
f0100343:	50                   	push   %eax
f0100344:	e8 bf 0a 00 00       	call   f0100e08 <vcprintf>
f0100349:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010034c:	83 ec 0c             	sub    $0xc,%esp
f010034f:	68 ab 07 13 f0       	push   $0xf01307ab
f0100354:	e8 d8 0a 00 00       	call   f0100e31 <cprintf>
f0100359:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010035c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0100361:	85 c0                	test   %eax,%eax
f0100363:	74 28                	je     f010038d <_panic_into_prompt+0x80>
f0100365:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010036a:	8b 40 54             	mov    0x54(%eax),%eax
f010036d:	83 f8 02             	cmp    $0x2,%eax
f0100370:	75 1b                	jne    f010038d <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100372:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0100377:	83 ec 0c             	sub    $0xc,%esp
f010037a:	50                   	push   %eax
f010037b:	e8 cb 4e 00 00       	call   f010524b <sched_insert_exit>
f0100380:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100383:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f010038a:	00 00 00 
	}

	lcr3(phys_page_directory);
f010038d:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0100392:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100398:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010039b:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f01003a0:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003a3:	74 0a                	je     f01003af <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003a5:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f01003ac:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f01003af:	83 ec 0c             	sub    $0xc,%esp
f01003b2:	6a 00                	push   $0x0
f01003b4:	e8 97 17 00 00       	call   f0101b50 <run_command_prompt>
f01003b9:	83 c4 10             	add    $0x10,%esp
f01003bc:	eb f1                	jmp    f01003af <_panic_into_prompt+0xa2>

f01003be <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01003c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01003c7:	83 c0 04             	add    $0x4,%eax
f01003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01003cd:	83 ec 04             	sub    $0x4,%esp
f01003d0:	ff 75 0c             	pushl  0xc(%ebp)
f01003d3:	ff 75 08             	pushl  0x8(%ebp)
f01003d6:	68 c2 07 13 f0       	push   $0xf01307c2
f01003db:	e8 51 0a 00 00       	call   f0100e31 <cprintf>
f01003e0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01003e6:	83 ec 08             	sub    $0x8,%esp
f01003e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ec:	50                   	push   %eax
f01003ed:	e8 16 0a 00 00       	call   f0100e08 <vcprintf>
f01003f2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003f5:	83 ec 0c             	sub    $0xc,%esp
f01003f8:	68 ab 07 13 f0       	push   $0xf01307ab
f01003fd:	e8 2f 0a 00 00       	call   f0100e31 <cprintf>
f0100402:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100405:	90                   	nop
f0100406:	c9                   	leave  
f0100407:	c3                   	ret    

f0100408 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100408:	55                   	push   %ebp
f0100409:	89 e5                	mov    %esp,%ebp
f010040b:	83 ec 10             	sub    $0x10,%esp
f010040e:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100415:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100418:	89 c2                	mov    %eax,%edx
f010041a:	ec                   	in     (%dx),%al
f010041b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010041e:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100421:	0f b6 c0             	movzbl %al,%eax
f0100424:	83 e0 01             	and    $0x1,%eax
f0100427:	85 c0                	test   %eax,%eax
f0100429:	75 07                	jne    f0100432 <serial_proc_data+0x2a>
		return -1;
f010042b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100430:	eb 16                	jmp    f0100448 <serial_proc_data+0x40>
f0100432:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100439:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010043c:	89 c2                	mov    %eax,%edx
f010043e:	ec                   	in     (%dx),%al
f010043f:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100442:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100445:	0f b6 c0             	movzbl %al,%eax
}
f0100448:	c9                   	leave  
f0100449:	c3                   	ret    

f010044a <serial_intr>:

void
serial_intr(void)
{
f010044a:	55                   	push   %ebp
f010044b:	89 e5                	mov    %esp,%ebp
f010044d:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100450:	a1 44 2f 25 f0       	mov    0xf0252f44,%eax
f0100455:	85 c0                	test   %eax,%eax
f0100457:	74 10                	je     f0100469 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100459:	83 ec 0c             	sub    $0xc,%esp
f010045c:	68 08 04 10 f0       	push   $0xf0100408
f0100461:	e8 58 07 00 00       	call   f0100bbe <cons_intr>
f0100466:	83 c4 10             	add    $0x10,%esp
}
f0100469:	90                   	nop
f010046a:	c9                   	leave  
f010046b:	c3                   	ret    

f010046c <serial_init>:

void
serial_init(void)
{
f010046c:	55                   	push   %ebp
f010046d:	89 e5                	mov    %esp,%ebp
f010046f:	83 ec 40             	sub    $0x40,%esp
f0100472:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100479:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010047d:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100480:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100483:	ee                   	out    %al,(%dx)
f0100484:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f010048b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010048f:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100492:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100495:	ee                   	out    %al,(%dx)
f0100496:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010049d:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004a1:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004a7:	ee                   	out    %al,(%dx)
f01004a8:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01004af:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01004b3:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01004b9:	ee                   	out    %al,(%dx)
f01004ba:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f01004c1:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f01004c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01004c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01004cb:	ee                   	out    %al,(%dx)
f01004cc:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f01004d3:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004d7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004dd:	ee                   	out    %al,(%dx)
f01004de:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004e5:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004e9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004ef:	ee                   	out    %al,(%dx)
f01004f0:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004fa:	89 c2                	mov    %eax,%edx
f01004fc:	ec                   	in     (%dx),%al
f01004fd:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100500:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100503:	3c ff                	cmp    $0xff,%al
f0100505:	0f 95 c0             	setne  %al
f0100508:	0f b6 c0             	movzbl %al,%eax
f010050b:	a3 44 2f 25 f0       	mov    %eax,0xf0252f44
f0100510:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100517:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100520:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010052a:	89 c2                	mov    %eax,%edx
f010052c:	ec                   	in     (%dx),%al
f010052d:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100530:	90                   	nop
f0100531:	c9                   	leave  
f0100532:	c3                   	ret    

f0100533 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100533:	55                   	push   %ebp
f0100534:	89 e5                	mov    %esp,%ebp
f0100536:	83 ec 20             	sub    $0x20,%esp
f0100539:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100543:	89 c2                	mov    %eax,%edx
f0100545:	ec                   	in     (%dx),%al
f0100546:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100549:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100550:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100553:	89 c2                	mov    %eax,%edx
f0100555:	ec                   	in     (%dx),%al
f0100556:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100559:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100563:	89 c2                	mov    %eax,%edx
f0100565:	ec                   	in     (%dx),%al
f0100566:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100569:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100573:	89 c2                	mov    %eax,%edx
f0100575:	ec                   	in     (%dx),%al
f0100576:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100579:	90                   	nop
f010057a:	c9                   	leave  
f010057b:	c3                   	ret    

f010057c <lpt_putc>:

static void
lpt_putc(int c)
{
f010057c:	55                   	push   %ebp
f010057d:	89 e5                	mov    %esp,%ebp
f010057f:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100589:	eb 08                	jmp    f0100593 <lpt_putc+0x17>
		delay();
f010058b:	e8 a3 ff ff ff       	call   f0100533 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100590:	ff 45 fc             	incl   -0x4(%ebp)
f0100593:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010059d:	89 c2                	mov    %eax,%edx
f010059f:	ec                   	in     (%dx),%al
f01005a0:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005a3:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005a6:	84 c0                	test   %al,%al
f01005a8:	78 09                	js     f01005b3 <lpt_putc+0x37>
f01005aa:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01005b1:	7e d8                	jle    f010058b <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01005b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01005b6:	0f b6 c0             	movzbl %al,%eax
f01005b9:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01005c0:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c3:	8a 45 e8             	mov    -0x18(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
f01005ca:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01005d1:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01005d5:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005db:	ee                   	out    %al,(%dx)
f01005dc:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005e3:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005ed:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005ee:	90                   	nop
f01005ef:	c9                   	leave  
f01005f0:	c3                   	ret    

f01005f1 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005f1:	55                   	push   %ebp
f01005f2:	89 e5                	mov    %esp,%ebp
f01005f4:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005f7:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100601:	66 8b 00             	mov    (%eax),%ax
f0100604:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100608:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010060b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100613:	66 8b 00             	mov    (%eax),%ax
f0100616:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010061a:	74 13                	je     f010062f <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010061c:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100623:	c7 05 48 2f 25 f0 b4 	movl   $0x3b4,0xf0252f48
f010062a:	03 00 00 
f010062d:	eb 14                	jmp    f0100643 <cga_init+0x52>
	} else {
		*cp = was;
f010062f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100632:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100636:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100639:	c7 05 48 2f 25 f0 d4 	movl   $0x3d4,0xf0252f48
f0100640:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100643:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f0100648:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010064b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f010064f:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100655:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f0100656:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f010065b:	40                   	inc    %eax
f010065c:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100662:	89 c2                	mov    %eax,%edx
f0100664:	ec                   	in     (%dx),%al
f0100665:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100668:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010066b:	0f b6 c0             	movzbl %al,%eax
f010066e:	c1 e0 08             	shl    $0x8,%eax
f0100671:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f0100674:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f0100679:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010067c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100680:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100683:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100686:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100687:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f010068c:	40                   	inc    %eax
f010068d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100693:	89 c2                	mov    %eax,%edx
f0100695:	ec                   	in     (%dx),%al
f0100696:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100699:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010069c:	0f b6 c0             	movzbl %al,%eax
f010069f:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006a5:	a3 4c 2f 25 f0       	mov    %eax,0xf0252f4c
	crt_pos = pos;
f01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01006ad:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
}
f01006b3:	90                   	nop
f01006b4:	c9                   	leave  
f01006b5:	c3                   	ret    

f01006b6 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01006b6:	55                   	push   %ebp
f01006b7:	89 e5                	mov    %esp,%ebp
f01006b9:	53                   	push   %ebx
f01006ba:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01006bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006c0:	b0 00                	mov    $0x0,%al
f01006c2:	85 c0                	test   %eax,%eax
f01006c4:	75 07                	jne    f01006cd <cga_putc+0x17>
		c |= 0x0700;
f01006c6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01006cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006d0:	0f b6 c0             	movzbl %al,%eax
f01006d3:	83 f8 0a             	cmp    $0xa,%eax
f01006d6:	74 77                	je     f010074f <cga_putc+0x99>
f01006d8:	83 f8 0a             	cmp    $0xa,%eax
f01006db:	7f 13                	jg     f01006f0 <cga_putc+0x3a>
f01006dd:	83 f8 08             	cmp    $0x8,%eax
f01006e0:	74 2e                	je     f0100710 <cga_putc+0x5a>
f01006e2:	83 f8 09             	cmp    $0x9,%eax
f01006e5:	0f 84 a8 00 00 00    	je     f0100793 <cga_putc+0xdd>
f01006eb:	e9 22 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
f01006f0:	3d e4 00 00 00       	cmp    $0xe4,%eax
f01006f5:	0f 84 de 00 00 00    	je     f01007d9 <cga_putc+0x123>
f01006fb:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100700:	0f 84 f1 00 00 00    	je     f01007f7 <cga_putc+0x141>
f0100706:	83 f8 0d             	cmp    $0xd,%eax
f0100709:	74 5d                	je     f0100768 <cga_putc+0xb2>
f010070b:	e9 02 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100710:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100716:	66 85 c0             	test   %ax,%ax
f0100719:	0f 84 4f 01 00 00    	je     f010086e <cga_putc+0x1b8>
			crt_pos--;
f010071f:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100725:	48                   	dec    %eax
f0100726:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010072c:	8b 15 4c 2f 25 f0    	mov    0xf0252f4c,%edx
f0100732:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100738:	0f b7 c0             	movzwl %ax,%eax
f010073b:	01 c0                	add    %eax,%eax
f010073d:	01 c2                	add    %eax,%edx
f010073f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100742:	b0 00                	mov    $0x0,%al
f0100744:	83 c8 20             	or     $0x20,%eax
f0100747:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010074a:	e9 1f 01 00 00       	jmp    f010086e <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f010074f:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100755:	83 c0 50             	add    $0x50,%eax
f0100758:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
		text_length = 0;
f010075e:	c7 05 40 2f 25 f0 00 	movl   $0x0,0xf0252f40
f0100765:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100768:	66 8b 0d 50 2f 25 f0 	mov    0xf0252f50,%cx
f010076f:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100775:	bb 50 00 00 00       	mov    $0x50,%ebx
f010077a:	ba 00 00 00 00       	mov    $0x0,%edx
f010077f:	66 f7 f3             	div    %bx
f0100782:	89 d0                	mov    %edx,%eax
f0100784:	29 c1                	sub    %eax,%ecx
f0100786:	89 c8                	mov    %ecx,%eax
f0100788:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
		break;
f010078e:	e9 e5 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100793:	83 ec 0c             	sub    $0xc,%esp
f0100796:	6a 20                	push   $0x20
f0100798:	e8 ba 05 00 00       	call   f0100d57 <cons_putc>
f010079d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007a0:	83 ec 0c             	sub    $0xc,%esp
f01007a3:	6a 20                	push   $0x20
f01007a5:	e8 ad 05 00 00       	call   f0100d57 <cons_putc>
f01007aa:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ad:	83 ec 0c             	sub    $0xc,%esp
f01007b0:	6a 20                	push   $0x20
f01007b2:	e8 a0 05 00 00       	call   f0100d57 <cons_putc>
f01007b7:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ba:	83 ec 0c             	sub    $0xc,%esp
f01007bd:	6a 20                	push   $0x20
f01007bf:	e8 93 05 00 00       	call   f0100d57 <cons_putc>
f01007c4:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007c7:	83 ec 0c             	sub    $0xc,%esp
f01007ca:	6a 20                	push   $0x20
f01007cc:	e8 86 05 00 00       	call   f0100d57 <cons_putc>
f01007d1:	83 c4 10             	add    $0x10,%esp
		break;
f01007d4:	e9 9f 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f01007d9:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01007df:	66 85 c0             	test   %ax,%ax
f01007e2:	0f 84 89 00 00 00    	je     f0100871 <cga_putc+0x1bb>
		     crt_pos--;
f01007e8:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01007ee:	48                   	dec    %eax
f01007ef:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
		     break;
f01007f5:	eb 7a                	jmp    f0100871 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f01007f7:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01007fd:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100801:	77 71                	ja     f0100874 <cga_putc+0x1be>
			     crt_pos++;
f0100803:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100809:	40                   	inc    %eax
f010080a:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
			     break;
f0100810:	eb 62                	jmp    f0100874 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100812:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100819:	74 5c                	je     f0100877 <cga_putc+0x1c1>
f010081b:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100822:	74 53                	je     f0100877 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100824:	8b 0d 4c 2f 25 f0    	mov    0xf0252f4c,%ecx
f010082a:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100830:	8d 50 01             	lea    0x1(%eax),%edx
f0100833:	66 89 15 50 2f 25 f0 	mov    %dx,0xf0252f50
f010083a:	0f b7 c0             	movzwl %ax,%eax
f010083d:	01 c0                	add    %eax,%eax
f010083f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100848:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f010084e:	0f b7 c0             	movzwl %ax,%eax
f0100851:	8b 15 40 2f 25 f0    	mov    0xf0252f40,%edx
f0100857:	81 c2 80 07 00 00    	add    $0x780,%edx
f010085d:	39 d0                	cmp    %edx,%eax
f010085f:	7e 16                	jle    f0100877 <cga_putc+0x1c1>
				text_length++;
f0100861:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100866:	40                   	inc    %eax
f0100867:	a3 40 2f 25 f0       	mov    %eax,0xf0252f40
		}
		break;
f010086c:	eb 09                	jmp    f0100877 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010086e:	90                   	nop
f010086f:	eb 07                	jmp    f0100878 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f0100871:	90                   	nop
f0100872:	eb 04                	jmp    f0100878 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f0100874:	90                   	nop
f0100875:	eb 01                	jmp    f0100878 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f0100877:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100878:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f010087e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100882:	76 58                	jbe    f01008dc <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100884:	a1 4c 2f 25 f0       	mov    0xf0252f4c,%eax
f0100889:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010088f:	a1 4c 2f 25 f0       	mov    0xf0252f4c,%eax
f0100894:	83 ec 04             	sub    $0x4,%esp
f0100897:	68 00 0f 00 00       	push   $0xf00
f010089c:	52                   	push   %edx
f010089d:	50                   	push   %eax
f010089e:	e8 17 ea 02 00       	call   f012f2ba <memcpy>
f01008a3:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008a6:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01008ad:	eb 15                	jmp    f01008c4 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01008af:	8b 15 4c 2f 25 f0    	mov    0xf0252f4c,%edx
f01008b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01008b8:	01 c0                	add    %eax,%eax
f01008ba:	01 d0                	add    %edx,%eax
f01008bc:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008c1:	ff 45 f4             	incl   -0xc(%ebp)
f01008c4:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01008cb:	7e e2                	jle    f01008af <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01008cd:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01008d3:	83 e8 50             	sub    $0x50,%eax
f01008d6:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01008dc:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f01008e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01008e4:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01008e8:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008ee:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008ef:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01008f5:	66 c1 e8 08          	shr    $0x8,%ax
f01008f9:	0f b6 c0             	movzbl %al,%eax
f01008fc:	8b 15 48 2f 25 f0    	mov    0xf0252f48,%edx
f0100902:	42                   	inc    %edx
f0100903:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100906:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100909:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010090c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010090f:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100910:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f0100915:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100918:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010091c:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010091f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100922:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100923:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100929:	0f b6 c0             	movzbl %al,%eax
f010092c:	8b 15 48 2f 25 f0    	mov    0xf0252f48,%edx
f0100932:	42                   	inc    %edx
f0100933:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100936:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100939:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010093c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010093f:	ee                   	out    %al,(%dx)
}
f0100940:	90                   	nop
f0100941:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100944:	c9                   	leave  
f0100945:	c3                   	ret    

f0100946 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100946:	55                   	push   %ebp
f0100947:	89 e5                	mov    %esp,%ebp
f0100949:	83 ec 28             	sub    $0x28,%esp
f010094c:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	ec                   	in     (%dx),%al
f0100959:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010095c:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010095f:	0f b6 c0             	movzbl %al,%eax
f0100962:	83 e0 01             	and    $0x1,%eax
f0100965:	85 c0                	test   %eax,%eax
f0100967:	75 0a                	jne    f0100973 <kbd_proc_data+0x2d>
		return -1;
f0100969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010096e:	e9 2a 02 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
f0100973:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010097a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010097d:	89 c2                	mov    %eax,%edx
f010097f:	ec                   	in     (%dx),%al
f0100980:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100983:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100986:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100989:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010098d:	75 17                	jne    f01009a6 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010098f:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100994:	83 c8 40             	or     $0x40,%eax
f0100997:	a3 68 31 25 f0       	mov    %eax,0xf0253168
		return 0;
f010099c:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a1:	e9 f7 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01009a6:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009a9:	84 c0                	test   %al,%al
f01009ab:	79 44                	jns    f01009f1 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01009ad:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f01009b2:	83 e0 40             	and    $0x40,%eax
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	75 08                	jne    f01009c1 <kbd_proc_data+0x7b>
f01009b9:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009bc:	83 e0 7f             	and    $0x7f,%eax
f01009bf:	eb 03                	jmp    f01009c4 <kbd_proc_data+0x7e>
f01009c1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009c4:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01009c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009cb:	8a 80 20 e0 18 f0    	mov    -0xfe71fe0(%eax),%al
f01009d1:	83 c8 40             	or     $0x40,%eax
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	f7 d0                	not    %eax
f01009d9:	89 c2                	mov    %eax,%edx
f01009db:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f01009e0:	21 d0                	and    %edx,%eax
f01009e2:	a3 68 31 25 f0       	mov    %eax,0xf0253168
		return 0;
f01009e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01009ec:	e9 ac 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f01009f1:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f01009f6:	83 e0 40             	and    $0x40,%eax
f01009f9:	85 c0                	test   %eax,%eax
f01009fb:	74 11                	je     f0100a0e <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009fd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a01:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a06:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a09:	a3 68 31 25 f0       	mov    %eax,0xf0253168
	}

	shift |= shiftcode[data];
f0100a0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a12:	8a 80 20 e0 18 f0    	mov    -0xfe71fe0(%eax),%al
f0100a18:	0f b6 d0             	movzbl %al,%edx
f0100a1b:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a20:	09 d0                	or     %edx,%eax
f0100a22:	a3 68 31 25 f0       	mov    %eax,0xf0253168
	shift ^= togglecode[data];
f0100a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a2b:	8a 80 20 e1 18 f0    	mov    -0xfe71ee0(%eax),%al
f0100a31:	0f b6 d0             	movzbl %al,%edx
f0100a34:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a39:	31 d0                	xor    %edx,%eax
f0100a3b:	a3 68 31 25 f0       	mov    %eax,0xf0253168

	c = charcode[shift & (CTL | SHIFT)][data];
f0100a40:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a45:	83 e0 03             	and    $0x3,%eax
f0100a48:	8b 14 85 20 e5 18 f0 	mov    -0xfe71ae0(,%eax,4),%edx
f0100a4f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a53:	01 d0                	add    %edx,%eax
f0100a55:	8a 00                	mov    (%eax),%al
f0100a57:	0f b6 c0             	movzbl %al,%eax
f0100a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100a5d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a64:	0f 85 9c 00 00 00    	jne    f0100b06 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100a6a:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	0f 8e 85 00 00 00    	jle    f0100afc <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100a77:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100a7d:	0f b7 c0             	movzwl %ax,%eax
f0100a80:	8b 15 40 2f 25 f0    	mov    0xf0252f40,%edx
f0100a86:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a8c:	39 d0                	cmp    %edx,%eax
f0100a8e:	75 0a                	jne    f0100a9a <kbd_proc_data+0x154>
				return 0;
f0100a90:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a95:	e9 03 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a9a:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100a9f:	48                   	dec    %eax
f0100aa0:	a3 40 2f 25 f0       	mov    %eax,0xf0252f40
				int crt_pos_Length = crt_pos - 1925;
f0100aa5:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100aab:	0f b7 c0             	movzwl %ax,%eax
f0100aae:	2d 85 07 00 00       	sub    $0x785,%eax
f0100ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100ab6:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100abc:	0f b7 c0             	movzwl %ax,%eax
f0100abf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100ac2:	eb 26                	jmp    f0100aea <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100ac4:	8b 15 4c 2f 25 f0    	mov    0xf0252f4c,%edx
f0100aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100acd:	01 c0                	add    %eax,%eax
f0100acf:	01 c2                	add    %eax,%edx
f0100ad1:	a1 4c 2f 25 f0       	mov    0xf0252f4c,%eax
f0100ad6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100ad9:	41                   	inc    %ecx
f0100ada:	01 c9                	add    %ecx,%ecx
f0100adc:	01 c8                	add    %ecx,%eax
f0100ade:	66 8b 00             	mov    (%eax),%ax
f0100ae1:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100ae4:	ff 45 e8             	incl   -0x18(%ebp)
f0100ae7:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100aea:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100aef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100af2:	7e d0                	jle    f0100ac4 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100af7:	e9 a1 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100afc:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b01:	e9 97 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b06:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100b0b:	83 e0 08             	and    $0x8,%eax
f0100b0e:	85 c0                	test   %eax,%eax
f0100b10:	74 22                	je     f0100b34 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b12:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b16:	7e 0c                	jle    f0100b24 <kbd_proc_data+0x1de>
f0100b18:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b1c:	7f 06                	jg     f0100b24 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b1e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b22:	eb 10                	jmp    f0100b34 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b24:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b28:	7e 0a                	jle    f0100b34 <kbd_proc_data+0x1ee>
f0100b2a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b2e:	7f 04                	jg     f0100b34 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b30:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b34:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100b39:	83 f8 10             	cmp    $0x10,%eax
f0100b3c:	75 13                	jne    f0100b51 <kbd_proc_data+0x20b>
f0100b3e:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100b42:	7e 0d                	jle    f0100b51 <kbd_proc_data+0x20b>
f0100b44:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100b48:	7f 07                	jg     f0100b51 <kbd_proc_data+0x20b>
		return 0;
f0100b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b4f:	eb 4c                	jmp    f0100b9d <kbd_proc_data+0x257>
	if (c == 255)
f0100b51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100b58:	75 07                	jne    f0100b61 <kbd_proc_data+0x21b>
		return 0;
f0100b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b5f:	eb 3c                	jmp    f0100b9d <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100b61:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100b66:	f7 d0                	not    %eax
f0100b68:	83 e0 06             	and    $0x6,%eax
f0100b6b:	85 c0                	test   %eax,%eax
f0100b6d:	75 2b                	jne    f0100b9a <kbd_proc_data+0x254>
f0100b6f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b76:	75 22                	jne    f0100b9a <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100b78:	83 ec 0c             	sub    $0xc,%esp
f0100b7b:	68 dd 07 13 f0       	push   $0xf01307dd
f0100b80:	e8 ac 02 00 00       	call   f0100e31 <cprintf>
f0100b85:	83 c4 10             	add    $0x10,%esp
f0100b88:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b8f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b93:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b99:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b9d:	c9                   	leave  
f0100b9e:	c3                   	ret    

f0100b9f <kbd_intr>:

void
kbd_intr(void)
{
f0100b9f:	55                   	push   %ebp
f0100ba0:	89 e5                	mov    %esp,%ebp
f0100ba2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ba5:	83 ec 0c             	sub    $0xc,%esp
f0100ba8:	68 46 09 10 f0       	push   $0xf0100946
f0100bad:	e8 0c 00 00 00       	call   f0100bbe <cons_intr>
f0100bb2:	83 c4 10             	add    $0x10,%esp
}
f0100bb5:	90                   	nop
f0100bb6:	c9                   	leave  
f0100bb7:	c3                   	ret    

f0100bb8 <kbd_init>:

void
kbd_init(void)
{
f0100bb8:	55                   	push   %ebp
f0100bb9:	89 e5                	mov    %esp,%ebp
}
f0100bbb:	90                   	nop
f0100bbc:	5d                   	pop    %ebp
f0100bbd:	c3                   	ret    

f0100bbe <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100bbe:	55                   	push   %ebp
f0100bbf:	89 e5                	mov    %esp,%ebp
f0100bc1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100bc4:	eb 35                	jmp    f0100bfb <cons_intr+0x3d>
		if (c == 0)
f0100bc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bca:	75 02                	jne    f0100bce <cons_intr+0x10>
			continue;
f0100bcc:	eb 2d                	jmp    f0100bfb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100bce:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100bd3:	8d 50 01             	lea    0x1(%eax),%edx
f0100bd6:	89 15 64 31 25 f0    	mov    %edx,0xf0253164
f0100bdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100bdf:	88 90 60 2f 25 f0    	mov    %dl,-0xfdad0a0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100be5:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100bea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bef:	75 0a                	jne    f0100bfb <cons_intr+0x3d>
			cons.wpos = 0;
f0100bf1:	c7 05 64 31 25 f0 00 	movl   $0x0,0xf0253164
f0100bf8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100bfe:	ff d0                	call   *%eax
f0100c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c07:	75 bd                	jne    f0100bc6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c09:	90                   	nop
f0100c0a:	c9                   	leave  
f0100c0b:	c3                   	ret    

f0100c0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c0c:	55                   	push   %ebp
f0100c0d:	89 e5                	mov    %esp,%ebp
f0100c0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c12:	e8 33 f8 ff ff       	call   f010044a <serial_intr>
	kbd_intr();
f0100c17:	e8 83 ff ff ff       	call   f0100b9f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c1c:	8b 15 60 31 25 f0    	mov    0xf0253160,%edx
f0100c22:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100c27:	39 c2                	cmp    %eax,%edx
f0100c29:	74 35                	je     f0100c60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c2b:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100c30:	8d 50 01             	lea    0x1(%eax),%edx
f0100c33:	89 15 60 31 25 f0    	mov    %edx,0xf0253160
f0100c39:	8a 80 60 2f 25 f0    	mov    -0xfdad0a0(%eax),%al
f0100c3f:	0f b6 c0             	movzbl %al,%eax
f0100c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100c45:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100c4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c4f:	75 0a                	jne    f0100c5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100c51:	c7 05 60 31 25 f0 00 	movl   $0x0,0xf0253160
f0100c58:	00 00 00 
		return c;
f0100c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c5e:	eb 05                	jmp    f0100c65 <cons_getc+0x59>
	}
	return 0;
f0100c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c65:	c9                   	leave  
f0100c66:	c3                   	ret    

f0100c67 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100c67:	55                   	push   %ebp
f0100c68:	89 e5                	mov    %esp,%ebp
f0100c6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100c74:	a1 44 2f 25 f0       	mov    0xf0252f44,%eax
f0100c79:	85 c0                	test   %eax,%eax
f0100c7b:	74 41                	je     f0100cbe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100c7d:	e8 86 f7 ff ff       	call   f0100408 <serial_proc_data>
f0100c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c89:	74 33                	je     f0100cbe <cons_getc2+0x57>
				if (c1 == 0)
f0100c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c8f:	74 2d                	je     f0100cbe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c91:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100c96:	8d 50 01             	lea    0x1(%eax),%edx
f0100c99:	89 15 64 31 25 f0    	mov    %edx,0xf0253164
f0100c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ca2:	88 90 60 2f 25 f0    	mov    %dl,-0xfdad0a0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100ca8:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb2:	75 0a                	jne    f0100cbe <cons_getc2+0x57>
						cons.wpos = 0;
f0100cb4:	c7 05 64 31 25 f0 00 	movl   $0x0,0xf0253164
f0100cbb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100cbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100cc5:	e8 7c fc ff ff       	call   f0100946 <kbd_proc_data>
f0100cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100ccd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100cd1:	74 33                	je     f0100d06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100cd7:	74 2d                	je     f0100d06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100cd9:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100cde:	8d 50 01             	lea    0x1(%eax),%edx
f0100ce1:	89 15 64 31 25 f0    	mov    %edx,0xf0253164
f0100ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cea:	88 90 60 2f 25 f0    	mov    %dl,-0xfdad0a0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100cf0:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100cf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cfa:	75 0a                	jne    f0100d06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100cfc:	c7 05 64 31 25 f0 00 	movl   $0x0,0xf0253164
f0100d03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d0a:	7e 44                	jle    f0100d50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d0c:	8b 15 60 31 25 f0    	mov    0xf0253160,%edx
f0100d12:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100d17:	39 c2                	cmp    %eax,%edx
f0100d19:	74 35                	je     f0100d50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d1b:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100d20:	8d 50 01             	lea    0x1(%eax),%edx
f0100d23:	89 15 60 31 25 f0    	mov    %edx,0xf0253160
f0100d29:	8a 80 60 2f 25 f0    	mov    -0xfdad0a0(%eax),%al
f0100d2f:	0f b6 c0             	movzbl %al,%eax
f0100d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d35:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d3f:	75 0a                	jne    f0100d4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100d41:	c7 05 60 31 25 f0 00 	movl   $0x0,0xf0253160
f0100d48:	00 00 00 
			return c;
f0100d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d4e:	eb 05                	jmp    f0100d55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100d50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
f0100d5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100d5d:	ff 75 08             	pushl  0x8(%ebp)
f0100d60:	e8 17 f8 ff ff       	call   f010057c <lpt_putc>
f0100d65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100d68:	83 ec 0c             	sub    $0xc,%esp
f0100d6b:	ff 75 08             	pushl  0x8(%ebp)
f0100d6e:	e8 43 f9 ff ff       	call   f01006b6 <cga_putc>
f0100d73:	83 c4 10             	add    $0x10,%esp
}
f0100d76:	90                   	nop
f0100d77:	c9                   	leave  
f0100d78:	c3                   	ret    

f0100d79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100d7f:	e8 6d f8 ff ff       	call   f01005f1 <cga_init>
	kbd_init();
f0100d84:	e8 2f fe ff ff       	call   f0100bb8 <kbd_init>
	serial_init();
f0100d89:	e8 de f6 ff ff       	call   f010046c <serial_init>

	if (!serial_exists)
f0100d8e:	a1 44 2f 25 f0       	mov    0xf0252f44,%eax
f0100d93:	85 c0                	test   %eax,%eax
f0100d95:	75 10                	jne    f0100da7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d97:	83 ec 0c             	sub    $0xc,%esp
f0100d9a:	68 e9 07 13 f0       	push   $0xf01307e9
f0100d9f:	e8 8d 00 00 00       	call   f0100e31 <cprintf>
f0100da4:	83 c4 10             	add    $0x10,%esp
}
f0100da7:	90                   	nop
f0100da8:	c9                   	leave  
f0100da9:	c3                   	ret    

f0100daa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100daa:	55                   	push   %ebp
f0100dab:	89 e5                	mov    %esp,%ebp
f0100dad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100db0:	83 ec 0c             	sub    $0xc,%esp
f0100db3:	ff 75 08             	pushl  0x8(%ebp)
f0100db6:	e8 9c ff ff ff       	call   f0100d57 <cons_putc>
f0100dbb:	83 c4 10             	add    $0x10,%esp
}
f0100dbe:	90                   	nop
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <getchar>:

int
getchar(void)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100dc7:	e8 40 fe ff ff       	call   f0100c0c <cons_getc>
f0100dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd3:	74 f2                	je     f0100dc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100dd8:	c9                   	leave  
f0100dd9:	c3                   	ret    

f0100dda <iscons>:

int
iscons(int fdnum)
{
f0100dda:	55                   	push   %ebp
f0100ddb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100ddd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100de2:	5d                   	pop    %ebp
f0100de3:	c3                   	ret    

f0100de4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100de4:	55                   	push   %ebp
f0100de5:	89 e5                	mov    %esp,%ebp
f0100de7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100dea:	83 ec 0c             	sub    $0xc,%esp
f0100ded:	ff 75 08             	pushl  0x8(%ebp)
f0100df0:	e8 b5 ff ff ff       	call   f0100daa <cputchar>
f0100df5:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100df8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dfb:	8b 00                	mov    (%eax),%eax
f0100dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e03:	89 10                	mov    %edx,(%eax)
}
f0100e05:	90                   	nop
f0100e06:	c9                   	leave  
f0100e07:	c3                   	ret    

f0100e08 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e08:	55                   	push   %ebp
f0100e09:	89 e5                	mov    %esp,%ebp
f0100e0b:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e15:	ff 75 0c             	pushl  0xc(%ebp)
f0100e18:	ff 75 08             	pushl  0x8(%ebp)
f0100e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e1e:	50                   	push   %eax
f0100e1f:	68 e4 0d 10 f0       	push   $0xf0100de4
f0100e24:	e8 c5 db 02 00       	call   f012e9ee <vprintfmt>
f0100e29:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e2f:	c9                   	leave  
f0100e30:	c3                   	ret    

f0100e31 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100e37:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e40:	83 ec 08             	sub    $0x8,%esp
f0100e43:	ff 75 f4             	pushl  -0xc(%ebp)
f0100e46:	50                   	push   %eax
f0100e47:	e8 bc ff ff ff       	call   f0100e08 <vcprintf>
f0100e4c:	83 c4 10             	add    $0x10,%esp
f0100e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100e55:	c9                   	leave  
f0100e56:	c3                   	ret    

f0100e57 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100e57:	55                   	push   %ebp
f0100e58:	89 e5                	mov    %esp,%ebp
f0100e5a:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100e5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e64:	eb 10                	jmp    f0100e76 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100e66:	83 ec 0c             	sub    $0xc,%esp
f0100e69:	6a 08                	push   $0x8
f0100e6b:	e8 3a ff ff ff       	call   f0100daa <cputchar>
f0100e70:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100e73:	ff 45 f4             	incl   -0xc(%ebp)
f0100e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e79:	8b 00                	mov    (%eax),%eax
f0100e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100e7e:	7f e6                	jg     f0100e66 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e83:	c1 e0 0a             	shl    $0xa,%eax
f0100e86:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0100e8b:	83 ec 0c             	sub    $0xc,%esp
f0100e8e:	50                   	push   %eax
f0100e8f:	e8 08 e2 02 00       	call   f012f09c <strlen>
f0100e94:	83 c4 10             	add    $0x10,%esp
f0100e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e9a:	83 ec 04             	sub    $0x4,%esp
f0100e9d:	68 00 04 00 00       	push   $0x400
f0100ea2:	68 80 9e 2d f0       	push   $0xf02d9e80
f0100ea7:	ff 75 10             	pushl  0x10(%ebp)
f0100eaa:	e8 0b e4 02 00       	call   f012f2ba <memcpy>
f0100eaf:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ebb:	eb 52                	jmp    f0100f0f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ec0:	8b 00                	mov    (%eax),%eax
f0100ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ec5:	c1 e2 0a             	shl    $0xa,%edx
f0100ec8:	01 d0                	add    %edx,%eax
f0100eca:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0100ecf:	8a 00                	mov    (%eax),%al
f0100ed1:	0f be c0             	movsbl %al,%eax
f0100ed4:	83 ec 0c             	sub    $0xc,%esp
f0100ed7:	50                   	push   %eax
f0100ed8:	e8 cd fe ff ff       	call   f0100daa <cputchar>
f0100edd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	89 c2                	mov    %eax,%edx
f0100ee7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eea:	01 c2                	add    %eax,%edx
f0100eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100ef4:	c1 e1 0a             	shl    $0xa,%ecx
f0100ef7:	01 c8                	add    %ecx,%eax
f0100ef9:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0100efe:	8a 00                	mov    (%eax),%al
f0100f00:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f05:	8b 00                	mov    (%eax),%eax
f0100f07:	8d 50 01             	lea    0x1(%eax),%edx
f0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f0d:	89 10                	mov    %edx,(%eax)
f0100f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f12:	8b 00                	mov    (%eax),%eax
f0100f14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f17:	7c a4                	jl     f0100ebd <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f19:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f1f:	89 10                	mov    %edx,(%eax)
}
f0100f21:	90                   	nop
f0100f22:	c9                   	leave  
f0100f23:	c3                   	ret    

f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f31:	eb 10                	jmp    f0100f43 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f33:	83 ec 0c             	sub    $0xc,%esp
f0100f36:	6a 08                	push   $0x8
f0100f38:	e8 6d fe ff ff       	call   f0100daa <cputchar>
f0100f3d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100f40:	ff 45 f4             	incl   -0xc(%ebp)
f0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f46:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100f49:	7c e8                	jl     f0100f33 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100f4b:	83 ec 0c             	sub    $0xc,%esp
f0100f4e:	ff 75 0c             	pushl  0xc(%ebp)
f0100f51:	e8 46 e1 02 00       	call   f012f09c <strlen>
f0100f56:	83 c4 10             	add    $0x10,%esp
f0100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f5c:	83 ec 04             	sub    $0x4,%esp
f0100f5f:	68 00 04 00 00       	push   $0x400
f0100f64:	68 80 9e 2d f0       	push   $0xf02d9e80
f0100f69:	ff 75 10             	pushl  0x10(%ebp)
f0100f6c:	e8 49 e3 02 00       	call   f012f2ba <memcpy>
f0100f71:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f7d:	eb 46                	jmp    f0100fc5 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100f7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f82:	8b 00                	mov    (%eax),%eax
f0100f84:	89 c2                	mov    %eax,%edx
f0100f86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f89:	01 d0                	add    %edx,%eax
f0100f8b:	8a 00                	mov    (%eax),%al
f0100f8d:	0f be c0             	movsbl %al,%eax
f0100f90:	83 ec 0c             	sub    $0xc,%esp
f0100f93:	50                   	push   %eax
f0100f94:	e8 11 fe ff ff       	call   f0100daa <cputchar>
f0100f99:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f9f:	8b 00                	mov    (%eax),%eax
f0100fa1:	89 c2                	mov    %eax,%edx
f0100fa3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100fa6:	01 c2                	add    %eax,%edx
f0100fa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fab:	8b 00                	mov    (%eax),%eax
f0100fad:	89 c1                	mov    %eax,%ecx
f0100faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fb2:	01 c8                	add    %ecx,%eax
f0100fb4:	8a 00                	mov    (%eax),%al
f0100fb6:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fbb:	8b 00                	mov    (%eax),%eax
f0100fbd:	8d 50 01             	lea    0x1(%eax),%edx
f0100fc0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc3:	89 10                	mov    %edx,(%eax)
f0100fc5:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100fcd:	7c b0                	jl     f0100f7f <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100fcf:	8b 45 18             	mov    0x18(%ebp),%eax
f0100fd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100fd5:	89 10                	mov    %edx,(%eax)
}
f0100fd7:	90                   	nop
f0100fd8:	c9                   	leave  
f0100fd9:	c3                   	ret    

f0100fda <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100fda:	55                   	push   %ebp
f0100fdb:	89 e5                	mov    %esp,%ebp
f0100fdd:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fe7:	eb 21                	jmp    f010100a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fec:	c1 e0 0a             	shl    $0xa,%eax
f0100fef:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f0100ff4:	83 ec 04             	sub    $0x4,%esp
f0100ff7:	68 00 04 00 00       	push   $0x400
f0100ffc:	6a 00                	push   $0x0
f0100ffe:	50                   	push   %eax
f0100fff:	e8 86 e2 02 00       	call   f012f28a <memset>
f0101004:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101007:	ff 45 f4             	incl   -0xc(%ebp)
f010100a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010100e:	7e d9                	jle    f0100fe9 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101010:	90                   	nop
f0101011:	c9                   	leave  
f0101012:	c3                   	ret    

f0101013 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101013:	55                   	push   %ebp
f0101014:	89 e5                	mov    %esp,%ebp
f0101016:	57                   	push   %edi
f0101017:	53                   	push   %ebx
f0101018:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f010101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101022:	74 13                	je     f0101037 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101024:	83 ec 08             	sub    $0x8,%esp
f0101027:	ff 75 08             	pushl  0x8(%ebp)
f010102a:	68 08 08 13 f0       	push   $0xf0130808
f010102f:	e8 fd fd ff ff       	call   f0100e31 <cprintf>
f0101034:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0101037:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f010103c:	40                   	inc    %eax
f010103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101040:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f0101047:	00 00 00 
f010104a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101050:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101056:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010105c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f010105f:	83 ec 0c             	sub    $0xc,%esp
f0101062:	6a 00                	push   $0x0
f0101064:	e8 71 fd ff ff       	call   f0100dda <iscons>
f0101069:	83 c4 10             	add    $0x10,%esp
f010106c:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f010106f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f0101076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f010107d:	e8 3f fd ff ff       	call   f0100dc1 <getchar>
f0101082:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f0101085:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010108b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101091:	39 c2                	cmp    %eax,%edx
f0101093:	7e 0c                	jle    f01010a1 <command_prompt_readline+0x8e>
			lastIndex = i;
f0101095:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010109b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01010a1:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01010a5:	79 22                	jns    f01010c9 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01010a7:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01010ab:	0f 84 94 0a 00 00    	je     f0101b45 <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01010b1:	83 ec 08             	sub    $0x8,%esp
f01010b4:	ff 75 94             	pushl  -0x6c(%ebp)
f01010b7:	68 0b 08 13 f0       	push   $0xf013080b
f01010bc:	e8 70 fd ff ff       	call   f0100e31 <cprintf>
f01010c1:	83 c4 10             	add    $0x10,%esp
			return;
f01010c4:	e9 7c 0a 00 00       	jmp    f0101b45 <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f01010c9:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f01010d0:	75 2a                	jne    f01010fc <command_prompt_readline+0xe9>
			if (commandidx)
f01010d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01010d6:	74 03                	je     f01010db <command_prompt_readline+0xc8>
				commandidx--;
f01010d8:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f01010db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01010e1:	50                   	push   %eax
f01010e2:	ff 75 0c             	pushl  0xc(%ebp)
f01010e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01010e8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f01010ee:	50                   	push   %eax
f01010ef:	e8 63 fd ff ff       	call   f0100e57 <clearandwritecommand>
f01010f4:	83 c4 10             	add    $0x10,%esp
f01010f7:	e9 32 0a 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f01010fc:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101103:	75 3b                	jne    f0101140 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f0101105:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f010110a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110d:	7d 03                	jge    f0101112 <command_prompt_readline+0xff>
				commandidx++;
f010110f:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101112:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101117:	85 c0                	test   %eax,%eax
f0101119:	0f 88 0f 0a 00 00    	js     f0101b2e <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010111f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101125:	50                   	push   %eax
f0101126:	ff 75 0c             	pushl  0xc(%ebp)
f0101129:	ff 75 f4             	pushl  -0xc(%ebp)
f010112c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101132:	50                   	push   %eax
f0101133:	e8 1f fd ff ff       	call   f0100e57 <clearandwritecommand>
f0101138:	83 c4 10             	add    $0x10,%esp
f010113b:	e9 ee 09 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101140:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101144:	0f 85 6d 07 00 00    	jne    f01018b7 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010114a:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010114e:	0f 84 fc 06 00 00    	je     f0101850 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101154:	83 ec 08             	sub    $0x8,%esp
f0101157:	6a 64                	push   $0x64
f0101159:	68 80 be 2b f0       	push   $0xf02bbe80
f010115e:	e8 77 fe ff ff       	call   f0100fda <clear_prefix_list>
f0101163:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101166:	83 ec 0c             	sub    $0xc,%esp
f0101169:	ff 75 0c             	pushl  0xc(%ebp)
f010116c:	e8 2b df 02 00       	call   f012f09c <strlen>
f0101171:	83 c4 10             	add    $0x10,%esp
f0101174:	85 c0                	test   %eax,%eax
f0101176:	0f 84 bd 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
f010117c:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101183:	0f 84 b0 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f0101189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101193:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101199:	83 ec 08             	sub    $0x8,%esp
f010119c:	ff 75 0c             	pushl  0xc(%ebp)
f010119f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011a5:	50                   	push   %eax
f01011a6:	e8 40 df 02 00       	call   f012f0eb <strcpy>
f01011ab:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01011ae:	83 ec 0c             	sub    $0xc,%esp
f01011b1:	ff 75 0c             	pushl  0xc(%ebp)
f01011b4:	e8 e3 de 02 00       	call   f012f09c <strlen>
f01011b9:	83 c4 10             	add    $0x10,%esp
f01011bc:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f01011bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01011c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01011c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c8:	01 d0                	add    %edx,%eax
f01011ca:	8a 00                	mov    (%eax),%al
f01011cc:	3c 20                	cmp    $0x20,%al
f01011ce:	0f 84 6b 09 00 00    	je     f0101b3f <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01011d4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01011da:	50                   	push   %eax
f01011db:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f01011e1:	50                   	push   %eax
f01011e2:	68 1b 08 13 f0       	push   $0xf013081b
f01011e7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011ed:	50                   	push   %eax
f01011ee:	e8 dd e4 02 00       	call   f012f6d0 <strsplit>
f01011f3:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01011f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f01011fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101203:	83 f8 01             	cmp    $0x1,%eax
f0101206:	0f 8e 28 01 00 00    	jle    f0101334 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f010120c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101212:	83 ec 08             	sub    $0x8,%esp
f0101215:	68 20 08 13 f0       	push   $0xf0130820
f010121a:	50                   	push   %eax
f010121b:	e8 88 df 02 00       	call   f012f1a8 <strcmp>
f0101220:	83 c4 10             	add    $0x10,%esp
f0101223:	85 c0                	test   %eax,%eax
f0101225:	74 3c                	je     f0101263 <command_prompt_readline+0x250>
f0101227:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010122d:	83 ec 08             	sub    $0x8,%esp
f0101230:	68 24 08 13 f0       	push   $0xf0130824
f0101235:	50                   	push   %eax
f0101236:	e8 6d df 02 00       	call   f012f1a8 <strcmp>
f010123b:	83 c4 10             	add    $0x10,%esp
f010123e:	85 c0                	test   %eax,%eax
f0101240:	74 21                	je     f0101263 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101242:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101248:	83 ec 08             	sub    $0x8,%esp
f010124b:	68 29 08 13 f0       	push   $0xf0130829
f0101250:	50                   	push   %eax
f0101251:	e8 52 df 02 00       	call   f012f1a8 <strcmp>
f0101256:	83 c4 10             	add    $0x10,%esp
f0101259:	85 c0                	test   %eax,%eax
f010125b:	74 06                	je     f0101263 <command_prompt_readline+0x250>
						continue;
f010125d:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010125e:	e9 d6 08 00 00       	jmp    f0101b39 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f0101263:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101269:	83 ec 08             	sub    $0x8,%esp
f010126c:	68 29 08 13 f0       	push   $0xf0130829
f0101271:	50                   	push   %eax
f0101272:	e8 31 df 02 00       	call   f012f1a8 <strcmp>
f0101277:	83 c4 10             	add    $0x10,%esp
f010127a:	85 c0                	test   %eax,%eax
f010127c:	75 09                	jne    f0101287 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f010127e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f0101285:	eb 07                	jmp    f010128e <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f0101287:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f010128e:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101295:	00 00 00 
f0101298:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010129e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01012a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01012a8:	89 d7                	mov    %edx,%edi
f01012aa:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01012ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01012b2:	48                   	dec    %eax
f01012b3:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01012ba:	83 ec 0c             	sub    $0xc,%esp
f01012bd:	50                   	push   %eax
f01012be:	e8 d9 dd 02 00       	call   f012f09c <strlen>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	8b 55 90             	mov    -0x70(%ebp),%edx
f01012c9:	29 c2                	sub    %eax,%edx
f01012cb:	89 d0                	mov    %edx,%eax
f01012cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f01012d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01012d7:	eb 1d                	jmp    f01012f6 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f01012d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012dc:	8d 50 01             	lea    0x1(%eax),%edx
f01012df:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01012e2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01012e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01012e8:	01 ca                	add    %ecx,%edx
f01012ea:	8a 12                	mov    (%edx),%dl
f01012ec:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01012f3:	ff 45 d8             	incl   -0x28(%ebp)
f01012f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f9:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01012fc:	7c db                	jl     f01012d9 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01012fe:	83 ec 08             	sub    $0x8,%esp
f0101301:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101307:	50                   	push   %eax
f0101308:	ff 75 0c             	pushl  0xc(%ebp)
f010130b:	e8 db dd 02 00       	call   f012f0eb <strcpy>
f0101310:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101313:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101319:	48                   	dec    %eax
f010131a:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101321:	83 ec 08             	sub    $0x8,%esp
f0101324:	50                   	push   %eax
f0101325:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010132b:	50                   	push   %eax
f010132c:	e8 ba dd 02 00       	call   f012f0eb <strcpy>
f0101331:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101334:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f010133b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101341:	83 f8 01             	cmp    $0x1,%eax
f0101344:	0f 85 30 01 00 00    	jne    f010147a <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010134a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101351:	e9 0f 01 00 00       	jmp    f0101465 <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101356:	83 ec 0c             	sub    $0xc,%esp
f0101359:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	e8 37 dd 02 00       	call   f012f09c <strlen>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	89 c1                	mov    %eax,%ecx
f010136a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010136d:	89 d0                	mov    %edx,%eax
f010136f:	01 c0                	add    %eax,%eax
f0101371:	01 d0                	add    %edx,%eax
f0101373:	c1 e0 03             	shl    $0x3,%eax
f0101376:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	83 ec 04             	sub    $0x4,%esp
f0101380:	51                   	push   %ecx
f0101381:	50                   	push   %eax
f0101382:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101388:	50                   	push   %eax
f0101389:	e8 52 de 02 00       	call   f012f1e0 <strncmp>
f010138e:	83 c4 10             	add    $0x10,%esp
f0101391:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f0101394:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101398:	0f 85 c4 00 00 00    	jne    f0101462 <command_prompt_readline+0x44f>
							it_str = -1;
f010139e:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01013a5:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013ac:	00 00 00 
f01013af:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013b5:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01013bf:	89 d7                	mov    %edx,%edi
f01013c1:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013c3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ca:	eb 2d                	jmp    f01013f9 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f01013cc:	ff 45 dc             	incl   -0x24(%ebp)
f01013cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d2:	89 d0                	mov    %edx,%eax
f01013d4:	01 c0                	add    %eax,%eax
f01013d6:	01 d0                	add    %edx,%eax
f01013d8:	c1 e0 03             	shl    $0x3,%eax
f01013db:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01013ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013f6:	ff 45 cc             	incl   -0x34(%ebp)
f01013f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013fc:	89 d0                	mov    %edx,%eax
f01013fe:	01 c0                	add    %eax,%eax
f0101400:	01 d0                	add    %edx,%eax
f0101402:	c1 e0 03             	shl    $0x3,%eax
f0101405:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f010140a:	8b 00                	mov    (%eax),%eax
f010140c:	83 ec 0c             	sub    $0xc,%esp
f010140f:	50                   	push   %eax
f0101410:	e8 87 dc 02 00       	call   f012f09c <strlen>
f0101415:	83 c4 10             	add    $0x10,%esp
f0101418:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010141b:	7f af                	jg     f01013cc <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010141d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101420:	c1 e0 0a             	shl    $0xa,%eax
f0101423:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f0101428:	83 ec 04             	sub    $0x4,%esp
f010142b:	68 00 04 00 00       	push   $0x400
f0101430:	6a 00                	push   $0x0
f0101432:	50                   	push   %eax
f0101433:	e8 52 de 02 00       	call   f012f28a <memset>
f0101438:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010143e:	40                   	inc    %eax
f010143f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101442:	c1 e2 0a             	shl    $0xa,%edx
f0101445:	81 c2 80 be 2b f0    	add    $0xf02bbe80,%edx
f010144b:	83 ec 04             	sub    $0x4,%esp
f010144e:	50                   	push   %eax
f010144f:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101455:	50                   	push   %eax
f0101456:	52                   	push   %edx
f0101457:	e8 bd dc 02 00       	call   f012f119 <strncpy>
f010145c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010145f:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101462:	ff 45 d0             	incl   -0x30(%ebp)
f0101465:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101468:	a1 60 e9 18 f0       	mov    0xf018e960,%eax
f010146d:	39 c2                	cmp    %eax,%edx
f010146f:	0f 82 e1 fe ff ff    	jb     f0101356 <command_prompt_readline+0x343>
f0101475:	e9 fe 02 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f010147a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010147e:	0f 84 7b 01 00 00    	je     f01015ff <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101484:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f010148b:	e9 5c 01 00 00       	jmp    f01015ec <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101499:	50                   	push   %eax
f010149a:	e8 fd db 02 00       	call   f012f09c <strlen>
f010149f:	83 c4 10             	add    $0x10,%esp
f01014a2:	89 c1                	mov    %eax,%ecx
f01014a4:	8b 1d 68 ea 18 f0    	mov    0xf018ea68,%ebx
f01014aa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01014ad:	89 d0                	mov    %edx,%eax
f01014af:	01 c0                	add    %eax,%eax
f01014b1:	01 d0                	add    %edx,%eax
f01014b3:	c1 e0 02             	shl    $0x2,%eax
f01014b6:	01 d8                	add    %ebx,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	51                   	push   %ecx
f01014be:	50                   	push   %eax
f01014bf:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014c5:	50                   	push   %eax
f01014c6:	e8 15 dd 02 00       	call   f012f1e0 <strncmp>
f01014cb:	83 c4 10             	add    $0x10,%esp
f01014ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f01014d1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f01014d5:	0f 85 0e 01 00 00    	jne    f01015e9 <command_prompt_readline+0x5d6>
								it_str = -1;
f01014db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01014e2:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014e9:	00 00 00 
f01014ec:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014f2:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01014fc:	89 d7                	mov    %edx,%edi
f01014fe:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101500:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101506:	83 f8 01             	cmp    $0x1,%eax
f0101509:	7e 39                	jle    f0101544 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010150b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101512:	eb 1d                	jmp    f0101531 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101514:	ff 45 dc             	incl   -0x24(%ebp)
f0101517:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010152a:	01 ca                	add    %ecx,%edx
f010152c:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010152e:	ff 45 c4             	incl   -0x3c(%ebp)
f0101531:	83 ec 0c             	sub    $0xc,%esp
f0101534:	ff 75 0c             	pushl  0xc(%ebp)
f0101537:	e8 60 db 02 00       	call   f012f09c <strlen>
f010153c:	83 c4 10             	add    $0x10,%esp
f010153f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101542:	7f d0                	jg     f0101514 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101544:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010154b:	eb 30                	jmp    f010157d <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f010154d:	ff 45 dc             	incl   -0x24(%ebp)
f0101550:	8b 0d 68 ea 18 f0    	mov    0xf018ea68,%ecx
f0101556:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101559:	89 d0                	mov    %edx,%eax
f010155b:	01 c0                	add    %eax,%eax
f010155d:	01 d0                	add    %edx,%eax
f010155f:	c1 e0 02             	shl    $0x2,%eax
f0101562:	01 c8                	add    %ecx,%eax
f0101564:	8b 10                	mov    (%eax),%edx
f0101566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101569:	01 d0                	add    %edx,%eax
f010156b:	8a 00                	mov    (%eax),%al
f010156d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101573:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101576:	01 ca                	add    %ecx,%edx
f0101578:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010157a:	ff 45 c0             	incl   -0x40(%ebp)
f010157d:	8b 0d 68 ea 18 f0    	mov    0xf018ea68,%ecx
f0101583:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101586:	89 d0                	mov    %edx,%eax
f0101588:	01 c0                	add    %eax,%eax
f010158a:	01 d0                	add    %edx,%eax
f010158c:	c1 e0 02             	shl    $0x2,%eax
f010158f:	01 c8                	add    %ecx,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 0c             	sub    $0xc,%esp
f0101596:	50                   	push   %eax
f0101597:	e8 00 db 02 00       	call   f012f09c <strlen>
f010159c:	83 c4 10             	add    $0x10,%esp
f010159f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01015a2:	7f a9                	jg     f010154d <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01015a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a7:	c1 e0 0a             	shl    $0xa,%eax
f01015aa:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f01015af:	83 ec 04             	sub    $0x4,%esp
f01015b2:	68 00 04 00 00       	push   $0x400
f01015b7:	6a 00                	push   $0x0
f01015b9:	50                   	push   %eax
f01015ba:	e8 cb dc 02 00       	call   f012f28a <memset>
f01015bf:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01015c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01015c5:	40                   	inc    %eax
f01015c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01015c9:	c1 e2 0a             	shl    $0xa,%edx
f01015cc:	81 c2 80 be 2b f0    	add    $0xf02bbe80,%edx
f01015d2:	83 ec 04             	sub    $0x4,%esp
f01015d5:	50                   	push   %eax
f01015d6:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01015dc:	50                   	push   %eax
f01015dd:	52                   	push   %edx
f01015de:	e8 36 db 02 00       	call   f012f119 <strncpy>
f01015e3:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01015e6:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015e9:	ff 45 c8             	incl   -0x38(%ebp)
f01015ec:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f01015f1:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f01015f4:	0f 8c 96 fe ff ff    	jl     f0101490 <command_prompt_readline+0x47d>
f01015fa:	e9 79 01 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f01015ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101603:	0f 84 6f 01 00 00    	je     f0101778 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101609:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101610:	e9 53 01 00 00       	jmp    f0101768 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f0101615:	83 ec 0c             	sub    $0xc,%esp
f0101618:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010161e:	50                   	push   %eax
f010161f:	e8 78 da 02 00       	call   f012f09c <strlen>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	89 c1                	mov    %eax,%ecx
f0101629:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010162c:	89 d0                	mov    %edx,%eax
f010162e:	01 c0                	add    %eax,%eax
f0101630:	01 d0                	add    %edx,%eax
f0101632:	c1 e0 02             	shl    $0x2,%eax
f0101635:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f010163a:	8b 00                	mov    (%eax),%eax
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	51                   	push   %ecx
f0101640:	50                   	push   %eax
f0101641:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101647:	50                   	push   %eax
f0101648:	e8 93 db 02 00       	call   f012f1e0 <strncmp>
f010164d:	83 c4 10             	add    $0x10,%esp
f0101650:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101653:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0101657:	0f 85 08 01 00 00    	jne    f0101765 <command_prompt_readline+0x752>
								it_str = -1;
f010165d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101664:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010166b:	00 00 00 
f010166e:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101674:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101679:	b8 00 00 00 00       	mov    $0x0,%eax
f010167e:	89 d7                	mov    %edx,%edi
f0101680:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101682:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101688:	83 f8 01             	cmp    $0x1,%eax
f010168b:	7e 39                	jle    f01016c6 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010168d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0101694:	eb 1d                	jmp    f01016b3 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101696:	ff 45 dc             	incl   -0x24(%ebp)
f0101699:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010169c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010169f:	01 d0                	add    %edx,%eax
f01016a1:	8a 00                	mov    (%eax),%al
f01016a3:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016ac:	01 ca                	add    %ecx,%edx
f01016ae:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016b0:	ff 45 b8             	incl   -0x48(%ebp)
f01016b3:	83 ec 0c             	sub    $0xc,%esp
f01016b6:	ff 75 0c             	pushl  0xc(%ebp)
f01016b9:	e8 de d9 02 00       	call   f012f09c <strlen>
f01016be:	83 c4 10             	add    $0x10,%esp
f01016c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01016c4:	7f d0                	jg     f0101696 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f01016cd:	eb 2d                	jmp    f01016fc <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f01016cf:	ff 45 dc             	incl   -0x24(%ebp)
f01016d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016d5:	89 d0                	mov    %edx,%eax
f01016d7:	01 c0                	add    %eax,%eax
f01016d9:	01 d0                	add    %edx,%eax
f01016db:	c1 e0 02             	shl    $0x2,%eax
f01016de:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f01016e3:	8b 10                	mov    (%eax),%edx
f01016e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e8:	01 d0                	add    %edx,%eax
f01016ea:	8a 00                	mov    (%eax),%al
f01016ec:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016f5:	01 ca                	add    %ecx,%edx
f01016f7:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016ff:	89 d0                	mov    %edx,%eax
f0101701:	01 c0                	add    %eax,%eax
f0101703:	01 d0                	add    %edx,%eax
f0101705:	c1 e0 02             	shl    $0x2,%eax
f0101708:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f010170d:	8b 00                	mov    (%eax),%eax
f010170f:	83 ec 0c             	sub    $0xc,%esp
f0101712:	50                   	push   %eax
f0101713:	e8 84 d9 02 00       	call   f012f09c <strlen>
f0101718:	83 c4 10             	add    $0x10,%esp
f010171b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010171e:	7f af                	jg     f01016cf <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101723:	c1 e0 0a             	shl    $0xa,%eax
f0101726:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	68 00 04 00 00       	push   $0x400
f0101733:	6a 00                	push   $0x0
f0101735:	50                   	push   %eax
f0101736:	e8 4f db 02 00       	call   f012f28a <memset>
f010173b:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010173e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101741:	40                   	inc    %eax
f0101742:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101745:	c1 e2 0a             	shl    $0xa,%edx
f0101748:	81 c2 80 be 2b f0    	add    $0xf02bbe80,%edx
f010174e:	83 ec 04             	sub    $0x4,%esp
f0101751:	50                   	push   %eax
f0101752:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101758:	50                   	push   %eax
f0101759:	52                   	push   %edx
f010175a:	e8 ba d9 02 00       	call   f012f119 <strncpy>
f010175f:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101762:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101765:	ff 45 bc             	incl   -0x44(%ebp)
f0101768:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010176b:	a1 1c eb 18 f0       	mov    0xf018eb1c,%eax
f0101770:	39 c2                	cmp    %eax,%edx
f0101772:	0f 82 9d fe ff ff    	jb     f0101615 <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010177b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010177e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0101782:	0f 84 a6 03 00 00    	je     f0101b2e <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f0101788:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101795:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010179c:	eb 1f                	jmp    f01017bd <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f010179e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017a1:	8d 50 01             	lea    0x1(%eax),%edx
f01017a4:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01017a7:	89 c2                	mov    %eax,%edx
f01017a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ac:	01 c2                	add    %eax,%edx
f01017ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01017b1:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f01017b6:	8a 00                	mov    (%eax),%al
f01017b8:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ba:	ff 45 b0             	incl   -0x50(%ebp)
f01017bd:	83 ec 0c             	sub    $0xc,%esp
f01017c0:	68 80 be 2b f0       	push   $0xf02bbe80
f01017c5:	e8 d2 d8 02 00       	call   f012f09c <strlen>
f01017ca:	83 c4 10             	add    $0x10,%esp
f01017cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01017d0:	7f cc                	jg     f010179e <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017d2:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f01017d9:	eb 10                	jmp    f01017eb <command_prompt_readline+0x7d8>
						cputchar('\b');}
f01017db:	83 ec 0c             	sub    $0xc,%esp
f01017de:	6a 08                	push   $0x8
f01017e0:	e8 c5 f5 ff ff       	call   f0100daa <cputchar>
f01017e5:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017e8:	ff 45 ac             	incl   -0x54(%ebp)
f01017eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01017ee:	3b 45 90             	cmp    -0x70(%ebp),%eax
f01017f1:	7c e8                	jl     f01017db <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01017f3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f01017fa:	eb 1c                	jmp    f0101818 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f01017fc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	01 d0                	add    %edx,%eax
f0101804:	8a 00                	mov    (%eax),%al
f0101806:	0f be c0             	movsbl %al,%eax
f0101809:	83 ec 0c             	sub    $0xc,%esp
f010180c:	50                   	push   %eax
f010180d:	e8 98 f5 ff ff       	call   f0100daa <cputchar>
f0101812:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101815:	ff 45 a8             	incl   -0x58(%ebp)
f0101818:	83 ec 0c             	sub    $0xc,%esp
f010181b:	ff 75 0c             	pushl  0xc(%ebp)
f010181e:	e8 79 d8 02 00       	call   f012f09c <strlen>
f0101823:	83 c4 10             	add    $0x10,%esp
f0101826:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101829:	7f d1                	jg     f01017fc <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f010182b:	83 ec 0c             	sub    $0xc,%esp
f010182e:	ff 75 0c             	pushl  0xc(%ebp)
f0101831:	e8 66 d8 02 00       	call   f012f09c <strlen>
f0101836:	83 c4 10             	add    $0x10,%esp
f0101839:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010183f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101845:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010184b:	e9 de 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101850:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101854:	0f 8e d4 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
f010185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101863:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101866:	40                   	inc    %eax
f0101867:	99                   	cltd   
f0101868:	f7 7d ec             	idivl  -0x14(%ebp)
f010186b:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010186e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101871:	c1 e0 0a             	shl    $0xa,%eax
f0101874:	8d 98 80 be 2b f0    	lea    -0xfd44180(%eax),%ebx
f010187a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0101880:	c1 e0 0a             	shl    $0xa,%eax
f0101883:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f0101888:	83 ec 0c             	sub    $0xc,%esp
f010188b:	50                   	push   %eax
f010188c:	e8 0b d8 02 00       	call   f012f09c <strlen>
f0101891:	83 c4 10             	add    $0x10,%esp
f0101894:	83 ec 0c             	sub    $0xc,%esp
f0101897:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f010189d:	52                   	push   %edx
f010189e:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01018a4:	52                   	push   %edx
f01018a5:	ff 75 0c             	pushl  0xc(%ebp)
f01018a8:	53                   	push   %ebx
f01018a9:	50                   	push   %eax
f01018aa:	e8 75 f6 ff ff       	call   f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>
f01018af:	83 c4 20             	add    $0x20,%esp
f01018b2:	e9 77 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01018b7:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01018be:	75 2e                	jne    f01018ee <command_prompt_readline+0x8db>
			if (i > 0) {
f01018c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018c6:	85 c0                	test   %eax,%eax
f01018c8:	0f 8e 60 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
				i--;
f01018ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018d4:	48                   	dec    %eax
f01018d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f01018db:	83 ec 0c             	sub    $0xc,%esp
f01018de:	ff 75 94             	pushl  -0x6c(%ebp)
f01018e1:	e8 c4 f4 ff ff       	call   f0100daa <cputchar>
f01018e6:	83 c4 10             	add    $0x10,%esp
f01018e9:	e9 40 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f01018ee:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f01018f5:	75 34                	jne    f010192b <command_prompt_readline+0x918>
			if (i < lastIndex) {
f01018f7:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01018fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101903:	39 c2                	cmp    %eax,%edx
f0101905:	0f 8d 23 02 00 00    	jge    f0101b2e <command_prompt_readline+0xb1b>
				i++;
f010190b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101911:	40                   	inc    %eax
f0101912:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	ff 75 94             	pushl  -0x6c(%ebp)
f010191e:	e8 87 f4 ff ff       	call   f0100daa <cputchar>
f0101923:	83 c4 10             	add    $0x10,%esp
f0101926:	e9 03 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010192b:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101932:	75 4c                	jne    f0101980 <command_prompt_readline+0x96d>
f0101934:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193a:	85 c0                	test   %eax,%eax
f010193c:	7e 42                	jle    f0101980 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f010193e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101944:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101947:	eb 1a                	jmp    f0101963 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101949:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010194c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194f:	01 c2                	add    %eax,%edx
f0101951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101954:	8d 48 01             	lea    0x1(%eax),%ecx
f0101957:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195a:	01 c8                	add    %ecx,%eax
f010195c:	8a 00                	mov    (%eax),%al
f010195e:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101960:	ff 45 a4             	incl   -0x5c(%ebp)
f0101963:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101969:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f010196c:	7e db                	jle    f0101949 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f010196e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101974:	48                   	dec    %eax
f0101975:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010197b:	e9 ae 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101980:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101984:	7e 60                	jle    f01019e6 <command_prompt_readline+0x9d3>
f0101986:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010198c:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101991:	7f 53                	jg     f01019e6 <command_prompt_readline+0x9d3>
f0101993:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010199a:	74 4a                	je     f01019e6 <command_prompt_readline+0x9d3>
f010199c:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01019a3:	74 41                	je     f01019e6 <command_prompt_readline+0x9d3>
			if (echoing)
f01019a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019a9:	74 0e                	je     f01019b9 <command_prompt_readline+0x9a6>
				cputchar(c);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 94             	pushl  -0x6c(%ebp)
f01019b1:	e8 f4 f3 ff ff       	call   f0100daa <cputchar>
f01019b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01019b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019bf:	8d 50 01             	lea    0x1(%eax),%edx
f01019c2:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f01019c8:	89 c2                	mov    %eax,%edx
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	01 d0                	add    %edx,%eax
f01019cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01019d2:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01019d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019da:	40                   	inc    %eax
f01019db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e1:	e9 48 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f01019e6:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f01019ea:	75 60                	jne    f0101a4c <command_prompt_readline+0xa39>
f01019ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f2:	85 c0                	test   %eax,%eax
f01019f4:	7e 56                	jle    f0101a4c <command_prompt_readline+0xa39>

			if (echoing)
f01019f6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019fa:	74 0e                	je     f0101a0a <command_prompt_readline+0x9f7>
				cputchar(c);
f01019fc:	83 ec 0c             	sub    $0xc,%esp
f01019ff:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a02:	e8 a3 f3 ff ff       	call   f0100daa <cputchar>
f0101a07:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a10:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a13:	eb 1a                	jmp    f0101a2f <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1e:	01 c2                	add    %eax,%edx
f0101a20:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a26:	01 c8                	add    %ecx,%eax
f0101a28:	8a 00                	mov    (%eax),%al
f0101a2a:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a2c:	ff 45 a0             	incl   -0x60(%ebp)
f0101a2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a35:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101a38:	7e db                	jle    f0101a15 <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101a3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a40:	48                   	dec    %eax
f0101a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101a47:	e9 e2 00 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101a4c:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101a50:	74 0a                	je     f0101a5c <command_prompt_readline+0xa49>
f0101a52:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101a56:	0f 85 d2 00 00 00    	jne    f0101b2e <command_prompt_readline+0xb1b>

			if (echoing)
f0101a5c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a60:	74 0e                	je     f0101a70 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a68:	e8 3d f3 ff ff       	call   f0100daa <cputchar>
f0101a6d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101a70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a76:	89 c2                	mov    %eax,%edx
f0101a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a7b:	01 d0                	add    %edx,%eax
f0101a7d:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101a80:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101a85:	83 f8 13             	cmp    $0x13,%eax
f0101a88:	75 56                	jne    f0101ae0 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101a8a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101a91:	eb 2d                	jmp    f0101ac0 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101a96:	40                   	inc    %eax
f0101a97:	c1 e0 0a             	shl    $0xa,%eax
f0101a9a:	8d 90 80 4e 2d f0    	lea    -0xfd2b180(%eax),%edx
f0101aa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101aa3:	c1 e0 0a             	shl    $0xa,%eax
f0101aa6:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0101aab:	83 ec 04             	sub    $0x4,%esp
f0101aae:	68 00 04 00 00       	push   $0x400
f0101ab3:	52                   	push   %edx
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 00 d8 02 00       	call   f012f2ba <memcpy>
f0101aba:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101abd:	ff 45 9c             	incl   -0x64(%ebp)
f0101ac0:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101ac4:	7e cd                	jle    f0101a93 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101ac6:	83 ec 04             	sub    $0x4,%esp
f0101ac9:	68 00 04 00 00       	push   $0x400
f0101ace:	ff 75 0c             	pushl  0xc(%ebp)
f0101ad1:	68 80 9a 2d f0       	push   $0xf02d9a80
f0101ad6:	e8 df d7 02 00       	call   f012f2ba <memcpy>
f0101adb:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101ade:	eb 68                	jmp    f0101b48 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101ae0:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101ae5:	c1 e0 0a             	shl    $0xa,%eax
f0101ae8:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0101aed:	83 ec 08             	sub    $0x8,%esp
f0101af0:	ff 75 0c             	pushl  0xc(%ebp)
f0101af3:	50                   	push   %eax
f0101af4:	e8 af d6 02 00       	call   f012f1a8 <strcmp>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	85 c0                	test   %eax,%eax
f0101afe:	74 48                	je     f0101b48 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b00:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101b05:	40                   	inc    %eax
f0101b06:	a3 30 e5 18 f0       	mov    %eax,0xf018e530
f0101b0b:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101b10:	c1 e0 0a             	shl    $0xa,%eax
f0101b13:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0101b18:	83 ec 04             	sub    $0x4,%esp
f0101b1b:	68 00 04 00 00       	push   $0x400
f0101b20:	ff 75 0c             	pushl  0xc(%ebp)
f0101b23:	50                   	push   %eax
f0101b24:	e8 91 d7 02 00       	call   f012f2ba <memcpy>
f0101b29:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b2c:	eb 1a                	jmp    f0101b48 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b34:	e9 44 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101b39:	90                   	nop
f0101b3a:	e9 3e f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101b3f:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101b40:	e9 38 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101b45:	90                   	nop
f0101b46:	eb 01                	jmp    f0101b49 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	90                   	nop

		}
		last_c = c;
	}
}
f0101b49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101b4c:	5b                   	pop    %ebx
f0101b4d:	5f                   	pop    %edi
f0101b4e:	5d                   	pop    %ebp
f0101b4f:	c3                   	ret    

f0101b50 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101b50:	55                   	push   %ebp
f0101b51:	89 e5                	mov    %esp,%ebp
f0101b53:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101b59:	c7 05 50 be 2b f0 00 	movl   $0x0,0xf02bbe50
f0101b60:	00 00 00 
f0101b63:	c7 05 54 be 2b f0 00 	movl   $0x0,0xf02bbe54
f0101b6a:	00 00 00 
f0101b6d:	c7 05 5c be 2b f0 00 	movl   $0x0,0xf02bbe5c
f0101b74:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101b77:	83 ec 04             	sub    $0x4,%esp
f0101b7a:	68 00 04 00 00       	push   $0x400
f0101b7f:	6a 00                	push   $0x0
f0101b81:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b87:	50                   	push   %eax
f0101b88:	e8 fd d6 02 00       	call   f012f28a <memset>
f0101b8d:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101b90:	83 ec 08             	sub    $0x8,%esp
f0101b93:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b99:	50                   	push   %eax
f0101b9a:	68 2d 08 13 f0       	push   $0xf013082d
f0101b9f:	e8 6f f4 ff ff       	call   f0101013 <command_prompt_readline>
f0101ba4:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bb0:	50                   	push   %eax
f0101bb1:	e8 0d 00 00 00       	call   f0101bc3 <execute_command>
f0101bb6:	83 c4 10             	add    $0x10,%esp
f0101bb9:	85 c0                	test   %eax,%eax
f0101bbb:	78 02                	js     f0101bbf <run_command_prompt+0x6f>
				break;
	}
f0101bbd:	eb b8                	jmp    f0101b77 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101bbf:	90                   	nop
	}
}
f0101bc0:	90                   	nop
f0101bc1:	c9                   	leave  
f0101bc2:	c3                   	ret    

f0101bc3 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101bc3:	55                   	push   %ebp
f0101bc4:	89 e5                	mov    %esp,%ebp
f0101bc6:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101bc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101bcc:	50                   	push   %eax
f0101bcd:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101bd0:	50                   	push   %eax
f0101bd1:	68 1b 08 13 f0       	push   $0xf013081b
f0101bd6:	ff 75 08             	pushl  0x8(%ebp)
f0101bd9:	e8 f2 da 02 00       	call   f012f6d0 <strsplit>
f0101bde:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101be1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101be4:	85 c0                	test   %eax,%eax
f0101be6:	75 0a                	jne    f0101bf2 <execute_command+0x2f>
		return 0;
f0101be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bed:	e9 a4 02 00 00       	jmp    f0101e96 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101bf5:	83 ec 08             	sub    $0x8,%esp
f0101bf8:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101bfb:	52                   	push   %edx
f0101bfc:	50                   	push   %eax
f0101bfd:	e8 e4 03 00 00       	call   f0101fe6 <process_command>
f0101c02:	83 c4 10             	add    $0x10,%esp
f0101c05:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c08:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c0c:	75 19                	jne    f0101c27 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c11:	83 ec 08             	sub    $0x8,%esp
f0101c14:	50                   	push   %eax
f0101c15:	68 33 08 13 f0       	push   $0xf0130833
f0101c1a:	e8 12 f2 ff ff       	call   f0100e31 <cprintf>
f0101c1f:	83 c4 10             	add    $0x10,%esp
f0101c22:	e9 6a 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c27:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c2b:	75 4f                	jne    f0101c7c <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c2d:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0101c32:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c35:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101c39:	74 17                	je     f0101c52 <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101c3b:	83 ec 04             	sub    $0x4,%esp
f0101c3e:	68 4c 08 13 f0       	push   $0xf013084c
f0101c43:	68 3d 01 00 00       	push   $0x13d
f0101c48:	68 9d 08 13 f0       	push   $0xf013089d
f0101c4d:	e8 5e e5 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101c52:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101c5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c5d:	8b 50 04             	mov    0x4(%eax),%edx
f0101c60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c63:	8b 00                	mov    (%eax),%eax
f0101c65:	83 ec 04             	sub    $0x4,%esp
f0101c68:	52                   	push   %edx
f0101c69:	50                   	push   %eax
f0101c6a:	68 b8 08 13 f0       	push   $0xf01308b8
f0101c6f:	e8 bd f1 ff ff       	call   f0100e31 <cprintf>
f0101c74:	83 c4 10             	add    $0x10,%esp
f0101c77:	e9 15 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101c7c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101c80:	0f 85 e6 01 00 00    	jne    f0101e6c <execute_command+0x2a9>
	{
		int i = 1;
f0101c86:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c8d:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0101c92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101c95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101c99:	75 17                	jne    f0101cb2 <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101c9b:	83 ec 04             	sub    $0x4,%esp
f0101c9e:	68 e8 08 13 f0       	push   $0xf01308e8
f0101ca3:	68 48 01 00 00       	push   $0x148
f0101ca8:	68 9d 08 13 f0       	push   $0xf013089d
f0101cad:	e8 fe e4 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = NULL;
f0101cb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101cb9:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101cc1:	eb 28                	jmp    f0101ceb <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cc6:	8b 10                	mov    (%eax),%edx
f0101cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ccb:	8d 48 01             	lea    0x1(%eax),%ecx
f0101cce:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101cd1:	83 ec 04             	sub    $0x4,%esp
f0101cd4:	52                   	push   %edx
f0101cd5:	50                   	push   %eax
f0101cd6:	68 12 09 13 f0       	push   $0xf0130912
f0101cdb:	e8 51 f1 ff ff       	call   f0100e31 <cprintf>
f0101ce0:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ce3:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101cef:	74 08                	je     f0101cf9 <execute_command+0x136>
f0101cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cf4:	8b 40 10             	mov    0x10(%eax),%eax
f0101cf7:	eb 05                	jmp    f0101cfe <execute_command+0x13b>
f0101cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cfe:	a3 58 be 2b f0       	mov    %eax,0xf02bbe58
f0101d03:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101d08:	85 c0                	test   %eax,%eax
f0101d0a:	75 b7                	jne    f0101cc3 <execute_command+0x100>
f0101d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d10:	75 b1                	jne    f0101cc3 <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d12:	83 ec 08             	sub    $0x8,%esp
f0101d15:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d18:	68 1c 09 13 f0       	push   $0xf013091c
f0101d1d:	e8 0f f1 ff ff       	call   f0100e31 <cprintf>
f0101d22:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d25:	e8 97 f0 ff ff       	call   f0100dc1 <getchar>
f0101d2a:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d2d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d31:	83 ec 0c             	sub    $0xc,%esp
f0101d34:	50                   	push   %eax
f0101d35:	e8 70 f0 ff ff       	call   f0100daa <cputchar>
f0101d3a:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101d3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101d44:	eb 40                	jmp    f0101d86 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101d49:	89 d0                	mov    %edx,%eax
f0101d4b:	c1 e0 02             	shl    $0x2,%eax
f0101d4e:	01 d0                	add    %edx,%eax
f0101d50:	01 c0                	add    %eax,%eax
f0101d52:	89 c2                	mov    %eax,%edx
f0101d54:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d58:	83 e8 30             	sub    $0x30,%eax
f0101d5b:	01 d0                	add    %edx,%eax
f0101d5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101d60:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101d64:	7e 2c                	jle    f0101d92 <execute_command+0x1cf>
f0101d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d69:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101d6c:	7f 24                	jg     f0101d92 <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101d6e:	e8 4e f0 ff ff       	call   f0100dc1 <getchar>
f0101d73:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101d76:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d7a:	83 ec 0c             	sub    $0xc,%esp
f0101d7d:	50                   	push   %eax
f0101d7e:	e8 27 f0 ff ff       	call   f0100daa <cputchar>
f0101d83:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101d86:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101d8a:	7e 06                	jle    f0101d92 <execute_command+0x1cf>
f0101d8c:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101d90:	7e b4                	jle    f0101d46 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101d92:	83 ec 0c             	sub    $0xc,%esp
f0101d95:	6a 0a                	push   $0xa
f0101d97:	e8 0e f0 ff ff       	call   f0100daa <cputchar>
f0101d9c:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101d9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101da3:	0f 8e e8 00 00 00    	jle    f0101e91 <execute_command+0x2ce>
f0101da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101daf:	0f 8f dc 00 00 00    	jg     f0101e91 <execute_command+0x2ce>
		{
			int c = 1;
f0101db5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101dbc:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101dc4:	eb 75                	jmp    f0101e3b <execute_command+0x278>
			{
				if (c++ == selection)
f0101dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101dc9:	8d 50 01             	lea    0x1(%eax),%edx
f0101dcc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101dcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101dd2:	75 5f                	jne    f0101e33 <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd7:	8b 40 0c             	mov    0xc(%eax),%eax
f0101dda:	85 c0                	test   %eax,%eax
f0101ddc:	75 31                	jne    f0101e0f <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de1:	8b 00                	mov    (%eax),%eax
f0101de3:	83 ec 08             	sub    $0x8,%esp
f0101de6:	50                   	push   %eax
f0101de7:	68 7f 09 13 f0       	push   $0xf013097f
f0101dec:	e8 40 f0 ff ff       	call   f0100e31 <cprintf>
f0101df1:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df7:	8b 40 08             	mov    0x8(%eax),%eax
f0101dfa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101dfd:	83 ec 08             	sub    $0x8,%esp
f0101e00:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e03:	51                   	push   %ecx
f0101e04:	52                   	push   %edx
f0101e05:	ff d0                	call   *%eax
f0101e07:	83 c4 10             	add    $0x10,%esp
f0101e0a:	e9 87 00 00 00       	jmp    f0101e96 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e12:	8b 50 04             	mov    0x4(%eax),%edx
f0101e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e18:	8b 00                	mov    (%eax),%eax
f0101e1a:	83 ec 04             	sub    $0x4,%esp
f0101e1d:	52                   	push   %edx
f0101e1e:	50                   	push   %eax
f0101e1f:	68 88 09 13 f0       	push   $0xf0130988
f0101e24:	e8 08 f0 ff ff       	call   f0100e31 <cprintf>
f0101e29:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e31:	eb 63                	jmp    f0101e96 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e33:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e3f:	74 08                	je     f0101e49 <execute_command+0x286>
f0101e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e44:	8b 40 10             	mov    0x10(%eax),%eax
f0101e47:	eb 05                	jmp    f0101e4e <execute_command+0x28b>
f0101e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e4e:	a3 58 be 2b f0       	mov    %eax,0xf02bbe58
f0101e53:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101e58:	85 c0                	test   %eax,%eax
f0101e5a:	0f 85 66 ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e64:	0f 85 5c ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e6a:	eb 25                	jmp    f0101e91 <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101e6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101e6f:	89 d0                	mov    %edx,%eax
f0101e71:	01 c0                	add    %eax,%eax
f0101e73:	01 d0                	add    %edx,%eax
f0101e75:	c1 e0 03             	shl    $0x3,%eax
f0101e78:	05 48 e5 18 f0       	add    $0xf018e548,%eax
f0101e7d:	8b 00                	mov    (%eax),%eax
f0101e7f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e82:	83 ec 08             	sub    $0x8,%esp
f0101e85:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e88:	51                   	push   %ecx
f0101e89:	52                   	push   %edx
f0101e8a:	ff d0                	call   *%eax
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 05                	jmp    f0101e96 <execute_command+0x2d3>
	}
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <subSequence>:
bool subSequence(char* str1, char* substr){
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 28             	sub    $0x28,%esp
	bool res=0;
f0101e9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int len=strlen(str1);
f0101ea5:	83 ec 0c             	sub    $0xc,%esp
f0101ea8:	ff 75 08             	pushl  0x8(%ebp)
f0101eab:	e8 ec d1 02 00       	call   f012f09c <strlen>
f0101eb0:	83 c4 10             	add    $0x10,%esp
f0101eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int subl=strlen(substr);
f0101eb6:	83 ec 0c             	sub    $0xc,%esp
f0101eb9:	ff 75 0c             	pushl  0xc(%ebp)
f0101ebc:	e8 db d1 02 00       	call   f012f09c <strlen>
f0101ec1:	83 c4 10             	add    $0x10,%esp
f0101ec4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int subi=0;
f0101ec7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for (int i=0;i<len;i++){
f0101ece:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ed5:	eb 1e                	jmp    f0101ef5 <subSequence+0x5d>
		if(str1[i]==substr[subi]){
f0101ed7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0101edd:	01 d0                	add    %edx,%eax
f0101edf:	8a 10                	mov    (%eax),%dl
f0101ee1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0101ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ee7:	01 c8                	add    %ecx,%eax
f0101ee9:	8a 00                	mov    (%eax),%al
f0101eeb:	38 c2                	cmp    %al,%dl
f0101eed:	75 03                	jne    f0101ef2 <subSequence+0x5a>
			subi++;
f0101eef:	ff 45 f0             	incl   -0x10(%ebp)
bool subSequence(char* str1, char* substr){
	bool res=0;
	int len=strlen(str1);
	int subl=strlen(substr);
	int subi=0;
	for (int i=0;i<len;i++){
f0101ef2:	ff 45 ec             	incl   -0x14(%ebp)
f0101ef5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ef8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101efb:	7c da                	jl     f0101ed7 <subSequence+0x3f>
		if(str1[i]==substr[subi]){
			subi++;
		}
	}
	if(subi==subl){
f0101efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f00:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101f03:	75 07                	jne    f0101f0c <subSequence+0x74>
		res=1;
f0101f05:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	return res;
f0101f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0101f0f:	c9                   	leave  
f0101f10:	c3                   	ret    

f0101f11 <erase>:
void erase(){
f0101f11:	55                   	push   %ebp
f0101f12:	89 e5                	mov    %esp,%ebp
f0101f14:	83 ec 18             	sub    $0x18,%esp
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101f17:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101f1f:	e9 90 00 00 00       	jmp    f0101fb4 <erase+0xa3>
		LIST_REMOVE(&foundCommands,command);
f0101f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101f28:	75 17                	jne    f0101f41 <erase+0x30>
f0101f2a:	83 ec 04             	sub    $0x4,%esp
f0101f2d:	68 90 09 13 f0       	push   $0xf0130990
f0101f32:	68 8a 01 00 00       	push   $0x18a
f0101f37:	68 9d 08 13 f0       	push   $0xf013089d
f0101f3c:	e8 6f e2 ff ff       	call   f01001b0 <_panic>
f0101f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f44:	8b 40 10             	mov    0x10(%eax),%eax
f0101f47:	85 c0                	test   %eax,%eax
f0101f49:	74 11                	je     f0101f5c <erase+0x4b>
f0101f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f4e:	8b 40 10             	mov    0x10(%eax),%eax
f0101f51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f54:	8b 52 14             	mov    0x14(%edx),%edx
f0101f57:	89 50 14             	mov    %edx,0x14(%eax)
f0101f5a:	eb 0b                	jmp    f0101f67 <erase+0x56>
f0101f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f5f:	8b 40 14             	mov    0x14(%eax),%eax
f0101f62:	a3 54 be 2b f0       	mov    %eax,0xf02bbe54
f0101f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f6a:	8b 40 14             	mov    0x14(%eax),%eax
f0101f6d:	85 c0                	test   %eax,%eax
f0101f6f:	74 11                	je     f0101f82 <erase+0x71>
f0101f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f74:	8b 40 14             	mov    0x14(%eax),%eax
f0101f77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f7a:	8b 52 10             	mov    0x10(%edx),%edx
f0101f7d:	89 50 10             	mov    %edx,0x10(%eax)
f0101f80:	eb 0b                	jmp    f0101f8d <erase+0x7c>
f0101f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f85:	8b 40 10             	mov    0x10(%eax),%eax
f0101f88:	a3 50 be 2b f0       	mov    %eax,0xf02bbe50
f0101f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f90:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0101f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f9a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0101fa1:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0101fa6:	48                   	dec    %eax
f0101fa7:	a3 5c be 2b f0       	mov    %eax,0xf02bbe5c
	}
	return res;
}
void erase(){
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101fac:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fb8:	74 08                	je     f0101fc2 <erase+0xb1>
f0101fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fbd:	8b 40 10             	mov    0x10(%eax),%eax
f0101fc0:	eb 05                	jmp    f0101fc7 <erase+0xb6>
f0101fc2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fc7:	a3 58 be 2b f0       	mov    %eax,0xf02bbe58
f0101fcc:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101fd1:	85 c0                	test   %eax,%eax
f0101fd3:	0f 85 4b ff ff ff    	jne    f0101f24 <erase+0x13>
f0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fdd:	0f 85 41 ff ff ff    	jne    f0101f24 <erase+0x13>
		LIST_REMOVE(&foundCommands,command);
	}
}
f0101fe3:	90                   	nop
f0101fe4:	c9                   	leave  
f0101fe5:	c3                   	ret    

f0101fe6 <process_command>:
int process_command(int number_of_arguments, char** arguments)
{
f0101fe6:	55                   	push   %ebp
f0101fe7:	89 e5                	mov    %esp,%ebp
f0101fe9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");


	int command_found = 0;
f0101fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	erase();
f0101ff3:	e8 19 ff ff ff       	call   f0101f11 <erase>
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0101ff8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fff:	e9 19 02 00 00       	jmp    f010221d <process_command+0x237>
		{
			int strl= strlen(commands[i].name);
f0102004:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102007:	89 d0                	mov    %edx,%eax
f0102009:	01 c0                	add    %eax,%eax
f010200b:	01 d0                	add    %edx,%eax
f010200d:	c1 e0 03             	shl    $0x3,%eax
f0102010:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102015:	8b 00                	mov    (%eax),%eax
f0102017:	83 ec 0c             	sub    $0xc,%esp
f010201a:	50                   	push   %eax
f010201b:	e8 7c d0 02 00       	call   f012f09c <strlen>
f0102020:	83 c4 10             	add    $0x10,%esp
f0102023:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if ((strncmp(arguments[0], commands[i].name,strl)) == 0)
f0102026:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010202c:	89 d0                	mov    %edx,%eax
f010202e:	01 c0                	add    %eax,%eax
f0102030:	01 d0                	add    %edx,%eax
f0102032:	c1 e0 03             	shl    $0x3,%eax
f0102035:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f010203a:	8b 10                	mov    (%eax),%edx
f010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010203f:	8b 00                	mov    (%eax),%eax
f0102041:	83 ec 04             	sub    $0x4,%esp
f0102044:	51                   	push   %ecx
f0102045:	52                   	push   %edx
f0102046:	50                   	push   %eax
f0102047:	e8 94 d1 02 00       	call   f012f1e0 <strncmp>
f010204c:	83 c4 10             	add    $0x10,%esp
f010204f:	85 c0                	test   %eax,%eax
f0102051:	0f 85 f5 00 00 00    	jne    f010214c <process_command+0x166>
			{
				if((number_of_arguments-1)==commands[i].num_of_args||(number_of_arguments>1&&commands[i].num_of_args==-1)){
f0102057:	8b 45 08             	mov    0x8(%ebp),%eax
f010205a:	8d 48 ff             	lea    -0x1(%eax),%ecx
f010205d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102060:	89 d0                	mov    %edx,%eax
f0102062:	01 c0                	add    %eax,%eax
f0102064:	01 d0                	add    %edx,%eax
f0102066:	c1 e0 03             	shl    $0x3,%eax
f0102069:	05 4c e5 18 f0       	add    $0xf018e54c,%eax
f010206e:	8b 00                	mov    (%eax),%eax
f0102070:	39 c1                	cmp    %eax,%ecx
f0102072:	74 1e                	je     f0102092 <process_command+0xac>
f0102074:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102078:	7e 27                	jle    f01020a1 <process_command+0xbb>
f010207a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010207d:	89 d0                	mov    %edx,%eax
f010207f:	01 c0                	add    %eax,%eax
f0102081:	01 d0                	add    %edx,%eax
f0102083:	c1 e0 03             	shl    $0x3,%eax
f0102086:	05 4c e5 18 f0       	add    $0xf018e54c,%eax
f010208b:	8b 00                	mov    (%eax),%eax
f010208d:	83 f8 ff             	cmp    $0xffffffff,%eax
f0102090:	75 0f                	jne    f01020a1 <process_command+0xbb>
					command_found=1;
f0102092:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return i;
f0102099:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010209c:	e9 9e 01 00 00       	jmp    f010223f <process_command+0x259>
				}
				else{
					LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f01020a1:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f01020a7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020aa:	89 c8                	mov    %ecx,%eax
f01020ac:	01 c0                	add    %eax,%eax
f01020ae:	01 c8                	add    %ecx,%eax
f01020b0:	c1 e0 03             	shl    $0x3,%eax
f01020b3:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f01020b8:	89 10                	mov    %edx,(%eax)
f01020ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020bd:	89 d0                	mov    %edx,%eax
f01020bf:	01 c0                	add    %eax,%eax
f01020c1:	01 d0                	add    %edx,%eax
f01020c3:	c1 e0 03             	shl    $0x3,%eax
f01020c6:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f01020cb:	8b 00                	mov    (%eax),%eax
f01020cd:	85 c0                	test   %eax,%eax
f01020cf:	74 1c                	je     f01020ed <process_command+0x107>
f01020d1:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f01020d7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020da:	89 c8                	mov    %ecx,%eax
f01020dc:	01 c0                	add    %eax,%eax
f01020de:	01 c8                	add    %ecx,%eax
f01020e0:	c1 e0 03             	shl    $0x3,%eax
f01020e3:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01020e8:	89 42 10             	mov    %eax,0x10(%edx)
f01020eb:	eb 16                	jmp    f0102103 <process_command+0x11d>
f01020ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020f0:	89 d0                	mov    %edx,%eax
f01020f2:	01 c0                	add    %eax,%eax
f01020f4:	01 d0                	add    %edx,%eax
f01020f6:	c1 e0 03             	shl    $0x3,%eax
f01020f9:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01020fe:	a3 50 be 2b f0       	mov    %eax,0xf02bbe50
f0102103:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102106:	89 d0                	mov    %edx,%eax
f0102108:	01 c0                	add    %eax,%eax
f010210a:	01 d0                	add    %edx,%eax
f010210c:	c1 e0 03             	shl    $0x3,%eax
f010210f:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102114:	a3 54 be 2b f0       	mov    %eax,0xf02bbe54
f0102119:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010211c:	89 d0                	mov    %edx,%eax
f010211e:	01 c0                	add    %eax,%eax
f0102120:	01 d0                	add    %edx,%eax
f0102122:	c1 e0 03             	shl    $0x3,%eax
f0102125:	05 50 e5 18 f0       	add    $0xf018e550,%eax
f010212a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102130:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0102135:	40                   	inc    %eax
f0102136:	a3 5c be 2b f0       	mov    %eax,0xf02bbe5c
					command_found=1;
f010213b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return CMD_INV_NUM_ARGS;
f0102142:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102147:	e9 f3 00 00 00       	jmp    f010223f <process_command+0x259>
				}
			}
			else if(subSequence(commands[i].name,arguments[0])){
f010214c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010214f:	8b 10                	mov    (%eax),%edx
f0102151:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102154:	89 c8                	mov    %ecx,%eax
f0102156:	01 c0                	add    %eax,%eax
f0102158:	01 c8                	add    %ecx,%eax
f010215a:	c1 e0 03             	shl    $0x3,%eax
f010215d:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102162:	8b 00                	mov    (%eax),%eax
f0102164:	83 ec 08             	sub    $0x8,%esp
f0102167:	52                   	push   %edx
f0102168:	50                   	push   %eax
f0102169:	e8 2a fd ff ff       	call   f0101e98 <subSequence>
f010216e:	83 c4 10             	add    $0x10,%esp
f0102171:	85 c0                	test   %eax,%eax
f0102173:	0f 84 a1 00 00 00    	je     f010221a <process_command+0x234>
				command_found=1;
f0102179:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f0102180:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f0102186:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102189:	89 c8                	mov    %ecx,%eax
f010218b:	01 c0                	add    %eax,%eax
f010218d:	01 c8                	add    %ecx,%eax
f010218f:	c1 e0 03             	shl    $0x3,%eax
f0102192:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f0102197:	89 10                	mov    %edx,(%eax)
f0102199:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010219c:	89 d0                	mov    %edx,%eax
f010219e:	01 c0                	add    %eax,%eax
f01021a0:	01 d0                	add    %edx,%eax
f01021a2:	c1 e0 03             	shl    $0x3,%eax
f01021a5:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f01021aa:	8b 00                	mov    (%eax),%eax
f01021ac:	85 c0                	test   %eax,%eax
f01021ae:	74 1c                	je     f01021cc <process_command+0x1e6>
f01021b0:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f01021b6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01021b9:	89 c8                	mov    %ecx,%eax
f01021bb:	01 c0                	add    %eax,%eax
f01021bd:	01 c8                	add    %ecx,%eax
f01021bf:	c1 e0 03             	shl    $0x3,%eax
f01021c2:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01021c7:	89 42 10             	mov    %eax,0x10(%edx)
f01021ca:	eb 16                	jmp    f01021e2 <process_command+0x1fc>
f01021cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021cf:	89 d0                	mov    %edx,%eax
f01021d1:	01 c0                	add    %eax,%eax
f01021d3:	01 d0                	add    %edx,%eax
f01021d5:	c1 e0 03             	shl    $0x3,%eax
f01021d8:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01021dd:	a3 50 be 2b f0       	mov    %eax,0xf02bbe50
f01021e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021e5:	89 d0                	mov    %edx,%eax
f01021e7:	01 c0                	add    %eax,%eax
f01021e9:	01 d0                	add    %edx,%eax
f01021eb:	c1 e0 03             	shl    $0x3,%eax
f01021ee:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01021f3:	a3 54 be 2b f0       	mov    %eax,0xf02bbe54
f01021f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021fb:	89 d0                	mov    %edx,%eax
f01021fd:	01 c0                	add    %eax,%eax
f01021ff:	01 d0                	add    %edx,%eax
f0102201:	c1 e0 03             	shl    $0x3,%eax
f0102204:	05 50 e5 18 f0       	add    $0xf018e550,%eax
f0102209:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010220f:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0102214:	40                   	inc    %eax
f0102215:	a3 5c be 2b f0       	mov    %eax,0xf02bbe5c
	//panic("process_command is not implemented yet");


	int command_found = 0;
	erase();
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f010221a:	ff 45 f0             	incl   -0x10(%ebp)
f010221d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102220:	a1 60 e9 18 f0       	mov    0xf018e960,%eax
f0102225:	39 c2                	cmp    %eax,%edx
f0102227:	0f 82 d7 fd ff ff    	jb     f0102004 <process_command+0x1e>
			else if(subSequence(commands[i].name,arguments[0])){
				command_found=1;
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
			}
		}
	if(command_found==0){
f010222d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102231:	75 07                	jne    f010223a <process_command+0x254>
		return CMD_INVALID;
f0102233:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f0102238:	eb 05                	jmp    f010223f <process_command+0x259>
	}
	return CMD_MATCHED;
f010223a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f010223f:	c9                   	leave  
f0102240:	c3                   	ret    

f0102241 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102241:	55                   	push   %ebp
f0102242:	89 e5                	mov    %esp,%ebp
f0102244:	c7 05 18 be 2b f0 00 	movl   $0x0,0xf02bbe18
f010224b:	00 00 00 
f010224e:	90                   	nop
f010224f:	5d                   	pop    %ebp
f0102250:	c3                   	ret    

f0102251 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102251:	55                   	push   %ebp
f0102252:	89 e5                	mov    %esp,%ebp
f0102254:	c7 05 18 be 2b f0 01 	movl   $0x1,0xf02bbe18
f010225b:	00 00 00 
f010225e:	90                   	nop
f010225f:	5d                   	pop    %ebp
f0102260:	c3                   	ret    

f0102261 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102261:	55                   	push   %ebp
f0102262:	89 e5                	mov    %esp,%ebp
f0102264:	c7 05 18 be 2b f0 02 	movl   $0x2,0xf02bbe18
f010226b:	00 00 00 
f010226e:	90                   	nop
f010226f:	5d                   	pop    %ebp
f0102270:	c3                   	ret    

f0102271 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102271:	55                   	push   %ebp
f0102272:	89 e5                	mov    %esp,%ebp
f0102274:	c7 05 18 be 2b f0 03 	movl   $0x3,0xf02bbe18
f010227b:	00 00 00 
f010227e:	90                   	nop
f010227f:	5d                   	pop    %ebp
f0102280:	c3                   	ret    

f0102281 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102281:	55                   	push   %ebp
f0102282:	89 e5                	mov    %esp,%ebp
f0102284:	c7 05 18 be 2b f0 04 	movl   $0x4,0xf02bbe18
f010228b:	00 00 00 
f010228e:	90                   	nop
f010228f:	5d                   	pop    %ebp
f0102290:	c3                   	ret    

f0102291 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102291:	55                   	push   %ebp
f0102292:	89 e5                	mov    %esp,%ebp
f0102294:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f0102299:	85 c0                	test   %eax,%eax
f010229b:	75 04                	jne    f01022a1 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010229d:	b0 01                	mov    $0x1,%al
f010229f:	eb 02                	jmp    f01022a3 <isKHeapPlacementStrategyCONTALLOC+0x12>
f01022a1:	b0 00                	mov    $0x0,%al
f01022a3:	5d                   	pop    %ebp
f01022a4:	c3                   	ret    

f01022a5 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01022a5:	55                   	push   %ebp
f01022a6:	89 e5                	mov    %esp,%ebp
f01022a8:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022ad:	83 f8 01             	cmp    $0x1,%eax
f01022b0:	75 04                	jne    f01022b6 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f01022b2:	b0 01                	mov    $0x1,%al
f01022b4:	eb 02                	jmp    f01022b8 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f01022b6:	b0 00                	mov    $0x0,%al
f01022b8:	5d                   	pop    %ebp
f01022b9:	c3                   	ret    

f01022ba <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f01022ba:	55                   	push   %ebp
f01022bb:	89 e5                	mov    %esp,%ebp
f01022bd:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022c2:	83 f8 02             	cmp    $0x2,%eax
f01022c5:	75 04                	jne    f01022cb <isKHeapPlacementStrategyBESTFIT+0x11>
f01022c7:	b0 01                	mov    $0x1,%al
f01022c9:	eb 02                	jmp    f01022cd <isKHeapPlacementStrategyBESTFIT+0x13>
f01022cb:	b0 00                	mov    $0x0,%al
f01022cd:	5d                   	pop    %ebp
f01022ce:	c3                   	ret    

f01022cf <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01022cf:	55                   	push   %ebp
f01022d0:	89 e5                	mov    %esp,%ebp
f01022d2:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022d7:	83 f8 03             	cmp    $0x3,%eax
f01022da:	75 04                	jne    f01022e0 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01022dc:	b0 01                	mov    $0x1,%al
f01022de:	eb 02                	jmp    f01022e2 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01022e0:	b0 00                	mov    $0x0,%al
f01022e2:	5d                   	pop    %ebp
f01022e3:	c3                   	ret    

f01022e4 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01022e4:	55                   	push   %ebp
f01022e5:	89 e5                	mov    %esp,%ebp
f01022e7:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022ec:	83 f8 04             	cmp    $0x4,%eax
f01022ef:	75 04                	jne    f01022f5 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01022f1:	b0 01                	mov    $0x1,%al
f01022f3:	eb 02                	jmp    f01022f7 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01022f5:	b0 00                	mov    $0x0,%al
f01022f7:	5d                   	pop    %ebp
f01022f8:	c3                   	ret    

f01022f9 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	c7 05 ec bd 2b f0 01 	movl   $0x1,0xf02bbdec
f0102303:	00 00 00 
f0102306:	90                   	nop
f0102307:	5d                   	pop    %ebp
f0102308:	c3                   	ret    

f0102309 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0102309:	55                   	push   %ebp
f010230a:	89 e5                	mov    %esp,%ebp
f010230c:	c7 05 ec bd 2b f0 02 	movl   $0x2,0xf02bbdec
f0102313:	00 00 00 
f0102316:	90                   	nop
f0102317:	5d                   	pop    %ebp
f0102318:	c3                   	ret    

f0102319 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0102319:	55                   	push   %ebp
f010231a:	89 e5                	mov    %esp,%ebp
f010231c:	c7 05 ec bd 2b f0 03 	movl   $0x3,0xf02bbdec
f0102323:	00 00 00 
f0102326:	90                   	nop
f0102327:	5d                   	pop    %ebp
f0102328:	c3                   	ret    

f0102329 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0102329:	55                   	push   %ebp
f010232a:	89 e5                	mov    %esp,%ebp
f010232c:	c7 05 ec bd 2b f0 04 	movl   $0x4,0xf02bbdec
f0102333:	00 00 00 
f0102336:	90                   	nop
f0102337:	5d                   	pop    %ebp
f0102338:	c3                   	ret    

f0102339 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102339:	55                   	push   %ebp
f010233a:	89 e5                	mov    %esp,%ebp
f010233c:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f0102341:	83 f8 01             	cmp    $0x1,%eax
f0102344:	75 04                	jne    f010234a <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102346:	b0 01                	mov    $0x1,%al
f0102348:	eb 02                	jmp    f010234c <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010234a:	b0 00                	mov    $0x0,%al
f010234c:	5d                   	pop    %ebp
f010234d:	c3                   	ret    

f010234e <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f010234e:	55                   	push   %ebp
f010234f:	89 e5                	mov    %esp,%ebp
f0102351:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f0102356:	83 f8 02             	cmp    $0x2,%eax
f0102359:	75 04                	jne    f010235f <isUHeapPlacementStrategyBESTFIT+0x11>
f010235b:	b0 01                	mov    $0x1,%al
f010235d:	eb 02                	jmp    f0102361 <isUHeapPlacementStrategyBESTFIT+0x13>
f010235f:	b0 00                	mov    $0x0,%al
f0102361:	5d                   	pop    %ebp
f0102362:	c3                   	ret    

f0102363 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102363:	55                   	push   %ebp
f0102364:	89 e5                	mov    %esp,%ebp
f0102366:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f010236b:	83 f8 03             	cmp    $0x3,%eax
f010236e:	75 04                	jne    f0102374 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102370:	b0 01                	mov    $0x1,%al
f0102372:	eb 02                	jmp    f0102376 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102374:	b0 00                	mov    $0x0,%al
f0102376:	5d                   	pop    %ebp
f0102377:	c3                   	ret    

f0102378 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0102378:	55                   	push   %ebp
f0102379:	89 e5                	mov    %esp,%ebp
f010237b:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f0102380:	83 f8 04             	cmp    $0x4,%eax
f0102383:	75 04                	jne    f0102389 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102385:	b0 01                	mov    $0x1,%al
f0102387:	eb 02                	jmp    f010238b <isUHeapPlacementStrategyWORSTFIT+0x13>
f0102389:	b0 00                	mov    $0x0,%al
f010238b:	5d                   	pop    %ebp
f010238c:	c3                   	ret    

f010238d <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010238d:	55                   	push   %ebp
f010238e:	89 e5                	mov    %esp,%ebp
f0102390:	53                   	push   %ebx
f0102391:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102394:	8b 45 08             	mov    0x8(%ebp),%eax
f0102397:	c1 e8 0c             	shr    $0xc,%eax
f010239a:	89 c2                	mov    %eax,%edx
f010239c:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01023a1:	39 c2                	cmp    %eax,%edx
f01023a3:	72 14                	jb     f01023b9 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f01023a5:	83 ec 04             	sub    $0x4,%esp
f01023a8:	68 b0 09 13 f0       	push   $0xf01309b0
f01023ad:	6a 55                	push   $0x55
f01023af:	68 d8 09 13 f0       	push   $0xf01309d8
f01023b4:	e8 f7 dd ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f01023b9:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01023bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01023c2:	c1 e8 0c             	shr    $0xc,%eax
f01023c5:	89 c2                	mov    %eax,%edx
f01023c7:	89 d0                	mov    %edx,%eax
f01023c9:	01 c0                	add    %eax,%eax
f01023cb:	01 d0                	add    %edx,%eax
f01023cd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01023d4:	01 d8                	add    %ebx,%eax
f01023d6:	01 d0                	add    %edx,%eax
f01023d8:	01 c8                	add    %ecx,%eax
}
f01023da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023dd:	c9                   	leave  
f01023de:	c3                   	ret    

f01023df <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f01023df:	55                   	push   %ebp
f01023e0:	89 e5                	mov    %esp,%ebp
f01023e2:	53                   	push   %ebx
f01023e3:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01023e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01023ed:	eb 3b                	jmp    f010242a <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01023ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01023f2:	89 d0                	mov    %edx,%eax
f01023f4:	01 c0                	add    %eax,%eax
f01023f6:	01 d0                	add    %edx,%eax
f01023f8:	c1 e0 03             	shl    $0x3,%eax
f01023fb:	05 44 e5 18 f0       	add    $0xf018e544,%eax
f0102400:	8b 10                	mov    (%eax),%edx
f0102402:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102405:	89 c8                	mov    %ecx,%eax
f0102407:	01 c0                	add    %eax,%eax
f0102409:	01 c8                	add    %ecx,%eax
f010240b:	c1 e0 03             	shl    $0x3,%eax
f010240e:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102413:	8b 00                	mov    (%eax),%eax
f0102415:	83 ec 04             	sub    $0x4,%esp
f0102418:	52                   	push   %edx
f0102419:	50                   	push   %eax
f010241a:	68 7f 12 13 f0       	push   $0xf013127f
f010241f:	e8 0d ea ff ff       	call   f0100e31 <cprintf>
f0102424:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0102427:	ff 45 f4             	incl   -0xc(%ebp)
f010242a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010242d:	a1 60 e9 18 f0       	mov    0xf018e960,%eax
f0102432:	39 c2                	cmp    %eax,%edx
f0102434:	72 b9                	jb     f01023ef <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0102436:	83 ec 0c             	sub    $0xc,%esp
f0102439:	68 88 12 13 f0       	push   $0xf0131288
f010243e:	e8 ee e9 ff ff       	call   f0100e31 <cprintf>
f0102443:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102446:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010244d:	eb 42                	jmp    f0102491 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010244f:	8b 0d 68 ea 18 f0    	mov    0xf018ea68,%ecx
f0102455:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102458:	89 d0                	mov    %edx,%eax
f010245a:	01 c0                	add    %eax,%eax
f010245c:	01 d0                	add    %edx,%eax
f010245e:	c1 e0 02             	shl    $0x2,%eax
f0102461:	01 c8                	add    %ecx,%eax
f0102463:	8b 50 04             	mov    0x4(%eax),%edx
f0102466:	8b 1d 68 ea 18 f0    	mov    0xf018ea68,%ebx
f010246c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010246f:	89 c8                	mov    %ecx,%eax
f0102471:	01 c0                	add    %eax,%eax
f0102473:	01 c8                	add    %ecx,%eax
f0102475:	c1 e0 02             	shl    $0x2,%eax
f0102478:	01 d8                	add    %ebx,%eax
f010247a:	8b 00                	mov    (%eax),%eax
f010247c:	83 ec 04             	sub    $0x4,%esp
f010247f:	52                   	push   %edx
f0102480:	50                   	push   %eax
f0102481:	68 9d 12 13 f0       	push   $0xf013129d
f0102486:	e8 a6 e9 ff ff       	call   f0100e31 <cprintf>
f010248b:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010248e:	ff 45 f4             	incl   -0xc(%ebp)
f0102491:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f0102496:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0102499:	7c b4                	jl     f010244f <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010249b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01024a3:	c9                   	leave  
f01024a4:	c3                   	ret    

f01024a5 <command_str2lower>:
int command_str2lower(int number_of_arguments,char **arguments){
f01024a5:	55                   	push   %ebp
f01024a6:	89 e5                	mov    %esp,%ebp
f01024a8:	83 ec 18             	sub    $0x18,%esp
	char*s=str2lower(arguments[1],arguments[2]);
f01024ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024ae:	83 c0 08             	add    $0x8,%eax
f01024b1:	8b 10                	mov    (%eax),%edx
f01024b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024b6:	83 c0 04             	add    $0x4,%eax
f01024b9:	8b 00                	mov    (%eax),%eax
f01024bb:	83 ec 08             	sub    $0x8,%esp
f01024be:	52                   	push   %edx
f01024bf:	50                   	push   %eax
f01024c0:	e8 df d2 02 00       	call   f012f7a4 <str2lower>
f01024c5:	83 c4 10             	add    $0x10,%esp
f01024c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("%s\n",s);
f01024cb:	83 ec 08             	sub    $0x8,%esp
f01024ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01024d1:	68 b9 12 13 f0       	push   $0xf01312b9
f01024d6:	e8 56 e9 ff ff       	call   f0100e31 <cprintf>
f01024db:	83 c4 10             	add    $0x10,%esp
return 0;
f01024de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024e3:	c9                   	leave  
f01024e4:	c3                   	ret    

f01024e5 <command_kernel_info>:
//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01024e5:	55                   	push   %ebp
f01024e6:	89 e5                	mov    %esp,%ebp
f01024e8:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01024eb:	83 ec 0c             	sub    $0xc,%esp
f01024ee:	68 bd 12 13 f0       	push   $0xf01312bd
f01024f3:	e8 39 e9 ff ff       	call   f0100e31 <cprintf>
f01024f8:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01024fb:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102500:	83 ec 04             	sub    $0x4,%esp
f0102503:	50                   	push   %eax
f0102504:	68 0c 00 10 f0       	push   $0xf010000c
f0102509:	68 d8 12 13 f0       	push   $0xf01312d8
f010250e:	e8 1e e9 ff ff       	call   f0100e31 <cprintf>
f0102513:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0102516:	b8 4d 06 13 00       	mov    $0x13064d,%eax
f010251b:	83 ec 04             	sub    $0x4,%esp
f010251e:	50                   	push   %eax
f010251f:	68 4d 06 13 f0       	push   $0xf013064d
f0102524:	68 14 13 13 f0       	push   $0xf0131314
f0102529:	e8 03 e9 ff ff       	call   f0100e31 <cprintf>
f010252e:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0102531:	b8 06 2f 25 00       	mov    $0x252f06,%eax
f0102536:	83 ec 04             	sub    $0x4,%esp
f0102539:	50                   	push   %eax
f010253a:	68 06 2f 25 f0       	push   $0xf0252f06
f010253f:	68 50 13 13 f0       	push   $0xf0131350
f0102544:	e8 e8 e8 ff ff       	call   f0100e31 <cprintf>
f0102549:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010254c:	b8 8c e5 2d 00       	mov    $0x2de58c,%eax
f0102551:	83 ec 04             	sub    $0x4,%esp
f0102554:	50                   	push   %eax
f0102555:	68 8c e5 2d f0       	push   $0xf02de58c
f010255a:	68 98 13 13 f0       	push   $0xf0131398
f010255f:	e8 cd e8 ff ff       	call   f0100e31 <cprintf>
f0102564:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0102567:	b8 8c e5 2d f0       	mov    $0xf02de58c,%eax
f010256c:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0102572:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0102577:	29 c2                	sub    %eax,%edx
f0102579:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010257b:	85 c0                	test   %eax,%eax
f010257d:	79 05                	jns    f0102584 <command_kernel_info+0x9f>
f010257f:	05 ff 03 00 00       	add    $0x3ff,%eax
f0102584:	c1 f8 0a             	sar    $0xa,%eax
f0102587:	83 ec 08             	sub    $0x8,%esp
f010258a:	50                   	push   %eax
f010258b:	68 d4 13 13 f0       	push   $0xf01313d4
f0102590:	e8 9c e8 ff ff       	call   f0100e31 <cprintf>
f0102595:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0102598:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259d:	c9                   	leave  
f010259e:	c3                   	ret    

f010259f <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f010259f:	55                   	push   %ebp
f01025a0:	89 e5                	mov    %esp,%ebp
f01025a2:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01025a5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01025a9:	75 37                	jne    f01025e2 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01025ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ae:	83 c0 04             	add    $0x4,%eax
f01025b1:	8b 00                	mov    (%eax),%eax
f01025b3:	83 ec 04             	sub    $0x4,%esp
f01025b6:	6a 10                	push   $0x10
f01025b8:	6a 00                	push   $0x0
f01025ba:	50                   	push   %eax
f01025bb:	e8 3c ce 02 00       	call   f012f3fc <strtol>
f01025c0:	83 c4 10             	add    $0x10,%esp
f01025c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01025c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01025c9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01025cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025cf:	83 c0 08             	add    $0x8,%eax
f01025d2:	8b 00                	mov    (%eax),%eax
f01025d4:	8a 00                	mov    (%eax),%al
f01025d6:	88 c2                	mov    %al,%dl
f01025d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01025db:	88 10                	mov    %dl,(%eax)
f01025dd:	e9 bc 00 00 00       	jmp    f010269e <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01025e2:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01025e6:	0f 85 a2 00 00 00    	jne    f010268e <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01025ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ef:	83 c0 04             	add    $0x4,%eax
f01025f2:	8b 00                	mov    (%eax),%eax
f01025f4:	83 ec 04             	sub    $0x4,%esp
f01025f7:	6a 0a                	push   $0xa
f01025f9:	6a 00                	push   $0x0
f01025fb:	50                   	push   %eax
f01025fc:	e8 fb cd 02 00       	call   f012f3fc <strtol>
f0102601:	83 c4 10             	add    $0x10,%esp
f0102604:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102607:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010260e:	83 ec 04             	sub    $0x4,%esp
f0102611:	6a 00                	push   $0x0
f0102613:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102616:	50                   	push   %eax
f0102617:	ff 75 f4             	pushl  -0xc(%ebp)
f010261a:	e8 4b 74 00 00       	call   f0109a6a <envid2env>
f010261f:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102622:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102625:	83 c0 08             	add    $0x8,%eax
f0102628:	8b 00                	mov    (%eax),%eax
f010262a:	83 ec 04             	sub    $0x4,%esp
f010262d:	6a 10                	push   $0x10
f010262f:	6a 00                	push   $0x0
f0102631:	50                   	push   %eax
f0102632:	e8 c5 cd 02 00       	call   f012f3fc <strtol>
f0102637:	83 c4 10             	add    $0x10,%esp
f010263a:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010263d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102640:	85 c0                	test   %eax,%eax
f0102642:	75 07                	jne    f010264b <command_writeusermem+0xac>
f0102644:	b8 00 00 00 00       	mov    $0x0,%eax
f0102649:	eb 58                	jmp    f01026a3 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010264b:	0f 20 d8             	mov    %cr3,%eax
f010264e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102651:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102654:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0102657:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010265a:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102660:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102663:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102666:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102669:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010266c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f010266f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102672:	83 c0 0c             	add    $0xc,%eax
f0102675:	8b 00                	mov    (%eax),%eax
f0102677:	8a 00                	mov    (%eax),%al
f0102679:	88 c2                	mov    %al,%dl
f010267b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010267e:	88 10                	mov    %dl,(%eax)
f0102680:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102683:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102686:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102689:	0f 22 d8             	mov    %eax,%cr3
f010268c:	eb 10                	jmp    f010269e <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f010268e:	83 ec 0c             	sub    $0xc,%esp
f0102691:	68 00 14 13 f0       	push   $0xf0131400
f0102696:	e8 96 e7 ff ff       	call   f0100e31 <cprintf>
f010269b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010269e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a3:	c9                   	leave  
f01026a4:	c3                   	ret    

f01026a5 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01026a5:	55                   	push   %ebp
f01026a6:	89 e5                	mov    %esp,%ebp
f01026a8:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01026ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026ae:	83 c0 04             	add    $0x4,%eax
f01026b1:	8b 00                	mov    (%eax),%eax
f01026b3:	83 ec 04             	sub    $0x4,%esp
f01026b6:	6a 10                	push   $0x10
f01026b8:	6a 00                	push   $0x0
f01026ba:	50                   	push   %eax
f01026bb:	e8 3c cd 02 00       	call   f012f3fc <strtol>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01026c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f01026cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f01026d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026d5:	83 c0 08             	add    $0x8,%eax
f01026d8:	8b 00                	mov    (%eax),%eax
f01026da:	83 ec 0c             	sub    $0xc,%esp
f01026dd:	50                   	push   %eax
f01026de:	e8 b9 c9 02 00       	call   f012f09c <strlen>
f01026e3:	83 c4 10             	add    $0x10,%esp
f01026e6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f01026e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01026f0:	eb 1c                	jmp    f010270e <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f01026f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026f5:	83 c0 08             	add    $0x8,%eax
f01026f8:	8b 10                	mov    (%eax),%edx
f01026fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01026fd:	01 d0                	add    %edx,%eax
f01026ff:	8a 00                	mov    (%eax),%al
f0102701:	88 c2                	mov    %al,%dl
f0102703:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102706:	88 10                	mov    %dl,(%eax)
		address++;
f0102708:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010270b:	ff 45 f0             	incl   -0x10(%ebp)
f010270e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102711:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102714:	7c dc                	jl     f01026f2 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f0102716:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010271b:	c9                   	leave  
f010271c:	c3                   	ret    

f010271d <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f010271d:	55                   	push   %ebp
f010271e:	89 e5                	mov    %esp,%ebp
f0102720:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102723:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102727:	75 42                	jne    f010276b <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0102729:	8b 45 0c             	mov    0xc(%ebp),%eax
f010272c:	83 c0 04             	add    $0x4,%eax
f010272f:	8b 00                	mov    (%eax),%eax
f0102731:	83 ec 04             	sub    $0x4,%esp
f0102734:	6a 10                	push   $0x10
f0102736:	6a 00                	push   $0x0
f0102738:	50                   	push   %eax
f0102739:	e8 be cc 02 00       	call   f012f3fc <strtol>
f010273e:	83 c4 10             	add    $0x10,%esp
f0102741:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0102744:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102747:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010274a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010274d:	8a 00                	mov    (%eax),%al
f010274f:	0f b6 c0             	movzbl %al,%eax
f0102752:	83 ec 04             	sub    $0x4,%esp
f0102755:	50                   	push   %eax
f0102756:	ff 75 d8             	pushl  -0x28(%ebp)
f0102759:	68 2a 14 13 f0       	push   $0xf013142a
f010275e:	e8 ce e6 ff ff       	call   f0100e31 <cprintf>
f0102763:	83 c4 10             	add    $0x10,%esp
f0102766:	e9 c7 00 00 00       	jmp    f0102832 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010276b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010276f:	0f 85 ad 00 00 00    	jne    f0102822 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102775:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102778:	83 c0 04             	add    $0x4,%eax
f010277b:	8b 00                	mov    (%eax),%eax
f010277d:	83 ec 04             	sub    $0x4,%esp
f0102780:	6a 0a                	push   $0xa
f0102782:	6a 00                	push   $0x0
f0102784:	50                   	push   %eax
f0102785:	e8 72 cc 02 00       	call   f012f3fc <strtol>
f010278a:	83 c4 10             	add    $0x10,%esp
f010278d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102790:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102797:	83 ec 04             	sub    $0x4,%esp
f010279a:	6a 00                	push   $0x0
f010279c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010279f:	50                   	push   %eax
f01027a0:	ff 75 f4             	pushl  -0xc(%ebp)
f01027a3:	e8 c2 72 00 00       	call   f0109a6a <envid2env>
f01027a8:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01027ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027ae:	83 c0 08             	add    $0x8,%eax
f01027b1:	8b 00                	mov    (%eax),%eax
f01027b3:	83 ec 04             	sub    $0x4,%esp
f01027b6:	6a 10                	push   $0x10
f01027b8:	6a 00                	push   $0x0
f01027ba:	50                   	push   %eax
f01027bb:	e8 3c cc 02 00       	call   f012f3fc <strtol>
f01027c0:	83 c4 10             	add    $0x10,%esp
f01027c3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01027c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027c9:	85 c0                	test   %eax,%eax
f01027cb:	75 07                	jne    f01027d4 <command_readusermem+0xb7>
f01027cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01027d2:	eb 63                	jmp    f0102837 <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01027d4:	0f 20 d8             	mov    %cr3,%eax
f01027d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01027da:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01027dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01027e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027e3:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01027e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01027ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01027ef:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01027f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01027f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f01027f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01027fb:	8a 00                	mov    (%eax),%al
f01027fd:	0f b6 c0             	movzbl %al,%eax
f0102800:	83 ec 04             	sub    $0x4,%esp
f0102803:	50                   	push   %eax
f0102804:	ff 75 f0             	pushl  -0x10(%ebp)
f0102807:	68 2a 14 13 f0       	push   $0xf013142a
f010280c:	e8 20 e6 ff ff       	call   f0100e31 <cprintf>
f0102811:	83 c4 10             	add    $0x10,%esp
f0102814:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102817:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010281a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010281d:	0f 22 d8             	mov    %eax,%cr3
f0102820:	eb 10                	jmp    f0102832 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102822:	83 ec 0c             	sub    $0xc,%esp
f0102825:	68 44 14 13 f0       	push   $0xf0131444
f010282a:	e8 02 e6 ff ff       	call   f0100e31 <cprintf>
f010282f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102832:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102837:	c9                   	leave  
f0102838:	c3                   	ret    

f0102839 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0102839:	55                   	push   %ebp
f010283a:	89 e5                	mov    %esp,%ebp
f010283c:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010283f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102842:	83 c0 04             	add    $0x4,%eax
f0102845:	8b 00                	mov    (%eax),%eax
f0102847:	83 ec 04             	sub    $0x4,%esp
f010284a:	6a 10                	push   $0x10
f010284c:	6a 00                	push   $0x0
f010284e:	50                   	push   %eax
f010284f:	e8 a8 cb 02 00       	call   f012f3fc <strtol>
f0102854:	83 c4 10             	add    $0x10,%esp
f0102857:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010285c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f010285f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102866:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102869:	8a 00                	mov    (%eax),%al
f010286b:	0f b6 c0             	movzbl %al,%eax
f010286e:	83 ec 08             	sub    $0x8,%esp
f0102871:	50                   	push   %eax
f0102872:	68 6e 14 13 f0       	push   $0xf013146e
f0102877:	e8 b5 e5 ff ff       	call   f0100e31 <cprintf>
f010287c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010287f:	83 ec 0c             	sub    $0xc,%esp
f0102882:	68 71 14 13 f0       	push   $0xf0131471
f0102887:	e8 a5 e5 ff ff       	call   f0100e31 <cprintf>
f010288c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010288f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102894:	c9                   	leave  
f0102895:	c3                   	ret    

f0102896 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102896:	55                   	push   %ebp
f0102897:	89 e5                	mov    %esp,%ebp
f0102899:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 04             	sub    $0x4,%esp
f01028a7:	6a 0a                	push   $0xa
f01028a9:	6a 00                	push   $0x0
f01028ab:	50                   	push   %eax
f01028ac:	e8 4b cb 02 00       	call   f012f3fc <strtol>
f01028b1:	83 c4 10             	add    $0x10,%esp
f01028b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01028b7:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01028be:	83 ec 04             	sub    $0x4,%esp
f01028c1:	6a 00                	push   $0x0
f01028c3:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01028c6:	50                   	push   %eax
f01028c7:	ff 75 ec             	pushl  -0x14(%ebp)
f01028ca:	e8 9b 71 00 00       	call   f0109a6a <envid2env>
f01028cf:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f01028d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028d5:	83 c0 08             	add    $0x8,%eax
f01028d8:	8b 00                	mov    (%eax),%eax
f01028da:	83 ec 04             	sub    $0x4,%esp
f01028dd:	6a 10                	push   $0x10
f01028df:	6a 00                	push   $0x0
f01028e1:	50                   	push   %eax
f01028e2:	e8 15 cb 02 00       	call   f012f3fc <strtol>
f01028e7:	83 c4 10             	add    $0x10,%esp
f01028ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01028ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028f0:	83 c0 0c             	add    $0xc,%eax
f01028f3:	8b 00                	mov    (%eax),%eax
f01028f5:	83 ec 04             	sub    $0x4,%esp
f01028f8:	6a 0a                	push   $0xa
f01028fa:	6a 00                	push   $0x0
f01028fc:	50                   	push   %eax
f01028fd:	e8 fa ca 02 00       	call   f012f3fc <strtol>
f0102902:	83 c4 10             	add    $0x10,%esp
f0102905:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0102908:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010290b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010290e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102911:	85 c0                	test   %eax,%eax
f0102913:	75 07                	jne    f010291c <command_readuserblock+0x86>
f0102915:	b8 00 00 00 00       	mov    $0x0,%eax
f010291a:	eb 68                	jmp    f0102984 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010291c:	0f 20 d8             	mov    %cr3,%eax
f010291f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102922:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102925:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0102928:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010292b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102931:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102934:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102937:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010293a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102941:	eb 28                	jmp    f010296b <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102943:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102946:	8a 00                	mov    (%eax),%al
f0102948:	0f b6 d0             	movzbl %al,%edx
f010294b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010294e:	8a 00                	mov    (%eax),%al
f0102950:	0f b6 c0             	movzbl %al,%eax
f0102953:	52                   	push   %edx
f0102954:	50                   	push   %eax
f0102955:	ff 75 f4             	pushl  -0xc(%ebp)
f0102958:	68 73 14 13 f0       	push   $0xf0131473
f010295d:	e8 cf e4 ff ff       	call   f0100e31 <cprintf>
f0102962:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102965:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102968:	ff 45 f0             	incl   -0x10(%ebp)
f010296b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010296e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102971:	7c d0                	jl     f0102943 <command_readuserblock+0xad>
f0102973:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102976:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102979:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010297c:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f010297f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102984:	c9                   	leave  
f0102985:	c3                   	ret    

f0102986 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102986:	55                   	push   %ebp
f0102987:	89 e5                	mov    %esp,%ebp
f0102989:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010298c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010298f:	83 c0 04             	add    $0x4,%eax
f0102992:	8b 00                	mov    (%eax),%eax
f0102994:	83 ec 04             	sub    $0x4,%esp
f0102997:	6a 0a                	push   $0xa
f0102999:	6a 00                	push   $0x0
f010299b:	50                   	push   %eax
f010299c:	e8 5b ca 02 00       	call   f012f3fc <strtol>
f01029a1:	83 c4 10             	add    $0x10,%esp
f01029a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01029a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01029ae:	83 ec 04             	sub    $0x4,%esp
f01029b1:	6a 00                	push   $0x0
f01029b3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01029b6:	50                   	push   %eax
f01029b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01029ba:	e8 ab 70 00 00       	call   f0109a6a <envid2env>
f01029bf:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01029c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029c5:	85 c0                	test   %eax,%eax
f01029c7:	75 0a                	jne    f01029d3 <command_remove_table+0x4d>
f01029c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ce:	e9 aa 00 00 00       	jmp    f0102a7d <command_remove_table+0xf7>

	uint32 address = strtol(arguments[2], NULL, 16);
f01029d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029d6:	83 c0 08             	add    $0x8,%eax
f01029d9:	8b 00                	mov    (%eax),%eax
f01029db:	83 ec 04             	sub    $0x4,%esp
f01029de:	6a 10                	push   $0x10
f01029e0:	6a 00                	push   $0x0
f01029e2:	50                   	push   %eax
f01029e3:	e8 14 ca 02 00       	call   f012f3fc <strtol>
f01029e8:	83 c4 10             	add    $0x10,%esp
f01029eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01029ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01029f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01029f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029f7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01029fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102a00:	c1 ea 16             	shr    $0x16,%edx
f0102a03:	c1 e2 02             	shl    $0x2,%edx
f0102a06:	01 d0                	add    %edx,%eax
f0102a08:	8b 00                	mov    (%eax),%eax
f0102a0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102a0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102a12:	83 ec 0c             	sub    $0xc,%esp
f0102a15:	ff 75 e8             	pushl  -0x18(%ebp)
f0102a18:	e8 70 f9 ff ff       	call   f010238d <to_frame_info>
f0102a1d:	83 c4 10             	add    $0x10,%esp
f0102a20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102a23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a26:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102a2c:	83 ec 0c             	sub    $0xc,%esp
f0102a2f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102a32:	e8 06 4a 00 00       	call   f010743d <free_frame>
f0102a37:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102a3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a3d:	c1 e8 16             	shr    $0x16,%eax
f0102a40:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102a43:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a46:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a4c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102a4f:	c1 e2 02             	shl    $0x2,%edx
f0102a52:	01 c2                	add    %eax,%edx
f0102a54:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a57:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a5d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102a60:	c1 e1 02             	shl    $0x2,%ecx
f0102a63:	01 c8                	add    %ecx,%eax
f0102a65:	8b 00                	mov    (%eax),%eax
f0102a67:	83 e0 fe             	and    $0xfffffffe,%eax
f0102a6a:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102a6c:	0f 20 d8             	mov    %cr3,%eax
f0102a6f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102a72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102a75:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102a78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a7d:	c9                   	leave  
f0102a7e:	c3                   	ret    

f0102a7f <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102a7f:	55                   	push   %ebp
f0102a80:	89 e5                	mov    %esp,%ebp
f0102a82:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102a85:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a89:	7e 06                	jle    f0102a91 <command_allocuserpage+0x12>
f0102a8b:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102a8f:	7e 1a                	jle    f0102aab <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102a91:	83 ec 0c             	sub    $0xc,%esp
f0102a94:	68 84 14 13 f0       	push   $0xf0131484
f0102a99:	e8 93 e3 ff ff       	call   f0100e31 <cprintf>
f0102a9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102aa1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aa6:	e9 4c 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 04             	sub    $0x4,%esp
f0102ab6:	6a 0a                	push   $0xa
f0102ab8:	6a 00                	push   $0x0
f0102aba:	50                   	push   %eax
f0102abb:	e8 3c c9 02 00       	call   f012f3fc <strtol>
f0102ac0:	83 c4 10             	add    $0x10,%esp
f0102ac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102ac6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102acd:	83 ec 04             	sub    $0x4,%esp
f0102ad0:	6a 00                	push   $0x0
f0102ad2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102ad5:	50                   	push   %eax
f0102ad6:	ff 75 f0             	pushl  -0x10(%ebp)
f0102ad9:	e8 8c 6f 00 00       	call   f0109a6a <envid2env>
f0102ade:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102ae1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102ae4:	85 c0                	test   %eax,%eax
f0102ae6:	75 0a                	jne    f0102af2 <command_allocuserpage+0x73>
f0102ae8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aed:	e9 05 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102af2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af5:	83 c0 08             	add    $0x8,%eax
f0102af8:	8b 00                	mov    (%eax),%eax
f0102afa:	83 ec 04             	sub    $0x4,%esp
f0102afd:	6a 10                	push   $0x10
f0102aff:	6a 00                	push   $0x0
f0102b01:	50                   	push   %eax
f0102b02:	e8 f5 c8 02 00       	call   f012f3fc <strtol>
f0102b07:	83 c4 10             	add    $0x10,%esp
f0102b0a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102b0d:	83 ec 0c             	sub    $0xc,%esp
f0102b10:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102b13:	50                   	push   %eax
f0102b14:	e8 0c 48 00 00       	call   f0107325 <allocate_frame>
f0102b19:	83 c4 10             	add    $0x10,%esp
f0102b1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102b1f:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102b23:	75 1a                	jne    f0102b3f <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102b25:	83 ec 0c             	sub    $0xc,%esp
f0102b28:	68 ae 14 13 f0       	push   $0xf01314ae
f0102b2d:	e8 ff e2 ff ff       	call   f0100e31 <cprintf>
f0102b32:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b35:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b3a:	e9 b8 00 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102b3f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b43:	75 20                	jne    f0102b65 <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102b45:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102b48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102b4b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102b51:	6a 06                	push   $0x6
f0102b53:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b56:	52                   	push   %edx
f0102b57:	50                   	push   %eax
f0102b58:	e8 63 4b 00 00       	call   f01076c0 <map_frame>
f0102b5d:	83 c4 10             	add    $0x10,%esp
f0102b60:	e9 8d 00 00 00       	jmp    f0102bf2 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102b65:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b69:	0f 85 83 00 00 00    	jne    f0102bf2 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b72:	83 c0 0c             	add    $0xc,%eax
f0102b75:	8b 00                	mov    (%eax),%eax
f0102b77:	8a 00                	mov    (%eax),%al
f0102b79:	3c 72                	cmp    $0x72,%al
f0102b7b:	74 0e                	je     f0102b8b <command_allocuserpage+0x10c>
f0102b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b80:	83 c0 0c             	add    $0xc,%eax
f0102b83:	8b 00                	mov    (%eax),%eax
f0102b85:	8a 00                	mov    (%eax),%al
f0102b87:	3c 52                	cmp    $0x52,%al
f0102b89:	75 09                	jne    f0102b94 <command_allocuserpage+0x115>
			rw = 0 ;
f0102b8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102b92:	eb 3c                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102b94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b97:	83 c0 0c             	add    $0xc,%eax
f0102b9a:	8b 00                	mov    (%eax),%eax
f0102b9c:	8a 00                	mov    (%eax),%al
f0102b9e:	3c 77                	cmp    $0x77,%al
f0102ba0:	74 0e                	je     f0102bb0 <command_allocuserpage+0x131>
f0102ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba5:	83 c0 0c             	add    $0xc,%eax
f0102ba8:	8b 00                	mov    (%eax),%eax
f0102baa:	8a 00                	mov    (%eax),%al
f0102bac:	3c 57                	cmp    $0x57,%al
f0102bae:	75 09                	jne    f0102bb9 <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f0102bb0:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102bb7:	eb 17                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102bb9:	83 ec 0c             	sub    $0xc,%esp
f0102bbc:	68 c8 14 13 f0       	push   $0xf01314c8
f0102bc1:	e8 6b e2 ff ff       	call   f0100e31 <cprintf>
f0102bc6:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102bc9:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bd3:	83 c8 04             	or     $0x4,%eax
f0102bd6:	89 c1                	mov    %eax,%ecx
f0102bd8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102bdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bde:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102be4:	51                   	push   %ecx
f0102be5:	ff 75 ec             	pushl  -0x14(%ebp)
f0102be8:	52                   	push   %edx
f0102be9:	50                   	push   %eax
f0102bea:	e8 d1 4a 00 00       	call   f01076c0 <map_frame>
f0102bef:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102bf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf7:	c9                   	leave  
f0102bf8:	c3                   	ret    

f0102bf9 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102bf9:	55                   	push   %ebp
f0102bfa:	89 e5                	mov    %esp,%ebp
f0102bfc:	56                   	push   %esi
f0102bfd:	53                   	push   %ebx
f0102bfe:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102c01:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102c04:	83 ec 0c             	sub    $0xc,%esp
f0102c07:	50                   	push   %eax
f0102c08:	e8 23 4d 00 00       	call   f0107930 <calculate_available_frames>
f0102c0d:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c10:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102c13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102c16:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102c19:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102c1c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102c1f:	01 de                	add    %ebx,%esi
f0102c21:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c24:	01 f3                	add    %esi,%ebx
f0102c26:	83 ec 0c             	sub    $0xc,%esp
f0102c29:	51                   	push   %ecx
f0102c2a:	52                   	push   %edx
f0102c2b:	50                   	push   %eax
f0102c2c:	53                   	push   %ebx
f0102c2d:	68 0c 15 13 f0       	push   $0xf013150c
f0102c32:	e8 fa e1 ff ff       	call   f0100e31 <cprintf>
f0102c37:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102c3a:	a1 28 be 2b f0       	mov    0xf02bbe28,%eax
f0102c3f:	83 ec 08             	sub    $0x8,%esp
f0102c42:	50                   	push   %eax
f0102c43:	68 64 15 13 f0       	push   $0xf0131564
f0102c48:	e8 e4 e1 ff ff       	call   f0100e31 <cprintf>
f0102c4d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102c50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c55:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102c58:	5b                   	pop    %ebx
f0102c59:	5e                   	pop    %esi
f0102c5a:	5d                   	pop    %ebp
f0102c5b:	c3                   	ret    

f0102c5c <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102c5c:	55                   	push   %ebp
f0102c5d:	89 e5                	mov    %esp,%ebp
f0102c5f:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102c62:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102c69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102c70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f0102c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c7a:	83 f8 02             	cmp    $0x2,%eax
f0102c7d:	74 39                	je     f0102cb8 <CreateEnv+0x5c>
f0102c7f:	83 f8 03             	cmp    $0x3,%eax
f0102c82:	75 1d                	jne    f0102ca1 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102c84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c87:	83 c0 08             	add    $0x8,%eax
f0102c8a:	8b 00                	mov    (%eax),%eax
f0102c8c:	83 ec 04             	sub    $0x4,%esp
f0102c8f:	6a 0a                	push   $0xa
f0102c91:	6a 00                	push   $0x0
f0102c93:	50                   	push   %eax
f0102c94:	e8 63 c7 02 00       	call   f012f3fc <strtol>
f0102c99:	83 c4 10             	add    $0x10,%esp
f0102c9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102c9f:	eb 18                	jmp    f0102cb9 <CreateEnv+0x5d>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102ca1:	83 ec 0c             	sub    $0xc,%esp
f0102ca4:	68 a0 15 13 f0       	push   $0xf01315a0
f0102ca9:	e8 83 e1 ff ff       	call   f0100e31 <cprintf>
f0102cae:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102cb1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cb6:	eb 58                	jmp    f0102d10 <CreateEnv+0xb4>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102cb8:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102cb9:	83 ec 0c             	sub    $0xc,%esp
f0102cbc:	6a 02                	push   $0x2
f0102cbe:	e8 1c ac 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f0102cc3:	83 c4 10             	add    $0x10,%esp
f0102cc6:	85 c0                	test   %eax,%eax
f0102cc8:	74 07                	je     f0102cd1 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102cca:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102cd1:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102cd5:	76 19                	jbe    f0102cf0 <CreateEnv+0x94>
f0102cd7:	68 10 16 13 f0       	push   $0xf0131610
f0102cdc:	68 55 16 13 f0       	push   $0xf0131655
f0102ce1:	68 bb 01 00 00       	push   $0x1bb
f0102ce6:	68 6a 16 13 f0       	push   $0xf013166a
f0102ceb:	e8 c0 d4 ff ff       	call   f01001b0 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf3:	83 c0 04             	add    $0x4,%eax
f0102cf6:	8b 00                	mov    (%eax),%eax
f0102cf8:	ff 75 f0             	pushl  -0x10(%ebp)
f0102cfb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102cfe:	ff 75 ec             	pushl  -0x14(%ebp)
f0102d01:	50                   	push   %eax
f0102d02:	e8 60 60 00 00       	call   f0108d67 <env_create>
f0102d07:	83 c4 10             	add    $0x10,%esp
f0102d0a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102d0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0102d10:	c9                   	leave  
f0102d11:	c3                   	ret    

f0102d12 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102d12:	55                   	push   %ebp
f0102d13:	89 e5                	mov    %esp,%ebp
f0102d15:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	ff 75 0c             	pushl  0xc(%ebp)
f0102d1e:	ff 75 08             	pushl  0x8(%ebp)
f0102d21:	e8 36 ff ff ff       	call   f0102c5c <CreateEnv>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102d2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d30:	75 07                	jne    f0102d39 <command_run_program+0x27>
f0102d32:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d37:	eb 46                	jmp    f0102d7f <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d3c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	50                   	push   %eax
f0102d43:	68 7e 16 13 f0       	push   $0xf013167e
f0102d48:	e8 e4 e0 ff ff       	call   f0100e31 <cprintf>
f0102d4d:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102d50:	c7 05 28 be 2b f0 00 	movl   $0x0,0xf02bbe28
f0102d57:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0102d5a:	83 ec 0c             	sub    $0xc,%esp
f0102d5d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102d60:	e8 ce 25 00 00       	call   f0105333 <sched_new_env>
f0102d65:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0102d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d6b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d6e:	83 ec 0c             	sub    $0xc,%esp
f0102d71:	50                   	push   %eax
f0102d72:	e8 d9 25 00 00       	call   f0105350 <sched_run_env>
f0102d77:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d7f:	c9                   	leave  
f0102d80:	c3                   	ret    

f0102d81 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102d81:	55                   	push   %ebp
f0102d82:	89 e5                	mov    %esp,%ebp
f0102d84:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d87:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d8a:	83 c0 04             	add    $0x4,%eax
f0102d8d:	8b 00                	mov    (%eax),%eax
f0102d8f:	83 ec 04             	sub    $0x4,%esp
f0102d92:	6a 0a                	push   $0xa
f0102d94:	6a 00                	push   $0x0
f0102d96:	50                   	push   %eax
f0102d97:	e8 60 c6 02 00       	call   f012f3fc <strtol>
f0102d9c:	83 c4 10             	add    $0x10,%esp
f0102d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102da5:	83 ec 0c             	sub    $0xc,%esp
f0102da8:	50                   	push   %eax
f0102da9:	e8 63 28 00 00       	call   f0105611 <sched_kill_env>
f0102dae:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102db6:	c9                   	leave  
f0102db7:	c3                   	ret    

f0102db8 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0102db8:	55                   	push   %ebp
f0102db9:	89 e5                	mov    %esp,%ebp
f0102dbb:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102dbe:	83 ec 08             	sub    $0x8,%esp
f0102dc1:	ff 75 0c             	pushl  0xc(%ebp)
f0102dc4:	ff 75 08             	pushl  0x8(%ebp)
f0102dc7:	e8 90 fe ff ff       	call   f0102c5c <CreateEnv>
f0102dcc:	83 c4 10             	add    $0x10,%esp
f0102dcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0102dd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102dd6:	75 07                	jne    f0102ddf <commnad_load_env+0x27>
		return 0 ;
f0102dd8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ddd:	eb 2a                	jmp    f0102e09 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0102ddf:	83 ec 0c             	sub    $0xc,%esp
f0102de2:	ff 75 f4             	pushl  -0xc(%ebp)
f0102de5:	e8 49 25 00 00       	call   f0105333 <sched_new_env>
f0102dea:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102df0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102df3:	83 ec 08             	sub    $0x8,%esp
f0102df6:	50                   	push   %eax
f0102df7:	68 7e 16 13 f0       	push   $0xf013167e
f0102dfc:	e8 30 e0 ff ff       	call   f0100e31 <cprintf>
f0102e01:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102e04:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e09:	c9                   	leave  
f0102e0a:	c3                   	ret    

f0102e0b <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102e0b:	55                   	push   %ebp
f0102e0c:	89 e5                	mov    %esp,%ebp
f0102e0e:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102e11:	c7 05 28 be 2b f0 00 	movl   $0x0,0xf02bbe28
f0102e18:	00 00 00 
	sched_run_all();
f0102e1b:	e8 ba 2d 00 00       	call   f0105bda <sched_run_all>

	return 0 ;
f0102e20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e25:	c9                   	leave  
f0102e26:	c3                   	ret    

f0102e27 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102e27:	55                   	push   %ebp
f0102e28:	89 e5                	mov    %esp,%ebp
f0102e2a:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102e2d:	e8 a6 2b 00 00       	call   f01059d8 <sched_print_all>

	return 0 ;
f0102e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e37:	c9                   	leave  
f0102e38:	c3                   	ret    

f0102e39 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102e39:	55                   	push   %ebp
f0102e3a:	89 e5                	mov    %esp,%ebp
f0102e3c:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102e3f:	e8 09 2e 00 00       	call   f0105c4d <sched_kill_all>

	return 0 ;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e49:	c9                   	leave  
f0102e4a:	c3                   	ret    

f0102e4b <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102e4b:	55                   	push   %ebp
f0102e4c:	89 e5                	mov    %esp,%ebp
f0102e4e:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0102e51:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102e55:	7f 1a                	jg     f0102e71 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102e57:	83 ec 0c             	sub    $0xc,%esp
f0102e5a:	68 94 16 13 f0       	push   $0xf0131694
f0102e5f:	e8 cd df ff ff       	call   f0100e31 <cprintf>
f0102e64:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e67:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e6c:	e9 83 00 00 00       	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0102e71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e74:	83 c0 04             	add    $0x4,%eax
f0102e77:	8b 00                	mov    (%eax),%eax
f0102e79:	83 ec 04             	sub    $0x4,%esp
f0102e7c:	6a 0a                	push   $0xa
f0102e7e:	6a 00                	push   $0x0
f0102e80:	50                   	push   %eax
f0102e81:	e8 76 c5 02 00       	call   f012f3fc <strtol>
f0102e86:	83 c4 10             	add    $0x10,%esp
f0102e89:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0102e8c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102e90:	75 20                	jne    f0102eb2 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102e92:	83 ec 0c             	sub    $0xc,%esp
f0102e95:	ff 75 f4             	pushl  -0xc(%ebp)
f0102e98:	e8 b7 a9 00 00       	call   f010d854 <setPageReplacmentAlgorithmLRU>
f0102e9d:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0102ea0:	83 ec 0c             	sub    $0xc,%esp
f0102ea3:	68 f4 16 13 f0       	push   $0xf01316f4
f0102ea8:	e8 84 df ff ff       	call   f0100e31 <cprintf>
f0102ead:	83 c4 10             	add    $0x10,%esp
f0102eb0:	eb 3d                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0102eb2:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102eb6:	75 20                	jne    f0102ed8 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102eb8:	83 ec 0c             	sub    $0xc,%esp
f0102ebb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ebe:	e8 91 a9 00 00       	call   f010d854 <setPageReplacmentAlgorithmLRU>
f0102ec3:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102ec6:	83 ec 0c             	sub    $0xc,%esp
f0102ec9:	68 38 17 13 f0       	push   $0xf0131738
f0102ece:	e8 5e df ff ff       	call   f0100e31 <cprintf>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	eb 17                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102ed8:	83 ec 0c             	sub    $0xc,%esp
f0102edb:	68 78 17 13 f0       	push   $0xf0131778
f0102ee0:	e8 4c df ff ff       	call   f0100e31 <cprintf>
f0102ee5:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102ee8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102eed:	eb 05                	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0102eef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ef4:	c9                   	leave  
f0102ef5:	c3                   	ret    

f0102ef6 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0102ef6:	55                   	push   %ebp
f0102ef7:	89 e5                	mov    %esp,%ebp
f0102ef9:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0102efc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eff:	83 c0 04             	add    $0x4,%eax
f0102f02:	8b 00                	mov    (%eax),%eax
f0102f04:	83 ec 04             	sub    $0x4,%esp
f0102f07:	6a 0a                	push   $0xa
f0102f09:	6a 00                	push   $0x0
f0102f0b:	50                   	push   %eax
f0102f0c:	e8 eb c4 02 00       	call   f012f3fc <strtol>
f0102f11:	83 c4 10             	add    $0x10,%esp
f0102f14:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0102f17:	83 ec 0c             	sub    $0xc,%esp
f0102f1a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f1d:	e8 a5 a9 00 00       	call   f010d8c7 <setPageReplacmentAlgorithmNchanceCLOCK>
f0102f22:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0102f25:	83 ec 0c             	sub    $0xc,%esp
f0102f28:	68 cc 17 13 f0       	push   $0xf01317cc
f0102f2d:	e8 ff de ff ff       	call   f0100e31 <cprintf>
f0102f32:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f35:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f3a:	c9                   	leave  
f0102f3b:	c3                   	ret    

f0102f3c <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102f3c:	55                   	push   %ebp
f0102f3d:	89 e5                	mov    %esp,%ebp
f0102f3f:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102f42:	e8 40 a9 00 00       	call   f010d887 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102f47:	83 ec 0c             	sub    $0xc,%esp
f0102f4a:	68 00 18 13 f0       	push   $0xf0131800
f0102f4f:	e8 dd de ff ff       	call   f0100e31 <cprintf>
f0102f54:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f57:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f5c:	c9                   	leave  
f0102f5d:	c3                   	ret    

f0102f5e <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102f5e:	55                   	push   %ebp
f0102f5f:	89 e5                	mov    %esp,%ebp
f0102f61:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102f64:	e8 2e a9 00 00       	call   f010d897 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102f69:	83 ec 0c             	sub    $0xc,%esp
f0102f6c:	68 2c 18 13 f0       	push   $0xf013182c
f0102f71:	e8 bb de ff ff       	call   f0100e31 <cprintf>
f0102f76:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f79:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f7e:	c9                   	leave  
f0102f7f:	c3                   	ret    

f0102f80 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102f80:	55                   	push   %ebp
f0102f81:	89 e5                	mov    %esp,%ebp
f0102f83:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0102f86:	e8 1c a9 00 00       	call   f010d8a7 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 54 18 13 f0       	push   $0xf0131854
f0102f93:	e8 99 de ff ff       	call   f0100e31 <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fa0:	c9                   	leave  
f0102fa1:	c3                   	ret    

f0102fa2 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102fa2:	55                   	push   %ebp
f0102fa3:	89 e5                	mov    %esp,%ebp
f0102fa5:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102fa8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fab:	83 c0 04             	add    $0x4,%eax
f0102fae:	8b 00                	mov    (%eax),%eax
f0102fb0:	83 ec 04             	sub    $0x4,%esp
f0102fb3:	6a 0a                	push   $0xa
f0102fb5:	6a 00                	push   $0x0
f0102fb7:	50                   	push   %eax
f0102fb8:	e8 3f c4 02 00       	call   f012f3fc <strtol>
f0102fbd:	83 c4 10             	add    $0x10,%esp
f0102fc0:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0102fc3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102fc7:	83 ec 0c             	sub    $0xc,%esp
f0102fca:	50                   	push   %eax
f0102fcb:	e8 44 33 00 00       	call   f0106314 <sched_init_RR>
f0102fd0:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102fd3:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f0102fd8:	0f b6 c0             	movzbl %al,%eax
f0102fdb:	83 ec 08             	sub    $0x8,%esp
f0102fde:	50                   	push   %eax
f0102fdf:	68 88 18 13 f0       	push   $0xf0131888
f0102fe4:	e8 48 de ff ff       	call   f0100e31 <cprintf>
f0102fe9:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ff1:	c9                   	leave  
f0102ff2:	c3                   	ret    

f0102ff3 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102ff3:	55                   	push   %ebp
f0102ff4:	89 e5                	mov    %esp,%ebp
f0102ff6:	53                   	push   %ebx
f0102ff7:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ffd:	83 c0 04             	add    $0x4,%eax
f0103000:	8b 00                	mov    (%eax),%eax
f0103002:	83 ec 04             	sub    $0x4,%esp
f0103005:	6a 0a                	push   $0xa
f0103007:	6a 00                	push   $0x0
f0103009:	50                   	push   %eax
f010300a:	e8 ed c3 02 00       	call   f012f3fc <strtol>
f010300f:	83 c4 10             	add    $0x10,%esp
f0103012:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103015:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f010301c:	eb 2e                	jmp    f010304c <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f010301e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103021:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0103024:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103027:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010302e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103031:	01 d0                	add    %edx,%eax
f0103033:	8b 00                	mov    (%eax),%eax
f0103035:	83 ec 04             	sub    $0x4,%esp
f0103038:	6a 0a                	push   $0xa
f010303a:	6a 00                	push   $0x0
f010303c:	50                   	push   %eax
f010303d:	e8 ba c3 02 00       	call   f012f3fc <strtol>
f0103042:	83 c4 10             	add    $0x10,%esp
f0103045:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103049:	ff 45 f4             	incl   -0xc(%ebp)
f010304c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010304f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103052:	7c ca                	jl     f010301e <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0103054:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0103058:	83 ec 08             	sub    $0x8,%esp
f010305b:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010305e:	52                   	push   %edx
f010305f:	50                   	push   %eax
f0103060:	e8 05 33 00 00       	call   f010636a <sched_init_MLFQ>
f0103065:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0103068:	83 ec 0c             	sub    $0xc,%esp
f010306b:	68 c0 18 13 f0       	push   $0xf01318c0
f0103070:	e8 bc dd ff ff       	call   f0100e31 <cprintf>
f0103075:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103078:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010307f:	eb 21                	jmp    f01030a2 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103081:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103084:	05 e8 bd 2b f0       	add    $0xf02bbde8,%eax
f0103089:	8a 00                	mov    (%eax),%al
f010308b:	0f b6 c0             	movzbl %al,%eax
f010308e:	83 ec 08             	sub    $0x8,%esp
f0103091:	50                   	push   %eax
f0103092:	68 ed 18 13 f0       	push   $0xf01318ed
f0103097:	e8 95 dd ff ff       	call   f0100e31 <cprintf>
f010309c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010309f:	ff 45 f0             	incl   -0x10(%ebp)
f01030a2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01030a7:	0f b6 c0             	movzbl %al,%eax
f01030aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01030ad:	7f d2                	jg     f0103081 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01030af:	83 ec 0c             	sub    $0xc,%esp
f01030b2:	68 71 14 13 f0       	push   $0xf0131471
f01030b7:	e8 75 dd ff ff       	call   f0100e31 <cprintf>
f01030bc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030c7:	c9                   	leave  
f01030c8:	c3                   	ret    

f01030c9 <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f01030c9:	55                   	push   %ebp
f01030ca:	89 e5                	mov    %esp,%ebp
f01030cc:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01030cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030d2:	83 c0 04             	add    $0x4,%eax
f01030d5:	8b 00                	mov    (%eax),%eax
f01030d7:	83 ec 04             	sub    $0x4,%esp
f01030da:	6a 0a                	push   $0xa
f01030dc:	6a 00                	push   $0x0
f01030de:	50                   	push   %eax
f01030df:	e8 18 c3 02 00       	call   f012f3fc <strtol>
f01030e4:	83 c4 10             	add    $0x10,%esp
f01030e7:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01030ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030ed:	83 c0 08             	add    $0x8,%eax
f01030f0:	8b 00                	mov    (%eax),%eax
f01030f2:	83 ec 04             	sub    $0x4,%esp
f01030f5:	6a 0a                	push   $0xa
f01030f7:	6a 00                	push   $0x0
f01030f9:	50                   	push   %eax
f01030fa:	e8 fd c2 02 00       	call   f012f3fc <strtol>
f01030ff:	83 c4 10             	add    $0x10,%esp
f0103102:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f0103105:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0103109:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010310d:	83 ec 08             	sub    $0x8,%esp
f0103110:	52                   	push   %edx
f0103111:	50                   	push   %eax
f0103112:	e8 62 32 00 00       	call   f0106379 <sched_init_BSD>
f0103117:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f010311a:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f010311e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0103122:	83 ec 04             	sub    $0x4,%esp
f0103125:	52                   	push   %edx
f0103126:	50                   	push   %eax
f0103127:	68 f4 18 13 f0       	push   $0xf01318f4
f010312c:	e8 00 dd ff ff       	call   f0100e31 <cprintf>
f0103131:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0103134:	83 ec 0c             	sub    $0xc,%esp
f0103137:	68 71 14 13 f0       	push   $0xf0131471
f010313c:	e8 f0 dc ff ff       	call   f0100e31 <cprintf>
f0103141:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103144:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103149:	c9                   	leave  
f010314a:	c3                   	ret    

f010314b <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010314b:	55                   	push   %ebp
f010314c:	89 e5                	mov    %esp,%ebp
f010314e:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103151:	e8 43 30 00 00       	call   f0106199 <isSchedMethodMLFQ>
f0103156:	85 c0                	test   %eax,%eax
f0103158:	74 59                	je     f01031b3 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010315a:	83 ec 0c             	sub    $0xc,%esp
f010315d:	68 30 19 13 f0       	push   $0xf0131930
f0103162:	e8 ca dc ff ff       	call   f0100e31 <cprintf>
f0103167:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010316a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103171:	eb 21                	jmp    f0103194 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0103173:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103176:	05 e8 bd 2b f0       	add    $0xf02bbde8,%eax
f010317b:	8a 00                	mov    (%eax),%al
f010317d:	0f b6 c0             	movzbl %al,%eax
f0103180:	83 ec 08             	sub    $0x8,%esp
f0103183:	50                   	push   %eax
f0103184:	68 ed 18 13 f0       	push   $0xf01318ed
f0103189:	e8 a3 dc ff ff       	call   f0100e31 <cprintf>
f010318e:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103191:	ff 45 f4             	incl   -0xc(%ebp)
f0103194:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0103199:	0f b6 c0             	movzbl %al,%eax
f010319c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010319f:	7f d2                	jg     f0103173 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f01031a1:	83 ec 0c             	sub    $0xc,%esp
f01031a4:	68 71 14 13 f0       	push   $0xf0131471
f01031a9:	e8 83 dc ff ff       	call   f0100e31 <cprintf>
f01031ae:	83 c4 10             	add    $0x10,%esp
f01031b1:	eb 61                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f01031b3:	e8 c7 2f 00 00       	call   f010617f <isSchedMethodRR>
f01031b8:	85 c0                	test   %eax,%eax
f01031ba:	74 1b                	je     f01031d7 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f01031bc:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f01031c1:	0f b6 c0             	movzbl %al,%eax
f01031c4:	83 ec 08             	sub    $0x8,%esp
f01031c7:	50                   	push   %eax
f01031c8:	68 64 19 13 f0       	push   $0xf0131964
f01031cd:	e8 5f dc ff ff       	call   f0100e31 <cprintf>
f01031d2:	83 c4 10             	add    $0x10,%esp
f01031d5:	eb 3d                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f01031d7:	e8 d8 2f 00 00       	call   f01061b4 <isSchedMethodBSD>
f01031dc:	85 c0                	test   %eax,%eax
f01031de:	74 24                	je     f0103204 <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f01031e0:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f01031e5:	0f b6 d0             	movzbl %al,%edx
f01031e8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01031ed:	0f b6 c0             	movzbl %al,%eax
f01031f0:	83 ec 04             	sub    $0x4,%esp
f01031f3:	52                   	push   %edx
f01031f4:	50                   	push   %eax
f01031f5:	68 f4 18 13 f0       	push   $0xf01318f4
f01031fa:	e8 32 dc ff ff       	call   f0100e31 <cprintf>
f01031ff:	83 c4 10             	add    $0x10,%esp
f0103202:	eb 10                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0103204:	83 ec 0c             	sub    $0xc,%esp
f0103207:	68 a0 19 13 f0       	push   $0xf01319a0
f010320c:	e8 20 dc ff ff       	call   f0100e31 <cprintf>
f0103211:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103214:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103219:	c9                   	leave  
f010321a:	c3                   	ret    

f010321b <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f010321b:	55                   	push   %ebp
f010321c:	89 e5                	mov    %esp,%ebp
f010321e:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0103221:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103224:	83 c0 04             	add    $0x4,%eax
f0103227:	8b 00                	mov    (%eax),%eax
f0103229:	83 ec 04             	sub    $0x4,%esp
f010322c:	6a 0a                	push   $0xa
f010322e:	6a 00                	push   $0x0
f0103230:	50                   	push   %eax
f0103231:	e8 c6 c1 02 00       	call   f012f3fc <strtol>
f0103236:	83 c4 10             	add    $0x10,%esp
f0103239:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f010323c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010323f:	0f b6 c0             	movzbl %al,%eax
f0103242:	83 ec 0c             	sub    $0xc,%esp
f0103245:	50                   	push   %eax
f0103246:	e8 ee b0 02 00       	call   f012e339 <chksch>
f010324b:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f010324e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103252:	75 12                	jne    f0103266 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0103254:	83 ec 0c             	sub    $0xc,%esp
f0103257:	68 c8 19 13 f0       	push   $0xf01319c8
f010325c:	e8 d0 db ff ff       	call   f0100e31 <cprintf>
f0103261:	83 c4 10             	add    $0x10,%esp
f0103264:	eb 16                	jmp    f010327c <command_sch_test+0x61>
	else if (status == 1)
f0103266:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010326a:	75 10                	jne    f010327c <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f010326c:	83 ec 0c             	sub    $0xc,%esp
f010326f:	68 f0 19 13 f0       	push   $0xf01319f0
f0103274:	e8 b8 db ff ff       	call   f0100e31 <cprintf>
f0103279:	83 c4 10             	add    $0x10,%esp
	return 0;
f010327c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103281:	c9                   	leave  
f0103282:	c3                   	ret    

f0103283 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0103283:	55                   	push   %ebp
f0103284:	89 e5                	mov    %esp,%ebp
f0103286:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103289:	e8 67 a6 00 00       	call   f010d8f5 <isPageReplacmentAlgorithmCLOCK>
f010328e:	85 c0                	test   %eax,%eax
f0103290:	74 15                	je     f01032a7 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103292:	83 ec 0c             	sub    $0xc,%esp
f0103295:	68 14 1a 13 f0       	push   $0xf0131a14
f010329a:	e8 92 db ff ff       	call   f0100e31 <cprintf>
f010329f:	83 c4 10             	add    $0x10,%esp
f01032a2:	e9 8c 00 00 00       	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01032a7:	83 ec 0c             	sub    $0xc,%esp
f01032aa:	6a 01                	push   $0x1
f01032ac:	e8 2e a6 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f01032b1:	83 c4 10             	add    $0x10,%esp
f01032b4:	85 c0                	test   %eax,%eax
f01032b6:	74 12                	je     f01032ca <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01032b8:	83 ec 0c             	sub    $0xc,%esp
f01032bb:	68 3c 1a 13 f0       	push   $0xf0131a3c
f01032c0:	e8 6c db ff ff       	call   f0100e31 <cprintf>
f01032c5:	83 c4 10             	add    $0x10,%esp
f01032c8:	eb 69                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01032ca:	83 ec 0c             	sub    $0xc,%esp
f01032cd:	6a 02                	push   $0x2
f01032cf:	e8 0b a6 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f01032d4:	83 c4 10             	add    $0x10,%esp
f01032d7:	85 c0                	test   %eax,%eax
f01032d9:	74 12                	je     f01032ed <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f01032db:	83 ec 0c             	sub    $0xc,%esp
f01032de:	68 7c 1a 13 f0       	push   $0xf0131a7c
f01032e3:	e8 49 db ff ff       	call   f0100e31 <cprintf>
f01032e8:	83 c4 10             	add    $0x10,%esp
f01032eb:	eb 46                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01032ed:	e8 1e a6 00 00       	call   f010d910 <isPageReplacmentAlgorithmFIFO>
f01032f2:	85 c0                	test   %eax,%eax
f01032f4:	74 12                	je     f0103308 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01032f6:	83 ec 0c             	sub    $0xc,%esp
f01032f9:	68 b8 1a 13 f0       	push   $0xf0131ab8
f01032fe:	e8 2e db ff ff       	call   f0100e31 <cprintf>
f0103303:	83 c4 10             	add    $0x10,%esp
f0103306:	eb 2b                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0103308:	e8 1e a6 00 00       	call   f010d92b <isPageReplacmentAlgorithmModifiedCLOCK>
f010330d:	85 c0                	test   %eax,%eax
f010330f:	74 12                	je     f0103323 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0103311:	83 ec 0c             	sub    $0xc,%esp
f0103314:	68 dc 1a 13 f0       	push   $0xf0131adc
f0103319:	e8 13 db ff ff       	call   f0100e31 <cprintf>
f010331e:	83 c4 10             	add    $0x10,%esp
f0103321:	eb 10                	jmp    f0103333 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0103323:	83 ec 0c             	sub    $0xc,%esp
f0103326:	68 0c 1b 13 f0       	push   $0xf0131b0c
f010332b:	e8 01 db ff ff       	call   f0100e31 <cprintf>
f0103330:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103333:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103338:	c9                   	leave  
f0103339:	c3                   	ret    

f010333a <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010333a:	55                   	push   %ebp
f010333b:	89 e5                	mov    %esp,%ebp
f010333d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0103340:	e8 b4 ef ff ff       	call   f01022f9 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0103345:	83 ec 0c             	sub    $0xc,%esp
f0103348:	68 38 1b 13 f0       	push   $0xf0131b38
f010334d:	e8 df da ff ff       	call   f0100e31 <cprintf>
f0103352:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103355:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010335a:	c9                   	leave  
f010335b:	c3                   	ret    

f010335c <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010335c:	55                   	push   %ebp
f010335d:	89 e5                	mov    %esp,%ebp
f010335f:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103362:	e8 a2 ef ff ff       	call   f0102309 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0103367:	83 ec 0c             	sub    $0xc,%esp
f010336a:	68 68 1b 13 f0       	push   $0xf0131b68
f010336f:	e8 bd da ff ff       	call   f0100e31 <cprintf>
f0103374:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103377:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010337c:	c9                   	leave  
f010337d:	c3                   	ret    

f010337e <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010337e:	55                   	push   %ebp
f010337f:	89 e5                	mov    %esp,%ebp
f0103381:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0103384:	e8 90 ef ff ff       	call   f0102319 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103389:	83 ec 0c             	sub    $0xc,%esp
f010338c:	68 98 1b 13 f0       	push   $0xf0131b98
f0103391:	e8 9b da ff ff       	call   f0100e31 <cprintf>
f0103396:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103399:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010339e:	c9                   	leave  
f010339f:	c3                   	ret    

f01033a0 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01033a0:	55                   	push   %ebp
f01033a1:	89 e5                	mov    %esp,%ebp
f01033a3:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01033a6:	e8 7e ef ff ff       	call   f0102329 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01033ab:	83 ec 0c             	sub    $0xc,%esp
f01033ae:	68 c8 1b 13 f0       	push   $0xf0131bc8
f01033b3:	e8 79 da ff ff       	call   f0100e31 <cprintf>
f01033b8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033c0:	c9                   	leave  
f01033c1:	c3                   	ret    

f01033c2 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01033c2:	55                   	push   %ebp
f01033c3:	89 e5                	mov    %esp,%ebp
f01033c5:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01033c8:	e8 6c ef ff ff       	call   f0102339 <isUHeapPlacementStrategyFIRSTFIT>
f01033cd:	84 c0                	test   %al,%al
f01033cf:	74 12                	je     f01033e3 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f01033d1:	83 ec 0c             	sub    $0xc,%esp
f01033d4:	68 f8 1b 13 f0       	push   $0xf0131bf8
f01033d9:	e8 53 da ff ff       	call   f0100e31 <cprintf>
f01033de:	83 c4 10             	add    $0x10,%esp
f01033e1:	eb 61                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f01033e3:	e8 66 ef ff ff       	call   f010234e <isUHeapPlacementStrategyBESTFIT>
f01033e8:	84 c0                	test   %al,%al
f01033ea:	74 12                	je     f01033fe <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01033ec:	83 ec 0c             	sub    $0xc,%esp
f01033ef:	68 24 1c 13 f0       	push   $0xf0131c24
f01033f4:	e8 38 da ff ff       	call   f0100e31 <cprintf>
f01033f9:	83 c4 10             	add    $0x10,%esp
f01033fc:	eb 46                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01033fe:	e8 60 ef ff ff       	call   f0102363 <isUHeapPlacementStrategyNEXTFIT>
f0103403:	84 c0                	test   %al,%al
f0103405:	74 12                	je     f0103419 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0103407:	83 ec 0c             	sub    $0xc,%esp
f010340a:	68 50 1c 13 f0       	push   $0xf0131c50
f010340f:	e8 1d da ff ff       	call   f0100e31 <cprintf>
f0103414:	83 c4 10             	add    $0x10,%esp
f0103417:	eb 2b                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0103419:	e8 5a ef ff ff       	call   f0102378 <isUHeapPlacementStrategyWORSTFIT>
f010341e:	84 c0                	test   %al,%al
f0103420:	74 12                	je     f0103434 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0103422:	83 ec 0c             	sub    $0xc,%esp
f0103425:	68 7c 1c 13 f0       	push   $0xf0131c7c
f010342a:	e8 02 da ff ff       	call   f0100e31 <cprintf>
f010342f:	83 c4 10             	add    $0x10,%esp
f0103432:	eb 10                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0103434:	83 ec 0c             	sub    $0xc,%esp
f0103437:	68 a8 1c 13 f0       	push   $0xf0131ca8
f010343c:	e8 f0 d9 ff ff       	call   f0100e31 <cprintf>
f0103441:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103444:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103449:	c9                   	leave  
f010344a:	c3                   	ret    

f010344b <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010344b:	55                   	push   %ebp
f010344c:	89 e5                	mov    %esp,%ebp
f010344e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103451:	e8 eb ed ff ff       	call   f0102241 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103456:	83 ec 0c             	sub    $0xc,%esp
f0103459:	68 d4 1c 13 f0       	push   $0xf0131cd4
f010345e:	e8 ce d9 ff ff       	call   f0100e31 <cprintf>
f0103463:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103466:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010346b:	c9                   	leave  
f010346c:	c3                   	ret    

f010346d <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010346d:	55                   	push   %ebp
f010346e:	89 e5                	mov    %esp,%ebp
f0103470:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0103473:	e8 d9 ed ff ff       	call   f0102251 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103478:	83 ec 0c             	sub    $0xc,%esp
f010347b:	68 d4 1c 13 f0       	push   $0xf0131cd4
f0103480:	e8 ac d9 ff ff       	call   f0100e31 <cprintf>
f0103485:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103488:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010348d:	c9                   	leave  
f010348e:	c3                   	ret    

f010348f <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010348f:	55                   	push   %ebp
f0103490:	89 e5                	mov    %esp,%ebp
f0103492:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0103495:	e8 c7 ed ff ff       	call   f0102261 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f010349a:	83 ec 0c             	sub    $0xc,%esp
f010349d:	68 08 1d 13 f0       	push   $0xf0131d08
f01034a2:	e8 8a d9 ff ff       	call   f0100e31 <cprintf>
f01034a7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034af:	c9                   	leave  
f01034b0:	c3                   	ret    

f01034b1 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01034b1:	55                   	push   %ebp
f01034b2:	89 e5                	mov    %esp,%ebp
f01034b4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01034b7:	e8 b5 ed ff ff       	call   f0102271 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01034bc:	83 ec 0c             	sub    $0xc,%esp
f01034bf:	68 38 1d 13 f0       	push   $0xf0131d38
f01034c4:	e8 68 d9 ff ff       	call   f0100e31 <cprintf>
f01034c9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d1:	c9                   	leave  
f01034d2:	c3                   	ret    

f01034d3 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01034d3:	55                   	push   %ebp
f01034d4:	89 e5                	mov    %esp,%ebp
f01034d6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f01034d9:	e8 a3 ed ff ff       	call   f0102281 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f01034de:	83 ec 0c             	sub    $0xc,%esp
f01034e1:	68 68 1d 13 f0       	push   $0xf0131d68
f01034e6:	e8 46 d9 ff ff       	call   f0100e31 <cprintf>
f01034eb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034f3:	c9                   	leave  
f01034f4:	c3                   	ret    

f01034f5 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01034f5:	55                   	push   %ebp
f01034f6:	89 e5                	mov    %esp,%ebp
f01034f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01034fb:	e8 91 ed ff ff       	call   f0102291 <isKHeapPlacementStrategyCONTALLOC>
f0103500:	84 c0                	test   %al,%al
f0103502:	74 12                	je     f0103516 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0103504:	83 ec 0c             	sub    $0xc,%esp
f0103507:	68 9c 1d 13 f0       	push   $0xf0131d9c
f010350c:	e8 20 d9 ff ff       	call   f0100e31 <cprintf>
f0103511:	83 c4 10             	add    $0x10,%esp
f0103514:	eb 7c                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0103516:	e8 8a ed ff ff       	call   f01022a5 <isKHeapPlacementStrategyFIRSTFIT>
f010351b:	84 c0                	test   %al,%al
f010351d:	74 12                	je     f0103531 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010351f:	83 ec 0c             	sub    $0xc,%esp
f0103522:	68 d8 1d 13 f0       	push   $0xf0131dd8
f0103527:	e8 05 d9 ff ff       	call   f0100e31 <cprintf>
f010352c:	83 c4 10             	add    $0x10,%esp
f010352f:	eb 61                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0103531:	e8 84 ed ff ff       	call   f01022ba <isKHeapPlacementStrategyBESTFIT>
f0103536:	84 c0                	test   %al,%al
f0103538:	74 12                	je     f010354c <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010353a:	83 ec 0c             	sub    $0xc,%esp
f010353d:	68 08 1e 13 f0       	push   $0xf0131e08
f0103542:	e8 ea d8 ff ff       	call   f0100e31 <cprintf>
f0103547:	83 c4 10             	add    $0x10,%esp
f010354a:	eb 46                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f010354c:	e8 7e ed ff ff       	call   f01022cf <isKHeapPlacementStrategyNEXTFIT>
f0103551:	84 c0                	test   %al,%al
f0103553:	74 12                	je     f0103567 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0103555:	83 ec 0c             	sub    $0xc,%esp
f0103558:	68 34 1e 13 f0       	push   $0xf0131e34
f010355d:	e8 cf d8 ff ff       	call   f0100e31 <cprintf>
f0103562:	83 c4 10             	add    $0x10,%esp
f0103565:	eb 2b                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0103567:	e8 78 ed ff ff       	call   f01022e4 <isKHeapPlacementStrategyWORSTFIT>
f010356c:	84 c0                	test   %al,%al
f010356e:	74 12                	je     f0103582 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103570:	83 ec 0c             	sub    $0xc,%esp
f0103573:	68 60 1e 13 f0       	push   $0xf0131e60
f0103578:	e8 b4 d8 ff ff       	call   f0100e31 <cprintf>
f010357d:	83 c4 10             	add    $0x10,%esp
f0103580:	eb 10                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103582:	83 ec 0c             	sub    $0xc,%esp
f0103585:	68 90 1e 13 f0       	push   $0xf0131e90
f010358a:	e8 a2 d8 ff ff       	call   f0100e31 <cprintf>
f010358f:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103592:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103597:	c9                   	leave  
f0103598:	c3                   	ret    

f0103599 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103599:	55                   	push   %ebp
f010359a:	89 e5                	mov    %esp,%ebp
f010359c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010359f:	e8 fe a3 00 00       	call   f010d9a2 <isBufferingEnabled>
f01035a4:	84 c0                	test   %al,%al
f01035a6:	75 12                	jne    f01035ba <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035a8:	83 ec 0c             	sub    $0xc,%esp
f01035ab:	68 c0 1e 13 f0       	push   $0xf0131ec0
f01035b0:	e8 7c d8 ff ff       	call   f0100e31 <cprintf>
f01035b5:	83 c4 10             	add    $0x10,%esp
f01035b8:	eb 1d                	jmp    f01035d7 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01035ba:	83 ec 0c             	sub    $0xc,%esp
f01035bd:	6a 00                	push   $0x0
f01035bf:	e8 b8 a3 00 00       	call   f010d97c <enableModifiedBuffer>
f01035c4:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01035c7:	83 ec 0c             	sub    $0xc,%esp
f01035ca:	68 fc 1e 13 f0       	push   $0xf0131efc
f01035cf:	e8 5d d8 ff ff       	call   f0100e31 <cprintf>
f01035d4:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01035d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035dc:	c9                   	leave  
f01035dd:	c3                   	ret    

f01035de <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f01035de:	55                   	push   %ebp
f01035df:	89 e5                	mov    %esp,%ebp
f01035e1:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01035e4:	e8 b9 a3 00 00       	call   f010d9a2 <isBufferingEnabled>
f01035e9:	84 c0                	test   %al,%al
f01035eb:	75 12                	jne    f01035ff <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035ed:	83 ec 0c             	sub    $0xc,%esp
f01035f0:	68 c0 1e 13 f0       	push   $0xf0131ec0
f01035f5:	e8 37 d8 ff ff       	call   f0100e31 <cprintf>
f01035fa:	83 c4 10             	add    $0x10,%esp
f01035fd:	eb 1d                	jmp    f010361c <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01035ff:	83 ec 0c             	sub    $0xc,%esp
f0103602:	6a 01                	push   $0x1
f0103604:	e8 73 a3 00 00       	call   f010d97c <enableModifiedBuffer>
f0103609:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f010360c:	83 ec 0c             	sub    $0xc,%esp
f010360f:	68 20 1f 13 f0       	push   $0xf0131f20
f0103614:	e8 18 d8 ff ff       	call   f0100e31 <cprintf>
f0103619:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010361c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103621:	c9                   	leave  
f0103622:	c3                   	ret    

f0103623 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0103623:	55                   	push   %ebp
f0103624:	89 e5                	mov    %esp,%ebp
f0103626:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0103629:	83 ec 0c             	sub    $0xc,%esp
f010362c:	6a 00                	push   $0x0
f010362e:	e8 61 a3 00 00       	call   f010d994 <enableBuffering>
f0103633:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0103636:	83 ec 0c             	sub    $0xc,%esp
f0103639:	6a 00                	push   $0x0
f010363b:	e8 3c a3 00 00       	call   f010d97c <enableModifiedBuffer>
f0103640:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0103643:	83 ec 0c             	sub    $0xc,%esp
f0103646:	68 40 1f 13 f0       	push   $0xf0131f40
f010364b:	e8 e1 d7 ff ff       	call   f0100e31 <cprintf>
f0103650:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103653:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103658:	c9                   	leave  
f0103659:	c3                   	ret    

f010365a <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f010365a:	55                   	push   %ebp
f010365b:	89 e5                	mov    %esp,%ebp
f010365d:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103660:	83 ec 0c             	sub    $0xc,%esp
f0103663:	6a 01                	push   $0x1
f0103665:	e8 2a a3 00 00       	call   f010d994 <enableBuffering>
f010366a:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010366d:	83 ec 0c             	sub    $0xc,%esp
f0103670:	6a 01                	push   $0x1
f0103672:	e8 05 a3 00 00       	call   f010d97c <enableModifiedBuffer>
f0103677:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f010367a:	e8 3b a3 00 00       	call   f010d9ba <getModifiedBufferLength>
f010367f:	85 c0                	test   %eax,%eax
f0103681:	75 59                	jne    f01036dc <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0103683:	83 ec 0c             	sub    $0xc,%esp
f0103686:	68 5c 1f 13 f0       	push   $0xf0131f5c
f010368b:	e8 a1 d7 ff ff       	call   f0100e31 <cprintf>
f0103690:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103699:	50                   	push   %eax
f010369a:	68 8c 1f 13 f0       	push   $0xf0131f8c
f010369f:	e8 f2 b7 02 00       	call   f012ee96 <readline>
f01036a4:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01036a7:	83 ec 04             	sub    $0x4,%esp
f01036aa:	6a 0a                	push   $0xa
f01036ac:	6a 00                	push   $0x0
f01036ae:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01036b1:	50                   	push   %eax
f01036b2:	e8 45 bd 02 00       	call   f012f3fc <strtol>
f01036b7:	83 c4 10             	add    $0x10,%esp
f01036ba:	83 ec 0c             	sub    $0xc,%esp
f01036bd:	50                   	push   %eax
f01036be:	e8 e9 a2 00 00       	call   f010d9ac <setModifiedBufferLength>
f01036c3:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01036c6:	e8 ef a2 00 00       	call   f010d9ba <getModifiedBufferLength>
f01036cb:	83 ec 08             	sub    $0x8,%esp
f01036ce:	50                   	push   %eax
f01036cf:	68 b8 1f 13 f0       	push   $0xf0131fb8
f01036d4:	e8 58 d7 ff ff       	call   f0100e31 <cprintf>
f01036d9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f01036dc:	83 ec 0c             	sub    $0xc,%esp
f01036df:	68 dd 1f 13 f0       	push   $0xf0131fdd
f01036e4:	e8 48 d7 ff ff       	call   f0100e31 <cprintf>
f01036e9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01036ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01036f1:	c9                   	leave  
f01036f2:	c3                   	ret    

f01036f3 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01036f3:	55                   	push   %ebp
f01036f4:	89 e5                	mov    %esp,%ebp
f01036f6:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01036f9:	e8 a4 a2 00 00       	call   f010d9a2 <isBufferingEnabled>
f01036fe:	84 c0                	test   %al,%al
f0103700:	75 12                	jne    f0103714 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103702:	83 ec 0c             	sub    $0xc,%esp
f0103705:	68 f8 1f 13 f0       	push   $0xf0131ff8
f010370a:	e8 22 d7 ff ff       	call   f0100e31 <cprintf>
f010370f:	83 c4 10             	add    $0x10,%esp
f0103712:	eb 19                	jmp    f010372d <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103714:	e8 71 a2 00 00       	call   f010d98a <isModifiedBufferEnabled>
f0103719:	84 c0                	test   %al,%al
f010371b:	75 10                	jne    f010372d <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010371d:	83 ec 0c             	sub    $0xc,%esp
f0103720:	68 48 20 13 f0       	push   $0xf0132048
f0103725:	e8 07 d7 ff ff       	call   f0100e31 <cprintf>
f010372a:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010372d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103730:	83 c0 04             	add    $0x4,%eax
f0103733:	8b 00                	mov    (%eax),%eax
f0103735:	83 ec 04             	sub    $0x4,%esp
f0103738:	6a 0a                	push   $0xa
f010373a:	6a 00                	push   $0x0
f010373c:	50                   	push   %eax
f010373d:	e8 ba bc 02 00       	call   f012f3fc <strtol>
f0103742:	83 c4 10             	add    $0x10,%esp
f0103745:	83 ec 0c             	sub    $0xc,%esp
f0103748:	50                   	push   %eax
f0103749:	e8 5e a2 00 00       	call   f010d9ac <setModifiedBufferLength>
f010374e:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103751:	e8 64 a2 00 00       	call   f010d9ba <getModifiedBufferLength>
f0103756:	83 ec 08             	sub    $0x8,%esp
f0103759:	50                   	push   %eax
f010375a:	68 b8 1f 13 f0       	push   $0xf0131fb8
f010375f:	e8 cd d6 ff ff       	call   f0100e31 <cprintf>
f0103764:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103767:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010376c:	c9                   	leave  
f010376d:	c3                   	ret    

f010376e <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010376e:	55                   	push   %ebp
f010376f:	89 e5                	mov    %esp,%ebp
f0103771:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103774:	e8 29 a2 00 00       	call   f010d9a2 <isBufferingEnabled>
f0103779:	84 c0                	test   %al,%al
f010377b:	75 12                	jne    f010378f <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010377d:	83 ec 0c             	sub    $0xc,%esp
f0103780:	68 f8 1f 13 f0       	push   $0xf0131ff8
f0103785:	e8 a7 d6 ff ff       	call   f0100e31 <cprintf>
f010378a:	83 c4 10             	add    $0x10,%esp
f010378d:	eb 19                	jmp    f01037a8 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010378f:	e8 f6 a1 00 00       	call   f010d98a <isModifiedBufferEnabled>
f0103794:	84 c0                	test   %al,%al
f0103796:	75 10                	jne    f01037a8 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103798:	83 ec 0c             	sub    $0xc,%esp
f010379b:	68 48 20 13 f0       	push   $0xf0132048
f01037a0:	e8 8c d6 ff ff       	call   f0100e31 <cprintf>
f01037a5:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01037a8:	e8 0d a2 00 00       	call   f010d9ba <getModifiedBufferLength>
f01037ad:	83 ec 08             	sub    $0x8,%esp
f01037b0:	50                   	push   %eax
f01037b1:	68 8e 20 13 f0       	push   $0xf013208e
f01037b6:	e8 76 d6 ff ff       	call   f0100e31 <cprintf>
f01037bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037c3:	c9                   	leave  
f01037c4:	c3                   	ret    

f01037c5 <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f01037c5:	55                   	push   %ebp
f01037c6:	89 e5                	mov    %esp,%ebp
f01037c8:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f01037cb:	83 ec 08             	sub    $0x8,%esp
f01037ce:	ff 75 0c             	pushl  0xc(%ebp)
f01037d1:	ff 75 08             	pushl  0x8(%ebp)
f01037d4:	e8 27 a6 00 00       	call   f010de00 <tst_handler>
f01037d9:	83 c4 10             	add    $0x10,%esp
}
f01037dc:	c9                   	leave  
f01037dd:	c3                   	ret    

f01037de <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01037de:	55                   	push   %ebp
f01037df:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01037e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01037e4:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f01037ea:	29 d0                	sub    %edx,%eax
f01037ec:	c1 f8 02             	sar    $0x2,%eax
f01037ef:	89 c2                	mov    %eax,%edx
f01037f1:	89 d0                	mov    %edx,%eax
f01037f3:	c1 e0 03             	shl    $0x3,%eax
f01037f6:	01 d0                	add    %edx,%eax
f01037f8:	c1 e0 03             	shl    $0x3,%eax
f01037fb:	01 d0                	add    %edx,%eax
f01037fd:	c1 e0 03             	shl    $0x3,%eax
f0103800:	01 d0                	add    %edx,%eax
f0103802:	c1 e0 03             	shl    $0x3,%eax
f0103805:	01 d0                	add    %edx,%eax
f0103807:	89 c1                	mov    %eax,%ecx
f0103809:	c1 e1 0f             	shl    $0xf,%ecx
f010380c:	01 c8                	add    %ecx,%eax
f010380e:	c1 e0 03             	shl    $0x3,%eax
f0103811:	01 d0                	add    %edx,%eax
f0103813:	f7 d8                	neg    %eax
}
f0103815:	5d                   	pop    %ebp
f0103816:	c3                   	ret    

f0103817 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0103817:	55                   	push   %ebp
f0103818:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010381a:	ff 75 08             	pushl  0x8(%ebp)
f010381d:	e8 bc ff ff ff       	call   f01037de <to_frame_number>
f0103822:	83 c4 04             	add    $0x4,%esp
f0103825:	c1 e0 0c             	shl    $0xc,%eax
}
f0103828:	c9                   	leave  
f0103829:	c3                   	ret    

f010382a <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010382a:	55                   	push   %ebp
f010382b:	89 e5                	mov    %esp,%ebp
f010382d:	53                   	push   %ebx
f010382e:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103831:	8b 45 08             	mov    0x8(%ebp),%eax
f0103834:	c1 e8 0c             	shr    $0xc,%eax
f0103837:	89 c2                	mov    %eax,%edx
f0103839:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010383e:	39 c2                	cmp    %eax,%edx
f0103840:	72 14                	jb     f0103856 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0103842:	83 ec 04             	sub    $0x4,%esp
f0103845:	68 ac 20 13 f0       	push   $0xf01320ac
f010384a:	6a 55                	push   $0x55
f010384c:	68 d4 20 13 f0       	push   $0xf01320d4
f0103851:	e8 5a c9 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0103856:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f010385c:	8b 45 08             	mov    0x8(%ebp),%eax
f010385f:	c1 e8 0c             	shr    $0xc,%eax
f0103862:	89 c2                	mov    %eax,%edx
f0103864:	89 d0                	mov    %edx,%eax
f0103866:	01 c0                	add    %eax,%eax
f0103868:	01 d0                	add    %edx,%eax
f010386a:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103871:	01 d8                	add    %ebx,%eax
f0103873:	01 d0                	add    %edx,%eax
f0103875:	01 c8                	add    %ecx,%eax
}
f0103877:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010387a:	c9                   	leave  
f010387b:	c3                   	ret    

f010387c <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010387c:	55                   	push   %ebp
f010387d:	89 e5                	mov    %esp,%ebp
f010387f:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103882:	8b 45 08             	mov    0x8(%ebp),%eax
f0103885:	05 00 14 00 00       	add    $0x1400,%eax
f010388a:	c1 e0 03             	shl    $0x3,%eax
f010388d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103890:	83 ec 04             	sub    $0x4,%esp
f0103893:	6a 08                	push   $0x8
f0103895:	ff 75 0c             	pushl  0xc(%ebp)
f0103898:	ff 75 f4             	pushl  -0xc(%ebp)
f010389b:	e8 b7 bf 02 00       	call   f012f857 <ide_read>
f01038a0:	83 c4 10             	add    $0x10,%esp
f01038a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01038a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038a9:	c9                   	leave  
f01038aa:	c3                   	ret    

f01038ab <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01038ab:	55                   	push   %ebp
f01038ac:	89 e5                	mov    %esp,%ebp
f01038ae:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01038b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01038b4:	05 00 14 00 00       	add    $0x1400,%eax
f01038b9:	c1 e0 03             	shl    $0x3,%eax
f01038bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01038bf:	83 ec 04             	sub    $0x4,%esp
f01038c2:	6a 08                	push   $0x8
f01038c4:	ff 75 0c             	pushl  0xc(%ebp)
f01038c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01038ca:	e8 c8 c0 02 00       	call   f012f997 <ide_write>
f01038cf:	83 c4 10             	add    $0x10,%esp
f01038d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01038d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01038d9:	74 14                	je     f01038ef <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01038db:	83 ec 04             	sub    $0x4,%esp
f01038de:	68 f6 20 13 f0       	push   $0xf01320f6
f01038e3:	6a 2e                	push   $0x2e
f01038e5:	68 0d 21 13 f0       	push   $0xf013210d
f01038ea:	e8 c1 c8 ff ff       	call   f01001b0 <_panic>
	return success;
f01038ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038f2:	c9                   	leave  
f01038f3:	c3                   	ret    

f01038f4 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01038f4:	55                   	push   %ebp
f01038f5:	89 e5                	mov    %esp,%ebp
f01038f7:	56                   	push   %esi
f01038f8:	53                   	push   %ebx
f01038f9:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01038fc:	c7 05 84 a2 2d f0 00 	movl   $0x0,0xf02da284
f0103903:	00 00 00 
f0103906:	c7 05 88 a2 2d f0 00 	movl   $0x0,0xf02da288
f010390d:	00 00 00 
f0103910:	c7 05 90 a2 2d f0 00 	movl   $0x0,0xf02da290
f0103917:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010391a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103921:	e9 20 01 00 00       	jmp    f0103a46 <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103926:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f010392c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010392f:	89 d0                	mov    %edx,%eax
f0103931:	01 c0                	add    %eax,%eax
f0103933:	01 d0                	add    %edx,%eax
f0103935:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010393c:	01 d8                	add    %ebx,%eax
f010393e:	01 d0                	add    %edx,%eax
f0103940:	01 c8                	add    %ecx,%eax
f0103942:	83 ec 0c             	sub    $0xc,%esp
f0103945:	50                   	push   %eax
f0103946:	e8 bf 39 00 00       	call   f010730a <initialize_frame_info>
f010394b:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010394e:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103954:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103957:	89 d0                	mov    %edx,%eax
f0103959:	01 c0                	add    %eax,%eax
f010395b:	01 d0                	add    %edx,%eax
f010395d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103964:	01 d8                	add    %ebx,%eax
f0103966:	01 d0                	add    %edx,%eax
f0103968:	01 c8                	add    %ecx,%eax
f010396a:	85 c0                	test   %eax,%eax
f010396c:	75 14                	jne    f0103982 <initialize_disk_page_file+0x8e>
f010396e:	83 ec 04             	sub    $0x4,%esp
f0103971:	68 2c 21 13 f0       	push   $0xf013212c
f0103976:	6a 59                	push   $0x59
f0103978:	68 0d 21 13 f0       	push   $0xf013210d
f010397d:	e8 2e c8 ff ff       	call   f01001b0 <_panic>
f0103982:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103988:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010398b:	89 d0                	mov    %edx,%eax
f010398d:	01 c0                	add    %eax,%eax
f010398f:	01 d0                	add    %edx,%eax
f0103991:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103998:	01 d8                	add    %ebx,%eax
f010399a:	01 d0                	add    %edx,%eax
f010399c:	01 c8                	add    %ecx,%eax
f010399e:	8b 15 84 a2 2d f0    	mov    0xf02da284,%edx
f01039a4:	89 10                	mov    %edx,(%eax)
f01039a6:	8b 00                	mov    (%eax),%eax
f01039a8:	85 c0                	test   %eax,%eax
f01039aa:	74 27                	je     f01039d3 <initialize_disk_page_file+0xdf>
f01039ac:	8b 0d 84 a2 2d f0    	mov    0xf02da284,%ecx
f01039b2:	8b 1d 50 3a 25 f0    	mov    0xf0253a50,%ebx
f01039b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039bb:	89 d0                	mov    %edx,%eax
f01039bd:	01 c0                	add    %eax,%eax
f01039bf:	01 d0                	add    %edx,%eax
f01039c1:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01039c8:	01 f0                	add    %esi,%eax
f01039ca:	01 d0                	add    %edx,%eax
f01039cc:	01 d8                	add    %ebx,%eax
f01039ce:	89 41 04             	mov    %eax,0x4(%ecx)
f01039d1:	eb 21                	jmp    f01039f4 <initialize_disk_page_file+0x100>
f01039d3:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f01039d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039dc:	89 d0                	mov    %edx,%eax
f01039de:	01 c0                	add    %eax,%eax
f01039e0:	01 d0                	add    %edx,%eax
f01039e2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01039e9:	01 d8                	add    %ebx,%eax
f01039eb:	01 d0                	add    %edx,%eax
f01039ed:	01 c8                	add    %ecx,%eax
f01039ef:	a3 88 a2 2d f0       	mov    %eax,0xf02da288
f01039f4:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f01039fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039fd:	89 d0                	mov    %edx,%eax
f01039ff:	01 c0                	add    %eax,%eax
f0103a01:	01 d0                	add    %edx,%eax
f0103a03:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a0a:	01 d8                	add    %ebx,%eax
f0103a0c:	01 d0                	add    %edx,%eax
f0103a0e:	01 c8                	add    %ecx,%eax
f0103a10:	a3 84 a2 2d f0       	mov    %eax,0xf02da284
f0103a15:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103a1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a1e:	89 d0                	mov    %edx,%eax
f0103a20:	01 c0                	add    %eax,%eax
f0103a22:	01 d0                	add    %edx,%eax
f0103a24:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a2b:	01 d8                	add    %ebx,%eax
f0103a2d:	01 d0                	add    %edx,%eax
f0103a2f:	01 c8                	add    %ecx,%eax
f0103a31:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a38:	a1 90 a2 2d f0       	mov    0xf02da290,%eax
f0103a3d:	40                   	inc    %eax
f0103a3e:	a3 90 a2 2d f0       	mov    %eax,0xf02da290
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103a43:	ff 45 f4             	incl   -0xc(%ebp)
f0103a46:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103a4d:	0f 8e d3 fe ff ff    	jle    f0103926 <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103a53:	90                   	nop
f0103a54:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103a57:	5b                   	pop    %ebx
f0103a58:	5e                   	pop    %esi
f0103a59:	5d                   	pop    %ebp
f0103a5a:	c3                   	ret    

f0103a5b <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a5b:	55                   	push   %ebp
f0103a5c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a61:	8b 15 50 3a 25 f0    	mov    0xf0253a50,%edx
f0103a67:	29 d0                	sub    %edx,%eax
f0103a69:	c1 f8 02             	sar    $0x2,%eax
f0103a6c:	89 c2                	mov    %eax,%edx
f0103a6e:	89 d0                	mov    %edx,%eax
f0103a70:	c1 e0 03             	shl    $0x3,%eax
f0103a73:	01 d0                	add    %edx,%eax
f0103a75:	c1 e0 03             	shl    $0x3,%eax
f0103a78:	01 d0                	add    %edx,%eax
f0103a7a:	c1 e0 03             	shl    $0x3,%eax
f0103a7d:	01 d0                	add    %edx,%eax
f0103a7f:	c1 e0 03             	shl    $0x3,%eax
f0103a82:	01 d0                	add    %edx,%eax
f0103a84:	89 c1                	mov    %eax,%ecx
f0103a86:	c1 e1 0f             	shl    $0xf,%ecx
f0103a89:	01 c8                	add    %ecx,%eax
f0103a8b:	c1 e0 03             	shl    $0x3,%eax
f0103a8e:	01 d0                	add    %edx,%eax
f0103a90:	f7 d8                	neg    %eax
}
f0103a92:	5d                   	pop    %ebp
f0103a93:	c3                   	ret    

f0103a94 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103a94:	55                   	push   %ebp
f0103a95:	89 e5                	mov    %esp,%ebp
f0103a97:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103a9a:	a1 84 a2 2d f0       	mov    0xf02da284,%eax
f0103a9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103aa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103aa6:	75 0a                	jne    f0103ab2 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103aa8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103aad:	e9 a7 00 00 00       	jmp    f0103b59 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103ab2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ab6:	75 14                	jne    f0103acc <allocate_disk_frame+0x38>
f0103ab8:	83 ec 04             	sub    $0x4,%esp
f0103abb:	68 4f 21 13 f0       	push   $0xf013214f
f0103ac0:	6a 78                	push   $0x78
f0103ac2:	68 0d 21 13 f0       	push   $0xf013210d
f0103ac7:	e8 e4 c6 ff ff       	call   f01001b0 <_panic>
f0103acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103acf:	8b 00                	mov    (%eax),%eax
f0103ad1:	85 c0                	test   %eax,%eax
f0103ad3:	74 10                	je     f0103ae5 <allocate_disk_frame+0x51>
f0103ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ad8:	8b 00                	mov    (%eax),%eax
f0103ada:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103add:	8b 52 04             	mov    0x4(%edx),%edx
f0103ae0:	89 50 04             	mov    %edx,0x4(%eax)
f0103ae3:	eb 0b                	jmp    f0103af0 <allocate_disk_frame+0x5c>
f0103ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ae8:	8b 40 04             	mov    0x4(%eax),%eax
f0103aeb:	a3 88 a2 2d f0       	mov    %eax,0xf02da288
f0103af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103af3:	8b 40 04             	mov    0x4(%eax),%eax
f0103af6:	85 c0                	test   %eax,%eax
f0103af8:	74 0f                	je     f0103b09 <allocate_disk_frame+0x75>
f0103afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103afd:	8b 40 04             	mov    0x4(%eax),%eax
f0103b00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b03:	8b 12                	mov    (%edx),%edx
f0103b05:	89 10                	mov    %edx,(%eax)
f0103b07:	eb 0a                	jmp    f0103b13 <allocate_disk_frame+0x7f>
f0103b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b0c:	8b 00                	mov    (%eax),%eax
f0103b0e:	a3 84 a2 2d f0       	mov    %eax,0xf02da284
f0103b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b26:	a1 90 a2 2d f0       	mov    0xf02da290,%eax
f0103b2b:	48                   	dec    %eax
f0103b2c:	a3 90 a2 2d f0       	mov    %eax,0xf02da290
	initialize_frame_info(ptr_frame_info);
f0103b31:	83 ec 0c             	sub    $0xc,%esp
f0103b34:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b37:	e8 ce 37 00 00       	call   f010730a <initialize_frame_info>
f0103b3c:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103b3f:	83 ec 0c             	sub    $0xc,%esp
f0103b42:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b45:	e8 11 ff ff ff       	call   f0103a5b <to_disk_frame_number>
f0103b4a:	83 c4 10             	add    $0x10,%esp
f0103b4d:	89 c2                	mov    %eax,%edx
f0103b4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b52:	89 10                	mov    %edx,(%eax)
	return 0;
f0103b54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103b59:	c9                   	leave  
f0103b5a:	c3                   	ret    

f0103b5b <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103b5b:	55                   	push   %ebp
f0103b5c:	89 e5                	mov    %esp,%ebp
f0103b5e:	56                   	push   %esi
f0103b5f:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103b64:	0f 84 fa 00 00 00    	je     f0103c64 <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103b6a:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103b70:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b73:	89 d0                	mov    %edx,%eax
f0103b75:	01 c0                	add    %eax,%eax
f0103b77:	01 d0                	add    %edx,%eax
f0103b79:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b80:	01 d8                	add    %ebx,%eax
f0103b82:	01 d0                	add    %edx,%eax
f0103b84:	01 c8                	add    %ecx,%eax
f0103b86:	85 c0                	test   %eax,%eax
f0103b88:	75 17                	jne    f0103ba1 <free_disk_frame+0x46>
f0103b8a:	83 ec 04             	sub    $0x4,%esp
f0103b8d:	68 2c 21 13 f0       	push   $0xf013212c
f0103b92:	68 85 00 00 00       	push   $0x85
f0103b97:	68 0d 21 13 f0       	push   $0xf013210d
f0103b9c:	e8 0f c6 ff ff       	call   f01001b0 <_panic>
f0103ba1:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103ba7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103baa:	89 d0                	mov    %edx,%eax
f0103bac:	01 c0                	add    %eax,%eax
f0103bae:	01 d0                	add    %edx,%eax
f0103bb0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103bb7:	01 d8                	add    %ebx,%eax
f0103bb9:	01 d0                	add    %edx,%eax
f0103bbb:	01 c8                	add    %ecx,%eax
f0103bbd:	8b 15 84 a2 2d f0    	mov    0xf02da284,%edx
f0103bc3:	89 10                	mov    %edx,(%eax)
f0103bc5:	8b 00                	mov    (%eax),%eax
f0103bc7:	85 c0                	test   %eax,%eax
f0103bc9:	74 27                	je     f0103bf2 <free_disk_frame+0x97>
f0103bcb:	8b 0d 84 a2 2d f0    	mov    0xf02da284,%ecx
f0103bd1:	8b 1d 50 3a 25 f0    	mov    0xf0253a50,%ebx
f0103bd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bda:	89 d0                	mov    %edx,%eax
f0103bdc:	01 c0                	add    %eax,%eax
f0103bde:	01 d0                	add    %edx,%eax
f0103be0:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0103be7:	01 f0                	add    %esi,%eax
f0103be9:	01 d0                	add    %edx,%eax
f0103beb:	01 d8                	add    %ebx,%eax
f0103bed:	89 41 04             	mov    %eax,0x4(%ecx)
f0103bf0:	eb 21                	jmp    f0103c13 <free_disk_frame+0xb8>
f0103bf2:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103bf8:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bfb:	89 d0                	mov    %edx,%eax
f0103bfd:	01 c0                	add    %eax,%eax
f0103bff:	01 d0                	add    %edx,%eax
f0103c01:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c08:	01 d8                	add    %ebx,%eax
f0103c0a:	01 d0                	add    %edx,%eax
f0103c0c:	01 c8                	add    %ecx,%eax
f0103c0e:	a3 88 a2 2d f0       	mov    %eax,0xf02da288
f0103c13:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103c19:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c1c:	89 d0                	mov    %edx,%eax
f0103c1e:	01 c0                	add    %eax,%eax
f0103c20:	01 d0                	add    %edx,%eax
f0103c22:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c29:	01 d8                	add    %ebx,%eax
f0103c2b:	01 d0                	add    %edx,%eax
f0103c2d:	01 c8                	add    %ecx,%eax
f0103c2f:	a3 84 a2 2d f0       	mov    %eax,0xf02da284
f0103c34:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103c3a:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c3d:	89 d0                	mov    %edx,%eax
f0103c3f:	01 c0                	add    %eax,%eax
f0103c41:	01 d0                	add    %edx,%eax
f0103c43:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c4a:	01 d8                	add    %ebx,%eax
f0103c4c:	01 d0                	add    %edx,%eax
f0103c4e:	01 c8                	add    %ecx,%eax
f0103c50:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103c57:	a1 90 a2 2d f0       	mov    0xf02da290,%eax
f0103c5c:	40                   	inc    %eax
f0103c5d:	a3 90 a2 2d f0       	mov    %eax,0xf02da290
f0103c62:	eb 01                	jmp    f0103c65 <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103c64:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103c65:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103c68:	5b                   	pop    %ebx
f0103c69:	5e                   	pop    %esi
f0103c6a:	5d                   	pop    %ebp
f0103c6b:	c3                   	ret    

f0103c6c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103c6c:	55                   	push   %ebp
f0103c6d:	89 e5                	mov    %esp,%ebp
f0103c6f:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103c72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c75:	c1 e8 16             	shr    $0x16,%eax
f0103c78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	8b 00                	mov    (%eax),%eax
f0103c86:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c8c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c91:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c97:	c1 e8 0c             	shr    $0xc,%eax
f0103c9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c9d:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0103ca2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103ca5:	72 17                	jb     f0103cbe <get_disk_page_table+0x52>
f0103ca7:	ff 75 f0             	pushl  -0x10(%ebp)
f0103caa:	68 70 21 13 f0       	push   $0xf0132170
f0103caf:	68 92 00 00 00       	push   $0x92
f0103cb4:	68 0d 21 13 f0       	push   $0xf013210d
f0103cb9:	e8 f2 c4 ff ff       	call   f01001b0 <_panic>
f0103cbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103cc1:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103cc6:	89 c2                	mov    %eax,%edx
f0103cc8:	8b 45 14             	mov    0x14(%ebp),%eax
f0103ccb:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103ccd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103cd1:	0f 85 b7 00 00 00    	jne    f0103d8e <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103cd7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103cdb:	0f 84 9d 00 00 00    	je     f0103d7e <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103ce1:	83 ec 0c             	sub    $0xc,%esp
f0103ce4:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103ce7:	50                   	push   %eax
f0103ce8:	e8 38 36 00 00       	call   f0107325 <allocate_frame>
f0103ced:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103cf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103cf3:	83 ec 0c             	sub    $0xc,%esp
f0103cf6:	50                   	push   %eax
f0103cf7:	e8 1b fb ff ff       	call   f0103817 <to_physical_address>
f0103cfc:	83 c4 10             	add    $0x10,%esp
f0103cff:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103d02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103d08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d0b:	c1 e8 0c             	shr    $0xc,%eax
f0103d0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103d11:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0103d16:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103d19:	72 17                	jb     f0103d32 <get_disk_page_table+0xc6>
f0103d1b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103d1e:	68 70 21 13 f0       	push   $0xf0132170
f0103d23:	68 ae 00 00 00       	push   $0xae
f0103d28:	68 0d 21 13 f0       	push   $0xf013210d
f0103d2d:	e8 7e c4 ff ff       	call   f01001b0 <_panic>
f0103d32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d35:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d3a:	89 c2                	mov    %eax,%edx
f0103d3c:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d3f:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103d41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103d44:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103d4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d4d:	c1 e8 16             	shr    $0x16,%eax
f0103d50:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d57:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5a:	01 d0                	add    %edx,%eax
f0103d5c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103d5f:	83 ca 01             	or     $0x1,%edx
f0103d62:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103d64:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	83 ec 04             	sub    $0x4,%esp
f0103d6c:	68 00 10 00 00       	push   $0x1000
f0103d71:	6a 00                	push   $0x0
f0103d73:	50                   	push   %eax
f0103d74:	e8 11 b5 02 00       	call   f012f28a <memset>
f0103d79:	83 c4 10             	add    $0x10,%esp
f0103d7c:	eb 10                	jmp    f0103d8e <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0103d7e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103d87:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d8c:	eb 05                	jmp    f0103d93 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103d8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d93:	c9                   	leave  
f0103d94:	c3                   	ret    

f0103d95 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103d95:	55                   	push   %ebp
f0103d96:	89 e5                	mov    %esp,%ebp
f0103d98:	83 ec 28             	sub    $0x28,%esp
f0103d9b:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d9e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103da1:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103da5:	74 75                	je     f0103e1c <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103da7:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103dae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103db1:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103db6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0103dc1:	f7 75 f4             	divl   -0xc(%ebp)
f0103dc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dc7:	29 d0                	sub    %edx,%eax
f0103dc9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103dcc:	73 32                	jae    f0103e00 <pf_add_empty_env_page+0x6b>
f0103dce:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd1:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103dd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103ddc:	29 d0                	sub    %edx,%eax
f0103dde:	c1 e0 0c             	shl    $0xc,%eax
f0103de1:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103de6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103de9:	76 15                	jbe    f0103e00 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103deb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dee:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103df4:	8d 50 01             	lea    0x1(%eax),%edx
f0103df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dfa:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103e00:	a1 1c be 2b f0       	mov    0xf02bbe1c,%eax
f0103e05:	83 ec 04             	sub    $0x4,%esp
f0103e08:	50                   	push   %eax
f0103e09:	ff 75 0c             	pushl  0xc(%ebp)
f0103e0c:	ff 75 08             	pushl  0x8(%ebp)
f0103e0f:	e8 b7 00 00 00       	call   f0103ecb <pf_add_env_page>
f0103e14:	83 c4 10             	add    $0x10,%esp
f0103e17:	e9 ad 00 00 00       	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e1c:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e23:	76 19                	jbe    f0103e3e <pf_add_empty_env_page+0xa9>
f0103e25:	68 a0 21 13 f0       	push   $0xf01321a0
f0103e2a:	68 c6 21 13 f0       	push   $0xf01321c6
f0103e2f:	68 d1 00 00 00       	push   $0xd1
f0103e34:	68 0d 21 13 f0       	push   $0xf013210d
f0103e39:	e8 72 c3 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e41:	05 a8 00 00 00       	add    $0xa8,%eax
f0103e46:	83 ec 08             	sub    $0x8,%esp
f0103e49:	50                   	push   %eax
f0103e4a:	ff 75 08             	pushl  0x8(%ebp)
f0103e4d:	e8 86 06 00 00       	call   f01044d8 <get_disk_page_directory>
f0103e52:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103e55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e58:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e5e:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103e61:	52                   	push   %edx
f0103e62:	6a 01                	push   $0x1
f0103e64:	ff 75 0c             	pushl  0xc(%ebp)
f0103e67:	50                   	push   %eax
f0103e68:	e8 ff fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103e6d:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e76:	c1 ea 0c             	shr    $0xc,%edx
f0103e79:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e7f:	c1 e2 02             	shl    $0x2,%edx
f0103e82:	01 d0                	add    %edx,%eax
f0103e84:	8b 00                	mov    (%eax),%eax
f0103e86:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103e89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e8c:	85 c0                	test   %eax,%eax
f0103e8e:	75 34                	jne    f0103ec4 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e90:	83 ec 0c             	sub    $0xc,%esp
f0103e93:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103e96:	50                   	push   %eax
f0103e97:	e8 f8 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103e9c:	83 c4 10             	add    $0x10,%esp
f0103e9f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ea2:	75 07                	jne    f0103eab <pf_add_empty_env_page+0x116>
f0103ea4:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103ea9:	eb 1e                	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103eae:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eb1:	c1 ea 0c             	shr    $0xc,%edx
f0103eb4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103eba:	c1 e2 02             	shl    $0x2,%edx
f0103ebd:	01 c2                	add    %eax,%edx
f0103ebf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ec2:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103ec4:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103ec9:	c9                   	leave  
f0103eca:	c3                   	ret    

f0103ecb <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103ecb:	55                   	push   %ebp
f0103ecc:	89 e5                	mov    %esp,%ebp
f0103ece:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103ed1:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103ed8:	76 19                	jbe    f0103ef3 <pf_add_env_page+0x28>
f0103eda:	68 a0 21 13 f0       	push   $0xf01321a0
f0103edf:	68 c6 21 13 f0       	push   $0xf01321c6
f0103ee4:	68 e6 00 00 00       	push   $0xe6
f0103ee9:	68 0d 21 13 f0       	push   $0xf013210d
f0103eee:	e8 bd c2 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103ef3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ef6:	05 a8 00 00 00       	add    $0xa8,%eax
f0103efb:	83 ec 08             	sub    $0x8,%esp
f0103efe:	50                   	push   %eax
f0103eff:	ff 75 08             	pushl  0x8(%ebp)
f0103f02:	e8 d1 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103f07:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f0d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f13:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103f16:	52                   	push   %edx
f0103f17:	6a 01                	push   $0x1
f0103f19:	ff 75 0c             	pushl  0xc(%ebp)
f0103f1c:	50                   	push   %eax
f0103f1d:	e8 4a fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103f22:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f28:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2b:	c1 ea 0c             	shr    $0xc,%edx
f0103f2e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f34:	c1 e2 02             	shl    $0x2,%edx
f0103f37:	01 d0                	add    %edx,%eax
f0103f39:	8b 00                	mov    (%eax),%eax
f0103f3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103f3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f41:	85 c0                	test   %eax,%eax
f0103f43:	75 34                	jne    f0103f79 <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103f45:	83 ec 0c             	sub    $0xc,%esp
f0103f48:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103f4b:	50                   	push   %eax
f0103f4c:	e8 43 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103f51:	83 c4 10             	add    $0x10,%esp
f0103f54:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103f57:	75 07                	jne    f0103f60 <pf_add_env_page+0x95>
f0103f59:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f5e:	eb 31                	jmp    f0103f91 <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f63:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f66:	c1 ea 0c             	shr    $0xc,%edx
f0103f69:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f6f:	c1 e2 02             	shl    $0x2,%edx
f0103f72:	01 c2                	add    %eax,%edx
f0103f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f77:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f7c:	83 ec 08             	sub    $0x8,%esp
f0103f7f:	ff 75 10             	pushl  0x10(%ebp)
f0103f82:	50                   	push   %eax
f0103f83:	e8 23 f9 ff ff       	call   f01038ab <write_disk_page>
f0103f88:	83 c4 10             	add    $0x10,%esp
f0103f8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f91:	c9                   	leave  
f0103f92:	c3                   	ret    

f0103f93 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103f93:	55                   	push   %ebp
f0103f94:	89 e5                	mov    %esp,%ebp
f0103f96:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103f99:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103fa0:	76 19                	jbe    f0103fbb <pf_update_env_page+0x28>
f0103fa2:	68 a0 21 13 f0       	push   $0xf01321a0
f0103fa7:	68 c6 21 13 f0       	push   $0xf01321c6
f0103fac:	68 08 01 00 00       	push   $0x108
f0103fb1:	68 0d 21 13 f0       	push   $0xf013210d
f0103fb6:	e8 f5 c1 ff ff       	call   f01001b0 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fbe:	05 a8 00 00 00       	add    $0xa8,%eax
f0103fc3:	83 ec 08             	sub    $0x8,%esp
f0103fc6:	50                   	push   %eax
f0103fc7:	ff 75 08             	pushl  0x8(%ebp)
f0103fca:	e8 09 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103fcf:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103fd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fd5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103fdb:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103fde:	52                   	push   %edx
f0103fdf:	6a 00                	push   $0x0
f0103fe1:	ff 75 0c             	pushl  0xc(%ebp)
f0103fe4:	50                   	push   %eax
f0103fe5:	e8 82 fc ff ff       	call   f0103c6c <get_disk_page_table>
f0103fea:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103fed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff0:	85 c0                	test   %eax,%eax
f0103ff2:	74 29                	je     f010401d <pf_update_env_page+0x8a>
f0103ff4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff7:	85 c0                	test   %eax,%eax
f0103ff9:	0f 84 46 01 00 00    	je     f0104145 <pf_update_env_page+0x1b2>
f0103fff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104002:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104005:	c1 ea 0c             	shr    $0xc,%edx
f0104008:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010400e:	c1 e2 02             	shl    $0x2,%edx
f0104011:	01 d0                	add    %edx,%eax
f0104013:	8b 00                	mov    (%eax),%eax
f0104015:	85 c0                	test   %eax,%eax
f0104017:	0f 85 28 01 00 00    	jne    f0104145 <pf_update_env_page+0x1b2>
	{
		uint32 VA = (uint32)virtual_address ;
f010401d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104020:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104023:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104026:	85 c0                	test   %eax,%eax
f0104028:	79 09                	jns    f0104033 <pf_update_env_page+0xa0>
f010402a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0104031:	76 38                	jbe    f010406b <pf_update_env_page+0xd8>
f0104033:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010403a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010403d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0104042:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104045:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104048:	ba 00 00 00 00       	mov    $0x0,%edx
f010404d:	f7 75 f0             	divl   -0x10(%ebp)
f0104050:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104053:	29 d0                	sub    %edx,%eax
f0104055:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104058:	0f 87 d0 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
f010405e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0104065:	0f 87 c3 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010406b:	8b 45 08             	mov    0x8(%ebp),%eax
f010406e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104074:	83 ec 04             	sub    $0x4,%esp
f0104077:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010407a:	52                   	push   %edx
f010407b:	ff 75 0c             	pushl  0xc(%ebp)
f010407e:	50                   	push   %eax
f010407f:	e8 fb 36 00 00       	call   f010777f <get_frame_info>
f0104084:	83 c4 10             	add    $0x10,%esp
f0104087:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010408a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010408d:	3b 45 10             	cmp    0x10(%ebp),%eax
f0104090:	75 52                	jne    f01040e4 <pf_update_env_page+0x151>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0104092:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104095:	83 ec 04             	sub    $0x4,%esp
f0104098:	50                   	push   %eax
f0104099:	ff 75 f4             	pushl  -0xc(%ebp)
f010409c:	ff 75 08             	pushl  0x8(%ebp)
f010409f:	e8 27 fe ff ff       	call   f0103ecb <pf_add_env_page>
f01040a4:	83 c4 10             	add    $0x10,%esp
f01040a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040aa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040ae:	75 17                	jne    f01040c7 <pf_update_env_page+0x134>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01040b0:	83 ec 04             	sub    $0x4,%esp
f01040b3:	68 dc 21 13 f0       	push   $0xf01321dc
f01040b8:	68 1d 01 00 00       	push   $0x11d
f01040bd:	68 0d 21 13 f0       	push   $0xf013210d
f01040c2:	e8 e9 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01040c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ca:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f01040d0:	8d 50 01             	lea    0x1(%eax),%edx
f01040d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040d6:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
				return ret ;
f01040dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01040df:	e9 02 01 00 00       	jmp    f01041e6 <pf_update_env_page+0x253>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01040e4:	83 ec 04             	sub    $0x4,%esp
f01040e7:	6a 00                	push   $0x0
f01040e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01040ec:	ff 75 08             	pushl  0x8(%ebp)
f01040ef:	e8 a1 fc ff ff       	call   f0103d95 <pf_add_empty_env_page>
f01040f4:	83 c4 10             	add    $0x10,%esp
f01040f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040fa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040fe:	75 17                	jne    f0104117 <pf_update_env_page+0x184>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0104100:	83 ec 04             	sub    $0x4,%esp
f0104103:	68 08 22 13 f0       	push   $0xf0132208
f0104108:	68 28 01 00 00       	push   $0x128
f010410d:	68 0d 21 13 f0       	push   $0xf013210d
f0104112:	e8 99 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0104117:	8b 45 08             	mov    0x8(%ebp),%eax
f010411a:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0104120:	8d 50 01             	lea    0x1(%eax),%edx
f0104123:	8b 45 08             	mov    0x8(%ebp),%eax
f0104126:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f010412c:	eb 17                	jmp    f0104145 <pf_update_env_page+0x1b2>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010412e:	83 ec 04             	sub    $0x4,%esp
f0104131:	68 54 22 13 f0       	push   $0xf0132254
f0104136:	68 2f 01 00 00       	push   $0x12f
f010413b:	68 0d 21 13 f0       	push   $0xf013210d
f0104140:	e8 6b c0 ff ff       	call   f01001b0 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104145:	8b 45 08             	mov    0x8(%ebp),%eax
f0104148:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010414e:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0104151:	52                   	push   %edx
f0104152:	6a 00                	push   $0x0
f0104154:	ff 75 0c             	pushl  0xc(%ebp)
f0104157:	50                   	push   %eax
f0104158:	e8 0f fb ff ff       	call   f0103c6c <get_disk_page_table>
f010415d:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104160:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104163:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104166:	c1 ea 0c             	shr    $0xc,%edx
f0104169:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010416f:	c1 e2 02             	shl    $0x2,%edx
f0104172:	01 d0                	add    %edx,%eax
f0104174:	8b 00                	mov    (%eax),%eax
f0104176:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0104179:	83 ec 0c             	sub    $0xc,%esp
f010417c:	ff 75 10             	pushl  0x10(%ebp)
f010417f:	e8 93 f6 ff ff       	call   f0103817 <to_physical_address>
f0104184:	83 c4 10             	add    $0x10,%esp
f0104187:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010418a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010418d:	c1 e8 0c             	shr    $0xc,%eax
f0104190:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0104193:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104198:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f010419b:	72 17                	jb     f01041b4 <pf_update_env_page+0x221>
f010419d:	ff 75 dc             	pushl  -0x24(%ebp)
f01041a0:	68 70 21 13 f0       	push   $0xf0132170
f01041a5:	68 47 01 00 00       	push   $0x147
f01041aa:	68 0d 21 13 f0       	push   $0xf013210d
f01041af:	e8 fc bf ff ff       	call   f01001b0 <_panic>
f01041b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01041b7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01041bc:	83 ec 08             	sub    $0x8,%esp
f01041bf:	50                   	push   %eax
f01041c0:	ff 75 e0             	pushl  -0x20(%ebp)
f01041c3:	e8 e3 f6 ff ff       	call   f01038ab <write_disk_page>
f01041c8:	83 c4 10             	add    $0x10,%esp
f01041cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01041ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01041d1:	8b 80 94 da 01 00    	mov    0x1da94(%eax),%eax
f01041d7:	8d 50 01             	lea    0x1(%eax),%edx
f01041da:	8b 45 08             	mov    0x8(%ebp),%eax
f01041dd:	89 90 94 da 01 00    	mov    %edx,0x1da94(%eax)
	//======================

	return ret;
f01041e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01041e6:	c9                   	leave  
f01041e7:	c3                   	ret    

f01041e8 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01041e8:	55                   	push   %ebp
f01041e9:	89 e5                	mov    %esp,%ebp
f01041eb:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01041ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01041f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01041fc:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01041ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104202:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104208:	85 c0                	test   %eax,%eax
f010420a:	75 0a                	jne    f0104216 <pf_read_env_page+0x2e>
f010420c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104211:	e9 96 00 00 00       	jmp    f01042ac <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0104216:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104219:	8b 45 08             	mov    0x8(%ebp),%eax
f010421c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104222:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0104225:	51                   	push   %ecx
f0104226:	6a 00                	push   $0x0
f0104228:	52                   	push   %edx
f0104229:	50                   	push   %eax
f010422a:	e8 3d fa ff ff       	call   f0103c6c <get_disk_page_table>
f010422f:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104232:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104235:	85 c0                	test   %eax,%eax
f0104237:	75 07                	jne    f0104240 <pf_read_env_page+0x58>
f0104239:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010423e:	eb 6c                	jmp    f01042ac <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104240:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104243:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104246:	c1 ea 0c             	shr    $0xc,%edx
f0104249:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010424f:	c1 e2 02             	shl    $0x2,%edx
f0104252:	01 d0                	add    %edx,%eax
f0104254:	8b 00                	mov    (%eax),%eax
f0104256:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104259:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010425d:	75 07                	jne    f0104266 <pf_read_env_page+0x7e>
f010425f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104264:	eb 46                	jmp    f01042ac <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0104266:	83 ec 08             	sub    $0x8,%esp
f0104269:	ff 75 0c             	pushl  0xc(%ebp)
f010426c:	ff 75 f0             	pushl  -0x10(%ebp)
f010426f:	e8 08 f6 ff ff       	call   f010387c <read_disk_page>
f0104274:	83 c4 10             	add    $0x10,%esp
f0104277:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f010427a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010427d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104280:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104286:	6a 40                	push   $0x40
f0104288:	6a 00                	push   $0x0
f010428a:	52                   	push   %edx
f010428b:	50                   	push   %eax
f010428c:	e8 2a 3e 00 00       	call   f01080bb <pt_set_page_permissions>
f0104291:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0104294:	8b 45 08             	mov    0x8(%ebp),%eax
f0104297:	8b 80 90 da 01 00    	mov    0x1da90(%eax),%eax
f010429d:	8d 50 01             	lea    0x1(%eax),%edx
f01042a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01042a3:	89 90 90 da 01 00    	mov    %edx,0x1da90(%eax)
	//======================

	return disk_read_error;
f01042a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01042ac:	c9                   	leave  
f01042ad:	c3                   	ret    

f01042ae <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01042ae:	55                   	push   %ebp
f01042af:	89 e5                	mov    %esp,%ebp
f01042b1:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01042b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01042b7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	74 65                	je     f0104326 <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01042c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01042c4:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042ca:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01042cd:	52                   	push   %edx
f01042ce:	6a 00                	push   $0x0
f01042d0:	ff 75 0c             	pushl  0xc(%ebp)
f01042d3:	50                   	push   %eax
f01042d4:	e8 93 f9 ff ff       	call   f0103c6c <get_disk_page_table>
f01042d9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01042dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042df:	85 c0                	test   %eax,%eax
f01042e1:	74 46                	je     f0104329 <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01042e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042e6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01042e9:	c1 ea 0c             	shr    $0xc,%edx
f01042ec:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01042f2:	c1 e2 02             	shl    $0x2,%edx
f01042f5:	01 d0                	add    %edx,%eax
f01042f7:	8b 00                	mov    (%eax),%eax
f01042f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01042fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104302:	c1 ea 0c             	shr    $0xc,%edx
f0104305:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010430b:	c1 e2 02             	shl    $0x2,%edx
f010430e:	01 d0                	add    %edx,%eax
f0104310:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104316:	83 ec 0c             	sub    $0xc,%esp
f0104319:	ff 75 f4             	pushl  -0xc(%ebp)
f010431c:	e8 3a f8 ff ff       	call   f0103b5b <free_disk_frame>
f0104321:	83 c4 10             	add    $0x10,%esp
f0104324:	eb 04                	jmp    f010432a <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104326:	90                   	nop
f0104327:	eb 01                	jmp    f010432a <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0104329:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010432a:	c9                   	leave  
f010432b:	c3                   	ret    

f010432c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010432c:	55                   	push   %ebp
f010432d:	89 e5                	mov    %esp,%ebp
f010432f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104339:	e9 f7 00 00 00       	jmp    f0104435 <pf_free_env+0x109>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010433e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104341:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104347:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010434a:	c1 e2 02             	shl    $0x2,%edx
f010434d:	01 d0                	add    %edx,%eax
f010434f:	8b 00                	mov    (%eax),%eax
f0104351:	83 e0 01             	and    $0x1,%eax
f0104354:	85 c0                	test   %eax,%eax
f0104356:	0f 84 d5 00 00 00    	je     f0104431 <pf_free_env+0x105>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010435c:	8b 45 08             	mov    0x8(%ebp),%eax
f010435f:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104365:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104368:	c1 e2 02             	shl    $0x2,%edx
f010436b:	01 d0                	add    %edx,%eax
f010436d:	8b 00                	mov    (%eax),%eax
f010436f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104374:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104377:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010437a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010437d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104380:	c1 e8 0c             	shr    $0xc,%eax
f0104383:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104386:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010438b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010438e:	72 17                	jb     f01043a7 <pf_free_env+0x7b>
f0104390:	ff 75 e8             	pushl  -0x18(%ebp)
f0104393:	68 70 21 13 f0       	push   $0xf0132170
f0104398:	68 a7 01 00 00       	push   $0x1a7
f010439d:	68 0d 21 13 f0       	push   $0xf013210d
f01043a2:	e8 09 be ff ff       	call   f01001b0 <_panic>
f01043a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01043aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01043af:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01043b9:	eb 3a                	jmp    f01043f5 <pf_free_env+0xc9>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01043bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043c8:	01 d0                	add    %edx,%eax
f01043ca:	8b 00                	mov    (%eax),%eax
f01043cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01043cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043dc:	01 d0                	add    %edx,%eax
f01043de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01043e4:	83 ec 0c             	sub    $0xc,%esp
f01043e7:	ff 75 dc             	pushl  -0x24(%ebp)
f01043ea:	e8 6c f7 ff ff       	call   f0103b5b <free_disk_frame>
f01043ef:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043f2:	ff 45 f0             	incl   -0x10(%ebp)
f01043f5:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01043fc:	76 bd                	jbe    f01043bb <pf_free_env+0x8f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01043fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104401:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104407:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010440a:	c1 e2 02             	shl    $0x2,%edx
f010440d:	01 d0                	add    %edx,%eax
f010440f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0104415:	83 ec 0c             	sub    $0xc,%esp
f0104418:	ff 75 ec             	pushl  -0x14(%ebp)
f010441b:	e8 0a f4 ff ff       	call   f010382a <to_frame_info>
f0104420:	83 c4 10             	add    $0x10,%esp
f0104423:	83 ec 0c             	sub    $0xc,%esp
f0104426:	50                   	push   %eax
f0104427:	e8 8b 30 00 00       	call   f01074b7 <decrement_references>
f010442c:	83 c4 10             	add    $0x10,%esp
f010442f:	eb 01                	jmp    f0104432 <pf_free_env+0x106>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104431:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104432:	ff 45 f4             	incl   -0xc(%ebp)
f0104435:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010443c:	0f 86 fc fe ff ff    	jbe    f010433e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104442:	8b 45 08             	mov    0x8(%ebp),%eax
f0104445:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010444b:	83 ec 0c             	sub    $0xc,%esp
f010444e:	50                   	push   %eax
f010444f:	e8 d6 f3 ff ff       	call   f010382a <to_frame_info>
f0104454:	83 c4 10             	add    $0x10,%esp
f0104457:	83 ec 0c             	sub    $0xc,%esp
f010445a:	50                   	push   %eax
f010445b:	e8 57 30 00 00       	call   f01074b7 <decrement_references>
f0104460:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104463:	8b 45 08             	mov    0x8(%ebp),%eax
f0104466:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010446d:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f0104470:	8b 45 08             	mov    0x8(%ebp),%eax
f0104473:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010447a:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104486:	85 c0                	test   %eax,%eax
f0104488:	74 4b                	je     f01044d5 <pf_free_env+0x1a9>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010448a:	83 ec 0c             	sub    $0xc,%esp
f010448d:	ff 75 08             	pushl  0x8(%ebp)
f0104490:	e8 17 04 00 00       	call   f01048ac <__pf_remove_env_all_tables>
f0104495:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0104498:	8b 45 08             	mov    0x8(%ebp),%eax
f010449b:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01044a1:	83 ec 0c             	sub    $0xc,%esp
f01044a4:	50                   	push   %eax
f01044a5:	e8 80 f3 ff ff       	call   f010382a <to_frame_info>
f01044aa:	83 c4 10             	add    $0x10,%esp
f01044ad:	83 ec 0c             	sub    $0xc,%esp
f01044b0:	50                   	push   %eax
f01044b1:	e8 01 30 00 00       	call   f01074b7 <decrement_references>
f01044b6:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f01044b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044bc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01044c3:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f01044c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c9:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f01044d0:	00 00 00 
f01044d3:	eb 01                	jmp    f01044d6 <pf_free_env+0x1aa>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f01044d5:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f01044d6:	c9                   	leave  
f01044d7:	c3                   	ret    

f01044d8 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01044d8:	55                   	push   %ebp
f01044d9:	89 e5                	mov    %esp,%ebp
f01044db:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01044de:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e1:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f01044e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ea:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01044ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ef:	8b 00                	mov    (%eax),%eax
f01044f1:	85 c0                	test   %eax,%eax
f01044f3:	0f 85 ad 00 00 00    	jne    f01045a6 <get_disk_page_directory+0xce>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01044f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104500:	83 ec 0c             	sub    $0xc,%esp
f0104503:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104506:	50                   	push   %eax
f0104507:	e8 19 2e 00 00       	call   f0107325 <allocate_frame>
f010450c:	83 c4 10             	add    $0x10,%esp
f010450f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104512:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104516:	79 08                	jns    f0104520 <get_disk_page_directory+0x48>
				return r;
f0104518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010451b:	e9 8b 00 00 00       	jmp    f01045ab <get_disk_page_directory+0xd3>
			p->references = 1;
f0104520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104523:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104529:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010452c:	83 ec 0c             	sub    $0xc,%esp
f010452f:	50                   	push   %eax
f0104530:	e8 e2 f2 ff ff       	call   f0103817 <to_physical_address>
f0104535:	83 c4 10             	add    $0x10,%esp
f0104538:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010453b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010453e:	c1 e8 0c             	shr    $0xc,%eax
f0104541:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104544:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104549:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010454c:	72 17                	jb     f0104565 <get_disk_page_directory+0x8d>
f010454e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104551:	68 70 21 13 f0       	push   $0xf0132170
f0104556:	68 ff 01 00 00       	push   $0x1ff
f010455b:	68 0d 21 13 f0       	push   $0xf013210d
f0104560:	e8 4b bc ff ff       	call   f01001b0 <_panic>
f0104565:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104568:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010456d:	89 c2                	mov    %eax,%edx
f010456f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104572:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104574:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104577:	83 ec 0c             	sub    $0xc,%esp
f010457a:	50                   	push   %eax
f010457b:	e8 97 f2 ff ff       	call   f0103817 <to_physical_address>
f0104580:	83 c4 10             	add    $0x10,%esp
f0104583:	89 c2                	mov    %eax,%edx
f0104585:	8b 45 08             	mov    0x8(%ebp),%eax
f0104588:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010458e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104591:	8b 00                	mov    (%eax),%eax
f0104593:	83 ec 04             	sub    $0x4,%esp
f0104596:	68 00 10 00 00       	push   $0x1000
f010459b:	6a 00                	push   $0x0
f010459d:	50                   	push   %eax
f010459e:	e8 e7 ac 02 00       	call   f012f28a <memset>
f01045a3:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01045a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045ab:	c9                   	leave  
f01045ac:	c3                   	ret    

f01045ad <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f01045ad:	55                   	push   %ebp
f01045ae:	89 e5                	mov    %esp,%ebp
f01045b0:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f01045b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01045ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01045c1:	e9 ac 00 00 00       	jmp    f0104672 <pf_calculate_allocated_pages+0xc5>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01045c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045d2:	c1 e2 02             	shl    $0x2,%edx
f01045d5:	01 d0                	add    %edx,%eax
f01045d7:	8b 00                	mov    (%eax),%eax
f01045d9:	83 e0 01             	and    $0x1,%eax
f01045dc:	85 c0                	test   %eax,%eax
f01045de:	0f 84 8a 00 00 00    	je     f010466e <pf_calculate_allocated_pages+0xc1>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01045e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01045e7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045f0:	c1 e2 02             	shl    $0x2,%edx
f01045f3:	01 d0                	add    %edx,%eax
f01045f5:	8b 00                	mov    (%eax),%eax
f01045f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01045fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01045ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104602:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104605:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104608:	c1 e8 0c             	shr    $0xc,%eax
f010460b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010460e:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104613:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0104616:	72 17                	jb     f010462f <pf_calculate_allocated_pages+0x82>
f0104618:	ff 75 e4             	pushl  -0x1c(%ebp)
f010461b:	68 70 21 13 f0       	push   $0xf0132170
f0104620:	68 1f 02 00 00       	push   $0x21f
f0104625:	68 0d 21 13 f0       	push   $0xf013210d
f010462a:	e8 81 bb ff ff       	call   f01001b0 <_panic>
f010462f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104632:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104637:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010463a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104641:	eb 20                	jmp    f0104663 <pf_calculate_allocated_pages+0xb6>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0104643:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104646:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010464d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104650:	01 d0                	add    %edx,%eax
f0104652:	8b 00                	mov    (%eax),%eax
f0104654:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104657:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010465b:	74 03                	je     f0104660 <pf_calculate_allocated_pages+0xb3>
				counter ++;
f010465d:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104660:	ff 45 ec             	incl   -0x14(%ebp)
f0104663:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010466a:	76 d7                	jbe    f0104643 <pf_calculate_allocated_pages+0x96>
f010466c:	eb 01                	jmp    f010466f <pf_calculate_allocated_pages+0xc2>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010466e:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010466f:	ff 45 f4             	incl   -0xc(%ebp)
f0104672:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104679:	0f 86 47 ff ff ff    	jbe    f01045c6 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010467f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104682:	c9                   	leave  
f0104683:	c3                   	ret    

f0104684 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104684:	55                   	push   %ebp
f0104685:	89 e5                	mov    %esp,%ebp
f0104687:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010468a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104691:	a1 84 a2 2d f0       	mov    0xf02da284,%eax
f0104696:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104699:	eb 0b                	jmp    f01046a6 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010469b:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010469e:	a1 8c a2 2d f0       	mov    0xf02da28c,%eax
f01046a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046a6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046aa:	74 07                	je     f01046b3 <pf_calculate_free_frames+0x2f>
f01046ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046af:	8b 00                	mov    (%eax),%eax
f01046b1:	eb 05                	jmp    f01046b8 <pf_calculate_free_frames+0x34>
f01046b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b8:	a3 8c a2 2d f0       	mov    %eax,0xf02da28c
f01046bd:	a1 8c a2 2d f0       	mov    0xf02da28c,%eax
f01046c2:	85 c0                	test   %eax,%eax
f01046c4:	75 d5                	jne    f010469b <pf_calculate_free_frames+0x17>
f01046c6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046ca:	75 cf                	jne    f010469b <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f01046cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01046cf:	c9                   	leave  
f01046d0:	c3                   	ret    

f01046d1 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f01046d1:	55                   	push   %ebp
f01046d2:	89 e5                	mov    %esp,%ebp
f01046d4:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f01046d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01046da:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f01046e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e3:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f01046e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e8:	8b 00                	mov    (%eax),%eax
f01046ea:	85 c0                	test   %eax,%eax
f01046ec:	0f 85 ad 00 00 00    	jne    f010479f <get_disk_table_directory+0xce>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046f2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046f9:	83 ec 0c             	sub    $0xc,%esp
f01046fc:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046ff:	50                   	push   %eax
f0104700:	e8 20 2c 00 00       	call   f0107325 <allocate_frame>
f0104705:	83 c4 10             	add    $0x10,%esp
f0104708:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010470b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010470f:	79 08                	jns    f0104719 <get_disk_table_directory+0x48>
				return r;
f0104711:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104714:	e9 8b 00 00 00       	jmp    f01047a4 <get_disk_table_directory+0xd3>
			p->references = 1;
f0104719:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010471c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104722:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104725:	83 ec 0c             	sub    $0xc,%esp
f0104728:	50                   	push   %eax
f0104729:	e8 e9 f0 ff ff       	call   f0103817 <to_physical_address>
f010472e:	83 c4 10             	add    $0x10,%esp
f0104731:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104734:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104737:	c1 e8 0c             	shr    $0xc,%eax
f010473a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010473d:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104742:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104745:	72 17                	jb     f010475e <get_disk_table_directory+0x8d>
f0104747:	ff 75 f0             	pushl  -0x10(%ebp)
f010474a:	68 70 21 13 f0       	push   $0xf0132170
f010474f:	68 5d 02 00 00       	push   $0x25d
f0104754:	68 0d 21 13 f0       	push   $0xf013210d
f0104759:	e8 52 ba ff ff       	call   f01001b0 <_panic>
f010475e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104761:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104766:	89 c2                	mov    %eax,%edx
f0104768:	8b 45 0c             	mov    0xc(%ebp),%eax
f010476b:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010476d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104770:	83 ec 0c             	sub    $0xc,%esp
f0104773:	50                   	push   %eax
f0104774:	e8 9e f0 ff ff       	call   f0103817 <to_physical_address>
f0104779:	83 c4 10             	add    $0x10,%esp
f010477c:	89 c2                	mov    %eax,%edx
f010477e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104781:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104787:	8b 45 0c             	mov    0xc(%ebp),%eax
f010478a:	8b 00                	mov    (%eax),%eax
f010478c:	83 ec 04             	sub    $0x4,%esp
f010478f:	68 00 10 00 00       	push   $0x1000
f0104794:	6a 00                	push   $0x0
f0104796:	50                   	push   %eax
f0104797:	e8 ee aa 02 00       	call   f012f28a <memset>
f010479c:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010479f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01047a4:	c9                   	leave  
f01047a5:	c3                   	ret    

f01047a6 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01047a6:	55                   	push   %ebp
f01047a7:	89 e5                	mov    %esp,%ebp
f01047a9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f01047ac:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01047b3:	76 19                	jbe    f01047ce <__pf_write_env_table+0x28>
f01047b5:	68 a0 21 13 f0       	push   $0xf01321a0
f01047ba:	68 c6 21 13 f0       	push   $0xf01321c6
f01047bf:	68 6b 02 00 00       	push   $0x26b
f01047c4:	68 0d 21 13 f0       	push   $0xf013210d
f01047c9:	e8 e2 b9 ff ff       	call   f01001b0 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f01047ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01047d1:	05 b0 00 00 00       	add    $0xb0,%eax
f01047d6:	83 ec 08             	sub    $0x8,%esp
f01047d9:	50                   	push   %eax
f01047da:	ff 75 08             	pushl  0x8(%ebp)
f01047dd:	e8 ef fe ff ff       	call   f01046d1 <get_disk_table_directory>
f01047e2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01047e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01047e8:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01047ee:	8b 55 0c             	mov    0xc(%ebp),%edx
f01047f1:	c1 ea 16             	shr    $0x16,%edx
f01047f4:	c1 e2 02             	shl    $0x2,%edx
f01047f7:	01 d0                	add    %edx,%eax
f01047f9:	8b 00                	mov    (%eax),%eax
f01047fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f01047fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104801:	85 c0                	test   %eax,%eax
f0104803:	75 34                	jne    f0104839 <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0104805:	83 ec 0c             	sub    $0xc,%esp
f0104808:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010480b:	50                   	push   %eax
f010480c:	e8 83 f2 ff ff       	call   f0103a94 <allocate_disk_frame>
f0104811:	83 c4 10             	add    $0x10,%esp
f0104814:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0104817:	75 07                	jne    f0104820 <__pf_write_env_table+0x7a>
f0104819:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010481e:	eb 31                	jmp    f0104851 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0104820:	8b 45 08             	mov    0x8(%ebp),%eax
f0104823:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104829:	8b 55 0c             	mov    0xc(%ebp),%edx
f010482c:	c1 ea 16             	shr    $0x16,%edx
f010482f:	c1 e2 02             	shl    $0x2,%edx
f0104832:	01 c2                	add    %eax,%edx
f0104834:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104837:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0104839:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010483c:	83 ec 08             	sub    $0x8,%esp
f010483f:	ff 75 10             	pushl  0x10(%ebp)
f0104842:	50                   	push   %eax
f0104843:	e8 63 f0 ff ff       	call   f01038ab <write_disk_page>
f0104848:	83 c4 10             	add    $0x10,%esp
f010484b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010484e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104851:	c9                   	leave  
f0104852:	c3                   	ret    

f0104853 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104853:	55                   	push   %ebp
f0104854:	89 e5                	mov    %esp,%ebp
f0104856:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104859:	8b 45 08             	mov    0x8(%ebp),%eax
f010485c:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104862:	85 c0                	test   %eax,%eax
f0104864:	75 07                	jne    f010486d <__pf_read_env_table+0x1a>
f0104866:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010486b:	eb 3d                	jmp    f01048aa <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010486d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104870:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104876:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104879:	c1 ea 16             	shr    $0x16,%edx
f010487c:	c1 e2 02             	shl    $0x2,%edx
f010487f:	01 d0                	add    %edx,%eax
f0104881:	8b 00                	mov    (%eax),%eax
f0104883:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010488a:	75 07                	jne    f0104893 <__pf_read_env_table+0x40>
f010488c:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104891:	eb 17                	jmp    f01048aa <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104893:	83 ec 08             	sub    $0x8,%esp
f0104896:	ff 75 10             	pushl  0x10(%ebp)
f0104899:	ff 75 f4             	pushl  -0xc(%ebp)
f010489c:	e8 db ef ff ff       	call   f010387c <read_disk_page>
f01048a1:	83 c4 10             	add    $0x10,%esp
f01048a4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f01048a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01048aa:	c9                   	leave  
f01048ab:	c3                   	ret    

f01048ac <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f01048ac:	55                   	push   %ebp
f01048ad:	89 e5                	mov    %esp,%ebp
f01048af:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01048b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048b5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048bb:	85 c0                	test   %eax,%eax
f01048bd:	74 52                	je     f0104911 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01048bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048c6:	eb 3e                	jmp    f0104906 <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f01048c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01048cb:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048d4:	c1 e2 02             	shl    $0x2,%edx
f01048d7:	01 d0                	add    %edx,%eax
f01048d9:	8b 00                	mov    (%eax),%eax
f01048db:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f01048de:	8b 45 08             	mov    0x8(%ebp),%eax
f01048e1:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048ea:	c1 e2 02             	shl    $0x2,%edx
f01048ed:	01 d0                	add    %edx,%eax
f01048ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f01048f5:	83 ec 0c             	sub    $0xc,%esp
f01048f8:	ff 75 f0             	pushl  -0x10(%ebp)
f01048fb:	e8 5b f2 ff ff       	call   f0103b5b <free_disk_frame>
f0104900:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104903:	ff 45 f4             	incl   -0xc(%ebp)
f0104906:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010490d:	76 b9                	jbe    f01048c8 <__pf_remove_env_all_tables+0x1c>
f010490f:	eb 01                	jmp    f0104912 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104911:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104912:	c9                   	leave  
f0104913:	c3                   	ret    

f0104914 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104914:	55                   	push   %ebp
f0104915:	89 e5                	mov    %esp,%ebp
f0104917:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010491a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010491e:	75 10                	jne    f0104930 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104920:	83 ec 0c             	sub    $0xc,%esp
f0104923:	68 d0 22 13 f0       	push   $0xf01322d0
f0104928:	e8 04 c5 ff ff       	call   f0100e31 <cprintf>
f010492d:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104930:	8b 45 08             	mov    0x8(%ebp),%eax
f0104933:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104939:	85 c0                	test   %eax,%eax
f010493b:	74 43                	je     f0104980 <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010493d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104940:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104946:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104949:	c1 ea 16             	shr    $0x16,%edx
f010494c:	c1 e2 02             	shl    $0x2,%edx
f010494f:	01 d0                	add    %edx,%eax
f0104951:	8b 00                	mov    (%eax),%eax
f0104953:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104956:	8b 45 08             	mov    0x8(%ebp),%eax
f0104959:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010495f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104962:	c1 ea 16             	shr    $0x16,%edx
f0104965:	c1 e2 02             	shl    $0x2,%edx
f0104968:	01 d0                	add    %edx,%eax
f010496a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104970:	83 ec 0c             	sub    $0xc,%esp
f0104973:	ff 75 f4             	pushl  -0xc(%ebp)
f0104976:	e8 e0 f1 ff ff       	call   f0103b5b <free_disk_frame>
f010497b:	83 c4 10             	add    $0x10,%esp
f010497e:	eb 01                	jmp    f0104981 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104980:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104981:	c9                   	leave  
f0104982:	c3                   	ret    

f0104983 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104983:	55                   	push   %ebp
f0104984:	89 e5                	mov    %esp,%ebp
f0104986:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104989:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104990:	eb 1f                	jmp    f01049b1 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104995:	83 ec 04             	sub    $0x4,%esp
f0104998:	6a 08                	push   $0x8
f010499a:	ff 75 08             	pushl  0x8(%ebp)
f010499d:	50                   	push   %eax
f010499e:	e8 f4 af 02 00       	call   f012f997 <ide_write>
f01049a3:	83 c4 10             	add    $0x10,%esp
f01049a6:	85 c0                	test   %eax,%eax
f01049a8:	75 12                	jne    f01049bc <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f01049aa:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f01049b1:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f01049b8:	7e d8                	jle    f0104992 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049ba:	eb 01                	jmp    f01049bd <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f01049bc:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049bd:	90                   	nop
f01049be:	c9                   	leave  
f01049bf:	c3                   	ret    

f01049c0 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01049c0:	55                   	push   %ebp
f01049c1:	89 e5                	mov    %esp,%ebp
f01049c3:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c9:	0f b6 c0             	movzbl %al,%eax
f01049cc:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01049d3:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049d6:	8a 45 f6             	mov    -0xa(%ebp),%al
f01049d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01049dc:	ee                   	out    %al,(%dx)
f01049dd:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01049e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01049e7:	89 c2                	mov    %eax,%edx
f01049e9:	ec                   	in     (%dx),%al
f01049ea:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01049ed:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01049f0:	0f b6 c0             	movzbl %al,%eax
}
f01049f3:	c9                   	leave  
f01049f4:	c3                   	ret    

f01049f5 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01049f5:	55                   	push   %ebp
f01049f6:	89 e5                	mov    %esp,%ebp
f01049f8:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01049fe:	0f b6 c0             	movzbl %al,%eax
f0104a01:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104a08:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104a0b:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104a0e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104a11:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104a12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a15:	0f b6 c0             	movzbl %al,%eax
f0104a18:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104a1f:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104a22:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104a25:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104a28:	ee                   	out    %al,(%dx)
}
f0104a29:	90                   	nop
f0104a2a:	c9                   	leave  
f0104a2b:	c3                   	ret    

f0104a2c <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104a2c:	55                   	push   %ebp
f0104a2d:	89 e5                	mov    %esp,%ebp
f0104a2f:	53                   	push   %ebx
f0104a30:	83 ec 24             	sub    $0x24,%esp
f0104a33:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a36:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104a39:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104a40:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104a44:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104a47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104a4a:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104a4b:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104a4f:	77 48                	ja     f0104a99 <kclock_start+0x6d>
f0104a51:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104a58:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104a5c:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104a5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a62:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104a63:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a67:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104a6c:	99                   	cltd   
f0104a6d:	f7 fb                	idiv   %ebx
f0104a6f:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104a75:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a79:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104a7e:	99                   	cltd   
f0104a7f:	f7 fb                	idiv   %ebx
f0104a81:	89 c3                	mov    %eax,%ebx
f0104a83:	89 c8                	mov    %ecx,%eax
f0104a85:	99                   	cltd   
f0104a86:	f7 fb                	idiv   %ebx
f0104a88:	0f b7 c0             	movzwl %ax,%eax
f0104a8b:	83 ec 0c             	sub    $0xc,%esp
f0104a8e:	50                   	push   %eax
f0104a8f:	e8 dd 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104a94:	83 c4 10             	add    $0x10,%esp
f0104a97:	eb 13                	jmp    f0104aac <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104a99:	6a 35                	push   $0x35
f0104a9b:	68 f4 22 13 f0       	push   $0xf01322f4
f0104aa0:	6a 33                	push   $0x33
f0104aa2:	68 50 23 13 f0       	push   $0xf0132350
f0104aa7:	e8 04 b7 ff ff       	call   f01001b0 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104aac:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f0104ab2:	0f b7 c0             	movzwl %ax,%eax
f0104ab5:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104aba:	83 ec 0c             	sub    $0xc,%esp
f0104abd:	50                   	push   %eax
f0104abe:	e8 3a 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104ac3:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104ac6:	90                   	nop
f0104ac7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104aca:	c9                   	leave  
f0104acb:	c3                   	ret    

f0104acc <kclock_stop>:

void
kclock_stop(void)
{
f0104acc:	55                   	push   %ebp
f0104acd:	89 e5                	mov    %esp,%ebp
f0104acf:	83 ec 18             	sub    $0x18,%esp
f0104ad2:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ad9:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104add:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104ae0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ae3:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104ae4:	83 ec 0c             	sub    $0xc,%esp
f0104ae7:	68 ff ff 00 00       	push   $0xffff
f0104aec:	e8 0c 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104af1:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104af4:	90                   	nop
f0104af5:	c9                   	leave  
f0104af6:	c3                   	ret    

f0104af7 <kclock_resume>:

void
kclock_resume(void)
{
f0104af7:	55                   	push   %ebp
f0104af8:	89 e5                	mov    %esp,%ebp
f0104afa:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104afd:	e8 b1 01 00 00       	call   f0104cb3 <kclock_read_cnt0>
f0104b02:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104b06:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104b0b:	77 06                	ja     f0104b13 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104b0d:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104b13:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b17:	83 e0 01             	and    $0x1,%eax
f0104b1a:	66 85 c0             	test   %ax,%ax
f0104b1d:	74 09                	je     f0104b28 <kclock_resume+0x31>
		cnt0++;
f0104b1f:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b23:	40                   	inc    %eax
f0104b24:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104b28:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104b2f:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104b33:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104b36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104b39:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b3a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104b3e:	83 ec 0c             	sub    $0xc,%esp
f0104b41:	50                   	push   %eax
f0104b42:	e8 2a 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b47:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b4a:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f0104b50:	0f b7 c0             	movzwl %ax,%eax
f0104b53:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104b58:	83 ec 0c             	sub    $0xc,%esp
f0104b5b:	50                   	push   %eax
f0104b5c:	e8 9c 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104b61:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104b64:	90                   	nop
f0104b65:	c9                   	leave  
f0104b66:	c3                   	ret    

f0104b67 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104b67:	55                   	push   %ebp
f0104b68:	89 e5                	mov    %esp,%ebp
f0104b6a:	83 ec 28             	sub    $0x28,%esp
f0104b6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b70:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104b73:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104b7a:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104b7e:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104b81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b84:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b85:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104b89:	83 ec 0c             	sub    $0xc,%esp
f0104b8c:	50                   	push   %eax
f0104b8d:	e8 df 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b92:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b95:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f0104b9b:	0f b7 c0             	movzwl %ax,%eax
f0104b9e:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104ba3:	83 ec 0c             	sub    $0xc,%esp
f0104ba6:	50                   	push   %eax
f0104ba7:	e8 51 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104bac:	83 c4 10             	add    $0x10,%esp

}
f0104baf:	90                   	nop
f0104bb0:	c9                   	leave  
f0104bb1:	c3                   	ret    

f0104bb2 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104bb2:	55                   	push   %ebp
f0104bb3:	89 e5                	mov    %esp,%ebp
f0104bb5:	56                   	push   %esi
f0104bb6:	53                   	push   %ebx
f0104bb7:	83 ec 20             	sub    $0x20,%esp
f0104bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bbd:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104bc0:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104bc4:	0f 87 8a 00 00 00    	ja     f0104c54 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104bca:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104bce:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bd3:	99                   	cltd   
f0104bd4:	f7 fe                	idiv   %esi
f0104bd6:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104bdc:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104be0:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104be5:	99                   	cltd   
f0104be6:	f7 fb                	idiv   %ebx
f0104be8:	89 c6                	mov    %eax,%esi
f0104bea:	89 c8                	mov    %ecx,%eax
f0104bec:	99                   	cltd   
f0104bed:	f7 fe                	idiv   %esi
f0104bef:	89 c3                	mov    %eax,%ebx
f0104bf1:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104bf5:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bfa:	99                   	cltd   
f0104bfb:	f7 f9                	idiv   %ecx
f0104bfd:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c03:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104c07:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c0c:	99                   	cltd   
f0104c0d:	f7 fe                	idiv   %esi
f0104c0f:	89 c6                	mov    %eax,%esi
f0104c11:	89 c8                	mov    %ecx,%eax
f0104c13:	99                   	cltd   
f0104c14:	f7 fe                	idiv   %esi
f0104c16:	25 01 00 00 80       	and    $0x80000001,%eax
f0104c1b:	85 c0                	test   %eax,%eax
f0104c1d:	79 05                	jns    f0104c24 <kclock_set_quantum+0x72>
f0104c1f:	48                   	dec    %eax
f0104c20:	83 c8 fe             	or     $0xfffffffe,%eax
f0104c23:	40                   	inc    %eax
f0104c24:	01 d8                	add    %ebx,%eax
f0104c26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c29:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c30:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c34:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c37:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c3a:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c3e:	0f b7 c0             	movzwl %ax,%eax
f0104c41:	83 ec 0c             	sub    $0xc,%esp
f0104c44:	50                   	push   %eax
f0104c45:	e8 27 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104c4a:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104c4d:	e8 7a fe ff ff       	call   f0104acc <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104c52:	eb 16                	jmp    f0104c6a <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c54:	6a 35                	push   $0x35
f0104c56:	68 f4 22 13 f0       	push   $0xf01322f4
f0104c5b:	68 cc 00 00 00       	push   $0xcc
f0104c60:	68 50 23 13 f0       	push   $0xf0132350
f0104c65:	e8 46 b5 ff ff       	call   f01001b0 <_panic>
	}
}
f0104c6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104c6d:	5b                   	pop    %ebx
f0104c6e:	5e                   	pop    %esi
f0104c6f:	5d                   	pop    %ebp
f0104c70:	c3                   	ret    

f0104c71 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104c71:	55                   	push   %ebp
f0104c72:	89 e5                	mov    %esp,%ebp
f0104c74:	83 ec 14             	sub    $0x14,%esp
f0104c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c7a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c81:	0f b6 c0             	movzbl %al,%eax
f0104c84:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104c8b:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104c8e:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104c91:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104c94:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104c95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c98:	66 c1 e8 08          	shr    $0x8,%ax
f0104c9c:	0f b6 c0             	movzbl %al,%eax
f0104c9f:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104ca6:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104ca9:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104cac:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104caf:	ee                   	out    %al,(%dx)
}
f0104cb0:	90                   	nop
f0104cb1:	c9                   	leave  
f0104cb2:	c3                   	ret    

f0104cb3 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104cb3:	55                   	push   %ebp
f0104cb4:	89 e5                	mov    %esp,%ebp
f0104cb6:	83 ec 20             	sub    $0x20,%esp
f0104cb9:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104cc3:	89 c2                	mov    %eax,%edx
f0104cc5:	ec                   	in     (%dx),%al
f0104cc6:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104cc9:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ccc:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104ccf:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104cd9:	89 c2                	mov    %eax,%edx
f0104cdb:	ec                   	in     (%dx),%al
f0104cdc:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104cdf:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104ce2:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104ce5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ce9:	c1 e0 08             	shl    $0x8,%eax
f0104cec:	89 c2                	mov    %eax,%edx
f0104cee:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104cf2:	09 d0                	or     %edx,%eax
f0104cf4:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104cfb:	c9                   	leave  
f0104cfc:	c3                   	ret    

f0104cfd <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104cfd:	55                   	push   %ebp
f0104cfe:	89 e5                	mov    %esp,%ebp
f0104d00:	83 ec 30             	sub    $0x30,%esp
f0104d03:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104d0d:	89 c2                	mov    %eax,%edx
f0104d0f:	ec                   	in     (%dx),%al
f0104d10:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104d13:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104d16:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104d19:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d20:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d24:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104d27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d2a:	ee                   	out    %al,(%dx)
f0104d2b:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d32:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d35:	89 c2                	mov    %eax,%edx
f0104d37:	ec                   	in     (%dx),%al
f0104d38:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104d3b:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104d3e:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104d41:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104d4b:	89 c2                	mov    %eax,%edx
f0104d4d:	ec                   	in     (%dx),%al
f0104d4e:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104d51:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104d54:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104d57:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104d5b:	c1 e0 08             	shl    $0x8,%eax
f0104d5e:	89 c2                	mov    %eax,%edx
f0104d60:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104d64:	09 d0                	or     %edx,%eax
f0104d66:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104d6a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104d6e:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104d75:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d78:	8a 45 df             	mov    -0x21(%ebp),%al
f0104d7b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104d7e:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104d7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104d82:	c9                   	leave  
f0104d83:	c3                   	ret    

f0104d84 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104d84:	55                   	push   %ebp
f0104d85:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104d87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d8b:	74 1d                	je     f0104daa <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d99:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104da0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104da3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104daa:	90                   	nop
f0104dab:	5d                   	pop    %ebp
f0104dac:	c3                   	ret    

f0104dad <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104dad:	55                   	push   %ebp
f0104dae:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104db0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104db4:	74 08                	je     f0104dbe <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104db6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104db9:	8b 40 0c             	mov    0xc(%eax),%eax
f0104dbc:	eb 05                	jmp    f0104dc3 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104dbe:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104dc3:	5d                   	pop    %ebp
f0104dc4:	c3                   	ret    

f0104dc5 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104dc5:	55                   	push   %ebp
f0104dc6:	89 e5                	mov    %esp,%ebp
f0104dc8:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104dcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104dcf:	75 16                	jne    f0104de7 <enqueue+0x22>
f0104dd1:	68 64 23 13 f0       	push   $0xf0132364
f0104dd6:	68 72 23 13 f0       	push   $0xf0132372
f0104ddb:	6a 33                	push   $0x33
f0104ddd:	68 87 23 13 f0       	push   $0xf0132387
f0104de2:	e8 c9 b3 ff ff       	call   f01001b0 <_panic>
	if(env != NULL)
f0104de7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104deb:	74 66                	je     f0104e53 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104ded:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104df1:	75 14                	jne    f0104e07 <enqueue+0x42>
f0104df3:	83 ec 04             	sub    $0x4,%esp
f0104df6:	68 a0 23 13 f0       	push   $0xf01323a0
f0104dfb:	6a 36                	push   $0x36
f0104dfd:	68 87 23 13 f0       	push   $0xf0132387
f0104e02:	e8 a9 b3 ff ff       	call   f01001b0 <_panic>
f0104e07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e0a:	8b 10                	mov    (%eax),%edx
f0104e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e0f:	89 50 44             	mov    %edx,0x44(%eax)
f0104e12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e15:	8b 40 44             	mov    0x44(%eax),%eax
f0104e18:	85 c0                	test   %eax,%eax
f0104e1a:	74 0d                	je     f0104e29 <enqueue+0x64>
f0104e1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e1f:	8b 00                	mov    (%eax),%eax
f0104e21:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e24:	89 50 48             	mov    %edx,0x48(%eax)
f0104e27:	eb 09                	jmp    f0104e32 <enqueue+0x6d>
f0104e29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e2f:	89 50 04             	mov    %edx,0x4(%eax)
f0104e32:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e35:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e38:	89 10                	mov    %edx,(%eax)
f0104e3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e3d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e47:	8b 40 0c             	mov    0xc(%eax),%eax
f0104e4a:	8d 50 01             	lea    0x1(%eax),%edx
f0104e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e50:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104e53:	90                   	nop
f0104e54:	c9                   	leave  
f0104e55:	c3                   	ret    

f0104e56 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104e56:	55                   	push   %ebp
f0104e57:	89 e5                	mov    %esp,%ebp
f0104e59:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104e5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e60:	75 0a                	jne    f0104e6c <dequeue+0x16>
f0104e62:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e67:	e9 a0 00 00 00       	jmp    f0104f0c <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104e6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e6f:	8b 40 04             	mov    0x4(%eax),%eax
f0104e72:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104e75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e79:	0f 84 8a 00 00 00    	je     f0104f09 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104e7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e83:	75 14                	jne    f0104e99 <dequeue+0x43>
f0104e85:	83 ec 04             	sub    $0x4,%esp
f0104e88:	68 c3 23 13 f0       	push   $0xf01323c3
f0104e8d:	6a 43                	push   $0x43
f0104e8f:	68 87 23 13 f0       	push   $0xf0132387
f0104e94:	e8 17 b3 ff ff       	call   f01001b0 <_panic>
f0104e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9c:	8b 40 44             	mov    0x44(%eax),%eax
f0104e9f:	85 c0                	test   %eax,%eax
f0104ea1:	74 11                	je     f0104eb4 <dequeue+0x5e>
f0104ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ea6:	8b 40 44             	mov    0x44(%eax),%eax
f0104ea9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104eac:	8b 52 48             	mov    0x48(%edx),%edx
f0104eaf:	89 50 48             	mov    %edx,0x48(%eax)
f0104eb2:	eb 0c                	jmp    f0104ec0 <dequeue+0x6a>
f0104eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb7:	8b 50 48             	mov    0x48(%eax),%edx
f0104eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ebd:	89 50 04             	mov    %edx,0x4(%eax)
f0104ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ec3:	8b 40 48             	mov    0x48(%eax),%eax
f0104ec6:	85 c0                	test   %eax,%eax
f0104ec8:	74 11                	je     f0104edb <dequeue+0x85>
f0104eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ecd:	8b 40 48             	mov    0x48(%eax),%eax
f0104ed0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ed3:	8b 52 44             	mov    0x44(%edx),%edx
f0104ed6:	89 50 44             	mov    %edx,0x44(%eax)
f0104ed9:	eb 0b                	jmp    f0104ee6 <dequeue+0x90>
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	8b 50 44             	mov    0x44(%eax),%edx
f0104ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ee4:	89 10                	mov    %edx,(%eax)
f0104ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104efa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104efd:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f00:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f06:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104f0c:	c9                   	leave  
f0104f0d:	c3                   	ret    

f0104f0e <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104f0e:	55                   	push   %ebp
f0104f0f:	89 e5                	mov    %esp,%ebp
f0104f11:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f18:	75 16                	jne    f0104f30 <remove_from_queue+0x22>
f0104f1a:	68 64 23 13 f0       	push   $0xf0132364
f0104f1f:	68 72 23 13 f0       	push   $0xf0132372
f0104f24:	6a 4d                	push   $0x4d
f0104f26:	68 87 23 13 f0       	push   $0xf0132387
f0104f2b:	e8 80 b2 ff ff       	call   f01001b0 <_panic>

	if (e != NULL)
f0104f30:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f34:	0f 84 8a 00 00 00    	je     f0104fc4 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104f3a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f3e:	75 14                	jne    f0104f54 <remove_from_queue+0x46>
f0104f40:	83 ec 04             	sub    $0x4,%esp
f0104f43:	68 c3 23 13 f0       	push   $0xf01323c3
f0104f48:	6a 51                	push   $0x51
f0104f4a:	68 87 23 13 f0       	push   $0xf0132387
f0104f4f:	e8 5c b2 ff ff       	call   f01001b0 <_panic>
f0104f54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f57:	8b 40 44             	mov    0x44(%eax),%eax
f0104f5a:	85 c0                	test   %eax,%eax
f0104f5c:	74 11                	je     f0104f6f <remove_from_queue+0x61>
f0104f5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f61:	8b 40 44             	mov    0x44(%eax),%eax
f0104f64:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f67:	8b 52 48             	mov    0x48(%edx),%edx
f0104f6a:	89 50 48             	mov    %edx,0x48(%eax)
f0104f6d:	eb 0c                	jmp    f0104f7b <remove_from_queue+0x6d>
f0104f6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f72:	8b 50 48             	mov    0x48(%eax),%edx
f0104f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f78:	89 50 04             	mov    %edx,0x4(%eax)
f0104f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f7e:	8b 40 48             	mov    0x48(%eax),%eax
f0104f81:	85 c0                	test   %eax,%eax
f0104f83:	74 11                	je     f0104f96 <remove_from_queue+0x88>
f0104f85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f88:	8b 40 48             	mov    0x48(%eax),%eax
f0104f8b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f8e:	8b 52 44             	mov    0x44(%edx),%edx
f0104f91:	89 50 44             	mov    %edx,0x44(%eax)
f0104f94:	eb 0b                	jmp    f0104fa1 <remove_from_queue+0x93>
f0104f96:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f99:	8b 50 44             	mov    0x44(%eax),%edx
f0104f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f9f:	89 10                	mov    %edx,(%eax)
f0104fa1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fa4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fb8:	8b 40 0c             	mov    0xc(%eax),%eax
f0104fbb:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104fbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fc1:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104fc4:	90                   	nop
f0104fc5:	c9                   	leave  
f0104fc6:	c3                   	ret    

f0104fc7 <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104fc7:	55                   	push   %ebp
f0104fc8:	89 e5                	mov    %esp,%ebp
f0104fca:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104fcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104fd1:	75 07                	jne    f0104fda <find_env_in_queue+0x13>
f0104fd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0104fd8:	eb 58                	jmp    f0105032 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104fda:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe4:	8b 00                	mov    (%eax),%eax
f0104fe6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104fe9:	eb 19                	jmp    f0105004 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104feb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104fee:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ff1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104ff4:	75 05                	jne    f0104ffb <find_env_in_queue+0x34>
		{
			return ptr_env;
f0104ff6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104ff9:	eb 37                	jmp    f0105032 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104ffb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ffe:	8b 40 08             	mov    0x8(%eax),%eax
f0105001:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105004:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0105008:	74 08                	je     f0105012 <find_env_in_queue+0x4b>
f010500a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010500d:	8b 40 44             	mov    0x44(%eax),%eax
f0105010:	eb 05                	jmp    f0105017 <find_env_in_queue+0x50>
f0105012:	b8 00 00 00 00       	mov    $0x0,%eax
f0105017:	8b 55 08             	mov    0x8(%ebp),%edx
f010501a:	89 42 08             	mov    %eax,0x8(%edx)
f010501d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105020:	8b 40 08             	mov    0x8(%eax),%eax
f0105023:	85 c0                	test   %eax,%eax
f0105025:	75 c4                	jne    f0104feb <find_env_in_queue+0x24>
f0105027:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010502b:	75 be                	jne    f0104feb <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f010502d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105032:	c9                   	leave  
f0105033:	c3                   	ret    

f0105034 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f0105034:	55                   	push   %ebp
f0105035:	89 e5                	mov    %esp,%ebp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
	if (quantums != NULL)
		kfree(quantums);
#endif
}
f0105037:	90                   	nop
f0105038:	5d                   	pop    %ebp
f0105039:	c3                   	ret    

f010503a <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f010503a:	55                   	push   %ebp
f010503b:	89 e5                	mov    %esp,%ebp
f010503d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105040:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105044:	74 1d                	je     f0105063 <sched_insert_ready0+0x29>
	{
		env->env_status = ENV_READY ;
f0105046:	8b 45 08             	mov    0x8(%ebp),%eax
f0105049:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0105050:	83 ec 08             	sub    $0x8,%esp
f0105053:	ff 75 08             	pushl  0x8(%ebp)
f0105056:	68 60 3a 25 f0       	push   $0xf0253a60
f010505b:	e8 65 fd ff ff       	call   f0104dc5 <enqueue>
f0105060:	83 c4 10             	add    $0x10,%esp
	}
}
f0105063:	90                   	nop
f0105064:	c9                   	leave  
f0105065:	c3                   	ret    

f0105066 <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f0105066:	55                   	push   %ebp
f0105067:	89 e5                	mov    %esp,%ebp
f0105069:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010506c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105070:	0f 84 02 01 00 00    	je     f0105178 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105076:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010507d:	e9 e5 00 00 00       	jmp    f0105167 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0105082:	8b 45 08             	mov    0x8(%ebp),%eax
f0105085:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105088:	89 c2                	mov    %eax,%edx
f010508a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010508d:	c1 e0 04             	shl    $0x4,%eax
f0105090:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105095:	52                   	push   %edx
f0105096:	50                   	push   %eax
f0105097:	e8 2b ff ff ff       	call   f0104fc7 <find_env_in_queue>
f010509c:	83 c4 08             	add    $0x8,%esp
f010509f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01050a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01050a6:	0f 84 b8 00 00 00    	je     f0105164 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01050ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050b0:	75 17                	jne    f01050c9 <sched_remove_ready+0x63>
f01050b2:	83 ec 04             	sub    $0x4,%esp
f01050b5:	68 c3 23 13 f0       	push   $0xf01323c3
f01050ba:	68 90 00 00 00       	push   $0x90
f01050bf:	68 87 23 13 f0       	push   $0xf0132387
f01050c4:	e8 e7 b0 ff ff       	call   f01001b0 <_panic>
f01050c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01050cc:	8b 40 44             	mov    0x44(%eax),%eax
f01050cf:	85 c0                	test   %eax,%eax
f01050d1:	74 11                	je     f01050e4 <sched_remove_ready+0x7e>
f01050d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01050d6:	8b 40 44             	mov    0x44(%eax),%eax
f01050d9:	8b 55 08             	mov    0x8(%ebp),%edx
f01050dc:	8b 52 48             	mov    0x48(%edx),%edx
f01050df:	89 50 48             	mov    %edx,0x48(%eax)
f01050e2:	eb 14                	jmp    f01050f8 <sched_remove_ready+0x92>
f01050e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01050e7:	8b 40 48             	mov    0x48(%eax),%eax
f01050ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050ed:	c1 e2 04             	shl    $0x4,%edx
f01050f0:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f01050f6:	89 02                	mov    %eax,(%edx)
f01050f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01050fb:	8b 40 48             	mov    0x48(%eax),%eax
f01050fe:	85 c0                	test   %eax,%eax
f0105100:	74 11                	je     f0105113 <sched_remove_ready+0xad>
f0105102:	8b 45 08             	mov    0x8(%ebp),%eax
f0105105:	8b 40 48             	mov    0x48(%eax),%eax
f0105108:	8b 55 08             	mov    0x8(%ebp),%edx
f010510b:	8b 52 44             	mov    0x44(%edx),%edx
f010510e:	89 50 44             	mov    %edx,0x44(%eax)
f0105111:	eb 14                	jmp    f0105127 <sched_remove_ready+0xc1>
f0105113:	8b 45 08             	mov    0x8(%ebp),%eax
f0105116:	8b 40 44             	mov    0x44(%eax),%eax
f0105119:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010511c:	c1 e2 04             	shl    $0x4,%edx
f010511f:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0105125:	89 02                	mov    %eax,(%edx)
f0105127:	8b 45 08             	mov    0x8(%ebp),%eax
f010512a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105131:	8b 45 08             	mov    0x8(%ebp),%eax
f0105134:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010513b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513e:	c1 e0 04             	shl    $0x4,%eax
f0105141:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105146:	8b 00                	mov    (%eax),%eax
f0105148:	8d 50 ff             	lea    -0x1(%eax),%edx
f010514b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010514e:	c1 e0 04             	shl    $0x4,%eax
f0105151:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105156:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f0105158:	8b 45 08             	mov    0x8(%ebp),%eax
f010515b:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0105162:	eb 14                	jmp    f0105178 <sched_remove_ready+0x112>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105164:	ff 45 f4             	incl   -0xc(%ebp)
f0105167:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f010516c:	0f b6 c0             	movzbl %al,%eax
f010516f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105172:	0f 8f 0a ff ff ff    	jg     f0105082 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0105178:	c9                   	leave  
f0105179:	c3                   	ret    

f010517a <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f010517a:	55                   	push   %ebp
f010517b:	89 e5                	mov    %esp,%ebp
f010517d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105184:	74 1d                	je     f01051a3 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0105186:	8b 45 08             	mov    0x8(%ebp),%eax
f0105189:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0105190:	83 ec 08             	sub    $0x8,%esp
f0105193:	ff 75 08             	pushl  0x8(%ebp)
f0105196:	68 f8 bd 2b f0       	push   $0xf02bbdf8
f010519b:	e8 25 fc ff ff       	call   f0104dc5 <enqueue>
f01051a0:	83 c4 10             	add    $0x10,%esp
	}
}
f01051a3:	90                   	nop
f01051a4:	c9                   	leave  
f01051a5:	c3                   	ret    

f01051a6 <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f01051a6:	55                   	push   %ebp
f01051a7:	89 e5                	mov    %esp,%ebp
f01051a9:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01051ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051b0:	0f 84 92 00 00 00    	je     f0105248 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01051b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051ba:	75 17                	jne    f01051d3 <sched_remove_new+0x2d>
f01051bc:	83 ec 04             	sub    $0x4,%esp
f01051bf:	68 c3 23 13 f0       	push   $0xf01323c3
f01051c4:	68 ab 00 00 00       	push   $0xab
f01051c9:	68 87 23 13 f0       	push   $0xf0132387
f01051ce:	e8 dd af ff ff       	call   f01001b0 <_panic>
f01051d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d6:	8b 40 44             	mov    0x44(%eax),%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	74 11                	je     f01051ee <sched_remove_new+0x48>
f01051dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01051e0:	8b 40 44             	mov    0x44(%eax),%eax
f01051e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01051e6:	8b 52 48             	mov    0x48(%edx),%edx
f01051e9:	89 50 48             	mov    %edx,0x48(%eax)
f01051ec:	eb 0b                	jmp    f01051f9 <sched_remove_new+0x53>
f01051ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01051f1:	8b 40 48             	mov    0x48(%eax),%eax
f01051f4:	a3 fc bd 2b f0       	mov    %eax,0xf02bbdfc
f01051f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01051fc:	8b 40 48             	mov    0x48(%eax),%eax
f01051ff:	85 c0                	test   %eax,%eax
f0105201:	74 11                	je     f0105214 <sched_remove_new+0x6e>
f0105203:	8b 45 08             	mov    0x8(%ebp),%eax
f0105206:	8b 40 48             	mov    0x48(%eax),%eax
f0105209:	8b 55 08             	mov    0x8(%ebp),%edx
f010520c:	8b 52 44             	mov    0x44(%edx),%edx
f010520f:	89 50 44             	mov    %edx,0x44(%eax)
f0105212:	eb 0b                	jmp    f010521f <sched_remove_new+0x79>
f0105214:	8b 45 08             	mov    0x8(%ebp),%eax
f0105217:	8b 40 44             	mov    0x44(%eax),%eax
f010521a:	a3 f8 bd 2b f0       	mov    %eax,0xf02bbdf8
f010521f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105222:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105229:	8b 45 08             	mov    0x8(%ebp),%eax
f010522c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105233:	a1 04 be 2b f0       	mov    0xf02bbe04,%eax
f0105238:	48                   	dec    %eax
f0105239:	a3 04 be 2b f0       	mov    %eax,0xf02bbe04
		env->env_status = ENV_UNKNOWN;
f010523e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105241:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105248:	90                   	nop
f0105249:	c9                   	leave  
f010524a:	c3                   	ret    

f010524b <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010524b:	55                   	push   %ebp
f010524c:	89 e5                	mov    %esp,%ebp
f010524e:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105251:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105255:	74 34                	je     f010528b <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0105257:	e8 46 87 00 00       	call   f010d9a2 <isBufferingEnabled>
f010525c:	84 c0                	test   %al,%al
f010525e:	74 0e                	je     f010526e <sched_insert_exit+0x23>
f0105260:	83 ec 0c             	sub    $0xc,%esp
f0105263:	ff 75 08             	pushl  0x8(%ebp)
f0105266:	e8 ce 5b 00 00       	call   f010ae39 <cleanup_buffers>
f010526b:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f010526e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105271:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0105278:	83 ec 08             	sub    $0x8,%esp
f010527b:	ff 75 08             	pushl  0x8(%ebp)
f010527e:	68 c4 99 2b f0       	push   $0xf02b99c4
f0105283:	e8 3d fb ff ff       	call   f0104dc5 <enqueue>
f0105288:	83 c4 10             	add    $0x10,%esp
	}
}
f010528b:	90                   	nop
f010528c:	c9                   	leave  
f010528d:	c3                   	ret    

f010528e <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f010528e:	55                   	push   %ebp
f010528f:	89 e5                	mov    %esp,%ebp
f0105291:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105294:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105298:	0f 84 92 00 00 00    	je     f0105330 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f010529e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052a2:	75 17                	jne    f01052bb <sched_remove_exit+0x2d>
f01052a4:	83 ec 04             	sub    $0x4,%esp
f01052a7:	68 c3 23 13 f0       	push   $0xf01323c3
f01052ac:	68 c3 00 00 00       	push   $0xc3
f01052b1:	68 87 23 13 f0       	push   $0xf0132387
f01052b6:	e8 f5 ae ff ff       	call   f01001b0 <_panic>
f01052bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052be:	8b 40 44             	mov    0x44(%eax),%eax
f01052c1:	85 c0                	test   %eax,%eax
f01052c3:	74 11                	je     f01052d6 <sched_remove_exit+0x48>
f01052c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c8:	8b 40 44             	mov    0x44(%eax),%eax
f01052cb:	8b 55 08             	mov    0x8(%ebp),%edx
f01052ce:	8b 52 48             	mov    0x48(%edx),%edx
f01052d1:	89 50 48             	mov    %edx,0x48(%eax)
f01052d4:	eb 0b                	jmp    f01052e1 <sched_remove_exit+0x53>
f01052d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01052d9:	8b 40 48             	mov    0x48(%eax),%eax
f01052dc:	a3 c8 99 2b f0       	mov    %eax,0xf02b99c8
f01052e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01052e4:	8b 40 48             	mov    0x48(%eax),%eax
f01052e7:	85 c0                	test   %eax,%eax
f01052e9:	74 11                	je     f01052fc <sched_remove_exit+0x6e>
f01052eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ee:	8b 40 48             	mov    0x48(%eax),%eax
f01052f1:	8b 55 08             	mov    0x8(%ebp),%edx
f01052f4:	8b 52 44             	mov    0x44(%edx),%edx
f01052f7:	89 50 44             	mov    %edx,0x44(%eax)
f01052fa:	eb 0b                	jmp    f0105307 <sched_remove_exit+0x79>
f01052fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ff:	8b 40 44             	mov    0x44(%eax),%eax
f0105302:	a3 c4 99 2b f0       	mov    %eax,0xf02b99c4
f0105307:	8b 45 08             	mov    0x8(%ebp),%eax
f010530a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010531b:	a1 d0 99 2b f0       	mov    0xf02b99d0,%eax
f0105320:	48                   	dec    %eax
f0105321:	a3 d0 99 2b f0       	mov    %eax,0xf02b99d0
		env->env_status = ENV_UNKNOWN;
f0105326:	8b 45 08             	mov    0x8(%ebp),%eax
f0105329:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105330:	90                   	nop
f0105331:	c9                   	leave  
f0105332:	c3                   	ret    

f0105333 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f0105333:	55                   	push   %ebp
f0105334:	89 e5                	mov    %esp,%ebp
f0105336:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105339:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010533d:	74 0e                	je     f010534d <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010533f:	83 ec 0c             	sub    $0xc,%esp
f0105342:	ff 75 08             	pushl  0x8(%ebp)
f0105345:	e8 30 fe ff ff       	call   f010517a <sched_insert_new>
f010534a:	83 c4 10             	add    $0x10,%esp
	}
}
f010534d:	90                   	nop
f010534e:	c9                   	leave  
f010534f:	c3                   	ret    

f0105350 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f0105350:	55                   	push   %ebp
f0105351:	89 e5                	mov    %esp,%ebp
f0105353:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105356:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010535d:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105362:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105365:	eb 3d                	jmp    f01053a4 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105367:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010536a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010536d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105370:	75 2a                	jne    f010539c <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105372:	83 ec 0c             	sub    $0xc,%esp
f0105375:	ff 75 f4             	pushl  -0xc(%ebp)
f0105378:	e8 29 fe ff ff       	call   f01051a6 <sched_remove_new>
f010537d:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0105380:	83 ec 0c             	sub    $0xc,%esp
f0105383:	ff 75 f4             	pushl  -0xc(%ebp)
f0105386:	e8 af fc ff ff       	call   f010503a <sched_insert_ready0>
f010538b:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010538e:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f0105393:	85 c0                	test   %eax,%eax
f0105395:	75 36                	jne    f01053cd <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105397:	e8 7d 0e 00 00       	call   f0106219 <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010539c:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f01053a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a8:	74 08                	je     f01053b2 <sched_run_env+0x62>
f01053aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ad:	8b 40 44             	mov    0x44(%eax),%eax
f01053b0:	eb 05                	jmp    f01053b7 <sched_run_env+0x67>
f01053b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01053b7:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f01053bc:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f01053c1:	85 c0                	test   %eax,%eax
f01053c3:	75 a2                	jne    f0105367 <sched_run_env+0x17>
f01053c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053c9:	75 9c                	jne    f0105367 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053cb:	eb 01                	jmp    f01053ce <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01053cd:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053ce:	90                   	nop
f01053cf:	c9                   	leave  
f01053d0:	c3                   	ret    

f01053d1 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01053d1:	55                   	push   %ebp
f01053d2:	89 e5                	mov    %esp,%ebp
f01053d4:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01053d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01053de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01053e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053e9:	75 59                	jne    f0105444 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01053eb:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f01053f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053f3:	eb 28                	jmp    f010541d <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053fb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053fe:	75 15                	jne    f0105415 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105400:	83 ec 0c             	sub    $0xc,%esp
f0105403:	ff 75 f4             	pushl  -0xc(%ebp)
f0105406:	e8 9b fd ff ff       	call   f01051a6 <sched_remove_new>
f010540b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010540e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105415:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f010541a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010541d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105421:	74 08                	je     f010542b <sched_exit_env+0x5a>
f0105423:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105426:	8b 40 44             	mov    0x44(%eax),%eax
f0105429:	eb 05                	jmp    f0105430 <sched_exit_env+0x5f>
f010542b:	b8 00 00 00 00       	mov    $0x0,%eax
f0105430:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105435:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f010543a:	85 c0                	test   %eax,%eax
f010543c:	75 b7                	jne    f01053f5 <sched_exit_env+0x24>
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	75 b1                	jne    f01053f5 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f0105444:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105448:	0f 85 6e 01 00 00    	jne    f01055bc <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010544e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105455:	e9 4e 01 00 00       	jmp    f01055a8 <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010545a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010545d:	c1 e0 04             	shl    $0x4,%eax
f0105460:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105465:	8b 00                	mov    (%eax),%eax
f0105467:	85 c0                	test   %eax,%eax
f0105469:	0f 84 30 01 00 00    	je     f010559f <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f010546f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105476:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105479:	c1 e0 04             	shl    $0x4,%eax
f010547c:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105481:	8b 00                	mov    (%eax),%eax
f0105483:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105486:	e9 d4 00 00 00       	jmp    f010555f <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f010548b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010548e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105491:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105494:	0f 85 b5 00 00 00    	jne    f010554f <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010549a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010549e:	75 17                	jne    f01054b7 <sched_exit_env+0xe6>
f01054a0:	83 ec 04             	sub    $0x4,%esp
f01054a3:	68 c3 23 13 f0       	push   $0xf01323c3
f01054a8:	68 10 01 00 00       	push   $0x110
f01054ad:	68 87 23 13 f0       	push   $0xf0132387
f01054b2:	e8 f9 ac ff ff       	call   f01001b0 <_panic>
f01054b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ba:	8b 40 44             	mov    0x44(%eax),%eax
f01054bd:	85 c0                	test   %eax,%eax
f01054bf:	74 11                	je     f01054d2 <sched_exit_env+0x101>
f01054c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054c4:	8b 40 44             	mov    0x44(%eax),%eax
f01054c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054ca:	8b 52 48             	mov    0x48(%edx),%edx
f01054cd:	89 50 48             	mov    %edx,0x48(%eax)
f01054d0:	eb 14                	jmp    f01054e6 <sched_exit_env+0x115>
f01054d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d5:	8b 40 48             	mov    0x48(%eax),%eax
f01054d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01054db:	c1 e2 04             	shl    $0x4,%edx
f01054de:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f01054e4:	89 02                	mov    %eax,(%edx)
f01054e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e9:	8b 40 48             	mov    0x48(%eax),%eax
f01054ec:	85 c0                	test   %eax,%eax
f01054ee:	74 11                	je     f0105501 <sched_exit_env+0x130>
f01054f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f3:	8b 40 48             	mov    0x48(%eax),%eax
f01054f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054f9:	8b 52 44             	mov    0x44(%edx),%edx
f01054fc:	89 50 44             	mov    %edx,0x44(%eax)
f01054ff:	eb 14                	jmp    f0105515 <sched_exit_env+0x144>
f0105501:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105504:	8b 40 44             	mov    0x44(%eax),%eax
f0105507:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010550a:	c1 e2 04             	shl    $0x4,%edx
f010550d:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0105513:	89 02                	mov    %eax,(%edx)
f0105515:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105518:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010551f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105522:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105529:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010552c:	c1 e0 04             	shl    $0x4,%eax
f010552f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105534:	8b 00                	mov    (%eax),%eax
f0105536:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105539:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010553c:	c1 e0 04             	shl    $0x4,%eax
f010553f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105544:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105546:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010554d:	eb 50                	jmp    f010559f <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010554f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105552:	c1 e0 04             	shl    $0x4,%eax
f0105555:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010555a:	8b 00                	mov    (%eax),%eax
f010555c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010555f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105563:	74 08                	je     f010556d <sched_exit_env+0x19c>
f0105565:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105568:	8b 40 44             	mov    0x44(%eax),%eax
f010556b:	eb 05                	jmp    f0105572 <sched_exit_env+0x1a1>
f010556d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105572:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105575:	c1 e2 04             	shl    $0x4,%edx
f0105578:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f010557e:	89 02                	mov    %eax,(%edx)
f0105580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105583:	c1 e0 04             	shl    $0x4,%eax
f0105586:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010558b:	8b 00                	mov    (%eax),%eax
f010558d:	85 c0                	test   %eax,%eax
f010558f:	0f 85 f6 fe ff ff    	jne    f010548b <sched_exit_env+0xba>
f0105595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105599:	0f 85 ec fe ff ff    	jne    f010548b <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f010559f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055a3:	75 16                	jne    f01055bb <sched_exit_env+0x1ea>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01055a5:	ff 45 ec             	incl   -0x14(%ebp)
f01055a8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01055ad:	0f b6 c0             	movzbl %al,%eax
f01055b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01055b3:	0f 8f a1 fe ff ff    	jg     f010545a <sched_exit_env+0x89>
f01055b9:	eb 01                	jmp    f01055bc <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01055bb:	90                   	nop
		}
	}
	if (!found)
f01055bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055c0:	75 1c                	jne    f01055de <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f01055c2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01055c7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055ca:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055cd:	75 0f                	jne    f01055de <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f01055cf:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01055d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01055d7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01055de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055e2:	74 2a                	je     f010560e <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f01055e4:	83 ec 0c             	sub    $0xc,%esp
f01055e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01055ea:	e8 5c fc ff ff       	call   f010524b <sched_insert_exit>
f01055ef:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01055f2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01055f7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055fa:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055fd:	75 0f                	jne    f010560e <sched_exit_env+0x23d>
		{
			curenv = NULL;
f01055ff:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f0105606:	00 00 00 
			fos_scheduler();
f0105609:	e8 0b 0c 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f010560e:	90                   	nop
f010560f:	c9                   	leave  
f0105610:	c3                   	ret    

f0105611 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105611:	55                   	push   %ebp
f0105612:	89 e5                	mov    %esp,%ebp
f0105614:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105617:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010561e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105625:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105629:	0f 85 9d 00 00 00    	jne    f01056cc <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010562f:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105634:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105637:	eb 64                	jmp    f010569d <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f0105639:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010563c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010563f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105642:	75 51                	jne    f0105695 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105644:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105647:	8d 50 5c             	lea    0x5c(%eax),%edx
f010564a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105650:	83 ec 04             	sub    $0x4,%esp
f0105653:	52                   	push   %edx
f0105654:	50                   	push   %eax
f0105655:	68 e4 23 13 f0       	push   $0xf01323e4
f010565a:	e8 d2 b7 ff ff       	call   f0100e31 <cprintf>
f010565f:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105662:	83 ec 0c             	sub    $0xc,%esp
f0105665:	ff 75 f4             	pushl  -0xc(%ebp)
f0105668:	e8 39 fb ff ff       	call   f01051a6 <sched_remove_new>
f010566d:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105670:	83 ec 0c             	sub    $0xc,%esp
f0105673:	ff 75 f4             	pushl  -0xc(%ebp)
f0105676:	e8 ca 43 00 00       	call   f0109a45 <env_free>
f010567b:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010567e:	83 ec 0c             	sub    $0xc,%esp
f0105681:	68 09 24 13 f0       	push   $0xf0132409
f0105686:	e8 a6 b7 ff ff       	call   f0100e31 <cprintf>
f010568b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010568e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105695:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f010569a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010569d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a1:	74 08                	je     f01056ab <sched_kill_env+0x9a>
f01056a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056a6:	8b 40 44             	mov    0x44(%eax),%eax
f01056a9:	eb 05                	jmp    f01056b0 <sched_kill_env+0x9f>
f01056ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01056b0:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f01056b5:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f01056ba:	85 c0                	test   %eax,%eax
f01056bc:	0f 85 77 ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
f01056c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056c6:	0f 85 6d ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f01056cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01056d0:	0f 85 aa 01 00 00    	jne    f0105880 <sched_kill_env+0x26f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01056dd:	e9 8a 01 00 00       	jmp    f010586c <sched_kill_env+0x25b>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056e5:	c1 e0 04             	shl    $0x4,%eax
f01056e8:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f01056ed:	8b 00                	mov    (%eax),%eax
f01056ef:	85 c0                	test   %eax,%eax
f01056f1:	0f 84 6c 01 00 00    	je     f0105863 <sched_kill_env+0x252>
			{
				ptr_env=NULL;
f01056f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105701:	c1 e0 04             	shl    $0x4,%eax
f0105704:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105709:	8b 00                	mov    (%eax),%eax
f010570b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010570e:	e9 10 01 00 00       	jmp    f0105823 <sched_kill_env+0x212>
				{
					if(ptr_env->env_id == envId)
f0105713:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105716:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105719:	3b 45 08             	cmp    0x8(%ebp),%eax
f010571c:	0f 85 f1 00 00 00    	jne    f0105813 <sched_kill_env+0x202>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105725:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105728:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010572b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010572e:	ff 75 ec             	pushl  -0x14(%ebp)
f0105731:	52                   	push   %edx
f0105732:	50                   	push   %eax
f0105733:	68 10 24 13 f0       	push   $0xf0132410
f0105738:	e8 f4 b6 ff ff       	call   f0100e31 <cprintf>
f010573d:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105740:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105744:	75 17                	jne    f010575d <sched_kill_env+0x14c>
f0105746:	83 ec 04             	sub    $0x4,%esp
f0105749:	68 c3 23 13 f0       	push   $0xf01323c3
f010574e:	68 54 01 00 00       	push   $0x154
f0105753:	68 87 23 13 f0       	push   $0xf0132387
f0105758:	e8 53 aa ff ff       	call   f01001b0 <_panic>
f010575d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105760:	8b 40 44             	mov    0x44(%eax),%eax
f0105763:	85 c0                	test   %eax,%eax
f0105765:	74 11                	je     f0105778 <sched_kill_env+0x167>
f0105767:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010576a:	8b 40 44             	mov    0x44(%eax),%eax
f010576d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105770:	8b 52 48             	mov    0x48(%edx),%edx
f0105773:	89 50 48             	mov    %edx,0x48(%eax)
f0105776:	eb 14                	jmp    f010578c <sched_kill_env+0x17b>
f0105778:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577b:	8b 40 48             	mov    0x48(%eax),%eax
f010577e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105781:	c1 e2 04             	shl    $0x4,%edx
f0105784:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f010578a:	89 02                	mov    %eax,(%edx)
f010578c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010578f:	8b 40 48             	mov    0x48(%eax),%eax
f0105792:	85 c0                	test   %eax,%eax
f0105794:	74 11                	je     f01057a7 <sched_kill_env+0x196>
f0105796:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105799:	8b 40 48             	mov    0x48(%eax),%eax
f010579c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010579f:	8b 52 44             	mov    0x44(%edx),%edx
f01057a2:	89 50 44             	mov    %edx,0x44(%eax)
f01057a5:	eb 14                	jmp    f01057bb <sched_kill_env+0x1aa>
f01057a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057aa:	8b 40 44             	mov    0x44(%eax),%eax
f01057ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b0:	c1 e2 04             	shl    $0x4,%edx
f01057b3:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f01057b9:	89 02                	mov    %eax,(%edx)
f01057bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057be:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01057c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01057cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057d2:	c1 e0 04             	shl    $0x4,%eax
f01057d5:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f01057da:	8b 00                	mov    (%eax),%eax
f01057dc:	8d 50 ff             	lea    -0x1(%eax),%edx
f01057df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057e2:	c1 e0 04             	shl    $0x4,%eax
f01057e5:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f01057ea:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01057ec:	83 ec 0c             	sub    $0xc,%esp
f01057ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01057f2:	e8 4e 42 00 00       	call   f0109a45 <env_free>
f01057f7:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01057fa:	83 ec 0c             	sub    $0xc,%esp
f01057fd:	68 09 24 13 f0       	push   $0xf0132409
f0105802:	e8 2a b6 ff ff       	call   f0100e31 <cprintf>
f0105807:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010580a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105811:	eb 50                	jmp    f0105863 <sched_kill_env+0x252>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105813:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105816:	c1 e0 04             	shl    $0x4,%eax
f0105819:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010581e:	8b 00                	mov    (%eax),%eax
f0105820:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105823:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105827:	74 08                	je     f0105831 <sched_kill_env+0x220>
f0105829:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010582c:	8b 40 44             	mov    0x44(%eax),%eax
f010582f:	eb 05                	jmp    f0105836 <sched_kill_env+0x225>
f0105831:	b8 00 00 00 00       	mov    $0x0,%eax
f0105836:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105839:	c1 e2 04             	shl    $0x4,%edx
f010583c:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f0105842:	89 02                	mov    %eax,(%edx)
f0105844:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105847:	c1 e0 04             	shl    $0x4,%eax
f010584a:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010584f:	8b 00                	mov    (%eax),%eax
f0105851:	85 c0                	test   %eax,%eax
f0105853:	0f 85 ba fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
f0105859:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010585d:	0f 85 b0 fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
						break;
						//return;
					}
				}
			}
			if (found)
f0105863:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105867:	75 16                	jne    f010587f <sched_kill_env+0x26e>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105869:	ff 45 ec             	incl   -0x14(%ebp)
f010586c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0105871:	0f b6 c0             	movzbl %al,%eax
f0105874:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105877:	0f 8f 65 fe ff ff    	jg     f01056e2 <sched_kill_env+0xd1>
f010587d:	eb 01                	jmp    f0105880 <sched_kill_env+0x26f>
						//return;
					}
				}
			}
			if (found)
				break;
f010587f:	90                   	nop
		}
	}
	if (!found)
f0105880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105884:	0f 85 a4 00 00 00    	jne    f010592e <sched_kill_env+0x31d>
	{
		ptr_env=NULL;
f010588a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105891:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105896:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105899:	eb 64                	jmp    f01058ff <sched_kill_env+0x2ee>
		{
			if(ptr_env->env_id == envId)
f010589b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010589e:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058a4:	75 51                	jne    f01058f7 <sched_kill_env+0x2e6>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058a9:	8d 50 5c             	lea    0x5c(%eax),%edx
f01058ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058af:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b2:	83 ec 04             	sub    $0x4,%esp
f01058b5:	52                   	push   %edx
f01058b6:	50                   	push   %eax
f01058b7:	68 3c 24 13 f0       	push   $0xf013243c
f01058bc:	e8 70 b5 ff ff       	call   f0100e31 <cprintf>
f01058c1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058c4:	83 ec 0c             	sub    $0xc,%esp
f01058c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058ca:	e8 bf f9 ff ff       	call   f010528e <sched_remove_exit>
f01058cf:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01058d2:	83 ec 0c             	sub    $0xc,%esp
f01058d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01058d8:	e8 68 41 00 00       	call   f0109a45 <env_free>
f01058dd:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01058e0:	83 ec 0c             	sub    $0xc,%esp
f01058e3:	68 09 24 13 f0       	push   $0xf0132409
f01058e8:	e8 44 b5 ff ff       	call   f0100e31 <cprintf>
f01058ed:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01058f0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058f7:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f01058fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105903:	74 08                	je     f010590d <sched_kill_env+0x2fc>
f0105905:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105908:	8b 40 44             	mov    0x44(%eax),%eax
f010590b:	eb 05                	jmp    f0105912 <sched_kill_env+0x301>
f010590d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105912:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0105917:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f010591c:	85 c0                	test   %eax,%eax
f010591e:	0f 85 77 ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
f0105924:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105928:	0f 85 6d ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
				//return;
			}
		}
	}

	if (!found)
f010592e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105932:	0f 85 9d 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
	{
		if (curenv->env_id == envId)
f0105938:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010593d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105940:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105943:	0f 85 8c 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
		{
			ptr_env = curenv;
f0105949:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010594e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f0105951:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105954:	8b 40 54             	mov    0x54(%eax),%eax
f0105957:	83 f8 02             	cmp    $0x2,%eax
f010595a:	74 19                	je     f0105975 <sched_kill_env+0x364>
f010595c:	68 64 24 13 f0       	push   $0xf0132464
f0105961:	68 72 23 13 f0       	push   $0xf0132372
f0105966:	68 77 01 00 00       	push   $0x177
f010596b:	68 87 23 13 f0       	push   $0xf0132387
f0105970:	e8 3b a8 ff ff       	call   f01001b0 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105978:	8d 50 5c             	lea    0x5c(%eax),%edx
f010597b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010597e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105981:	83 ec 04             	sub    $0x4,%esp
f0105984:	52                   	push   %edx
f0105985:	50                   	push   %eax
f0105986:	68 88 24 13 f0       	push   $0xf0132488
f010598b:	e8 a1 b4 ff ff       	call   f0100e31 <cprintf>
f0105990:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105993:	83 ec 0c             	sub    $0xc,%esp
f0105996:	ff 75 f4             	pushl  -0xc(%ebp)
f0105999:	e8 a7 40 00 00       	call   f0109a45 <env_free>
f010599e:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059a1:	83 ec 0c             	sub    $0xc,%esp
f01059a4:	68 09 24 13 f0       	push   $0xf0132409
f01059a9:	e8 83 b4 ff ff       	call   f0100e31 <cprintf>
f01059ae:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059b1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059b8:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01059bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01059c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059c3:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059c6:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f01059cd:	00 00 00 
			fos_scheduler();
f01059d0:	e8 44 08 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f01059d5:	90                   	nop
f01059d6:	c9                   	leave  
f01059d7:	c3                   	ret    

f01059d8 <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f01059d8:	55                   	push   %ebp
f01059d9:	89 e5                	mov    %esp,%ebp
f01059db:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01059de:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f01059e3:	85 c0                	test   %eax,%eax
f01059e5:	74 69                	je     f0105a50 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f01059e7:	83 ec 0c             	sub    $0xc,%esp
f01059ea:	68 b4 24 13 f0       	push   $0xf01324b4
f01059ef:	e8 3d b4 ff ff       	call   f0100e31 <cprintf>
f01059f4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01059f7:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f01059fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01059ff:	eb 26                	jmp    f0105a27 <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a04:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a0a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105a0d:	83 ec 04             	sub    $0x4,%esp
f0105a10:	52                   	push   %edx
f0105a11:	50                   	push   %eax
f0105a12:	68 d6 24 13 f0       	push   $0xf01324d6
f0105a17:	e8 15 b4 ff ff       	call   f0100e31 <cprintf>
f0105a1c:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105a1f:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105a24:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a2b:	74 08                	je     f0105a35 <sched_print_all+0x5d>
f0105a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a30:	8b 40 44             	mov    0x44(%eax),%eax
f0105a33:	eb 05                	jmp    f0105a3a <sched_print_all+0x62>
f0105a35:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a3a:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105a3f:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105a44:	85 c0                	test   %eax,%eax
f0105a46:	75 b9                	jne    f0105a01 <sched_print_all+0x29>
f0105a48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a4c:	75 b3                	jne    f0105a01 <sched_print_all+0x29>
f0105a4e:	eb 10                	jmp    f0105a60 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105a50:	83 ec 0c             	sub    $0xc,%esp
f0105a53:	68 e0 24 13 f0       	push   $0xf01324e0
f0105a58:	e8 d4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a5d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105a60:	83 ec 0c             	sub    $0xc,%esp
f0105a63:	68 fc 24 13 f0       	push   $0xf01324fc
f0105a68:	e8 c4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a6d:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105a70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a77:	e9 c8 00 00 00       	jmp    f0105b44 <sched_print_all+0x16c>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105a7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a7f:	c1 e0 04             	shl    $0x4,%eax
f0105a82:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105a87:	8b 00                	mov    (%eax),%eax
f0105a89:	85 c0                	test   %eax,%eax
f0105a8b:	0f 84 8d 00 00 00    	je     f0105b1e <sched_print_all+0x146>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105a91:	83 ec 08             	sub    $0x8,%esp
f0105a94:	ff 75 f0             	pushl  -0x10(%ebp)
f0105a97:	68 30 25 13 f0       	push   $0xf0132530
f0105a9c:	e8 90 b3 ff ff       	call   f0100e31 <cprintf>
f0105aa1:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105aa7:	c1 e0 04             	shl    $0x4,%eax
f0105aaa:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105aaf:	8b 00                	mov    (%eax),%eax
f0105ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ab4:	eb 2e                	jmp    f0105ae4 <sched_print_all+0x10c>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ab9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105abf:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105ac2:	83 ec 04             	sub    $0x4,%esp
f0105ac5:	52                   	push   %edx
f0105ac6:	50                   	push   %eax
f0105ac7:	68 d6 24 13 f0       	push   $0xf01324d6
f0105acc:	e8 60 b3 ff ff       	call   f0100e31 <cprintf>
f0105ad1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ad7:	c1 e0 04             	shl    $0x4,%eax
f0105ada:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105adf:	8b 00                	mov    (%eax),%eax
f0105ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ae4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae8:	74 08                	je     f0105af2 <sched_print_all+0x11a>
f0105aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aed:	8b 40 44             	mov    0x44(%eax),%eax
f0105af0:	eb 05                	jmp    f0105af7 <sched_print_all+0x11f>
f0105af2:	b8 00 00 00 00       	mov    $0x0,%eax
f0105af7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105afa:	c1 e2 04             	shl    $0x4,%edx
f0105afd:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f0105b03:	89 02                	mov    %eax,(%edx)
f0105b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105b08:	c1 e0 04             	shl    $0x4,%eax
f0105b0b:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105b10:	8b 00                	mov    (%eax),%eax
f0105b12:	85 c0                	test   %eax,%eax
f0105b14:	75 a0                	jne    f0105ab6 <sched_print_all+0xde>
f0105b16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b1a:	75 9a                	jne    f0105ab6 <sched_print_all+0xde>
f0105b1c:	eb 13                	jmp    f0105b31 <sched_print_all+0x159>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105b1e:	83 ec 08             	sub    $0x8,%esp
f0105b21:	ff 75 f0             	pushl  -0x10(%ebp)
f0105b24:	68 58 25 13 f0       	push   $0xf0132558
f0105b29:	e8 03 b3 ff ff       	call   f0100e31 <cprintf>
f0105b2e:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105b31:	83 ec 0c             	sub    $0xc,%esp
f0105b34:	68 fc 24 13 f0       	push   $0xf01324fc
f0105b39:	e8 f3 b2 ff ff       	call   f0100e31 <cprintf>
f0105b3e:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b41:	ff 45 f0             	incl   -0x10(%ebp)
f0105b44:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0105b49:	0f b6 c0             	movzbl %al,%eax
f0105b4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105b4f:	0f 8f 27 ff ff ff    	jg     f0105a7c <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105b55:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105b5a:	85 c0                	test   %eax,%eax
f0105b5c:	74 69                	je     f0105bc7 <sched_print_all+0x1ef>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105b5e:	83 ec 0c             	sub    $0xc,%esp
f0105b61:	68 7c 25 13 f0       	push   $0xf013257c
f0105b66:	e8 c6 b2 ff ff       	call   f0100e31 <cprintf>
f0105b6b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b6e:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105b73:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b76:	eb 26                	jmp    f0105b9e <sched_print_all+0x1c6>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b7b:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b81:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b84:	83 ec 04             	sub    $0x4,%esp
f0105b87:	52                   	push   %edx
f0105b88:	50                   	push   %eax
f0105b89:	68 d6 24 13 f0       	push   $0xf01324d6
f0105b8e:	e8 9e b2 ff ff       	call   f0100e31 <cprintf>
f0105b93:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b96:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105b9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ba2:	74 08                	je     f0105bac <sched_print_all+0x1d4>
f0105ba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ba7:	8b 40 44             	mov    0x44(%eax),%eax
f0105baa:	eb 05                	jmp    f0105bb1 <sched_print_all+0x1d9>
f0105bac:	b8 00 00 00 00       	mov    $0x0,%eax
f0105bb1:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0105bb6:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105bbb:	85 c0                	test   %eax,%eax
f0105bbd:	75 b9                	jne    f0105b78 <sched_print_all+0x1a0>
f0105bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105bc3:	75 b3                	jne    f0105b78 <sched_print_all+0x1a0>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0105bc5:	eb 10                	jmp    f0105bd7 <sched_print_all+0x1ff>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105bc7:	83 ec 0c             	sub    $0xc,%esp
f0105bca:	68 9e 25 13 f0       	push   $0xf013259e
f0105bcf:	e8 5d b2 ff ff       	call   f0100e31 <cprintf>
f0105bd4:	83 c4 10             	add    $0x10,%esp
	}
}
f0105bd7:	90                   	nop
f0105bd8:	c9                   	leave  
f0105bd9:	c3                   	ret    

f0105bda <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0105bda:	55                   	push   %ebp
f0105bdb:	89 e5                	mov    %esp,%ebp
f0105bdd:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105be7:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105bec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105bef:	eb 24                	jmp    f0105c15 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105bf1:	83 ec 0c             	sub    $0xc,%esp
f0105bf4:	ff 75 f4             	pushl  -0xc(%ebp)
f0105bf7:	e8 aa f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105bfc:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105bff:	83 ec 0c             	sub    $0xc,%esp
f0105c02:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c05:	e8 30 f4 ff ff       	call   f010503a <sched_insert_ready0>
f0105c0a:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105c0d:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105c12:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c19:	74 08                	je     f0105c23 <sched_run_all+0x49>
f0105c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c1e:	8b 40 44             	mov    0x44(%eax),%eax
f0105c21:	eb 05                	jmp    f0105c28 <sched_run_all+0x4e>
f0105c23:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c28:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105c2d:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105c32:	85 c0                	test   %eax,%eax
f0105c34:	75 bb                	jne    f0105bf1 <sched_run_all+0x17>
f0105c36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c3a:	75 b5                	jne    f0105bf1 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105c3c:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f0105c41:	85 c0                	test   %eax,%eax
f0105c43:	75 05                	jne    f0105c4a <sched_run_all+0x70>
		fos_scheduler();
f0105c45:	e8 cf 05 00 00       	call   f0106219 <fos_scheduler>
}
f0105c4a:	90                   	nop
f0105c4b:	c9                   	leave  
f0105c4c:	c3                   	ret    

f0105c4d <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105c4d:	55                   	push   %ebp
f0105c4e:	89 e5                	mov    %esp,%ebp
f0105c50:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105c53:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105c58:	85 c0                	test   %eax,%eax
f0105c5a:	0f 84 95 00 00 00    	je     f0105cf5 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105c60:	83 ec 0c             	sub    $0xc,%esp
f0105c63:	68 bc 25 13 f0       	push   $0xf01325bc
f0105c68:	e8 c4 b1 ff ff       	call   f0100e31 <cprintf>
f0105c6d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105c70:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c78:	eb 52                	jmp    f0105ccc <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c7d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c83:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105c86:	83 ec 04             	sub    $0x4,%esp
f0105c89:	52                   	push   %edx
f0105c8a:	50                   	push   %eax
f0105c8b:	68 e8 25 13 f0       	push   $0xf01325e8
f0105c90:	e8 9c b1 ff ff       	call   f0100e31 <cprintf>
f0105c95:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0105c98:	83 ec 0c             	sub    $0xc,%esp
f0105c9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c9e:	e8 03 f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105ca3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105ca6:	83 ec 0c             	sub    $0xc,%esp
f0105ca9:	ff 75 f4             	pushl  -0xc(%ebp)
f0105cac:	e8 94 3d 00 00       	call   f0109a45 <env_free>
f0105cb1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105cb4:	83 ec 0c             	sub    $0xc,%esp
f0105cb7:	68 09 24 13 f0       	push   $0xf0132409
f0105cbc:	e8 70 b1 ff ff       	call   f0100e31 <cprintf>
f0105cc1:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105cc4:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105cc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ccc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cd0:	74 08                	je     f0105cda <sched_kill_all+0x8d>
f0105cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cd5:	8b 40 44             	mov    0x44(%eax),%eax
f0105cd8:	eb 05                	jmp    f0105cdf <sched_kill_all+0x92>
f0105cda:	b8 00 00 00 00       	mov    $0x0,%eax
f0105cdf:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105ce4:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105ce9:	85 c0                	test   %eax,%eax
f0105ceb:	75 8d                	jne    f0105c7a <sched_kill_all+0x2d>
f0105ced:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cf1:	75 87                	jne    f0105c7a <sched_kill_all+0x2d>
f0105cf3:	eb 10                	jmp    f0105d05 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105cf5:	83 ec 0c             	sub    $0xc,%esp
f0105cf8:	68 fb 25 13 f0       	push   $0xf01325fb
f0105cfd:	e8 2f b1 ff ff       	call   f0100e31 <cprintf>
f0105d02:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105d05:	83 ec 0c             	sub    $0xc,%esp
f0105d08:	68 fc 24 13 f0       	push   $0xf01324fc
f0105d0d:	e8 1f b1 ff ff       	call   f0100e31 <cprintf>
f0105d12:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105d15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105d1c:	e9 9d 01 00 00       	jmp    f0105ebe <sched_kill_all+0x271>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d24:	c1 e0 04             	shl    $0x4,%eax
f0105d27:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105d2c:	8b 00                	mov    (%eax),%eax
f0105d2e:	85 c0                	test   %eax,%eax
f0105d30:	0f 84 62 01 00 00    	je     f0105e98 <sched_kill_all+0x24b>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0105d36:	83 ec 08             	sub    $0x8,%esp
f0105d39:	ff 75 f0             	pushl  -0x10(%ebp)
f0105d3c:	68 18 26 13 f0       	push   $0xf0132618
f0105d41:	e8 eb b0 ff ff       	call   f0100e31 <cprintf>
f0105d46:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105d49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d4c:	c1 e0 04             	shl    $0x4,%eax
f0105d4f:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105d54:	8b 00                	mov    (%eax),%eax
f0105d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d59:	e9 f8 00 00 00       	jmp    f0105e56 <sched_kill_all+0x209>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105d5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d61:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d67:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105d6a:	83 ec 04             	sub    $0x4,%esp
f0105d6d:	52                   	push   %edx
f0105d6e:	50                   	push   %eax
f0105d6f:	68 e8 25 13 f0       	push   $0xf01325e8
f0105d74:	e8 b8 b0 ff ff       	call   f0100e31 <cprintf>
f0105d79:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d80:	75 17                	jne    f0105d99 <sched_kill_all+0x14c>
f0105d82:	83 ec 04             	sub    $0x4,%esp
f0105d85:	68 c3 23 13 f0       	push   $0xf01323c3
f0105d8a:	68 e5 01 00 00       	push   $0x1e5
f0105d8f:	68 87 23 13 f0       	push   $0xf0132387
f0105d94:	e8 17 a4 ff ff       	call   f01001b0 <_panic>
f0105d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d9c:	8b 40 44             	mov    0x44(%eax),%eax
f0105d9f:	85 c0                	test   %eax,%eax
f0105da1:	74 11                	je     f0105db4 <sched_kill_all+0x167>
f0105da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105da6:	8b 40 44             	mov    0x44(%eax),%eax
f0105da9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105dac:	8b 52 48             	mov    0x48(%edx),%edx
f0105daf:	89 50 48             	mov    %edx,0x48(%eax)
f0105db2:	eb 14                	jmp    f0105dc8 <sched_kill_all+0x17b>
f0105db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db7:	8b 40 48             	mov    0x48(%eax),%eax
f0105dba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dbd:	c1 e2 04             	shl    $0x4,%edx
f0105dc0:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f0105dc6:	89 02                	mov    %eax,(%edx)
f0105dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dcb:	8b 40 48             	mov    0x48(%eax),%eax
f0105dce:	85 c0                	test   %eax,%eax
f0105dd0:	74 11                	je     f0105de3 <sched_kill_all+0x196>
f0105dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dd5:	8b 40 48             	mov    0x48(%eax),%eax
f0105dd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ddb:	8b 52 44             	mov    0x44(%edx),%edx
f0105dde:	89 50 44             	mov    %edx,0x44(%eax)
f0105de1:	eb 14                	jmp    f0105df7 <sched_kill_all+0x1aa>
f0105de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105de6:	8b 40 44             	mov    0x44(%eax),%eax
f0105de9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dec:	c1 e2 04             	shl    $0x4,%edx
f0105def:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0105df5:	89 02                	mov    %eax,(%edx)
f0105df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dfa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e04:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e0e:	c1 e0 04             	shl    $0x4,%eax
f0105e11:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105e16:	8b 00                	mov    (%eax),%eax
f0105e18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e1e:	c1 e0 04             	shl    $0x4,%eax
f0105e21:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105e26:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0105e28:	83 ec 0c             	sub    $0xc,%esp
f0105e2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105e2e:	e8 12 3c 00 00       	call   f0109a45 <env_free>
f0105e33:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105e36:	83 ec 0c             	sub    $0xc,%esp
f0105e39:	68 09 24 13 f0       	push   $0xf0132409
f0105e3e:	e8 ee af ff ff       	call   f0100e31 <cprintf>
f0105e43:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105e46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e49:	c1 e0 04             	shl    $0x4,%eax
f0105e4c:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105e51:	8b 00                	mov    (%eax),%eax
f0105e53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e5a:	74 08                	je     f0105e64 <sched_kill_all+0x217>
f0105e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5f:	8b 40 44             	mov    0x44(%eax),%eax
f0105e62:	eb 05                	jmp    f0105e69 <sched_kill_all+0x21c>
f0105e64:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6c:	c1 e2 04             	shl    $0x4,%edx
f0105e6f:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f0105e75:	89 02                	mov    %eax,(%edx)
f0105e77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e7a:	c1 e0 04             	shl    $0x4,%eax
f0105e7d:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105e82:	8b 00                	mov    (%eax),%eax
f0105e84:	85 c0                	test   %eax,%eax
f0105e86:	0f 85 d2 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e90:	0f 85 c8 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e96:	eb 13                	jmp    f0105eab <sched_kill_all+0x25e>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105e98:	83 ec 08             	sub    $0x8,%esp
f0105e9b:	ff 75 f0             	pushl  -0x10(%ebp)
f0105e9e:	68 58 25 13 f0       	push   $0xf0132558
f0105ea3:	e8 89 af ff ff       	call   f0100e31 <cprintf>
f0105ea8:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105eab:	83 ec 0c             	sub    $0xc,%esp
f0105eae:	68 fc 24 13 f0       	push   $0xf01324fc
f0105eb3:	e8 79 af ff ff       	call   f0100e31 <cprintf>
f0105eb8:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ebb:	ff 45 f0             	incl   -0x10(%ebp)
f0105ebe:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0105ec3:	0f b6 c0             	movzbl %al,%eax
f0105ec6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105ec9:	0f 8f 52 fe ff ff    	jg     f0105d21 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105ecf:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105ed4:	85 c0                	test   %eax,%eax
f0105ed6:	0f 84 95 00 00 00    	je     f0105f71 <sched_kill_all+0x324>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105edc:	83 ec 0c             	sub    $0xc,%esp
f0105edf:	68 4c 26 13 f0       	push   $0xf013264c
f0105ee4:	e8 48 af ff ff       	call   f0100e31 <cprintf>
f0105ee9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105eec:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105ef1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ef4:	eb 52                	jmp    f0105f48 <sched_kill_all+0x2fb>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ef9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105eff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105f02:	83 ec 04             	sub    $0x4,%esp
f0105f05:	52                   	push   %edx
f0105f06:	50                   	push   %eax
f0105f07:	68 e8 25 13 f0       	push   $0xf01325e8
f0105f0c:	e8 20 af ff ff       	call   f0100e31 <cprintf>
f0105f11:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105f14:	83 ec 0c             	sub    $0xc,%esp
f0105f17:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f1a:	e8 6f f3 ff ff       	call   f010528e <sched_remove_exit>
f0105f1f:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105f22:	83 ec 0c             	sub    $0xc,%esp
f0105f25:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f28:	e8 18 3b 00 00       	call   f0109a45 <env_free>
f0105f2d:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105f30:	83 ec 0c             	sub    $0xc,%esp
f0105f33:	68 09 24 13 f0       	push   $0xf0132409
f0105f38:	e8 f4 ae ff ff       	call   f0100e31 <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105f40:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4c:	74 08                	je     f0105f56 <sched_kill_all+0x309>
f0105f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f51:	8b 40 44             	mov    0x44(%eax),%eax
f0105f54:	eb 05                	jmp    f0105f5b <sched_kill_all+0x30e>
f0105f56:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f5b:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0105f60:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105f65:	85 c0                	test   %eax,%eax
f0105f67:	75 8d                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f6d:	75 87                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f6f:	eb 10                	jmp    f0105f81 <sched_kill_all+0x334>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105f71:	83 ec 0c             	sub    $0xc,%esp
f0105f74:	68 9e 25 13 f0       	push   $0xf013259e
f0105f79:	e8 b3 ae ff ff       	call   f0100e31 <cprintf>
f0105f7e:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105f81:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f0105f88:	00 00 00 
	fos_scheduler();
f0105f8b:	e8 89 02 00 00       	call   f0106219 <fos_scheduler>

f0105f90 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f0105f90:	55                   	push   %ebp
f0105f91:	89 e5                	mov    %esp,%ebp
f0105f93:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105f9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105fa4:	e9 3e 01 00 00       	jmp    f01060e7 <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105fa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fac:	c1 e0 04             	shl    $0x4,%eax
f0105faf:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105fb4:	8b 00                	mov    (%eax),%eax
f0105fb6:	85 c0                	test   %eax,%eax
f0105fb8:	0f 84 26 01 00 00    	je     f01060e4 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105fbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fc8:	c1 e0 04             	shl    $0x4,%eax
f0105fcb:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105fd0:	8b 00                	mov    (%eax),%eax
f0105fd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fd5:	e9 ca 00 00 00       	jmp    f01060a4 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105fda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105fde:	75 17                	jne    f0105ff7 <sched_exit_all_ready_envs+0x67>
f0105fe0:	83 ec 04             	sub    $0x4,%esp
f0105fe3:	68 c3 23 13 f0       	push   $0xf01323c3
f0105fe8:	68 14 02 00 00       	push   $0x214
f0105fed:	68 87 23 13 f0       	push   $0xf0132387
f0105ff2:	e8 b9 a1 ff ff       	call   f01001b0 <_panic>
f0105ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ffa:	8b 40 44             	mov    0x44(%eax),%eax
f0105ffd:	85 c0                	test   %eax,%eax
f0105fff:	74 11                	je     f0106012 <sched_exit_all_ready_envs+0x82>
f0106001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106004:	8b 40 44             	mov    0x44(%eax),%eax
f0106007:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010600a:	8b 52 48             	mov    0x48(%edx),%edx
f010600d:	89 50 48             	mov    %edx,0x48(%eax)
f0106010:	eb 14                	jmp    f0106026 <sched_exit_all_ready_envs+0x96>
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	8b 40 48             	mov    0x48(%eax),%eax
f0106018:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010601b:	c1 e2 04             	shl    $0x4,%edx
f010601e:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f0106024:	89 02                	mov    %eax,(%edx)
f0106026:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106029:	8b 40 48             	mov    0x48(%eax),%eax
f010602c:	85 c0                	test   %eax,%eax
f010602e:	74 11                	je     f0106041 <sched_exit_all_ready_envs+0xb1>
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8b 40 48             	mov    0x48(%eax),%eax
f0106036:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106039:	8b 52 44             	mov    0x44(%edx),%edx
f010603c:	89 50 44             	mov    %edx,0x44(%eax)
f010603f:	eb 14                	jmp    f0106055 <sched_exit_all_ready_envs+0xc5>
f0106041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106044:	8b 40 44             	mov    0x44(%eax),%eax
f0106047:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010604a:	c1 e2 04             	shl    $0x4,%edx
f010604d:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0106053:	89 02                	mov    %eax,(%edx)
f0106055:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106058:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010605f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106062:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0106069:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010606c:	c1 e0 04             	shl    $0x4,%eax
f010606f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0106074:	8b 00                	mov    (%eax),%eax
f0106076:	8d 50 ff             	lea    -0x1(%eax),%edx
f0106079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010607c:	c1 e0 04             	shl    $0x4,%eax
f010607f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0106084:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0106086:	83 ec 0c             	sub    $0xc,%esp
f0106089:	ff 75 f4             	pushl  -0xc(%ebp)
f010608c:	e8 ba f1 ff ff       	call   f010524b <sched_insert_exit>
f0106091:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0106094:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106097:	c1 e0 04             	shl    $0x4,%eax
f010609a:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010609f:	8b 00                	mov    (%eax),%eax
f01060a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01060a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060a8:	74 08                	je     f01060b2 <sched_exit_all_ready_envs+0x122>
f01060aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ad:	8b 40 44             	mov    0x44(%eax),%eax
f01060b0:	eb 05                	jmp    f01060b7 <sched_exit_all_ready_envs+0x127>
f01060b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01060b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01060ba:	c1 e2 04             	shl    $0x4,%edx
f01060bd:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f01060c3:	89 02                	mov    %eax,(%edx)
f01060c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c8:	c1 e0 04             	shl    $0x4,%eax
f01060cb:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f01060d0:	8b 00                	mov    (%eax),%eax
f01060d2:	85 c0                	test   %eax,%eax
f01060d4:	0f 85 00 ff ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
f01060da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060de:	0f 85 f6 fe ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01060e4:	ff 45 f0             	incl   -0x10(%ebp)
f01060e7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01060ec:	0f b6 c0             	movzbl %al,%eax
f01060ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01060f2:	0f 8f b1 fe ff ff    	jg     f0105fa9 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01060f8:	90                   	nop
f01060f9:	c9                   	leave  
f01060fa:	c3                   	ret    

f01060fb <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f01060fb:	55                   	push   %ebp
f01060fc:	89 e5                	mov    %esp,%ebp
	return ticks;
f01060fe:	a1 20 be 2b f0       	mov    0xf02bbe20,%eax
f0106103:	8b 15 24 be 2b f0    	mov    0xf02bbe24,%edx
}
f0106109:	5d                   	pop    %ebp
f010610a:	c3                   	ret    

f010610b <env_get_nice>:
int env_get_nice(struct Env* e)
{
f010610b:	55                   	push   %ebp
f010610c:	89 e5                	mov    %esp,%ebp
f010610e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106111:	83 ec 04             	sub    $0x4,%esp
f0106114:	68 78 26 13 f0       	push   $0xf0132678
f0106119:	68 26 02 00 00       	push   $0x226
f010611e:	68 87 23 13 f0       	push   $0xf0132387
f0106123:	e8 88 a0 ff ff       	call   f01001b0 <_panic>

f0106128 <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f0106128:	55                   	push   %ebp
f0106129:	89 e5                	mov    %esp,%ebp
f010612b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010612e:	83 ec 04             	sub    $0x4,%esp
f0106131:	68 78 26 13 f0       	push   $0xf0132678
f0106136:	68 2e 02 00 00       	push   $0x22e
f010613b:	68 87 23 13 f0       	push   $0xf0132387
f0106140:	e8 6b a0 ff ff       	call   f01001b0 <_panic>

f0106145 <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f0106145:	55                   	push   %ebp
f0106146:	89 e5                	mov    %esp,%ebp
f0106148:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010614b:	83 ec 04             	sub    $0x4,%esp
f010614e:	68 78 26 13 f0       	push   $0xf0132678
f0106153:	68 35 02 00 00       	push   $0x235
f0106158:	68 87 23 13 f0       	push   $0xf0132387
f010615d:	e8 4e a0 ff ff       	call   f01001b0 <_panic>

f0106162 <get_load_average>:
	return 0;
}
int get_load_average()
{
f0106162:	55                   	push   %ebp
f0106163:	89 e5                	mov    %esp,%ebp
f0106165:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106168:	83 ec 04             	sub    $0x4,%esp
f010616b:	68 78 26 13 f0       	push   $0xf0132678
f0106170:	68 3d 02 00 00       	push   $0x23d
f0106175:	68 87 23 13 f0       	push   $0xf0132387
f010617a:	e8 31 a0 ff ff       	call   f01001b0 <_panic>

f010617f <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010617f:	55                   	push   %ebp
f0106180:	89 e5                	mov    %esp,%ebp
f0106182:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f0106187:	85 c0                	test   %eax,%eax
f0106189:	75 07                	jne    f0106192 <isSchedMethodRR+0x13>
f010618b:	b8 01 00 00 00       	mov    $0x1,%eax
f0106190:	eb 05                	jmp    f0106197 <isSchedMethodRR+0x18>
f0106192:	b8 00 00 00 00       	mov    $0x0,%eax
f0106197:	5d                   	pop    %ebp
f0106198:	c3                   	ret    

f0106199 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0106199:	55                   	push   %ebp
f010619a:	89 e5                	mov    %esp,%ebp
f010619c:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f01061a1:	83 f8 01             	cmp    $0x1,%eax
f01061a4:	75 07                	jne    f01061ad <isSchedMethodMLFQ+0x14>
f01061a6:	b8 01 00 00 00       	mov    $0x1,%eax
f01061ab:	eb 05                	jmp    f01061b2 <isSchedMethodMLFQ+0x19>
f01061ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01061b2:	5d                   	pop    %ebp
f01061b3:	c3                   	ret    

f01061b4 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f01061b4:	55                   	push   %ebp
f01061b5:	89 e5                	mov    %esp,%ebp
f01061b7:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f01061bc:	83 f8 02             	cmp    $0x2,%eax
f01061bf:	75 07                	jne    f01061c8 <isSchedMethodBSD+0x14>
f01061c1:	b8 01 00 00 00       	mov    $0x1,%eax
f01061c6:	eb 05                	jmp    f01061cd <isSchedMethodBSD+0x19>
f01061c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01061cd:	5d                   	pop    %ebp
f01061ce:	c3                   	ret    

f01061cf <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f01061cf:	55                   	push   %ebp
f01061d0:	89 e5                	mov    %esp,%ebp
f01061d2:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01061d5:	c7 05 d4 99 2b f0 00 	movl   $0x0,0xf02b99d4
f01061dc:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f01061df:	83 ec 0c             	sub    $0xc,%esp
f01061e2:	6a 0a                	push   $0xa
f01061e4:	e8 2b 01 00 00       	call   f0106314 <sched_init_RR>
f01061e9:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01061ec:	83 ec 0c             	sub    $0xc,%esp
f01061ef:	68 f8 bd 2b f0       	push   $0xf02bbdf8
f01061f4:	e8 8b eb ff ff       	call   f0104d84 <init_queue>
f01061f9:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01061fc:	83 ec 0c             	sub    $0xc,%esp
f01061ff:	68 c4 99 2b f0       	push   $0xf02b99c4
f0106204:	e8 7b eb ff ff       	call   f0104d84 <init_queue>
f0106209:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f010620c:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f0106213:	00 00 00 
}
f0106216:	90                   	nop
f0106217:	c9                   	leave  
f0106218:	c3                   	ret    

f0106219 <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f0106219:	55                   	push   %ebp
f010621a:	89 e5                	mov    %esp,%ebp
f010621c:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f010621f:	e8 4e 81 02 00       	call   f012e372 <chk1>
	scheduler_status = SCH_STARTED;
f0106224:	c7 05 14 be 2b f0 01 	movl   $0x1,0xf02bbe14
f010622b:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010622e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0106235:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f010623a:	85 c0                	test   %eax,%eax
f010623c:	75 48                	jne    f0106286 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010623e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0106243:	85 c0                	test   %eax,%eax
f0106245:	74 16                	je     f010625d <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0106247:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010624c:	83 ec 08             	sub    $0x8,%esp
f010624f:	50                   	push   %eax
f0106250:	68 60 3a 25 f0       	push   $0xf0253a60
f0106255:	e8 6b eb ff ff       	call   f0104dc5 <enqueue>
f010625a:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010625d:	83 ec 0c             	sub    $0xc,%esp
f0106260:	68 60 3a 25 f0       	push   $0xf0253a60
f0106265:	e8 ec eb ff ff       	call   f0104e56 <dequeue>
f010626a:	83 c4 10             	add    $0x10,%esp
f010626d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0106270:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f0106275:	0f b6 c0             	movzbl %al,%eax
f0106278:	83 ec 0c             	sub    $0xc,%esp
f010627b:	50                   	push   %eax
f010627c:	e8 31 e9 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106281:	83 c4 10             	add    $0x10,%esp
f0106284:	eb 26                	jmp    f01062ac <fos_scheduler+0x93>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0106286:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f010628b:	83 f8 01             	cmp    $0x1,%eax
f010628e:	75 0a                	jne    f010629a <fos_scheduler+0x81>
	{
		next_env = fos_scheduler_MLFQ();
f0106290:	e8 f9 00 00 00       	call   f010638e <fos_scheduler_MLFQ>
f0106295:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106298:	eb 12                	jmp    f01062ac <fos_scheduler+0x93>
	}
	else if (scheduler_method == SCH_BSD)
f010629a:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f010629f:	83 f8 02             	cmp    $0x2,%eax
f01062a2:	75 08                	jne    f01062ac <fos_scheduler+0x93>
	{
		next_env = fos_scheduler_BSD();
f01062a4:	e8 02 01 00 00       	call   f01063ab <fos_scheduler_BSD>
f01062a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01062ac:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01062b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01062b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b7:	a3 74 31 25 f0       	mov    %eax,0xf0253174
	chk2(next_env) ;
f01062bc:	83 ec 0c             	sub    $0xc,%esp
f01062bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c2:	e8 e8 80 02 00       	call   f012e3af <chk2>
f01062c7:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01062ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cd:	a3 74 31 25 f0       	mov    %eax,0xf0253174

	//sched_print_all();

	if(next_env != NULL)
f01062d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01062d6:	74 0b                	je     f01062e3 <fos_scheduler+0xca>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01062d8:	83 ec 0c             	sub    $0xc,%esp
f01062db:	ff 75 f4             	pushl  -0xc(%ebp)
f01062de:	e8 05 37 00 00       	call   f01099e8 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01062e3:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f01062ea:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01062ed:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01062f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01062f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062f8:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01062fb:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f0106302:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0106305:	83 ec 0c             	sub    $0xc,%esp
f0106308:	6a 00                	push   $0x0
f010630a:	e8 41 b8 ff ff       	call   f0101b50 <run_command_prompt>
f010630f:	83 c4 10             	add    $0x10,%esp
f0106312:	eb f1                	jmp    f0106305 <fos_scheduler+0xec>

f0106314 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f0106314:	55                   	push   %ebp
f0106315:	89 e5                	mov    %esp,%ebp
f0106317:	83 ec 18             	sub    $0x18,%esp
f010631a:	8b 45 08             	mov    0x8(%ebp),%eax
f010631d:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0106320:	c6 05 44 be 2b f0 01 	movb   $0x1,0xf02bbe44
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0106327:	8a 45 f4             	mov    -0xc(%ebp),%al
f010632a:	a2 e8 bd 2b f0       	mov    %al,0xf02bbde8
	kclock_set_quantum(quantums[0]);
f010632f:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f0106334:	0f b6 c0             	movzbl %al,%eax
f0106337:	83 ec 0c             	sub    $0xc,%esp
f010633a:	50                   	push   %eax
f010633b:	e8 72 e8 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106340:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0106343:	83 ec 0c             	sub    $0xc,%esp
f0106346:	68 60 3a 25 f0       	push   $0xf0253a60
f010634b:	e8 34 ea ff ff       	call   f0104d84 <init_queue>
f0106350:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0106353:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f010635a:	00 00 00 
	scheduler_method = SCH_RR;
f010635d:	c7 05 08 be 2b f0 00 	movl   $0x0,0xf02bbe08
f0106364:	00 00 00 
	//=========================================
	//=========================================
}
f0106367:	90                   	nop
f0106368:	c9                   	leave  
f0106369:	c3                   	ret    

f010636a <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010636a:	55                   	push   %ebp
f010636b:	89 e5                	mov    %esp,%ebp
f010636d:	83 ec 04             	sub    $0x4,%esp
f0106370:	8b 45 08             	mov    0x8(%ebp),%eax
f0106373:	88 45 fc             	mov    %al,-0x4(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_MLFQ;
	//=========================================
	//=========================================
#endif
}
f0106376:	90                   	nop
f0106377:	c9                   	leave  
f0106378:	c3                   	ret    

f0106379 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106379:	55                   	push   %ebp
f010637a:	89 e5                	mov    %esp,%ebp
f010637c:	83 ec 08             	sub    $0x8,%esp
f010637f:	8b 55 08             	mov    0x8(%ebp),%edx
f0106382:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106385:	88 55 fc             	mov    %dl,-0x4(%ebp)
f0106388:	88 45 f8             	mov    %al,-0x8(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_BSD;
	//=========================================
	//=========================================
#endif
}
f010638b:	90                   	nop
f010638c:	c9                   	leave  
f010638d:	c3                   	ret    

f010638e <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f010638e:	55                   	push   %ebp
f010638f:	89 e5                	mov    %esp,%ebp
f0106391:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0106394:	83 ec 04             	sub    $0x4,%esp
f0106397:	68 8c 26 13 f0       	push   $0xf013268c
f010639c:	68 b9 00 00 00       	push   $0xb9
f01063a1:	68 9c 26 13 f0       	push   $0xf013269c
f01063a6:	e8 05 9e ff ff       	call   f01001b0 <_panic>

f01063ab <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f01063ab:	55                   	push   %ebp
f01063ac:	89 e5                	mov    %esp,%ebp
f01063ae:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01063b1:	83 ec 04             	sub    $0x4,%esp
f01063b4:	68 ad 26 13 f0       	push   $0xf01326ad
f01063b9:	68 c5 00 00 00       	push   $0xc5
f01063be:	68 9c 26 13 f0       	push   $0xf013269c
f01063c3:	e8 e8 9d ff ff       	call   f01001b0 <_panic>

f01063c8 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f01063c8:	55                   	push   %ebp
f01063c9:	89 e5                	mov    %esp,%ebp
f01063cb:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f01063ce:	a1 20 be 2b f0       	mov    0xf02bbe20,%eax
f01063d3:	8b 15 24 be 2b f0    	mov    0xf02bbe24,%edx
f01063d9:	83 c0 01             	add    $0x1,%eax
f01063dc:	83 d2 00             	adc    $0x0,%edx
f01063df:	a3 20 be 2b f0       	mov    %eax,0xf02bbe20
f01063e4:	89 15 24 be 2b f0    	mov    %edx,0xf02bbe24
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01063ea:	83 ec 0c             	sub    $0xc,%esp
f01063ed:	6a 01                	push   $0x1
f01063ef:	e8 eb 74 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f01063f4:	83 c4 10             	add    $0x10,%esp
f01063f7:	85 c0                	test   %eax,%eax
f01063f9:	74 05                	je     f0106400 <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f01063fb:	e8 05 00 00 00       	call   f0106405 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0106400:	e8 14 fe ff ff       	call   f0106219 <fos_scheduler>

f0106405 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106405:	55                   	push   %ebp
f0106406:	89 e5                	mov    %esp,%ebp
f0106408:	53                   	push   %ebx
f0106409:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f010640c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0106411:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106414:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106418:	0f 84 a9 01 00 00    	je     f01065c7 <update_WS_time_stamps+0x1c2>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010641e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106425:	e9 9f 00 00 00       	jmp    f01064c9 <update_WS_time_stamps+0xc4>
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f010642a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010642d:	89 d0                	mov    %edx,%eax
f010642f:	01 c0                	add    %eax,%eax
f0106431:	01 d0                	add    %edx,%eax
f0106433:	c1 e0 03             	shl    $0x3,%eax
f0106436:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010643c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010643f:	01 d0                	add    %edx,%eax
f0106441:	83 c0 08             	add    $0x8,%eax
f0106444:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if( wse->empty == 1)
f0106447:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010644a:	8a 40 04             	mov    0x4(%eax),%al
f010644d:	3c 01                	cmp    $0x1,%al
f010644f:	74 74                	je     f01064c5 <update_WS_time_stamps+0xc0>
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f0106451:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106454:	8b 00                	mov    (%eax),%eax
f0106456:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106459:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010645c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106462:	83 ec 08             	sub    $0x8,%esp
f0106465:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106468:	50                   	push   %eax
f0106469:	e8 11 1d 00 00       	call   f010817f <pt_get_page_permissions>
f010646e:	83 c4 10             	add    $0x10,%esp
f0106471:	89 45 e0             	mov    %eax,-0x20(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f0106474:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106477:	8b 40 08             	mov    0x8(%eax),%eax
f010647a:	89 45 dc             	mov    %eax,-0x24(%ebp)

				if (perm & PERM_USED)
f010647d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106480:	83 e0 20             	and    $0x20,%eax
f0106483:	85 c0                	test   %eax,%eax
f0106485:	74 2e                	je     f01064b5 <update_WS_time_stamps+0xb0>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106487:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010648a:	c1 e8 02             	shr    $0x2,%eax
f010648d:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106492:	89 c2                	mov    %eax,%edx
f0106494:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106497:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010649a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01064a3:	6a 20                	push   $0x20
f01064a5:	6a 00                	push   $0x0
f01064a7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01064aa:	50                   	push   %eax
f01064ab:	e8 0b 1c 00 00       	call   f01080bb <pt_set_page_permissions>
f01064b0:	83 c4 10             	add    $0x10,%esp
f01064b3:	eb 11                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f01064b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01064b8:	c1 e8 02             	shr    $0x2,%eax
f01064bb:	89 c2                	mov    %eax,%edx
f01064bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01064c0:	89 50 08             	mov    %edx,0x8(%eax)
f01064c3:	eb 01                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
f01064c5:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01064c6:	ff 45 f4             	incl   -0xc(%ebp)
f01064c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064cc:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01064d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064d5:	39 c2                	cmp    %eax,%edx
f01064d7:	0f 87 4d ff ff ff    	ja     f010642a <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01064dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064e4:	e9 d4 00 00 00       	jmp    f01065bd <update_WS_time_stamps+0x1b8>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01064e9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01064ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064ef:	89 d0                	mov    %edx,%eax
f01064f1:	01 c0                	add    %eax,%eax
f01064f3:	01 d0                	add    %edx,%eax
f01064f5:	c1 e0 03             	shl    $0x3,%eax
f01064f8:	01 c8                	add    %ecx,%eax
f01064fa:	05 84 d5 01 00       	add    $0x1d584,%eax
f01064ff:	8a 00                	mov    (%eax),%al
f0106501:	3c 01                	cmp    $0x1,%al
f0106503:	0f 84 b1 00 00 00    	je     f01065ba <update_WS_time_stamps+0x1b5>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0106509:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010650c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010650f:	89 d0                	mov    %edx,%eax
f0106511:	01 c0                	add    %eax,%eax
f0106513:	01 d0                	add    %edx,%eax
f0106515:	c1 e0 03             	shl    $0x3,%eax
f0106518:	01 c8                	add    %ecx,%eax
f010651a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010651f:	8b 00                	mov    (%eax),%eax
f0106521:	89 45 d8             	mov    %eax,-0x28(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106524:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106527:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010652a:	89 d0                	mov    %edx,%eax
f010652c:	01 c0                	add    %eax,%eax
f010652e:	01 d0                	add    %edx,%eax
f0106530:	c1 e0 03             	shl    $0x3,%eax
f0106533:	01 c8                	add    %ecx,%eax
f0106535:	05 88 d5 01 00       	add    $0x1d588,%eax
f010653a:	8b 00                	mov    (%eax),%eax
f010653c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f010653f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106542:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106548:	83 ec 08             	sub    $0x8,%esp
f010654b:	ff 75 d8             	pushl  -0x28(%ebp)
f010654e:	50                   	push   %eax
f010654f:	e8 07 1d 00 00       	call   f010825b <pd_is_table_used>
f0106554:	83 c4 10             	add    $0x10,%esp
f0106557:	85 c0                	test   %eax,%eax
f0106559:	74 3f                	je     f010659a <update_WS_time_stamps+0x195>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010655b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010655e:	c1 e8 02             	shr    $0x2,%eax
f0106561:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106566:	89 c1                	mov    %eax,%ecx
f0106568:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010656b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010656e:	89 d0                	mov    %edx,%eax
f0106570:	01 c0                	add    %eax,%eax
f0106572:	01 d0                	add    %edx,%eax
f0106574:	c1 e0 03             	shl    $0x3,%eax
f0106577:	01 d8                	add    %ebx,%eax
f0106579:	05 88 d5 01 00       	add    $0x1d588,%eax
f010657e:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106583:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106589:	83 ec 08             	sub    $0x8,%esp
f010658c:	ff 75 d8             	pushl  -0x28(%ebp)
f010658f:	50                   	push   %eax
f0106590:	e8 ea 1c 00 00       	call   f010827f <pd_set_table_unused>
f0106595:	83 c4 10             	add    $0x10,%esp
f0106598:	eb 20                	jmp    f01065ba <update_WS_time_stamps+0x1b5>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010659a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010659d:	c1 e8 02             	shr    $0x2,%eax
f01065a0:	89 c1                	mov    %eax,%ecx
f01065a2:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f01065a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a8:	89 d0                	mov    %edx,%eax
f01065aa:	01 c0                	add    %eax,%eax
f01065ac:	01 d0                	add    %edx,%eax
f01065ae:	c1 e0 03             	shl    $0x3,%eax
f01065b1:	01 d8                	add    %ebx,%eax
f01065b3:	05 88 d5 01 00       	add    $0x1d588,%eax
f01065b8:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01065ba:	ff 45 f0             	incl   -0x10(%ebp)
f01065bd:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01065c1:	0f 8e 22 ff ff ff    	jle    f01064e9 <update_WS_time_stamps+0xe4>
					}
				}
			}
		}
	}
}
f01065c7:	90                   	nop
f01065c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01065cb:	c9                   	leave  
f01065cc:	c3                   	ret    

f01065cd <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f01065cd:	55                   	push   %ebp
f01065ce:	89 e5                	mov    %esp,%ebp
f01065d0:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f01065d3:	c7 05 6c 31 25 f0 01 	movl   $0x1,0xf025316c
f01065da:	00 00 00 
f01065dd:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f01065e4:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01065e8:	8a 45 b2             	mov    -0x4e(%ebp),%al
f01065eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065ee:	ee                   	out    %al,(%dx)
f01065ef:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f01065f6:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f01065fa:	8a 45 b3             	mov    -0x4d(%ebp),%al
f01065fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106600:	ee                   	out    %al,(%dx)
f0106601:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106608:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f010660c:	8a 45 b4             	mov    -0x4c(%ebp),%al
f010660f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106612:	ee                   	out    %al,(%dx)
f0106613:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f010661a:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f010661e:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106621:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106624:	ee                   	out    %al,(%dx)
f0106625:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f010662c:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106630:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106633:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106636:	ee                   	out    %al,(%dx)
f0106637:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f010663e:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106642:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106645:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106648:	ee                   	out    %al,(%dx)
f0106649:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106650:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106654:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106657:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010665a:	ee                   	out    %al,(%dx)
f010665b:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106662:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106666:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106669:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010666c:	ee                   	out    %al,(%dx)
f010666d:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106674:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106678:	8a 45 ba             	mov    -0x46(%ebp),%al
f010667b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010667e:	ee                   	out    %al,(%dx)
f010667f:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106686:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f010668a:	8a 45 bb             	mov    -0x45(%ebp),%al
f010668d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106690:	ee                   	out    %al,(%dx)
f0106691:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106698:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f010669c:	8a 45 bc             	mov    -0x44(%ebp),%al
f010669f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01066a2:	ee                   	out    %al,(%dx)
f01066a3:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f01066aa:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f01066ae:	8a 45 bd             	mov    -0x43(%ebp),%al
f01066b1:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01066b4:	ee                   	out    %al,(%dx)
f01066b5:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01066bc:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01066c0:	8a 45 be             	mov    -0x42(%ebp),%al
f01066c3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01066c6:	ee                   	out    %al,(%dx)
f01066c7:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f01066ce:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f01066d2:	8a 45 bf             	mov    -0x41(%ebp),%al
f01066d5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01066d8:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f01066d9:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f01066df:	66 83 f8 ff          	cmp    $0xffff,%ax
f01066e3:	74 15                	je     f01066fa <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f01066e5:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f01066eb:	0f b7 c0             	movzwl %ax,%eax
f01066ee:	83 ec 0c             	sub    $0xc,%esp
f01066f1:	50                   	push   %eax
f01066f2:	e8 06 00 00 00       	call   f01066fd <irq_setmask_8259A>
f01066f7:	83 c4 10             	add    $0x10,%esp
}
f01066fa:	90                   	nop
f01066fb:	c9                   	leave  
f01066fc:	c3                   	ret    

f01066fd <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f01066fd:	55                   	push   %ebp
f01066fe:	89 e5                	mov    %esp,%ebp
f0106700:	83 ec 14             	sub    $0x14,%esp
f0106703:	8b 45 08             	mov    0x8(%ebp),%eax
f0106706:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f010670a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010670d:	66 a3 64 e9 18 f0    	mov    %ax,0xf018e964
	if (!didinit)
f0106713:	a1 6c 31 25 f0       	mov    0xf025316c,%eax
f0106718:	85 c0                	test   %eax,%eax
f010671a:	74 34                	je     f0106750 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f010671c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010671f:	0f b6 c0             	movzbl %al,%eax
f0106722:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106729:	88 45 f6             	mov    %al,-0xa(%ebp)
f010672c:	8a 45 f6             	mov    -0xa(%ebp),%al
f010672f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106732:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106733:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106736:	66 c1 e8 08          	shr    $0x8,%ax
f010673a:	0f b6 c0             	movzbl %al,%eax
f010673d:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106744:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106747:	8a 45 f7             	mov    -0x9(%ebp),%al
f010674a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010674d:	ee                   	out    %al,(%dx)
f010674e:	eb 01                	jmp    f0106751 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106750:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106751:	c9                   	leave  
f0106752:	c3                   	ret    

f0106753 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0106753:	55                   	push   %ebp
f0106754:	89 e5                	mov    %esp,%ebp
f0106756:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0106759:	83 ec 08             	sub    $0x8,%esp
f010675c:	68 00 10 00 00       	push   $0x1000
f0106761:	68 00 10 00 00       	push   $0x1000
f0106766:	e8 0a 02 00 00       	call   f0106975 <boot_allocate_space>
f010676b:	83 c4 10             	add    $0x10,%esp
f010676e:	a3 30 be 2b f0       	mov    %eax,0xf02bbe30
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106773:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106778:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010677b:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0106782:	77 14                	ja     f0106798 <initialize_kernel_VM+0x45>
f0106784:	ff 75 e8             	pushl  -0x18(%ebp)
f0106787:	68 c4 26 13 f0       	push   $0xf01326c4
f010678c:	6a 45                	push   $0x45
f010678e:	68 f8 26 13 f0       	push   $0xf01326f8
f0106793:	e8 18 9a ff ff       	call   f01001b0 <_panic>
f0106798:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010679b:	05 00 00 00 10       	add    $0x10000000,%eax
f01067a0:	a3 70 be 2b f0       	mov    %eax,0xf02bbe70
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01067a5:	c7 45 e4 00 60 18 f0 	movl   $0xf0186000,-0x1c(%ebp)
f01067ac:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01067b3:	77 14                	ja     f01067c9 <initialize_kernel_VM+0x76>
f01067b5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01067b8:	68 c4 26 13 f0       	push   $0xf01326c4
f01067bd:	6a 4d                	push   $0x4d
f01067bf:	68 f8 26 13 f0       	push   $0xf01326f8
f01067c4:	e8 e7 99 ff ff       	call   f01001b0 <_panic>
f01067c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01067cc:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01067d2:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01067d7:	83 ec 0c             	sub    $0xc,%esp
f01067da:	6a 02                	push   $0x2
f01067dc:	52                   	push   %edx
f01067dd:	68 00 80 00 00       	push   $0x8000
f01067e2:	68 00 80 bf ef       	push   $0xefbf8000
f01067e7:	50                   	push   %eax
f01067e8:	e8 fc 01 00 00       	call   f01069e9 <boot_map_range>
f01067ed:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01067f0:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01067f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01067fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106805:	eb 25                	jmp    f010682c <initialize_kernel_VM+0xd9>
	{
		++nTables;
f0106807:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f010680a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010680d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106812:	83 ec 04             	sub    $0x4,%esp
f0106815:	6a 01                	push   $0x1
f0106817:	52                   	push   %edx
f0106818:	50                   	push   %eax
f0106819:	e8 3f 02 00 00       	call   f0106a5d <boot_get_page_table>
f010681e:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106821:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0106828:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f010682c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106830:	72 d5                	jb     f0106807 <initialize_kernel_VM+0xb4>
f0106832:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106836:	77 06                	ja     f010683e <initialize_kernel_VM+0xeb>
f0106838:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f010683c:	76 c9                	jbe    f0106807 <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f010683e:	8b 15 d0 bd 2b f0    	mov    0xf02bbdd0,%edx
f0106844:	89 d0                	mov    %edx,%eax
f0106846:	01 c0                	add    %eax,%eax
f0106848:	01 d0                	add    %edx,%eax
f010684a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106851:	01 c8                	add    %ecx,%eax
f0106853:	01 d0                	add    %edx,%eax
f0106855:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0106858:	83 ec 08             	sub    $0x8,%esp
f010685b:	68 00 10 00 00       	push   $0x1000
f0106860:	ff 75 e0             	pushl  -0x20(%ebp)
f0106863:	e8 0d 01 00 00       	call   f0106975 <boot_allocate_space>
f0106868:	83 c4 10             	add    $0x10,%esp
f010686b:	a3 10 be 2b f0       	mov    %eax,0xf02bbe10
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0106870:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0106877:	83 ec 08             	sub    $0x8,%esp
f010687a:	68 00 10 00 00       	push   $0x1000
f010687f:	ff 75 dc             	pushl  -0x24(%ebp)
f0106882:	e8 ee 00 00 00       	call   f0106975 <boot_allocate_space>
f0106887:	83 c4 10             	add    $0x10,%esp
f010688a:	a3 50 3a 25 f0       	mov    %eax,0xf0253a50
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f010688f:	e8 fe 04 00 00       	call   f0106d92 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0106894:	83 ec 0c             	sub    $0xc,%esp
f0106897:	6a 08                	push   $0x8
f0106899:	e8 89 75 02 00       	call   f012de27 <nearest_pow2_ceil>
f010689e:	83 c4 10             	add    $0x10,%esp
f01068a1:	83 ec 04             	sub    $0x4,%esp
f01068a4:	50                   	push   %eax
f01068a5:	6a 08                	push   $0x8
f01068a7:	68 18 27 13 f0       	push   $0xf0132718
f01068ac:	e8 80 a5 ff ff       	call   f0100e31 <cprintf>
f01068b1:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01068b4:	c7 45 d8 00 d5 0e 00 	movl   $0xed500,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01068bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01068be:	83 ec 08             	sub    $0x8,%esp
f01068c1:	68 00 10 00 00       	push   $0x1000
f01068c6:	50                   	push   %eax
f01068c7:	e8 a9 00 00 00       	call   f0106975 <boot_allocate_space>
f01068cc:	83 c4 10             	add    $0x10,%esp
f01068cf:	a3 70 31 25 f0       	mov    %eax,0xf0253170
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01068d4:	a1 70 31 25 f0       	mov    0xf0253170,%eax
f01068d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01068dc:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01068e3:	77 17                	ja     f01068fc <initialize_kernel_VM+0x1a9>
f01068e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01068e8:	68 c4 26 13 f0       	push   $0xf01326c4
f01068ed:	68 96 00 00 00       	push   $0x96
f01068f2:	68 f8 26 13 f0       	push   $0xf01326f8
f01068f7:	e8 b4 98 ff ff       	call   f01001b0 <_panic>
f01068fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01068ff:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0106905:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106908:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f010690d:	83 ec 0c             	sub    $0xc,%esp
f0106910:	6a 04                	push   $0x4
f0106912:	51                   	push   %ecx
f0106913:	52                   	push   %edx
f0106914:	68 00 00 c0 ee       	push   $0xeec00000
f0106919:	50                   	push   %eax
f010691a:	e8 ca 00 00 00       	call   f01069e9 <boot_map_range>
f010691f:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0106922:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106927:	05 ec 0e 00 00       	add    $0xeec,%eax
f010692c:	8b 15 30 be 2b f0    	mov    0xf02bbe30,%edx
f0106932:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0106938:	8b 12                	mov    (%edx),%edx
f010693a:	83 ca 05             	or     $0x5,%edx
f010693d:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010693f:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106944:	83 ec 0c             	sub    $0xc,%esp
f0106947:	6a 02                	push   $0x2
f0106949:	6a 00                	push   $0x0
f010694b:	68 ff ff ff 0f       	push   $0xfffffff
f0106950:	68 00 00 00 f0       	push   $0xf0000000
f0106955:	50                   	push   %eax
f0106956:	e8 8e 00 00 00       	call   f01069e9 <boot_map_range>
f010695b:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f010695e:	e8 9b 7c 02 00       	call   f012e5fe <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106963:	c7 05 c0 99 2b f0 19 	movl   $0x19,0xf02b99c0
f010696a:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010696d:	e8 20 03 00 00       	call   f0106c92 <turn_on_paging>
}
f0106972:	90                   	nop
f0106973:	c9                   	leave  
f0106974:	c3                   	ret    

f0106975 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0106975:	55                   	push   %ebp
f0106976:	89 e5                	mov    %esp,%ebp
f0106978:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010697b:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106980:	85 c0                	test   %eax,%eax
f0106982:	75 0a                	jne    f010698e <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106984:	c7 05 2c be 2b f0 8c 	movl   $0xf02de58c,0xf02bbe2c
f010698b:	e5 2d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f010698e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106991:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106994:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106999:	89 c2                	mov    %eax,%edx
f010699b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010699e:	01 d0                	add    %edx,%eax
f01069a0:	48                   	dec    %eax
f01069a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01069a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01069ac:	f7 75 f4             	divl   -0xc(%ebp)
f01069af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069b2:	29 d0                	sub    %edx,%eax
f01069b4:	a3 2c be 2b f0       	mov    %eax,0xf02bbe2c

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01069b9:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f01069be:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01069c1:	8b 15 2c be 2b f0    	mov    0xf02bbe2c,%edx
f01069c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ca:	01 d0                	add    %edx,%eax
f01069cc:	a3 2c be 2b f0       	mov    %eax,0xf02bbe2c

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01069d1:	83 ec 04             	sub    $0x4,%esp
f01069d4:	ff 75 08             	pushl  0x8(%ebp)
f01069d7:	6a 00                	push   $0x0
f01069d9:	ff 75 ec             	pushl  -0x14(%ebp)
f01069dc:	e8 a9 88 02 00       	call   f012f28a <memset>
f01069e1:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01069e4:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01069e7:	c9                   	leave  
f01069e8:	c3                   	ret    

f01069e9 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01069e9:	55                   	push   %ebp
f01069ea:	89 e5                	mov    %esp,%ebp
f01069ec:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01069ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01069f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01069fd:	eb 53                	jmp    f0106a52 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01069ff:	83 ec 04             	sub    $0x4,%esp
f0106a02:	6a 01                	push   $0x1
f0106a04:	ff 75 0c             	pushl  0xc(%ebp)
f0106a07:	ff 75 08             	pushl  0x8(%ebp)
f0106a0a:	e8 4e 00 00 00       	call   f0106a5d <boot_get_page_table>
f0106a0f:	83 c4 10             	add    $0x10,%esp
f0106a12:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0106a15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a18:	c1 e8 0c             	shr    $0xc,%eax
f0106a1b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106a20:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a26:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a30:	01 c2                	add    %eax,%edx
f0106a32:	8b 45 18             	mov    0x18(%ebp),%eax
f0106a35:	0b 45 14             	or     0x14(%ebp),%eax
f0106a38:	83 c8 01             	or     $0x1,%eax
f0106a3b:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106a3d:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106a44:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106a4b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a55:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106a58:	72 a5                	jb     f01069ff <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0106a5a:	90                   	nop
f0106a5b:	c9                   	leave  
f0106a5c:	c3                   	ret    

f0106a5d <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106a5d:	55                   	push   %ebp
f0106a5e:	89 e5                	mov    %esp,%ebp
f0106a60:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a66:	c1 e8 16             	shr    $0x16,%eax
f0106a69:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a79:	01 d0                	add    %edx,%eax
f0106a7b:	8b 00                	mov    (%eax),%eax
f0106a7d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106a80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a88:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106a8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a8e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a91:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a94:	c1 e8 0c             	shr    $0xc,%eax
f0106a97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a9a:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0106a9f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106aa2:	72 17                	jb     f0106abb <boot_get_page_table+0x5e>
f0106aa4:	ff 75 e8             	pushl  -0x18(%ebp)
f0106aa7:	68 40 27 13 f0       	push   $0xf0132740
f0106aac:	68 18 01 00 00       	push   $0x118
f0106ab1:	68 f8 26 13 f0       	push   $0xf01326f8
f0106ab6:	e8 f5 96 ff ff       	call   f01001b0 <_panic>
f0106abb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106abe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106ac3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106ac6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106aca:	75 72                	jne    f0106b3e <boot_get_page_table+0xe1>
	{
		if (create)
f0106acc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106ad0:	74 65                	je     f0106b37 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106ad2:	83 ec 08             	sub    $0x8,%esp
f0106ad5:	68 00 10 00 00       	push   $0x1000
f0106ada:	68 00 10 00 00       	push   $0x1000
f0106adf:	e8 91 fe ff ff       	call   f0106975 <boot_allocate_space>
f0106ae4:	83 c4 10             	add    $0x10,%esp
f0106ae7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106aea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106af0:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106af7:	77 17                	ja     f0106b10 <boot_get_page_table+0xb3>
f0106af9:	ff 75 dc             	pushl  -0x24(%ebp)
f0106afc:	68 c4 26 13 f0       	push   $0xf01326c4
f0106b01:	68 1e 01 00 00       	push   $0x11e
f0106b06:	68 f8 26 13 f0       	push   $0xf01326f8
f0106b0b:	e8 a0 96 ff ff       	call   f01001b0 <_panic>
f0106b10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106b13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106b18:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b1e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b25:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b28:	01 d0                	add    %edx,%eax
f0106b2a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106b2d:	83 ca 03             	or     $0x3,%edx
f0106b30:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106b32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b35:	eb 0a                	jmp    f0106b41 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0106b37:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b3c:	eb 03                	jmp    f0106b41 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106b3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106b41:	c9                   	leave  
f0106b42:	c3                   	ret    

f0106b43 <nvram_read>:


int nvram_read(int r)
{
f0106b43:	55                   	push   %ebp
f0106b44:	89 e5                	mov    %esp,%ebp
f0106b46:	53                   	push   %ebx
f0106b47:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106b4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b4d:	83 ec 0c             	sub    $0xc,%esp
f0106b50:	50                   	push   %eax
f0106b51:	e8 6a de ff ff       	call   f01049c0 <mc146818_read>
f0106b56:	83 c4 10             	add    $0x10,%esp
f0106b59:	89 c3                	mov    %eax,%ebx
f0106b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b5e:	40                   	inc    %eax
f0106b5f:	83 ec 0c             	sub    $0xc,%esp
f0106b62:	50                   	push   %eax
f0106b63:	e8 58 de ff ff       	call   f01049c0 <mc146818_read>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	c1 e0 08             	shl    $0x8,%eax
f0106b6e:	09 d8                	or     %ebx,%eax
}
f0106b70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106b73:	c9                   	leave  
f0106b74:	c3                   	ret    

f0106b75 <detect_memory>:

void detect_memory()
{
f0106b75:	55                   	push   %ebp
f0106b76:	89 e5                	mov    %esp,%ebp
f0106b78:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106b7b:	83 ec 0c             	sub    $0xc,%esp
f0106b7e:	6a 15                	push   $0x15
f0106b80:	e8 be ff ff ff       	call   f0106b43 <nvram_read>
f0106b85:	83 c4 10             	add    $0x10,%esp
f0106b88:	c1 e0 0a             	shl    $0xa,%eax
f0106b8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b91:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b96:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106b99:	83 ec 0c             	sub    $0xc,%esp
f0106b9c:	6a 17                	push   $0x17
f0106b9e:	e8 a0 ff ff ff       	call   f0106b43 <nvram_read>
f0106ba3:	83 c4 10             	add    $0x10,%esp
f0106ba6:	c1 e0 0a             	shl    $0xa,%eax
f0106ba9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106bb7:	83 ec 0c             	sub    $0xc,%esp
f0106bba:	6a 34                	push   $0x34
f0106bbc:	e8 82 ff ff ff       	call   f0106b43 <nvram_read>
f0106bc1:	83 c4 10             	add    $0x10,%esp
f0106bc4:	c1 e0 10             	shl    $0x10,%eax
f0106bc7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106bca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bcd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106bd5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106bd9:	74 18                	je     f0106bf3 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106bdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106bde:	05 00 00 00 01       	add    $0x1000000,%eax
f0106be3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106be9:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106bee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106bf1:	eb 19                	jmp    f0106c0c <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106bf3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106bf7:	74 0d                	je     f0106c06 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bfc:	05 00 00 10 00       	add    $0x100000,%eax
f0106c01:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106c04:	eb 06                	jmp    f0106c0c <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106c0c:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0106c19:	76 32                	jbe    f0106c4d <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106c1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106c1e:	c1 e8 0a             	shr    $0xa,%eax
f0106c21:	89 c2                	mov    %eax,%edx
f0106c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c26:	c1 e8 0a             	shr    $0xa,%eax
f0106c29:	83 ec 04             	sub    $0x4,%esp
f0106c2c:	52                   	push   %edx
f0106c2d:	50                   	push   %eax
f0106c2e:	68 70 27 13 f0       	push   $0xf0132770
f0106c33:	e8 f9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c38:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106c3b:	83 ec 0c             	sub    $0xc,%esp
f0106c3e:	68 b8 27 13 f0       	push   $0xf01327b8
f0106c43:	e8 e9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c48:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106c4b:	eb fe                	jmp    f0106c4b <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c50:	c1 e8 0c             	shr    $0xc,%eax
f0106c53:	a3 d0 bd 2b f0       	mov    %eax,0xf02bbdd0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c5b:	c1 e8 0a             	shr    $0xa,%eax
f0106c5e:	83 ec 08             	sub    $0x8,%esp
f0106c61:	50                   	push   %eax
f0106c62:	68 4c 28 13 f0       	push   $0xf013284c
f0106c67:	e8 c5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c6c:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106c6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c72:	c1 e8 0a             	shr    $0xa,%eax
f0106c75:	89 c2                	mov    %eax,%edx
f0106c77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c7a:	c1 e8 0a             	shr    $0xa,%eax
f0106c7d:	83 ec 04             	sub    $0x4,%esp
f0106c80:	52                   	push   %edx
f0106c81:	50                   	push   %eax
f0106c82:	68 6d 28 13 f0       	push   $0xf013286d
f0106c87:	e8 a5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c8c:	83 c4 10             	add    $0x10,%esp
}
f0106c8f:	90                   	nop
f0106c90:	c9                   	leave  
f0106c91:	c3                   	ret    

f0106c92 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106c92:	55                   	push   %ebp
f0106c93:	89 e5                	mov    %esp,%ebp
f0106c95:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106c98:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106c9f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106ca6:	eb 24                	jmp    f0106ccc <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106ca8:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106cad:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106cb0:	c1 e2 02             	shl    $0x2,%edx
f0106cb3:	01 c2                	add    %eax,%edx
f0106cb5:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106cba:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106cbd:	c1 e1 02             	shl    $0x2,%ecx
f0106cc0:	01 c8                	add    %ecx,%eax
f0106cc2:	8b 00                	mov    (%eax),%eax
f0106cc4:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106cc6:	ff 45 fc             	incl   -0x4(%ebp)
f0106cc9:	ff 45 f8             	incl   -0x8(%ebp)
f0106ccc:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106cd1:	c1 e8 16             	shr    $0x16,%eax
f0106cd4:	89 c2                	mov    %eax,%edx
f0106cd6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106cd9:	39 c2                	cmp    %eax,%edx
f0106cdb:	77 cb                	ja     f0106ca8 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106cdd:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0106ce2:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106ce5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ce8:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106ceb:	0f 20 c0             	mov    %cr0,%eax
f0106cee:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106cf1:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106cf4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106cf7:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106cfe:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106d02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d05:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106d08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d0b:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106d0e:	0f 01 15 b0 e9 18 f0 	lgdtl  0xf018e9b0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106d15:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d1a:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106d1c:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d21:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106d23:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d28:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106d2a:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d2f:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106d31:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d36:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106d38:	ea 3f 6d 10 f0 08 00 	ljmp   $0x8,$0xf0106d3f
	asm volatile("lldt %%ax" :: "a" (0));
f0106d3f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d44:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106d47:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106d4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d55:	eb 19                	jmp    f0106d70 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106d57:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106d5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d5f:	c1 e2 02             	shl    $0x2,%edx
f0106d62:	01 d0                	add    %edx,%eax
f0106d64:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d6a:	ff 45 f4             	incl   -0xc(%ebp)
f0106d6d:	ff 45 f0             	incl   -0x10(%ebp)
f0106d70:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106d75:	c1 e8 16             	shr    $0x16,%eax
f0106d78:	89 c2                	mov    %eax,%edx
f0106d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d7d:	39 c2                	cmp    %eax,%edx
f0106d7f:	77 d6                	ja     f0106d57 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106d81:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0106d86:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106d89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d8c:	0f 22 d8             	mov    %eax,%cr3
}
f0106d8f:	90                   	nop
f0106d90:	c9                   	leave  
f0106d91:	c3                   	ret    

f0106d92 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106d92:	55                   	push   %ebp
f0106d93:	89 e5                	mov    %esp,%ebp
f0106d95:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106d98:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106d9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106da0:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106da7:	77 17                	ja     f0106dc0 <setup_listing_to_all_page_tables_entries+0x2e>
f0106da9:	ff 75 f4             	pushl  -0xc(%ebp)
f0106dac:	68 c4 26 13 f0       	push   $0xf01326c4
f0106db1:	68 ae 01 00 00       	push   $0x1ae
f0106db6:	68 f8 26 13 f0       	push   $0xf01326f8
f0106dbb:	e8 f0 93 ff ff       	call   f01001b0 <_panic>
f0106dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dc3:	05 00 00 00 10       	add    $0x10000000,%eax
f0106dc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106dcb:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106dd0:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106dd5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dd8:	83 ca 03             	or     $0x3,%edx
f0106ddb:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106ddd:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106de2:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106de8:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106ded:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106df0:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106df7:	77 17                	ja     f0106e10 <setup_listing_to_all_page_tables_entries+0x7e>
f0106df9:	ff 75 ec             	pushl  -0x14(%ebp)
f0106dfc:	68 c4 26 13 f0       	push   $0xf01326c4
f0106e01:	68 b3 01 00 00       	push   $0x1b3
f0106e06:	68 f8 26 13 f0       	push   $0xf01326f8
f0106e0b:	e8 a0 93 ff ff       	call   f01001b0 <_panic>
f0106e10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106e18:	83 c8 05             	or     $0x5,%eax
f0106e1b:	89 02                	mov    %eax,(%edx)

}
f0106e1d:	90                   	nop
f0106e1e:	c9                   	leave  
f0106e1f:	c3                   	ret    

f0106e20 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e20:	55                   	push   %ebp
f0106e21:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e23:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e26:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f0106e2c:	29 d0                	sub    %edx,%eax
f0106e2e:	c1 f8 02             	sar    $0x2,%eax
f0106e31:	89 c2                	mov    %eax,%edx
f0106e33:	89 d0                	mov    %edx,%eax
f0106e35:	c1 e0 03             	shl    $0x3,%eax
f0106e38:	01 d0                	add    %edx,%eax
f0106e3a:	c1 e0 03             	shl    $0x3,%eax
f0106e3d:	01 d0                	add    %edx,%eax
f0106e3f:	c1 e0 03             	shl    $0x3,%eax
f0106e42:	01 d0                	add    %edx,%eax
f0106e44:	c1 e0 03             	shl    $0x3,%eax
f0106e47:	01 d0                	add    %edx,%eax
f0106e49:	89 c1                	mov    %eax,%ecx
f0106e4b:	c1 e1 0f             	shl    $0xf,%ecx
f0106e4e:	01 c8                	add    %ecx,%eax
f0106e50:	c1 e0 03             	shl    $0x3,%eax
f0106e53:	01 d0                	add    %edx,%eax
f0106e55:	f7 d8                	neg    %eax
}
f0106e57:	5d                   	pop    %ebp
f0106e58:	c3                   	ret    

f0106e59 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106e59:	55                   	push   %ebp
f0106e5a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106e5c:	ff 75 08             	pushl  0x8(%ebp)
f0106e5f:	e8 bc ff ff ff       	call   f0106e20 <to_frame_number>
f0106e64:	83 c4 04             	add    $0x4,%esp
f0106e67:	c1 e0 0c             	shl    $0xc,%eax
}
f0106e6a:	c9                   	leave  
f0106e6b:	c3                   	ret    

f0106e6c <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106e6c:	55                   	push   %ebp
f0106e6d:	89 e5                	mov    %esp,%ebp
f0106e6f:	53                   	push   %ebx
f0106e70:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106e73:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e76:	c1 e8 0c             	shr    $0xc,%eax
f0106e79:	89 c2                	mov    %eax,%edx
f0106e7b:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0106e80:	39 c2                	cmp    %eax,%edx
f0106e82:	72 14                	jb     f0106e98 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106e84:	83 ec 04             	sub    $0x4,%esp
f0106e87:	68 8c 28 13 f0       	push   $0xf013288c
f0106e8c:	6a 55                	push   $0x55
f0106e8e:	68 b1 28 13 f0       	push   $0xf01328b1
f0106e93:	e8 18 93 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0106e98:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0106e9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ea1:	c1 e8 0c             	shr    $0xc,%eax
f0106ea4:	89 c2                	mov    %eax,%edx
f0106ea6:	89 d0                	mov    %edx,%eax
f0106ea8:	01 c0                	add    %eax,%eax
f0106eaa:	01 d0                	add    %edx,%eax
f0106eac:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106eb3:	01 d8                	add    %ebx,%eax
f0106eb5:	01 d0                	add    %edx,%eax
f0106eb7:	01 c8                	add    %ecx,%eax
}
f0106eb9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106ebc:	c9                   	leave  
f0106ebd:	c3                   	ret    

f0106ebe <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106ebe:	55                   	push   %ebp
f0106ebf:	89 e5                	mov    %esp,%ebp
f0106ec1:	83 ec 10             	sub    $0x10,%esp
f0106ec4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ec7:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106eca:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106ecd:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106ed0:	90                   	nop
f0106ed1:	c9                   	leave  
f0106ed2:	c3                   	ret    

f0106ed3 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106ed3:	55                   	push   %ebp
f0106ed4:	89 e5                	mov    %esp,%ebp
f0106ed6:	56                   	push   %esi
f0106ed7:	53                   	push   %ebx
f0106ed8:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106edb:	c7 05 d8 bd 2b f0 00 	movl   $0x0,0xf02bbdd8
f0106ee2:	00 00 00 
f0106ee5:	c7 05 dc bd 2b f0 00 	movl   $0x0,0xf02bbddc
f0106eec:	00 00 00 
f0106eef:	c7 05 e4 bd 2b f0 00 	movl   $0x0,0xf02bbde4
f0106ef6:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106ef9:	c7 05 40 3a 25 f0 00 	movl   $0x0,0xf0253a40
f0106f00:	00 00 00 
f0106f03:	c7 05 44 3a 25 f0 00 	movl   $0x0,0xf0253a44
f0106f0a:	00 00 00 
f0106f0d:	c7 05 4c 3a 25 f0 00 	movl   $0x0,0xf0253a4c
f0106f14:	00 00 00 

	frames_info[0].references = 1;
f0106f17:	a1 10 be 2b f0       	mov    0xf02bbe10,%eax
f0106f1c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106f22:	a1 10 be 2b f0       	mov    0xf02bbe10,%eax
f0106f27:	83 c0 1c             	add    $0x1c,%eax
f0106f2a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106f30:	a1 10 be 2b f0       	mov    0xf02bbe10,%eax
f0106f35:	83 c0 38             	add    $0x38,%eax
f0106f38:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106f3e:	c7 05 1c be 2b f0 00 	movl   $0xf0001000,0xf02bbe1c
f0106f45:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106f48:	c7 05 48 be 2b f0 00 	movl   $0xf0002000,0xf02bbe48
f0106f4f:	20 00 f0 
	i =0;
f0106f52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106f59:	eb 1f                	jmp    f0106f7a <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f0106f5b:	8b 15 1c be 2b f0    	mov    0xf02bbe1c,%edx
f0106f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f64:	01 d0                	add    %edx,%eax
f0106f66:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106f69:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f0106f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f72:	01 d0                	add    %edx,%eax
f0106f74:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106f77:	ff 45 f4             	incl   -0xc(%ebp)
f0106f7a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106f81:	7e d8                	jle    f0106f5b <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106f83:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106f8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8d:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106f92:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106f95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f98:	ba 00 00 00 00       	mov    $0x0,%edx
f0106f9d:	f7 75 f0             	divl   -0x10(%ebp)
f0106fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fa3:	29 d0                	sub    %edx,%eax
f0106fa5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106fa8:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106faf:	e9 20 01 00 00       	jmp    f01070d4 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0106fb4:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0106fba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fbd:	89 d0                	mov    %edx,%eax
f0106fbf:	01 c0                	add    %eax,%eax
f0106fc1:	01 d0                	add    %edx,%eax
f0106fc3:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106fca:	01 d8                	add    %ebx,%eax
f0106fcc:	01 d0                	add    %edx,%eax
f0106fce:	01 c8                	add    %ecx,%eax
f0106fd0:	83 ec 0c             	sub    $0xc,%esp
f0106fd3:	50                   	push   %eax
f0106fd4:	e8 31 03 00 00       	call   f010730a <initialize_frame_info>
f0106fd9:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106fdc:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0106fe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fe5:	89 d0                	mov    %edx,%eax
f0106fe7:	01 c0                	add    %eax,%eax
f0106fe9:	01 d0                	add    %edx,%eax
f0106feb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ff2:	01 d8                	add    %ebx,%eax
f0106ff4:	01 d0                	add    %edx,%eax
f0106ff6:	01 c8                	add    %ecx,%eax
f0106ff8:	85 c0                	test   %eax,%eax
f0106ffa:	75 14                	jne    f0107010 <initialize_paging+0x13d>
f0106ffc:	83 ec 04             	sub    $0x4,%esp
f0106fff:	68 cc 28 13 f0       	push   $0xf01328cc
f0107004:	6a 5c                	push   $0x5c
f0107006:	68 ef 28 13 f0       	push   $0xf01328ef
f010700b:	e8 a0 91 ff ff       	call   f01001b0 <_panic>
f0107010:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107016:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107019:	89 d0                	mov    %edx,%eax
f010701b:	01 c0                	add    %eax,%eax
f010701d:	01 d0                	add    %edx,%eax
f010701f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107026:	01 d8                	add    %ebx,%eax
f0107028:	01 d0                	add    %edx,%eax
f010702a:	01 c8                	add    %ecx,%eax
f010702c:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f0107032:	89 10                	mov    %edx,(%eax)
f0107034:	8b 00                	mov    (%eax),%eax
f0107036:	85 c0                	test   %eax,%eax
f0107038:	74 27                	je     f0107061 <initialize_paging+0x18e>
f010703a:	8b 0d d8 bd 2b f0    	mov    0xf02bbdd8,%ecx
f0107040:	8b 1d 10 be 2b f0    	mov    0xf02bbe10,%ebx
f0107046:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107049:	89 d0                	mov    %edx,%eax
f010704b:	01 c0                	add    %eax,%eax
f010704d:	01 d0                	add    %edx,%eax
f010704f:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0107056:	01 f0                	add    %esi,%eax
f0107058:	01 d0                	add    %edx,%eax
f010705a:	01 d8                	add    %ebx,%eax
f010705c:	89 41 04             	mov    %eax,0x4(%ecx)
f010705f:	eb 21                	jmp    f0107082 <initialize_paging+0x1af>
f0107061:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107067:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010706a:	89 d0                	mov    %edx,%eax
f010706c:	01 c0                	add    %eax,%eax
f010706e:	01 d0                	add    %edx,%eax
f0107070:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107077:	01 d8                	add    %ebx,%eax
f0107079:	01 d0                	add    %edx,%eax
f010707b:	01 c8                	add    %ecx,%eax
f010707d:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f0107082:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107088:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010708b:	89 d0                	mov    %edx,%eax
f010708d:	01 c0                	add    %eax,%eax
f010708f:	01 d0                	add    %edx,%eax
f0107091:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107098:	01 d8                	add    %ebx,%eax
f010709a:	01 d0                	add    %edx,%eax
f010709c:	01 c8                	add    %ecx,%eax
f010709e:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f01070a3:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01070a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070ac:	89 d0                	mov    %edx,%eax
f01070ae:	01 c0                	add    %eax,%eax
f01070b0:	01 d0                	add    %edx,%eax
f01070b2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01070b9:	01 d8                	add    %ebx,%eax
f01070bb:	01 d0                	add    %edx,%eax
f01070bd:	01 c8                	add    %ecx,%eax
f01070bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01070c6:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01070cb:	40                   	inc    %eax
f01070cc:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01070d1:	ff 45 f4             	incl   -0xc(%ebp)
f01070d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01070d7:	85 c0                	test   %eax,%eax
f01070d9:	79 05                	jns    f01070e0 <initialize_paging+0x20d>
f01070db:	05 ff 0f 00 00       	add    $0xfff,%eax
f01070e0:	c1 f8 0c             	sar    $0xc,%eax
f01070e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01070e6:	0f 8f c8 fe ff ff    	jg     f0106fb4 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01070ec:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01070f3:	eb 25                	jmp    f010711a <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f01070f5:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01070fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070fe:	89 d0                	mov    %edx,%eax
f0107100:	01 c0                	add    %eax,%eax
f0107102:	01 d0                	add    %edx,%eax
f0107104:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010710b:	01 d8                	add    %ebx,%eax
f010710d:	01 d0                	add    %edx,%eax
f010710f:	01 c8                	add    %ecx,%eax
f0107111:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0107117:	ff 45 f4             	incl   -0xc(%ebp)
f010711a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0107121:	7e d2                	jle    f01070f5 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0107123:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010712a:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f010712f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107132:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0107139:	77 14                	ja     f010714f <initialize_paging+0x27c>
f010713b:	ff 75 e0             	pushl  -0x20(%ebp)
f010713e:	68 0c 29 13 f0       	push   $0xf013290c
f0107143:	6a 64                	push   $0x64
f0107145:	68 ef 28 13 f0       	push   $0xf01328ef
f010714a:	e8 61 90 ff ff       	call   f01001b0 <_panic>
f010714f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107152:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0107158:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010715b:	01 d0                	add    %edx,%eax
f010715d:	48                   	dec    %eax
f010715e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107161:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107164:	ba 00 00 00 00       	mov    $0x0,%edx
f0107169:	f7 75 e4             	divl   -0x1c(%ebp)
f010716c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010716f:	29 d0                	sub    %edx,%eax
f0107171:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107174:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010717b:	eb 25                	jmp    f01071a2 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f010717d:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107183:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107186:	89 d0                	mov    %edx,%eax
f0107188:	01 c0                	add    %eax,%eax
f010718a:	01 d0                	add    %edx,%eax
f010718c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107193:	01 d8                	add    %ebx,%eax
f0107195:	01 d0                	add    %edx,%eax
f0107197:	01 c8                	add    %ecx,%eax
f0107199:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010719f:	ff 45 f4             	incl   -0xc(%ebp)
f01071a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071a5:	85 c0                	test   %eax,%eax
f01071a7:	79 05                	jns    f01071ae <initialize_paging+0x2db>
f01071a9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071ae:	c1 f8 0c             	sar    $0xc,%eax
f01071b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01071b4:	7f c7                	jg     f010717d <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01071b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071b9:	85 c0                	test   %eax,%eax
f01071bb:	79 05                	jns    f01071c2 <initialize_paging+0x2ef>
f01071bd:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071c2:	c1 f8 0c             	sar    $0xc,%eax
f01071c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01071c8:	e9 20 01 00 00       	jmp    f01072ed <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f01071cd:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01071d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071d6:	89 d0                	mov    %edx,%eax
f01071d8:	01 c0                	add    %eax,%eax
f01071da:	01 d0                	add    %edx,%eax
f01071dc:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071e3:	01 d8                	add    %ebx,%eax
f01071e5:	01 d0                	add    %edx,%eax
f01071e7:	01 c8                	add    %ecx,%eax
f01071e9:	83 ec 0c             	sub    $0xc,%esp
f01071ec:	50                   	push   %eax
f01071ed:	e8 18 01 00 00       	call   f010730a <initialize_frame_info>
f01071f2:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01071f5:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01071fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071fe:	89 d0                	mov    %edx,%eax
f0107200:	01 c0                	add    %eax,%eax
f0107202:	01 d0                	add    %edx,%eax
f0107204:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010720b:	01 d8                	add    %ebx,%eax
f010720d:	01 d0                	add    %edx,%eax
f010720f:	01 c8                	add    %ecx,%eax
f0107211:	85 c0                	test   %eax,%eax
f0107213:	75 14                	jne    f0107229 <initialize_paging+0x356>
f0107215:	83 ec 04             	sub    $0x4,%esp
f0107218:	68 cc 28 13 f0       	push   $0xf01328cc
f010721d:	6a 70                	push   $0x70
f010721f:	68 ef 28 13 f0       	push   $0xf01328ef
f0107224:	e8 87 8f ff ff       	call   f01001b0 <_panic>
f0107229:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f010722f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107232:	89 d0                	mov    %edx,%eax
f0107234:	01 c0                	add    %eax,%eax
f0107236:	01 d0                	add    %edx,%eax
f0107238:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010723f:	01 d8                	add    %ebx,%eax
f0107241:	01 d0                	add    %edx,%eax
f0107243:	01 c8                	add    %ecx,%eax
f0107245:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f010724b:	89 10                	mov    %edx,(%eax)
f010724d:	8b 00                	mov    (%eax),%eax
f010724f:	85 c0                	test   %eax,%eax
f0107251:	74 27                	je     f010727a <initialize_paging+0x3a7>
f0107253:	8b 0d d8 bd 2b f0    	mov    0xf02bbdd8,%ecx
f0107259:	8b 1d 10 be 2b f0    	mov    0xf02bbe10,%ebx
f010725f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107262:	89 d0                	mov    %edx,%eax
f0107264:	01 c0                	add    %eax,%eax
f0107266:	01 d0                	add    %edx,%eax
f0107268:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010726f:	01 f0                	add    %esi,%eax
f0107271:	01 d0                	add    %edx,%eax
f0107273:	01 d8                	add    %ebx,%eax
f0107275:	89 41 04             	mov    %eax,0x4(%ecx)
f0107278:	eb 21                	jmp    f010729b <initialize_paging+0x3c8>
f010727a:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107283:	89 d0                	mov    %edx,%eax
f0107285:	01 c0                	add    %eax,%eax
f0107287:	01 d0                	add    %edx,%eax
f0107289:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107290:	01 d8                	add    %ebx,%eax
f0107292:	01 d0                	add    %edx,%eax
f0107294:	01 c8                	add    %ecx,%eax
f0107296:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f010729b:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01072a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072a4:	89 d0                	mov    %edx,%eax
f01072a6:	01 c0                	add    %eax,%eax
f01072a8:	01 d0                	add    %edx,%eax
f01072aa:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072b1:	01 d8                	add    %ebx,%eax
f01072b3:	01 d0                	add    %edx,%eax
f01072b5:	01 c8                	add    %ecx,%eax
f01072b7:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f01072bc:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01072c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072c5:	89 d0                	mov    %edx,%eax
f01072c7:	01 c0                	add    %eax,%eax
f01072c9:	01 d0                	add    %edx,%eax
f01072cb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072d2:	01 d8                	add    %ebx,%eax
f01072d4:	01 d0                	add    %edx,%eax
f01072d6:	01 c8                	add    %ecx,%eax
f01072d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01072df:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01072e4:	40                   	inc    %eax
f01072e5:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01072ea:	ff 45 f4             	incl   -0xc(%ebp)
f01072ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072f0:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01072f5:	39 c2                	cmp    %eax,%edx
f01072f7:	0f 82 d0 fe ff ff    	jb     f01071cd <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01072fd:	e8 f2 c5 ff ff       	call   f01038f4 <initialize_disk_page_file>
}
f0107302:	90                   	nop
f0107303:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0107306:	5b                   	pop    %ebx
f0107307:	5e                   	pop    %esi
f0107308:	5d                   	pop    %ebp
f0107309:	c3                   	ret    

f010730a <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010730a:	55                   	push   %ebp
f010730b:	89 e5                	mov    %esp,%ebp
f010730d:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0107310:	83 ec 04             	sub    $0x4,%esp
f0107313:	6a 1c                	push   $0x1c
f0107315:	6a 00                	push   $0x0
f0107317:	ff 75 08             	pushl  0x8(%ebp)
f010731a:	e8 6b 7f 02 00       	call   f012f28a <memset>
f010731f:	83 c4 10             	add    $0x10,%esp
}
f0107322:	90                   	nop
f0107323:	c9                   	leave  
f0107324:	c3                   	ret    

f0107325 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0107325:	55                   	push   %ebp
f0107326:	89 e5                	mov    %esp,%ebp
f0107328:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f010732b:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f0107331:	8b 45 08             	mov    0x8(%ebp),%eax
f0107334:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0107336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010733d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107340:	8b 00                	mov    (%eax),%eax
f0107342:	85 c0                	test   %eax,%eax
f0107344:	75 17                	jne    f010735d <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0107346:	83 ec 04             	sub    $0x4,%esp
f0107349:	68 40 29 13 f0       	push   $0xf0132940
f010734e:	68 98 00 00 00       	push   $0x98
f0107353:	68 ef 28 13 f0       	push   $0xf01328ef
f0107358:	e8 53 8e ff ff       	call   f01001b0 <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010735d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107360:	8b 00                	mov    (%eax),%eax
f0107362:	85 c0                	test   %eax,%eax
f0107364:	75 17                	jne    f010737d <allocate_frame+0x58>
f0107366:	83 ec 04             	sub    $0x4,%esp
f0107369:	68 8d 29 13 f0       	push   $0xf013298d
f010736e:	68 9e 00 00 00       	push   $0x9e
f0107373:	68 ef 28 13 f0       	push   $0xf01328ef
f0107378:	e8 33 8e ff ff       	call   f01001b0 <_panic>
f010737d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107380:	8b 00                	mov    (%eax),%eax
f0107382:	8b 00                	mov    (%eax),%eax
f0107384:	85 c0                	test   %eax,%eax
f0107386:	74 14                	je     f010739c <allocate_frame+0x77>
f0107388:	8b 45 08             	mov    0x8(%ebp),%eax
f010738b:	8b 00                	mov    (%eax),%eax
f010738d:	8b 00                	mov    (%eax),%eax
f010738f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107392:	8b 12                	mov    (%edx),%edx
f0107394:	8b 52 04             	mov    0x4(%edx),%edx
f0107397:	89 50 04             	mov    %edx,0x4(%eax)
f010739a:	eb 0d                	jmp    f01073a9 <allocate_frame+0x84>
f010739c:	8b 45 08             	mov    0x8(%ebp),%eax
f010739f:	8b 00                	mov    (%eax),%eax
f01073a1:	8b 40 04             	mov    0x4(%eax),%eax
f01073a4:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f01073a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01073ac:	8b 00                	mov    (%eax),%eax
f01073ae:	8b 40 04             	mov    0x4(%eax),%eax
f01073b1:	85 c0                	test   %eax,%eax
f01073b3:	74 13                	je     f01073c8 <allocate_frame+0xa3>
f01073b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01073b8:	8b 00                	mov    (%eax),%eax
f01073ba:	8b 40 04             	mov    0x4(%eax),%eax
f01073bd:	8b 55 08             	mov    0x8(%ebp),%edx
f01073c0:	8b 12                	mov    (%edx),%edx
f01073c2:	8b 12                	mov    (%edx),%edx
f01073c4:	89 10                	mov    %edx,(%eax)
f01073c6:	eb 0c                	jmp    f01073d4 <allocate_frame+0xaf>
f01073c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01073cb:	8b 00                	mov    (%eax),%eax
f01073cd:	8b 00                	mov    (%eax),%eax
f01073cf:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f01073d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01073d7:	8b 00                	mov    (%eax),%eax
f01073d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01073df:	8b 45 08             	mov    0x8(%ebp),%eax
f01073e2:	8b 00                	mov    (%eax),%eax
f01073e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01073eb:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01073f0:	48                   	dec    %eax
f01073f1:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01073f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01073f9:	8b 00                	mov    (%eax),%eax
f01073fb:	8a 40 14             	mov    0x14(%eax),%al
f01073fe:	84 c0                	test   %al,%al
f0107400:	74 23                	je     f0107425 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0107402:	8b 45 08             	mov    0x8(%ebp),%eax
f0107405:	8b 00                	mov    (%eax),%eax
f0107407:	8b 50 0c             	mov    0xc(%eax),%edx
f010740a:	8b 45 08             	mov    0x8(%ebp),%eax
f010740d:	8b 00                	mov    (%eax),%eax
f010740f:	8b 40 10             	mov    0x10(%eax),%eax
f0107412:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0107418:	83 ec 08             	sub    $0x8,%esp
f010741b:	52                   	push   %edx
f010741c:	50                   	push   %eax
f010741d:	e8 a6 0d 00 00       	call   f01081c8 <pt_clear_page_table_entry>
f0107422:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0107425:	8b 45 08             	mov    0x8(%ebp),%eax
f0107428:	8b 00                	mov    (%eax),%eax
f010742a:	83 ec 0c             	sub    $0xc,%esp
f010742d:	50                   	push   %eax
f010742e:	e8 d7 fe ff ff       	call   f010730a <initialize_frame_info>
f0107433:	83 c4 10             	add    $0x10,%esp
	return 0;
f0107436:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0107443:	83 ec 0c             	sub    $0xc,%esp
f0107446:	ff 75 08             	pushl  0x8(%ebp)
f0107449:	e8 bc fe ff ff       	call   f010730a <initialize_frame_info>
f010744e:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0107451:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0107455:	75 17                	jne    f010746e <free_frame+0x31>
f0107457:	83 ec 04             	sub    $0x4,%esp
f010745a:	68 cc 28 13 f0       	push   $0xf01328cc
f010745f:	68 bb 00 00 00       	push   $0xbb
f0107464:	68 ef 28 13 f0       	push   $0xf01328ef
f0107469:	e8 42 8d ff ff       	call   f01001b0 <_panic>
f010746e:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f0107474:	8b 45 08             	mov    0x8(%ebp),%eax
f0107477:	89 10                	mov    %edx,(%eax)
f0107479:	8b 45 08             	mov    0x8(%ebp),%eax
f010747c:	8b 00                	mov    (%eax),%eax
f010747e:	85 c0                	test   %eax,%eax
f0107480:	74 0d                	je     f010748f <free_frame+0x52>
f0107482:	a1 d8 bd 2b f0       	mov    0xf02bbdd8,%eax
f0107487:	8b 55 08             	mov    0x8(%ebp),%edx
f010748a:	89 50 04             	mov    %edx,0x4(%eax)
f010748d:	eb 08                	jmp    f0107497 <free_frame+0x5a>
f010748f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107492:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f0107497:	8b 45 08             	mov    0x8(%ebp),%eax
f010749a:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f010749f:	8b 45 08             	mov    0x8(%ebp),%eax
f01074a2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01074a9:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01074ae:	40                   	inc    %eax
f01074af:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f01074b4:	90                   	nop
f01074b5:	c9                   	leave  
f01074b6:	c3                   	ret    

f01074b7 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01074b7:	55                   	push   %ebp
f01074b8:	89 e5                	mov    %esp,%ebp
f01074ba:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01074bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c0:	8b 40 08             	mov    0x8(%eax),%eax
f01074c3:	48                   	dec    %eax
f01074c4:	8b 55 08             	mov    0x8(%ebp),%edx
f01074c7:	66 89 42 08          	mov    %ax,0x8(%edx)
f01074cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ce:	8b 40 08             	mov    0x8(%eax),%eax
f01074d1:	66 85 c0             	test   %ax,%ax
f01074d4:	75 0e                	jne    f01074e4 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01074d6:	83 ec 0c             	sub    $0xc,%esp
f01074d9:	ff 75 08             	pushl  0x8(%ebp)
f01074dc:	e8 5c ff ff ff       	call   f010743d <free_frame>
f01074e1:	83 c4 10             	add    $0x10,%esp
}
f01074e4:	90                   	nop
f01074e5:	c9                   	leave  
f01074e6:	c3                   	ret    

f01074e7 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01074e7:	55                   	push   %ebp
f01074e8:	89 e5                	mov    %esp,%ebp
f01074ea:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01074ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074f0:	c1 e8 16             	shr    $0x16,%eax
f01074f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fd:	01 d0                	add    %edx,%eax
f01074ff:	8b 00                	mov    (%eax),%eax
f0107501:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	83 e0 01             	and    $0x1,%eax
f010750a:	85 c0                	test   %eax,%eax
f010750c:	74 4e                	je     f010755c <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010750e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107511:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107516:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107519:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010751c:	c1 e8 0c             	shr    $0xc,%eax
f010751f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107522:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0107527:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010752a:	72 17                	jb     f0107543 <get_page_table+0x5c>
f010752c:	ff 75 f0             	pushl  -0x10(%ebp)
f010752f:	68 ac 29 13 f0       	push   $0xf01329ac
f0107534:	68 e2 00 00 00       	push   $0xe2
f0107539:	68 ef 28 13 f0       	push   $0xf01328ef
f010753e:	e8 6d 8c ff ff       	call   f01001b0 <_panic>
f0107543:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107546:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010754b:	89 c2                	mov    %eax,%edx
f010754d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107550:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0107552:	b8 00 00 00 00       	mov    $0x0,%eax
f0107557:	e9 8f 00 00 00       	jmp    f01075eb <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f010755c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107560:	74 7b                	je     f01075dd <get_page_table+0xf6>
f0107562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107565:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0107568:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010756b:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f010756e:	83 ec 0c             	sub    $0xc,%esp
f0107571:	6a 00                	push   $0x0
f0107573:	e8 0c 50 00 00       	call   f010c584 <fault_handler>
f0107578:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010757b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010757e:	c1 e8 16             	shr    $0x16,%eax
f0107581:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107588:	8b 45 08             	mov    0x8(%ebp),%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	8b 00                	mov    (%eax),%eax
f010758f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107592:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107595:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010759a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010759d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075a0:	c1 e8 0c             	shr    $0xc,%eax
f01075a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01075a6:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01075ab:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01075ae:	72 17                	jb     f01075c7 <get_page_table+0xe0>
f01075b0:	ff 75 e8             	pushl  -0x18(%ebp)
f01075b3:	68 ac 29 13 f0       	push   $0xf01329ac
f01075b8:	68 fa 00 00 00       	push   $0xfa
f01075bd:	68 ef 28 13 f0       	push   $0xf01328ef
f01075c2:	e8 e9 8b ff ff       	call   f01001b0 <_panic>
f01075c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075ca:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01075cf:	89 c2                	mov    %eax,%edx
f01075d1:	8b 45 10             	mov    0x10(%ebp),%eax
f01075d4:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01075d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01075db:	eb 0e                	jmp    f01075eb <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f01075dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01075e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f01075e6:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f01075eb:	c9                   	leave  
f01075ec:	c3                   	ret    

f01075ed <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f01075ed:	55                   	push   %ebp
f01075ee:	89 e5                	mov    %esp,%ebp
f01075f0:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f01075f3:	83 ec 04             	sub    $0x4,%esp
f01075f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01075f9:	50                   	push   %eax
f01075fa:	ff 75 0c             	pushl  0xc(%ebp)
f01075fd:	ff 75 08             	pushl  0x8(%ebp)
f0107600:	e8 08 00 00 00       	call   f010760d <__static_cpt>
f0107605:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0107608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010760b:	c9                   	leave  
f010760c:	c3                   	ret    

f010760d <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010760d:	55                   	push   %ebp
f010760e:	89 e5                	mov    %esp,%ebp
f0107610:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0107613:	83 ec 0c             	sub    $0xc,%esp
f0107616:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0107619:	50                   	push   %eax
f010761a:	e8 06 fd ff ff       	call   f0107325 <allocate_frame>
f010761f:	83 c4 10             	add    $0x10,%esp
f0107622:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0107625:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107628:	83 ec 0c             	sub    $0xc,%esp
f010762b:	50                   	push   %eax
f010762c:	e8 28 f8 ff ff       	call   f0106e59 <to_physical_address>
f0107631:	83 c4 10             	add    $0x10,%esp
f0107634:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0107637:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010763a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010763d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107640:	c1 e8 0c             	shr    $0xc,%eax
f0107643:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107646:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010764b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010764e:	72 17                	jb     f0107667 <__static_cpt+0x5a>
f0107650:	ff 75 ec             	pushl  -0x14(%ebp)
f0107653:	68 ac 29 13 f0       	push   $0xf01329ac
f0107658:	68 2f 01 00 00       	push   $0x12f
f010765d:	68 ef 28 13 f0       	push   $0xf01328ef
f0107662:	e8 49 8b ff ff       	call   f01001b0 <_panic>
f0107667:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010766a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010766f:	89 c2                	mov    %eax,%edx
f0107671:	8b 45 10             	mov    0x10(%ebp),%eax
f0107674:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0107676:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107679:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f010767f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107682:	c1 e8 16             	shr    $0x16,%eax
f0107685:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010768c:	8b 45 08             	mov    0x8(%ebp),%eax
f010768f:	01 d0                	add    %edx,%eax
f0107691:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107694:	83 ca 07             	or     $0x7,%edx
f0107697:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0107699:	8b 45 10             	mov    0x10(%ebp),%eax
f010769c:	8b 00                	mov    (%eax),%eax
f010769e:	83 ec 04             	sub    $0x4,%esp
f01076a1:	68 00 10 00 00       	push   $0x1000
f01076a6:	6a 00                	push   $0x0
f01076a8:	50                   	push   %eax
f01076a9:	e8 dc 7b 02 00       	call   f012f28a <memset>
f01076ae:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01076b1:	0f 20 d8             	mov    %cr3,%eax
f01076b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01076b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01076ba:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01076bd:	90                   	nop
f01076be:	c9                   	leave  
f01076bf:	c3                   	ret    

f01076c0 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01076c0:	55                   	push   %ebp
f01076c1:	89 e5                	mov    %esp,%ebp
f01076c3:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01076c6:	ff 75 0c             	pushl  0xc(%ebp)
f01076c9:	e8 8b f7 ff ff       	call   f0106e59 <to_physical_address>
f01076ce:	83 c4 04             	add    $0x4,%esp
f01076d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01076d4:	83 ec 04             	sub    $0x4,%esp
f01076d7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076da:	50                   	push   %eax
f01076db:	ff 75 10             	pushl  0x10(%ebp)
f01076de:	ff 75 08             	pushl  0x8(%ebp)
f01076e1:	e8 01 fe ff ff       	call   f01074e7 <get_page_table>
f01076e6:	83 c4 10             	add    $0x10,%esp
f01076e9:	83 f8 01             	cmp    $0x1,%eax
f01076ec:	75 15                	jne    f0107703 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f01076ee:	83 ec 04             	sub    $0x4,%esp
f01076f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076f4:	50                   	push   %eax
f01076f5:	ff 75 10             	pushl  0x10(%ebp)
f01076f8:	ff 75 08             	pushl  0x8(%ebp)
f01076fb:	e8 0d ff ff ff       	call   f010760d <__static_cpt>
f0107700:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0107703:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107706:	8b 55 10             	mov    0x10(%ebp),%edx
f0107709:	c1 ea 0c             	shr    $0xc,%edx
f010770c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107712:	c1 e2 02             	shl    $0x2,%edx
f0107715:	01 d0                	add    %edx,%eax
f0107717:	8b 00                	mov    (%eax),%eax
f0107719:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f010771c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010771f:	83 e0 01             	and    $0x1,%eax
f0107722:	85 c0                	test   %eax,%eax
f0107724:	74 25                	je     f010774b <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0107726:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107729:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010772e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107731:	75 07                	jne    f010773a <map_frame+0x7a>
			return 0;
f0107733:	b8 00 00 00 00       	mov    $0x0,%eax
f0107738:	eb 43                	jmp    f010777d <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f010773a:	83 ec 08             	sub    $0x8,%esp
f010773d:	ff 75 10             	pushl  0x10(%ebp)
f0107740:	ff 75 08             	pushl  0x8(%ebp)
f0107743:	e8 a7 00 00 00       	call   f01077ef <unmap_frame>
f0107748:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f010774b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010774e:	8b 40 08             	mov    0x8(%eax),%eax
f0107751:	40                   	inc    %eax
f0107752:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107755:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0107759:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010775c:	8b 55 10             	mov    0x10(%ebp),%edx
f010775f:	c1 ea 0c             	shr    $0xc,%edx
f0107762:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107768:	c1 e2 02             	shl    $0x2,%edx
f010776b:	01 c2                	add    %eax,%edx
f010776d:	8b 45 14             	mov    0x14(%ebp),%eax
f0107770:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107773:	83 c8 01             	or     $0x1,%eax
f0107776:	89 02                	mov    %eax,(%edx)

	return 0;
f0107778:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010777d:	c9                   	leave  
f010777e:	c3                   	ret    

f010777f <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f010777f:	55                   	push   %ebp
f0107780:	89 e5                	mov    %esp,%ebp
f0107782:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0107785:	83 ec 04             	sub    $0x4,%esp
f0107788:	ff 75 10             	pushl  0x10(%ebp)
f010778b:	ff 75 0c             	pushl  0xc(%ebp)
f010778e:	ff 75 08             	pushl  0x8(%ebp)
f0107791:	e8 51 fd ff ff       	call   f01074e7 <get_page_table>
f0107796:	83 c4 10             	add    $0x10,%esp
f0107799:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f010779c:	8b 45 10             	mov    0x10(%ebp),%eax
f010779f:	8b 00                	mov    (%eax),%eax
f01077a1:	85 c0                	test   %eax,%eax
f01077a3:	74 43                	je     f01077e8 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f01077a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01077a8:	c1 e8 0c             	shr    $0xc,%eax
f01077ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f01077b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01077b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01077b6:	8b 00                	mov    (%eax),%eax
f01077b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01077bb:	c1 e2 02             	shl    $0x2,%edx
f01077be:	01 d0                	add    %edx,%eax
f01077c0:	8b 00                	mov    (%eax),%eax
f01077c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f01077c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01077c9:	74 16                	je     f01077e1 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f01077cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01077d3:	83 ec 0c             	sub    $0xc,%esp
f01077d6:	50                   	push   %eax
f01077d7:	e8 90 f6 ff ff       	call   f0106e6c <to_frame_info>
f01077dc:	83 c4 10             	add    $0x10,%esp
f01077df:	eb 0c                	jmp    f01077ed <get_frame_info+0x6e>
		}
		return 0;
f01077e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01077e6:	eb 05                	jmp    f01077ed <get_frame_info+0x6e>
	}
	return 0;
f01077e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01077ed:	c9                   	leave  
f01077ee:	c3                   	ret    

f01077ef <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f01077ef:	55                   	push   %ebp
f01077f0:	89 e5                	mov    %esp,%ebp
f01077f2:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f01077f5:	83 ec 04             	sub    $0x4,%esp
f01077f8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01077fb:	50                   	push   %eax
f01077fc:	ff 75 0c             	pushl  0xc(%ebp)
f01077ff:	ff 75 08             	pushl  0x8(%ebp)
f0107802:	e8 78 ff ff ff       	call   f010777f <get_frame_info>
f0107807:	83 c4 10             	add    $0x10,%esp
f010780a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010780d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107811:	74 60                	je     f0107873 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0107813:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107816:	8a 40 14             	mov    0x14(%eax),%al
f0107819:	84 c0                	test   %al,%al
f010781b:	74 1c                	je     f0107839 <unmap_frame+0x4a>
f010781d:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0107824:	77 13                	ja     f0107839 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0107826:	83 ec 08             	sub    $0x8,%esp
f0107829:	ff 75 0c             	pushl  0xc(%ebp)
f010782c:	68 dc 29 13 f0       	push   $0xf01329dc
f0107831:	e8 fb 95 ff ff       	call   f0100e31 <cprintf>
f0107836:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0107839:	83 ec 0c             	sub    $0xc,%esp
f010783c:	ff 75 f4             	pushl  -0xc(%ebp)
f010783f:	e8 73 fc ff ff       	call   f01074b7 <decrement_references>
f0107844:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0107847:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010784a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010784d:	c1 ea 0c             	shr    $0xc,%edx
f0107850:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107856:	c1 e2 02             	shl    $0x2,%edx
f0107859:	01 d0                	add    %edx,%eax
f010785b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107861:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107864:	83 ec 08             	sub    $0x8,%esp
f0107867:	50                   	push   %eax
f0107868:	ff 75 08             	pushl  0x8(%ebp)
f010786b:	e8 4e f6 ff ff       	call   f0106ebe <tlb_invalidate>
f0107870:	83 c4 10             	add    $0x10,%esp
	}
}
f0107873:	90                   	nop
f0107874:	c9                   	leave  
f0107875:	c3                   	ret    

f0107876 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0107876:	55                   	push   %ebp
f0107877:	89 e5                	mov    %esp,%ebp
f0107879:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f010787c:	ff 75 0c             	pushl  0xc(%ebp)
f010787f:	e8 d5 f5 ff ff       	call   f0106e59 <to_physical_address>
f0107884:	83 c4 04             	add    $0x4,%esp
f0107887:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010788a:	8b 45 10             	mov    0x10(%ebp),%eax
f010788d:	c1 e8 16             	shr    $0x16,%eax
f0107890:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107897:	8b 45 08             	mov    0x8(%ebp),%eax
f010789a:	01 d0                	add    %edx,%eax
f010789c:	8b 00                	mov    (%eax),%eax
f010789e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01078a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01078ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078af:	c1 e8 0c             	shr    $0xc,%eax
f01078b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01078b5:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01078ba:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01078bd:	72 17                	jb     f01078d6 <loadtime_map_frame+0x60>
f01078bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01078c2:	68 ac 29 13 f0       	push   $0xf01329ac
f01078c7:	68 e5 01 00 00       	push   $0x1e5
f01078cc:	68 ef 28 13 f0       	push   $0xf01328ef
f01078d1:	e8 da 88 ff ff       	call   f01001b0 <_panic>
f01078d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078d9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01078de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f01078e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078e5:	75 15                	jne    f01078fc <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f01078e7:	83 ec 04             	sub    $0x4,%esp
f01078ea:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01078ed:	50                   	push   %eax
f01078ee:	ff 75 10             	pushl  0x10(%ebp)
f01078f1:	ff 75 08             	pushl  0x8(%ebp)
f01078f4:	e8 14 fd ff ff       	call   f010760d <__static_cpt>
f01078f9:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f01078fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078ff:	8b 40 08             	mov    0x8(%eax),%eax
f0107902:	40                   	inc    %eax
f0107903:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107906:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010790a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010790d:	8b 55 10             	mov    0x10(%ebp),%edx
f0107910:	c1 ea 0c             	shr    $0xc,%edx
f0107913:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107919:	c1 e2 02             	shl    $0x2,%edx
f010791c:	01 c2                	add    %eax,%edx
f010791e:	8b 45 14             	mov    0x14(%ebp),%eax
f0107921:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107924:	83 c8 01             	or     $0x1,%eax
f0107927:	89 02                	mov    %eax,(%edx)

	return 0;
f0107929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010792e:	c9                   	leave  
f010792f:	c3                   	ret    

f0107930 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107930:	55                   	push   %ebp
f0107931:	89 e5                	mov    %esp,%ebp
f0107933:	57                   	push   %edi
f0107934:	56                   	push   %esi
f0107935:	53                   	push   %ebx
f0107936:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0107939:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107940:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0107947:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f010794e:	a1 d8 bd 2b f0       	mov    0xf02bbdd8,%eax
f0107953:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107956:	eb 1a                	jmp    f0107972 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107958:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010795b:	8a 40 14             	mov    0x14(%eax),%al
f010795e:	84 c0                	test   %al,%al
f0107960:	74 05                	je     f0107967 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107962:	ff 45 e8             	incl   -0x18(%ebp)
f0107965:	eb 03                	jmp    f010796a <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107967:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f010796a:	a1 e0 bd 2b f0       	mov    0xf02bbde0,%eax
f010796f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107972:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107976:	74 07                	je     f010797f <calculate_available_frames+0x4f>
f0107978:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010797b:	8b 00                	mov    (%eax),%eax
f010797d:	eb 05                	jmp    f0107984 <calculate_available_frames+0x54>
f010797f:	b8 00 00 00 00       	mov    $0x0,%eax
f0107984:	a3 e0 bd 2b f0       	mov    %eax,0xf02bbde0
f0107989:	a1 e0 bd 2b f0       	mov    0xf02bbde0,%eax
f010798e:	85 c0                	test   %eax,%eax
f0107990:	75 c6                	jne    f0107958 <calculate_available_frames+0x28>
f0107992:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107996:	75 c0                	jne    f0107958 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107998:	a1 40 3a 25 f0       	mov    0xf0253a40,%eax
f010799d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079a0:	eb 0b                	jmp    f01079ad <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f01079a2:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f01079a5:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f01079aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079b1:	74 07                	je     f01079ba <calculate_available_frames+0x8a>
f01079b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b6:	8b 00                	mov    (%eax),%eax
f01079b8:	eb 05                	jmp    f01079bf <calculate_available_frames+0x8f>
f01079ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01079bf:	a3 48 3a 25 f0       	mov    %eax,0xf0253a48
f01079c4:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f01079c9:	85 c0                	test   %eax,%eax
f01079cb:	75 d5                	jne    f01079a2 <calculate_available_frames+0x72>
f01079cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079d1:	75 cf                	jne    f01079a2 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01079d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01079d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01079dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01079df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01079e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01079e8:	89 c3                	mov    %eax,%ebx
f01079ea:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01079ed:	ba 03 00 00 00       	mov    $0x3,%edx
f01079f2:	89 df                	mov    %ebx,%edi
f01079f4:	89 c6                	mov    %eax,%esi
f01079f6:	89 d1                	mov    %edx,%ecx
f01079f8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01079fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01079fd:	83 c4 20             	add    $0x20,%esp
f0107a00:	5b                   	pop    %ebx
f0107a01:	5e                   	pop    %esi
f0107a02:	5f                   	pop    %edi
f0107a03:	5d                   	pop    %ebp
f0107a04:	c2 04 00             	ret    $0x4

f0107a07 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107a07:	55                   	push   %ebp
f0107a08:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a0d:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f0107a13:	29 d0                	sub    %edx,%eax
f0107a15:	c1 f8 02             	sar    $0x2,%eax
f0107a18:	89 c2                	mov    %eax,%edx
f0107a1a:	89 d0                	mov    %edx,%eax
f0107a1c:	c1 e0 03             	shl    $0x3,%eax
f0107a1f:	01 d0                	add    %edx,%eax
f0107a21:	c1 e0 03             	shl    $0x3,%eax
f0107a24:	01 d0                	add    %edx,%eax
f0107a26:	c1 e0 03             	shl    $0x3,%eax
f0107a29:	01 d0                	add    %edx,%eax
f0107a2b:	c1 e0 03             	shl    $0x3,%eax
f0107a2e:	01 d0                	add    %edx,%eax
f0107a30:	89 c1                	mov    %eax,%ecx
f0107a32:	c1 e1 0f             	shl    $0xf,%ecx
f0107a35:	01 c8                	add    %ecx,%eax
f0107a37:	c1 e0 03             	shl    $0x3,%eax
f0107a3a:	01 d0                	add    %edx,%eax
f0107a3c:	f7 d8                	neg    %eax
}
f0107a3e:	5d                   	pop    %ebp
f0107a3f:	c3                   	ret    

f0107a40 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107a40:	55                   	push   %ebp
f0107a41:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107a43:	ff 75 08             	pushl  0x8(%ebp)
f0107a46:	e8 bc ff ff ff       	call   f0107a07 <to_frame_number>
f0107a4b:	83 c4 04             	add    $0x4,%esp
f0107a4e:	c1 e0 0c             	shl    $0xc,%eax
}
f0107a51:	c9                   	leave  
f0107a52:	c3                   	ret    

f0107a53 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107a53:	55                   	push   %ebp
f0107a54:	89 e5                	mov    %esp,%ebp
f0107a56:	53                   	push   %ebx
f0107a57:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a5d:	c1 e8 0c             	shr    $0xc,%eax
f0107a60:	89 c2                	mov    %eax,%edx
f0107a62:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0107a67:	39 c2                	cmp    %eax,%edx
f0107a69:	72 14                	jb     f0107a7f <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0107a6b:	83 ec 04             	sub    $0x4,%esp
f0107a6e:	68 00 2a 13 f0       	push   $0xf0132a00
f0107a73:	6a 55                	push   $0x55
f0107a75:	68 25 2a 13 f0       	push   $0xf0132a25
f0107a7a:	e8 31 87 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0107a7f:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a88:	c1 e8 0c             	shr    $0xc,%eax
f0107a8b:	89 c2                	mov    %eax,%edx
f0107a8d:	89 d0                	mov    %edx,%eax
f0107a8f:	01 c0                	add    %eax,%eax
f0107a91:	01 d0                	add    %edx,%eax
f0107a93:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107a9a:	01 d8                	add    %ebx,%eax
f0107a9c:	01 d0                	add    %edx,%eax
f0107a9e:	01 c8                	add    %ecx,%eax
}
f0107aa0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107aa3:	c9                   	leave  
f0107aa4:	c3                   	ret    

f0107aa5 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107aa5:	55                   	push   %ebp
f0107aa6:	89 e5                	mov    %esp,%ebp
f0107aa8:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107aab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107ab2:	eb 5f                	jmp    f0107b13 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107ab4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ab7:	89 d0                	mov    %edx,%eax
f0107ab9:	01 c0                	add    %eax,%eax
f0107abb:	01 d0                	add    %edx,%eax
f0107abd:	01 c0                	add    %eax,%eax
f0107abf:	01 d0                	add    %edx,%eax
f0107ac1:	c1 e0 02             	shl    $0x2,%eax
f0107ac4:	01 d0                	add    %edx,%eax
f0107ac6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107acd:	01 d0                	add    %edx,%eax
f0107acf:	c1 e0 04             	shl    $0x4,%eax
f0107ad2:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107ad7:	83 ec 04             	sub    $0x4,%esp
f0107ada:	68 50 10 00 00       	push   $0x1050
f0107adf:	6a 00                	push   $0x0
f0107ae1:	50                   	push   %eax
f0107ae2:	e8 a3 77 02 00       	call   f012f28a <memset>
f0107ae7:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107aea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107aed:	89 d0                	mov    %edx,%eax
f0107aef:	01 c0                	add    %eax,%eax
f0107af1:	01 d0                	add    %edx,%eax
f0107af3:	01 c0                	add    %eax,%eax
f0107af5:	01 d0                	add    %edx,%eax
f0107af7:	c1 e0 02             	shl    $0x2,%eax
f0107afa:	01 d0                	add    %edx,%eax
f0107afc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b03:	01 d0                	add    %edx,%eax
f0107b05:	c1 e0 04             	shl    $0x4,%eax
f0107b08:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107b0d:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b10:	ff 45 f4             	incl   -0xc(%ebp)
f0107b13:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107b17:	7e 9b                	jle    f0107ab4 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107b19:	90                   	nop
f0107b1a:	c9                   	leave  
f0107b1b:	c3                   	ret    

f0107b1c <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107b1c:	55                   	push   %ebp
f0107b1d:	89 e5                	mov    %esp,%ebp
f0107b1f:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0107b22:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107b30:	eb 34                	jmp    f0107b66 <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0107b32:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b35:	89 d0                	mov    %edx,%eax
f0107b37:	01 c0                	add    %eax,%eax
f0107b39:	01 d0                	add    %edx,%eax
f0107b3b:	01 c0                	add    %eax,%eax
f0107b3d:	01 d0                	add    %edx,%eax
f0107b3f:	c1 e0 02             	shl    $0x2,%eax
f0107b42:	01 d0                	add    %edx,%eax
f0107b44:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b4b:	01 d0                	add    %edx,%eax
f0107b4d:	c1 e0 04             	shl    $0x4,%eax
f0107b50:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107b55:	8a 00                	mov    (%eax),%al
f0107b57:	84 c0                	test   %al,%al
f0107b59:	74 08                	je     f0107b63 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0107b5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107b61:	eb 09                	jmp    f0107b6c <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b63:	ff 45 f0             	incl   -0x10(%ebp)
f0107b66:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0107b6a:	7e c6                	jle    f0107b32 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107b6c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107b70:	75 0a                	jne    f0107b7c <allocate_share_object+0x60>
	{
		return E_NO_SHARE ;
f0107b72:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107b77:	e9 8b 00 00 00       	jmp    f0107c07 <allocate_share_object+0xeb>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107b7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b7f:	89 d0                	mov    %edx,%eax
f0107b81:	01 c0                	add    %eax,%eax
f0107b83:	01 d0                	add    %edx,%eax
f0107b85:	01 c0                	add    %eax,%eax
f0107b87:	01 d0                	add    %edx,%eax
f0107b89:	c1 e0 02             	shl    $0x2,%eax
f0107b8c:	01 d0                	add    %edx,%eax
f0107b8e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b95:	01 d0                	add    %edx,%eax
f0107b97:	c1 e0 04             	shl    $0x4,%eax
f0107b9a:	8d 90 80 3a 25 f0    	lea    -0xfdac580(%eax),%edx
f0107ba0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ba3:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107ba5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ba8:	89 d0                	mov    %edx,%eax
f0107baa:	01 c0                	add    %eax,%eax
f0107bac:	01 d0                	add    %edx,%eax
f0107bae:	01 c0                	add    %eax,%eax
f0107bb0:	01 d0                	add    %edx,%eax
f0107bb2:	c1 e0 02             	shl    $0x2,%eax
f0107bb5:	01 d0                	add    %edx,%eax
f0107bb7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107bbe:	01 d0                	add    %edx,%eax
f0107bc0:	c1 e0 04             	shl    $0x4,%eax
f0107bc3:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107bc8:	c6 00 00             	movb   $0x0,(%eax)
#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107bcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bce:	89 d0                	mov    %edx,%eax
f0107bd0:	01 c0                	add    %eax,%eax
f0107bd2:	01 d0                	add    %edx,%eax
f0107bd4:	01 c0                	add    %eax,%eax
f0107bd6:	01 d0                	add    %edx,%eax
f0107bd8:	c1 e0 02             	shl    $0x2,%eax
f0107bdb:	01 d0                	add    %edx,%eax
f0107bdd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107be4:	01 d0                	add    %edx,%eax
f0107be6:	c1 e0 04             	shl    $0x4,%eax
f0107be9:	83 c0 50             	add    $0x50,%eax
f0107bec:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107bf1:	83 ec 04             	sub    $0x4,%esp
f0107bf4:	68 00 10 00 00       	push   $0x1000
f0107bf9:	6a 00                	push   $0x0
f0107bfb:	50                   	push   %eax
f0107bfc:	e8 89 76 02 00       	call   f012f28a <memset>
f0107c01:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107c07:	c9                   	leave  
f0107c08:	c3                   	ret    

f0107c09 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107c09:	55                   	push   %ebp
f0107c0a:	89 e5                	mov    %esp,%ebp
f0107c0c:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107c0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107c16:	e9 95 00 00 00       	jmp    f0107cb0 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f0107c1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c1e:	89 d0                	mov    %edx,%eax
f0107c20:	01 c0                	add    %eax,%eax
f0107c22:	01 d0                	add    %edx,%eax
f0107c24:	01 c0                	add    %eax,%eax
f0107c26:	01 d0                	add    %edx,%eax
f0107c28:	c1 e0 02             	shl    $0x2,%eax
f0107c2b:	01 d0                	add    %edx,%eax
f0107c2d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c34:	01 d0                	add    %edx,%eax
f0107c36:	c1 e0 04             	shl    $0x4,%eax
f0107c39:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107c3e:	8a 00                	mov    (%eax),%al
f0107c40:	84 c0                	test   %al,%al
f0107c42:	75 68                	jne    f0107cac <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107c44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c47:	89 d0                	mov    %edx,%eax
f0107c49:	01 c0                	add    %eax,%eax
f0107c4b:	01 d0                	add    %edx,%eax
f0107c4d:	01 c0                	add    %eax,%eax
f0107c4f:	01 d0                	add    %edx,%eax
f0107c51:	c1 e0 02             	shl    $0x2,%eax
f0107c54:	01 d0                	add    %edx,%eax
f0107c56:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c5d:	01 d0                	add    %edx,%eax
f0107c5f:	c1 e0 04             	shl    $0x4,%eax
f0107c62:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107c67:	8b 00                	mov    (%eax),%eax
f0107c69:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107c6c:	75 3f                	jne    f0107cad <get_share_object_ID+0xa4>
f0107c6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c71:	89 d0                	mov    %edx,%eax
f0107c73:	01 c0                	add    %eax,%eax
f0107c75:	01 d0                	add    %edx,%eax
f0107c77:	01 c0                	add    %eax,%eax
f0107c79:	01 d0                	add    %edx,%eax
f0107c7b:	c1 e0 02             	shl    $0x2,%eax
f0107c7e:	01 d0                	add    %edx,%eax
f0107c80:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c87:	01 d0                	add    %edx,%eax
f0107c89:	c1 e0 04             	shl    $0x4,%eax
f0107c8c:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107c91:	83 c0 04             	add    $0x4,%eax
f0107c94:	83 ec 08             	sub    $0x8,%esp
f0107c97:	50                   	push   %eax
f0107c98:	ff 75 0c             	pushl  0xc(%ebp)
f0107c9b:	e8 08 75 02 00       	call   f012f1a8 <strcmp>
f0107ca0:	83 c4 10             	add    $0x10,%esp
f0107ca3:	85 c0                	test   %eax,%eax
f0107ca5:	75 06                	jne    f0107cad <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107caa:	eb 13                	jmp    f0107cbf <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107cac:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107cad:	ff 45 f4             	incl   -0xc(%ebp)
f0107cb0:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107cb4:	0f 8e 61 ff ff ff    	jle    f0107c1b <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107cba:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107cbf:	c9                   	leave  
f0107cc0:	c3                   	ret    

f0107cc1 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107cc1:	55                   	push   %ebp
f0107cc2:	89 e5                	mov    %esp,%ebp
f0107cc4:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107cc7:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f0107ccb:	76 0a                	jbe    f0107cd7 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107ccd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107cd2:	e9 93 00 00 00       	jmp    f0107d6a <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107cd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0107cda:	89 d0                	mov    %edx,%eax
f0107cdc:	01 c0                	add    %eax,%eax
f0107cde:	01 d0                	add    %edx,%eax
f0107ce0:	01 c0                	add    %eax,%eax
f0107ce2:	01 d0                	add    %edx,%eax
f0107ce4:	c1 e0 02             	shl    $0x2,%eax
f0107ce7:	01 d0                	add    %edx,%eax
f0107ce9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107cf0:	01 d0                	add    %edx,%eax
f0107cf2:	c1 e0 04             	shl    $0x4,%eax
f0107cf5:	83 c0 50             	add    $0x50,%eax
f0107cf8:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107cfd:	83 ec 0c             	sub    $0xc,%esp
f0107d00:	50                   	push   %eax
f0107d01:	e8 3e 01 00 00       	call   f0107e44 <clear_frames_storage>
f0107d06:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107d09:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d0c:	89 d0                	mov    %edx,%eax
f0107d0e:	01 c0                	add    %eax,%eax
f0107d10:	01 d0                	add    %edx,%eax
f0107d12:	01 c0                	add    %eax,%eax
f0107d14:	01 d0                	add    %edx,%eax
f0107d16:	c1 e0 02             	shl    $0x2,%eax
f0107d19:	01 d0                	add    %edx,%eax
f0107d1b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d22:	01 d0                	add    %edx,%eax
f0107d24:	c1 e0 04             	shl    $0x4,%eax
f0107d27:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107d2c:	83 ec 04             	sub    $0x4,%esp
f0107d2f:	68 50 10 00 00       	push   $0x1050
f0107d34:	6a 00                	push   $0x0
f0107d36:	50                   	push   %eax
f0107d37:	e8 4e 75 02 00       	call   f012f28a <memset>
f0107d3c:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107d3f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d42:	89 d0                	mov    %edx,%eax
f0107d44:	01 c0                	add    %eax,%eax
f0107d46:	01 d0                	add    %edx,%eax
f0107d48:	01 c0                	add    %eax,%eax
f0107d4a:	01 d0                	add    %edx,%eax
f0107d4c:	c1 e0 02             	shl    $0x2,%eax
f0107d4f:	01 d0                	add    %edx,%eax
f0107d51:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d58:	01 d0                	add    %edx,%eax
f0107d5a:	c1 e0 04             	shl    $0x4,%eax
f0107d5d:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107d62:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f0107d65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107d6a:	c9                   	leave  
f0107d6b:	c3                   	ret    

f0107d6c <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107d6c:	55                   	push   %ebp
f0107d6d:	89 e5                	mov    %esp,%ebp
f0107d6f:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107d72:	83 ec 0c             	sub    $0xc,%esp
f0107d75:	68 00 10 00 00       	push   $0x1000
f0107d7a:	e8 79 02 00 00       	call   f0107ff8 <kmalloc>
f0107d7f:	83 c4 10             	add    $0x10,%esp
f0107d82:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d89:	75 17                	jne    f0107da2 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107d8b:	83 ec 04             	sub    $0x4,%esp
f0107d8e:	68 3f 2a 13 f0       	push   $0xf0132a3f
f0107d93:	68 a6 00 00 00       	push   $0xa6
f0107d98:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107d9d:	e8 0e 84 ff ff       	call   f01001b0 <_panic>
	}
	return frames_storage;
f0107da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107da5:	c9                   	leave  
f0107da6:	c3                   	ret    

f0107da7 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107da7:	55                   	push   %ebp
f0107da8:	89 e5                	mov    %esp,%ebp
f0107daa:	53                   	push   %ebx
f0107dab:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107dae:	8b 45 10             	mov    0x10(%ebp),%eax
f0107db1:	c1 e0 0c             	shl    $0xc,%eax
f0107db4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107db7:	83 ec 04             	sub    $0x4,%esp
f0107dba:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107dbd:	50                   	push   %eax
f0107dbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dc1:	ff 75 08             	pushl  0x8(%ebp)
f0107dc4:	e8 1e f7 ff ff       	call   f01074e7 <get_page_table>
f0107dc9:	83 c4 10             	add    $0x10,%esp
f0107dcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107dcf:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107dd3:	75 15                	jne    f0107dea <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107dd5:	83 ec 04             	sub    $0x4,%esp
f0107dd8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107ddb:	50                   	push   %eax
f0107ddc:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ddf:	ff 75 08             	pushl  0x8(%ebp)
f0107de2:	e8 26 f8 ff ff       	call   f010760d <__static_cpt>
f0107de7:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107dea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ded:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107df0:	c1 ea 0c             	shr    $0xc,%edx
f0107df3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107df9:	c1 e2 02             	shl    $0x2,%edx
f0107dfc:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107dff:	83 ec 0c             	sub    $0xc,%esp
f0107e02:	ff 75 0c             	pushl  0xc(%ebp)
f0107e05:	e8 36 fc ff ff       	call   f0107a40 <to_physical_address>
f0107e0a:	83 c4 10             	add    $0x10,%esp
f0107e0d:	83 c8 01             	or     $0x1,%eax
f0107e10:	89 03                	mov    %eax,(%ebx)
}
f0107e12:	90                   	nop
f0107e13:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107e16:	c9                   	leave  
f0107e17:	c3                   	ret    

f0107e18 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107e18:	55                   	push   %ebp
f0107e19:	89 e5                	mov    %esp,%ebp
f0107e1b:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107e1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e21:	c1 e0 0c             	shl    $0xc,%eax
f0107e24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107e27:	83 ec 04             	sub    $0x4,%esp
f0107e2a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e2d:	50                   	push   %eax
f0107e2e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107e31:	ff 75 08             	pushl  0x8(%ebp)
f0107e34:	e8 46 f9 ff ff       	call   f010777f <get_frame_info>
f0107e39:	83 c4 10             	add    $0x10,%esp
f0107e3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107e3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107e42:	c9                   	leave  
f0107e43:	c3                   	ret    

f0107e44 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107e44:	55                   	push   %ebp
f0107e45:	89 e5                	mov    %esp,%ebp
f0107e47:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0107e4a:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107e51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107e58:	eb 5b                	jmp    f0107eb5 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0107e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e67:	01 d0                	add    %edx,%eax
f0107e69:	8b 00                	mov    (%eax),%eax
f0107e6b:	85 c0                	test   %eax,%eax
f0107e6d:	74 43                	je     f0107eb2 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0107e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e7c:	01 d0                	add    %edx,%eax
f0107e7e:	8b 00                	mov    (%eax),%eax
f0107e80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e85:	83 ec 0c             	sub    $0xc,%esp
f0107e88:	50                   	push   %eax
f0107e89:	e8 c5 fb ff ff       	call   f0107a53 <to_frame_info>
f0107e8e:	83 c4 10             	add    $0x10,%esp
f0107e91:	83 ec 0c             	sub    $0xc,%esp
f0107e94:	50                   	push   %eax
f0107e95:	e8 a3 f5 ff ff       	call   f010743d <free_frame>
f0107e9a:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107ea7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107eaa:	01 d0                	add    %edx,%eax
f0107eac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107eb2:	ff 45 f4             	incl   -0xc(%ebp)
f0107eb5:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107ebc:	7e 9c                	jle    f0107e5a <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107ebe:	90                   	nop
f0107ebf:	c9                   	leave  
f0107ec0:	c3                   	ret    

f0107ec1 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107ec1:	55                   	push   %ebp
f0107ec2:	89 e5                	mov    %esp,%ebp
f0107ec4:	83 ec 18             	sub    $0x18,%esp
f0107ec7:	8b 45 14             	mov    0x14(%ebp),%eax
f0107eca:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f0107ecd:	83 ec 04             	sub    $0x4,%esp
f0107ed0:	68 80 2a 13 f0       	push   $0xf0132a80
f0107ed5:	68 f6 00 00 00       	push   $0xf6
f0107eda:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107edf:	e8 cc 82 ff ff       	call   f01001b0 <_panic>

f0107ee4 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107ee4:	55                   	push   %ebp
f0107ee5:	89 e5                	mov    %esp,%ebp
f0107ee7:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107eea:	83 ec 04             	sub    $0x4,%esp
f0107eed:	68 b4 2a 13 f0       	push   $0xf0132ab4
f0107ef2:	68 02 01 00 00       	push   $0x102
f0107ef7:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107efc:	e8 af 82 ff ff       	call   f01001b0 <_panic>

f0107f01 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107f01:	55                   	push   %ebp
f0107f02:	89 e5                	mov    %esp,%ebp
f0107f04:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f0107f07:	83 ec 04             	sub    $0x4,%esp
f0107f0a:	68 e8 2a 13 f0       	push   $0xf0132ae8
f0107f0f:	68 0c 01 00 00       	push   $0x10c
f0107f14:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107f19:	e8 92 82 ff ff       	call   f01001b0 <_panic>

f0107f1e <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107f1e:	55                   	push   %ebp
f0107f1f:	89 e5                	mov    %esp,%ebp
f0107f21:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f0107f24:	83 ec 04             	sub    $0x4,%esp
f0107f27:	68 18 2b 13 f0       	push   $0xf0132b18
f0107f2c:	68 1b 01 00 00       	push   $0x11b
f0107f31:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107f36:	e8 75 82 ff ff       	call   f01001b0 <_panic>

f0107f3b <initialize_kheap_dynamic_allocator>:

uint32 kheap_start;
uint32 kheap_segment_break;
uint32 kheap_hard_limit;
int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0107f3b:	55                   	push   %ebp
f0107f3c:	89 e5                	mov    %esp,%ebp
f0107f3e:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS2 - #01] [1] KERNEL HEAP - initialize_kheap_dynamic_allocator()
	//Initialize the dynamic allocator of kernel heap with the given start address, size & limit
	kheap_start = daStart;
f0107f41:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f44:	a3 88 a3 2d f0       	mov    %eax,0xf02da388
	kheap_segment_break =  (daStart + initSizeToAllocate);
f0107f49:	8b 55 08             	mov    0x8(%ebp),%edx
f0107f4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f4f:	01 d0                	add    %edx,%eax
f0107f51:	a3 80 a3 2d f0       	mov    %eax,0xf02da380
	kheap_hard_limit =  daLimit;
f0107f56:	8b 45 10             	mov    0x10(%ebp),%eax
f0107f59:	a3 84 a3 2d f0       	mov    %eax,0xf02da384
	if(kheap_segment_break>kheap_hard_limit)
f0107f5e:	8b 15 80 a3 2d f0    	mov    0xf02da380,%edx
f0107f64:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f0107f69:	39 c2                	cmp    %eax,%edx
f0107f6b:	76 07                	jbe    f0107f74 <initialize_kheap_dynamic_allocator+0x39>
	{
		return E_NO_MEM;
f0107f6d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
f0107f72:	eb 78                	jmp    f0107fec <initialize_kheap_dynamic_allocator+0xb1>
	}
	//All pages in the given range should be allocated
	uint32 iterator = kheap_start;
f0107f74:	a1 88 a3 2d f0       	mov    0xf02da388,%eax
f0107f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo *ptr_frame_info;
	while(iterator!=kheap_segment_break)
f0107f7c:	eb 3f                	jmp    f0107fbd <initialize_kheap_dynamic_allocator+0x82>
	{
		int ret = allocate_frame(&ptr_frame_info) ;
f0107f7e:	83 ec 0c             	sub    $0xc,%esp
f0107f81:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107f84:	50                   	push   %eax
f0107f85:	e8 9b f3 ff ff       	call   f0107325 <allocate_frame>
f0107f8a:	83 c4 10             	add    $0x10,%esp
f0107f8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(ret==0)
f0107f90:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107f94:	75 19                	jne    f0107faf <initialize_kheap_dynamic_allocator+0x74>
		{
			map_frame(ptr_page_directory,ptr_frame_info,iterator,PERM_PRESENT);
f0107f96:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107f99:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0107f9e:	6a 01                	push   $0x1
f0107fa0:	ff 75 f4             	pushl  -0xc(%ebp)
f0107fa3:	52                   	push   %edx
f0107fa4:	50                   	push   %eax
f0107fa5:	e8 16 f7 ff ff       	call   f01076c0 <map_frame>
f0107faa:	83 c4 10             	add    $0x10,%esp
f0107fad:	eb 07                	jmp    f0107fb6 <initialize_kheap_dynamic_allocator+0x7b>
		}
		else{
			return E_NO_MEM;
f0107faf:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
f0107fb4:	eb 36                	jmp    f0107fec <initialize_kheap_dynamic_allocator+0xb1>
		}
		iterator+=PAGE_SIZE;
f0107fb6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		return E_NO_MEM;
	}
	//All pages in the given range should be allocated
	uint32 iterator = kheap_start;
	struct FrameInfo *ptr_frame_info;
	while(iterator!=kheap_segment_break)
f0107fbd:	a1 80 a3 2d f0       	mov    0xf02da380,%eax
f0107fc2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0107fc5:	75 b7                	jne    f0107f7e <initialize_kheap_dynamic_allocator+0x43>
		}
		iterator+=PAGE_SIZE;
	}

	//Remember: call the initialize_dynamic_allocator(..) to complete the initialization
	initialize_dynamic_allocator(daStart,initSizeToAllocate);
f0107fc7:	83 ec 08             	sub    $0x8,%esp
f0107fca:	ff 75 0c             	pushl  0xc(%ebp)
f0107fcd:	ff 75 08             	pushl  0x8(%ebp)
f0107fd0:	e8 48 7c 02 00       	call   f012fc1d <initialize_dynamic_allocator>
f0107fd5:	83 c4 10             	add    $0x10,%esp
	//Return:
	//	On success: 0
	//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM

	//Comment the following line(s) before start coding...
	panic("not implemented yet");
f0107fd8:	83 ec 04             	sub    $0x4,%esp
f0107fdb:	68 48 2b 13 f0       	push   $0xf0132b48
f0107fe0:	6a 2d                	push   $0x2d
f0107fe2:	68 5c 2b 13 f0       	push   $0xf0132b5c
f0107fe7:	e8 c4 81 ff ff       	call   f01001b0 <_panic>
	return 0;
}
f0107fec:	c9                   	leave  
f0107fed:	c3                   	ret    

f0107fee <sbrk>:

void* sbrk(int increment)
{
f0107fee:	55                   	push   %ebp
f0107fef:	89 e5                	mov    %esp,%ebp
	 * 	3) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0107ff1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	panic("not implemented yet");
}
f0107ff6:	5d                   	pop    %ebp
f0107ff7:	c3                   	ret    

f0107ff8 <kmalloc>:


void* kmalloc(unsigned int size)
{
f0107ff8:	55                   	push   %ebp
f0107ff9:	89 e5                	mov    %esp,%ebp
f0107ffb:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #03] [1] KERNEL HEAP - kmalloc()
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	//change this "return" according to your answer
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0107ffe:	83 ec 04             	sub    $0x4,%esp
f0108001:	68 70 2b 13 f0       	push   $0xf0132b70
f0108006:	6a 50                	push   $0x50
f0108008:	68 5c 2b 13 f0       	push   $0xf0132b5c
f010800d:	e8 fb 82 ff ff       	call   f010030d <_panic_into_prompt>

f0108012 <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f0108012:	55                   	push   %ebp
f0108013:	89 e5                	mov    %esp,%ebp
f0108015:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0108018:	83 ec 04             	sub    $0x4,%esp
f010801b:	68 98 2b 13 f0       	push   $0xf0132b98
f0108020:	6a 59                	push   $0x59
f0108022:	68 5c 2b 13 f0       	push   $0xf0132b5c
f0108027:	e8 84 81 ff ff       	call   f01001b0 <_panic>

f010802c <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f010802c:	55                   	push   %ebp
f010802d:	89 e5                	mov    %esp,%ebp
f010802f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #05] [1] KERNEL HEAP - kheap_virtual_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0108032:	83 ec 04             	sub    $0x4,%esp
f0108035:	68 bc 2b 13 f0       	push   $0xf0132bbc
f010803a:	6a 61                	push   $0x61
f010803c:	68 5c 2b 13 f0       	push   $0xf0132b5c
f0108041:	e8 6a 81 ff ff       	call   f01001b0 <_panic>

f0108046 <kheap_physical_address>:
	//change this "return" according to your answer
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0108046:	55                   	push   %ebp
f0108047:	89 e5                	mov    %esp,%ebp
f0108049:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #06] [1] KERNEL HEAP - kheap_physical_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f010804c:	83 ec 04             	sub    $0x4,%esp
f010804f:	68 f0 2b 13 f0       	push   $0xf0132bf0
f0108054:	6a 6e                	push   $0x6e
f0108056:	68 5c 2b 13 f0       	push   $0xf0132b5c
f010805b:	e8 50 81 ff ff       	call   f01001b0 <_panic>

f0108060 <kfreeall>:
	return 0;
}


void kfreeall()
{
f0108060:	55                   	push   %ebp
f0108061:	89 e5                	mov    %esp,%ebp
f0108063:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108066:	83 ec 04             	sub    $0x4,%esp
f0108069:	68 25 2c 13 f0       	push   $0xf0132c25
f010806e:	6a 77                	push   $0x77
f0108070:	68 5c 2b 13 f0       	push   $0xf0132b5c
f0108075:	e8 36 81 ff ff       	call   f01001b0 <_panic>

f010807a <kshrink>:

}

void kshrink(uint32 newSize)
{
f010807a:	55                   	push   %ebp
f010807b:	89 e5                	mov    %esp,%ebp
f010807d:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108080:	83 ec 04             	sub    $0x4,%esp
f0108083:	68 25 2c 13 f0       	push   $0xf0132c25
f0108088:	6a 7d                	push   $0x7d
f010808a:	68 5c 2b 13 f0       	push   $0xf0132b5c
f010808f:	e8 1c 81 ff ff       	call   f01001b0 <_panic>

f0108094 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0108094:	55                   	push   %ebp
f0108095:	89 e5                	mov    %esp,%ebp
f0108097:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010809a:	83 ec 04             	sub    $0x4,%esp
f010809d:	68 25 2c 13 f0       	push   $0xf0132c25
f01080a2:	68 82 00 00 00       	push   $0x82
f01080a7:	68 5c 2b 13 f0       	push   $0xf0132b5c
f01080ac:	e8 ff 80 ff ff       	call   f01001b0 <_panic>

f01080b1 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f01080b1:	55                   	push   %ebp
f01080b2:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - BONUS] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	return NULL;
f01080b4:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f01080b9:	5d                   	pop    %ebp
f01080ba:	c3                   	ret    

f01080bb <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f01080bb:	55                   	push   %ebp
f01080bc:	89 e5                	mov    %esp,%ebp
f01080be:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f01080c1:	83 ec 04             	sub    $0x4,%esp
f01080c4:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01080c7:	50                   	push   %eax
f01080c8:	ff 75 0c             	pushl  0xc(%ebp)
f01080cb:	ff 75 08             	pushl  0x8(%ebp)
f01080ce:	e8 14 f4 ff ff       	call   f01074e7 <get_page_table>
f01080d3:	83 c4 10             	add    $0x10,%esp
f01080d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f01080d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080dc:	85 c0                	test   %eax,%eax
f01080de:	74 64                	je     f0108144 <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f01080e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080e3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080e6:	c1 ea 0c             	shr    $0xc,%edx
f01080e9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01080ef:	c1 e2 02             	shl    $0x2,%edx
f01080f2:	01 c2                	add    %eax,%edx
f01080f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080f7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01080fa:	c1 e9 0c             	shr    $0xc,%ecx
f01080fd:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108103:	c1 e1 02             	shl    $0x2,%ecx
f0108106:	01 c8                	add    %ecx,%eax
f0108108:	8b 00                	mov    (%eax),%eax
f010810a:	0b 45 10             	or     0x10(%ebp),%eax
f010810d:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f010810f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108112:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108115:	c1 ea 0c             	shr    $0xc,%edx
f0108118:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010811e:	c1 e2 02             	shl    $0x2,%edx
f0108121:	01 d0                	add    %edx,%eax
f0108123:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108126:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108129:	c1 e9 0c             	shr    $0xc,%ecx
f010812c:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108132:	c1 e1 02             	shl    $0x2,%ecx
f0108135:	01 ca                	add    %ecx,%edx
f0108137:	8b 12                	mov    (%edx),%edx
f0108139:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010813c:	f7 d1                	not    %ecx
f010813e:	21 ca                	and    %ecx,%edx
f0108140:	89 10                	mov    %edx,(%eax)
f0108142:	eb 27                	jmp    f010816b <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f0108144:	83 ec 08             	sub    $0x8,%esp
f0108147:	ff 75 0c             	pushl  0xc(%ebp)
f010814a:	68 38 2c 13 f0       	push   $0xf0132c38
f010814f:	e8 dd 8c ff ff       	call   f0100e31 <cprintf>
f0108154:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108157:	83 ec 04             	sub    $0x4,%esp
f010815a:	68 60 2c 13 f0       	push   $0xf0132c60
f010815f:	6a 1c                	push   $0x1c
f0108161:	68 d4 2c 13 f0       	push   $0xf0132cd4
f0108166:	e8 45 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f010816b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010816e:	83 ec 08             	sub    $0x8,%esp
f0108171:	50                   	push   %eax
f0108172:	6a 00                	push   $0x0
f0108174:	e8 45 ed ff ff       	call   f0106ebe <tlb_invalidate>
f0108179:	83 c4 10             	add    $0x10,%esp
}
f010817c:	90                   	nop
f010817d:	c9                   	leave  
f010817e:	c3                   	ret    

f010817f <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f010817f:	55                   	push   %ebp
f0108180:	89 e5                	mov    %esp,%ebp
f0108182:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108185:	83 ec 04             	sub    $0x4,%esp
f0108188:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010818b:	50                   	push   %eax
f010818c:	ff 75 0c             	pushl  0xc(%ebp)
f010818f:	ff 75 08             	pushl  0x8(%ebp)
f0108192:	e8 50 f3 ff ff       	call   f01074e7 <get_page_table>
f0108197:	83 c4 10             	add    $0x10,%esp
f010819a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f010819d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081a0:	85 c0                	test   %eax,%eax
f01081a2:	74 1d                	je     f01081c1 <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f01081a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081a7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081aa:	c1 ea 0c             	shr    $0xc,%edx
f01081ad:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01081b3:	c1 e2 02             	shl    $0x2,%edx
f01081b6:	01 d0                	add    %edx,%eax
f01081b8:	8b 00                	mov    (%eax),%eax
f01081ba:	25 ff 0f 00 00       	and    $0xfff,%eax
f01081bf:	eb 05                	jmp    f01081c6 <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f01081c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f01081c6:	c9                   	leave  
f01081c7:	c3                   	ret    

f01081c8 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f01081c8:	55                   	push   %ebp
f01081c9:	89 e5                	mov    %esp,%ebp
f01081cb:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f01081ce:	83 ec 04             	sub    $0x4,%esp
f01081d1:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01081d4:	50                   	push   %eax
f01081d5:	ff 75 0c             	pushl  0xc(%ebp)
f01081d8:	ff 75 08             	pushl  0x8(%ebp)
f01081db:	e8 07 f3 ff ff       	call   f01074e7 <get_page_table>
f01081e0:	83 c4 10             	add    $0x10,%esp
f01081e3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f01081e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081e9:	85 c0                	test   %eax,%eax
f01081eb:	74 46                	je     f0108233 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f01081ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081f0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081f3:	c1 ea 0c             	shr    $0xc,%edx
f01081f6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01081fc:	c1 e2 02             	shl    $0x2,%edx
f01081ff:	01 d0                	add    %edx,%eax
f0108201:	8b 00                	mov    (%eax),%eax
f0108203:	83 ec 04             	sub    $0x4,%esp
f0108206:	50                   	push   %eax
f0108207:	ff 75 0c             	pushl  0xc(%ebp)
f010820a:	68 f0 2c 13 f0       	push   $0xf0132cf0
f010820f:	e8 1d 8c ff ff       	call   f0100e31 <cprintf>
f0108214:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0108217:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010821a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010821d:	c1 ea 0c             	shr    $0xc,%edx
f0108220:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108226:	c1 e2 02             	shl    $0x2,%edx
f0108229:	01 d0                	add    %edx,%eax
f010822b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108231:	eb 14                	jmp    f0108247 <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108233:	83 ec 04             	sub    $0x4,%esp
f0108236:	68 18 2d 13 f0       	push   $0xf0132d18
f010823b:	6a 47                	push   $0x47
f010823d:	68 d4 2c 13 f0       	push   $0xf0132cd4
f0108242:	e8 69 7f ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108247:	8b 45 0c             	mov    0xc(%ebp),%eax
f010824a:	83 ec 08             	sub    $0x8,%esp
f010824d:	50                   	push   %eax
f010824e:	6a 00                	push   $0x0
f0108250:	e8 69 ec ff ff       	call   f0106ebe <tlb_invalidate>
f0108255:	83 c4 10             	add    $0x10,%esp
}
f0108258:	90                   	nop
f0108259:	c9                   	leave  
f010825a:	c3                   	ret    

f010825b <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f010825b:	55                   	push   %ebp
f010825c:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f010825e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108261:	c1 e8 16             	shr    $0x16,%eax
f0108264:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010826b:	8b 45 08             	mov    0x8(%ebp),%eax
f010826e:	01 d0                	add    %edx,%eax
f0108270:	8b 00                	mov    (%eax),%eax
f0108272:	83 e0 20             	and    $0x20,%eax
f0108275:	85 c0                	test   %eax,%eax
f0108277:	0f 95 c0             	setne  %al
f010827a:	0f b6 c0             	movzbl %al,%eax
}
f010827d:	5d                   	pop    %ebp
f010827e:	c3                   	ret    

f010827f <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f010827f:	55                   	push   %ebp
f0108280:	89 e5                	mov    %esp,%ebp
f0108282:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0108285:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108288:	c1 e8 16             	shr    $0x16,%eax
f010828b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108292:	8b 45 08             	mov    0x8(%ebp),%eax
f0108295:	01 d0                	add    %edx,%eax
f0108297:	8b 55 0c             	mov    0xc(%ebp),%edx
f010829a:	c1 ea 16             	shr    $0x16,%edx
f010829d:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01082a4:	8b 55 08             	mov    0x8(%ebp),%edx
f01082a7:	01 ca                	add    %ecx,%edx
f01082a9:	8b 12                	mov    (%edx),%edx
f01082ab:	83 e2 df             	and    $0xffffffdf,%edx
f01082ae:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01082b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082b3:	83 ec 08             	sub    $0x8,%esp
f01082b6:	50                   	push   %eax
f01082b7:	6a 00                	push   $0x0
f01082b9:	e8 00 ec ff ff       	call   f0106ebe <tlb_invalidate>
f01082be:	83 c4 10             	add    $0x10,%esp
}
f01082c1:	90                   	nop
f01082c2:	c9                   	leave  
f01082c3:	c3                   	ret    

f01082c4 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f01082c4:	55                   	push   %ebp
f01082c5:	89 e5                	mov    %esp,%ebp
f01082c7:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f01082ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082cd:	c1 e8 16             	shr    $0x16,%eax
f01082d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01082d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01082da:	01 d0                	add    %edx,%eax
f01082dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01082e2:	0f 20 d8             	mov    %cr3,%eax
f01082e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01082e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01082eb:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01082ee:	90                   	nop
f01082ef:	c9                   	leave  
f01082f0:	c3                   	ret    

f01082f1 <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f01082f1:	55                   	push   %ebp
f01082f2:	89 e5                	mov    %esp,%ebp
f01082f4:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01082f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01082fe:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108305:	eb 22                	jmp    f0108329 <env_page_ws_get_size+0x38>
f0108307:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010830a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010830d:	89 d0                	mov    %edx,%eax
f010830f:	01 c0                	add    %eax,%eax
f0108311:	01 d0                	add    %edx,%eax
f0108313:	c1 e0 03             	shl    $0x3,%eax
f0108316:	01 c8                	add    %ecx,%eax
f0108318:	05 bc 00 00 00       	add    $0xbc,%eax
f010831d:	8a 00                	mov    (%eax),%al
f010831f:	84 c0                	test   %al,%al
f0108321:	75 03                	jne    f0108326 <env_page_ws_get_size+0x35>
f0108323:	ff 45 f8             	incl   -0x8(%ebp)
f0108326:	ff 45 fc             	incl   -0x4(%ebp)
f0108329:	8b 45 08             	mov    0x8(%ebp),%eax
f010832c:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108332:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108335:	39 c2                	cmp    %eax,%edx
f0108337:	77 ce                	ja     f0108307 <env_page_ws_get_size+0x16>
	return counter;
f0108339:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010833c:	c9                   	leave  
f010833d:	c3                   	ret    

f010833e <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010833e:	55                   	push   %ebp
f010833f:	89 e5                	mov    %esp,%ebp
f0108341:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108344:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f010834b:	eb 4e                	jmp    f010839b <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f010834d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108350:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108353:	89 d0                	mov    %edx,%eax
f0108355:	01 c0                	add    %eax,%eax
f0108357:	01 d0                	add    %edx,%eax
f0108359:	c1 e0 03             	shl    $0x3,%eax
f010835c:	01 c8                	add    %ecx,%eax
f010835e:	05 b8 00 00 00       	add    $0xb8,%eax
f0108363:	8b 00                	mov    (%eax),%eax
f0108365:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108368:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010836b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108370:	89 c2                	mov    %eax,%edx
f0108372:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108375:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108378:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010837b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108380:	39 c2                	cmp    %eax,%edx
f0108382:	75 14                	jne    f0108398 <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f0108384:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108387:	83 ec 08             	sub    $0x8,%esp
f010838a:	50                   	push   %eax
f010838b:	ff 75 08             	pushl  0x8(%ebp)
f010838e:	e8 c8 00 00 00       	call   f010845b <env_page_ws_clear_entry>
f0108393:	83 c4 10             	add    $0x10,%esp
			break;
f0108396:	eb 13                	jmp    f01083ab <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108398:	ff 45 f4             	incl   -0xc(%ebp)
f010839b:	8b 45 08             	mov    0x8(%ebp),%eax
f010839e:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01083a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01083a7:	39 c2                	cmp    %eax,%edx
f01083a9:	77 a2                	ja     f010834d <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01083ab:	90                   	nop
f01083ac:	c9                   	leave  
f01083ad:	c3                   	ret    

f01083ae <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01083ae:	55                   	push   %ebp
f01083af:	89 e5                	mov    %esp,%ebp
f01083b1:	53                   	push   %ebx
f01083b2:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01083b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01083b8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01083be:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01083c1:	77 16                	ja     f01083d9 <env_page_ws_set_entry+0x2b>
f01083c3:	68 90 2d 13 f0       	push   $0xf0132d90
f01083c8:	68 c6 2d 13 f0       	push   $0xf0132dc6
f01083cd:	6a 77                	push   $0x77
f01083cf:	68 dc 2d 13 f0       	push   $0xf0132ddc
f01083d4:	e8 d7 7d ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01083d9:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01083e0:	76 16                	jbe    f01083f8 <env_page_ws_set_entry+0x4a>
f01083e2:	68 fc 2d 13 f0       	push   $0xf0132dfc
f01083e7:	68 c6 2d 13 f0       	push   $0xf0132dc6
f01083ec:	6a 78                	push   $0x78
f01083ee:	68 dc 2d 13 f0       	push   $0xf0132ddc
f01083f3:	e8 b8 7d ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01083f8:	8b 45 10             	mov    0x10(%ebp),%eax
f01083fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01083fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108401:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108406:	89 c1                	mov    %eax,%ecx
f0108408:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010840b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010840e:	89 d0                	mov    %edx,%eax
f0108410:	01 c0                	add    %eax,%eax
f0108412:	01 d0                	add    %edx,%eax
f0108414:	c1 e0 03             	shl    $0x3,%eax
f0108417:	01 d8                	add    %ebx,%eax
f0108419:	05 b8 00 00 00       	add    $0xb8,%eax
f010841e:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108420:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108423:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108426:	89 d0                	mov    %edx,%eax
f0108428:	01 c0                	add    %eax,%eax
f010842a:	01 d0                	add    %edx,%eax
f010842c:	c1 e0 03             	shl    $0x3,%eax
f010842f:	01 c8                	add    %ecx,%eax
f0108431:	05 bc 00 00 00       	add    $0xbc,%eax
f0108436:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108439:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010843c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010843f:	89 d0                	mov    %edx,%eax
f0108441:	01 c0                	add    %eax,%eax
f0108443:	01 d0                	add    %edx,%eax
f0108445:	c1 e0 03             	shl    $0x3,%eax
f0108448:	01 c8                	add    %ecx,%eax
f010844a:	05 c0 00 00 00       	add    $0xc0,%eax
f010844f:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108455:	90                   	nop
}
f0108456:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108459:	c9                   	leave  
f010845a:	c3                   	ret    

f010845b <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010845b:	55                   	push   %ebp
f010845c:	89 e5                	mov    %esp,%ebp
f010845e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108461:	8b 45 08             	mov    0x8(%ebp),%eax
f0108464:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010846a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010846d:	77 19                	ja     f0108488 <env_page_ws_clear_entry+0x2d>
f010846f:	68 30 2e 13 f0       	push   $0xf0132e30
f0108474:	68 c6 2d 13 f0       	push   $0xf0132dc6
f0108479:	68 83 00 00 00       	push   $0x83
f010847e:	68 dc 2d 13 f0       	push   $0xf0132ddc
f0108483:	e8 28 7d ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108488:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010848b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010848e:	89 d0                	mov    %edx,%eax
f0108490:	01 c0                	add    %eax,%eax
f0108492:	01 d0                	add    %edx,%eax
f0108494:	c1 e0 03             	shl    $0x3,%eax
f0108497:	01 c8                	add    %ecx,%eax
f0108499:	05 b8 00 00 00       	add    $0xb8,%eax
f010849e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01084a4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084a7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084aa:	89 d0                	mov    %edx,%eax
f01084ac:	01 c0                	add    %eax,%eax
f01084ae:	01 d0                	add    %edx,%eax
f01084b0:	c1 e0 03             	shl    $0x3,%eax
f01084b3:	01 c8                	add    %ecx,%eax
f01084b5:	05 bc 00 00 00       	add    $0xbc,%eax
f01084ba:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01084bd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084c3:	89 d0                	mov    %edx,%eax
f01084c5:	01 c0                	add    %eax,%eax
f01084c7:	01 d0                	add    %edx,%eax
f01084c9:	c1 e0 03             	shl    $0x3,%eax
f01084cc:	01 c8                	add    %ecx,%eax
f01084ce:	05 c0 00 00 00       	add    $0xc0,%eax
f01084d3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01084d9:	90                   	nop
f01084da:	c9                   	leave  
f01084db:	c3                   	ret    

f01084dc <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01084dc:	55                   	push   %ebp
f01084dd:	89 e5                	mov    %esp,%ebp
f01084df:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01084e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01084e5:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01084eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01084ee:	77 19                	ja     f0108509 <env_page_ws_get_virtual_address+0x2d>
f01084f0:	68 30 2e 13 f0       	push   $0xf0132e30
f01084f5:	68 c6 2d 13 f0       	push   $0xf0132dc6
f01084fa:	68 8b 00 00 00       	push   $0x8b
f01084ff:	68 dc 2d 13 f0       	push   $0xf0132ddc
f0108504:	e8 a7 7c ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108509:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010850c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010850f:	89 d0                	mov    %edx,%eax
f0108511:	01 c0                	add    %eax,%eax
f0108513:	01 d0                	add    %edx,%eax
f0108515:	c1 e0 03             	shl    $0x3,%eax
f0108518:	01 c8                	add    %ecx,%eax
f010851a:	05 b8 00 00 00       	add    $0xb8,%eax
f010851f:	8b 00                	mov    (%eax),%eax
f0108521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108524:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108527:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010852c:	c9                   	leave  
f010852d:	c3                   	ret    

f010852e <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010852e:	55                   	push   %ebp
f010852f:	89 e5                	mov    %esp,%ebp
f0108531:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108534:	8b 45 08             	mov    0x8(%ebp),%eax
f0108537:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010853d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108540:	77 19                	ja     f010855b <env_page_ws_get_time_stamp+0x2d>
f0108542:	68 30 2e 13 f0       	push   $0xf0132e30
f0108547:	68 c6 2d 13 f0       	push   $0xf0132dc6
f010854c:	68 91 00 00 00       	push   $0x91
f0108551:	68 dc 2d 13 f0       	push   $0xf0132ddc
f0108556:	e8 55 7c ff ff       	call   f01001b0 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f010855b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010855e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108561:	89 d0                	mov    %edx,%eax
f0108563:	01 c0                	add    %eax,%eax
f0108565:	01 d0                	add    %edx,%eax
f0108567:	c1 e0 03             	shl    $0x3,%eax
f010856a:	01 c8                	add    %ecx,%eax
f010856c:	05 c0 00 00 00       	add    $0xc0,%eax
f0108571:	8b 00                	mov    (%eax),%eax
}
f0108573:	c9                   	leave  
f0108574:	c3                   	ret    

f0108575 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108575:	55                   	push   %ebp
f0108576:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108578:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010857b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010857e:	89 d0                	mov    %edx,%eax
f0108580:	01 c0                	add    %eax,%eax
f0108582:	01 d0                	add    %edx,%eax
f0108584:	c1 e0 03             	shl    $0x3,%eax
f0108587:	01 c8                	add    %ecx,%eax
f0108589:	05 bc 00 00 00       	add    $0xbc,%eax
f010858e:	8a 00                	mov    (%eax),%al
f0108590:	0f b6 c0             	movzbl %al,%eax
}
f0108593:	5d                   	pop    %ebp
f0108594:	c3                   	ret    

f0108595 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108595:	55                   	push   %ebp
f0108596:	89 e5                	mov    %esp,%ebp
f0108598:	53                   	push   %ebx
f0108599:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010859c:	83 ec 0c             	sub    $0xc,%esp
f010859f:	6a 02                	push   $0x2
f01085a1:	e8 39 53 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f01085a6:	83 c4 10             	add    $0x10,%esp
f01085a9:	85 c0                	test   %eax,%eax
f01085ab:	0f 84 fe 00 00 00    	je     f01086af <env_page_ws_print+0x11a>
	{
		int i = 0;
f01085b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01085b8:	83 ec 0c             	sub    $0xc,%esp
f01085bb:	68 68 2e 13 f0       	push   $0xf0132e68
f01085c0:	e8 6c 88 ff ff       	call   f0100e31 <cprintf>
f01085c5:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01085c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01085cb:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f01085d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085d4:	eb 2c                	jmp    f0108602 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01085d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085d9:	8b 10                	mov    (%eax),%edx
f01085db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01085de:	8d 48 01             	lea    0x1(%eax),%ecx
f01085e1:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01085e4:	83 ec 04             	sub    $0x4,%esp
f01085e7:	52                   	push   %edx
f01085e8:	50                   	push   %eax
f01085e9:	68 82 2e 13 f0       	push   $0xf0132e82
f01085ee:	e8 3e 88 ff ff       	call   f0100e31 <cprintf>
f01085f3:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01085f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01085f9:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01085ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108602:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108606:	74 08                	je     f0108610 <env_page_ws_print+0x7b>
f0108608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010860b:	8b 40 10             	mov    0x10(%eax),%eax
f010860e:	eb 05                	jmp    f0108615 <env_page_ws_print+0x80>
f0108610:	b8 00 00 00 00       	mov    $0x0,%eax
f0108615:	8b 55 08             	mov    0x8(%ebp),%edx
f0108618:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f010861e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108621:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0108627:	85 c0                	test   %eax,%eax
f0108629:	75 ab                	jne    f01085d6 <env_page_ws_print+0x41>
f010862b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010862f:	75 a5                	jne    f01085d6 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108631:	83 ec 0c             	sub    $0xc,%esp
f0108634:	68 8a 2e 13 f0       	push   $0xf0132e8a
f0108639:	e8 f3 87 ff ff       	call   f0100e31 <cprintf>
f010863e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108641:	8b 45 08             	mov    0x8(%ebp),%eax
f0108644:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f010864a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010864d:	eb 2c                	jmp    f010867b <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010864f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108652:	8b 10                	mov    (%eax),%edx
f0108654:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108657:	8d 48 01             	lea    0x1(%eax),%ecx
f010865a:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010865d:	83 ec 04             	sub    $0x4,%esp
f0108660:	52                   	push   %edx
f0108661:	50                   	push   %eax
f0108662:	68 82 2e 13 f0       	push   $0xf0132e82
f0108667:	e8 c5 87 ff ff       	call   f0100e31 <cprintf>
f010866c:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010866f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108672:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108678:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010867b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010867f:	74 08                	je     f0108689 <env_page_ws_print+0xf4>
f0108681:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108684:	8b 40 10             	mov    0x10(%eax),%eax
f0108687:	eb 05                	jmp    f010868e <env_page_ws_print+0xf9>
f0108689:	b8 00 00 00 00       	mov    $0x0,%eax
f010868e:	8b 55 08             	mov    0x8(%ebp),%edx
f0108691:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0108697:	8b 45 08             	mov    0x8(%ebp),%eax
f010869a:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01086a0:	85 c0                	test   %eax,%eax
f01086a2:	75 ab                	jne    f010864f <env_page_ws_print+0xba>
f01086a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01086a8:	75 a5                	jne    f010864f <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01086aa:	e9 a2 01 00 00       	jmp    f0108851 <env_page_ws_print+0x2bc>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01086af:	83 ec 0c             	sub    $0xc,%esp
f01086b2:	68 a5 2e 13 f0       	push   $0xf0132ea5
f01086b7:	e8 75 87 ff ff       	call   f0100e31 <cprintf>
f01086bc:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01086bf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01086c6:	e9 74 01 00 00       	jmp    f010883f <env_page_ws_print+0x2aa>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01086cb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01086d1:	89 d0                	mov    %edx,%eax
f01086d3:	01 c0                	add    %eax,%eax
f01086d5:	01 d0                	add    %edx,%eax
f01086d7:	c1 e0 03             	shl    $0x3,%eax
f01086da:	01 c8                	add    %ecx,%eax
f01086dc:	05 bc 00 00 00       	add    $0xbc,%eax
f01086e1:	8a 00                	mov    (%eax),%al
f01086e3:	84 c0                	test   %al,%al
f01086e5:	74 43                	je     f010872a <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f01086e7:	83 ec 0c             	sub    $0xc,%esp
f01086ea:	68 af 2e 13 f0       	push   $0xf0132eaf
f01086ef:	e8 3d 87 ff ff       	call   f0100e31 <cprintf>
f01086f4:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01086f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01086fa:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108700:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108703:	75 10                	jne    f0108715 <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f0108705:	83 ec 0c             	sub    $0xc,%esp
f0108708:	68 be 2e 13 f0       	push   $0xf0132ebe
f010870d:	e8 1f 87 ff ff       	call   f0100e31 <cprintf>
f0108712:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108715:	83 ec 0c             	sub    $0xc,%esp
f0108718:	68 c4 2e 13 f0       	push   $0xf0132ec4
f010871d:	e8 0f 87 ff ff       	call   f0100e31 <cprintf>
f0108722:	83 c4 10             	add    $0x10,%esp
				continue;
f0108725:	e9 12 01 00 00       	jmp    f010883c <env_page_ws_print+0x2a7>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010872a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010872d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108730:	89 d0                	mov    %edx,%eax
f0108732:	01 c0                	add    %eax,%eax
f0108734:	01 d0                	add    %edx,%eax
f0108736:	c1 e0 03             	shl    $0x3,%eax
f0108739:	01 c8                	add    %ecx,%eax
f010873b:	05 b8 00 00 00       	add    $0xb8,%eax
f0108740:	8b 00                	mov    (%eax),%eax
f0108742:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0108745:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108748:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010874b:	89 d0                	mov    %edx,%eax
f010874d:	01 c0                	add    %eax,%eax
f010874f:	01 d0                	add    %edx,%eax
f0108751:	c1 e0 03             	shl    $0x3,%eax
f0108754:	01 c8                	add    %ecx,%eax
f0108756:	05 c0 00 00 00       	add    $0xc0,%eax
f010875b:	8b 00                	mov    (%eax),%eax
f010875d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108760:	8b 45 08             	mov    0x8(%ebp),%eax
f0108763:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108769:	83 ec 08             	sub    $0x8,%esp
f010876c:	ff 75 e8             	pushl  -0x18(%ebp)
f010876f:	50                   	push   %eax
f0108770:	e8 0a fa ff ff       	call   f010817f <pt_get_page_permissions>
f0108775:	83 c4 10             	add    $0x10,%esp
f0108778:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f010877b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010877e:	83 e0 40             	and    $0x40,%eax
f0108781:	85 c0                	test   %eax,%eax
f0108783:	0f 95 c0             	setne  %al
f0108786:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108789:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010878c:	83 e0 20             	and    $0x20,%eax
f010878f:	85 c0                	test   %eax,%eax
f0108791:	0f 95 c0             	setne  %al
f0108794:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108797:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010879a:	25 00 02 00 00       	and    $0x200,%eax
f010879f:	85 c0                	test   %eax,%eax
f01087a1:	0f 95 c0             	setne  %al
f01087a4:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f01087a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087aa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01087ad:	89 d0                	mov    %edx,%eax
f01087af:	01 c0                	add    %eax,%eax
f01087b1:	01 d0                	add    %edx,%eax
f01087b3:	c1 e0 03             	shl    $0x3,%eax
f01087b6:	01 c8                	add    %ecx,%eax
f01087b8:	05 b8 00 00 00       	add    $0xb8,%eax
f01087bd:	8b 00                	mov    (%eax),%eax
f01087bf:	83 ec 04             	sub    $0x4,%esp
f01087c2:	50                   	push   %eax
f01087c3:	ff 75 ec             	pushl  -0x14(%ebp)
f01087c6:	68 c6 2e 13 f0       	push   $0xf0132ec6
f01087cb:	e8 61 86 ff ff       	call   f0100e31 <cprintf>
f01087d0:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01087d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087d6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01087d9:	89 d0                	mov    %edx,%eax
f01087db:	01 c0                	add    %eax,%eax
f01087dd:	01 d0                	add    %edx,%eax
f01087df:	c1 e0 03             	shl    $0x3,%eax
f01087e2:	01 c8                	add    %ecx,%eax
f01087e4:	05 c4 00 00 00       	add    $0xc4,%eax
f01087e9:	8b 18                	mov    (%eax),%ebx
f01087eb:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01087ef:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01087f3:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01087f7:	83 ec 08             	sub    $0x8,%esp
f01087fa:	53                   	push   %ebx
f01087fb:	ff 75 e4             	pushl  -0x1c(%ebp)
f01087fe:	51                   	push   %ecx
f01087ff:	52                   	push   %edx
f0108800:	50                   	push   %eax
f0108801:	68 d8 2e 13 f0       	push   $0xf0132ed8
f0108806:	e8 26 86 ff ff       	call   f0100e31 <cprintf>
f010880b:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f010880e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108811:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108817:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010881a:	75 10                	jne    f010882c <env_page_ws_print+0x297>
			{
				cprintf(" <--");
f010881c:	83 ec 0c             	sub    $0xc,%esp
f010881f:	68 1f 2f 13 f0       	push   $0xf0132f1f
f0108824:	e8 08 86 ff ff       	call   f0100e31 <cprintf>
f0108829:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010882c:	83 ec 0c             	sub    $0xc,%esp
f010882f:	68 c4 2e 13 f0       	push   $0xf0132ec4
f0108834:	e8 f8 85 ff ff       	call   f0100e31 <cprintf>
f0108839:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f010883c:	ff 45 ec             	incl   -0x14(%ebp)
f010883f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108842:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108848:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010884b:	0f 87 7a fe ff ff    	ja     f01086cb <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108851:	90                   	nop
f0108852:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108855:	c9                   	leave  
f0108856:	c3                   	ret    

f0108857 <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108857:	55                   	push   %ebp
f0108858:	89 e5                	mov    %esp,%ebp
f010885a:	53                   	push   %ebx
f010885b:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f010885e:	83 ec 0c             	sub    $0xc,%esp
f0108861:	68 24 2f 13 f0       	push   $0xf0132f24
f0108866:	e8 c6 85 ff ff       	call   f0100e31 <cprintf>
f010886b:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f010886e:	83 ec 0c             	sub    $0xc,%esp
f0108871:	68 59 2f 13 f0       	push   $0xf0132f59
f0108876:	e8 b6 85 ff ff       	call   f0100e31 <cprintf>
f010887b:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010887e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108885:	e9 19 01 00 00       	jmp    f01089a3 <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f010888a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010888d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108890:	89 d0                	mov    %edx,%eax
f0108892:	01 c0                	add    %eax,%eax
f0108894:	01 d0                	add    %edx,%eax
f0108896:	c1 e0 03             	shl    $0x3,%eax
f0108899:	01 c8                	add    %ecx,%eax
f010889b:	05 84 d5 01 00       	add    $0x1d584,%eax
f01088a0:	8a 00                	mov    (%eax),%al
f01088a2:	84 c0                	test   %al,%al
f01088a4:	74 43                	je     f01088e9 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f01088a6:	83 ec 0c             	sub    $0xc,%esp
f01088a9:	68 af 2e 13 f0       	push   $0xf0132eaf
f01088ae:	e8 7e 85 ff ff       	call   f0100e31 <cprintf>
f01088b3:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f01088b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01088b9:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f01088bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01088c2:	75 10                	jne    f01088d4 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f01088c4:	83 ec 0c             	sub    $0xc,%esp
f01088c7:	68 be 2e 13 f0       	push   $0xf0132ebe
f01088cc:	e8 60 85 ff ff       	call   f0100e31 <cprintf>
f01088d1:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01088d4:	83 ec 0c             	sub    $0xc,%esp
f01088d7:	68 c4 2e 13 f0       	push   $0xf0132ec4
f01088dc:	e8 50 85 ff ff       	call   f0100e31 <cprintf>
f01088e1:	83 c4 10             	add    $0x10,%esp
			continue;
f01088e4:	e9 b7 00 00 00       	jmp    f01089a0 <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01088e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01088ef:	89 d0                	mov    %edx,%eax
f01088f1:	01 c0                	add    %eax,%eax
f01088f3:	01 d0                	add    %edx,%eax
f01088f5:	c1 e0 03             	shl    $0x3,%eax
f01088f8:	01 c8                	add    %ecx,%eax
f01088fa:	05 80 d5 01 00       	add    $0x1d580,%eax
f01088ff:	8b 00                	mov    (%eax),%eax
f0108901:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108904:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108907:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010890a:	89 d0                	mov    %edx,%eax
f010890c:	01 c0                	add    %eax,%eax
f010890e:	01 d0                	add    %edx,%eax
f0108910:	c1 e0 03             	shl    $0x3,%eax
f0108913:	01 c8                	add    %ecx,%eax
f0108915:	05 80 d5 01 00       	add    $0x1d580,%eax
f010891a:	8b 00                	mov    (%eax),%eax
f010891c:	83 ec 04             	sub    $0x4,%esp
f010891f:	50                   	push   %eax
f0108920:	ff 75 f4             	pushl  -0xc(%ebp)
f0108923:	68 64 2f 13 f0       	push   $0xf0132f64
f0108928:	e8 04 85 ff ff       	call   f0100e31 <cprintf>
f010892d:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108930:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108933:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108936:	89 d0                	mov    %edx,%eax
f0108938:	01 c0                	add    %eax,%eax
f010893a:	01 d0                	add    %edx,%eax
f010893c:	c1 e0 03             	shl    $0x3,%eax
f010893f:	01 c8                	add    %ecx,%eax
f0108941:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108946:	8b 18                	mov    (%eax),%ebx
f0108948:	8b 45 08             	mov    0x8(%ebp),%eax
f010894b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108951:	83 ec 08             	sub    $0x8,%esp
f0108954:	ff 75 f0             	pushl  -0x10(%ebp)
f0108957:	50                   	push   %eax
f0108958:	e8 fe f8 ff ff       	call   f010825b <pd_is_table_used>
f010895d:	83 c4 10             	add    $0x10,%esp
f0108960:	83 ec 04             	sub    $0x4,%esp
f0108963:	53                   	push   %ebx
f0108964:	50                   	push   %eax
f0108965:	68 7c 2f 13 f0       	push   $0xf0132f7c
f010896a:	e8 c2 84 ff ff       	call   f0100e31 <cprintf>
f010896f:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108972:	8b 45 08             	mov    0x8(%ebp),%eax
f0108975:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010897b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010897e:	75 10                	jne    f0108990 <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f0108980:	83 ec 0c             	sub    $0xc,%esp
f0108983:	68 1f 2f 13 f0       	push   $0xf0132f1f
f0108988:	e8 a4 84 ff ff       	call   f0100e31 <cprintf>
f010898d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108990:	83 ec 0c             	sub    $0xc,%esp
f0108993:	68 c4 2e 13 f0       	push   $0xf0132ec4
f0108998:	e8 94 84 ff ff       	call   f0100e31 <cprintf>
f010899d:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01089a0:	ff 45 f4             	incl   -0xc(%ebp)
f01089a3:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01089a7:	0f 86 dd fe ff ff    	jbe    f010888a <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01089ad:	90                   	nop
f01089ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01089b1:	c9                   	leave  
f01089b2:	c3                   	ret    

f01089b3 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f01089b3:	55                   	push   %ebp
f01089b4:	89 e5                	mov    %esp,%ebp
f01089b6:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01089b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01089c0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01089c7:	eb 22                	jmp    f01089eb <env_table_ws_get_size+0x38>
f01089c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089cc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01089cf:	89 d0                	mov    %edx,%eax
f01089d1:	01 c0                	add    %eax,%eax
f01089d3:	01 d0                	add    %edx,%eax
f01089d5:	c1 e0 03             	shl    $0x3,%eax
f01089d8:	01 c8                	add    %ecx,%eax
f01089da:	05 84 d5 01 00       	add    $0x1d584,%eax
f01089df:	8a 00                	mov    (%eax),%al
f01089e1:	84 c0                	test   %al,%al
f01089e3:	75 03                	jne    f01089e8 <env_table_ws_get_size+0x35>
f01089e5:	ff 45 f8             	incl   -0x8(%ebp)
f01089e8:	ff 45 fc             	incl   -0x4(%ebp)
f01089eb:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01089ef:	7e d8                	jle    f01089c9 <env_table_ws_get_size+0x16>
	return counter;
f01089f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01089f4:	c9                   	leave  
f01089f5:	c3                   	ret    

f01089f6 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01089f6:	55                   	push   %ebp
f01089f7:	89 e5                	mov    %esp,%ebp
f01089f9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01089fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108a03:	eb 4e                	jmp    f0108a53 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108a05:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108a0b:	89 d0                	mov    %edx,%eax
f0108a0d:	01 c0                	add    %eax,%eax
f0108a0f:	01 d0                	add    %edx,%eax
f0108a11:	c1 e0 03             	shl    $0x3,%eax
f0108a14:	01 c8                	add    %ecx,%eax
f0108a16:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108a1b:	8b 00                	mov    (%eax),%eax
f0108a1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108a20:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a23:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108a28:	89 c2                	mov    %eax,%edx
f0108a2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108a30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108a33:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108a38:	39 c2                	cmp    %eax,%edx
f0108a3a:	75 14                	jne    f0108a50 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0108a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a3f:	83 ec 08             	sub    $0x8,%esp
f0108a42:	50                   	push   %eax
f0108a43:	ff 75 08             	pushl  0x8(%ebp)
f0108a46:	e8 bc 00 00 00       	call   f0108b07 <env_table_ws_clear_entry>
f0108a4b:	83 c4 10             	add    $0x10,%esp
			break;
f0108a4e:	eb 09                	jmp    f0108a59 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0108a50:	ff 45 f4             	incl   -0xc(%ebp)
f0108a53:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108a57:	7e ac                	jle    f0108a05 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108a59:	90                   	nop
f0108a5a:	c9                   	leave  
f0108a5b:	c3                   	ret    

f0108a5c <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108a5c:	55                   	push   %ebp
f0108a5d:	89 e5                	mov    %esp,%ebp
f0108a5f:	53                   	push   %ebx
f0108a60:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108a63:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108a67:	76 19                	jbe    f0108a82 <env_table_ws_set_entry+0x26>
f0108a69:	68 a0 2f 13 f0       	push   $0xf0132fa0
f0108a6e:	68 c6 2d 13 f0       	push   $0xf0132dc6
f0108a73:	68 07 01 00 00       	push   $0x107
f0108a78:	68 dc 2d 13 f0       	push   $0xf0132ddc
f0108a7d:	e8 2e 77 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108a82:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108a89:	76 19                	jbe    f0108aa4 <env_table_ws_set_entry+0x48>
f0108a8b:	68 fc 2d 13 f0       	push   $0xf0132dfc
f0108a90:	68 c6 2d 13 f0       	push   $0xf0132dc6
f0108a95:	68 08 01 00 00       	push   $0x108
f0108a9a:	68 dc 2d 13 f0       	push   $0xf0132ddc
f0108a9f:	e8 0c 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108aa4:	8b 45 10             	mov    0x10(%ebp),%eax
f0108aa7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108aaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108aad:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108ab2:	89 c1                	mov    %eax,%ecx
f0108ab4:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108ab7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108aba:	89 d0                	mov    %edx,%eax
f0108abc:	01 c0                	add    %eax,%eax
f0108abe:	01 d0                	add    %edx,%eax
f0108ac0:	c1 e0 03             	shl    $0x3,%eax
f0108ac3:	01 d8                	add    %ebx,%eax
f0108ac5:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108aca:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108acc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108acf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ad2:	89 d0                	mov    %edx,%eax
f0108ad4:	01 c0                	add    %eax,%eax
f0108ad6:	01 d0                	add    %edx,%eax
f0108ad8:	c1 e0 03             	shl    $0x3,%eax
f0108adb:	01 c8                	add    %ecx,%eax
f0108add:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108ae2:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0108ae5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ae8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108aeb:	89 d0                	mov    %edx,%eax
f0108aed:	01 c0                	add    %eax,%eax
f0108aef:	01 d0                	add    %edx,%eax
f0108af1:	c1 e0 03             	shl    $0x3,%eax
f0108af4:	01 c8                	add    %ecx,%eax
f0108af6:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108afb:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108b01:	90                   	nop
}
f0108b02:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108b05:	c9                   	leave  
f0108b06:	c3                   	ret    

f0108b07 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108b07:	55                   	push   %ebp
f0108b08:	89 e5                	mov    %esp,%ebp
f0108b0a:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108b0d:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108b11:	76 19                	jbe    f0108b2c <env_table_ws_clear_entry+0x25>
f0108b13:	68 a0 2f 13 f0       	push   $0xf0132fa0
f0108b18:	68 c6 2d 13 f0       	push   $0xf0132dc6
f0108b1d:	68 13 01 00 00       	push   $0x113
f0108b22:	68 dc 2d 13 f0       	push   $0xf0132ddc
f0108b27:	e8 84 76 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108b2c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b2f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b32:	89 d0                	mov    %edx,%eax
f0108b34:	01 c0                	add    %eax,%eax
f0108b36:	01 d0                	add    %edx,%eax
f0108b38:	c1 e0 03             	shl    $0x3,%eax
f0108b3b:	01 c8                	add    %ecx,%eax
f0108b3d:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108b42:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108b48:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b4b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b4e:	89 d0                	mov    %edx,%eax
f0108b50:	01 c0                	add    %eax,%eax
f0108b52:	01 d0                	add    %edx,%eax
f0108b54:	c1 e0 03             	shl    $0x3,%eax
f0108b57:	01 c8                	add    %ecx,%eax
f0108b59:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108b5e:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108b61:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b64:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b67:	89 d0                	mov    %edx,%eax
f0108b69:	01 c0                	add    %eax,%eax
f0108b6b:	01 d0                	add    %edx,%eax
f0108b6d:	c1 e0 03             	shl    $0x3,%eax
f0108b70:	01 c8                	add    %ecx,%eax
f0108b72:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108b77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108b7d:	90                   	nop
f0108b7e:	c9                   	leave  
f0108b7f:	c3                   	ret    

f0108b80 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108b80:	55                   	push   %ebp
f0108b81:	89 e5                	mov    %esp,%ebp
f0108b83:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108b86:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108b8a:	76 19                	jbe    f0108ba5 <env_table_ws_get_virtual_address+0x25>
f0108b8c:	68 a0 2f 13 f0       	push   $0xf0132fa0
f0108b91:	68 c6 2d 13 f0       	push   $0xf0132dc6
f0108b96:	68 1b 01 00 00       	push   $0x11b
f0108b9b:	68 dc 2d 13 f0       	push   $0xf0132ddc
f0108ba0:	e8 0b 76 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108ba5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ba8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108bab:	89 d0                	mov    %edx,%eax
f0108bad:	01 c0                	add    %eax,%eax
f0108baf:	01 d0                	add    %edx,%eax
f0108bb1:	c1 e0 03             	shl    $0x3,%eax
f0108bb4:	01 c8                	add    %ecx,%eax
f0108bb6:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108bbb:	8b 00                	mov    (%eax),%eax
f0108bbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108bc3:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108bc8:	c9                   	leave  
f0108bc9:	c3                   	ret    

f0108bca <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108bca:	55                   	push   %ebp
f0108bcb:	89 e5                	mov    %esp,%ebp
f0108bcd:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108bd0:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108bd4:	76 19                	jbe    f0108bef <env_table_ws_get_time_stamp+0x25>
f0108bd6:	68 a0 2f 13 f0       	push   $0xf0132fa0
f0108bdb:	68 c6 2d 13 f0       	push   $0xf0132dc6
f0108be0:	68 22 01 00 00       	push   $0x122
f0108be5:	68 dc 2d 13 f0       	push   $0xf0132ddc
f0108bea:	e8 c1 75 ff ff       	call   f01001b0 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108bef:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108bf2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108bf5:	89 d0                	mov    %edx,%eax
f0108bf7:	01 c0                	add    %eax,%eax
f0108bf9:	01 d0                	add    %edx,%eax
f0108bfb:	c1 e0 03             	shl    $0x3,%eax
f0108bfe:	01 c8                	add    %ecx,%eax
f0108c00:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108c05:	8b 00                	mov    (%eax),%eax
}
f0108c07:	c9                   	leave  
f0108c08:	c3                   	ret    

f0108c09 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108c09:	55                   	push   %ebp
f0108c0a:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108c0c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108c0f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c12:	89 d0                	mov    %edx,%eax
f0108c14:	01 c0                	add    %eax,%eax
f0108c16:	01 d0                	add    %edx,%eax
f0108c18:	c1 e0 03             	shl    $0x3,%eax
f0108c1b:	01 c8                	add    %ecx,%eax
f0108c1d:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108c22:	8a 00                	mov    (%eax),%al
f0108c24:	0f b6 c0             	movzbl %al,%eax
}
f0108c27:	5d                   	pop    %ebp
f0108c28:	c3                   	ret    

f0108c29 <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108c29:	55                   	push   %ebp
f0108c2a:	89 e5                	mov    %esp,%ebp
f0108c2c:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f0108c2f:	83 ec 04             	sub    $0x4,%esp
f0108c32:	68 d4 2f 13 f0       	push   $0xf0132fd4
f0108c37:	6a 1f                	push   $0x1f
f0108c39:	68 02 30 13 f0       	push   $0xf0133002
f0108c3e:	e8 6d 75 ff ff       	call   f01001b0 <_panic>

f0108c43 <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108c43:	55                   	push   %ebp
f0108c44:	89 e5                	mov    %esp,%ebp
f0108c46:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f0108c49:	83 ec 04             	sub    $0x4,%esp
f0108c4c:	68 20 30 13 f0       	push   $0xf0133020
f0108c51:	6a 32                	push   $0x32
f0108c53:	68 02 30 13 f0       	push   $0xf0133002
f0108c58:	e8 53 75 ff ff       	call   f01001b0 <_panic>

f0108c5d <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108c5d:	55                   	push   %ebp
f0108c5e:	89 e5                	mov    %esp,%ebp
f0108c60:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f0108c63:	83 ec 04             	sub    $0x4,%esp
f0108c66:	68 50 30 13 f0       	push   $0xf0133050
f0108c6b:	6a 41                	push   $0x41
f0108c6d:	68 02 30 13 f0       	push   $0xf0133002
f0108c72:	e8 39 75 ff ff       	call   f01001b0 <_panic>

f0108c77 <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108c77:	55                   	push   %ebp
f0108c78:	89 e5                	mov    %esp,%ebp
f0108c7a:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0108c7d:	83 ec 04             	sub    $0x4,%esp
f0108c80:	68 7c 30 13 f0       	push   $0xf013307c
f0108c85:	6a 4e                	push   $0x4e
f0108c87:	68 02 30 13 f0       	push   $0xf0133002
f0108c8c:	e8 1f 75 ff ff       	call   f01001b0 <_panic>

f0108c91 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108c91:	55                   	push   %ebp
f0108c92:	89 e5                	mov    %esp,%ebp
f0108c94:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108c97:	83 ec 04             	sub    $0x4,%esp
f0108c9a:	68 ac 30 13 f0       	push   $0xf01330ac
f0108c9f:	6a 57                	push   $0x57
f0108ca1:	68 02 30 13 f0       	push   $0xf0133002
f0108ca6:	e8 05 75 ff ff       	call   f01001b0 <_panic>

f0108cab <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108cab:	55                   	push   %ebp
f0108cac:	89 e5                	mov    %esp,%ebp
f0108cae:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f0108cb1:	83 ec 04             	sub    $0x4,%esp
f0108cb4:	68 e4 30 13 f0       	push   $0xf01330e4
f0108cb9:	6a 63                	push   $0x63
f0108cbb:	68 02 30 13 f0       	push   $0xf0133002
f0108cc0:	e8 eb 74 ff ff       	call   f01001b0 <_panic>

f0108cc5 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108cc5:	55                   	push   %ebp
f0108cc6:	89 e5                	mov    %esp,%ebp
f0108cc8:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108ccb:	e8 20 50 02 00       	call   f012dcf0 <inctst>
	return;
f0108cd0:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #10] [2] USER HEAP - allocate_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f0108cd1:	c9                   	leave  
f0108cd2:	c3                   	ret    

f0108cd3 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108cd3:	55                   	push   %ebp
f0108cd4:	89 e5                	mov    %esp,%ebp
f0108cd6:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108cd9:	e8 12 50 02 00       	call   f012dcf0 <inctst>
	return;
f0108cde:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f0108cdf:	c9                   	leave  
f0108ce0:	c3                   	ret    

f0108ce1 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108ce1:	55                   	push   %ebp
f0108ce2:	89 e5                	mov    %esp,%ebp
f0108ce4:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108ce7:	83 ec 04             	sub    $0x4,%esp
f0108cea:	68 1c 31 13 f0       	push   $0xf013311c
f0108cef:	68 99 00 00 00       	push   $0x99
f0108cf4:	68 02 30 13 f0       	push   $0xf0133002
f0108cf9:	e8 b2 74 ff ff       	call   f01001b0 <_panic>

f0108cfe <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108cfe:	55                   	push   %ebp
f0108cff:	89 e5                	mov    %esp,%ebp
f0108d01:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - BONUS] [2] USER HEAP - move_user_mem() [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108d04:	83 ec 04             	sub    $0x4,%esp
f0108d07:	68 5c 31 13 f0       	push   $0xf013315c
f0108d0c:	68 a3 00 00 00       	push   $0xa3
f0108d11:	68 02 30 13 f0       	push   $0xf0133002
f0108d16:	e8 95 74 ff ff       	call   f01001b0 <_panic>

f0108d1b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108d1b:	55                   	push   %ebp
f0108d1c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108d1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d21:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f0108d27:	29 d0                	sub    %edx,%eax
f0108d29:	c1 f8 02             	sar    $0x2,%eax
f0108d2c:	89 c2                	mov    %eax,%edx
f0108d2e:	89 d0                	mov    %edx,%eax
f0108d30:	c1 e0 03             	shl    $0x3,%eax
f0108d33:	01 d0                	add    %edx,%eax
f0108d35:	c1 e0 03             	shl    $0x3,%eax
f0108d38:	01 d0                	add    %edx,%eax
f0108d3a:	c1 e0 03             	shl    $0x3,%eax
f0108d3d:	01 d0                	add    %edx,%eax
f0108d3f:	c1 e0 03             	shl    $0x3,%eax
f0108d42:	01 d0                	add    %edx,%eax
f0108d44:	89 c1                	mov    %eax,%ecx
f0108d46:	c1 e1 0f             	shl    $0xf,%ecx
f0108d49:	01 c8                	add    %ecx,%eax
f0108d4b:	c1 e0 03             	shl    $0x3,%eax
f0108d4e:	01 d0                	add    %edx,%eax
f0108d50:	f7 d8                	neg    %eax
}
f0108d52:	5d                   	pop    %ebp
f0108d53:	c3                   	ret    

f0108d54 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108d54:	55                   	push   %ebp
f0108d55:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108d57:	ff 75 08             	pushl  0x8(%ebp)
f0108d5a:	e8 bc ff ff ff       	call   f0108d1b <to_frame_number>
f0108d5f:	83 c4 04             	add    $0x4,%esp
f0108d62:	c1 e0 0c             	shl    $0xc,%eax
}
f0108d65:	c9                   	leave  
f0108d66:	c3                   	ret    

f0108d67 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108d67:	55                   	push   %ebp
f0108d68:	89 e5                	mov    %esp,%ebp
f0108d6a:	57                   	push   %edi
f0108d6b:	56                   	push   %esi
f0108d6c:	53                   	push   %ebx
f0108d6d:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108d73:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108d7a:	83 ec 0c             	sub    $0xc,%esp
f0108d7d:	ff 75 08             	pushl  0x8(%ebp)
f0108d80:	e8 df 21 00 00       	call   f010af64 <get_user_program_info>
f0108d85:	83 c4 10             	add    $0x10,%esp
f0108d88:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108d8b:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108d8f:	75 0a                	jne    f0108d9b <env_create+0x34>
f0108d91:	b8 00 00 00 00       	mov    $0x0,%eax
f0108d96:	e9 45 0c 00 00       	jmp    f01099e0 <env_create+0xc79>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108d9b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d9e:	8b 40 08             	mov    0x8(%eax),%eax
f0108da1:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108da4:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0108dab:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108dae:	83 ec 0c             	sub    $0xc,%esp
f0108db1:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0108db7:	50                   	push   %eax
f0108db8:	e8 aa 0f 00 00       	call   f0109d67 <allocate_environment>
f0108dbd:	83 c4 10             	add    $0x10,%esp
f0108dc0:	85 c0                	test   %eax,%eax
f0108dc2:	79 0a                	jns    f0108dce <env_create+0x67>
	{
		return 0;
f0108dc4:	b8 00 00 00 00       	mov    $0x0,%eax
f0108dc9:	e9 12 0c 00 00       	jmp    f01099e0 <env_create+0xc79>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108dce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108dd1:	8b 00                	mov    (%eax),%eax
f0108dd3:	83 ec 0c             	sub    $0xc,%esp
f0108dd6:	50                   	push   %eax
f0108dd7:	e8 c0 62 02 00       	call   f012f09c <strlen>
f0108ddc:	83 c4 10             	add    $0x10,%esp
f0108ddf:	83 f8 3f             	cmp    $0x3f,%eax
f0108de2:	7f 1d                	jg     f0108e01 <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108de4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108de7:	8b 00                	mov    (%eax),%eax
f0108de9:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108def:	83 c2 5c             	add    $0x5c,%edx
f0108df2:	83 ec 08             	sub    $0x8,%esp
f0108df5:	50                   	push   %eax
f0108df6:	52                   	push   %edx
f0108df7:	e8 ef 62 02 00       	call   f012f0eb <strcpy>
f0108dfc:	83 c4 10             	add    $0x10,%esp
f0108dff:	eb 1d                	jmp    f0108e1e <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108e01:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108e04:	8b 00                	mov    (%eax),%eax
f0108e06:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108e0c:	83 c2 5c             	add    $0x5c,%edx
f0108e0f:	83 ec 04             	sub    $0x4,%esp
f0108e12:	6a 3f                	push   $0x3f
f0108e14:	50                   	push   %eax
f0108e15:	52                   	push   %edx
f0108e16:	e8 fe 62 02 00       	call   f012f119 <strncpy>
f0108e1b:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108e1e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0108e25:	00 00 00 

		allocate_frame(&p) ;
f0108e28:	83 ec 0c             	sub    $0xc,%esp
f0108e2b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0108e31:	50                   	push   %eax
f0108e32:	e8 ee e4 ff ff       	call   f0107325 <allocate_frame>
f0108e37:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0108e3a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108e40:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108e46:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108e4c:	83 ec 0c             	sub    $0xc,%esp
f0108e4f:	50                   	push   %eax
f0108e50:	e8 ff fe ff ff       	call   f0108d54 <to_physical_address>
f0108e55:	83 c4 10             	add    $0x10,%esp
f0108e58:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108e5b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108e5e:	c1 e8 0c             	shr    $0xc,%eax
f0108e61:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108e64:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0108e69:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108e6c:	72 17                	jb     f0108e85 <env_create+0x11e>
f0108e6e:	ff 75 b0             	pushl  -0x50(%ebp)
f0108e71:	68 88 31 13 f0       	push   $0xf0133188
f0108e76:	68 8a 00 00 00       	push   $0x8a
f0108e7b:	68 b7 31 13 f0       	push   $0xf01331b7
f0108e80:	e8 2b 73 ff ff       	call   f01001b0 <_panic>
f0108e85:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108e88:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108e8d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0108e90:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108e96:	83 ec 0c             	sub    $0xc,%esp
f0108e99:	50                   	push   %eax
f0108e9a:	e8 b5 fe ff ff       	call   f0108d54 <to_physical_address>
f0108e9f:	83 c4 10             	add    $0x10,%esp
f0108ea2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108ea5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108eab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108eae:	89 90 7c d5 01 00    	mov    %edx,0x1d57c(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108eb4:	83 ec 0c             	sub    $0xc,%esp
f0108eb7:	6a 02                	push   $0x2
f0108eb9:	e8 21 4a 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f0108ebe:	83 c4 10             	add    $0x10,%esp
f0108ec1:	85 c0                	test   %eax,%eax
f0108ec3:	74 21                	je     f0108ee6 <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0108ec5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ecb:	8b 55 10             	mov    0x10(%ebp),%edx
f0108ece:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108ed4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108eda:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108edd:	2b 55 10             	sub    0x10(%ebp),%edx
f0108ee0:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108ee6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108eea:	75 12                	jne    f0108efe <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108eec:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ef2:	c7 80 70 da 01 00 0a 	movl   $0xa,0x1da70(%eax)
f0108ef9:	00 00 00 
f0108efc:	eb 0f                	jmp    f0108f0d <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108efe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f04:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f07:	89 90 70 da 01 00    	mov    %edx,0x1da70(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108f0d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f13:	83 ec 04             	sub    $0x4,%esp
f0108f16:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108f19:	ff 75 a8             	pushl  -0x58(%ebp)
f0108f1c:	50                   	push   %eax
f0108f1d:	e8 95 16 00 00       	call   f010a5b7 <initialize_environment>
f0108f22:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108f25:	0f 20 d8             	mov    %cr3,%eax
f0108f28:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108f2b:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108f2e:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108f31:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f37:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0108f3d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108f43:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f49:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108f4c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108f53:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108f5a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f60:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108f66:	48                   	dec    %eax
f0108f67:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108f6a:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0108f71:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108f74:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108f7a:	83 ec 08             	sub    $0x8,%esp
f0108f7d:	ff 75 b8             	pushl  -0x48(%ebp)
f0108f80:	50                   	push   %eax
f0108f81:	e8 9a 1d 00 00       	call   f010ad20 <PROGRAM_SEGMENT_FIRST>
f0108f86:	83 c4 0c             	add    $0xc,%esp
f0108f89:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108f8f:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108f95:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108f9a:	89 c7                	mov    %eax,%edi
f0108f9c:	89 d6                	mov    %edx,%esi
f0108f9e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108fa0:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108fa6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108fa9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108fac:	8b 40 10             	mov    0x10(%eax),%eax
f0108faf:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108fb2:	75 07                	jne    f0108fbb <env_create+0x254>
f0108fb4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108fbb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108fbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108fc1:	e9 24 03 00 00       	jmp    f01092ea <env_create+0x583>
	{
		segment_counter++;
f0108fc6:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108fc9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0108fd0:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108fd3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108fd9:	83 ec 0c             	sub    $0xc,%esp
f0108fdc:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0108fe2:	52                   	push   %edx
f0108fe3:	ff 75 dc             	pushl  -0x24(%ebp)
f0108fe6:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108fec:	52                   	push   %edx
f0108fed:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108ff0:	50                   	push   %eax
f0108ff1:	e8 2f 0e 00 00       	call   f0109e25 <program_segment_alloc_map_copy_workingset>
f0108ff6:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108ff9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108fff:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109002:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109005:	8b 00                	mov    (%eax),%eax
f0109007:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f010900a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010900d:	8b 40 0c             	mov    0xc(%eax),%eax
f0109010:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0109013:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109016:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0109019:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010901c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109021:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0109024:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010902b:	8b 55 90             	mov    -0x70(%ebp),%edx
f010902e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109031:	01 d0                	add    %edx,%eax
f0109033:	48                   	dec    %eax
f0109034:	89 45 80             	mov    %eax,-0x80(%ebp)
f0109037:	8b 45 80             	mov    -0x80(%ebp),%eax
f010903a:	ba 00 00 00 00       	mov    $0x0,%edx
f010903f:	f7 75 84             	divl   -0x7c(%ebp)
f0109042:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109045:	29 d0                	sub    %edx,%eax
f0109047:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f010904d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109050:	2b 45 88             	sub    -0x78(%ebp),%eax
f0109053:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0109059:	a1 48 be 2b f0       	mov    0xf02bbe48,%eax
f010905e:	83 ec 04             	sub    $0x4,%esp
f0109061:	68 00 10 00 00       	push   $0x1000
f0109066:	6a 00                	push   $0x0
f0109068:	50                   	push   %eax
f0109069:	e8 1c 62 02 00       	call   f012f28a <memset>
f010906e:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0109071:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109074:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109077:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f010907d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109083:	01 d0                	add    %edx,%eax
f0109085:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109088:	8b 45 90             	mov    -0x70(%ebp),%eax
f010908b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010908e:	eb 13                	jmp    f01090a3 <env_create+0x33c>
		{
			*dst_ptr = *src_ptr ;
f0109090:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109093:	8a 10                	mov    (%eax),%dl
f0109095:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109098:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010909a:	ff 45 cc             	incl   -0x34(%ebp)
f010909d:	ff 45 d4             	incl   -0x2c(%ebp)
f01090a0:	ff 45 d0             	incl   -0x30(%ebp)
f01090a3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090a6:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f01090ac:	72 e2                	jb     f0109090 <env_create+0x329>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01090ae:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f01090b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01090ba:	83 ec 04             	sub    $0x4,%esp
f01090bd:	52                   	push   %edx
f01090be:	ff 75 88             	pushl  -0x78(%ebp)
f01090c1:	50                   	push   %eax
f01090c2:	e8 04 ae ff ff       	call   f0103ecb <pf_add_env_page>
f01090c7:	83 c4 10             	add    $0x10,%esp
f01090ca:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01090cd:	75 17                	jne    f01090e6 <env_create+0x37f>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01090cf:	83 ec 04             	sub    $0x4,%esp
f01090d2:	68 d4 31 13 f0       	push   $0xf01331d4
f01090d7:	68 de 00 00 00       	push   $0xde
f01090dc:	68 b7 31 13 f0       	push   $0xf01331b7
f01090e1:	e8 ca 70 ff ff       	call   f01001b0 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f01090e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01090e9:	8b 50 04             	mov    0x4(%eax),%edx
f01090ec:	8b 45 90             	mov    -0x70(%ebp),%eax
f01090ef:	01 d0                	add    %edx,%eax
f01090f1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01090f7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01090fd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109102:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109108:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010910b:	8b 50 04             	mov    0x4(%eax),%edx
f010910e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109111:	01 d0                	add    %edx,%eax
f0109113:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109119:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010911f:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109122:	eb 43                	jmp    f0109167 <env_create+0x400>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109124:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109127:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010912d:	83 ec 04             	sub    $0x4,%esp
f0109130:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109133:	52                   	push   %edx
f0109134:	50                   	push   %eax
f0109135:	e8 91 ad ff ff       	call   f0103ecb <pf_add_env_page>
f010913a:	83 c4 10             	add    $0x10,%esp
f010913d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109140:	75 17                	jne    f0109159 <env_create+0x3f2>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109142:	83 ec 04             	sub    $0x4,%esp
f0109145:	68 d4 31 13 f0       	push   $0xf01331d4
f010914a:	68 eb 00 00 00       	push   $0xeb
f010914f:	68 b7 31 13 f0       	push   $0xf01331b7
f0109154:	e8 57 70 ff ff       	call   f01001b0 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109159:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109160:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0109167:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010916a:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0109170:	72 b2                	jb     f0109124 <env_create+0x3bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0109172:	a1 48 be 2b f0       	mov    0xf02bbe48,%eax
f0109177:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f010917a:	83 ec 04             	sub    $0x4,%esp
f010917d:	68 00 10 00 00       	push   $0x1000
f0109182:	6a 00                	push   $0x0
f0109184:	ff 75 d0             	pushl  -0x30(%ebp)
f0109187:	e8 fe 60 02 00       	call   f012f28a <memset>
f010918c:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010918f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109195:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109198:	eb 13                	jmp    f01091ad <env_create+0x446>
		{
			*dst_ptr = *src_ptr;
f010919a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010919d:	8a 10                	mov    (%eax),%dl
f010919f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01091a2:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01091a4:	ff 45 cc             	incl   -0x34(%ebp)
f01091a7:	ff 45 d4             	incl   -0x2c(%ebp)
f01091aa:	ff 45 d0             	incl   -0x30(%ebp)
f01091ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01091b0:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f01091b6:	72 e2                	jb     f010919a <env_create+0x433>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01091b8:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f01091be:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01091c4:	83 ec 04             	sub    $0x4,%esp
f01091c7:	52                   	push   %edx
f01091c8:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f01091ce:	50                   	push   %eax
f01091cf:	e8 f7 ac ff ff       	call   f0103ecb <pf_add_env_page>
f01091d4:	83 c4 10             	add    $0x10,%esp
f01091d7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091da:	75 17                	jne    f01091f3 <env_create+0x48c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091dc:	83 ec 04             	sub    $0x4,%esp
f01091df:	68 d4 31 13 f0       	push   $0xf01331d4
f01091e4:	68 fa 00 00 00       	push   $0xfa
f01091e9:	68 b7 31 13 f0       	push   $0xf01331b7
f01091ee:	e8 bd 6f ff ff       	call   f01001b0 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f01091f3:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01091fa:	10 00 00 
f01091fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109200:	8b 50 04             	mov    0x4(%eax),%edx
f0109203:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109206:	01 c2                	add    %eax,%edx
f0109208:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010920e:	01 d0                	add    %edx,%eax
f0109210:	48                   	dec    %eax
f0109211:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0109217:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010921d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109222:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0109228:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010922e:	29 d0                	sub    %edx,%eax
f0109230:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109233:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109236:	8b 50 08             	mov    0x8(%eax),%edx
f0109239:	8b 45 90             	mov    -0x70(%ebp),%eax
f010923c:	01 d0                	add    %edx,%eax
f010923e:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0109241:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109247:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010924e:	eb 41                	jmp    f0109291 <env_create+0x52a>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109250:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109256:	83 ec 04             	sub    $0x4,%esp
f0109259:	6a 01                	push   $0x1
f010925b:	ff 75 c8             	pushl  -0x38(%ebp)
f010925e:	50                   	push   %eax
f010925f:	e8 31 ab ff ff       	call   f0103d95 <pf_add_empty_env_page>
f0109264:	83 c4 10             	add    $0x10,%esp
f0109267:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010926a:	75 17                	jne    f0109283 <env_create+0x51c>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010926c:	83 ec 04             	sub    $0x4,%esp
f010926f:	68 d4 31 13 f0       	push   $0xf01331d4
f0109274:	68 07 01 00 00       	push   $0x107
f0109279:	68 b7 31 13 f0       	push   $0xf01331b7
f010927e:	e8 2d 6f ff ff       	call   f01001b0 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109283:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010928a:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109291:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0109298:	10 00 00 
f010929b:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f01092a1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01092a7:	01 d0                	add    %edx,%eax
f01092a9:	48                   	dec    %eax
f01092aa:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01092b0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01092b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01092bb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01092c1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01092c7:	29 d0                	sub    %edx,%eax
f01092c9:	89 c2                	mov    %eax,%edx
f01092cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01092ce:	39 c2                	cmp    %eax,%edx
f01092d0:	0f 87 7a ff ff ff    	ja     f0109250 <env_create+0x4e9>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01092d6:	83 ec 08             	sub    $0x8,%esp
f01092d9:	ff 75 b8             	pushl  -0x48(%ebp)
f01092dc:	ff 75 e4             	pushl  -0x1c(%ebp)
f01092df:	e8 31 19 00 00       	call   f010ac15 <PROGRAM_SEGMENT_NEXT>
f01092e4:	83 c4 10             	add    $0x10,%esp
f01092e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01092ea:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01092ee:	0f 85 d2 fc ff ff    	jne    f0108fc6 <env_create+0x25f>
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
f01092f4:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f01092fb:	e9 a7 00 00 00       	jmp    f01093a7 <env_create+0x640>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109300:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109306:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109309:	89 d0                	mov    %edx,%eax
f010930b:	01 c0                	add    %eax,%eax
f010930d:	01 d0                	add    %edx,%eax
f010930f:	c1 e0 03             	shl    $0x3,%eax
f0109312:	01 c8                	add    %ecx,%eax
f0109314:	05 bc 00 00 00       	add    $0xbc,%eax
f0109319:	8a 00                	mov    (%eax),%al
f010931b:	84 c0                	test   %al,%al
f010931d:	0f 85 81 00 00 00    	jne    f01093a4 <env_create+0x63d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109323:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109329:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010932c:	89 d0                	mov    %edx,%eax
f010932e:	01 c0                	add    %eax,%eax
f0109330:	01 d0                	add    %edx,%eax
f0109332:	c1 e0 03             	shl    $0x3,%eax
f0109335:	01 c8                	add    %ecx,%eax
f0109337:	05 b8 00 00 00       	add    $0xb8,%eax
f010933c:	8b 00                	mov    (%eax),%eax
f010933e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0109344:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010934a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109350:	83 ec 04             	sub    $0x4,%esp
f0109353:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f0109359:	52                   	push   %edx
f010935a:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0109360:	50                   	push   %eax
f0109361:	e8 81 e1 ff ff       	call   f01074e7 <get_page_table>
f0109366:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0109369:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010936f:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0109375:	c1 ea 0c             	shr    $0xc,%edx
f0109378:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010937e:	c1 e2 02             	shl    $0x2,%edx
f0109381:	01 d0                	add    %edx,%eax
f0109383:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0109389:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f010938f:	c1 e9 0c             	shr    $0xc,%ecx
f0109392:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109398:	c1 e1 02             	shl    $0x2,%ecx
f010939b:	01 ca                	add    %ecx,%edx
f010939d:	8b 12                	mov    (%edx),%edx
f010939f:	83 e2 bf             	and    $0xffffffbf,%edx
f01093a2:	89 10                	mov    %edx,(%eax)
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01093a4:	ff 45 c4             	incl   -0x3c(%ebp)
f01093a7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093ad:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01093b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01093b6:	39 c2                	cmp    %eax,%edx
f01093b8:	0f 87 42 ff ff ff    	ja     f0109300 <env_create+0x599>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01093be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01093c1:	8b 50 08             	mov    0x8(%eax),%edx
f01093c4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093ca:	83 ec 08             	sub    $0x8,%esp
f01093cd:	52                   	push   %edx
f01093ce:	50                   	push   %eax
f01093cf:	e8 01 18 00 00       	call   f010abd5 <set_environment_entry_point>
f01093d4:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f01093d7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093dd:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f01093e4:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01093e7:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f01093ee:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01093f1:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01093f8:	e9 3c 05 00 00       	jmp    f0109939 <env_create+0xbd2>
	{
		struct FrameInfo *pp = NULL;
f01093fd:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f0109404:	00 00 00 
		allocate_frame(&pp);
f0109407:	83 ec 0c             	sub    $0xc,%esp
f010940a:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0109410:	50                   	push   %eax
f0109411:	e8 0f df ff ff       	call   f0107325 <allocate_frame>
f0109416:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109419:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010941f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109425:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010942b:	6a 06                	push   $0x6
f010942d:	ff 75 c0             	pushl  -0x40(%ebp)
f0109430:	52                   	push   %edx
f0109431:	50                   	push   %eax
f0109432:	e8 3f e4 ff ff       	call   f0107876 <loadtime_map_frame>
f0109437:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010943a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010943d:	83 ec 04             	sub    $0x4,%esp
f0109440:	68 00 10 00 00       	push   $0x1000
f0109445:	6a 00                	push   $0x0
f0109447:	50                   	push   %eax
f0109448:	e8 3d 5e 02 00       	call   f012f28a <memset>
f010944d:	83 c4 10             	add    $0x10,%esp
			else
			{
				e->page_last_WS_element = NULL;
			}
#else
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0109450:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109456:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010945c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109462:	83 ec 04             	sub    $0x4,%esp
f0109465:	ff 75 c0             	pushl  -0x40(%ebp)
f0109468:	52                   	push   %edx
f0109469:	50                   	push   %eax
f010946a:	e8 3f ef ff ff       	call   f01083ae <env_page_ws_set_entry>
f010946f:	83 c4 10             	add    $0x10,%esp
			uint32 lastWSIndex = e->page_last_WS_index ++;
f0109472:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109478:	8b 82 78 d5 01 00    	mov    0x1d578(%edx),%eax
f010947e:	8d 48 01             	lea    0x1(%eax),%ecx
f0109481:	89 8a 78 d5 01 00    	mov    %ecx,0x1d578(%edx)
f0109487:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
			e->page_last_WS_index %= (e->page_WS_max_size);
f010948d:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109493:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109499:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010949f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01094a5:	8b 9a 7c d5 01 00    	mov    0x1d57c(%edx),%ebx
f01094ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01094b0:	f7 f3                	div    %ebx
f01094b2:	89 d0                	mov    %edx,%eax
f01094b4:	89 81 78 d5 01 00    	mov    %eax,0x1d578(%ecx)
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01094ba:	83 ec 0c             	sub    $0xc,%esp
f01094bd:	6a 02                	push   $0x2
f01094bf:	e8 1b 44 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f01094c4:	83 c4 10             	add    $0x10,%esp
f01094c7:	85 c0                	test   %eax,%eax
f01094c9:	0f 84 46 04 00 00    	je     f0109915 <env_create+0xbae>
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
				}
#else
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01094cf:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01094d5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01094db:	89 d0                	mov    %edx,%eax
f01094dd:	01 c0                	add    %eax,%eax
f01094df:	01 d0                	add    %edx,%eax
f01094e1:	c1 e0 03             	shl    $0x3,%eax
f01094e4:	05 b0 00 00 00       	add    $0xb0,%eax
f01094e9:	01 c8                	add    %ecx,%eax
f01094eb:	83 c0 08             	add    $0x8,%eax
f01094ee:	85 c0                	test   %eax,%eax
f01094f0:	75 17                	jne    f0109509 <env_create+0x7a2>
f01094f2:	83 ec 04             	sub    $0x4,%esp
f01094f5:	68 19 32 13 f0       	push   $0xf0133219
f01094fa:	68 67 01 00 00       	push   $0x167
f01094ff:	68 b7 31 13 f0       	push   $0xf01331b7
f0109504:	e8 a7 6c ff ff       	call   f01001b0 <_panic>
f0109509:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010950f:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109515:	89 d0                	mov    %edx,%eax
f0109517:	01 c0                	add    %eax,%eax
f0109519:	01 d0                	add    %edx,%eax
f010951b:	c1 e0 03             	shl    $0x3,%eax
f010951e:	01 c8                	add    %ecx,%eax
f0109520:	05 c8 00 00 00       	add    $0xc8,%eax
f0109525:	8b 00                	mov    (%eax),%eax
f0109527:	85 c0                	test   %eax,%eax
f0109529:	74 41                	je     f010956c <env_create+0x805>
f010952b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109531:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109537:	89 d0                	mov    %edx,%eax
f0109539:	01 c0                	add    %eax,%eax
f010953b:	01 d0                	add    %edx,%eax
f010953d:	c1 e0 03             	shl    $0x3,%eax
f0109540:	01 c8                	add    %ecx,%eax
f0109542:	05 c8 00 00 00       	add    $0xc8,%eax
f0109547:	8b 10                	mov    (%eax),%edx
f0109549:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010954f:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109555:	89 c8                	mov    %ecx,%eax
f0109557:	01 c0                	add    %eax,%eax
f0109559:	01 c8                	add    %ecx,%eax
f010955b:	c1 e0 03             	shl    $0x3,%eax
f010955e:	01 d8                	add    %ebx,%eax
f0109560:	05 cc 00 00 00       	add    $0xcc,%eax
f0109565:	8b 00                	mov    (%eax),%eax
f0109567:	89 42 14             	mov    %eax,0x14(%edx)
f010956a:	eb 2a                	jmp    f0109596 <env_create+0x82f>
f010956c:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109572:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109578:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010957e:	89 c8                	mov    %ecx,%eax
f0109580:	01 c0                	add    %eax,%eax
f0109582:	01 c8                	add    %ecx,%eax
f0109584:	c1 e0 03             	shl    $0x3,%eax
f0109587:	01 d8                	add    %ebx,%eax
f0109589:	05 cc 00 00 00       	add    $0xcc,%eax
f010958e:	8b 00                	mov    (%eax),%eax
f0109590:	89 82 38 da 01 00    	mov    %eax,0x1da38(%edx)
f0109596:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010959c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095a2:	89 d0                	mov    %edx,%eax
f01095a4:	01 c0                	add    %eax,%eax
f01095a6:	01 d0                	add    %edx,%eax
f01095a8:	c1 e0 03             	shl    $0x3,%eax
f01095ab:	01 c8                	add    %ecx,%eax
f01095ad:	05 cc 00 00 00       	add    $0xcc,%eax
f01095b2:	8b 00                	mov    (%eax),%eax
f01095b4:	85 c0                	test   %eax,%eax
f01095b6:	74 41                	je     f01095f9 <env_create+0x892>
f01095b8:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01095be:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095c4:	89 d0                	mov    %edx,%eax
f01095c6:	01 c0                	add    %eax,%eax
f01095c8:	01 d0                	add    %edx,%eax
f01095ca:	c1 e0 03             	shl    $0x3,%eax
f01095cd:	01 c8                	add    %ecx,%eax
f01095cf:	05 cc 00 00 00       	add    $0xcc,%eax
f01095d4:	8b 10                	mov    (%eax),%edx
f01095d6:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01095dc:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01095e2:	89 c8                	mov    %ecx,%eax
f01095e4:	01 c0                	add    %eax,%eax
f01095e6:	01 c8                	add    %ecx,%eax
f01095e8:	c1 e0 03             	shl    $0x3,%eax
f01095eb:	01 d8                	add    %ebx,%eax
f01095ed:	05 c8 00 00 00       	add    $0xc8,%eax
f01095f2:	8b 00                	mov    (%eax),%eax
f01095f4:	89 42 10             	mov    %eax,0x10(%edx)
f01095f7:	eb 2a                	jmp    f0109623 <env_create+0x8bc>
f01095f9:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01095ff:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109605:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010960b:	89 c8                	mov    %ecx,%eax
f010960d:	01 c0                	add    %eax,%eax
f010960f:	01 c8                	add    %ecx,%eax
f0109611:	c1 e0 03             	shl    $0x3,%eax
f0109614:	01 d8                	add    %ebx,%eax
f0109616:	05 c8 00 00 00       	add    $0xc8,%eax
f010961b:	8b 00                	mov    (%eax),%eax
f010961d:	89 82 34 da 01 00    	mov    %eax,0x1da34(%edx)
f0109623:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109629:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010962f:	89 d0                	mov    %edx,%eax
f0109631:	01 c0                	add    %eax,%eax
f0109633:	01 d0                	add    %edx,%eax
f0109635:	c1 e0 03             	shl    $0x3,%eax
f0109638:	01 c8                	add    %ecx,%eax
f010963a:	05 c8 00 00 00       	add    $0xc8,%eax
f010963f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109645:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010964b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109651:	89 d0                	mov    %edx,%eax
f0109653:	01 c0                	add    %eax,%eax
f0109655:	01 d0                	add    %edx,%eax
f0109657:	c1 e0 03             	shl    $0x3,%eax
f010965a:	01 c8                	add    %ecx,%eax
f010965c:	05 cc 00 00 00       	add    $0xcc,%eax
f0109661:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109667:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010966d:	8b 90 40 da 01 00    	mov    0x1da40(%eax),%edx
f0109673:	4a                   	dec    %edx
f0109674:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f010967a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109680:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109686:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010968c:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0109692:	39 c2                	cmp    %eax,%edx
f0109694:	0f 83 40 01 00 00    	jae    f01097da <env_create+0xa73>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010969a:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01096a0:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01096a6:	89 d0                	mov    %edx,%eax
f01096a8:	01 c0                	add    %eax,%eax
f01096aa:	01 d0                	add    %edx,%eax
f01096ac:	c1 e0 03             	shl    $0x3,%eax
f01096af:	05 b0 00 00 00       	add    $0xb0,%eax
f01096b4:	01 c8                	add    %ecx,%eax
f01096b6:	83 c0 08             	add    $0x8,%eax
f01096b9:	85 c0                	test   %eax,%eax
f01096bb:	75 17                	jne    f01096d4 <env_create+0x96d>
f01096bd:	83 ec 04             	sub    $0x4,%esp
f01096c0:	68 38 32 13 f0       	push   $0xf0133238
f01096c5:	68 6c 01 00 00       	push   $0x16c
f01096ca:	68 b7 31 13 f0       	push   $0xf01331b7
f01096cf:	e8 dc 6a ff ff       	call   f01001b0 <_panic>
f01096d4:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01096da:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01096e0:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f01096e6:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f01096ec:	89 d8                	mov    %ebx,%eax
f01096ee:	01 c0                	add    %eax,%eax
f01096f0:	01 d8                	add    %ebx,%eax
f01096f2:	c1 e0 03             	shl    $0x3,%eax
f01096f5:	01 d0                	add    %edx,%eax
f01096f7:	05 c8 00 00 00       	add    $0xc8,%eax
f01096fc:	89 08                	mov    %ecx,(%eax)
f01096fe:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109704:	89 c8                	mov    %ecx,%eax
f0109706:	01 c0                	add    %eax,%eax
f0109708:	01 c8                	add    %ecx,%eax
f010970a:	c1 e0 03             	shl    $0x3,%eax
f010970d:	01 d0                	add    %edx,%eax
f010970f:	05 c8 00 00 00       	add    $0xc8,%eax
f0109714:	8b 00                	mov    (%eax),%eax
f0109716:	85 c0                	test   %eax,%eax
f0109718:	74 30                	je     f010974a <env_create+0x9e3>
f010971a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109720:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f0109726:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010972c:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109732:	89 c8                	mov    %ecx,%eax
f0109734:	01 c0                	add    %eax,%eax
f0109736:	01 c8                	add    %ecx,%eax
f0109738:	c1 e0 03             	shl    $0x3,%eax
f010973b:	05 b0 00 00 00       	add    $0xb0,%eax
f0109740:	01 d8                	add    %ebx,%eax
f0109742:	83 c0 08             	add    $0x8,%eax
f0109745:	89 42 14             	mov    %eax,0x14(%edx)
f0109748:	eb 2b                	jmp    f0109775 <env_create+0xa0e>
f010974a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109750:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109756:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010975c:	89 c8                	mov    %ecx,%eax
f010975e:	01 c0                	add    %eax,%eax
f0109760:	01 c8                	add    %ecx,%eax
f0109762:	c1 e0 03             	shl    $0x3,%eax
f0109765:	05 b0 00 00 00       	add    $0xb0,%eax
f010976a:	01 d8                	add    %ebx,%eax
f010976c:	83 c0 08             	add    $0x8,%eax
f010976f:	89 82 48 da 01 00    	mov    %eax,0x1da48(%edx)
f0109775:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010977b:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109781:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109787:	89 c8                	mov    %ecx,%eax
f0109789:	01 c0                	add    %eax,%eax
f010978b:	01 c8                	add    %ecx,%eax
f010978d:	c1 e0 03             	shl    $0x3,%eax
f0109790:	05 b0 00 00 00       	add    $0xb0,%eax
f0109795:	01 d8                	add    %ebx,%eax
f0109797:	83 c0 08             	add    $0x8,%eax
f010979a:	89 82 44 da 01 00    	mov    %eax,0x1da44(%edx)
f01097a0:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01097a6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01097ac:	89 d0                	mov    %edx,%eax
f01097ae:	01 c0                	add    %eax,%eax
f01097b0:	01 d0                	add    %edx,%eax
f01097b2:	c1 e0 03             	shl    $0x3,%eax
f01097b5:	01 c8                	add    %ecx,%eax
f01097b7:	05 cc 00 00 00       	add    $0xcc,%eax
f01097bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01097c2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01097c8:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f01097ce:	42                   	inc    %edx
f01097cf:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f01097d5:	e9 3b 01 00 00       	jmp    f0109915 <env_create+0xbae>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01097da:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01097e0:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01097e6:	89 d0                	mov    %edx,%eax
f01097e8:	01 c0                	add    %eax,%eax
f01097ea:	01 d0                	add    %edx,%eax
f01097ec:	c1 e0 03             	shl    $0x3,%eax
f01097ef:	05 b0 00 00 00       	add    $0xb0,%eax
f01097f4:	01 c8                	add    %ecx,%eax
f01097f6:	83 c0 08             	add    $0x8,%eax
f01097f9:	85 c0                	test   %eax,%eax
f01097fb:	75 17                	jne    f0109814 <env_create+0xaad>
f01097fd:	83 ec 04             	sub    $0x4,%esp
f0109800:	68 38 32 13 f0       	push   $0xf0133238
f0109805:	68 70 01 00 00       	push   $0x170
f010980a:	68 b7 31 13 f0       	push   $0xf01331b7
f010980f:	e8 9c 69 ff ff       	call   f01001b0 <_panic>
f0109814:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010981a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109820:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f0109826:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f010982c:	89 d8                	mov    %ebx,%eax
f010982e:	01 c0                	add    %eax,%eax
f0109830:	01 d8                	add    %ebx,%eax
f0109832:	c1 e0 03             	shl    $0x3,%eax
f0109835:	01 d0                	add    %edx,%eax
f0109837:	05 c8 00 00 00       	add    $0xc8,%eax
f010983c:	89 08                	mov    %ecx,(%eax)
f010983e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109844:	89 c8                	mov    %ecx,%eax
f0109846:	01 c0                	add    %eax,%eax
f0109848:	01 c8                	add    %ecx,%eax
f010984a:	c1 e0 03             	shl    $0x3,%eax
f010984d:	01 d0                	add    %edx,%eax
f010984f:	05 c8 00 00 00       	add    $0xc8,%eax
f0109854:	8b 00                	mov    (%eax),%eax
f0109856:	85 c0                	test   %eax,%eax
f0109858:	74 30                	je     f010988a <env_create+0xb23>
f010985a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109860:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f0109866:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010986c:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109872:	89 c8                	mov    %ecx,%eax
f0109874:	01 c0                	add    %eax,%eax
f0109876:	01 c8                	add    %ecx,%eax
f0109878:	c1 e0 03             	shl    $0x3,%eax
f010987b:	05 b0 00 00 00       	add    $0xb0,%eax
f0109880:	01 d8                	add    %ebx,%eax
f0109882:	83 c0 08             	add    $0x8,%eax
f0109885:	89 42 14             	mov    %eax,0x14(%edx)
f0109888:	eb 2b                	jmp    f01098b5 <env_create+0xb4e>
f010988a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109890:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109896:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010989c:	89 c8                	mov    %ecx,%eax
f010989e:	01 c0                	add    %eax,%eax
f01098a0:	01 c8                	add    %ecx,%eax
f01098a2:	c1 e0 03             	shl    $0x3,%eax
f01098a5:	05 b0 00 00 00       	add    $0xb0,%eax
f01098aa:	01 d8                	add    %ebx,%eax
f01098ac:	83 c0 08             	add    $0x8,%eax
f01098af:	89 82 58 da 01 00    	mov    %eax,0x1da58(%edx)
f01098b5:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01098bb:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01098c1:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01098c7:	89 c8                	mov    %ecx,%eax
f01098c9:	01 c0                	add    %eax,%eax
f01098cb:	01 c8                	add    %ecx,%eax
f01098cd:	c1 e0 03             	shl    $0x3,%eax
f01098d0:	05 b0 00 00 00       	add    $0xb0,%eax
f01098d5:	01 d8                	add    %ebx,%eax
f01098d7:	83 c0 08             	add    $0x8,%eax
f01098da:	89 82 54 da 01 00    	mov    %eax,0x1da54(%edx)
f01098e0:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01098e6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098ec:	89 d0                	mov    %edx,%eax
f01098ee:	01 c0                	add    %eax,%eax
f01098f0:	01 d0                	add    %edx,%eax
f01098f2:	c1 e0 03             	shl    $0x3,%eax
f01098f5:	01 c8                	add    %ecx,%eax
f01098f7:	05 cc 00 00 00       	add    $0xcc,%eax
f01098fc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109902:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109908:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f010990e:	42                   	inc    %edx
f010990f:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109915:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010991b:	83 ec 04             	sub    $0x4,%esp
f010991e:	6a 01                	push   $0x1
f0109920:	ff 75 c0             	pushl  -0x40(%ebp)
f0109923:	50                   	push   %eax
f0109924:	e8 6c a4 ff ff       	call   f0103d95 <pf_add_empty_env_page>
f0109929:	83 c4 10             	add    $0x10,%esp
f010992c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109932:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109939:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010993c:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0109942:	0f 83 b5 fa ff ff    	jae    f01093fd <env_create+0x696>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109948:	83 ec 0c             	sub    $0xc,%esp
f010994b:	6a 02                	push   $0x2
f010994d:	e8 8d 3f 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f0109952:	83 c4 10             	add    $0x10,%esp
f0109955:	85 c0                	test   %eax,%eax
f0109957:	74 75                	je     f01099ce <env_create+0xc67>
	{
		struct WorkingSetElement * elm = NULL;
f0109959:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109960:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109966:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f010996c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010996f:	eb 2e                	jmp    f010999f <env_create+0xc38>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109971:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109974:	8b 10                	mov    (%eax),%edx
f0109976:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010997c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109982:	6a 01                	push   $0x1
f0109984:	6a 00                	push   $0x0
f0109986:	52                   	push   %edx
f0109987:	50                   	push   %eax
f0109988:	e8 2e e7 ff ff       	call   f01080bb <pt_set_page_permissions>
f010998d:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109990:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109996:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f010999c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010999f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01099a5:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01099a9:	74 08                	je     f01099b3 <env_create+0xc4c>
f01099ab:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01099ae:	8b 52 10             	mov    0x10(%edx),%edx
f01099b1:	eb 05                	jmp    f01099b8 <env_create+0xc51>
f01099b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01099b8:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
f01099be:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01099c4:	85 c0                	test   %eax,%eax
f01099c6:	75 a9                	jne    f0109971 <env_create+0xc0a>
f01099c8:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01099cc:	75 a3                	jne    f0109971 <env_create+0xc0a>
f01099ce:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01099d1:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01099d4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01099d7:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f01099da:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f01099e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01099e3:	5b                   	pop    %ebx
f01099e4:	5e                   	pop    %esi
f01099e5:	5f                   	pop    %edi
f01099e6:	5d                   	pop    %ebp
f01099e7:	c3                   	ret    

f01099e8 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f01099e8:	55                   	push   %ebp
f01099e9:	89 e5                	mov    %esp,%ebp
f01099eb:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f01099ee:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01099f3:	3b 45 08             	cmp    0x8(%ebp),%eax
f01099f6:	74 2e                	je     f0109a26 <env_run+0x3e>
	{
		curenv = e ;
f01099f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01099fb:	a3 74 31 25 f0       	mov    %eax,0xf0253174
		curenv->env_runs++ ;
f0109a00:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109a05:	8b 90 8c da 01 00    	mov    0x1da8c(%eax),%edx
f0109a0b:	42                   	inc    %edx
f0109a0c:	89 90 8c da 01 00    	mov    %edx,0x1da8c(%eax)
		lcr3(curenv->env_cr3) ;
f0109a12:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109a17:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0109a1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a23:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109a26:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109a2b:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109a32:	e8 c0 b0 ff ff       	call   f0104af7 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109a37:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109a3c:	83 ec 0c             	sub    $0xc,%esp
f0109a3f:	50                   	push   %eax
f0109a40:	e8 f5 00 00 00       	call   f0109b3a <env_pop_tf>

f0109a45 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109a45:	55                   	push   %ebp
f0109a46:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f0109a48:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f0109a49:	5d                   	pop    %ebp
f0109a4a:	c3                   	ret    

f0109a4b <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109a4b:	55                   	push   %ebp
f0109a4c:	89 e5                	mov    %esp,%ebp
f0109a4e:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109a51:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109a56:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a59:	83 ec 0c             	sub    $0xc,%esp
f0109a5c:	50                   	push   %eax
f0109a5d:	e8 6f b9 ff ff       	call   f01053d1 <sched_exit_env>
f0109a62:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109a65:	e8 af c7 ff ff       	call   f0106219 <fos_scheduler>

f0109a6a <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109a6a:	55                   	push   %ebp
f0109a6b:	89 e5                	mov    %esp,%ebp
f0109a6d:	53                   	push   %ebx
f0109a6e:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109a71:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109a75:	75 15                	jne    f0109a8c <envid2env+0x22>
		*env_store = curenv;
f0109a77:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f0109a7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a80:	89 10                	mov    %edx,(%eax)
		return 0;
f0109a82:	b8 00 00 00 00       	mov    $0x0,%eax
f0109a87:	e9 a9 00 00 00       	jmp    f0109b35 <envid2env+0xcb>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109a8c:	8b 1d 70 31 25 f0    	mov    0xf0253170,%ebx
f0109a92:	83 ec 0c             	sub    $0xc,%esp
f0109a95:	6a 08                	push   $0x8
f0109a97:	e8 8b 43 02 00       	call   f012de27 <nearest_pow2_ceil>
f0109a9c:	83 c4 10             	add    $0x10,%esp
f0109a9f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109aa5:	21 c2                	and    %eax,%edx
f0109aa7:	89 d0                	mov    %edx,%eax
f0109aa9:	01 c0                	add    %eax,%eax
f0109aab:	01 d0                	add    %edx,%eax
f0109aad:	01 c0                	add    %eax,%eax
f0109aaf:	01 d0                	add    %edx,%eax
f0109ab1:	c1 e0 02             	shl    $0x2,%eax
f0109ab4:	01 d0                	add    %edx,%eax
f0109ab6:	01 c0                	add    %eax,%eax
f0109ab8:	01 d0                	add    %edx,%eax
f0109aba:	c1 e0 02             	shl    $0x2,%eax
f0109abd:	01 d0                	add    %edx,%eax
f0109abf:	c1 e0 02             	shl    $0x2,%eax
f0109ac2:	01 d0                	add    %edx,%eax
f0109ac4:	c1 e0 02             	shl    $0x2,%eax
f0109ac7:	01 d0                	add    %edx,%eax
f0109ac9:	c1 e0 05             	shl    $0x5,%eax
f0109acc:	01 d8                	add    %ebx,%eax
f0109ace:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ad4:	8b 40 54             	mov    0x54(%eax),%eax
f0109ad7:	85 c0                	test   %eax,%eax
f0109ad9:	74 0b                	je     f0109ae6 <envid2env+0x7c>
f0109adb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ade:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ae1:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109ae4:	74 10                	je     f0109af6 <envid2env+0x8c>
		*env_store = 0;
f0109ae6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ae9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109aef:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109af4:	eb 3f                	jmp    f0109b35 <envid2env+0xcb>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109af6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109afa:	74 2c                	je     f0109b28 <envid2env+0xbe>
f0109afc:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109b01:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109b04:	74 22                	je     f0109b28 <envid2env+0xbe>
f0109b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b09:	8b 50 50             	mov    0x50(%eax),%edx
f0109b0c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109b11:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109b14:	39 c2                	cmp    %eax,%edx
f0109b16:	74 10                	je     f0109b28 <envid2env+0xbe>
		*env_store = 0;
f0109b18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b1b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109b21:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109b26:	eb 0d                	jmp    f0109b35 <envid2env+0xcb>
	}

	*env_store = e;
f0109b28:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b2e:	89 10                	mov    %edx,(%eax)
	return 0;
f0109b30:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109b35:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109b38:	c9                   	leave  
f0109b39:	c3                   	ret    

f0109b3a <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109b3a:	55                   	push   %ebp
f0109b3b:	89 e5                	mov    %esp,%ebp
f0109b3d:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109b40:	8b 65 08             	mov    0x8(%ebp),%esp
f0109b43:	61                   	popa   
f0109b44:	07                   	pop    %es
f0109b45:	1f                   	pop    %ds
f0109b46:	83 c4 08             	add    $0x8,%esp
f0109b49:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109b4a:	83 ec 04             	sub    $0x4,%esp
f0109b4d:	68 5b 32 13 f0       	push   $0xf013325b
f0109b52:	68 23 02 00 00       	push   $0x223
f0109b57:	68 b7 31 13 f0       	push   $0xf01331b7
f0109b5c:	e8 4f 66 ff ff       	call   f01001b0 <_panic>

f0109b61 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109b61:	55                   	push   %ebp
f0109b62:	89 e5                	mov    %esp,%ebp
f0109b64:	53                   	push   %ebx
f0109b65:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109b68:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109b6f:	e9 e3 01 00 00       	jmp    f0109d57 <env_init+0x1f6>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109b74:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109b7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b7d:	89 d0                	mov    %edx,%eax
f0109b7f:	01 c0                	add    %eax,%eax
f0109b81:	01 d0                	add    %edx,%eax
f0109b83:	01 c0                	add    %eax,%eax
f0109b85:	01 d0                	add    %edx,%eax
f0109b87:	c1 e0 02             	shl    $0x2,%eax
f0109b8a:	01 d0                	add    %edx,%eax
f0109b8c:	01 c0                	add    %eax,%eax
f0109b8e:	01 d0                	add    %edx,%eax
f0109b90:	c1 e0 02             	shl    $0x2,%eax
f0109b93:	01 d0                	add    %edx,%eax
f0109b95:	c1 e0 02             	shl    $0x2,%eax
f0109b98:	01 d0                	add    %edx,%eax
f0109b9a:	c1 e0 02             	shl    $0x2,%eax
f0109b9d:	01 d0                	add    %edx,%eax
f0109b9f:	c1 e0 05             	shl    $0x5,%eax
f0109ba2:	01 c8                	add    %ecx,%eax
f0109ba4:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109bab:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109bb1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bb4:	89 d0                	mov    %edx,%eax
f0109bb6:	01 c0                	add    %eax,%eax
f0109bb8:	01 d0                	add    %edx,%eax
f0109bba:	01 c0                	add    %eax,%eax
f0109bbc:	01 d0                	add    %edx,%eax
f0109bbe:	c1 e0 02             	shl    $0x2,%eax
f0109bc1:	01 d0                	add    %edx,%eax
f0109bc3:	01 c0                	add    %eax,%eax
f0109bc5:	01 d0                	add    %edx,%eax
f0109bc7:	c1 e0 02             	shl    $0x2,%eax
f0109bca:	01 d0                	add    %edx,%eax
f0109bcc:	c1 e0 02             	shl    $0x2,%eax
f0109bcf:	01 d0                	add    %edx,%eax
f0109bd1:	c1 e0 02             	shl    $0x2,%eax
f0109bd4:	01 d0                	add    %edx,%eax
f0109bd6:	c1 e0 05             	shl    $0x5,%eax
f0109bd9:	01 c8                	add    %ecx,%eax
f0109bdb:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109be2:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109be8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109beb:	89 d0                	mov    %edx,%eax
f0109bed:	01 c0                	add    %eax,%eax
f0109bef:	01 d0                	add    %edx,%eax
f0109bf1:	01 c0                	add    %eax,%eax
f0109bf3:	01 d0                	add    %edx,%eax
f0109bf5:	c1 e0 02             	shl    $0x2,%eax
f0109bf8:	01 d0                	add    %edx,%eax
f0109bfa:	01 c0                	add    %eax,%eax
f0109bfc:	01 d0                	add    %edx,%eax
f0109bfe:	c1 e0 02             	shl    $0x2,%eax
f0109c01:	01 d0                	add    %edx,%eax
f0109c03:	c1 e0 02             	shl    $0x2,%eax
f0109c06:	01 d0                	add    %edx,%eax
f0109c08:	c1 e0 02             	shl    $0x2,%eax
f0109c0b:	01 d0                	add    %edx,%eax
f0109c0d:	c1 e0 05             	shl    $0x5,%eax
f0109c10:	01 c8                	add    %ecx,%eax
f0109c12:	85 c0                	test   %eax,%eax
f0109c14:	75 17                	jne    f0109c2d <env_init+0xcc>
f0109c16:	83 ec 04             	sub    $0x4,%esp
f0109c19:	68 38 32 13 f0       	push   $0xf0133238
f0109c1e:	68 3f 02 00 00       	push   $0x23f
f0109c23:	68 b7 31 13 f0       	push   $0xf01331b7
f0109c28:	e8 83 65 ff ff       	call   f01001b0 <_panic>
f0109c2d:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109c33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c36:	89 d0                	mov    %edx,%eax
f0109c38:	01 c0                	add    %eax,%eax
f0109c3a:	01 d0                	add    %edx,%eax
f0109c3c:	01 c0                	add    %eax,%eax
f0109c3e:	01 d0                	add    %edx,%eax
f0109c40:	c1 e0 02             	shl    $0x2,%eax
f0109c43:	01 d0                	add    %edx,%eax
f0109c45:	01 c0                	add    %eax,%eax
f0109c47:	01 d0                	add    %edx,%eax
f0109c49:	c1 e0 02             	shl    $0x2,%eax
f0109c4c:	01 d0                	add    %edx,%eax
f0109c4e:	c1 e0 02             	shl    $0x2,%eax
f0109c51:	01 d0                	add    %edx,%eax
f0109c53:	c1 e0 02             	shl    $0x2,%eax
f0109c56:	01 d0                	add    %edx,%eax
f0109c58:	c1 e0 05             	shl    $0x5,%eax
f0109c5b:	01 c8                	add    %ecx,%eax
f0109c5d:	8b 15 78 31 25 f0    	mov    0xf0253178,%edx
f0109c63:	89 50 44             	mov    %edx,0x44(%eax)
f0109c66:	8b 40 44             	mov    0x44(%eax),%eax
f0109c69:	85 c0                	test   %eax,%eax
f0109c6b:	74 3b                	je     f0109ca8 <env_init+0x147>
f0109c6d:	8b 0d 78 31 25 f0    	mov    0xf0253178,%ecx
f0109c73:	8b 1d 70 31 25 f0    	mov    0xf0253170,%ebx
f0109c79:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c7c:	89 d0                	mov    %edx,%eax
f0109c7e:	01 c0                	add    %eax,%eax
f0109c80:	01 d0                	add    %edx,%eax
f0109c82:	01 c0                	add    %eax,%eax
f0109c84:	01 d0                	add    %edx,%eax
f0109c86:	c1 e0 02             	shl    $0x2,%eax
f0109c89:	01 d0                	add    %edx,%eax
f0109c8b:	01 c0                	add    %eax,%eax
f0109c8d:	01 d0                	add    %edx,%eax
f0109c8f:	c1 e0 02             	shl    $0x2,%eax
f0109c92:	01 d0                	add    %edx,%eax
f0109c94:	c1 e0 02             	shl    $0x2,%eax
f0109c97:	01 d0                	add    %edx,%eax
f0109c99:	c1 e0 02             	shl    $0x2,%eax
f0109c9c:	01 d0                	add    %edx,%eax
f0109c9e:	c1 e0 05             	shl    $0x5,%eax
f0109ca1:	01 d8                	add    %ebx,%eax
f0109ca3:	89 41 48             	mov    %eax,0x48(%ecx)
f0109ca6:	eb 35                	jmp    f0109cdd <env_init+0x17c>
f0109ca8:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109cae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109cb1:	89 d0                	mov    %edx,%eax
f0109cb3:	01 c0                	add    %eax,%eax
f0109cb5:	01 d0                	add    %edx,%eax
f0109cb7:	01 c0                	add    %eax,%eax
f0109cb9:	01 d0                	add    %edx,%eax
f0109cbb:	c1 e0 02             	shl    $0x2,%eax
f0109cbe:	01 d0                	add    %edx,%eax
f0109cc0:	01 c0                	add    %eax,%eax
f0109cc2:	01 d0                	add    %edx,%eax
f0109cc4:	c1 e0 02             	shl    $0x2,%eax
f0109cc7:	01 d0                	add    %edx,%eax
f0109cc9:	c1 e0 02             	shl    $0x2,%eax
f0109ccc:	01 d0                	add    %edx,%eax
f0109cce:	c1 e0 02             	shl    $0x2,%eax
f0109cd1:	01 d0                	add    %edx,%eax
f0109cd3:	c1 e0 05             	shl    $0x5,%eax
f0109cd6:	01 c8                	add    %ecx,%eax
f0109cd8:	a3 7c 31 25 f0       	mov    %eax,0xf025317c
f0109cdd:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109ce3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ce6:	89 d0                	mov    %edx,%eax
f0109ce8:	01 c0                	add    %eax,%eax
f0109cea:	01 d0                	add    %edx,%eax
f0109cec:	01 c0                	add    %eax,%eax
f0109cee:	01 d0                	add    %edx,%eax
f0109cf0:	c1 e0 02             	shl    $0x2,%eax
f0109cf3:	01 d0                	add    %edx,%eax
f0109cf5:	01 c0                	add    %eax,%eax
f0109cf7:	01 d0                	add    %edx,%eax
f0109cf9:	c1 e0 02             	shl    $0x2,%eax
f0109cfc:	01 d0                	add    %edx,%eax
f0109cfe:	c1 e0 02             	shl    $0x2,%eax
f0109d01:	01 d0                	add    %edx,%eax
f0109d03:	c1 e0 02             	shl    $0x2,%eax
f0109d06:	01 d0                	add    %edx,%eax
f0109d08:	c1 e0 05             	shl    $0x5,%eax
f0109d0b:	01 c8                	add    %ecx,%eax
f0109d0d:	a3 78 31 25 f0       	mov    %eax,0xf0253178
f0109d12:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109d18:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d1b:	89 d0                	mov    %edx,%eax
f0109d1d:	01 c0                	add    %eax,%eax
f0109d1f:	01 d0                	add    %edx,%eax
f0109d21:	01 c0                	add    %eax,%eax
f0109d23:	01 d0                	add    %edx,%eax
f0109d25:	c1 e0 02             	shl    $0x2,%eax
f0109d28:	01 d0                	add    %edx,%eax
f0109d2a:	01 c0                	add    %eax,%eax
f0109d2c:	01 d0                	add    %edx,%eax
f0109d2e:	c1 e0 02             	shl    $0x2,%eax
f0109d31:	01 d0                	add    %edx,%eax
f0109d33:	c1 e0 02             	shl    $0x2,%eax
f0109d36:	01 d0                	add    %edx,%eax
f0109d38:	c1 e0 02             	shl    $0x2,%eax
f0109d3b:	01 d0                	add    %edx,%eax
f0109d3d:	c1 e0 05             	shl    $0x5,%eax
f0109d40:	01 c8                	add    %ecx,%eax
f0109d42:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d49:	a1 84 31 25 f0       	mov    0xf0253184,%eax
f0109d4e:	40                   	inc    %eax
f0109d4f:	a3 84 31 25 f0       	mov    %eax,0xf0253184
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109d54:	ff 4d f4             	decl   -0xc(%ebp)
f0109d57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d5b:	0f 89 13 fe ff ff    	jns    f0109b74 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109d61:	90                   	nop
f0109d62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109d65:	c9                   	leave  
f0109d66:	c3                   	ret    

f0109d67 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109d67:	55                   	push   %ebp
f0109d68:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109d6a:	8b 15 78 31 25 f0    	mov    0xf0253178,%edx
f0109d70:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d73:	89 10                	mov    %edx,(%eax)
f0109d75:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d78:	8b 00                	mov    (%eax),%eax
f0109d7a:	85 c0                	test   %eax,%eax
f0109d7c:	75 07                	jne    f0109d85 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109d7e:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109d83:	eb 11                	jmp    f0109d96 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109d85:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d88:	8b 00                	mov    (%eax),%eax
f0109d8a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109d91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109d96:	5d                   	pop    %ebp
f0109d97:	c3                   	ret    

f0109d98 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109d98:	55                   	push   %ebp
f0109d99:	89 e5                	mov    %esp,%ebp
f0109d9b:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109d9e:	83 ec 04             	sub    $0x4,%esp
f0109da1:	68 a0 da 01 00       	push   $0x1daa0
f0109da6:	6a 00                	push   $0x0
f0109da8:	ff 75 08             	pushl  0x8(%ebp)
f0109dab:	e8 da 54 02 00       	call   f012f28a <memset>
f0109db0:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109db3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109db6:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109dbd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109dc1:	75 17                	jne    f0109dda <free_environment+0x42>
f0109dc3:	83 ec 04             	sub    $0x4,%esp
f0109dc6:	68 38 32 13 f0       	push   $0xf0133238
f0109dcb:	68 5c 02 00 00       	push   $0x25c
f0109dd0:	68 b7 31 13 f0       	push   $0xf01331b7
f0109dd5:	e8 d6 63 ff ff       	call   f01001b0 <_panic>
f0109dda:	8b 15 78 31 25 f0    	mov    0xf0253178,%edx
f0109de0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109de3:	89 50 44             	mov    %edx,0x44(%eax)
f0109de6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109de9:	8b 40 44             	mov    0x44(%eax),%eax
f0109dec:	85 c0                	test   %eax,%eax
f0109dee:	74 0d                	je     f0109dfd <free_environment+0x65>
f0109df0:	a1 78 31 25 f0       	mov    0xf0253178,%eax
f0109df5:	8b 55 08             	mov    0x8(%ebp),%edx
f0109df8:	89 50 48             	mov    %edx,0x48(%eax)
f0109dfb:	eb 08                	jmp    f0109e05 <free_environment+0x6d>
f0109dfd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e00:	a3 7c 31 25 f0       	mov    %eax,0xf025317c
f0109e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e08:	a3 78 31 25 f0       	mov    %eax,0xf0253178
f0109e0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e10:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109e17:	a1 84 31 25 f0       	mov    0xf0253184,%eax
f0109e1c:	40                   	inc    %eax
f0109e1d:	a3 84 31 25 f0       	mov    %eax,0xf0253184
}
f0109e22:	90                   	nop
f0109e23:	c9                   	leave  
f0109e24:	c3                   	ret    

f0109e25 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109e25:	55                   	push   %ebp
f0109e26:	89 e5                	mov    %esp,%ebp
f0109e28:	53                   	push   %ebx
f0109e29:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e2f:	8b 40 0c             	mov    0xc(%eax),%eax
f0109e32:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109e35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e38:	8b 40 08             	mov    0x8(%eax),%eax
f0109e3b:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109e3e:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109e45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109e48:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109e4b:	01 c2                	add    %eax,%edx
f0109e4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109e50:	01 d0                	add    %edx,%eax
f0109e52:	48                   	dec    %eax
f0109e53:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109e56:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109e59:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e5e:	f7 75 dc             	divl   -0x24(%ebp)
f0109e61:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109e64:	29 d0                	sub    %edx,%eax
f0109e66:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109e69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109e6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109e6f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109e72:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109e77:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109e7a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109e81:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109e88:	8b 45 10             	mov    0x10(%ebp),%eax
f0109e8b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109e91:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109e98:	0f 85 38 06 00 00    	jne    f010a4d6 <program_segment_alloc_map_copy_workingset+0x6b1>
f0109e9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea1:	83 c0 5c             	add    $0x5c,%eax
f0109ea4:	83 ec 08             	sub    $0x8,%esp
f0109ea7:	68 67 32 13 f0       	push   $0xf0133267
f0109eac:	50                   	push   %eax
f0109ead:	e8 f6 52 02 00       	call   f012f1a8 <strcmp>
f0109eb2:	83 c4 10             	add    $0x10,%esp
f0109eb5:	85 c0                	test   %eax,%eax
f0109eb7:	0f 84 19 06 00 00    	je     f010a4d6 <program_segment_alloc_map_copy_workingset+0x6b1>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109ebd:	8b 45 14             	mov    0x14(%ebp),%eax
f0109ec0:	83 f8 06             	cmp    $0x6,%eax
f0109ec3:	76 05                	jbe    f0109eca <program_segment_alloc_map_copy_workingset+0xa5>
f0109ec5:	b8 06 00 00 00       	mov    $0x6,%eax
f0109eca:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109ecd:	e9 04 06 00 00       	jmp    f010a4d6 <program_segment_alloc_map_copy_workingset+0x6b1>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109ed2:	83 ec 0c             	sub    $0xc,%esp
f0109ed5:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109ed8:	50                   	push   %eax
f0109ed9:	e8 47 d4 ff ff       	call   f0107325 <allocate_frame>
f0109ede:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109ee1:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109ee4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ee7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109eed:	6a 06                	push   $0x6
f0109eef:	ff 75 f4             	pushl  -0xc(%ebp)
f0109ef2:	52                   	push   %edx
f0109ef3:	50                   	push   %eax
f0109ef4:	e8 7d d9 ff ff       	call   f0107876 <loadtime_map_frame>
f0109ef9:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109efc:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eff:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f05:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f08:	89 d0                	mov    %edx,%eax
f0109f0a:	01 c0                	add    %eax,%eax
f0109f0c:	01 d0                	add    %edx,%eax
f0109f0e:	c1 e0 03             	shl    $0x3,%eax
f0109f11:	01 c8                	add    %ecx,%eax
f0109f13:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f0109f19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f1c:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f21:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f27:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f2a:	89 d0                	mov    %edx,%eax
f0109f2c:	01 c0                	add    %eax,%eax
f0109f2e:	01 d0                	add    %edx,%eax
f0109f30:	c1 e0 03             	shl    $0x3,%eax
f0109f33:	01 c8                	add    %ecx,%eax
f0109f35:	05 bc 00 00 00       	add    $0xbc,%eax
f0109f3a:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109f3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f40:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f46:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f49:	89 d0                	mov    %edx,%eax
f0109f4b:	01 c0                	add    %eax,%eax
f0109f4d:	01 d0                	add    %edx,%eax
f0109f4f:	c1 e0 03             	shl    $0x3,%eax
f0109f52:	01 c8                	add    %ecx,%eax
f0109f54:	05 c0 00 00 00       	add    $0xc0,%eax
f0109f59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109f5f:	83 ec 0c             	sub    $0xc,%esp
f0109f62:	6a 02                	push   $0x2
f0109f64:	e8 76 39 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f0109f69:	83 c4 10             	add    $0x10,%esp
f0109f6c:	85 c0                	test   %eax,%eax
f0109f6e:	0f 84 2c 04 00 00    	je     f010a3a0 <program_segment_alloc_map_copy_workingset+0x57b>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109f74:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f77:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f7d:	89 d0                	mov    %edx,%eax
f0109f7f:	01 c0                	add    %eax,%eax
f0109f81:	01 d0                	add    %edx,%eax
f0109f83:	c1 e0 03             	shl    $0x3,%eax
f0109f86:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f8f:	01 d0                	add    %edx,%eax
f0109f91:	83 c0 08             	add    $0x8,%eax
f0109f94:	85 c0                	test   %eax,%eax
f0109f96:	75 17                	jne    f0109faf <program_segment_alloc_map_copy_workingset+0x18a>
f0109f98:	83 ec 04             	sub    $0x4,%esp
f0109f9b:	68 19 32 13 f0       	push   $0xf0133219
f0109fa0:	68 9f 02 00 00       	push   $0x29f
f0109fa5:	68 b7 31 13 f0       	push   $0xf01331b7
f0109faa:	e8 01 62 ff ff       	call   f01001b0 <_panic>
f0109faf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fb8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fbb:	89 d0                	mov    %edx,%eax
f0109fbd:	01 c0                	add    %eax,%eax
f0109fbf:	01 d0                	add    %edx,%eax
f0109fc1:	c1 e0 03             	shl    $0x3,%eax
f0109fc4:	01 c8                	add    %ecx,%eax
f0109fc6:	05 c8 00 00 00       	add    $0xc8,%eax
f0109fcb:	8b 00                	mov    (%eax),%eax
f0109fcd:	85 c0                	test   %eax,%eax
f0109fcf:	74 41                	je     f010a012 <program_segment_alloc_map_copy_workingset+0x1ed>
f0109fd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fd4:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fda:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fdd:	89 d0                	mov    %edx,%eax
f0109fdf:	01 c0                	add    %eax,%eax
f0109fe1:	01 d0                	add    %edx,%eax
f0109fe3:	c1 e0 03             	shl    $0x3,%eax
f0109fe6:	01 c8                	add    %ecx,%eax
f0109fe8:	05 c8 00 00 00       	add    $0xc8,%eax
f0109fed:	8b 10                	mov    (%eax),%edx
f0109fef:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff2:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109ff8:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109ffb:	89 c8                	mov    %ecx,%eax
f0109ffd:	01 c0                	add    %eax,%eax
f0109fff:	01 c8                	add    %ecx,%eax
f010a001:	c1 e0 03             	shl    $0x3,%eax
f010a004:	01 d8                	add    %ebx,%eax
f010a006:	05 cc 00 00 00       	add    $0xcc,%eax
f010a00b:	8b 00                	mov    (%eax),%eax
f010a00d:	89 42 14             	mov    %eax,0x14(%edx)
f010a010:	eb 27                	jmp    f010a039 <program_segment_alloc_map_copy_workingset+0x214>
f010a012:	8b 45 08             	mov    0x8(%ebp),%eax
f010a015:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a01b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a01e:	89 d0                	mov    %edx,%eax
f010a020:	01 c0                	add    %eax,%eax
f010a022:	01 d0                	add    %edx,%eax
f010a024:	c1 e0 03             	shl    $0x3,%eax
f010a027:	01 c8                	add    %ecx,%eax
f010a029:	05 cc 00 00 00       	add    $0xcc,%eax
f010a02e:	8b 10                	mov    (%eax),%edx
f010a030:	8b 45 08             	mov    0x8(%ebp),%eax
f010a033:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a039:	8b 45 08             	mov    0x8(%ebp),%eax
f010a03c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a042:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a045:	89 d0                	mov    %edx,%eax
f010a047:	01 c0                	add    %eax,%eax
f010a049:	01 d0                	add    %edx,%eax
f010a04b:	c1 e0 03             	shl    $0x3,%eax
f010a04e:	01 c8                	add    %ecx,%eax
f010a050:	05 cc 00 00 00       	add    $0xcc,%eax
f010a055:	8b 00                	mov    (%eax),%eax
f010a057:	85 c0                	test   %eax,%eax
f010a059:	74 41                	je     f010a09c <program_segment_alloc_map_copy_workingset+0x277>
f010a05b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a05e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a064:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a067:	89 d0                	mov    %edx,%eax
f010a069:	01 c0                	add    %eax,%eax
f010a06b:	01 d0                	add    %edx,%eax
f010a06d:	c1 e0 03             	shl    $0x3,%eax
f010a070:	01 c8                	add    %ecx,%eax
f010a072:	05 cc 00 00 00       	add    $0xcc,%eax
f010a077:	8b 10                	mov    (%eax),%edx
f010a079:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07c:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a082:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a085:	89 c8                	mov    %ecx,%eax
f010a087:	01 c0                	add    %eax,%eax
f010a089:	01 c8                	add    %ecx,%eax
f010a08b:	c1 e0 03             	shl    $0x3,%eax
f010a08e:	01 d8                	add    %ebx,%eax
f010a090:	05 c8 00 00 00       	add    $0xc8,%eax
f010a095:	8b 00                	mov    (%eax),%eax
f010a097:	89 42 10             	mov    %eax,0x10(%edx)
f010a09a:	eb 27                	jmp    f010a0c3 <program_segment_alloc_map_copy_workingset+0x29e>
f010a09c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a09f:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0a5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a0a8:	89 d0                	mov    %edx,%eax
f010a0aa:	01 c0                	add    %eax,%eax
f010a0ac:	01 d0                	add    %edx,%eax
f010a0ae:	c1 e0 03             	shl    $0x3,%eax
f010a0b1:	01 c8                	add    %ecx,%eax
f010a0b3:	05 c8 00 00 00       	add    $0xc8,%eax
f010a0b8:	8b 10                	mov    (%eax),%edx
f010a0ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0bd:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a0c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0c6:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0cc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a0cf:	89 d0                	mov    %edx,%eax
f010a0d1:	01 c0                	add    %eax,%eax
f010a0d3:	01 d0                	add    %edx,%eax
f010a0d5:	c1 e0 03             	shl    $0x3,%eax
f010a0d8:	01 c8                	add    %ecx,%eax
f010a0da:	05 c8 00 00 00       	add    $0xc8,%eax
f010a0df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a0e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e8:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a0f1:	89 d0                	mov    %edx,%eax
f010a0f3:	01 c0                	add    %eax,%eax
f010a0f5:	01 d0                	add    %edx,%eax
f010a0f7:	c1 e0 03             	shl    $0x3,%eax
f010a0fa:	01 c8                	add    %ecx,%eax
f010a0fc:	05 cc 00 00 00       	add    $0xcc,%eax
f010a101:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a107:	8b 45 08             	mov    0x8(%ebp),%eax
f010a10a:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a110:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a113:	8b 45 08             	mov    0x8(%ebp),%eax
f010a116:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a11c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a11f:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010a125:	8b 45 08             	mov    0x8(%ebp),%eax
f010a128:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f010a12e:	48                   	dec    %eax
f010a12f:	39 c2                	cmp    %eax,%edx
f010a131:	0f 83 37 01 00 00    	jae    f010a26e <program_segment_alloc_map_copy_workingset+0x449>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a137:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13a:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a140:	89 d0                	mov    %edx,%eax
f010a142:	01 c0                	add    %eax,%eax
f010a144:	01 d0                	add    %edx,%eax
f010a146:	c1 e0 03             	shl    $0x3,%eax
f010a149:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a14f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a152:	01 d0                	add    %edx,%eax
f010a154:	83 c0 08             	add    $0x8,%eax
f010a157:	85 c0                	test   %eax,%eax
f010a159:	75 17                	jne    f010a172 <program_segment_alloc_map_copy_workingset+0x34d>
f010a15b:	83 ec 04             	sub    $0x4,%esp
f010a15e:	68 38 32 13 f0       	push   $0xf0133238
f010a163:	68 a3 02 00 00       	push   $0x2a3
f010a168:	68 b7 31 13 f0       	push   $0xf01331b7
f010a16d:	e8 3e 60 ff ff       	call   f01001b0 <_panic>
f010a172:	8b 45 08             	mov    0x8(%ebp),%eax
f010a175:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a17b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17e:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010a184:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a187:	89 d0                	mov    %edx,%eax
f010a189:	01 c0                	add    %eax,%eax
f010a18b:	01 d0                	add    %edx,%eax
f010a18d:	c1 e0 03             	shl    $0x3,%eax
f010a190:	01 d8                	add    %ebx,%eax
f010a192:	05 c8 00 00 00       	add    $0xc8,%eax
f010a197:	89 08                	mov    %ecx,(%eax)
f010a199:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a19c:	89 d0                	mov    %edx,%eax
f010a19e:	01 c0                	add    %eax,%eax
f010a1a0:	01 d0                	add    %edx,%eax
f010a1a2:	c1 e0 03             	shl    $0x3,%eax
f010a1a5:	01 c8                	add    %ecx,%eax
f010a1a7:	05 c8 00 00 00       	add    $0xc8,%eax
f010a1ac:	8b 00                	mov    (%eax),%eax
f010a1ae:	85 c0                	test   %eax,%eax
f010a1b0:	74 2e                	je     f010a1e0 <program_segment_alloc_map_copy_workingset+0x3bb>
f010a1b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b5:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010a1bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1be:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a1c4:	89 c8                	mov    %ecx,%eax
f010a1c6:	01 c0                	add    %eax,%eax
f010a1c8:	01 c8                	add    %ecx,%eax
f010a1ca:	c1 e0 03             	shl    $0x3,%eax
f010a1cd:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a1d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d6:	01 c8                	add    %ecx,%eax
f010a1d8:	83 c0 08             	add    $0x8,%eax
f010a1db:	89 42 14             	mov    %eax,0x14(%edx)
f010a1de:	eb 29                	jmp    f010a209 <program_segment_alloc_map_copy_workingset+0x3e4>
f010a1e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1e3:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a1e9:	89 d0                	mov    %edx,%eax
f010a1eb:	01 c0                	add    %eax,%eax
f010a1ed:	01 d0                	add    %edx,%eax
f010a1ef:	c1 e0 03             	shl    $0x3,%eax
f010a1f2:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1fb:	01 d0                	add    %edx,%eax
f010a1fd:	8d 50 08             	lea    0x8(%eax),%edx
f010a200:	8b 45 08             	mov    0x8(%ebp),%eax
f010a203:	89 90 48 da 01 00    	mov    %edx,0x1da48(%eax)
f010a209:	8b 45 08             	mov    0x8(%ebp),%eax
f010a20c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a212:	89 d0                	mov    %edx,%eax
f010a214:	01 c0                	add    %eax,%eax
f010a216:	01 d0                	add    %edx,%eax
f010a218:	c1 e0 03             	shl    $0x3,%eax
f010a21b:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a221:	8b 45 08             	mov    0x8(%ebp),%eax
f010a224:	01 d0                	add    %edx,%eax
f010a226:	8d 50 08             	lea    0x8(%eax),%edx
f010a229:	8b 45 08             	mov    0x8(%ebp),%eax
f010a22c:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)
f010a232:	8b 45 08             	mov    0x8(%ebp),%eax
f010a235:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a23b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a23e:	89 d0                	mov    %edx,%eax
f010a240:	01 c0                	add    %eax,%eax
f010a242:	01 d0                	add    %edx,%eax
f010a244:	c1 e0 03             	shl    $0x3,%eax
f010a247:	01 c8                	add    %ecx,%eax
f010a249:	05 cc 00 00 00       	add    $0xcc,%eax
f010a24e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a254:	8b 45 08             	mov    0x8(%ebp),%eax
f010a257:	8b 80 50 da 01 00    	mov    0x1da50(%eax),%eax
f010a25d:	8d 50 01             	lea    0x1(%eax),%edx
f010a260:	8b 45 08             	mov    0x8(%ebp),%eax
f010a263:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010a269:	e9 32 01 00 00       	jmp    f010a3a0 <program_segment_alloc_map_copy_workingset+0x57b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a26e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a271:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a277:	89 d0                	mov    %edx,%eax
f010a279:	01 c0                	add    %eax,%eax
f010a27b:	01 d0                	add    %edx,%eax
f010a27d:	c1 e0 03             	shl    $0x3,%eax
f010a280:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a286:	8b 45 08             	mov    0x8(%ebp),%eax
f010a289:	01 d0                	add    %edx,%eax
f010a28b:	83 c0 08             	add    $0x8,%eax
f010a28e:	85 c0                	test   %eax,%eax
f010a290:	75 17                	jne    f010a2a9 <program_segment_alloc_map_copy_workingset+0x484>
f010a292:	83 ec 04             	sub    $0x4,%esp
f010a295:	68 38 32 13 f0       	push   $0xf0133238
f010a29a:	68 a8 02 00 00       	push   $0x2a8
f010a29f:	68 b7 31 13 f0       	push   $0xf01331b7
f010a2a4:	e8 07 5f ff ff       	call   f01001b0 <_panic>
f010a2a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2ac:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a2b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2b5:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010a2bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a2be:	89 d0                	mov    %edx,%eax
f010a2c0:	01 c0                	add    %eax,%eax
f010a2c2:	01 d0                	add    %edx,%eax
f010a2c4:	c1 e0 03             	shl    $0x3,%eax
f010a2c7:	01 d8                	add    %ebx,%eax
f010a2c9:	05 c8 00 00 00       	add    $0xc8,%eax
f010a2ce:	89 08                	mov    %ecx,(%eax)
f010a2d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2d3:	89 d0                	mov    %edx,%eax
f010a2d5:	01 c0                	add    %eax,%eax
f010a2d7:	01 d0                	add    %edx,%eax
f010a2d9:	c1 e0 03             	shl    $0x3,%eax
f010a2dc:	01 c8                	add    %ecx,%eax
f010a2de:	05 c8 00 00 00       	add    $0xc8,%eax
f010a2e3:	8b 00                	mov    (%eax),%eax
f010a2e5:	85 c0                	test   %eax,%eax
f010a2e7:	74 2e                	je     f010a317 <program_segment_alloc_map_copy_workingset+0x4f2>
f010a2e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2ec:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f010a2f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f5:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a2fb:	89 c8                	mov    %ecx,%eax
f010a2fd:	01 c0                	add    %eax,%eax
f010a2ff:	01 c8                	add    %ecx,%eax
f010a301:	c1 e0 03             	shl    $0x3,%eax
f010a304:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a30a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a30d:	01 c8                	add    %ecx,%eax
f010a30f:	83 c0 08             	add    $0x8,%eax
f010a312:	89 42 14             	mov    %eax,0x14(%edx)
f010a315:	eb 29                	jmp    f010a340 <program_segment_alloc_map_copy_workingset+0x51b>
f010a317:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31a:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a320:	89 d0                	mov    %edx,%eax
f010a322:	01 c0                	add    %eax,%eax
f010a324:	01 d0                	add    %edx,%eax
f010a326:	c1 e0 03             	shl    $0x3,%eax
f010a329:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a32f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a332:	01 d0                	add    %edx,%eax
f010a334:	8d 50 08             	lea    0x8(%eax),%edx
f010a337:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33a:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
f010a340:	8b 45 08             	mov    0x8(%ebp),%eax
f010a343:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a349:	89 d0                	mov    %edx,%eax
f010a34b:	01 c0                	add    %eax,%eax
f010a34d:	01 d0                	add    %edx,%eax
f010a34f:	c1 e0 03             	shl    $0x3,%eax
f010a352:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a358:	8b 45 08             	mov    0x8(%ebp),%eax
f010a35b:	01 d0                	add    %edx,%eax
f010a35d:	8d 50 08             	lea    0x8(%eax),%edx
f010a360:	8b 45 08             	mov    0x8(%ebp),%eax
f010a363:	89 90 54 da 01 00    	mov    %edx,0x1da54(%eax)
f010a369:	8b 45 08             	mov    0x8(%ebp),%eax
f010a36c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a372:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a375:	89 d0                	mov    %edx,%eax
f010a377:	01 c0                	add    %eax,%eax
f010a379:	01 d0                	add    %edx,%eax
f010a37b:	c1 e0 03             	shl    $0x3,%eax
f010a37e:	01 c8                	add    %ecx,%eax
f010a380:	05 cc 00 00 00       	add    $0xcc,%eax
f010a385:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a38b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38e:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f010a394:	8d 50 01             	lea    0x1(%eax),%edx
f010a397:	8b 45 08             	mov    0x8(%ebp),%eax
f010a39a:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010a3a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a3:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a3a9:	8d 50 01             	lea    0x1(%eax),%edx
f010a3ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3af:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a3b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b8:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a3be:	8b 55 08             	mov    0x8(%ebp),%edx
f010a3c1:	8b 8a 7c d5 01 00    	mov    0x1d57c(%edx),%ecx
f010a3c7:	ba 00 00 00 00       	mov    $0x0,%edx
f010a3cc:	f7 f1                	div    %ecx
f010a3ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d1:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a3d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3da:	c1 e8 16             	shr    $0x16,%eax
f010a3dd:	89 c2                	mov    %eax,%edx
f010a3df:	8b 45 18             	mov    0x18(%ebp),%eax
f010a3e2:	8b 00                	mov    (%eax),%eax
f010a3e4:	39 c2                	cmp    %eax,%edx
f010a3e6:	0f 84 d3 00 00 00    	je     f010a4bf <program_segment_alloc_map_copy_workingset+0x69a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a3ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ef:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a3f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a3fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a3fe:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a403:	89 c1                	mov    %eax,%ecx
f010a405:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a408:	89 d0                	mov    %edx,%eax
f010a40a:	01 c0                	add    %eax,%eax
f010a40c:	01 d0                	add    %edx,%eax
f010a40e:	c1 e0 03             	shl    $0x3,%eax
f010a411:	01 d8                	add    %ebx,%eax
f010a413:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a418:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a41a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a41d:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a423:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a426:	89 d0                	mov    %edx,%eax
f010a428:	01 c0                	add    %eax,%eax
f010a42a:	01 d0                	add    %edx,%eax
f010a42c:	c1 e0 03             	shl    $0x3,%eax
f010a42f:	01 c8                	add    %ecx,%eax
f010a431:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a436:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a439:	8b 45 08             	mov    0x8(%ebp),%eax
f010a43c:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a442:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a445:	89 d0                	mov    %edx,%eax
f010a447:	01 c0                	add    %eax,%eax
f010a449:	01 d0                	add    %edx,%eax
f010a44b:	c1 e0 03             	shl    $0x3,%eax
f010a44e:	01 c8                	add    %ecx,%eax
f010a450:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a455:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a45b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a45e:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a464:	8d 50 01             	lea    0x1(%eax),%edx
f010a467:	8b 45 08             	mov    0x8(%ebp),%eax
f010a46a:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a470:	8b 45 08             	mov    0x8(%ebp),%eax
f010a473:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a479:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a47e:	ba 00 00 00 00       	mov    $0x0,%edx
f010a483:	f7 f1                	div    %ecx
f010a485:	8b 45 08             	mov    0x8(%ebp),%eax
f010a488:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			if (e->table_last_WS_index == 0)
f010a48e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a491:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a497:	85 c0                	test   %eax,%eax
f010a499:	75 17                	jne    f010a4b2 <program_segment_alloc_map_copy_workingset+0x68d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a49b:	83 ec 04             	sub    $0x4,%esp
f010a49e:	68 6c 32 13 f0       	push   $0xf013326c
f010a4a3:	68 c3 02 00 00       	push   $0x2c3
f010a4a8:	68 b7 31 13 f0       	push   $0xf01331b7
f010a4ad:	e8 fe 5c ff ff       	call   f01001b0 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a4b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4b5:	c1 e8 16             	shr    $0x16,%eax
f010a4b8:	89 c2                	mov    %eax,%edx
f010a4ba:	8b 45 18             	mov    0x18(%ebp),%eax
f010a4bd:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a4bf:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4c2:	8b 00                	mov    (%eax),%eax
f010a4c4:	8d 50 01             	lea    0x1(%eax),%edx
f010a4c7:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4ca:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a4cc:	ff 45 f0             	incl   -0x10(%ebp)
f010a4cf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a4d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4d9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a4dc:	73 0c                	jae    f010a4ea <program_segment_alloc_map_copy_workingset+0x6c5>
f010a4de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a4e1:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a4e4:	0f 82 e8 f9 ff ff    	jb     f0109ed2 <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a4ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a4ed:	8b 00                	mov    (%eax),%eax
f010a4ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a4f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a4f5:	8b 40 0c             	mov    0xc(%eax),%eax
f010a4f8:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a4fb:	eb 10                	jmp    f010a50d <program_segment_alloc_map_copy_workingset+0x6e8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a4fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a500:	8a 10                	mov    (%eax),%dl
f010a502:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a505:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a507:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a50a:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a50d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a510:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a513:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a516:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a51b:	89 c2                	mov    %eax,%edx
f010a51d:	8b 45 10             	mov    0x10(%ebp),%eax
f010a520:	8b 00                	mov    (%eax),%eax
f010a522:	c1 e0 0c             	shl    $0xc,%eax
f010a525:	01 c2                	add    %eax,%edx
f010a527:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a52a:	39 c2                	cmp    %eax,%edx
f010a52c:	76 1d                	jbe    f010a54b <program_segment_alloc_map_copy_workingset+0x726>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a52e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a531:	8b 50 04             	mov    0x4(%eax),%edx
f010a534:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a537:	01 c2                	add    %eax,%edx
f010a539:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a53c:	39 c2                	cmp    %eax,%edx
f010a53e:	77 bd                	ja     f010a4fd <program_segment_alloc_map_copy_workingset+0x6d8>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a540:	eb 09                	jmp    f010a54b <program_segment_alloc_map_copy_workingset+0x726>
	{
		*dst_ptr = 0;
f010a542:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a545:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a548:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a54b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a54e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a551:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a554:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a559:	89 c2                	mov    %eax,%edx
f010a55b:	8b 45 10             	mov    0x10(%ebp),%eax
f010a55e:	8b 00                	mov    (%eax),%eax
f010a560:	c1 e0 0c             	shl    $0xc,%eax
f010a563:	01 c2                	add    %eax,%edx
f010a565:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a568:	39 c2                	cmp    %eax,%edx
f010a56a:	77 d6                	ja     f010a542 <program_segment_alloc_map_copy_workingset+0x71d>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a56c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a571:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a574:	c9                   	leave  
f010a575:	c3                   	ret    

f010a576 <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a576:	55                   	push   %ebp
f010a577:	89 e5                	mov    %esp,%ebp
f010a579:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a57c:	83 ec 0c             	sub    $0xc,%esp
f010a57f:	68 00 10 00 00       	push   $0x1000
f010a584:	e8 6f da ff ff       	call   f0107ff8 <kmalloc>
f010a589:	83 c4 10             	add    $0x10,%esp
f010a58c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a58f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a593:	75 17                	jne    f010a5ac <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a595:	83 ec 04             	sub    $0x4,%esp
f010a598:	68 0f 33 13 f0       	push   $0xf013330f
f010a59d:	68 ff 02 00 00       	push   $0x2ff
f010a5a2:	68 b7 31 13 f0       	push   $0xf01331b7
f010a5a7:	e8 04 5c ff ff       	call   f01001b0 <_panic>
	}
	return ptr_user_page_directory;
f010a5ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010a5af:	c9                   	leave  
f010a5b0:	c3                   	ret    

f010a5b1 <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010a5b1:	55                   	push   %ebp
f010a5b2:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #07] [2] USER HEAP - initialize_uheap_dynamic_allocator()
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	//panic("not implemented yet");
}
f010a5b4:	90                   	nop
f010a5b5:	5d                   	pop    %ebp
f010a5b6:	c3                   	ret    

f010a5b7 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a5b7:	55                   	push   %ebp
f010a5b8:	89 e5                	mov    %esp,%ebp
f010a5ba:	53                   	push   %ebx
f010a5bb:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a5be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c1:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a5c4:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a5ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5cd:	8b 55 10             	mov    0x10(%ebp),%edx
f010a5d0:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a5dd:	eb 1a                	jmp    f010a5f9 <initialize_environment+0x42>
	{
		e->env_page_directory[i] = 0 ;
f010a5df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a5e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5eb:	c1 e2 02             	shl    $0x2,%edx
f010a5ee:	01 d0                	add    %edx,%eax
f010a5f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5f6:	ff 45 f4             	incl   -0xc(%ebp)
f010a5f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a5fc:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a601:	76 dc                	jbe    f010a5df <initialize_environment+0x28>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a603:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a60a:	eb 25                	jmp    f010a631 <initialize_environment+0x7a>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a60c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a60f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a615:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a618:	c1 e2 02             	shl    $0x2,%edx
f010a61b:	01 c2                	add    %eax,%edx
f010a61d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f010a622:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a625:	c1 e1 02             	shl    $0x2,%ecx
f010a628:	01 c8                	add    %ecx,%eax
f010a62a:	8b 00                	mov    (%eax),%eax
f010a62c:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a62e:	ff 45 f4             	incl   -0xc(%ebp)
f010a631:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a638:	7e d2                	jle    f010a60c <initialize_environment+0x55>
		LIST_INIT(&(e->page_WS_list));
		//share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010a63a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63d:	8b 15 70 31 25 f0    	mov    0xf0253170,%edx
f010a643:	29 d0                	sub    %edx,%eax
f010a645:	c1 f8 05             	sar    $0x5,%eax
f010a648:	89 c2                	mov    %eax,%edx
f010a64a:	89 d0                	mov    %edx,%eax
f010a64c:	c1 e0 03             	shl    $0x3,%eax
f010a64f:	01 d0                	add    %edx,%eax
f010a651:	01 c0                	add    %eax,%eax
f010a653:	01 d0                	add    %edx,%eax
f010a655:	c1 e0 06             	shl    $0x6,%eax
f010a658:	01 d0                	add    %edx,%eax
f010a65a:	89 c1                	mov    %eax,%ecx
f010a65c:	c1 e1 04             	shl    $0x4,%ecx
f010a65f:	01 c8                	add    %ecx,%eax
f010a661:	c1 e0 03             	shl    $0x3,%eax
f010a664:	01 d0                	add    %edx,%eax
f010a666:	01 c0                	add    %eax,%eax
f010a668:	01 d0                	add    %edx,%eax
f010a66a:	89 c1                	mov    %eax,%ecx
f010a66c:	c1 e1 04             	shl    $0x4,%ecx
f010a66f:	01 c8                	add    %ecx,%eax
f010a671:	c1 e0 03             	shl    $0x3,%eax
f010a674:	01 d0                	add    %edx,%eax
f010a676:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a67d:	01 d0                	add    %edx,%eax
f010a67f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010a682:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a685:	89 d0                	mov    %edx,%eax
f010a687:	01 c0                	add    %eax,%eax
f010a689:	01 d0                	add    %edx,%eax
f010a68b:	01 c0                	add    %eax,%eax
f010a68d:	01 d0                	add    %edx,%eax
f010a68f:	c1 e0 02             	shl    $0x2,%eax
f010a692:	01 d0                	add    %edx,%eax
f010a694:	01 c0                	add    %eax,%eax
f010a696:	01 d0                	add    %edx,%eax
f010a698:	c1 e0 02             	shl    $0x2,%eax
f010a69b:	01 d0                	add    %edx,%eax
f010a69d:	c1 e0 02             	shl    $0x2,%eax
f010a6a0:	01 d0                	add    %edx,%eax
f010a6a2:	c1 e0 02             	shl    $0x2,%eax
f010a6a5:	01 d0                	add    %edx,%eax
f010a6a7:	c1 e0 05             	shl    $0x5,%eax
f010a6aa:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a6af:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010a6b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b8:	89 90 6c da 01 00    	mov    %edx,0x1da6c(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a6be:	83 ec 0c             	sub    $0xc,%esp
f010a6c1:	6a 02                	push   $0x2
f010a6c3:	e8 17 32 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f010a6c8:	83 c4 10             	add    $0x10,%esp
f010a6cb:	85 c0                	test   %eax,%eax
f010a6cd:	0f 84 34 01 00 00    	je     f010a807 <initialize_environment+0x250>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a6d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a6da:	e9 14 01 00 00       	jmp    f010a7f3 <initialize_environment+0x23c>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a6df:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6e2:	89 d0                	mov    %edx,%eax
f010a6e4:	01 c0                	add    %eax,%eax
f010a6e6:	01 d0                	add    %edx,%eax
f010a6e8:	c1 e0 03             	shl    $0x3,%eax
f010a6eb:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a6f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f4:	01 d0                	add    %edx,%eax
f010a6f6:	83 c0 08             	add    $0x8,%eax
f010a6f9:	85 c0                	test   %eax,%eax
f010a6fb:	75 17                	jne    f010a714 <initialize_environment+0x15d>
f010a6fd:	83 ec 04             	sub    $0x4,%esp
f010a700:	68 38 32 13 f0       	push   $0xf0133238
f010a705:	68 45 03 00 00       	push   $0x345
f010a70a:	68 b7 31 13 f0       	push   $0xf01331b7
f010a70f:	e8 9c 5a ff ff       	call   f01001b0 <_panic>
f010a714:	8b 45 08             	mov    0x8(%ebp),%eax
f010a717:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a71d:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a720:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a723:	89 c8                	mov    %ecx,%eax
f010a725:	01 c0                	add    %eax,%eax
f010a727:	01 c8                	add    %ecx,%eax
f010a729:	c1 e0 03             	shl    $0x3,%eax
f010a72c:	01 d8                	add    %ebx,%eax
f010a72e:	05 c8 00 00 00       	add    $0xc8,%eax
f010a733:	89 10                	mov    %edx,(%eax)
f010a735:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a738:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a73b:	89 d0                	mov    %edx,%eax
f010a73d:	01 c0                	add    %eax,%eax
f010a73f:	01 d0                	add    %edx,%eax
f010a741:	c1 e0 03             	shl    $0x3,%eax
f010a744:	01 c8                	add    %ecx,%eax
f010a746:	05 c8 00 00 00       	add    $0xc8,%eax
f010a74b:	8b 00                	mov    (%eax),%eax
f010a74d:	85 c0                	test   %eax,%eax
f010a74f:	74 28                	je     f010a779 <initialize_environment+0x1c2>
f010a751:	8b 45 08             	mov    0x8(%ebp),%eax
f010a754:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a75a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a75d:	89 c8                	mov    %ecx,%eax
f010a75f:	01 c0                	add    %eax,%eax
f010a761:	01 c8                	add    %ecx,%eax
f010a763:	c1 e0 03             	shl    $0x3,%eax
f010a766:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a76c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a76f:	01 c8                	add    %ecx,%eax
f010a771:	83 c0 08             	add    $0x8,%eax
f010a774:	89 42 14             	mov    %eax,0x14(%edx)
f010a777:	eb 23                	jmp    f010a79c <initialize_environment+0x1e5>
f010a779:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a77c:	89 d0                	mov    %edx,%eax
f010a77e:	01 c0                	add    %eax,%eax
f010a780:	01 d0                	add    %edx,%eax
f010a782:	c1 e0 03             	shl    $0x3,%eax
f010a785:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a78b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a78e:	01 d0                	add    %edx,%eax
f010a790:	8d 50 08             	lea    0x8(%eax),%edx
f010a793:	8b 45 08             	mov    0x8(%ebp),%eax
f010a796:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a79c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a79f:	89 d0                	mov    %edx,%eax
f010a7a1:	01 c0                	add    %eax,%eax
f010a7a3:	01 d0                	add    %edx,%eax
f010a7a5:	c1 e0 03             	shl    $0x3,%eax
f010a7a8:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a7ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b1:	01 d0                	add    %edx,%eax
f010a7b3:	8d 50 08             	lea    0x8(%eax),%edx
f010a7b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b9:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a7bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a7c5:	89 d0                	mov    %edx,%eax
f010a7c7:	01 c0                	add    %eax,%eax
f010a7c9:	01 d0                	add    %edx,%eax
f010a7cb:	c1 e0 03             	shl    $0x3,%eax
f010a7ce:	01 c8                	add    %ecx,%eax
f010a7d0:	05 cc 00 00 00       	add    $0xcc,%eax
f010a7d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a7db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7de:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a7e4:	8d 50 01             	lea    0x1(%eax),%edx
f010a7e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ea:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a7f0:	ff 45 f0             	incl   -0x10(%ebp)
f010a7f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f6:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a7fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a7ff:	39 c2                	cmp    %eax,%edx
f010a801:	0f 87 d8 fe ff ff    	ja     f010a6df <initialize_environment+0x128>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a807:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a80e:	eb 54                	jmp    f010a864 <initialize_environment+0x2ad>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a810:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a813:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a816:	89 d0                	mov    %edx,%eax
f010a818:	01 c0                	add    %eax,%eax
f010a81a:	01 d0                	add    %edx,%eax
f010a81c:	c1 e0 03             	shl    $0x3,%eax
f010a81f:	01 c8                	add    %ecx,%eax
f010a821:	05 b8 00 00 00       	add    $0xb8,%eax
f010a826:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a82c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a82f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a832:	89 d0                	mov    %edx,%eax
f010a834:	01 c0                	add    %eax,%eax
f010a836:	01 d0                	add    %edx,%eax
f010a838:	c1 e0 03             	shl    $0x3,%eax
f010a83b:	01 c8                	add    %ecx,%eax
f010a83d:	05 bc 00 00 00       	add    $0xbc,%eax
f010a842:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a845:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a848:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a84b:	89 d0                	mov    %edx,%eax
f010a84d:	01 c0                	add    %eax,%eax
f010a84f:	01 d0                	add    %edx,%eax
f010a851:	c1 e0 03             	shl    $0x3,%eax
f010a854:	01 c8                	add    %ecx,%eax
f010a856:	05 c0 00 00 00       	add    $0xc0,%eax
f010a85b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a861:	ff 45 f4             	incl   -0xc(%ebp)
f010a864:	8b 45 08             	mov    0x8(%ebp),%eax
f010a867:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a86d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a870:	39 c2                	cmp    %eax,%edx
f010a872:	77 9c                	ja     f010a810 <initialize_environment+0x259>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a874:	8b 45 08             	mov    0x8(%ebp),%eax
f010a877:	c7 80 78 d5 01 00 00 	movl   $0x0,0x1d578(%eax)
f010a87e:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a881:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a888:	eb 54                	jmp    f010a8de <initialize_environment+0x327>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a88a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a88d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a890:	89 d0                	mov    %edx,%eax
f010a892:	01 c0                	add    %eax,%eax
f010a894:	01 d0                	add    %edx,%eax
f010a896:	c1 e0 03             	shl    $0x3,%eax
f010a899:	01 c8                	add    %ecx,%eax
f010a89b:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a8a0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a8a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a8a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a8ac:	89 d0                	mov    %edx,%eax
f010a8ae:	01 c0                	add    %eax,%eax
f010a8b0:	01 d0                	add    %edx,%eax
f010a8b2:	c1 e0 03             	shl    $0x3,%eax
f010a8b5:	01 c8                	add    %ecx,%eax
f010a8b7:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a8bc:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a8bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a8c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a8c5:	89 d0                	mov    %edx,%eax
f010a8c7:	01 c0                	add    %eax,%eax
f010a8c9:	01 d0                	add    %edx,%eax
f010a8cb:	c1 e0 03             	shl    $0x3,%eax
f010a8ce:	01 c8                	add    %ecx,%eax
f010a8d0:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a8d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a8db:	ff 45 f4             	incl   -0xc(%ebp)
f010a8de:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a8e2:	7e a6                	jle    f010a88a <initialize_environment+0x2d3>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a8e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e7:	c7 80 30 da 01 00 00 	movl   $0x0,0x1da30(%eax)
f010a8ee:	00 00 00 

	e->pageFaultsCounter=0;
f010a8f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f4:	c7 80 74 da 01 00 00 	movl   $0x0,0x1da74(%eax)
f010a8fb:	00 00 00 
	e->tableFaultsCounter=0;
f010a8fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a901:	c7 80 78 da 01 00 00 	movl   $0x0,0x1da78(%eax)
f010a908:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a90b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90e:	c7 80 7c da 01 00 00 	movl   $0x0,0x1da7c(%eax)
f010a915:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a918:	8b 45 08             	mov    0x8(%ebp),%eax
f010a91b:	c7 80 80 da 01 00 00 	movl   $0x0,0x1da80(%eax)
f010a922:	00 00 00 

	e->nModifiedPages=0;
f010a925:	8b 45 08             	mov    0x8(%ebp),%eax
f010a928:	c7 80 84 da 01 00 00 	movl   $0x0,0x1da84(%eax)
f010a92f:	00 00 00 
	e->nNotModifiedPages=0;
f010a932:	8b 45 08             	mov    0x8(%ebp),%eax
f010a935:	c7 80 88 da 01 00 00 	movl   $0x0,0x1da88(%eax)
f010a93c:	00 00 00 
	e->nClocks = 0;
f010a93f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a942:	c7 80 9c da 01 00 00 	movl   $0x0,0x1da9c(%eax)
f010a949:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a94c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a94f:	c7 80 90 da 01 00 00 	movl   $0x0,0x1da90(%eax)
f010a956:	00 00 00 
	e->nPageOut = 0;
f010a959:	8b 45 08             	mov    0x8(%ebp),%eax
f010a95c:	c7 80 94 da 01 00 00 	movl   $0x0,0x1da94(%eax)
f010a963:	00 00 00 
	e->nNewPageAdded = 0;
f010a966:	8b 45 08             	mov    0x8(%ebp),%eax
f010a969:	c7 80 98 da 01 00 00 	movl   $0x0,0x1da98(%eax)
f010a970:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010a973:	83 ec 04             	sub    $0x4,%esp
f010a976:	68 00 00 00 82       	push   $0x82000000
f010a97b:	68 00 00 00 80       	push   $0x80000000
f010a980:	ff 75 08             	pushl  0x8(%ebp)
f010a983:	e8 29 fc ff ff       	call   f010a5b1 <initialize_uheap_dynamic_allocator>
f010a988:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a98b:	83 ec 0c             	sub    $0xc,%esp
f010a98e:	ff 75 08             	pushl  0x8(%ebp)
f010a991:	e8 09 00 00 00       	call   f010a99f <complete_environment_initialization>
f010a996:	83 c4 10             	add    $0x10,%esp
}
f010a999:	90                   	nop
f010a99a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a99d:	c9                   	leave  
f010a99e:	c3                   	ret    

f010a99f <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a99f:	55                   	push   %ebp
f010a9a0:	89 e5                	mov    %esp,%ebp
f010a9a2:	53                   	push   %ebx
f010a9a3:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a9a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9a9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a9af:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a9b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9b8:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a9be:	83 c8 03             	or     $0x3,%eax
f010a9c1:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a9c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9c6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a9cc:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a9d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a9db:	83 c8 05             	or     $0x5,%eax
f010a9de:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a9e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e3:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010a9ea:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010a9ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f0:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010a9f7:	00 00 00 
	e->disk_env_tabledir = 0;
f010a9fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9fd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010aa04:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010aa07:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa0a:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010aa11:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010aa14:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa17:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010aa1a:	83 ec 0c             	sub    $0xc,%esp
f010aa1d:	6a 08                	push   $0x8
f010aa1f:	e8 38 34 02 00       	call   f012de5c <log2_ceil>
f010aa24:	83 c4 10             	add    $0x10,%esp
f010aa27:	ba 01 00 00 00       	mov    $0x1,%edx
f010aa2c:	88 c1                	mov    %al,%cl
f010aa2e:	d3 e2                	shl    %cl,%edx
f010aa30:	89 d0                	mov    %edx,%eax
f010aa32:	01 d8                	add    %ebx,%eax
f010aa34:	89 c3                	mov    %eax,%ebx
f010aa36:	83 ec 0c             	sub    $0xc,%esp
f010aa39:	6a 08                	push   $0x8
f010aa3b:	e8 e7 33 02 00       	call   f012de27 <nearest_pow2_ceil>
f010aa40:	83 c4 10             	add    $0x10,%esp
f010aa43:	f7 d8                	neg    %eax
f010aa45:	21 d8                	and    %ebx,%eax
f010aa47:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010aa4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aa4e:	7f 1b                	jg     f010aa6b <complete_environment_initialization+0xcc>
		generation = 1 << ENVGENSHIFT;
f010aa50:	83 ec 0c             	sub    $0xc,%esp
f010aa53:	6a 08                	push   $0x8
f010aa55:	e8 02 34 02 00       	call   f012de5c <log2_ceil>
f010aa5a:	83 c4 10             	add    $0x10,%esp
f010aa5d:	ba 01 00 00 00       	mov    $0x1,%edx
f010aa62:	88 c1                	mov    %al,%cl
f010aa64:	d3 e2                	shl    %cl,%edx
f010aa66:	89 d0                	mov    %edx,%eax
f010aa68:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010aa6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa6e:	8b 15 70 31 25 f0    	mov    0xf0253170,%edx
f010aa74:	29 d0                	sub    %edx,%eax
f010aa76:	c1 f8 05             	sar    $0x5,%eax
f010aa79:	89 c2                	mov    %eax,%edx
f010aa7b:	89 d0                	mov    %edx,%eax
f010aa7d:	c1 e0 03             	shl    $0x3,%eax
f010aa80:	01 d0                	add    %edx,%eax
f010aa82:	01 c0                	add    %eax,%eax
f010aa84:	01 d0                	add    %edx,%eax
f010aa86:	c1 e0 06             	shl    $0x6,%eax
f010aa89:	01 d0                	add    %edx,%eax
f010aa8b:	89 c1                	mov    %eax,%ecx
f010aa8d:	c1 e1 04             	shl    $0x4,%ecx
f010aa90:	01 c8                	add    %ecx,%eax
f010aa92:	c1 e0 03             	shl    $0x3,%eax
f010aa95:	01 d0                	add    %edx,%eax
f010aa97:	01 c0                	add    %eax,%eax
f010aa99:	01 d0                	add    %edx,%eax
f010aa9b:	89 c1                	mov    %eax,%ecx
f010aa9d:	c1 e1 04             	shl    $0x4,%ecx
f010aaa0:	01 c8                	add    %ecx,%eax
f010aaa2:	c1 e0 03             	shl    $0x3,%eax
f010aaa5:	01 d0                	add    %edx,%eax
f010aaa7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010aaae:	01 d0                	add    %edx,%eax
f010aab0:	0b 45 f4             	or     -0xc(%ebp),%eax
f010aab3:	89 c2                	mov    %eax,%edx
f010aab5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab8:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010aabb:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010aac0:	85 c0                	test   %eax,%eax
f010aac2:	75 0c                	jne    f010aad0 <complete_environment_initialization+0x131>
		e->env_parent_id = 0;//no parent;
f010aac4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac7:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010aace:	eb 0e                	jmp    f010aade <complete_environment_initialization+0x13f>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010aad0:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010aad5:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aad8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aadb:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aade:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae1:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aae8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaeb:	c7 80 8c da 01 00 00 	movl   $0x0,0x1da8c(%eax)
f010aaf2:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aaf5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaf8:	83 ec 04             	sub    $0x4,%esp
f010aafb:	6a 44                	push   $0x44
f010aafd:	6a 00                	push   $0x0
f010aaff:	50                   	push   %eax
f010ab00:	e8 85 47 02 00       	call   f012f28a <memset>
f010ab05:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010ab08:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab0b:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010ab11:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab14:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010ab1a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab1d:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010ab23:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab26:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010ab2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab30:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010ab36:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab39:	8b 40 38             	mov    0x38(%eax),%eax
f010ab3c:	80 cc 02             	or     $0x2,%ah
f010ab3f:	89 c2                	mov    %eax,%edx
f010ab41:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab44:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010ab47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ab4b:	75 17                	jne    f010ab64 <complete_environment_initialization+0x1c5>
f010ab4d:	83 ec 04             	sub    $0x4,%esp
f010ab50:	68 19 32 13 f0       	push   $0xf0133219
f010ab55:	68 b1 03 00 00       	push   $0x3b1
f010ab5a:	68 b7 31 13 f0       	push   $0xf01331b7
f010ab5f:	e8 4c 56 ff ff       	call   f01001b0 <_panic>
f010ab64:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab67:	8b 40 44             	mov    0x44(%eax),%eax
f010ab6a:	85 c0                	test   %eax,%eax
f010ab6c:	74 11                	je     f010ab7f <complete_environment_initialization+0x1e0>
f010ab6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab71:	8b 40 44             	mov    0x44(%eax),%eax
f010ab74:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab77:	8b 52 48             	mov    0x48(%edx),%edx
f010ab7a:	89 50 48             	mov    %edx,0x48(%eax)
f010ab7d:	eb 0b                	jmp    f010ab8a <complete_environment_initialization+0x1eb>
f010ab7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab82:	8b 40 48             	mov    0x48(%eax),%eax
f010ab85:	a3 7c 31 25 f0       	mov    %eax,0xf025317c
f010ab8a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab8d:	8b 40 48             	mov    0x48(%eax),%eax
f010ab90:	85 c0                	test   %eax,%eax
f010ab92:	74 11                	je     f010aba5 <complete_environment_initialization+0x206>
f010ab94:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab97:	8b 40 48             	mov    0x48(%eax),%eax
f010ab9a:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab9d:	8b 52 44             	mov    0x44(%edx),%edx
f010aba0:	89 50 44             	mov    %edx,0x44(%eax)
f010aba3:	eb 0b                	jmp    f010abb0 <complete_environment_initialization+0x211>
f010aba5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aba8:	8b 40 44             	mov    0x44(%eax),%eax
f010abab:	a3 78 31 25 f0       	mov    %eax,0xf0253178
f010abb0:	8b 45 08             	mov    0x8(%ebp),%eax
f010abb3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010abba:	8b 45 08             	mov    0x8(%ebp),%eax
f010abbd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010abc4:	a1 84 31 25 f0       	mov    0xf0253184,%eax
f010abc9:	48                   	dec    %eax
f010abca:	a3 84 31 25 f0       	mov    %eax,0xf0253184
	return ;
f010abcf:	90                   	nop
}
f010abd0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010abd3:	c9                   	leave  
f010abd4:	c3                   	ret    

f010abd5 <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010abd5:	55                   	push   %ebp
f010abd6:	89 e5                	mov    %esp,%ebp
f010abd8:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010abdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abde:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010abe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abe4:	8b 00                	mov    (%eax),%eax
f010abe6:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010abeb:	74 17                	je     f010ac04 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010abed:	83 ec 04             	sub    $0x4,%esp
f010abf0:	68 2c 33 13 f0       	push   $0xf013332c
f010abf5:	68 bd 03 00 00       	push   $0x3bd
f010abfa:	68 b7 31 13 f0       	push   $0xf01331b7
f010abff:	e8 ac 55 ff ff       	call   f01001b0 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ac04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac07:	8b 40 18             	mov    0x18(%eax),%eax
f010ac0a:	89 c2                	mov    %eax,%edx
f010ac0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0f:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ac12:	90                   	nop
f010ac13:	c9                   	leave  
f010ac14:	c3                   	ret    

f010ac15 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010ac15:	55                   	push   %ebp
f010ac16:	89 e5                	mov    %esp,%ebp
f010ac18:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010ac1b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac1e:	8b 40 10             	mov    0x10(%eax),%eax
f010ac21:	8d 48 01             	lea    0x1(%eax),%ecx
f010ac24:	8b 55 08             	mov    0x8(%ebp),%edx
f010ac27:	89 4a 10             	mov    %ecx,0x10(%edx)
f010ac2a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ac2d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac30:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ac33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac36:	8b 00                	mov    (%eax),%eax
f010ac38:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ac3d:	74 17                	je     f010ac56 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010ac3f:	83 ec 04             	sub    $0x4,%esp
f010ac42:	68 2c 33 13 f0       	push   $0xf013332c
f010ac47:	68 cc 03 00 00       	push   $0x3cc
f010ac4c:	68 b7 31 13 f0       	push   $0xf01331b7
f010ac51:	e8 5a 55 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010ac56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac59:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ac5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac5f:	01 d0                	add    %edx,%eax
f010ac61:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010ac64:	eb 0f                	jmp    f010ac75 <PROGRAM_SEGMENT_NEXT+0x60>
f010ac66:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac69:	8b 40 10             	mov    0x10(%eax),%eax
f010ac6c:	8d 50 01             	lea    0x1(%eax),%edx
f010ac6f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac72:	89 50 10             	mov    %edx,0x10(%eax)
f010ac75:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac78:	8b 40 10             	mov    0x10(%eax),%eax
f010ac7b:	c1 e0 05             	shl    $0x5,%eax
f010ac7e:	89 c2                	mov    %eax,%edx
f010ac80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac83:	01 d0                	add    %edx,%eax
f010ac85:	8b 00                	mov    (%eax),%eax
f010ac87:	83 f8 01             	cmp    $0x1,%eax
f010ac8a:	74 13                	je     f010ac9f <PROGRAM_SEGMENT_NEXT+0x8a>
f010ac8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8f:	8b 50 10             	mov    0x10(%eax),%edx
f010ac92:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac95:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac98:	0f b7 c0             	movzwl %ax,%eax
f010ac9b:	39 c2                	cmp    %eax,%edx
f010ac9d:	72 c7                	jb     f010ac66 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ac9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aca2:	8b 40 10             	mov    0x10(%eax),%eax
f010aca5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010aca8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acab:	8b 40 2c             	mov    0x2c(%eax),%eax
f010acae:	0f b7 c0             	movzwl %ax,%eax
f010acb1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010acb4:	7e 63                	jle    f010ad19 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010acb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acb9:	c1 e0 05             	shl    $0x5,%eax
f010acbc:	89 c2                	mov    %eax,%edx
f010acbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010acc1:	01 d0                	add    %edx,%eax
f010acc3:	8b 50 04             	mov    0x4(%eax),%edx
f010acc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acc9:	01 c2                	add    %eax,%edx
f010accb:	8b 45 08             	mov    0x8(%ebp),%eax
f010acce:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010acd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acd3:	c1 e0 05             	shl    $0x5,%eax
f010acd6:	89 c2                	mov    %eax,%edx
f010acd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010acdb:	01 d0                	add    %edx,%eax
f010acdd:	8b 50 14             	mov    0x14(%eax),%edx
f010ace0:	8b 45 08             	mov    0x8(%ebp),%eax
f010ace3:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ace6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ace9:	c1 e0 05             	shl    $0x5,%eax
f010acec:	89 c2                	mov    %eax,%edx
f010acee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010acf1:	01 d0                	add    %edx,%eax
f010acf3:	8b 50 10             	mov    0x10(%eax),%edx
f010acf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010acf9:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010acfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acff:	c1 e0 05             	shl    $0x5,%eax
f010ad02:	89 c2                	mov    %eax,%edx
f010ad04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad07:	01 d0                	add    %edx,%eax
f010ad09:	8b 40 08             	mov    0x8(%eax),%eax
f010ad0c:	89 c2                	mov    %eax,%edx
f010ad0e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad11:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010ad14:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad17:	eb 05                	jmp    f010ad1e <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010ad19:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ad1e:	c9                   	leave  
f010ad1f:	c3                   	ret    

f010ad20 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ad20:	55                   	push   %ebp
f010ad21:	89 e5                	mov    %esp,%ebp
f010ad23:	57                   	push   %edi
f010ad24:	56                   	push   %esi
f010ad25:	53                   	push   %ebx
f010ad26:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010ad29:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ad30:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ad36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad39:	8b 00                	mov    (%eax),%eax
f010ad3b:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ad40:	74 17                	je     f010ad59 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ad42:	83 ec 04             	sub    $0x4,%esp
f010ad45:	68 2c 33 13 f0       	push   $0xf013332c
f010ad4a:	68 e8 03 00 00       	push   $0x3e8
f010ad4f:	68 b7 31 13 f0       	push   $0xf01331b7
f010ad54:	e8 57 54 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010ad59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad5c:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ad5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad62:	01 d0                	add    %edx,%eax
f010ad64:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010ad67:	eb 07                	jmp    f010ad70 <PROGRAM_SEGMENT_FIRST+0x50>
f010ad69:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ad6c:	40                   	inc    %eax
f010ad6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010ad70:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ad73:	c1 e0 05             	shl    $0x5,%eax
f010ad76:	89 c2                	mov    %eax,%edx
f010ad78:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad7b:	01 d0                	add    %edx,%eax
f010ad7d:	8b 00                	mov    (%eax),%eax
f010ad7f:	83 f8 01             	cmp    $0x1,%eax
f010ad82:	74 10                	je     f010ad94 <PROGRAM_SEGMENT_FIRST+0x74>
f010ad84:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010ad87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad8a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad8d:	0f b7 c0             	movzwl %ax,%eax
f010ad90:	39 c2                	cmp    %eax,%edx
f010ad92:	72 d5                	jb     f010ad69 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010ad94:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ad97:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010ad9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad9d:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ada0:	0f b7 c0             	movzwl %ax,%eax
f010ada3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ada6:	7e 68                	jle    f010ae10 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ada8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010adab:	c1 e0 05             	shl    $0x5,%eax
f010adae:	89 c2                	mov    %eax,%edx
f010adb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010adb3:	01 d0                	add    %edx,%eax
f010adb5:	8b 50 04             	mov    0x4(%eax),%edx
f010adb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010adbb:	01 d0                	add    %edx,%eax
f010adbd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010adc0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010adc3:	c1 e0 05             	shl    $0x5,%eax
f010adc6:	89 c2                	mov    %eax,%edx
f010adc8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010adcb:	01 d0                	add    %edx,%eax
f010adcd:	8b 40 14             	mov    0x14(%eax),%eax
f010add0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010add3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010add6:	c1 e0 05             	shl    $0x5,%eax
f010add9:	89 c2                	mov    %eax,%edx
f010addb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010adde:	01 d0                	add    %edx,%eax
f010ade0:	8b 40 10             	mov    0x10(%eax),%eax
f010ade3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ade6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ade9:	c1 e0 05             	shl    $0x5,%eax
f010adec:	89 c2                	mov    %eax,%edx
f010adee:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010adf1:	01 d0                	add    %edx,%eax
f010adf3:	8b 40 08             	mov    0x8(%eax),%eax
f010adf6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010adf9:	8b 45 08             	mov    0x8(%ebp),%eax
f010adfc:	89 c3                	mov    %eax,%ebx
f010adfe:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ae01:	ba 05 00 00 00       	mov    $0x5,%edx
f010ae06:	89 df                	mov    %ebx,%edi
f010ae08:	89 c6                	mov    %eax,%esi
f010ae0a:	89 d1                	mov    %edx,%ecx
f010ae0c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010ae0e:	eb 1c                	jmp    f010ae2c <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010ae10:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010ae17:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae1a:	89 c3                	mov    %eax,%ebx
f010ae1c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ae1f:	ba 05 00 00 00       	mov    $0x5,%edx
f010ae24:	89 df                	mov    %ebx,%edi
f010ae26:	89 c6                	mov    %eax,%esi
f010ae28:	89 d1                	mov    %edx,%ecx
f010ae2a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ae2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae2f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ae32:	5b                   	pop    %ebx
f010ae33:	5e                   	pop    %esi
f010ae34:	5f                   	pop    %edi
f010ae35:	5d                   	pop    %ebp
f010ae36:	c2 04 00             	ret    $0x4

f010ae39 <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010ae39:	55                   	push   %ebp
f010ae3a:	89 e5                	mov    %esp,%ebp
f010ae3c:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010ae3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ae46:	a1 40 3a 25 f0       	mov    0xf0253a40,%eax
f010ae4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae4e:	e9 c6 00 00 00       	jmp    f010af19 <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010ae53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae56:	8b 40 10             	mov    0x10(%eax),%eax
f010ae59:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ae5c:	0f 85 af 00 00 00    	jne    f010af11 <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010ae62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae65:	8b 50 0c             	mov    0xc(%eax),%edx
f010ae68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae6b:	8b 40 10             	mov    0x10(%eax),%eax
f010ae6e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ae74:	83 ec 08             	sub    $0x8,%esp
f010ae77:	52                   	push   %edx
f010ae78:	50                   	push   %eax
f010ae79:	e8 4a d3 ff ff       	call   f01081c8 <pt_clear_page_table_entry>
f010ae7e:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010ae81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae85:	75 17                	jne    f010ae9e <cleanup_buffers+0x65>
f010ae87:	83 ec 04             	sub    $0x4,%esp
f010ae8a:	68 19 32 13 f0       	push   $0xf0133219
f010ae8f:	68 0f 04 00 00       	push   $0x40f
f010ae94:	68 b7 31 13 f0       	push   $0xf01331b7
f010ae99:	e8 12 53 ff ff       	call   f01001b0 <_panic>
f010ae9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aea1:	8b 00                	mov    (%eax),%eax
f010aea3:	85 c0                	test   %eax,%eax
f010aea5:	74 10                	je     f010aeb7 <cleanup_buffers+0x7e>
f010aea7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aeaa:	8b 00                	mov    (%eax),%eax
f010aeac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aeaf:	8b 52 04             	mov    0x4(%edx),%edx
f010aeb2:	89 50 04             	mov    %edx,0x4(%eax)
f010aeb5:	eb 0b                	jmp    f010aec2 <cleanup_buffers+0x89>
f010aeb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aeba:	8b 40 04             	mov    0x4(%eax),%eax
f010aebd:	a3 44 3a 25 f0       	mov    %eax,0xf0253a44
f010aec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aec5:	8b 40 04             	mov    0x4(%eax),%eax
f010aec8:	85 c0                	test   %eax,%eax
f010aeca:	74 0f                	je     f010aedb <cleanup_buffers+0xa2>
f010aecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aecf:	8b 40 04             	mov    0x4(%eax),%eax
f010aed2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aed5:	8b 12                	mov    (%edx),%edx
f010aed7:	89 10                	mov    %edx,(%eax)
f010aed9:	eb 0a                	jmp    f010aee5 <cleanup_buffers+0xac>
f010aedb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aede:	8b 00                	mov    (%eax),%eax
f010aee0:	a3 40 3a 25 f0       	mov    %eax,0xf0253a40
f010aee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aee8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010aeee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aef1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010aef8:	a1 4c 3a 25 f0       	mov    0xf0253a4c,%eax
f010aefd:	48                   	dec    %eax
f010aefe:	a3 4c 3a 25 f0       	mov    %eax,0xf0253a4c

			free_frame(ptr_fi);
f010af03:	83 ec 0c             	sub    $0xc,%esp
f010af06:	ff 75 f4             	pushl  -0xc(%ebp)
f010af09:	e8 2f c5 ff ff       	call   f010743d <free_frame>
f010af0e:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010af11:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f010af16:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010af19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af1d:	74 07                	je     f010af26 <cleanup_buffers+0xed>
f010af1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af22:	8b 00                	mov    (%eax),%eax
f010af24:	eb 05                	jmp    f010af2b <cleanup_buffers+0xf2>
f010af26:	b8 00 00 00 00       	mov    $0x0,%eax
f010af2b:	a3 48 3a 25 f0       	mov    %eax,0xf0253a48
f010af30:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f010af35:	85 c0                	test   %eax,%eax
f010af37:	0f 85 16 ff ff ff    	jne    f010ae53 <cleanup_buffers+0x1a>
f010af3d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af41:	0f 85 0c ff ff ff    	jne    f010ae53 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010af47:	90                   	nop
f010af48:	c9                   	leave  
f010af49:	c3                   	ret    

f010af4a <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010af4a:	55                   	push   %ebp
f010af4b:	89 e5                	mov    %esp,%ebp
f010af4d:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010af50:	83 ec 04             	sub    $0x4,%esp
f010af53:	68 42 33 13 f0       	push   $0xf0133342
f010af58:	6a 0b                	push   $0xb
f010af5a:	68 52 33 13 f0       	push   $0xf0133352
f010af5f:	e8 4c 52 ff ff       	call   f01001b0 <_panic>

f010af64 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010af64:	55                   	push   %ebp
f010af65:	89 e5                	mov    %esp,%ebp
f010af67:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010af71:	eb 29                	jmp    f010af9c <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010af73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af76:	89 d0                	mov    %edx,%eax
f010af78:	01 c0                	add    %eax,%eax
f010af7a:	01 d0                	add    %edx,%eax
f010af7c:	c1 e0 02             	shl    $0x2,%eax
f010af7f:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
f010af84:	8b 00                	mov    (%eax),%eax
f010af86:	83 ec 08             	sub    $0x8,%esp
f010af89:	50                   	push   %eax
f010af8a:	ff 75 08             	pushl  0x8(%ebp)
f010af8d:	e8 16 42 02 00       	call   f012f1a8 <strcmp>
f010af92:	83 c4 10             	add    $0x10,%esp
f010af95:	85 c0                	test   %eax,%eax
f010af97:	74 0f                	je     f010afa8 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af99:	ff 45 f4             	incl   -0xc(%ebp)
f010af9c:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010afa1:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010afa4:	7c cd                	jl     f010af73 <get_user_program_info+0xf>
f010afa6:	eb 01                	jmp    f010afa9 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010afa8:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010afa9:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010afae:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010afb1:	75 1a                	jne    f010afcd <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010afb3:	83 ec 08             	sub    $0x8,%esp
f010afb6:	ff 75 08             	pushl  0x8(%ebp)
f010afb9:	68 de 34 13 f0       	push   $0xf01334de
f010afbe:	e8 6e 5e ff ff       	call   f0100e31 <cprintf>
f010afc3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010afc6:	b8 00 00 00 00       	mov    $0x0,%eax
f010afcb:	eb 11                	jmp    f010afde <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010afcd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010afd0:	89 d0                	mov    %edx,%eax
f010afd2:	01 c0                	add    %eax,%eax
f010afd4:	01 d0                	add    %edx,%eax
f010afd6:	c1 e0 02             	shl    $0x2,%eax
f010afd9:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
}
f010afde:	c9                   	leave  
f010afdf:	c3                   	ret    

f010afe0 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010afe0:	55                   	push   %ebp
f010afe1:	89 e5                	mov    %esp,%ebp
f010afe3:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010afe6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010afed:	eb 2d                	jmp    f010b01c <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010afef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aff2:	89 d0                	mov    %edx,%eax
f010aff4:	01 c0                	add    %eax,%eax
f010aff6:	01 d0                	add    %edx,%eax
f010aff8:	c1 e0 02             	shl    $0x2,%eax
f010affb:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
f010b000:	8b 00                	mov    (%eax),%eax
f010b002:	8b 55 08             	mov    0x8(%ebp),%edx
f010b005:	83 c2 5c             	add    $0x5c,%edx
f010b008:	83 ec 08             	sub    $0x8,%esp
f010b00b:	50                   	push   %eax
f010b00c:	52                   	push   %edx
f010b00d:	e8 96 41 02 00       	call   f012f1a8 <strcmp>
f010b012:	83 c4 10             	add    $0x10,%esp
f010b015:	85 c0                	test   %eax,%eax
f010b017:	74 0f                	je     f010b028 <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b019:	ff 45 f4             	incl   -0xc(%ebp)
f010b01c:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010b021:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b024:	7c c9                	jl     f010afef <get_user_program_info_by_env+0xf>
f010b026:	eb 01                	jmp    f010b029 <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b028:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b029:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010b02e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b031:	75 17                	jne    f010b04a <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010b033:	83 ec 0c             	sub    $0xc,%esp
f010b036:	68 f9 34 13 f0       	push   $0xf01334f9
f010b03b:	e8 f1 5d ff ff       	call   f0100e31 <cprintf>
f010b040:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b043:	b8 00 00 00 00       	mov    $0x0,%eax
f010b048:	eb 11                	jmp    f010b05b <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010b04a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b04d:	89 d0                	mov    %edx,%eax
f010b04f:	01 c0                	add    %eax,%eax
f010b051:	01 d0                	add    %edx,%eax
f010b053:	c1 e0 02             	shl    $0x2,%eax
f010b056:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
}
f010b05b:	c9                   	leave  
f010b05c:	c3                   	ret    

f010b05d <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b05d:	55                   	push   %ebp
f010b05e:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b060:	8b 45 08             	mov    0x8(%ebp),%eax
f010b063:	83 f8 13             	cmp    $0x13,%eax
f010b066:	77 0c                	ja     f010b074 <trapname+0x17>
		return excnames[trapno];
f010b068:	8b 45 08             	mov    0x8(%ebp),%eax
f010b06b:	8b 04 85 40 39 13 f0 	mov    -0xfecc6c0(,%eax,4),%eax
f010b072:	eb 12                	jmp    f010b086 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b074:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b078:	75 07                	jne    f010b081 <trapname+0x24>
		return "System call";
f010b07a:	b8 20 35 13 f0       	mov    $0xf0133520,%eax
f010b07f:	eb 05                	jmp    f010b086 <trapname+0x29>
	return "(unknown trap)";
f010b081:	b8 2c 35 13 f0       	mov    $0xf013352c,%eax
}
f010b086:	5d                   	pop    %ebp
f010b087:	c3                   	ret    

f010b088 <idt_init>:


void
idt_init(void)
{
f010b088:	55                   	push   %ebp
f010b089:	89 e5                	mov    %esp,%ebp
f010b08b:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b08e:	b8 22 c7 10 f0       	mov    $0xf010c722,%eax
f010b093:	66 a3 10 32 25 f0    	mov    %ax,0xf0253210
f010b099:	66 c7 05 12 32 25 f0 	movw   $0x8,0xf0253212
f010b0a0:	08 00 
f010b0a2:	a0 14 32 25 f0       	mov    0xf0253214,%al
f010b0a7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0aa:	a2 14 32 25 f0       	mov    %al,0xf0253214
f010b0af:	a0 14 32 25 f0       	mov    0xf0253214,%al
f010b0b4:	83 e0 1f             	and    $0x1f,%eax
f010b0b7:	a2 14 32 25 f0       	mov    %al,0xf0253214
f010b0bc:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b0c1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0c4:	83 c8 0e             	or     $0xe,%eax
f010b0c7:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b0cc:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b0d1:	83 e0 ef             	and    $0xffffffef,%eax
f010b0d4:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b0d9:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b0de:	83 e0 9f             	and    $0xffffff9f,%eax
f010b0e1:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b0e6:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b0eb:	83 c8 80             	or     $0xffffff80,%eax
f010b0ee:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b0f3:	b8 22 c7 10 f0       	mov    $0xf010c722,%eax
f010b0f8:	c1 e8 10             	shr    $0x10,%eax
f010b0fb:	66 a3 16 32 25 f0    	mov    %ax,0xf0253216
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b101:	b8 2a c7 10 f0       	mov    $0xf010c72a,%eax
f010b106:	66 a3 20 33 25 f0    	mov    %ax,0xf0253320
f010b10c:	66 c7 05 22 33 25 f0 	movw   $0x8,0xf0253322
f010b113:	08 00 
f010b115:	a0 24 33 25 f0       	mov    0xf0253324,%al
f010b11a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b11d:	a2 24 33 25 f0       	mov    %al,0xf0253324
f010b122:	a0 24 33 25 f0       	mov    0xf0253324,%al
f010b127:	83 e0 1f             	and    $0x1f,%eax
f010b12a:	a2 24 33 25 f0       	mov    %al,0xf0253324
f010b12f:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b134:	83 e0 f0             	and    $0xfffffff0,%eax
f010b137:	83 c8 0e             	or     $0xe,%eax
f010b13a:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b13f:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b144:	83 e0 ef             	and    $0xffffffef,%eax
f010b147:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b14c:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b151:	83 c8 60             	or     $0x60,%eax
f010b154:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b159:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b15e:	83 c8 80             	or     $0xffffff80,%eax
f010b161:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b166:	b8 2a c7 10 f0       	mov    $0xf010c72a,%eax
f010b16b:	c1 e8 10             	shr    $0x10,%eax
f010b16e:	66 a3 26 33 25 f0    	mov    %ax,0xf0253326
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b174:	b8 34 c7 10 f0       	mov    $0xf010c734,%eax
f010b179:	66 a3 e0 31 25 f0    	mov    %ax,0xf02531e0
f010b17f:	66 c7 05 e2 31 25 f0 	movw   $0x8,0xf02531e2
f010b186:	08 00 
f010b188:	a0 e4 31 25 f0       	mov    0xf02531e4,%al
f010b18d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b190:	a2 e4 31 25 f0       	mov    %al,0xf02531e4
f010b195:	a0 e4 31 25 f0       	mov    0xf02531e4,%al
f010b19a:	83 e0 1f             	and    $0x1f,%eax
f010b19d:	a2 e4 31 25 f0       	mov    %al,0xf02531e4
f010b1a2:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b1a7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1aa:	83 c8 0e             	or     $0xe,%eax
f010b1ad:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b1b2:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b1b7:	83 e0 ef             	and    $0xffffffef,%eax
f010b1ba:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b1bf:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b1c4:	83 e0 9f             	and    $0xffffff9f,%eax
f010b1c7:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b1cc:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b1d1:	83 c8 80             	or     $0xffffff80,%eax
f010b1d4:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b1d9:	b8 34 c7 10 f0       	mov    $0xf010c734,%eax
f010b1de:	c1 e8 10             	shr    $0x10,%eax
f010b1e1:	66 a3 e6 31 25 f0    	mov    %ax,0xf02531e6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b1e7:	b8 3c c7 10 f0       	mov    $0xf010c73c,%eax
f010b1ec:	66 a3 a0 31 25 f0    	mov    %ax,0xf02531a0
f010b1f2:	66 c7 05 a2 31 25 f0 	movw   $0x8,0xf02531a2
f010b1f9:	08 00 
f010b1fb:	a0 a4 31 25 f0       	mov    0xf02531a4,%al
f010b200:	83 e0 e0             	and    $0xffffffe0,%eax
f010b203:	a2 a4 31 25 f0       	mov    %al,0xf02531a4
f010b208:	a0 a4 31 25 f0       	mov    0xf02531a4,%al
f010b20d:	83 e0 1f             	and    $0x1f,%eax
f010b210:	a2 a4 31 25 f0       	mov    %al,0xf02531a4
f010b215:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b21a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b21d:	83 c8 0e             	or     $0xe,%eax
f010b220:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b225:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b22a:	83 e0 ef             	and    $0xffffffef,%eax
f010b22d:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b232:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b237:	83 c8 60             	or     $0x60,%eax
f010b23a:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b23f:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b244:	83 c8 80             	or     $0xffffff80,%eax
f010b247:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b24c:	b8 3c c7 10 f0       	mov    $0xf010c73c,%eax
f010b251:	c1 e8 10             	shr    $0x10,%eax
f010b254:	66 a3 a6 31 25 f0    	mov    %ax,0xf02531a6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b25a:	b8 46 c7 10 f0       	mov    $0xf010c746,%eax
f010b25f:	66 a3 a8 31 25 f0    	mov    %ax,0xf02531a8
f010b265:	66 c7 05 aa 31 25 f0 	movw   $0x8,0xf02531aa
f010b26c:	08 00 
f010b26e:	a0 ac 31 25 f0       	mov    0xf02531ac,%al
f010b273:	83 e0 e0             	and    $0xffffffe0,%eax
f010b276:	a2 ac 31 25 f0       	mov    %al,0xf02531ac
f010b27b:	a0 ac 31 25 f0       	mov    0xf02531ac,%al
f010b280:	83 e0 1f             	and    $0x1f,%eax
f010b283:	a2 ac 31 25 f0       	mov    %al,0xf02531ac
f010b288:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b28d:	83 c8 0f             	or     $0xf,%eax
f010b290:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b295:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b29a:	83 e0 ef             	and    $0xffffffef,%eax
f010b29d:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b2a2:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b2a7:	83 c8 60             	or     $0x60,%eax
f010b2aa:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b2af:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b2b4:	83 c8 80             	or     $0xffffff80,%eax
f010b2b7:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b2bc:	b8 46 c7 10 f0       	mov    $0xf010c746,%eax
f010b2c1:	c1 e8 10             	shr    $0x10,%eax
f010b2c4:	66 a3 ae 31 25 f0    	mov    %ax,0xf02531ae
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b2ca:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010b2cf:	66 a3 b0 31 25 f0    	mov    %ax,0xf02531b0
f010b2d5:	66 c7 05 b2 31 25 f0 	movw   $0x8,0xf02531b2
f010b2dc:	08 00 
f010b2de:	a0 b4 31 25 f0       	mov    0xf02531b4,%al
f010b2e3:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2e6:	a2 b4 31 25 f0       	mov    %al,0xf02531b4
f010b2eb:	a0 b4 31 25 f0       	mov    0xf02531b4,%al
f010b2f0:	83 e0 1f             	and    $0x1f,%eax
f010b2f3:	a2 b4 31 25 f0       	mov    %al,0xf02531b4
f010b2f8:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b2fd:	83 e0 f0             	and    $0xfffffff0,%eax
f010b300:	83 c8 0e             	or     $0xe,%eax
f010b303:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b308:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b30d:	83 e0 ef             	and    $0xffffffef,%eax
f010b310:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b315:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b31a:	83 c8 60             	or     $0x60,%eax
f010b31d:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b322:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b327:	83 c8 80             	or     $0xffffff80,%eax
f010b32a:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b32f:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010b334:	c1 e8 10             	shr    $0x10,%eax
f010b337:	66 a3 b6 31 25 f0    	mov    %ax,0xf02531b6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b33d:	b8 5a c7 10 f0       	mov    $0xf010c75a,%eax
f010b342:	66 a3 b8 31 25 f0    	mov    %ax,0xf02531b8
f010b348:	66 c7 05 ba 31 25 f0 	movw   $0x8,0xf02531ba
f010b34f:	08 00 
f010b351:	a0 bc 31 25 f0       	mov    0xf02531bc,%al
f010b356:	83 e0 e0             	and    $0xffffffe0,%eax
f010b359:	a2 bc 31 25 f0       	mov    %al,0xf02531bc
f010b35e:	a0 bc 31 25 f0       	mov    0xf02531bc,%al
f010b363:	83 e0 1f             	and    $0x1f,%eax
f010b366:	a2 bc 31 25 f0       	mov    %al,0xf02531bc
f010b36b:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b370:	83 c8 0f             	or     $0xf,%eax
f010b373:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b378:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b37d:	83 e0 ef             	and    $0xffffffef,%eax
f010b380:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b385:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b38a:	83 c8 60             	or     $0x60,%eax
f010b38d:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b392:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b397:	83 c8 80             	or     $0xffffff80,%eax
f010b39a:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b39f:	b8 5a c7 10 f0       	mov    $0xf010c75a,%eax
f010b3a4:	c1 e8 10             	shr    $0x10,%eax
f010b3a7:	66 a3 be 31 25 f0    	mov    %ax,0xf02531be
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b3ad:	b8 64 c7 10 f0       	mov    $0xf010c764,%eax
f010b3b2:	66 a3 c0 31 25 f0    	mov    %ax,0xf02531c0
f010b3b8:	66 c7 05 c2 31 25 f0 	movw   $0x8,0xf02531c2
f010b3bf:	08 00 
f010b3c1:	a0 c4 31 25 f0       	mov    0xf02531c4,%al
f010b3c6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3c9:	a2 c4 31 25 f0       	mov    %al,0xf02531c4
f010b3ce:	a0 c4 31 25 f0       	mov    0xf02531c4,%al
f010b3d3:	83 e0 1f             	and    $0x1f,%eax
f010b3d6:	a2 c4 31 25 f0       	mov    %al,0xf02531c4
f010b3db:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b3e0:	83 c8 0f             	or     $0xf,%eax
f010b3e3:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b3e8:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b3ed:	83 e0 ef             	and    $0xffffffef,%eax
f010b3f0:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b3f5:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b3fa:	83 c8 60             	or     $0x60,%eax
f010b3fd:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b402:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b407:	83 c8 80             	or     $0xffffff80,%eax
f010b40a:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b40f:	b8 64 c7 10 f0       	mov    $0xf010c764,%eax
f010b414:	c1 e8 10             	shr    $0x10,%eax
f010b417:	66 a3 c6 31 25 f0    	mov    %ax,0xf02531c6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b41d:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010b422:	66 a3 c8 31 25 f0    	mov    %ax,0xf02531c8
f010b428:	66 c7 05 ca 31 25 f0 	movw   $0x8,0xf02531ca
f010b42f:	08 00 
f010b431:	a0 cc 31 25 f0       	mov    0xf02531cc,%al
f010b436:	83 e0 e0             	and    $0xffffffe0,%eax
f010b439:	a2 cc 31 25 f0       	mov    %al,0xf02531cc
f010b43e:	a0 cc 31 25 f0       	mov    0xf02531cc,%al
f010b443:	83 e0 1f             	and    $0x1f,%eax
f010b446:	a2 cc 31 25 f0       	mov    %al,0xf02531cc
f010b44b:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b450:	83 e0 f0             	and    $0xfffffff0,%eax
f010b453:	83 c8 0e             	or     $0xe,%eax
f010b456:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b45b:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b460:	83 e0 ef             	and    $0xffffffef,%eax
f010b463:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b468:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b46d:	83 c8 60             	or     $0x60,%eax
f010b470:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b475:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b47a:	83 c8 80             	or     $0xffffff80,%eax
f010b47d:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b482:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010b487:	c1 e8 10             	shr    $0x10,%eax
f010b48a:	66 a3 ce 31 25 f0    	mov    %ax,0xf02531ce
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b490:	b8 78 c7 10 f0       	mov    $0xf010c778,%eax
f010b495:	66 a3 d0 31 25 f0    	mov    %ax,0xf02531d0
f010b49b:	66 c7 05 d2 31 25 f0 	movw   $0x8,0xf02531d2
f010b4a2:	08 00 
f010b4a4:	a0 d4 31 25 f0       	mov    0xf02531d4,%al
f010b4a9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4ac:	a2 d4 31 25 f0       	mov    %al,0xf02531d4
f010b4b1:	a0 d4 31 25 f0       	mov    0xf02531d4,%al
f010b4b6:	83 e0 1f             	and    $0x1f,%eax
f010b4b9:	a2 d4 31 25 f0       	mov    %al,0xf02531d4
f010b4be:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b4c3:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4c6:	83 c8 0e             	or     $0xe,%eax
f010b4c9:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b4ce:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b4d3:	83 e0 ef             	and    $0xffffffef,%eax
f010b4d6:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b4db:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b4e0:	83 c8 60             	or     $0x60,%eax
f010b4e3:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b4e8:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b4ed:	83 c8 80             	or     $0xffffff80,%eax
f010b4f0:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b4f5:	b8 78 c7 10 f0       	mov    $0xf010c778,%eax
f010b4fa:	c1 e8 10             	shr    $0x10,%eax
f010b4fd:	66 a3 d6 31 25 f0    	mov    %ax,0xf02531d6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b503:	b8 82 c7 10 f0       	mov    $0xf010c782,%eax
f010b508:	66 a3 d8 31 25 f0    	mov    %ax,0xf02531d8
f010b50e:	66 c7 05 da 31 25 f0 	movw   $0x8,0xf02531da
f010b515:	08 00 
f010b517:	a0 dc 31 25 f0       	mov    0xf02531dc,%al
f010b51c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b51f:	a2 dc 31 25 f0       	mov    %al,0xf02531dc
f010b524:	a0 dc 31 25 f0       	mov    0xf02531dc,%al
f010b529:	83 e0 1f             	and    $0x1f,%eax
f010b52c:	a2 dc 31 25 f0       	mov    %al,0xf02531dc
f010b531:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b536:	83 e0 f0             	and    $0xfffffff0,%eax
f010b539:	83 c8 0e             	or     $0xe,%eax
f010b53c:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b541:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b546:	83 e0 ef             	and    $0xffffffef,%eax
f010b549:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b54e:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b553:	83 c8 60             	or     $0x60,%eax
f010b556:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b55b:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b560:	83 c8 80             	or     $0xffffff80,%eax
f010b563:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b568:	b8 82 c7 10 f0       	mov    $0xf010c782,%eax
f010b56d:	c1 e8 10             	shr    $0x10,%eax
f010b570:	66 a3 de 31 25 f0    	mov    %ax,0xf02531de
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b576:	b8 8c c7 10 f0       	mov    $0xf010c78c,%eax
f010b57b:	66 a3 f0 31 25 f0    	mov    %ax,0xf02531f0
f010b581:	66 c7 05 f2 31 25 f0 	movw   $0x8,0xf02531f2
f010b588:	08 00 
f010b58a:	a0 f4 31 25 f0       	mov    0xf02531f4,%al
f010b58f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b592:	a2 f4 31 25 f0       	mov    %al,0xf02531f4
f010b597:	a0 f4 31 25 f0       	mov    0xf02531f4,%al
f010b59c:	83 e0 1f             	and    $0x1f,%eax
f010b59f:	a2 f4 31 25 f0       	mov    %al,0xf02531f4
f010b5a4:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b5a9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5ac:	83 c8 0e             	or     $0xe,%eax
f010b5af:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b5b4:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b5b9:	83 e0 ef             	and    $0xffffffef,%eax
f010b5bc:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b5c1:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b5c6:	83 c8 60             	or     $0x60,%eax
f010b5c9:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b5ce:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b5d3:	83 c8 80             	or     $0xffffff80,%eax
f010b5d6:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b5db:	b8 8c c7 10 f0       	mov    $0xf010c78c,%eax
f010b5e0:	c1 e8 10             	shr    $0x10,%eax
f010b5e3:	66 a3 f6 31 25 f0    	mov    %ax,0xf02531f6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b5e9:	b8 94 c7 10 f0       	mov    $0xf010c794,%eax
f010b5ee:	66 a3 f8 31 25 f0    	mov    %ax,0xf02531f8
f010b5f4:	66 c7 05 fa 31 25 f0 	movw   $0x8,0xf02531fa
f010b5fb:	08 00 
f010b5fd:	a0 fc 31 25 f0       	mov    0xf02531fc,%al
f010b602:	83 e0 e0             	and    $0xffffffe0,%eax
f010b605:	a2 fc 31 25 f0       	mov    %al,0xf02531fc
f010b60a:	a0 fc 31 25 f0       	mov    0xf02531fc,%al
f010b60f:	83 e0 1f             	and    $0x1f,%eax
f010b612:	a2 fc 31 25 f0       	mov    %al,0xf02531fc
f010b617:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b61c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b61f:	83 c8 0e             	or     $0xe,%eax
f010b622:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b627:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b62c:	83 e0 ef             	and    $0xffffffef,%eax
f010b62f:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b634:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b639:	83 c8 60             	or     $0x60,%eax
f010b63c:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b641:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b646:	83 c8 80             	or     $0xffffff80,%eax
f010b649:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b64e:	b8 94 c7 10 f0       	mov    $0xf010c794,%eax
f010b653:	c1 e8 10             	shr    $0x10,%eax
f010b656:	66 a3 fe 31 25 f0    	mov    %ax,0xf02531fe
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b65c:	b8 98 c7 10 f0       	mov    $0xf010c798,%eax
f010b661:	66 a3 00 32 25 f0    	mov    %ax,0xf0253200
f010b667:	66 c7 05 02 32 25 f0 	movw   $0x8,0xf0253202
f010b66e:	08 00 
f010b670:	a0 04 32 25 f0       	mov    0xf0253204,%al
f010b675:	83 e0 e0             	and    $0xffffffe0,%eax
f010b678:	a2 04 32 25 f0       	mov    %al,0xf0253204
f010b67d:	a0 04 32 25 f0       	mov    0xf0253204,%al
f010b682:	83 e0 1f             	and    $0x1f,%eax
f010b685:	a2 04 32 25 f0       	mov    %al,0xf0253204
f010b68a:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b68f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b692:	83 c8 0e             	or     $0xe,%eax
f010b695:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b69a:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b69f:	83 e0 ef             	and    $0xffffffef,%eax
f010b6a2:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b6a7:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b6ac:	83 c8 60             	or     $0x60,%eax
f010b6af:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b6b4:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b6b9:	83 c8 80             	or     $0xffffff80,%eax
f010b6bc:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b6c1:	b8 98 c7 10 f0       	mov    $0xf010c798,%eax
f010b6c6:	c1 e8 10             	shr    $0x10,%eax
f010b6c9:	66 a3 06 32 25 f0    	mov    %ax,0xf0253206
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b6cf:	b8 9c c7 10 f0       	mov    $0xf010c79c,%eax
f010b6d4:	66 a3 08 32 25 f0    	mov    %ax,0xf0253208
f010b6da:	66 c7 05 0a 32 25 f0 	movw   $0x8,0xf025320a
f010b6e1:	08 00 
f010b6e3:	a0 0c 32 25 f0       	mov    0xf025320c,%al
f010b6e8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6eb:	a2 0c 32 25 f0       	mov    %al,0xf025320c
f010b6f0:	a0 0c 32 25 f0       	mov    0xf025320c,%al
f010b6f5:	83 e0 1f             	and    $0x1f,%eax
f010b6f8:	a2 0c 32 25 f0       	mov    %al,0xf025320c
f010b6fd:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b702:	83 e0 f0             	and    $0xfffffff0,%eax
f010b705:	83 c8 0e             	or     $0xe,%eax
f010b708:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b70d:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b712:	83 e0 ef             	and    $0xffffffef,%eax
f010b715:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b71a:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b71f:	83 c8 60             	or     $0x60,%eax
f010b722:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b727:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b72c:	83 c8 80             	or     $0xffffff80,%eax
f010b72f:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b734:	b8 9c c7 10 f0       	mov    $0xf010c79c,%eax
f010b739:	c1 e8 10             	shr    $0x10,%eax
f010b73c:	66 a3 0e 32 25 f0    	mov    %ax,0xf025320e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b742:	b8 a0 c7 10 f0       	mov    $0xf010c7a0,%eax
f010b747:	66 a3 20 32 25 f0    	mov    %ax,0xf0253220
f010b74d:	66 c7 05 22 32 25 f0 	movw   $0x8,0xf0253222
f010b754:	08 00 
f010b756:	a0 24 32 25 f0       	mov    0xf0253224,%al
f010b75b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b75e:	a2 24 32 25 f0       	mov    %al,0xf0253224
f010b763:	a0 24 32 25 f0       	mov    0xf0253224,%al
f010b768:	83 e0 1f             	and    $0x1f,%eax
f010b76b:	a2 24 32 25 f0       	mov    %al,0xf0253224
f010b770:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b775:	83 e0 f0             	and    $0xfffffff0,%eax
f010b778:	83 c8 0e             	or     $0xe,%eax
f010b77b:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b780:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b785:	83 e0 ef             	and    $0xffffffef,%eax
f010b788:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b78d:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b792:	83 c8 60             	or     $0x60,%eax
f010b795:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b79a:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b79f:	83 c8 80             	or     $0xffffff80,%eax
f010b7a2:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b7a7:	b8 a0 c7 10 f0       	mov    $0xf010c7a0,%eax
f010b7ac:	c1 e8 10             	shr    $0x10,%eax
f010b7af:	66 a3 26 32 25 f0    	mov    %ax,0xf0253226
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b7b5:	b8 a6 c7 10 f0       	mov    $0xf010c7a6,%eax
f010b7ba:	66 a3 28 32 25 f0    	mov    %ax,0xf0253228
f010b7c0:	66 c7 05 2a 32 25 f0 	movw   $0x8,0xf025322a
f010b7c7:	08 00 
f010b7c9:	a0 2c 32 25 f0       	mov    0xf025322c,%al
f010b7ce:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7d1:	a2 2c 32 25 f0       	mov    %al,0xf025322c
f010b7d6:	a0 2c 32 25 f0       	mov    0xf025322c,%al
f010b7db:	83 e0 1f             	and    $0x1f,%eax
f010b7de:	a2 2c 32 25 f0       	mov    %al,0xf025322c
f010b7e3:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b7e8:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7eb:	83 c8 0e             	or     $0xe,%eax
f010b7ee:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b7f3:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b7f8:	83 e0 ef             	and    $0xffffffef,%eax
f010b7fb:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b800:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b805:	83 c8 60             	or     $0x60,%eax
f010b808:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b80d:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b812:	83 c8 80             	or     $0xffffff80,%eax
f010b815:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b81a:	b8 a6 c7 10 f0       	mov    $0xf010c7a6,%eax
f010b81f:	c1 e8 10             	shr    $0x10,%eax
f010b822:	66 a3 2e 32 25 f0    	mov    %ax,0xf025322e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b828:	b8 aa c7 10 f0       	mov    $0xf010c7aa,%eax
f010b82d:	66 a3 30 32 25 f0    	mov    %ax,0xf0253230
f010b833:	66 c7 05 32 32 25 f0 	movw   $0x8,0xf0253232
f010b83a:	08 00 
f010b83c:	a0 34 32 25 f0       	mov    0xf0253234,%al
f010b841:	83 e0 e0             	and    $0xffffffe0,%eax
f010b844:	a2 34 32 25 f0       	mov    %al,0xf0253234
f010b849:	a0 34 32 25 f0       	mov    0xf0253234,%al
f010b84e:	83 e0 1f             	and    $0x1f,%eax
f010b851:	a2 34 32 25 f0       	mov    %al,0xf0253234
f010b856:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b85b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b85e:	83 c8 0e             	or     $0xe,%eax
f010b861:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b866:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b86b:	83 e0 ef             	and    $0xffffffef,%eax
f010b86e:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b873:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b878:	83 c8 60             	or     $0x60,%eax
f010b87b:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b880:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b885:	83 c8 80             	or     $0xffffff80,%eax
f010b888:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b88d:	b8 aa c7 10 f0       	mov    $0xf010c7aa,%eax
f010b892:	c1 e8 10             	shr    $0x10,%eax
f010b895:	66 a3 36 32 25 f0    	mov    %ax,0xf0253236
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b89b:	b8 b0 c7 10 f0       	mov    $0xf010c7b0,%eax
f010b8a0:	66 a3 38 32 25 f0    	mov    %ax,0xf0253238
f010b8a6:	66 c7 05 3a 32 25 f0 	movw   $0x8,0xf025323a
f010b8ad:	08 00 
f010b8af:	a0 3c 32 25 f0       	mov    0xf025323c,%al
f010b8b4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8b7:	a2 3c 32 25 f0       	mov    %al,0xf025323c
f010b8bc:	a0 3c 32 25 f0       	mov    0xf025323c,%al
f010b8c1:	83 e0 1f             	and    $0x1f,%eax
f010b8c4:	a2 3c 32 25 f0       	mov    %al,0xf025323c
f010b8c9:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b8ce:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8d1:	83 c8 0e             	or     $0xe,%eax
f010b8d4:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b8d9:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b8de:	83 e0 ef             	and    $0xffffffef,%eax
f010b8e1:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b8e6:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b8eb:	83 c8 60             	or     $0x60,%eax
f010b8ee:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b8f3:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b8f8:	83 c8 80             	or     $0xffffff80,%eax
f010b8fb:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b900:	b8 b0 c7 10 f0       	mov    $0xf010c7b0,%eax
f010b905:	c1 e8 10             	shr    $0x10,%eax
f010b908:	66 a3 3e 32 25 f0    	mov    %ax,0xf025323e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b90e:	b8 b6 c7 10 f0       	mov    $0xf010c7b6,%eax
f010b913:	66 a3 a0 32 25 f0    	mov    %ax,0xf02532a0
f010b919:	66 c7 05 a2 32 25 f0 	movw   $0x8,0xf02532a2
f010b920:	08 00 
f010b922:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b927:	83 e0 e0             	and    $0xffffffe0,%eax
f010b92a:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b92f:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b934:	83 e0 1f             	and    $0x1f,%eax
f010b937:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b93c:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b941:	83 e0 f0             	and    $0xfffffff0,%eax
f010b944:	83 c8 0e             	or     $0xe,%eax
f010b947:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b94c:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b951:	83 e0 ef             	and    $0xffffffef,%eax
f010b954:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b959:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b95e:	83 c8 60             	or     $0x60,%eax
f010b961:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b966:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b96b:	83 c8 80             	or     $0xffffff80,%eax
f010b96e:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b973:	b8 b6 c7 10 f0       	mov    $0xf010c7b6,%eax
f010b978:	c1 e8 10             	shr    $0x10,%eax
f010b97b:	66 a3 a6 32 25 f0    	mov    %ax,0xf02532a6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b981:	b8 bc c7 10 f0       	mov    $0xf010c7bc,%eax
f010b986:	66 a3 a8 32 25 f0    	mov    %ax,0xf02532a8
f010b98c:	66 c7 05 aa 32 25 f0 	movw   $0x8,0xf02532aa
f010b993:	08 00 
f010b995:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b99a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b99d:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b9a2:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b9a7:	83 e0 1f             	and    $0x1f,%eax
f010b9aa:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b9af:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b9b4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9b7:	83 c8 0e             	or     $0xe,%eax
f010b9ba:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b9bf:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b9c4:	83 e0 ef             	and    $0xffffffef,%eax
f010b9c7:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b9cc:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b9d1:	83 c8 60             	or     $0x60,%eax
f010b9d4:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b9d9:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b9de:	83 c8 80             	or     $0xffffff80,%eax
f010b9e1:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b9e6:	b8 bc c7 10 f0       	mov    $0xf010c7bc,%eax
f010b9eb:	c1 e8 10             	shr    $0x10,%eax
f010b9ee:	66 a3 ae 32 25 f0    	mov    %ax,0xf02532ae
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b9f4:	b8 c2 c7 10 f0       	mov    $0xf010c7c2,%eax
f010b9f9:	66 a3 b0 32 25 f0    	mov    %ax,0xf02532b0
f010b9ff:	66 c7 05 b2 32 25 f0 	movw   $0x8,0xf02532b2
f010ba06:	08 00 
f010ba08:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010ba0d:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba10:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010ba15:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010ba1a:	83 e0 1f             	and    $0x1f,%eax
f010ba1d:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010ba22:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010ba27:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba2a:	83 c8 0e             	or     $0xe,%eax
f010ba2d:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010ba32:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010ba37:	83 e0 ef             	and    $0xffffffef,%eax
f010ba3a:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010ba3f:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010ba44:	83 c8 60             	or     $0x60,%eax
f010ba47:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010ba4c:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010ba51:	83 c8 80             	or     $0xffffff80,%eax
f010ba54:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010ba59:	b8 c2 c7 10 f0       	mov    $0xf010c7c2,%eax
f010ba5e:	c1 e8 10             	shr    $0x10,%eax
f010ba61:	66 a3 b6 32 25 f0    	mov    %ax,0xf02532b6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010ba67:	b8 c8 c7 10 f0       	mov    $0xf010c7c8,%eax
f010ba6c:	66 a3 b8 32 25 f0    	mov    %ax,0xf02532b8
f010ba72:	66 c7 05 ba 32 25 f0 	movw   $0x8,0xf02532ba
f010ba79:	08 00 
f010ba7b:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010ba80:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba83:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010ba88:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010ba8d:	83 e0 1f             	and    $0x1f,%eax
f010ba90:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010ba95:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010ba9a:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba9d:	83 c8 0e             	or     $0xe,%eax
f010baa0:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010baa5:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010baaa:	83 e0 ef             	and    $0xffffffef,%eax
f010baad:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010bab2:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010bab7:	83 c8 60             	or     $0x60,%eax
f010baba:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010babf:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010bac4:	83 c8 80             	or     $0xffffff80,%eax
f010bac7:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010bacc:	b8 c8 c7 10 f0       	mov    $0xf010c7c8,%eax
f010bad1:	c1 e8 10             	shr    $0x10,%eax
f010bad4:	66 a3 be 32 25 f0    	mov    %ax,0xf02532be
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010bada:	b8 ce c7 10 f0       	mov    $0xf010c7ce,%eax
f010badf:	66 a3 c0 32 25 f0    	mov    %ax,0xf02532c0
f010bae5:	66 c7 05 c2 32 25 f0 	movw   $0x8,0xf02532c2
f010baec:	08 00 
f010baee:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010baf3:	83 e0 e0             	and    $0xffffffe0,%eax
f010baf6:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010bafb:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010bb00:	83 e0 1f             	and    $0x1f,%eax
f010bb03:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010bb08:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010bb0d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb10:	83 c8 0e             	or     $0xe,%eax
f010bb13:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010bb18:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010bb1d:	83 e0 ef             	and    $0xffffffef,%eax
f010bb20:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010bb25:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010bb2a:	83 c8 60             	or     $0x60,%eax
f010bb2d:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010bb32:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010bb37:	83 c8 80             	or     $0xffffff80,%eax
f010bb3a:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010bb3f:	b8 ce c7 10 f0       	mov    $0xf010c7ce,%eax
f010bb44:	c1 e8 10             	shr    $0x10,%eax
f010bb47:	66 a3 c6 32 25 f0    	mov    %ax,0xf02532c6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bb4d:	b8 d4 c7 10 f0       	mov    $0xf010c7d4,%eax
f010bb52:	66 a3 c8 32 25 f0    	mov    %ax,0xf02532c8
f010bb58:	66 c7 05 ca 32 25 f0 	movw   $0x8,0xf02532ca
f010bb5f:	08 00 
f010bb61:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010bb66:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb69:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010bb6e:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010bb73:	83 e0 1f             	and    $0x1f,%eax
f010bb76:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010bb7b:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bb80:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb83:	83 c8 0e             	or     $0xe,%eax
f010bb86:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bb8b:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bb90:	83 e0 ef             	and    $0xffffffef,%eax
f010bb93:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bb98:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bb9d:	83 c8 60             	or     $0x60,%eax
f010bba0:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bba5:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bbaa:	83 c8 80             	or     $0xffffff80,%eax
f010bbad:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bbb2:	b8 d4 c7 10 f0       	mov    $0xf010c7d4,%eax
f010bbb7:	c1 e8 10             	shr    $0x10,%eax
f010bbba:	66 a3 ce 32 25 f0    	mov    %ax,0xf02532ce
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bbc0:	b8 da c7 10 f0       	mov    $0xf010c7da,%eax
f010bbc5:	66 a3 d0 32 25 f0    	mov    %ax,0xf02532d0
f010bbcb:	66 c7 05 d2 32 25 f0 	movw   $0x8,0xf02532d2
f010bbd2:	08 00 
f010bbd4:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010bbd9:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbdc:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010bbe1:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010bbe6:	83 e0 1f             	and    $0x1f,%eax
f010bbe9:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010bbee:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bbf3:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbf6:	83 c8 0e             	or     $0xe,%eax
f010bbf9:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bbfe:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bc03:	83 e0 ef             	and    $0xffffffef,%eax
f010bc06:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bc0b:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bc10:	83 c8 60             	or     $0x60,%eax
f010bc13:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bc18:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bc1d:	83 c8 80             	or     $0xffffff80,%eax
f010bc20:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bc25:	b8 da c7 10 f0       	mov    $0xf010c7da,%eax
f010bc2a:	c1 e8 10             	shr    $0x10,%eax
f010bc2d:	66 a3 d6 32 25 f0    	mov    %ax,0xf02532d6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bc33:	b8 e0 c7 10 f0       	mov    $0xf010c7e0,%eax
f010bc38:	66 a3 d8 32 25 f0    	mov    %ax,0xf02532d8
f010bc3e:	66 c7 05 da 32 25 f0 	movw   $0x8,0xf02532da
f010bc45:	08 00 
f010bc47:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010bc4c:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc4f:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010bc54:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010bc59:	83 e0 1f             	and    $0x1f,%eax
f010bc5c:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010bc61:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bc66:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc69:	83 c8 0e             	or     $0xe,%eax
f010bc6c:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bc71:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bc76:	83 e0 ef             	and    $0xffffffef,%eax
f010bc79:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bc7e:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bc83:	83 c8 60             	or     $0x60,%eax
f010bc86:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bc8b:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bc90:	83 c8 80             	or     $0xffffff80,%eax
f010bc93:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bc98:	b8 e0 c7 10 f0       	mov    $0xf010c7e0,%eax
f010bc9d:	c1 e8 10             	shr    $0x10,%eax
f010bca0:	66 a3 de 32 25 f0    	mov    %ax,0xf02532de
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bca6:	b8 e6 c7 10 f0       	mov    $0xf010c7e6,%eax
f010bcab:	66 a3 e0 32 25 f0    	mov    %ax,0xf02532e0
f010bcb1:	66 c7 05 e2 32 25 f0 	movw   $0x8,0xf02532e2
f010bcb8:	08 00 
f010bcba:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010bcbf:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcc2:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010bcc7:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010bccc:	83 e0 1f             	and    $0x1f,%eax
f010bccf:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010bcd4:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bcd9:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcdc:	83 c8 0e             	or     $0xe,%eax
f010bcdf:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bce4:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bce9:	83 e0 ef             	and    $0xffffffef,%eax
f010bcec:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bcf1:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bcf6:	83 c8 60             	or     $0x60,%eax
f010bcf9:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bcfe:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bd03:	83 c8 80             	or     $0xffffff80,%eax
f010bd06:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bd0b:	b8 e6 c7 10 f0       	mov    $0xf010c7e6,%eax
f010bd10:	c1 e8 10             	shr    $0x10,%eax
f010bd13:	66 a3 e6 32 25 f0    	mov    %ax,0xf02532e6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bd19:	b8 ec c7 10 f0       	mov    $0xf010c7ec,%eax
f010bd1e:	66 a3 e8 32 25 f0    	mov    %ax,0xf02532e8
f010bd24:	66 c7 05 ea 32 25 f0 	movw   $0x8,0xf02532ea
f010bd2b:	08 00 
f010bd2d:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010bd32:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd35:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010bd3a:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010bd3f:	83 e0 1f             	and    $0x1f,%eax
f010bd42:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010bd47:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bd4c:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd4f:	83 c8 0e             	or     $0xe,%eax
f010bd52:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bd57:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bd5c:	83 e0 ef             	and    $0xffffffef,%eax
f010bd5f:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bd64:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bd69:	83 c8 60             	or     $0x60,%eax
f010bd6c:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bd71:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bd76:	83 c8 80             	or     $0xffffff80,%eax
f010bd79:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bd7e:	b8 ec c7 10 f0       	mov    $0xf010c7ec,%eax
f010bd83:	c1 e8 10             	shr    $0x10,%eax
f010bd86:	66 a3 ee 32 25 f0    	mov    %ax,0xf02532ee
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bd8c:	b8 f2 c7 10 f0       	mov    $0xf010c7f2,%eax
f010bd91:	66 a3 f0 32 25 f0    	mov    %ax,0xf02532f0
f010bd97:	66 c7 05 f2 32 25 f0 	movw   $0x8,0xf02532f2
f010bd9e:	08 00 
f010bda0:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010bda5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bda8:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010bdad:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010bdb2:	83 e0 1f             	and    $0x1f,%eax
f010bdb5:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010bdba:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bdbf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdc2:	83 c8 0e             	or     $0xe,%eax
f010bdc5:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bdca:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bdcf:	83 e0 ef             	and    $0xffffffef,%eax
f010bdd2:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bdd7:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bddc:	83 c8 60             	or     $0x60,%eax
f010bddf:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bde4:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bde9:	83 c8 80             	or     $0xffffff80,%eax
f010bdec:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bdf1:	b8 f2 c7 10 f0       	mov    $0xf010c7f2,%eax
f010bdf6:	c1 e8 10             	shr    $0x10,%eax
f010bdf9:	66 a3 f6 32 25 f0    	mov    %ax,0xf02532f6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bdff:	b8 f8 c7 10 f0       	mov    $0xf010c7f8,%eax
f010be04:	66 a3 f8 32 25 f0    	mov    %ax,0xf02532f8
f010be0a:	66 c7 05 fa 32 25 f0 	movw   $0x8,0xf02532fa
f010be11:	08 00 
f010be13:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010be18:	83 e0 e0             	and    $0xffffffe0,%eax
f010be1b:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010be20:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010be25:	83 e0 1f             	and    $0x1f,%eax
f010be28:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010be2d:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010be32:	83 e0 f0             	and    $0xfffffff0,%eax
f010be35:	83 c8 0e             	or     $0xe,%eax
f010be38:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010be3d:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010be42:	83 e0 ef             	and    $0xffffffef,%eax
f010be45:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010be4a:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010be4f:	83 c8 60             	or     $0x60,%eax
f010be52:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010be57:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010be5c:	83 c8 80             	or     $0xffffff80,%eax
f010be5f:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010be64:	b8 f8 c7 10 f0       	mov    $0xf010c7f8,%eax
f010be69:	c1 e8 10             	shr    $0x10,%eax
f010be6c:	66 a3 fe 32 25 f0    	mov    %ax,0xf02532fe
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010be72:	b8 fe c7 10 f0       	mov    $0xf010c7fe,%eax
f010be77:	66 a3 00 33 25 f0    	mov    %ax,0xf0253300
f010be7d:	66 c7 05 02 33 25 f0 	movw   $0x8,0xf0253302
f010be84:	08 00 
f010be86:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010be8b:	83 e0 e0             	and    $0xffffffe0,%eax
f010be8e:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010be93:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010be98:	83 e0 1f             	and    $0x1f,%eax
f010be9b:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010bea0:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010bea5:	83 e0 f0             	and    $0xfffffff0,%eax
f010bea8:	83 c8 0e             	or     $0xe,%eax
f010beab:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010beb0:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010beb5:	83 e0 ef             	and    $0xffffffef,%eax
f010beb8:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010bebd:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010bec2:	83 c8 60             	or     $0x60,%eax
f010bec5:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010beca:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010becf:	83 c8 80             	or     $0xffffff80,%eax
f010bed2:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010bed7:	b8 fe c7 10 f0       	mov    $0xf010c7fe,%eax
f010bedc:	c1 e8 10             	shr    $0x10,%eax
f010bedf:	66 a3 06 33 25 f0    	mov    %ax,0xf0253306
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010bee5:	b8 04 c8 10 f0       	mov    $0xf010c804,%eax
f010beea:	66 a3 08 33 25 f0    	mov    %ax,0xf0253308
f010bef0:	66 c7 05 0a 33 25 f0 	movw   $0x8,0xf025330a
f010bef7:	08 00 
f010bef9:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010befe:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf01:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010bf06:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010bf0b:	83 e0 1f             	and    $0x1f,%eax
f010bf0e:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010bf13:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010bf18:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf1b:	83 c8 0e             	or     $0xe,%eax
f010bf1e:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010bf23:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010bf28:	83 e0 ef             	and    $0xffffffef,%eax
f010bf2b:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010bf30:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010bf35:	83 c8 60             	or     $0x60,%eax
f010bf38:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010bf3d:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010bf42:	83 c8 80             	or     $0xffffff80,%eax
f010bf45:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010bf4a:	b8 04 c8 10 f0       	mov    $0xf010c804,%eax
f010bf4f:	c1 e8 10             	shr    $0x10,%eax
f010bf52:	66 a3 0e 33 25 f0    	mov    %ax,0xf025330e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010bf58:	b8 0a c8 10 f0       	mov    $0xf010c80a,%eax
f010bf5d:	66 a3 10 33 25 f0    	mov    %ax,0xf0253310
f010bf63:	66 c7 05 12 33 25 f0 	movw   $0x8,0xf0253312
f010bf6a:	08 00 
f010bf6c:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010bf71:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf74:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010bf79:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010bf7e:	83 e0 1f             	and    $0x1f,%eax
f010bf81:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010bf86:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010bf8b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf8e:	83 c8 0e             	or     $0xe,%eax
f010bf91:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bf96:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010bf9b:	83 e0 ef             	and    $0xffffffef,%eax
f010bf9e:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bfa3:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010bfa8:	83 c8 60             	or     $0x60,%eax
f010bfab:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bfb0:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010bfb5:	83 c8 80             	or     $0xffffff80,%eax
f010bfb8:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bfbd:	b8 0a c8 10 f0       	mov    $0xf010c80a,%eax
f010bfc2:	c1 e8 10             	shr    $0x10,%eax
f010bfc5:	66 a3 16 33 25 f0    	mov    %ax,0xf0253316
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010bfcb:	b8 10 c8 10 f0       	mov    $0xf010c810,%eax
f010bfd0:	66 a3 18 33 25 f0    	mov    %ax,0xf0253318
f010bfd6:	66 c7 05 1a 33 25 f0 	movw   $0x8,0xf025331a
f010bfdd:	08 00 
f010bfdf:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010bfe4:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfe7:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010bfec:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010bff1:	83 e0 1f             	and    $0x1f,%eax
f010bff4:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010bff9:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010bffe:	83 e0 f0             	and    $0xfffffff0,%eax
f010c001:	83 c8 0e             	or     $0xe,%eax
f010c004:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010c009:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010c00e:	83 e0 ef             	and    $0xffffffef,%eax
f010c011:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010c016:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010c01b:	83 c8 60             	or     $0x60,%eax
f010c01e:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010c023:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010c028:	83 c8 80             	or     $0xffffff80,%eax
f010c02b:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010c030:	b8 10 c8 10 f0       	mov    $0xf010c810,%eax
f010c035:	c1 e8 10             	shr    $0x10,%eax
f010c038:	66 a3 1e 33 25 f0    	mov    %ax,0xf025331e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c03e:	c7 05 c4 39 25 f0 00 	movl   $0xefc00000,0xf02539c4
f010c045:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c048:	66 c7 05 c8 39 25 f0 	movw   $0x10,0xf02539c8
f010c04f:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c051:	66 c7 05 a8 e9 18 f0 	movw   $0x68,0xf018e9a8
f010c058:	68 00 
f010c05a:	b8 c0 39 25 f0       	mov    $0xf02539c0,%eax
f010c05f:	66 a3 aa e9 18 f0    	mov    %ax,0xf018e9aa
f010c065:	b8 c0 39 25 f0       	mov    $0xf02539c0,%eax
f010c06a:	c1 e8 10             	shr    $0x10,%eax
f010c06d:	a2 ac e9 18 f0       	mov    %al,0xf018e9ac
f010c072:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010c077:	83 e0 f0             	and    $0xfffffff0,%eax
f010c07a:	83 c8 09             	or     $0x9,%eax
f010c07d:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c082:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010c087:	83 c8 10             	or     $0x10,%eax
f010c08a:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c08f:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010c094:	83 e0 9f             	and    $0xffffff9f,%eax
f010c097:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c09c:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010c0a1:	83 c8 80             	or     $0xffffff80,%eax
f010c0a4:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c0a9:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c0ae:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0b1:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c0b6:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c0bb:	83 e0 ef             	and    $0xffffffef,%eax
f010c0be:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c0c3:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c0c8:	83 e0 df             	and    $0xffffffdf,%eax
f010c0cb:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c0d0:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c0d5:	83 c8 40             	or     $0x40,%eax
f010c0d8:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c0dd:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c0e2:	83 e0 7f             	and    $0x7f,%eax
f010c0e5:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c0ea:	b8 c0 39 25 f0       	mov    $0xf02539c0,%eax
f010c0ef:	c1 e8 18             	shr    $0x18,%eax
f010c0f2:	a2 af e9 18 f0       	mov    %al,0xf018e9af
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c0f7:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010c0fc:	83 e0 ef             	and    $0xffffffef,%eax
f010c0ff:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c104:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c10a:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c10e:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c111:	0f 01 1d 70 ea 18 f0 	lidtl  0xf018ea70
}
f010c118:	90                   	nop
f010c119:	c9                   	leave  
f010c11a:	c3                   	ret    

f010c11b <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c11b:	55                   	push   %ebp
f010c11c:	89 e5                	mov    %esp,%ebp
f010c11e:	53                   	push   %ebx
f010c11f:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c122:	83 ec 08             	sub    $0x8,%esp
f010c125:	ff 75 08             	pushl  0x8(%ebp)
f010c128:	68 3b 35 13 f0       	push   $0xf013353b
f010c12d:	e8 ff 4c ff ff       	call   f0100e31 <cprintf>
f010c132:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c135:	8b 45 08             	mov    0x8(%ebp),%eax
f010c138:	83 ec 0c             	sub    $0xc,%esp
f010c13b:	50                   	push   %eax
f010c13c:	e8 fd 00 00 00       	call   f010c23e <print_regs>
f010c141:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c144:	8b 45 08             	mov    0x8(%ebp),%eax
f010c147:	8b 40 20             	mov    0x20(%eax),%eax
f010c14a:	0f b7 c0             	movzwl %ax,%eax
f010c14d:	83 ec 08             	sub    $0x8,%esp
f010c150:	50                   	push   %eax
f010c151:	68 4d 35 13 f0       	push   $0xf013354d
f010c156:	e8 d6 4c ff ff       	call   f0100e31 <cprintf>
f010c15b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c15e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c161:	8b 40 24             	mov    0x24(%eax),%eax
f010c164:	0f b7 c0             	movzwl %ax,%eax
f010c167:	83 ec 08             	sub    $0x8,%esp
f010c16a:	50                   	push   %eax
f010c16b:	68 60 35 13 f0       	push   $0xf0133560
f010c170:	e8 bc 4c ff ff       	call   f0100e31 <cprintf>
f010c175:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c178:	8b 45 08             	mov    0x8(%ebp),%eax
f010c17b:	8b 58 28             	mov    0x28(%eax),%ebx
f010c17e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c181:	8b 40 28             	mov    0x28(%eax),%eax
f010c184:	83 ec 0c             	sub    $0xc,%esp
f010c187:	50                   	push   %eax
f010c188:	e8 d0 ee ff ff       	call   f010b05d <trapname>
f010c18d:	83 c4 10             	add    $0x10,%esp
f010c190:	89 c2                	mov    %eax,%edx
f010c192:	8b 45 08             	mov    0x8(%ebp),%eax
f010c195:	8b 40 28             	mov    0x28(%eax),%eax
f010c198:	53                   	push   %ebx
f010c199:	52                   	push   %edx
f010c19a:	50                   	push   %eax
f010c19b:	68 73 35 13 f0       	push   $0xf0133573
f010c1a0:	e8 8c 4c ff ff       	call   f0100e31 <cprintf>
f010c1a5:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c1a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ab:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c1ae:	83 ec 08             	sub    $0x8,%esp
f010c1b1:	50                   	push   %eax
f010c1b2:	68 8a 35 13 f0       	push   $0xf013358a
f010c1b7:	e8 75 4c ff ff       	call   f0100e31 <cprintf>
f010c1bc:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c1bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1c2:	8b 40 30             	mov    0x30(%eax),%eax
f010c1c5:	83 ec 08             	sub    $0x8,%esp
f010c1c8:	50                   	push   %eax
f010c1c9:	68 99 35 13 f0       	push   $0xf0133599
f010c1ce:	e8 5e 4c ff ff       	call   f0100e31 <cprintf>
f010c1d3:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c1d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d9:	8b 40 34             	mov    0x34(%eax),%eax
f010c1dc:	0f b7 c0             	movzwl %ax,%eax
f010c1df:	83 ec 08             	sub    $0x8,%esp
f010c1e2:	50                   	push   %eax
f010c1e3:	68 a8 35 13 f0       	push   $0xf01335a8
f010c1e8:	e8 44 4c ff ff       	call   f0100e31 <cprintf>
f010c1ed:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c1f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1f3:	8b 40 38             	mov    0x38(%eax),%eax
f010c1f6:	83 ec 08             	sub    $0x8,%esp
f010c1f9:	50                   	push   %eax
f010c1fa:	68 bb 35 13 f0       	push   $0xf01335bb
f010c1ff:	e8 2d 4c ff ff       	call   f0100e31 <cprintf>
f010c204:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c207:	8b 45 08             	mov    0x8(%ebp),%eax
f010c20a:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c20d:	83 ec 08             	sub    $0x8,%esp
f010c210:	50                   	push   %eax
f010c211:	68 ca 35 13 f0       	push   $0xf01335ca
f010c216:	e8 16 4c ff ff       	call   f0100e31 <cprintf>
f010c21b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c21e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c221:	8b 40 40             	mov    0x40(%eax),%eax
f010c224:	0f b7 c0             	movzwl %ax,%eax
f010c227:	83 ec 08             	sub    $0x8,%esp
f010c22a:	50                   	push   %eax
f010c22b:	68 d9 35 13 f0       	push   $0xf01335d9
f010c230:	e8 fc 4b ff ff       	call   f0100e31 <cprintf>
f010c235:	83 c4 10             	add    $0x10,%esp
}
f010c238:	90                   	nop
f010c239:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c23c:	c9                   	leave  
f010c23d:	c3                   	ret    

f010c23e <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c23e:	55                   	push   %ebp
f010c23f:	89 e5                	mov    %esp,%ebp
f010c241:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c244:	8b 45 08             	mov    0x8(%ebp),%eax
f010c247:	8b 00                	mov    (%eax),%eax
f010c249:	83 ec 08             	sub    $0x8,%esp
f010c24c:	50                   	push   %eax
f010c24d:	68 ec 35 13 f0       	push   $0xf01335ec
f010c252:	e8 da 4b ff ff       	call   f0100e31 <cprintf>
f010c257:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c25a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c25d:	8b 40 04             	mov    0x4(%eax),%eax
f010c260:	83 ec 08             	sub    $0x8,%esp
f010c263:	50                   	push   %eax
f010c264:	68 fb 35 13 f0       	push   $0xf01335fb
f010c269:	e8 c3 4b ff ff       	call   f0100e31 <cprintf>
f010c26e:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c271:	8b 45 08             	mov    0x8(%ebp),%eax
f010c274:	8b 40 08             	mov    0x8(%eax),%eax
f010c277:	83 ec 08             	sub    $0x8,%esp
f010c27a:	50                   	push   %eax
f010c27b:	68 0a 36 13 f0       	push   $0xf013360a
f010c280:	e8 ac 4b ff ff       	call   f0100e31 <cprintf>
f010c285:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c288:	8b 45 08             	mov    0x8(%ebp),%eax
f010c28b:	8b 40 0c             	mov    0xc(%eax),%eax
f010c28e:	83 ec 08             	sub    $0x8,%esp
f010c291:	50                   	push   %eax
f010c292:	68 19 36 13 f0       	push   $0xf0133619
f010c297:	e8 95 4b ff ff       	call   f0100e31 <cprintf>
f010c29c:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c29f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a2:	8b 40 10             	mov    0x10(%eax),%eax
f010c2a5:	83 ec 08             	sub    $0x8,%esp
f010c2a8:	50                   	push   %eax
f010c2a9:	68 28 36 13 f0       	push   $0xf0133628
f010c2ae:	e8 7e 4b ff ff       	call   f0100e31 <cprintf>
f010c2b3:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c2b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b9:	8b 40 14             	mov    0x14(%eax),%eax
f010c2bc:	83 ec 08             	sub    $0x8,%esp
f010c2bf:	50                   	push   %eax
f010c2c0:	68 37 36 13 f0       	push   $0xf0133637
f010c2c5:	e8 67 4b ff ff       	call   f0100e31 <cprintf>
f010c2ca:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c2cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2d0:	8b 40 18             	mov    0x18(%eax),%eax
f010c2d3:	83 ec 08             	sub    $0x8,%esp
f010c2d6:	50                   	push   %eax
f010c2d7:	68 46 36 13 f0       	push   $0xf0133646
f010c2dc:	e8 50 4b ff ff       	call   f0100e31 <cprintf>
f010c2e1:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c2e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2e7:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c2ea:	83 ec 08             	sub    $0x8,%esp
f010c2ed:	50                   	push   %eax
f010c2ee:	68 55 36 13 f0       	push   $0xf0133655
f010c2f3:	e8 39 4b ff ff       	call   f0100e31 <cprintf>
f010c2f8:	83 c4 10             	add    $0x10,%esp
}
f010c2fb:	90                   	nop
f010c2fc:	c9                   	leave  
f010c2fd:	c3                   	ret    

f010c2fe <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c2fe:	55                   	push   %ebp
f010c2ff:	89 e5                	mov    %esp,%ebp
f010c301:	57                   	push   %edi
f010c302:	56                   	push   %esi
f010c303:	53                   	push   %ebx
f010c304:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c307:	8b 45 08             	mov    0x8(%ebp),%eax
f010c30a:	8b 40 28             	mov    0x28(%eax),%eax
f010c30d:	83 f8 0e             	cmp    $0xe,%eax
f010c310:	75 29                	jne    f010c33b <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c312:	83 ec 0c             	sub    $0xc,%esp
f010c315:	6a 01                	push   $0x1
f010c317:	e8 c3 15 00 00       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f010c31c:	83 c4 10             	add    $0x10,%esp
f010c31f:	85 c0                	test   %eax,%eax
f010c321:	74 05                	je     f010c328 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c323:	e8 dd a0 ff ff       	call   f0106405 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c328:	83 ec 0c             	sub    $0xc,%esp
f010c32b:	ff 75 08             	pushl  0x8(%ebp)
f010c32e:	e8 51 02 00 00       	call   f010c584 <fault_handler>
f010c333:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c336:	e9 bb 00 00 00       	jmp    f010c3f6 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c33b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c33e:	8b 40 28             	mov    0x28(%eax),%eax
f010c341:	83 f8 30             	cmp    $0x30,%eax
f010c344:	75 42                	jne    f010c388 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c346:	8b 45 08             	mov    0x8(%ebp),%eax
f010c349:	8b 78 04             	mov    0x4(%eax),%edi
f010c34c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c34f:	8b 30                	mov    (%eax),%esi
f010c351:	8b 45 08             	mov    0x8(%ebp),%eax
f010c354:	8b 58 10             	mov    0x10(%eax),%ebx
f010c357:	8b 45 08             	mov    0x8(%ebp),%eax
f010c35a:	8b 48 18             	mov    0x18(%eax),%ecx
f010c35d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c360:	8b 50 14             	mov    0x14(%eax),%edx
f010c363:	8b 45 08             	mov    0x8(%ebp),%eax
f010c366:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c369:	83 ec 08             	sub    $0x8,%esp
f010c36c:	57                   	push   %edi
f010c36d:	56                   	push   %esi
f010c36e:	53                   	push   %ebx
f010c36f:	51                   	push   %ecx
f010c370:	52                   	push   %edx
f010c371:	50                   	push   %eax
f010c372:	e8 a7 0b 00 00       	call   f010cf1e <syscall>
f010c377:	83 c4 20             	add    $0x20,%esp
f010c37a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c37d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c380:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c383:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c386:	eb 6e                	jmp    f010c3f6 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c388:	8b 45 08             	mov    0x8(%ebp),%eax
f010c38b:	8b 40 28             	mov    0x28(%eax),%eax
f010c38e:	83 f8 08             	cmp    $0x8,%eax
f010c391:	75 17                	jne    f010c3aa <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c393:	83 ec 04             	sub    $0x4,%esp
f010c396:	68 64 36 13 f0       	push   $0xf0133664
f010c39b:	68 e7 00 00 00       	push   $0xe7
f010c3a0:	68 73 36 13 f0       	push   $0xf0133673
f010c3a5:	e8 06 3e ff ff       	call   f01001b0 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c3aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3ad:	8b 40 28             	mov    0x28(%eax),%eax
f010c3b0:	83 f8 20             	cmp    $0x20,%eax
f010c3b3:	75 07                	jne    f010c3bc <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c3b5:	e8 0e a0 ff ff       	call   f01063c8 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c3ba:	eb 3a                	jmp    f010c3f6 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c3bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3bf:	8b 40 34             	mov    0x34(%eax),%eax
f010c3c2:	66 83 f8 08          	cmp    $0x8,%ax
f010c3c6:	75 17                	jne    f010c3df <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c3c8:	83 ec 04             	sub    $0x4,%esp
f010c3cb:	68 84 36 13 f0       	push   $0xf0133684
f010c3d0:	68 f4 00 00 00       	push   $0xf4
f010c3d5:	68 73 36 13 f0       	push   $0xf0133673
f010c3da:	e8 d1 3d ff ff       	call   f01001b0 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c3df:	83 ec 04             	sub    $0x4,%esp
f010c3e2:	68 a0 36 13 f0       	push   $0xf01336a0
f010c3e7:	68 f8 00 00 00       	push   $0xf8
f010c3ec:	68 73 36 13 f0       	push   $0xf0133673
f010c3f1:	e8 ba 3d ff ff       	call   f01001b0 <_panic>

			return;
		}
	}
	return;
}
f010c3f6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c3f9:	5b                   	pop    %ebx
f010c3fa:	5e                   	pop    %esi
f010c3fb:	5f                   	pop    %edi
f010c3fc:	5d                   	pop    %ebp
f010c3fd:	c3                   	ret    

f010c3fe <trap>:

void trap(struct Trapframe *tf)
{
f010c3fe:	55                   	push   %ebp
f010c3ff:	89 e5                	mov    %esp,%ebp
f010c401:	57                   	push   %edi
f010c402:	56                   	push   %esi
f010c403:	53                   	push   %ebx
f010c404:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c407:	e8 c0 86 ff ff       	call   f0104acc <kclock_stop>

	int userTrap = 0;
f010c40c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c413:	8b 45 08             	mov    0x8(%ebp),%eax
f010c416:	8b 40 34             	mov    0x34(%eax),%eax
f010c419:	0f b7 c0             	movzwl %ax,%eax
f010c41c:	83 e0 03             	and    $0x3,%eax
f010c41f:	83 f8 03             	cmp    $0x3,%eax
f010c422:	75 49                	jne    f010c46d <trap+0x6f>
		assert(curenv);
f010c424:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c429:	85 c0                	test   %eax,%eax
f010c42b:	75 19                	jne    f010c446 <trap+0x48>
f010c42d:	68 bf 36 13 f0       	push   $0xf01336bf
f010c432:	68 c6 36 13 f0       	push   $0xf01336c6
f010c437:	68 06 01 00 00       	push   $0x106
f010c43c:	68 73 36 13 f0       	push   $0xf0133673
f010c441:	e8 6a 3d ff ff       	call   f01001b0 <_panic>
		curenv->env_tf = *tf;
f010c446:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010c44c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c44f:	89 c3                	mov    %eax,%ebx
f010c451:	b8 11 00 00 00       	mov    $0x11,%eax
f010c456:	89 d7                	mov    %edx,%edi
f010c458:	89 de                	mov    %ebx,%esi
f010c45a:	89 c1                	mov    %eax,%ecx
f010c45c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c45e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c463:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c466:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c46d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c470:	8b 40 28             	mov    0x28(%eax),%eax
f010c473:	83 f8 20             	cmp    $0x20,%eax
f010c476:	75 40                	jne    f010c4b8 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c478:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c47c:	0f 84 a6 00 00 00    	je     f010c528 <trap+0x12a>
		{
			assert(curenv);
f010c482:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c487:	85 c0                	test   %eax,%eax
f010c489:	75 19                	jne    f010c4a4 <trap+0xa6>
f010c48b:	68 bf 36 13 f0       	push   $0xf01336bf
f010c490:	68 c6 36 13 f0       	push   $0xf01336c6
f010c495:	68 12 01 00 00       	push   $0x112
f010c49a:	68 73 36 13 f0       	push   $0xf0133673
f010c49f:	e8 0c 3d ff ff       	call   f01001b0 <_panic>
			curenv->nClocks++ ;
f010c4a4:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c4a9:	8b 90 9c da 01 00    	mov    0x1da9c(%eax),%edx
f010c4af:	42                   	inc    %edx
f010c4b0:	89 90 9c da 01 00    	mov    %edx,0x1da9c(%eax)
f010c4b6:	eb 70                	jmp    f010c528 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c4b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4bb:	8b 40 28             	mov    0x28(%eax),%eax
f010c4be:	83 f8 0e             	cmp    $0xe,%eax
f010c4c1:	75 65                	jne    f010c528 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c4c3:	a0 28 3a 25 f0       	mov    0xf0253a28,%al
f010c4c8:	84 c0                	test   %al,%al
f010c4ca:	74 5c                	je     f010c528 <trap+0x12a>
			if (userTrap){
f010c4cc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c4d0:	74 2c                	je     f010c4fe <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c4d2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c4d7:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010c4dd:	8b 52 30             	mov    0x30(%edx),%edx
f010c4e0:	89 d1                	mov    %edx,%ecx
f010c4e2:	8a 15 28 3a 25 f0    	mov    0xf0253a28,%dl
f010c4e8:	0f b6 d2             	movzbl %dl,%edx
f010c4eb:	01 ca                	add    %ecx,%edx
f010c4ed:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c4f0:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c4f5:	83 ec 0c             	sub    $0xc,%esp
f010c4f8:	50                   	push   %eax
f010c4f9:	e8 ea d4 ff ff       	call   f01099e8 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c4fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010c501:	8b 40 30             	mov    0x30(%eax),%eax
f010c504:	89 c2                	mov    %eax,%edx
f010c506:	a0 28 3a 25 f0       	mov    0xf0253a28,%al
f010c50b:	0f b6 c0             	movzbl %al,%eax
f010c50e:	01 d0                	add    %edx,%eax
f010c510:	89 c2                	mov    %eax,%edx
f010c512:	8b 45 08             	mov    0x8(%ebp),%eax
f010c515:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c518:	e8 da 85 ff ff       	call   f0104af7 <kclock_resume>
				env_pop_tf(tf);
f010c51d:	83 ec 0c             	sub    $0xc,%esp
f010c520:	ff 75 08             	pushl  0x8(%ebp)
f010c523:	e8 12 d6 ff ff       	call   f0109b3a <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c528:	83 ec 0c             	sub    $0xc,%esp
f010c52b:	ff 75 08             	pushl  0x8(%ebp)
f010c52e:	e8 cb fd ff ff       	call   f010c2fe <trap_dispatch>
f010c533:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c536:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c53a:	74 3d                	je     f010c579 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c53c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c541:	85 c0                	test   %eax,%eax
f010c543:	74 0d                	je     f010c552 <trap+0x154>
f010c545:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c54a:	8b 40 54             	mov    0x54(%eax),%eax
f010c54d:	83 f8 02             	cmp    $0x2,%eax
f010c550:	74 19                	je     f010c56b <trap+0x16d>
f010c552:	68 dc 36 13 f0       	push   $0xf01336dc
f010c557:	68 c6 36 13 f0       	push   $0xf01336c6
f010c55c:	68 27 01 00 00       	push   $0x127
f010c561:	68 73 36 13 f0       	push   $0xf0133673
f010c566:	e8 45 3c ff ff       	call   f01001b0 <_panic>
		env_run(curenv);
f010c56b:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c570:	83 ec 0c             	sub    $0xc,%esp
f010c573:	50                   	push   %eax
f010c574:	e8 6f d4 ff ff       	call   f01099e8 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c579:	83 ec 0c             	sub    $0xc,%esp
f010c57c:	ff 75 08             	pushl  0x8(%ebp)
f010c57f:	e8 b6 d5 ff ff       	call   f0109b3a <env_pop_tf>

f010c584 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c584:	55                   	push   %ebp
f010c585:	89 e5                	mov    %esp,%ebp
f010c587:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c58a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c591:	8b 45 08             	mov    0x8(%ebp),%eax
f010c594:	8b 40 34             	mov    0x34(%eax),%eax
f010c597:	0f b7 c0             	movzwl %ax,%eax
f010c59a:	83 e0 03             	and    $0x3,%eax
f010c59d:	83 f8 03             	cmp    $0x3,%eax
f010c5a0:	75 07                	jne    f010c5a9 <fault_handler+0x25>
		userTrap = 1;
f010c5a2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c5a9:	0f 20 d0             	mov    %cr2,%eax
f010c5ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c5af:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c5b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c5b5:	a1 a0 39 25 f0       	mov    0xf02539a0,%eax
f010c5ba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c5bd:	75 2b                	jne    f010c5ea <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c5bf:	a0 a4 39 25 f0       	mov    0xf02539a4,%al
f010c5c4:	40                   	inc    %eax
f010c5c5:	a2 a4 39 25 f0       	mov    %al,0xf02539a4
		if (num_repeated_fault == 3)
f010c5ca:	a0 a4 39 25 f0       	mov    0xf02539a4,%al
f010c5cf:	3c 03                	cmp    $0x3,%al
f010c5d1:	75 1e                	jne    f010c5f1 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c5d3:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5d6:	68 0c 37 13 f0       	push   $0xf013370c
f010c5db:	68 4a 01 00 00       	push   $0x14a
f010c5e0:	68 73 36 13 f0       	push   $0xf0133673
f010c5e5:	e8 c6 3b ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c5ea:	c6 05 a4 39 25 f0 00 	movb   $0x0,0xf02539a4
	}
	last_fault_va = fault_va ;
f010c5f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c5f4:	a3 a0 39 25 f0       	mov    %eax,0xf02539a0
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c5f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c5fd:	75 29                	jne    f010c628 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c5ff:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c606:	77 40                	ja     f010c648 <fault_handler+0xc4>
f010c608:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c60f:	76 37                	jbe    f010c648 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c611:	83 ec 04             	sub    $0x4,%esp
f010c614:	68 58 37 13 f0       	push   $0xf0133758
f010c619:	68 56 01 00 00       	push   $0x156
f010c61e:	68 73 36 13 f0       	push   $0xf0133673
f010c623:	e8 88 3b ff ff       	call   f01001b0 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c628:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c62f:	76 17                	jbe    f010c648 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c631:	83 ec 04             	sub    $0x4,%esp
f010c634:	68 7c 37 13 f0       	push   $0xf013377c
f010c639:	68 5c 01 00 00       	push   $0x15c
f010c63e:	68 73 36 13 f0       	push   $0xf0133673
f010c643:	e8 68 3b ff ff       	call   f01001b0 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c648:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c64d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c650:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c653:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c659:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c65c:	c1 ea 16             	shr    $0x16,%edx
f010c65f:	c1 e2 02             	shl    $0x2,%edx
f010c662:	01 d0                	add    %edx,%eax
f010c664:	8b 00                	mov    (%eax),%eax
f010c666:	83 e0 01             	and    $0x1,%eax
f010c669:	85 c0                	test   %eax,%eax
f010c66b:	75 28                	jne    f010c695 <fault_handler+0x111>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c66d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c670:	8b 80 78 da 01 00    	mov    0x1da78(%eax),%eax
f010c676:	8d 50 01             	lea    0x1(%eax),%edx
f010c679:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c67c:	89 90 78 da 01 00    	mov    %edx,0x1da78(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c682:	83 ec 08             	sub    $0x8,%esp
f010c685:	ff 75 ec             	pushl  -0x14(%ebp)
f010c688:	ff 75 e8             	pushl  -0x18(%ebp)
f010c68b:	e8 34 13 00 00       	call   f010d9c4 <table_fault_handler>
f010c690:	83 c4 10             	add    $0x10,%esp
f010c693:	eb 7e                	jmp    f010c713 <fault_handler+0x18f>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c695:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c698:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c69e:	83 ec 08             	sub    $0x8,%esp
f010c6a1:	ff 75 ec             	pushl  -0x14(%ebp)
f010c6a4:	50                   	push   %eax
f010c6a5:	e8 d5 ba ff ff       	call   f010817f <pt_get_page_permissions>
f010c6aa:	83 c4 10             	add    $0x10,%esp
f010c6ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c6b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c6b3:	83 e0 01             	and    $0x1,%eax
f010c6b6:	85 c0                	test   %eax,%eax
f010c6b8:	74 17                	je     f010c6d1 <fault_handler+0x14d>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c6ba:	ff 75 ec             	pushl  -0x14(%ebp)
f010c6bd:	68 a0 37 13 f0       	push   $0xf01337a0
f010c6c2:	68 7b 01 00 00       	push   $0x17b
f010c6c7:	68 73 36 13 f0       	push   $0xf0133673
f010c6cc:	e8 df 3a ff ff       	call   f01001b0 <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c6d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c6d4:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f010c6da:	8d 50 01             	lea    0x1(%eax),%edx
f010c6dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c6e0:	89 90 74 da 01 00    	mov    %edx,0x1da74(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c6e6:	e8 b7 12 00 00       	call   f010d9a2 <isBufferingEnabled>
f010c6eb:	84 c0                	test   %al,%al
f010c6ed:	74 13                	je     f010c702 <fault_handler+0x17e>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c6ef:	83 ec 08             	sub    $0x8,%esp
f010c6f2:	ff 75 ec             	pushl  -0x14(%ebp)
f010c6f5:	ff 75 e8             	pushl  -0x18(%ebp)
f010c6f8:	e8 6a 13 00 00       	call   f010da67 <__page_fault_handler_with_buffering>
f010c6fd:	83 c4 10             	add    $0x10,%esp
f010c700:	eb 11                	jmp    f010c713 <fault_handler+0x18f>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c702:	83 ec 08             	sub    $0x8,%esp
f010c705:	ff 75 ec             	pushl  -0x14(%ebp)
f010c708:	ff 75 e8             	pushl  -0x18(%ebp)
f010c70b:	e8 d9 12 00 00       	call   f010d9e9 <page_fault_handler>
f010c710:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c713:	0f 20 d8             	mov    %cr3,%eax
f010c716:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c719:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c71c:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c71f:	90                   	nop
f010c720:	c9                   	leave  
f010c721:	c3                   	ret    

f010c722 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c722:	6a 0e                	push   $0xe
f010c724:	e9 ed 00 00 00       	jmp    f010c816 <_alltraps>
f010c729:	90                   	nop

f010c72a <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c72a:	6a 00                	push   $0x0
f010c72c:	6a 30                	push   $0x30
f010c72e:	e9 e3 00 00 00       	jmp    f010c816 <_alltraps>
f010c733:	90                   	nop

f010c734 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c734:	6a 08                	push   $0x8
f010c736:	e9 db 00 00 00       	jmp    f010c816 <_alltraps>
f010c73b:	90                   	nop

f010c73c <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c73c:	6a 00                	push   $0x0
f010c73e:	6a 00                	push   $0x0
f010c740:	e9 d1 00 00 00       	jmp    f010c816 <_alltraps>
f010c745:	90                   	nop

f010c746 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c746:	6a 00                	push   $0x0
f010c748:	6a 01                	push   $0x1
f010c74a:	e9 c7 00 00 00       	jmp    f010c816 <_alltraps>
f010c74f:	90                   	nop

f010c750 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c750:	6a 00                	push   $0x0
f010c752:	6a 02                	push   $0x2
f010c754:	e9 bd 00 00 00       	jmp    f010c816 <_alltraps>
f010c759:	90                   	nop

f010c75a <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c75a:	6a 00                	push   $0x0
f010c75c:	6a 03                	push   $0x3
f010c75e:	e9 b3 00 00 00       	jmp    f010c816 <_alltraps>
f010c763:	90                   	nop

f010c764 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c764:	6a 00                	push   $0x0
f010c766:	6a 04                	push   $0x4
f010c768:	e9 a9 00 00 00       	jmp    f010c816 <_alltraps>
f010c76d:	90                   	nop

f010c76e <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c76e:	6a 00                	push   $0x0
f010c770:	6a 05                	push   $0x5
f010c772:	e9 9f 00 00 00       	jmp    f010c816 <_alltraps>
f010c777:	90                   	nop

f010c778 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c778:	6a 00                	push   $0x0
f010c77a:	6a 06                	push   $0x6
f010c77c:	e9 95 00 00 00       	jmp    f010c816 <_alltraps>
f010c781:	90                   	nop

f010c782 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c782:	6a 00                	push   $0x0
f010c784:	6a 07                	push   $0x7
f010c786:	e9 8b 00 00 00       	jmp    f010c816 <_alltraps>
f010c78b:	90                   	nop

f010c78c <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c78c:	6a 0a                	push   $0xa
f010c78e:	e9 83 00 00 00       	jmp    f010c816 <_alltraps>
f010c793:	90                   	nop

f010c794 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c794:	6a 0b                	push   $0xb
f010c796:	eb 7e                	jmp    f010c816 <_alltraps>

f010c798 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c798:	6a 0c                	push   $0xc
f010c79a:	eb 7a                	jmp    f010c816 <_alltraps>

f010c79c <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c79c:	6a 0d                	push   $0xd
f010c79e:	eb 76                	jmp    f010c816 <_alltraps>

f010c7a0 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c7a0:	6a 00                	push   $0x0
f010c7a2:	6a 10                	push   $0x10
f010c7a4:	eb 70                	jmp    f010c816 <_alltraps>

f010c7a6 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c7a6:	6a 11                	push   $0x11
f010c7a8:	eb 6c                	jmp    f010c816 <_alltraps>

f010c7aa <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c7aa:	6a 00                	push   $0x0
f010c7ac:	6a 12                	push   $0x12
f010c7ae:	eb 66                	jmp    f010c816 <_alltraps>

f010c7b0 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c7b0:	6a 00                	push   $0x0
f010c7b2:	6a 13                	push   $0x13
f010c7b4:	eb 60                	jmp    f010c816 <_alltraps>

f010c7b6 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c7b6:	6a 00                	push   $0x0
f010c7b8:	6a 20                	push   $0x20
f010c7ba:	eb 5a                	jmp    f010c816 <_alltraps>

f010c7bc <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c7bc:	6a 00                	push   $0x0
f010c7be:	6a 21                	push   $0x21
f010c7c0:	eb 54                	jmp    f010c816 <_alltraps>

f010c7c2 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c7c2:	6a 00                	push   $0x0
f010c7c4:	6a 22                	push   $0x22
f010c7c6:	eb 4e                	jmp    f010c816 <_alltraps>

f010c7c8 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c7c8:	6a 00                	push   $0x0
f010c7ca:	6a 23                	push   $0x23
f010c7cc:	eb 48                	jmp    f010c816 <_alltraps>

f010c7ce <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c7ce:	6a 00                	push   $0x0
f010c7d0:	6a 24                	push   $0x24
f010c7d2:	eb 42                	jmp    f010c816 <_alltraps>

f010c7d4 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c7d4:	6a 00                	push   $0x0
f010c7d6:	6a 25                	push   $0x25
f010c7d8:	eb 3c                	jmp    f010c816 <_alltraps>

f010c7da <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c7da:	6a 00                	push   $0x0
f010c7dc:	6a 26                	push   $0x26
f010c7de:	eb 36                	jmp    f010c816 <_alltraps>

f010c7e0 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c7e0:	6a 00                	push   $0x0
f010c7e2:	6a 27                	push   $0x27
f010c7e4:	eb 30                	jmp    f010c816 <_alltraps>

f010c7e6 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c7e6:	6a 00                	push   $0x0
f010c7e8:	6a 28                	push   $0x28
f010c7ea:	eb 2a                	jmp    f010c816 <_alltraps>

f010c7ec <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c7ec:	6a 00                	push   $0x0
f010c7ee:	6a 29                	push   $0x29
f010c7f0:	eb 24                	jmp    f010c816 <_alltraps>

f010c7f2 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c7f2:	6a 00                	push   $0x0
f010c7f4:	6a 2a                	push   $0x2a
f010c7f6:	eb 1e                	jmp    f010c816 <_alltraps>

f010c7f8 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c7f8:	6a 00                	push   $0x0
f010c7fa:	6a 2b                	push   $0x2b
f010c7fc:	eb 18                	jmp    f010c816 <_alltraps>

f010c7fe <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c7fe:	6a 00                	push   $0x0
f010c800:	6a 2c                	push   $0x2c
f010c802:	eb 12                	jmp    f010c816 <_alltraps>

f010c804 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c804:	6a 00                	push   $0x0
f010c806:	6a 2d                	push   $0x2d
f010c808:	eb 0c                	jmp    f010c816 <_alltraps>

f010c80a <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c80a:	6a 00                	push   $0x0
f010c80c:	6a 2e                	push   $0x2e
f010c80e:	eb 06                	jmp    f010c816 <_alltraps>

f010c810 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c810:	6a 00                	push   $0x0
f010c812:	6a 2f                	push   $0x2f
f010c814:	eb 00                	jmp    f010c816 <_alltraps>

f010c816 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c816:	1e                   	push   %ds
push %es
f010c817:	06                   	push   %es
pushal
f010c818:	60                   	pusha  

mov $(GD_KD), %ax
f010c819:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c81d:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c81f:	8e c0                	mov    %eax,%es

push %esp
f010c821:	54                   	push   %esp

call trap
f010c822:	e8 d7 fb ff ff       	call   f010c3fe <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c827:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c828:	61                   	popa   
pop %es
f010c829:	07                   	pop    %es
pop %ds
f010c82a:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c82b:	83 c4 08             	add    $0x8,%esp

iret
f010c82e:	cf                   	iret   

f010c82f <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c82f:	55                   	push   %ebp
f010c830:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c832:	8b 45 08             	mov    0x8(%ebp),%eax
f010c835:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f010c83b:	29 d0                	sub    %edx,%eax
f010c83d:	c1 f8 02             	sar    $0x2,%eax
f010c840:	89 c2                	mov    %eax,%edx
f010c842:	89 d0                	mov    %edx,%eax
f010c844:	c1 e0 03             	shl    $0x3,%eax
f010c847:	01 d0                	add    %edx,%eax
f010c849:	c1 e0 03             	shl    $0x3,%eax
f010c84c:	01 d0                	add    %edx,%eax
f010c84e:	c1 e0 03             	shl    $0x3,%eax
f010c851:	01 d0                	add    %edx,%eax
f010c853:	c1 e0 03             	shl    $0x3,%eax
f010c856:	01 d0                	add    %edx,%eax
f010c858:	89 c1                	mov    %eax,%ecx
f010c85a:	c1 e1 0f             	shl    $0xf,%ecx
f010c85d:	01 c8                	add    %ecx,%eax
f010c85f:	c1 e0 03             	shl    $0x3,%eax
f010c862:	01 d0                	add    %edx,%eax
f010c864:	f7 d8                	neg    %eax
}
f010c866:	5d                   	pop    %ebp
f010c867:	c3                   	ret    

f010c868 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c868:	55                   	push   %ebp
f010c869:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c86b:	ff 75 08             	pushl  0x8(%ebp)
f010c86e:	e8 bc ff ff ff       	call   f010c82f <to_frame_number>
f010c873:	83 c4 04             	add    $0x4,%esp
f010c876:	c1 e0 0c             	shl    $0xc,%eax
}
f010c879:	c9                   	leave  
f010c87a:	c3                   	ret    

f010c87b <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c87b:	55                   	push   %ebp
f010c87c:	89 e5                	mov    %esp,%ebp
f010c87e:	83 ec 18             	sub    $0x18,%esp
f010c881:	8b 45 10             	mov    0x10(%ebp),%eax
f010c884:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c887:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c88b:	74 23                	je     f010c8b0 <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c88d:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c892:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c895:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010c89b:	83 c2 5c             	add    $0x5c,%edx
f010c89e:	83 ec 04             	sub    $0x4,%esp
f010c8a1:	50                   	push   %eax
f010c8a2:	52                   	push   %edx
f010c8a3:	68 90 39 13 f0       	push   $0xf0133990
f010c8a8:	e8 84 45 ff ff       	call   f0100e31 <cprintf>
f010c8ad:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c8b0:	83 ec 04             	sub    $0x4,%esp
f010c8b3:	ff 75 08             	pushl  0x8(%ebp)
f010c8b6:	ff 75 0c             	pushl  0xc(%ebp)
f010c8b9:	68 99 39 13 f0       	push   $0xf0133999
f010c8be:	e8 6e 45 ff ff       	call   f0100e31 <cprintf>
f010c8c3:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c8c6:	90                   	nop
f010c8c7:	c9                   	leave  
f010c8c8:	c3                   	ret    

f010c8c9 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c8c9:	55                   	push   %ebp
f010c8ca:	89 e5                	mov    %esp,%ebp
f010c8cc:	83 ec 18             	sub    $0x18,%esp
f010c8cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8d2:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c8d5:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c8d9:	83 ec 08             	sub    $0x8,%esp
f010c8dc:	50                   	push   %eax
f010c8dd:	68 9e 39 13 f0       	push   $0xf013399e
f010c8e2:	e8 4a 45 ff ff       	call   f0100e31 <cprintf>
f010c8e7:	83 c4 10             	add    $0x10,%esp
}
f010c8ea:	90                   	nop
f010c8eb:	c9                   	leave  
f010c8ec:	c3                   	ret    

f010c8ed <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c8ed:	55                   	push   %ebp
f010c8ee:	89 e5                	mov    %esp,%ebp
f010c8f0:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c8f3:	e8 6f 43 ff ff       	call   f0100c67 <cons_getc2>
f010c8f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c8fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c8fe:	c9                   	leave  
f010c8ff:	c3                   	ret    

f010c900 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c900:	55                   	push   %ebp
f010c901:	89 e5                	mov    %esp,%ebp
f010c903:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c906:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c90b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c90e:	83 ec 0c             	sub    $0xc,%esp
f010c911:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c914:	50                   	push   %eax
f010c915:	e8 0b aa ff ff       	call   f0107325 <allocate_frame>
f010c91a:	83 c4 10             	add    $0x10,%esp
f010c91d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c920:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c924:	75 08                	jne    f010c92e <__sys_allocate_page+0x2e>
		return r ;
f010c926:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c929:	e9 d3 00 00 00       	jmp    f010ca01 <__sys_allocate_page+0x101>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c92e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c931:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c936:	77 0c                	ja     f010c944 <__sys_allocate_page+0x44>
f010c938:	8b 45 08             	mov    0x8(%ebp),%eax
f010c93b:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c940:	85 c0                	test   %eax,%eax
f010c942:	74 0a                	je     f010c94e <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c944:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c949:	e9 b3 00 00 00       	jmp    f010ca01 <__sys_allocate_page+0x101>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c94e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c951:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c956:	83 f8 04             	cmp    $0x4,%eax
f010c959:	74 0a                	je     f010c965 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c95b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c960:	e9 9c 00 00 00       	jmp    f010ca01 <__sys_allocate_page+0x101>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c965:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c968:	83 ec 0c             	sub    $0xc,%esp
f010c96b:	50                   	push   %eax
f010c96c:	e8 f7 fe ff ff       	call   f010c868 <to_physical_address>
f010c971:	83 c4 10             	add    $0x10,%esp
f010c974:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c977:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c97a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c97d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c980:	c1 e8 0c             	shr    $0xc,%eax
f010c983:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c986:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010c98b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c98e:	72 17                	jb     f010c9a7 <__sys_allocate_page+0xa7>
f010c990:	ff 75 e8             	pushl  -0x18(%ebp)
f010c993:	68 a4 39 13 f0       	push   $0xf01339a4
f010c998:	68 8d 00 00 00       	push   $0x8d
f010c99d:	68 d3 39 13 f0       	push   $0xf01339d3
f010c9a2:	e8 09 38 ff ff       	call   f01001b0 <_panic>
f010c9a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c9af:	83 ec 04             	sub    $0x4,%esp
f010c9b2:	68 00 10 00 00       	push   $0x1000
f010c9b7:	6a 00                	push   $0x0
f010c9b9:	50                   	push   %eax
f010c9ba:	e8 cb 28 02 00       	call   f012f28a <memset>
f010c9bf:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c9c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c9c5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c9c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c9cb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c9d1:	ff 75 0c             	pushl  0xc(%ebp)
f010c9d4:	51                   	push   %ecx
f010c9d5:	52                   	push   %edx
f010c9d6:	50                   	push   %eax
f010c9d7:	e8 e4 ac ff ff       	call   f01076c0 <map_frame>
f010c9dc:	83 c4 10             	add    $0x10,%esp
f010c9df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c9e2:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c9e6:	75 14                	jne    f010c9fc <__sys_allocate_page+0xfc>
	{
		decrement_references(ptr_frame_info);
f010c9e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c9eb:	83 ec 0c             	sub    $0xc,%esp
f010c9ee:	50                   	push   %eax
f010c9ef:	e8 c3 aa ff ff       	call   f01074b7 <decrement_references>
f010c9f4:	83 c4 10             	add    $0x10,%esp
		return r;
f010c9f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9fa:	eb 05                	jmp    f010ca01 <__sys_allocate_page+0x101>
	}
	return 0 ;
f010c9fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ca01:	c9                   	leave  
f010ca02:	c3                   	ret    

f010ca03 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010ca03:	55                   	push   %ebp
f010ca04:	89 e5                	mov    %esp,%ebp
f010ca06:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010ca09:	83 ec 04             	sub    $0x4,%esp
f010ca0c:	68 e7 39 13 f0       	push   $0xf01339e7
f010ca11:	68 b4 00 00 00       	push   $0xb4
f010ca16:	68 d3 39 13 f0       	push   $0xf01339d3
f010ca1b:	e8 90 37 ff ff       	call   f01001b0 <_panic>

f010ca20 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010ca20:	55                   	push   %ebp
f010ca21:	89 e5                	mov    %esp,%ebp
f010ca23:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010ca26:	83 ec 04             	sub    $0x4,%esp
f010ca29:	68 08 3a 13 f0       	push   $0xf0133a08
f010ca2e:	68 c5 00 00 00       	push   $0xc5
f010ca33:	68 d3 39 13 f0       	push   $0xf01339d3
f010ca38:	e8 73 37 ff ff       	call   f01001b0 <_panic>

f010ca3d <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010ca3d:	55                   	push   %ebp
f010ca3e:	89 e5                	mov    %esp,%ebp
f010ca40:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010ca43:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ca48:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ca4e:	83 ec 04             	sub    $0x4,%esp
f010ca51:	ff 75 0c             	pushl  0xc(%ebp)
f010ca54:	ff 75 08             	pushl  0x8(%ebp)
f010ca57:	50                   	push   %eax
f010ca58:	e8 4e c2 ff ff       	call   f0108cab <calculate_required_frames>
f010ca5d:	83 c4 10             	add    $0x10,%esp
}
f010ca60:	c9                   	leave  
f010ca61:	c3                   	ret    

f010ca62 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010ca62:	55                   	push   %ebp
f010ca63:	89 e5                	mov    %esp,%ebp
f010ca65:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ca68:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca6b:	83 ec 0c             	sub    $0xc,%esp
f010ca6e:	50                   	push   %eax
f010ca6f:	e8 bc ae ff ff       	call   f0107930 <calculate_available_frames>
f010ca74:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010ca77:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ca7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca7d:	01 d0                	add    %edx,%eax
}
f010ca7f:	c9                   	leave  
f010ca80:	c3                   	ret    

f010ca81 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010ca81:	55                   	push   %ebp
f010ca82:	89 e5                	mov    %esp,%ebp
f010ca84:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ca87:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca8a:	83 ec 0c             	sub    $0xc,%esp
f010ca8d:	50                   	push   %eax
f010ca8e:	e8 9d ae ff ff       	call   f0107930 <calculate_available_frames>
f010ca93:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010ca96:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ca99:	c9                   	leave  
f010ca9a:	c3                   	ret    

f010ca9b <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010ca9b:	55                   	push   %ebp
f010ca9c:	89 e5                	mov    %esp,%ebp
f010ca9e:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010caa1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010caa4:	83 ec 0c             	sub    $0xc,%esp
f010caa7:	50                   	push   %eax
f010caa8:	e8 83 ae ff ff       	call   f0107930 <calculate_available_frames>
f010caad:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010cab0:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010cab3:	c9                   	leave  
f010cab4:	c3                   	ret    

f010cab5 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010cab5:	55                   	push   %ebp
f010cab6:	89 e5                	mov    %esp,%ebp
f010cab8:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010cabb:	83 ec 0c             	sub    $0xc,%esp
f010cabe:	ff 75 08             	pushl  0x8(%ebp)
f010cac1:	e8 fa 14 02 00       	call   f012dfc0 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cac6:	83 c4 10             	add    $0x10,%esp
}
f010cac9:	c9                   	leave  
f010caca:	c3                   	ret    

f010cacb <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010cacb:	55                   	push   %ebp
f010cacc:	89 e5                	mov    %esp,%ebp
f010cace:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010cad1:	e8 42 14 02 00       	call   f012df18 <scarce_memory>
}
f010cad6:	90                   	nop
f010cad7:	c9                   	leave  
f010cad8:	c3                   	ret    

f010cad9 <sys_clearFFL>:

void sys_clearFFL()
{
f010cad9:	55                   	push   %ebp
f010cada:	89 e5                	mov    %esp,%ebp
f010cadc:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010cadf:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f010cae4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010cae7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010caee:	eb 12                	jmp    f010cb02 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010caf0:	83 ec 0c             	sub    $0xc,%esp
f010caf3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010caf6:	50                   	push   %eax
f010caf7:	e8 29 a8 ff ff       	call   f0107325 <allocate_frame>
f010cafc:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010caff:	ff 45 f4             	incl   -0xc(%ebp)
f010cb02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb05:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cb08:	7c e6                	jl     f010caf0 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010cb0a:	90                   	nop
f010cb0b:	c9                   	leave  
f010cb0c:	c3                   	ret    

f010cb0d <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010cb0d:	55                   	push   %ebp
f010cb0e:	89 e5                	mov    %esp,%ebp
f010cb10:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010cb13:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb18:	83 ec 0c             	sub    $0xc,%esp
f010cb1b:	50                   	push   %eax
f010cb1c:	e8 8c 7a ff ff       	call   f01045ad <pf_calculate_allocated_pages>
f010cb21:	83 c4 10             	add    $0x10,%esp
}
f010cb24:	c9                   	leave  
f010cb25:	c3                   	ret    

f010cb26 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cb26:	55                   	push   %ebp
f010cb27:	89 e5                	mov    %esp,%ebp
f010cb29:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cb2c:	e8 71 0e 00 00       	call   f010d9a2 <isBufferingEnabled>
f010cb31:	84 c0                	test   %al,%al
f010cb33:	74 19                	je     f010cb4e <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cb35:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb3a:	83 ec 04             	sub    $0x4,%esp
f010cb3d:	ff 75 0c             	pushl  0xc(%ebp)
f010cb40:	ff 75 08             	pushl  0x8(%ebp)
f010cb43:	50                   	push   %eax
f010cb44:	e8 98 c1 ff ff       	call   f0108ce1 <__free_user_mem_with_buffering>
f010cb49:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cb4c:	eb 18                	jmp    f010cb66 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cb4e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb53:	83 ec 04             	sub    $0x4,%esp
f010cb56:	ff 75 0c             	pushl  0xc(%ebp)
f010cb59:	ff 75 08             	pushl  0x8(%ebp)
f010cb5c:	50                   	push   %eax
f010cb5d:	e8 71 c1 ff ff       	call   f0108cd3 <free_user_mem>
f010cb62:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cb65:	90                   	nop
}
f010cb66:	c9                   	leave  
f010cb67:	c3                   	ret    

f010cb68 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cb68:	55                   	push   %ebp
f010cb69:	89 e5                	mov    %esp,%ebp
f010cb6b:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cb6e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb73:	83 ec 04             	sub    $0x4,%esp
f010cb76:	ff 75 0c             	pushl  0xc(%ebp)
f010cb79:	ff 75 08             	pushl  0x8(%ebp)
f010cb7c:	50                   	push   %eax
f010cb7d:	e8 43 c1 ff ff       	call   f0108cc5 <allocate_user_mem>
f010cb82:	83 c4 10             	add    $0x10,%esp
	return;
f010cb85:	90                   	nop
}
f010cb86:	c9                   	leave  
f010cb87:	c3                   	ret    

f010cb88 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010cb88:	55                   	push   %ebp
f010cb89:	89 e5                	mov    %esp,%ebp
f010cb8b:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010cb8e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb93:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010cb99:	ff 75 10             	pushl  0x10(%ebp)
f010cb9c:	ff 75 0c             	pushl  0xc(%ebp)
f010cb9f:	ff 75 08             	pushl  0x8(%ebp)
f010cba2:	50                   	push   %eax
f010cba3:	e8 cf c0 ff ff       	call   f0108c77 <allocate_chunk>
f010cba8:	83 c4 10             	add    $0x10,%esp
	return;
f010cbab:	90                   	nop
}
f010cbac:	c9                   	leave  
f010cbad:	c3                   	ret    

f010cbae <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cbae:	55                   	push   %ebp
f010cbaf:	89 e5                	mov    %esp,%ebp
f010cbb1:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cbb4:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cbb9:	ff 75 10             	pushl  0x10(%ebp)
f010cbbc:	ff 75 0c             	pushl  0xc(%ebp)
f010cbbf:	ff 75 08             	pushl  0x8(%ebp)
f010cbc2:	50                   	push   %eax
f010cbc3:	e8 36 c1 ff ff       	call   f0108cfe <move_user_mem>
f010cbc8:	83 c4 10             	add    $0x10,%esp
	return;
f010cbcb:	90                   	nop
}
f010cbcc:	c9                   	leave  
f010cbcd:	c3                   	ret    

f010cbce <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cbce:	55                   	push   %ebp
f010cbcf:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cbd1:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
}
f010cbd6:	5d                   	pop    %ebp
f010cbd7:	c3                   	ret    

f010cbd8 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cbd8:	55                   	push   %ebp
f010cbd9:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cbdb:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbde:	a3 ec bd 2b f0       	mov    %eax,0xf02bbdec
}
f010cbe3:	90                   	nop
f010cbe4:	5d                   	pop    %ebp
f010cbe5:	c3                   	ret    

f010cbe6 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cbe6:	55                   	push   %ebp
f010cbe7:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cbe9:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cbee:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010cbf4:	8b 52 38             	mov    0x38(%edx),%edx
f010cbf7:	80 e6 fd             	and    $0xfd,%dh
f010cbfa:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cbfd:	90                   	nop
f010cbfe:	5d                   	pop    %ebp
f010cbff:	c3                   	ret    

f010cc00 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cc00:	55                   	push   %ebp
f010cc01:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cc03:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cc08:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010cc0e:	8b 52 38             	mov    0x38(%edx),%edx
f010cc11:	80 ce 02             	or     $0x2,%dh
f010cc14:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cc17:	90                   	nop
f010cc18:	5d                   	pop    %ebp
f010cc19:	c3                   	ret    

f010cc1a <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cc1a:	55                   	push   %ebp
f010cc1b:	89 e5                	mov    %esp,%ebp
f010cc1d:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cc20:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cc25:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc28:	83 ec 04             	sub    $0x4,%esp
f010cc2b:	ff 75 0c             	pushl  0xc(%ebp)
f010cc2e:	ff 75 08             	pushl  0x8(%ebp)
f010cc31:	50                   	push   %eax
f010cc32:	e8 03 11 00 00       	call   f010dd3a <createSemaphore>
f010cc37:	83 c4 10             	add    $0x10,%esp
}
f010cc3a:	c9                   	leave  
f010cc3b:	c3                   	ret    

f010cc3c <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cc3c:	55                   	push   %ebp
f010cc3d:	89 e5                	mov    %esp,%ebp
f010cc3f:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cc42:	83 ec 08             	sub    $0x8,%esp
f010cc45:	ff 75 0c             	pushl  0xc(%ebp)
f010cc48:	ff 75 08             	pushl  0x8(%ebp)
f010cc4b:	e8 07 11 00 00       	call   f010dd57 <waitSemaphore>
f010cc50:	83 c4 10             	add    $0x10,%esp
}
f010cc53:	90                   	nop
f010cc54:	c9                   	leave  
f010cc55:	c3                   	ret    

f010cc56 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cc56:	55                   	push   %ebp
f010cc57:	89 e5                	mov    %esp,%ebp
f010cc59:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cc5c:	83 ec 08             	sub    $0x8,%esp
f010cc5f:	ff 75 0c             	pushl  0xc(%ebp)
f010cc62:	ff 75 08             	pushl  0x8(%ebp)
f010cc65:	e8 0a 11 00 00       	call   f010dd74 <signalSemaphore>
f010cc6a:	83 c4 10             	add    $0x10,%esp
}
f010cc6d:	90                   	nop
f010cc6e:	c9                   	leave  
f010cc6f:	c3                   	ret    

f010cc70 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cc70:	55                   	push   %ebp
f010cc71:	89 e5                	mov    %esp,%ebp
f010cc73:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cc76:	83 ec 08             	sub    $0x8,%esp
f010cc79:	ff 75 0c             	pushl  0xc(%ebp)
f010cc7c:	ff 75 08             	pushl  0x8(%ebp)
f010cc7f:	e8 5c 0f 00 00       	call   f010dbe0 <get_semaphore_object_ID>
f010cc84:	83 c4 10             	add    $0x10,%esp
f010cc87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cc8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cc8e:	78 06                	js     f010cc96 <sys_getSemaphoreValue+0x26>
f010cc90:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010cc94:	7e 19                	jle    f010ccaf <sys_getSemaphoreValue+0x3f>
f010cc96:	68 28 3a 13 f0       	push   $0xf0133a28
f010cc9b:	68 4d 3a 13 f0       	push   $0xf0133a4d
f010cca0:	68 4d 01 00 00       	push   $0x14d
f010cca5:	68 d3 39 13 f0       	push   $0xf01339d3
f010ccaa:	e8 01 35 ff ff       	call   f01001b0 <_panic>

	return semaphores[semID].value ;
f010ccaf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ccb2:	89 d0                	mov    %edx,%eax
f010ccb4:	c1 e0 02             	shl    $0x2,%eax
f010ccb7:	01 d0                	add    %edx,%eax
f010ccb9:	01 c0                	add    %eax,%eax
f010ccbb:	01 d0                	add    %edx,%eax
f010ccbd:	01 c0                	add    %eax,%eax
f010ccbf:	01 d0                	add    %edx,%eax
f010ccc1:	c1 e0 02             	shl    $0x2,%eax
f010ccc4:	05 34 9a 2b f0       	add    $0xf02b9a34,%eax
f010ccc9:	8b 00                	mov    (%eax),%eax
}
f010cccb:	c9                   	leave  
f010cccc:	c3                   	ret    

f010cccd <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cccd:	55                   	push   %ebp
f010ccce:	89 e5                	mov    %esp,%ebp
f010ccd0:	83 ec 18             	sub    $0x18,%esp
f010ccd3:	8b 45 10             	mov    0x10(%ebp),%eax
f010ccd6:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010ccd9:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010ccdd:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cce2:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cce5:	83 ec 0c             	sub    $0xc,%esp
f010cce8:	ff 75 14             	pushl  0x14(%ebp)
f010cceb:	52                   	push   %edx
f010ccec:	ff 75 0c             	pushl  0xc(%ebp)
f010ccef:	ff 75 08             	pushl  0x8(%ebp)
f010ccf2:	50                   	push   %eax
f010ccf3:	e8 c9 b1 ff ff       	call   f0107ec1 <createSharedObject>
f010ccf8:	83 c4 20             	add    $0x20,%esp
}
f010ccfb:	c9                   	leave  
f010ccfc:	c3                   	ret    

f010ccfd <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010ccfd:	55                   	push   %ebp
f010ccfe:	89 e5                	mov    %esp,%ebp
f010cd00:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010cd03:	83 ec 08             	sub    $0x8,%esp
f010cd06:	ff 75 0c             	pushl  0xc(%ebp)
f010cd09:	ff 75 08             	pushl  0x8(%ebp)
f010cd0c:	e8 d3 b1 ff ff       	call   f0107ee4 <getSizeOfSharedObject>
f010cd11:	83 c4 10             	add    $0x10,%esp
}
f010cd14:	c9                   	leave  
f010cd15:	c3                   	ret    

f010cd16 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cd16:	55                   	push   %ebp
f010cd17:	89 e5                	mov    %esp,%ebp
f010cd19:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cd1c:	83 ec 04             	sub    $0x4,%esp
f010cd1f:	ff 75 10             	pushl  0x10(%ebp)
f010cd22:	ff 75 0c             	pushl  0xc(%ebp)
f010cd25:	ff 75 08             	pushl  0x8(%ebp)
f010cd28:	e8 d4 b1 ff ff       	call   f0107f01 <getSharedObject>
f010cd2d:	83 c4 10             	add    $0x10,%esp
}
f010cd30:	c9                   	leave  
f010cd31:	c3                   	ret    

f010cd32 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cd32:	55                   	push   %ebp
f010cd33:	89 e5                	mov    %esp,%ebp
f010cd35:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010cd38:	83 ec 08             	sub    $0x8,%esp
f010cd3b:	ff 75 0c             	pushl  0xc(%ebp)
f010cd3e:	ff 75 08             	pushl  0x8(%ebp)
f010cd41:	e8 d8 b1 ff ff       	call   f0107f1e <freeSharedObject>
f010cd46:	83 c4 10             	add    $0x10,%esp
}
f010cd49:	c9                   	leave  
f010cd4a:	c3                   	ret    

f010cd4b <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010cd4b:	55                   	push   %ebp
f010cd4c:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010cd4e:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010cd53:	5d                   	pop    %ebp
f010cd54:	c3                   	ret    

f010cd55 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010cd55:	55                   	push   %ebp
f010cd56:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010cd58:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd5d:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cd60:	5d                   	pop    %ebp
f010cd61:	c3                   	ret    

f010cd62 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cd62:	55                   	push   %ebp
f010cd63:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cd65:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd6a:	89 c2                	mov    %eax,%edx
f010cd6c:	a1 70 31 25 f0       	mov    0xf0253170,%eax
f010cd71:	29 c2                	sub    %eax,%edx
f010cd73:	89 d0                	mov    %edx,%eax
f010cd75:	c1 f8 05             	sar    $0x5,%eax
f010cd78:	89 c2                	mov    %eax,%edx
f010cd7a:	89 d0                	mov    %edx,%eax
f010cd7c:	c1 e0 03             	shl    $0x3,%eax
f010cd7f:	01 d0                	add    %edx,%eax
f010cd81:	01 c0                	add    %eax,%eax
f010cd83:	01 d0                	add    %edx,%eax
f010cd85:	c1 e0 06             	shl    $0x6,%eax
f010cd88:	01 d0                	add    %edx,%eax
f010cd8a:	89 c1                	mov    %eax,%ecx
f010cd8c:	c1 e1 04             	shl    $0x4,%ecx
f010cd8f:	01 c8                	add    %ecx,%eax
f010cd91:	c1 e0 03             	shl    $0x3,%eax
f010cd94:	01 d0                	add    %edx,%eax
f010cd96:	01 c0                	add    %eax,%eax
f010cd98:	01 d0                	add    %edx,%eax
f010cd9a:	89 c1                	mov    %eax,%ecx
f010cd9c:	c1 e1 04             	shl    $0x4,%ecx
f010cd9f:	01 c8                	add    %ecx,%eax
f010cda1:	c1 e0 03             	shl    $0x3,%eax
f010cda4:	01 d0                	add    %edx,%eax
f010cda6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010cdad:	01 d0                	add    %edx,%eax
}
f010cdaf:	5d                   	pop    %ebp
f010cdb0:	c3                   	ret    

f010cdb1 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cdb1:	55                   	push   %ebp
f010cdb2:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cdb4:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cdb9:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cdbc:	5d                   	pop    %ebp
f010cdbd:	c3                   	ret    

f010cdbe <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cdbe:	55                   	push   %ebp
f010cdbf:	89 e5                	mov    %esp,%ebp
f010cdc1:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cdc4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cdc8:	75 0a                	jne    f010cdd4 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cdca:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cdcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cdd2:	eb 22                	jmp    f010cdf6 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cdd4:	83 ec 04             	sub    $0x4,%esp
f010cdd7:	6a 00                	push   $0x0
f010cdd9:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cddc:	50                   	push   %eax
f010cddd:	ff 75 08             	pushl  0x8(%ebp)
f010cde0:	e8 85 cc ff ff       	call   f0109a6a <envid2env>
f010cde5:	83 c4 10             	add    $0x10,%esp
f010cde8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cdeb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cdef:	79 05                	jns    f010cdf6 <sys_destroy_env+0x38>
	{
		return r;
f010cdf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cdf4:	eb 5e                	jmp    f010ce54 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cdf6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cdf9:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cdfe:	39 c2                	cmp    %eax,%edx
f010ce00:	75 1b                	jne    f010ce1d <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010ce02:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ce07:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce0a:	83 ec 08             	sub    $0x8,%esp
f010ce0d:	50                   	push   %eax
f010ce0e:	68 62 3a 13 f0       	push   $0xf0133a62
f010ce13:	e8 19 40 ff ff       	call   f0100e31 <cprintf>
f010ce18:	83 c4 10             	add    $0x10,%esp
f010ce1b:	eb 20                	jmp    f010ce3d <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010ce1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce20:	8b 50 4c             	mov    0x4c(%eax),%edx
f010ce23:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ce28:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce2b:	83 ec 04             	sub    $0x4,%esp
f010ce2e:	52                   	push   %edx
f010ce2f:	50                   	push   %eax
f010ce30:	68 7d 3a 13 f0       	push   $0xf0133a7d
f010ce35:	e8 f7 3f ff ff       	call   f0100e31 <cprintf>
f010ce3a:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010ce3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce40:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce43:	83 ec 0c             	sub    $0xc,%esp
f010ce46:	50                   	push   %eax
f010ce47:	e8 c5 87 ff ff       	call   f0105611 <sched_kill_env>
f010ce4c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010ce4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ce54:	c9                   	leave  
f010ce55:	c3                   	ret    

f010ce56 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010ce56:	55                   	push   %ebp
f010ce57:	89 e5                	mov    %esp,%ebp
f010ce59:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010ce5c:	e8 ea cb ff ff       	call   f0109a4b <env_exit>
	//env_run_cmd_prmpt();
}
f010ce61:	90                   	nop
f010ce62:	c9                   	leave  
f010ce63:	c3                   	ret    

f010ce64 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010ce64:	55                   	push   %ebp
f010ce65:	89 e5                	mov    %esp,%ebp
f010ce67:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010ce6a:	ff 75 14             	pushl  0x14(%ebp)
f010ce6d:	ff 75 10             	pushl  0x10(%ebp)
f010ce70:	ff 75 0c             	pushl  0xc(%ebp)
f010ce73:	ff 75 08             	pushl  0x8(%ebp)
f010ce76:	e8 ec be ff ff       	call   f0108d67 <env_create>
f010ce7b:	83 c4 10             	add    $0x10,%esp
f010ce7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010ce81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ce85:	75 07                	jne    f010ce8e <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ce87:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ce8c:	eb 14                	jmp    f010cea2 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ce8e:	83 ec 0c             	sub    $0xc,%esp
f010ce91:	ff 75 f4             	pushl  -0xc(%ebp)
f010ce94:	e8 9a 84 ff ff       	call   f0105333 <sched_new_env>
f010ce99:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ce9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce9f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cea2:	c9                   	leave  
f010cea3:	c3                   	ret    

f010cea4 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010cea4:	55                   	push   %ebp
f010cea5:	89 e5                	mov    %esp,%ebp
f010cea7:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ceaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010cead:	83 ec 0c             	sub    $0xc,%esp
f010ceb0:	50                   	push   %eax
f010ceb1:	e8 9a 84 ff ff       	call   f0105350 <sched_run_env>
f010ceb6:	83 c4 10             	add    $0x10,%esp
}
f010ceb9:	90                   	nop
f010ceba:	c9                   	leave  
f010cebb:	c3                   	ret    

f010cebc <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010cebc:	55                   	push   %ebp
f010cebd:	89 e5                	mov    %esp,%ebp
f010cebf:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010cec2:	0f 31                	rdtsc  
f010cec4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cec7:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ceca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cecd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ced0:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ced3:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ced6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ced9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cedc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cedf:	89 01                	mov    %eax,(%ecx)
f010cee1:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010cee4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cee7:	c9                   	leave  
f010cee8:	c2 04 00             	ret    $0x4

f010ceeb <sys_rcr2>:

uint32 sys_rcr2()
{
f010ceeb:	55                   	push   %ebp
f010ceec:	89 e5                	mov    %esp,%ebp
f010ceee:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cef1:	0f 20 d0             	mov    %cr2,%eax
f010cef4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010cef7:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010cefa:	90                   	nop
}
f010cefb:	c9                   	leave  
f010cefc:	c3                   	ret    

f010cefd <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010cefd:	55                   	push   %ebp
f010cefe:	89 e5                	mov    %esp,%ebp
f010cf00:	83 ec 04             	sub    $0x4,%esp
f010cf03:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf06:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010cf09:	8a 45 fc             	mov    -0x4(%ebp),%al
f010cf0c:	a2 28 3a 25 f0       	mov    %al,0xf0253a28
}
f010cf11:	90                   	nop
f010cf12:	c9                   	leave  
f010cf13:	c3                   	ret    

f010cf14 <sys_sbrk>:
/**********************************/
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/
void* sys_sbrk(int increment)
{
f010cf14:	55                   	push   %ebp
f010cf15:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #08] [2] USER HEAP - Block Allocator - sys_sbrk() [Kernel Side]
	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f010cf17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	 * 		You might have to undo any operations you have done so far in this case.
	 */
	struct Env* env = curenv; //the current running Environment to adjust its break limit


}
f010cf1c:	5d                   	pop    %ebp
f010cf1d:	c3                   	ret    

f010cf1e <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010cf1e:	55                   	push   %ebp
f010cf1f:	89 e5                	mov    %esp,%ebp
f010cf21:	56                   	push   %esi
f010cf22:	53                   	push   %ebx
f010cf23:	83 ec 10             	sub    $0x10,%esp

	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010cf26:	83 7d 08 32          	cmpl   $0x32,0x8(%ebp)
f010cf2a:	0f 87 1a 05 00 00    	ja     f010d44a <syscall+0x52c>
f010cf30:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf33:	c1 e0 02             	shl    $0x2,%eax
f010cf36:	05 98 3a 13 f0       	add    $0xf0133a98,%eax
f010cf3b:	8b 00                	mov    (%eax),%eax
f010cf3d:	ff e0                	jmp    *%eax
	{
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here
	case SYS_sbrk:
	        return (uint32)sys_sbrk(a1);
f010cf3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf42:	50                   	push   %eax
f010cf43:	e8 cc ff ff ff       	call   f010cf14 <sys_sbrk>
f010cf48:	83 c4 04             	add    $0x4,%esp
f010cf4b:	e9 ff 04 00 00       	jmp    f010d44f <syscall+0x531>
	        //return 0;
	        break;
	    case SYS_free_user_mem:
	    	if((uint32*)a1==NULL||(uint32*)a1==NULL){
f010cf50:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf53:	85 c0                	test   %eax,%eax
f010cf55:	74 07                	je     f010cf5e <syscall+0x40>
f010cf57:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf5a:	85 c0                	test   %eax,%eax
f010cf5c:	75 16                	jne    f010cf74 <syscall+0x56>
	    		sched_kill_env(curenv->env_id);
f010cf5e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cf63:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf66:	83 ec 0c             	sub    $0xc,%esp
f010cf69:	50                   	push   %eax
f010cf6a:	e8 a2 86 ff ff       	call   f0105611 <sched_kill_env>
f010cf6f:	83 c4 10             	add    $0x10,%esp
f010cf72:	eb 43                	jmp    f010cfb7 <syscall+0x99>
	    	}
	    	else if(a1>=USER_LIMIT||a2>=PAGE_SIZE){
f010cf74:	81 7d 0c ff ff 7f ef 	cmpl   $0xef7fffff,0xc(%ebp)
f010cf7b:	77 09                	ja     f010cf86 <syscall+0x68>
f010cf7d:	81 7d 10 ff 0f 00 00 	cmpl   $0xfff,0x10(%ebp)
f010cf84:	76 16                	jbe    f010cf9c <syscall+0x7e>
	    		    		sched_kill_env(curenv->env_id);
f010cf86:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cf8b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf8e:	83 ec 0c             	sub    $0xc,%esp
f010cf91:	50                   	push   %eax
f010cf92:	e8 7a 86 ff ff       	call   f0105611 <sched_kill_env>
f010cf97:	83 c4 10             	add    $0x10,%esp
f010cf9a:	eb 1b                	jmp    f010cfb7 <syscall+0x99>
	    	else if(a1<0||a2<0){
	    		sched_kill_env(curenv->env_id);
	    	}

	    	else{
	        sys_free_user_mem(a1,a2);
f010cf9c:	83 ec 08             	sub    $0x8,%esp
f010cf9f:	ff 75 10             	pushl  0x10(%ebp)
f010cfa2:	ff 75 0c             	pushl  0xc(%ebp)
f010cfa5:	e8 7c fb ff ff       	call   f010cb26 <sys_free_user_mem>
f010cfaa:	83 c4 10             	add    $0x10,%esp
	        return 0;
f010cfad:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfb2:	e9 98 04 00 00       	jmp    f010d44f <syscall+0x531>
	    	}
	        break;
f010cfb7:	e9 8e 04 00 00       	jmp    f010d44a <syscall+0x52c>
	    case SYS_allocate_user_mem:
	    	if((uint32*)a1==NULL||(uint32*)a1==NULL){
f010cfbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfbf:	85 c0                	test   %eax,%eax
f010cfc1:	74 07                	je     f010cfca <syscall+0xac>
f010cfc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfc6:	85 c0                	test   %eax,%eax
f010cfc8:	75 16                	jne    f010cfe0 <syscall+0xc2>
	    		sched_kill_env(curenv->env_id);
f010cfca:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cfcf:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cfd2:	83 ec 0c             	sub    $0xc,%esp
f010cfd5:	50                   	push   %eax
f010cfd6:	e8 36 86 ff ff       	call   f0105611 <sched_kill_env>
f010cfdb:	83 c4 10             	add    $0x10,%esp
f010cfde:	eb 65                	jmp    f010d045 <syscall+0x127>
	    	}
	    	else if(a1>=USER_LIMIT||a2>=USER_LIMIT-1024){
f010cfe0:	81 7d 0c ff ff 7f ef 	cmpl   $0xef7fffff,0xc(%ebp)
f010cfe7:	77 09                	ja     f010cff2 <syscall+0xd4>
f010cfe9:	81 7d 10 ff fb 7f ef 	cmpl   $0xef7ffbff,0x10(%ebp)
f010cff0:	76 16                	jbe    f010d008 <syscall+0xea>
	    		    		sched_kill_env(curenv->env_id);
f010cff2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cff7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cffa:	83 ec 0c             	sub    $0xc,%esp
f010cffd:	50                   	push   %eax
f010cffe:	e8 0e 86 ff ff       	call   f0105611 <sched_kill_env>
f010d003:	83 c4 10             	add    $0x10,%esp
f010d006:	eb 3d                	jmp    f010d045 <syscall+0x127>
	    		    	}
	    	else if(a1<=0||a2<=0){
f010d008:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d00c:	74 06                	je     f010d014 <syscall+0xf6>
f010d00e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010d012:	75 16                	jne    f010d02a <syscall+0x10c>
	    		sched_kill_env(curenv->env_id);
f010d014:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010d019:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d01c:	83 ec 0c             	sub    $0xc,%esp
f010d01f:	50                   	push   %eax
f010d020:	e8 ec 85 ff ff       	call   f0105611 <sched_kill_env>
f010d025:	83 c4 10             	add    $0x10,%esp
f010d028:	eb 1b                	jmp    f010d045 <syscall+0x127>
	    	}

	    	else{
	        sys_allocate_user_mem(a1,a2);
f010d02a:	83 ec 08             	sub    $0x8,%esp
f010d02d:	ff 75 10             	pushl  0x10(%ebp)
f010d030:	ff 75 0c             	pushl  0xc(%ebp)
f010d033:	e8 30 fb ff ff       	call   f010cb68 <sys_allocate_user_mem>
f010d038:	83 c4 10             	add    $0x10,%esp
	        return 0;
f010d03b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d040:	e9 0a 04 00 00       	jmp    f010d44f <syscall+0x531>
	    	}
	        break;
f010d045:	e9 00 04 00 00       	jmp    f010d44a <syscall+0x52c>
	//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d04a:	8b 45 14             	mov    0x14(%ebp),%eax
f010d04d:	0f b6 d0             	movzbl %al,%edx
f010d050:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d053:	83 ec 04             	sub    $0x4,%esp
f010d056:	52                   	push   %edx
f010d057:	ff 75 10             	pushl  0x10(%ebp)
f010d05a:	50                   	push   %eax
f010d05b:	e8 1b f8 ff ff       	call   f010c87b <sys_cputs>
f010d060:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d063:	b8 00 00 00 00       	mov    $0x0,%eax
f010d068:	e9 e2 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d06d:	e8 7b f8 ff ff       	call   f010c8ed <sys_cgetc>
f010d072:	e9 d8 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d077:	83 ec 08             	sub    $0x8,%esp
f010d07a:	ff 75 10             	pushl  0x10(%ebp)
f010d07d:	ff 75 0c             	pushl  0xc(%ebp)
f010d080:	e8 b8 f9 ff ff       	call   f010ca3d <sys_calculate_required_frames>
f010d085:	83 c4 10             	add    $0x10,%esp
f010d088:	e9 c2 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d08d:	e8 d0 f9 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f010d092:	e9 b8 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d097:	e8 e5 f9 ff ff       	call   f010ca81 <sys_calculate_modified_frames>
f010d09c:	e9 ae 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d0a1:	e8 f5 f9 ff ff       	call   f010ca9b <sys_calculate_notmod_frames>
f010d0a6:	e9 a4 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d0ab:	e8 5d fa ff ff       	call   f010cb0d <sys_pf_calculate_allocated_pages>
f010d0b0:	e9 9a 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d0b5:	83 ec 0c             	sub    $0xc,%esp
f010d0b8:	ff 75 0c             	pushl  0xc(%ebp)
f010d0bb:	e8 f5 f9 ff ff       	call   f010cab5 <sys_calculate_pages_tobe_removed_ready_exit>
f010d0c0:	83 c4 10             	add    $0x10,%esp
f010d0c3:	e9 87 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d0c8:	e8 fe f9 ff ff       	call   f010cacb <sys_scarce_memory>
		return 0;
f010d0cd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0d2:	e9 78 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d0d7:	83 ec 04             	sub    $0x4,%esp
f010d0da:	ff 75 14             	pushl  0x14(%ebp)
f010d0dd:	ff 75 10             	pushl  0x10(%ebp)
f010d0e0:	ff 75 0c             	pushl  0xc(%ebp)
f010d0e3:	e8 a0 fa ff ff       	call   f010cb88 <sys_allocate_chunk>
f010d0e8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d0eb:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0f0:	e9 5a 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d0f5:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0fb:	83 ec 08             	sub    $0x8,%esp
f010d0fe:	52                   	push   %edx
f010d0ff:	50                   	push   %eax
f010d100:	e8 fb f7 ff ff       	call   f010c900 <__sys_allocate_page>
f010d105:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d108:	b8 00 00 00 00       	mov    $0x0,%eax
f010d10d:	e9 3d 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d112:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d115:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d118:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d11b:	8b 55 10             	mov    0x10(%ebp),%edx
f010d11e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d121:	83 ec 0c             	sub    $0xc,%esp
f010d124:	56                   	push   %esi
f010d125:	53                   	push   %ebx
f010d126:	51                   	push   %ecx
f010d127:	52                   	push   %edx
f010d128:	50                   	push   %eax
f010d129:	e8 d5 f8 ff ff       	call   f010ca03 <__sys_map_frame>
f010d12e:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d131:	b8 00 00 00 00       	mov    $0x0,%eax
f010d136:	e9 14 03 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d13b:	8b 55 10             	mov    0x10(%ebp),%edx
f010d13e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d141:	83 ec 08             	sub    $0x8,%esp
f010d144:	52                   	push   %edx
f010d145:	50                   	push   %eax
f010d146:	e8 d5 f8 ff ff       	call   f010ca20 <__sys_unmap_frame>
f010d14b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d14e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d153:	e9 f7 02 00 00       	jmp    f010d44f <syscall+0x531>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010d158:	e8 89 fa ff ff       	call   f010cbe6 <sys_disable_interrupt>
		return 0;
f010d15d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d162:	e9 e8 02 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d167:	e8 94 fa ff ff       	call   f010cc00 <sys_enable_interrupt>
		return 0;
f010d16c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d171:	e9 d9 02 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d176:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d179:	0f be c0             	movsbl %al,%eax
f010d17c:	83 ec 0c             	sub    $0xc,%esp
f010d17f:	50                   	push   %eax
f010d180:	e8 44 f7 ff ff       	call   f010c8c9 <sys_cputc>
f010d185:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d188:	b8 00 00 00 00       	mov    $0x0,%eax
f010d18d:	e9 bd 02 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d192:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d195:	0f be c0             	movsbl %al,%eax
f010d198:	83 ec 0c             	sub    $0xc,%esp
f010d19b:	50                   	push   %eax
f010d19c:	e8 38 f9 ff ff       	call   f010cad9 <sys_clearFFL>
f010d1a1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1a4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1a9:	e9 a1 02 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d1ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1b1:	83 ec 08             	sub    $0x8,%esp
f010d1b4:	ff 75 10             	pushl  0x10(%ebp)
f010d1b7:	50                   	push   %eax
f010d1b8:	e8 5d fa ff ff       	call   f010cc1a <sys_createSemaphore>
f010d1bd:	83 c4 10             	add    $0x10,%esp
f010d1c0:	e9 8a 02 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d1c5:	8b 55 10             	mov    0x10(%ebp),%edx
f010d1c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1cb:	83 ec 08             	sub    $0x8,%esp
f010d1ce:	52                   	push   %edx
f010d1cf:	50                   	push   %eax
f010d1d0:	e8 67 fa ff ff       	call   f010cc3c <sys_waitSemaphore>
f010d1d5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1d8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1dd:	e9 6d 02 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d1e2:	8b 55 10             	mov    0x10(%ebp),%edx
f010d1e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1e8:	83 ec 08             	sub    $0x8,%esp
f010d1eb:	52                   	push   %edx
f010d1ec:	50                   	push   %eax
f010d1ed:	e8 64 fa ff ff       	call   f010cc56 <sys_signalSemaphore>
f010d1f2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1f5:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1fa:	e9 50 02 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d1ff:	8b 55 10             	mov    0x10(%ebp),%edx
f010d202:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d205:	83 ec 08             	sub    $0x8,%esp
f010d208:	52                   	push   %edx
f010d209:	50                   	push   %eax
f010d20a:	e8 61 fa ff ff       	call   f010cc70 <sys_getSemaphoreValue>
f010d20f:	83 c4 10             	add    $0x10,%esp
f010d212:	e9 38 02 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d217:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d21a:	8b 45 14             	mov    0x14(%ebp),%eax
f010d21d:	0f b6 d0             	movzbl %al,%edx
f010d220:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d223:	51                   	push   %ecx
f010d224:	52                   	push   %edx
f010d225:	ff 75 10             	pushl  0x10(%ebp)
f010d228:	50                   	push   %eax
f010d229:	e8 9f fa ff ff       	call   f010cccd <sys_createSharedObject>
f010d22e:	83 c4 10             	add    $0x10,%esp
f010d231:	e9 19 02 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d236:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d239:	8b 55 10             	mov    0x10(%ebp),%edx
f010d23c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d23f:	83 ec 04             	sub    $0x4,%esp
f010d242:	51                   	push   %ecx
f010d243:	52                   	push   %edx
f010d244:	50                   	push   %eax
f010d245:	e8 cc fa ff ff       	call   f010cd16 <sys_getSharedObject>
f010d24a:	83 c4 10             	add    $0x10,%esp
f010d24d:	e9 fd 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d252:	8b 55 10             	mov    0x10(%ebp),%edx
f010d255:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d258:	83 ec 08             	sub    $0x8,%esp
f010d25b:	52                   	push   %edx
f010d25c:	50                   	push   %eax
f010d25d:	e8 d0 fa ff ff       	call   f010cd32 <sys_freeSharedObject>
f010d262:	83 c4 10             	add    $0x10,%esp
f010d265:	e9 e5 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d26a:	8b 55 10             	mov    0x10(%ebp),%edx
f010d26d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d270:	83 ec 08             	sub    $0x8,%esp
f010d273:	52                   	push   %edx
f010d274:	50                   	push   %eax
f010d275:	e8 83 fa ff ff       	call   f010ccfd <sys_getSizeOfSharedObject>
f010d27a:	83 c4 10             	add    $0x10,%esp
f010d27d:	e9 cd 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d282:	e8 c4 fa ff ff       	call   f010cd4b <sys_getMaxShares>
f010d287:	e9 c3 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d28c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d28f:	ff 75 18             	pushl  0x18(%ebp)
f010d292:	ff 75 14             	pushl  0x14(%ebp)
f010d295:	ff 75 10             	pushl  0x10(%ebp)
f010d298:	50                   	push   %eax
f010d299:	e8 c6 fb ff ff       	call   f010ce64 <sys_create_env>
f010d29e:	83 c4 10             	add    $0x10,%esp
f010d2a1:	e9 a9 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d2a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2a9:	83 ec 0c             	sub    $0xc,%esp
f010d2ac:	50                   	push   %eax
f010d2ad:	e8 f2 fb ff ff       	call   f010cea4 <sys_run_env>
f010d2b2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d2b5:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2ba:	e9 90 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d2bf:	e8 9e fa ff ff       	call   f010cd62 <sys_getenvindex>
f010d2c4:	e9 86 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d2c9:	e8 87 fa ff ff       	call   f010cd55 <sys_getenvid>
f010d2ce:	e9 7c 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d2d3:	e8 d9 fa ff ff       	call   f010cdb1 <sys_getparentenvid>
f010d2d8:	e9 72 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d2dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2e0:	83 ec 0c             	sub    $0xc,%esp
f010d2e3:	50                   	push   %eax
f010d2e4:	e8 d5 fa ff ff       	call   f010cdbe <sys_destroy_env>
f010d2e9:	83 c4 10             	add    $0x10,%esp
f010d2ec:	e9 5e 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d2f1:	e8 60 fb ff ff       	call   f010ce56 <sys_exit_env>
		return 0;
f010d2f6:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2fb:	e9 4f 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d300:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d303:	83 ec 0c             	sub    $0xc,%esp
f010d306:	50                   	push   %eax
f010d307:	e8 b0 fb ff ff       	call   f010cebc <sys_get_virtual_time>
f010d30c:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d30f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d312:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d315:	8b 45 10             	mov    0x10(%ebp),%eax
f010d318:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d31b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d31e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d321:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d323:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d326:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d329:	89 10                	mov    %edx,(%eax)
		return 0;
f010d32b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d330:	e9 1a 01 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d335:	83 ec 04             	sub    $0x4,%esp
f010d338:	ff 75 14             	pushl  0x14(%ebp)
f010d33b:	ff 75 10             	pushl  0x10(%ebp)
f010d33e:	ff 75 0c             	pushl  0xc(%ebp)
f010d341:	e8 68 f8 ff ff       	call   f010cbae <sys_move_user_mem>
f010d346:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d349:	b8 00 00 00 00       	mov    $0x0,%eax
f010d34e:	e9 fc 00 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d353:	e8 93 fb ff ff       	call   f010ceeb <sys_rcr2>
f010d358:	e9 f2 00 00 00       	jmp    f010d44f <syscall+0x531>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d35d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d360:	0f b6 c0             	movzbl %al,%eax
f010d363:	83 ec 0c             	sub    $0xc,%esp
f010d366:	50                   	push   %eax
f010d367:	e8 91 fb ff ff       	call   f010cefd <sys_bypassPageFault>
f010d36c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d36f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d374:	e9 d6 00 00 00       	jmp    f010d44f <syscall+0x531>

	case SYS_rsttst:
		rsttst();
f010d379:	e8 62 09 02 00       	call   f012dce0 <rsttst>
		return 0;
f010d37e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d383:	e9 c7 00 00 00       	jmp    f010d44f <syscall+0x531>
	case SYS_inctst:
		inctst();
f010d388:	e8 63 09 02 00       	call   f012dcf0 <inctst>
		return 0;
f010d38d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d392:	e9 b8 00 00 00       	jmp    f010d44f <syscall+0x531>
	case SYS_chktst:
		chktst(a1);
f010d397:	83 ec 0c             	sub    $0xc,%esp
f010d39a:	ff 75 0c             	pushl  0xc(%ebp)
f010d39d:	e8 4d 0a 02 00       	call   f012ddef <chktst>
f010d3a2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d3a5:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3aa:	e9 a0 00 00 00       	jmp    f010d44f <syscall+0x531>
	case SYS_gettst:
		return gettst();
f010d3af:	e8 4d 09 02 00       	call   f012dd01 <gettst>
f010d3b4:	e9 96 00 00 00       	jmp    f010d44f <syscall+0x531>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d3b9:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d3bc:	8b 45 18             	mov    0x18(%ebp),%eax
f010d3bf:	0f be c0             	movsbl %al,%eax
f010d3c2:	83 ec 0c             	sub    $0xc,%esp
f010d3c5:	52                   	push   %edx
f010d3c6:	50                   	push   %eax
f010d3c7:	ff 75 14             	pushl  0x14(%ebp)
f010d3ca:	ff 75 10             	pushl  0x10(%ebp)
f010d3cd:	ff 75 0c             	pushl  0xc(%ebp)
f010d3d0:	e8 36 09 02 00       	call   f012dd0b <tst>
f010d3d5:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d3d8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3dd:	eb 70                	jmp    f010d44f <syscall+0x531>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d3df:	e8 ea f7 ff ff       	call   f010cbce <sys_get_heap_strategy>
f010d3e4:	eb 69                	jmp    f010d44f <syscall+0x531>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d3e6:	83 ec 0c             	sub    $0xc,%esp
f010d3e9:	ff 75 0c             	pushl  0xc(%ebp)
f010d3ec:	e8 e7 f7 ff ff       	call   f010cbd8 <sys_set_uheap_strategy>
f010d3f1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d3f4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3f9:	eb 54                	jmp    f010d44f <syscall+0x531>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d3fb:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d3fe:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d401:	8b 55 10             	mov    0x10(%ebp),%edx
f010d404:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d407:	53                   	push   %ebx
f010d408:	51                   	push   %ecx
f010d409:	52                   	push   %edx
f010d40a:	50                   	push   %eax
f010d40b:	e8 a2 47 00 00       	call   f0111bb2 <sys_check_LRU_lists>
f010d410:	83 c4 10             	add    $0x10,%esp
f010d413:	eb 3a                	jmp    f010d44f <syscall+0x531>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d415:	8b 55 10             	mov    0x10(%ebp),%edx
f010d418:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d41b:	83 ec 08             	sub    $0x8,%esp
f010d41e:	52                   	push   %edx
f010d41f:	50                   	push   %eax
f010d420:	e8 0f 49 00 00       	call   f0111d34 <sys_check_LRU_lists_free>
f010d425:	83 c4 10             	add    $0x10,%esp
f010d428:	eb 25                	jmp    f010d44f <syscall+0x531>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010d42a:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d42d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d430:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d433:	51                   	push   %ecx
f010d434:	ff 75 14             	pushl  0x14(%ebp)
f010d437:	52                   	push   %edx
f010d438:	50                   	push   %eax
f010d439:	e8 61 4a 00 00       	call   f0111e9f <sys_check_WS_list>
f010d43e:	83 c4 10             	add    $0x10,%esp
f010d441:	eb 0c                	jmp    f010d44f <syscall+0x531>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d443:	b8 03 00 00 00       	mov    $0x3,%eax
f010d448:	eb 05                	jmp    f010d44f <syscall+0x531>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d44a:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d44f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d452:	5b                   	pop    %ebx
f010d453:	5e                   	pop    %esi
f010d454:	5d                   	pop    %ebp
f010d455:	c3                   	ret    

f010d456 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d456:	55                   	push   %ebp
f010d457:	89 e5                	mov    %esp,%ebp
f010d459:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d45c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d45f:	8b 00                	mov    (%eax),%eax
f010d461:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d464:	8b 45 10             	mov    0x10(%ebp),%eax
f010d467:	8b 00                	mov    (%eax),%eax
f010d469:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d46c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d473:	e9 ca 00 00 00       	jmp    f010d542 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d478:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d47b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d47e:	01 d0                	add    %edx,%eax
f010d480:	89 c2                	mov    %eax,%edx
f010d482:	c1 ea 1f             	shr    $0x1f,%edx
f010d485:	01 d0                	add    %edx,%eax
f010d487:	d1 f8                	sar    %eax
f010d489:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d48c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d48f:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d492:	eb 03                	jmp    f010d497 <stab_binsearch+0x41>
			m--;
f010d494:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d497:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d49a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d49d:	7c 1e                	jl     f010d4bd <stab_binsearch+0x67>
f010d49f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d4a2:	89 d0                	mov    %edx,%eax
f010d4a4:	01 c0                	add    %eax,%eax
f010d4a6:	01 d0                	add    %edx,%eax
f010d4a8:	c1 e0 02             	shl    $0x2,%eax
f010d4ab:	89 c2                	mov    %eax,%edx
f010d4ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4b0:	01 d0                	add    %edx,%eax
f010d4b2:	8a 40 04             	mov    0x4(%eax),%al
f010d4b5:	0f b6 c0             	movzbl %al,%eax
f010d4b8:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d4bb:	75 d7                	jne    f010d494 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d4bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d4c0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d4c3:	7d 09                	jge    f010d4ce <stab_binsearch+0x78>
			l = true_m + 1;
f010d4c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d4c8:	40                   	inc    %eax
f010d4c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d4cc:	eb 74                	jmp    f010d542 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d4ce:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d4d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d4d8:	89 d0                	mov    %edx,%eax
f010d4da:	01 c0                	add    %eax,%eax
f010d4dc:	01 d0                	add    %edx,%eax
f010d4de:	c1 e0 02             	shl    $0x2,%eax
f010d4e1:	89 c2                	mov    %eax,%edx
f010d4e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4e6:	01 d0                	add    %edx,%eax
f010d4e8:	8b 40 08             	mov    0x8(%eax),%eax
f010d4eb:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d4ee:	73 11                	jae    f010d501 <stab_binsearch+0xab>
			*region_left = m;
f010d4f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4f3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d4f6:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d4f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d4fb:	40                   	inc    %eax
f010d4fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d4ff:	eb 41                	jmp    f010d542 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d501:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d504:	89 d0                	mov    %edx,%eax
f010d506:	01 c0                	add    %eax,%eax
f010d508:	01 d0                	add    %edx,%eax
f010d50a:	c1 e0 02             	shl    $0x2,%eax
f010d50d:	89 c2                	mov    %eax,%edx
f010d50f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d512:	01 d0                	add    %edx,%eax
f010d514:	8b 40 08             	mov    0x8(%eax),%eax
f010d517:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d51a:	76 14                	jbe    f010d530 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d51c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d51f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d522:	8b 45 10             	mov    0x10(%ebp),%eax
f010d525:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d527:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d52a:	48                   	dec    %eax
f010d52b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d52e:	eb 12                	jmp    f010d542 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d530:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d533:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d536:	89 10                	mov    %edx,(%eax)
			l = m;
f010d538:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d53b:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d53e:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d542:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d545:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d548:	0f 8e 2a ff ff ff    	jle    f010d478 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d54e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d552:	75 0f                	jne    f010d563 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d554:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d557:	8b 00                	mov    (%eax),%eax
f010d559:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d55c:	8b 45 10             	mov    0x10(%ebp),%eax
f010d55f:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d561:	eb 3d                	jmp    f010d5a0 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d563:	8b 45 10             	mov    0x10(%ebp),%eax
f010d566:	8b 00                	mov    (%eax),%eax
f010d568:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d56b:	eb 03                	jmp    f010d570 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d56d:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d570:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d573:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d575:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d578:	7d 1e                	jge    f010d598 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d57a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d57d:	89 d0                	mov    %edx,%eax
f010d57f:	01 c0                	add    %eax,%eax
f010d581:	01 d0                	add    %edx,%eax
f010d583:	c1 e0 02             	shl    $0x2,%eax
f010d586:	89 c2                	mov    %eax,%edx
f010d588:	8b 45 08             	mov    0x8(%ebp),%eax
f010d58b:	01 d0                	add    %edx,%eax
f010d58d:	8a 40 04             	mov    0x4(%eax),%al
f010d590:	0f b6 c0             	movzbl %al,%eax
f010d593:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d596:	75 d5                	jne    f010d56d <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d598:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d59b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d59e:	89 10                	mov    %edx,(%eax)
	}
}
f010d5a0:	90                   	nop
f010d5a1:	c9                   	leave  
f010d5a2:	c3                   	ret    

f010d5a3 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d5a3:	55                   	push   %ebp
f010d5a4:	89 e5                	mov    %esp,%ebp
f010d5a6:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d5a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5ac:	c7 00 64 3b 13 f0    	movl   $0xf0133b64,(%eax)
	info->eip_line = 0;
f010d5b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5b5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d5bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5bf:	c7 40 08 64 3b 13 f0 	movl   $0xf0133b64,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d5c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5c9:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d5d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5d3:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5d6:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d5d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5dc:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d5e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5e6:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d5eb:	76 1e                	jbe    f010d60b <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d5ed:	c7 45 f4 4c bc 13 f0 	movl   $0xf013bc4c,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d5f4:	c7 45 f0 c4 85 17 f0 	movl   $0xf01785c4,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d5fb:	c7 45 ec c5 85 17 f0 	movl   $0xf01785c5,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d602:	c7 45 e8 8b 59 18 f0 	movl   $0xf018598b,-0x18(%ebp)
f010d609:	eb 2a                	jmp    f010d635 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d60b:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d612:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d615:	8b 00                	mov    (%eax),%eax
f010d617:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d61a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d61d:	8b 40 04             	mov    0x4(%eax),%eax
f010d620:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d623:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d626:	8b 40 08             	mov    0x8(%eax),%eax
f010d629:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d62c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d62f:	8b 40 0c             	mov    0xc(%eax),%eax
f010d632:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d635:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d638:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d63b:	76 0a                	jbe    f010d647 <debuginfo_eip+0xa4>
f010d63d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d640:	48                   	dec    %eax
f010d641:	8a 00                	mov    (%eax),%al
f010d643:	84 c0                	test   %al,%al
f010d645:	74 0a                	je     f010d651 <debuginfo_eip+0xae>
		return -1;
f010d647:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d64c:	e9 01 02 00 00       	jmp    f010d852 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d651:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d658:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d65b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d65e:	29 c2                	sub    %eax,%edx
f010d660:	89 d0                	mov    %edx,%eax
f010d662:	c1 f8 02             	sar    $0x2,%eax
f010d665:	89 c2                	mov    %eax,%edx
f010d667:	89 d0                	mov    %edx,%eax
f010d669:	c1 e0 02             	shl    $0x2,%eax
f010d66c:	01 d0                	add    %edx,%eax
f010d66e:	c1 e0 02             	shl    $0x2,%eax
f010d671:	01 d0                	add    %edx,%eax
f010d673:	c1 e0 02             	shl    $0x2,%eax
f010d676:	01 d0                	add    %edx,%eax
f010d678:	89 c1                	mov    %eax,%ecx
f010d67a:	c1 e1 08             	shl    $0x8,%ecx
f010d67d:	01 c8                	add    %ecx,%eax
f010d67f:	89 c1                	mov    %eax,%ecx
f010d681:	c1 e1 10             	shl    $0x10,%ecx
f010d684:	01 c8                	add    %ecx,%eax
f010d686:	01 c0                	add    %eax,%eax
f010d688:	01 d0                	add    %edx,%eax
f010d68a:	48                   	dec    %eax
f010d68b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d68e:	ff 75 08             	pushl  0x8(%ebp)
f010d691:	6a 64                	push   $0x64
f010d693:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d696:	50                   	push   %eax
f010d697:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d69a:	50                   	push   %eax
f010d69b:	ff 75 f4             	pushl  -0xc(%ebp)
f010d69e:	e8 b3 fd ff ff       	call   f010d456 <stab_binsearch>
f010d6a3:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d6a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d6a9:	85 c0                	test   %eax,%eax
f010d6ab:	75 0a                	jne    f010d6b7 <debuginfo_eip+0x114>
		return -1;
f010d6ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d6b2:	e9 9b 01 00 00       	jmp    f010d852 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d6b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d6ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d6bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d6c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d6c3:	ff 75 08             	pushl  0x8(%ebp)
f010d6c6:	6a 24                	push   $0x24
f010d6c8:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d6cb:	50                   	push   %eax
f010d6cc:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d6cf:	50                   	push   %eax
f010d6d0:	ff 75 f4             	pushl  -0xc(%ebp)
f010d6d3:	e8 7e fd ff ff       	call   f010d456 <stab_binsearch>
f010d6d8:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d6db:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d6de:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d6e1:	39 c2                	cmp    %eax,%edx
f010d6e3:	0f 8f 86 00 00 00    	jg     f010d76f <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d6e9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d6ec:	89 c2                	mov    %eax,%edx
f010d6ee:	89 d0                	mov    %edx,%eax
f010d6f0:	01 c0                	add    %eax,%eax
f010d6f2:	01 d0                	add    %edx,%eax
f010d6f4:	c1 e0 02             	shl    $0x2,%eax
f010d6f7:	89 c2                	mov    %eax,%edx
f010d6f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6fc:	01 d0                	add    %edx,%eax
f010d6fe:	8b 00                	mov    (%eax),%eax
f010d700:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d703:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d706:	29 d1                	sub    %edx,%ecx
f010d708:	89 ca                	mov    %ecx,%edx
f010d70a:	39 d0                	cmp    %edx,%eax
f010d70c:	73 22                	jae    f010d730 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d70e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d711:	89 c2                	mov    %eax,%edx
f010d713:	89 d0                	mov    %edx,%eax
f010d715:	01 c0                	add    %eax,%eax
f010d717:	01 d0                	add    %edx,%eax
f010d719:	c1 e0 02             	shl    $0x2,%eax
f010d71c:	89 c2                	mov    %eax,%edx
f010d71e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d721:	01 d0                	add    %edx,%eax
f010d723:	8b 10                	mov    (%eax),%edx
f010d725:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d728:	01 c2                	add    %eax,%edx
f010d72a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d72d:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d730:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d733:	89 c2                	mov    %eax,%edx
f010d735:	89 d0                	mov    %edx,%eax
f010d737:	01 c0                	add    %eax,%eax
f010d739:	01 d0                	add    %edx,%eax
f010d73b:	c1 e0 02             	shl    $0x2,%eax
f010d73e:	89 c2                	mov    %eax,%edx
f010d740:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d743:	01 d0                	add    %edx,%eax
f010d745:	8b 50 08             	mov    0x8(%eax),%edx
f010d748:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d74b:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d74e:	8b 55 08             	mov    0x8(%ebp),%edx
f010d751:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d754:	8b 40 10             	mov    0x10(%eax),%eax
f010d757:	29 c2                	sub    %eax,%edx
f010d759:	89 d0                	mov    %edx,%eax
f010d75b:	c1 f8 02             	sar    $0x2,%eax
f010d75e:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d761:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d764:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d767:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d76a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d76d:	eb 15                	jmp    f010d784 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d76f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d772:	8b 55 08             	mov    0x8(%ebp),%edx
f010d775:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d778:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d77b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d77e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d781:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d784:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d787:	8b 40 08             	mov    0x8(%eax),%eax
f010d78a:	83 ec 08             	sub    $0x8,%esp
f010d78d:	6a 3a                	push   $0x3a
f010d78f:	50                   	push   %eax
f010d790:	e8 c9 1a 02 00       	call   f012f25e <strfind>
f010d795:	83 c4 10             	add    $0x10,%esp
f010d798:	89 c2                	mov    %eax,%edx
f010d79a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d79d:	8b 40 08             	mov    0x8(%eax),%eax
f010d7a0:	29 c2                	sub    %eax,%edx
f010d7a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7a5:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d7a8:	eb 03                	jmp    f010d7ad <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d7aa:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d7ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d7b0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d7b3:	7c 4e                	jl     f010d803 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d7b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d7b8:	89 d0                	mov    %edx,%eax
f010d7ba:	01 c0                	add    %eax,%eax
f010d7bc:	01 d0                	add    %edx,%eax
f010d7be:	c1 e0 02             	shl    $0x2,%eax
f010d7c1:	89 c2                	mov    %eax,%edx
f010d7c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7c6:	01 d0                	add    %edx,%eax
f010d7c8:	8a 40 04             	mov    0x4(%eax),%al
f010d7cb:	3c 84                	cmp    $0x84,%al
f010d7cd:	74 34                	je     f010d803 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d7cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d7d2:	89 d0                	mov    %edx,%eax
f010d7d4:	01 c0                	add    %eax,%eax
f010d7d6:	01 d0                	add    %edx,%eax
f010d7d8:	c1 e0 02             	shl    $0x2,%eax
f010d7db:	89 c2                	mov    %eax,%edx
f010d7dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7e0:	01 d0                	add    %edx,%eax
f010d7e2:	8a 40 04             	mov    0x4(%eax),%al
f010d7e5:	3c 64                	cmp    $0x64,%al
f010d7e7:	75 c1                	jne    f010d7aa <debuginfo_eip+0x207>
f010d7e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d7ec:	89 d0                	mov    %edx,%eax
f010d7ee:	01 c0                	add    %eax,%eax
f010d7f0:	01 d0                	add    %edx,%eax
f010d7f2:	c1 e0 02             	shl    $0x2,%eax
f010d7f5:	89 c2                	mov    %eax,%edx
f010d7f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7fa:	01 d0                	add    %edx,%eax
f010d7fc:	8b 40 08             	mov    0x8(%eax),%eax
f010d7ff:	85 c0                	test   %eax,%eax
f010d801:	74 a7                	je     f010d7aa <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d803:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d806:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d809:	7c 42                	jl     f010d84d <debuginfo_eip+0x2aa>
f010d80b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d80e:	89 d0                	mov    %edx,%eax
f010d810:	01 c0                	add    %eax,%eax
f010d812:	01 d0                	add    %edx,%eax
f010d814:	c1 e0 02             	shl    $0x2,%eax
f010d817:	89 c2                	mov    %eax,%edx
f010d819:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d81c:	01 d0                	add    %edx,%eax
f010d81e:	8b 00                	mov    (%eax),%eax
f010d820:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d823:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d826:	29 d1                	sub    %edx,%ecx
f010d828:	89 ca                	mov    %ecx,%edx
f010d82a:	39 d0                	cmp    %edx,%eax
f010d82c:	73 1f                	jae    f010d84d <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d82e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d831:	89 d0                	mov    %edx,%eax
f010d833:	01 c0                	add    %eax,%eax
f010d835:	01 d0                	add    %edx,%eax
f010d837:	c1 e0 02             	shl    $0x2,%eax
f010d83a:	89 c2                	mov    %eax,%edx
f010d83c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d83f:	01 d0                	add    %edx,%eax
f010d841:	8b 10                	mov    (%eax),%edx
f010d843:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d846:	01 c2                	add    %eax,%edx
f010d848:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d84b:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d84d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d852:	c9                   	leave  
f010d853:	c3                   	ret    

f010d854 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d854:	55                   	push   %ebp
f010d855:	89 e5                	mov    %esp,%ebp
f010d857:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d85a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d85e:	74 1c                	je     f010d87c <setPageReplacmentAlgorithmLRU+0x28>
f010d860:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d864:	74 16                	je     f010d87c <setPageReplacmentAlgorithmLRU+0x28>
f010d866:	68 70 3b 13 f0       	push   $0xf0133b70
f010d86b:	68 ba 3b 13 f0       	push   $0xf0133bba
f010d870:	6a 18                	push   $0x18
f010d872:	68 cf 3b 13 f0       	push   $0xf0133bcf
f010d877:	e8 34 29 ff ff       	call   f01001b0 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d87c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d87f:	a3 4c be 2b f0       	mov    %eax,0xf02bbe4c
}
f010d884:	90                   	nop
f010d885:	c9                   	leave  
f010d886:	c3                   	ret    

f010d887 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d887:	55                   	push   %ebp
f010d888:	89 e5                	mov    %esp,%ebp
f010d88a:	c7 05 4c be 2b f0 03 	movl   $0x3,0xf02bbe4c
f010d891:	00 00 00 
f010d894:	90                   	nop
f010d895:	5d                   	pop    %ebp
f010d896:	c3                   	ret    

f010d897 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d897:	55                   	push   %ebp
f010d898:	89 e5                	mov    %esp,%ebp
f010d89a:	c7 05 4c be 2b f0 04 	movl   $0x4,0xf02bbe4c
f010d8a1:	00 00 00 
f010d8a4:	90                   	nop
f010d8a5:	5d                   	pop    %ebp
f010d8a6:	c3                   	ret    

f010d8a7 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d8a7:	55                   	push   %ebp
f010d8a8:	89 e5                	mov    %esp,%ebp
f010d8aa:	c7 05 4c be 2b f0 05 	movl   $0x5,0xf02bbe4c
f010d8b1:	00 00 00 
f010d8b4:	90                   	nop
f010d8b5:	5d                   	pop    %ebp
f010d8b6:	c3                   	ret    

f010d8b7 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d8b7:	55                   	push   %ebp
f010d8b8:	89 e5                	mov    %esp,%ebp
f010d8ba:	c7 05 4c be 2b f0 07 	movl   $0x7,0xf02bbe4c
f010d8c1:	00 00 00 
f010d8c4:	90                   	nop
f010d8c5:	5d                   	pop    %ebp
f010d8c6:	c3                   	ret    

f010d8c7 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d8c7:	55                   	push   %ebp
f010d8c8:	89 e5                	mov    %esp,%ebp
f010d8ca:	c7 05 4c be 2b f0 06 	movl   $0x6,0xf02bbe4c
f010d8d1:	00 00 00 
f010d8d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8d7:	a3 5c 3a 25 f0       	mov    %eax,0xf0253a5c
f010d8dc:	90                   	nop
f010d8dd:	5d                   	pop    %ebp
f010d8de:	c3                   	ret    

f010d8df <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d8df:	55                   	push   %ebp
f010d8e0:	89 e5                	mov    %esp,%ebp
f010d8e2:	8b 15 4c be 2b f0    	mov    0xf02bbe4c,%edx
f010d8e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8eb:	39 c2                	cmp    %eax,%edx
f010d8ed:	0f 94 c0             	sete   %al
f010d8f0:	0f b6 c0             	movzbl %al,%eax
f010d8f3:	5d                   	pop    %ebp
f010d8f4:	c3                   	ret    

f010d8f5 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d8f5:	55                   	push   %ebp
f010d8f6:	89 e5                	mov    %esp,%ebp
f010d8f8:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d8fd:	83 f8 03             	cmp    $0x3,%eax
f010d900:	75 07                	jne    f010d909 <isPageReplacmentAlgorithmCLOCK+0x14>
f010d902:	b8 01 00 00 00       	mov    $0x1,%eax
f010d907:	eb 05                	jmp    f010d90e <isPageReplacmentAlgorithmCLOCK+0x19>
f010d909:	b8 00 00 00 00       	mov    $0x0,%eax
f010d90e:	5d                   	pop    %ebp
f010d90f:	c3                   	ret    

f010d910 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d910:	55                   	push   %ebp
f010d911:	89 e5                	mov    %esp,%ebp
f010d913:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d918:	83 f8 04             	cmp    $0x4,%eax
f010d91b:	75 07                	jne    f010d924 <isPageReplacmentAlgorithmFIFO+0x14>
f010d91d:	b8 01 00 00 00       	mov    $0x1,%eax
f010d922:	eb 05                	jmp    f010d929 <isPageReplacmentAlgorithmFIFO+0x19>
f010d924:	b8 00 00 00 00       	mov    $0x0,%eax
f010d929:	5d                   	pop    %ebp
f010d92a:	c3                   	ret    

f010d92b <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d92b:	55                   	push   %ebp
f010d92c:	89 e5                	mov    %esp,%ebp
f010d92e:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d933:	83 f8 05             	cmp    $0x5,%eax
f010d936:	75 07                	jne    f010d93f <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d938:	b8 01 00 00 00       	mov    $0x1,%eax
f010d93d:	eb 05                	jmp    f010d944 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d93f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d944:	5d                   	pop    %ebp
f010d945:	c3                   	ret    

f010d946 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d946:	55                   	push   %ebp
f010d947:	89 e5                	mov    %esp,%ebp
f010d949:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d94e:	83 f8 07             	cmp    $0x7,%eax
f010d951:	75 07                	jne    f010d95a <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d953:	b8 01 00 00 00       	mov    $0x1,%eax
f010d958:	eb 05                	jmp    f010d95f <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d95a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d95f:	5d                   	pop    %ebp
f010d960:	c3                   	ret    

f010d961 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d961:	55                   	push   %ebp
f010d962:	89 e5                	mov    %esp,%ebp
f010d964:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d969:	83 f8 06             	cmp    $0x6,%eax
f010d96c:	75 07                	jne    f010d975 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d96e:	b8 01 00 00 00       	mov    $0x1,%eax
f010d973:	eb 05                	jmp    f010d97a <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d975:	b8 00 00 00 00       	mov    $0x0,%eax
f010d97a:	5d                   	pop    %ebp
f010d97b:	c3                   	ret    

f010d97c <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d97c:	55                   	push   %ebp
f010d97d:	89 e5                	mov    %esp,%ebp
f010d97f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d982:	a3 0c be 2b f0       	mov    %eax,0xf02bbe0c
f010d987:	90                   	nop
f010d988:	5d                   	pop    %ebp
f010d989:	c3                   	ret    

f010d98a <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d98a:	55                   	push   %ebp
f010d98b:	89 e5                	mov    %esp,%ebp
f010d98d:	a1 0c be 2b f0       	mov    0xf02bbe0c,%eax
f010d992:	5d                   	pop    %ebp
f010d993:	c3                   	ret    

f010d994 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d994:	55                   	push   %ebp
f010d995:	89 e5                	mov    %esp,%ebp
f010d997:	8b 45 08             	mov    0x8(%ebp),%eax
f010d99a:	a3 64 be 2b f0       	mov    %eax,0xf02bbe64
f010d99f:	90                   	nop
f010d9a0:	5d                   	pop    %ebp
f010d9a1:	c3                   	ret    

f010d9a2 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d9a2:	55                   	push   %ebp
f010d9a3:	89 e5                	mov    %esp,%ebp
f010d9a5:	a1 64 be 2b f0       	mov    0xf02bbe64,%eax
f010d9aa:	5d                   	pop    %ebp
f010d9ab:	c3                   	ret    

f010d9ac <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d9ac:	55                   	push   %ebp
f010d9ad:	89 e5                	mov    %esp,%ebp
f010d9af:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9b2:	a3 74 be 2b f0       	mov    %eax,0xf02bbe74
f010d9b7:	90                   	nop
f010d9b8:	5d                   	pop    %ebp
f010d9b9:	c3                   	ret    

f010d9ba <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d9ba:	55                   	push   %ebp
f010d9bb:	89 e5                	mov    %esp,%ebp
f010d9bd:	a1 74 be 2b f0       	mov    0xf02bbe74,%eax
f010d9c2:	5d                   	pop    %ebp
f010d9c3:	c3                   	ret    

f010d9c4 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d9c4:	55                   	push   %ebp
f010d9c5:	89 e5                	mov    %esp,%ebp
f010d9c7:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d9ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9cd:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d9d3:	83 ec 04             	sub    $0x4,%esp
f010d9d6:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d9d9:	52                   	push   %edx
f010d9da:	ff 75 0c             	pushl  0xc(%ebp)
f010d9dd:	50                   	push   %eax
f010d9de:	e8 2a 9c ff ff       	call   f010760d <__static_cpt>
f010d9e3:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d9e6:	90                   	nop
f010d9e7:	c9                   	leave  
f010d9e8:	c3                   	ret    

f010d9e9 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d9e9:	55                   	push   %ebp
f010d9ea:	89 e5                	mov    %esp,%ebp
f010d9ec:	83 ec 18             	sub    $0x18,%esp
	uint32 wsSize = env_page_ws_get_size(curenv);
f010d9ef:	83 ec 0c             	sub    $0xc,%esp
f010d9f2:	ff 75 08             	pushl  0x8(%ebp)
f010d9f5:	e8 f7 a8 ff ff       	call   f01082f1 <env_page_ws_get_size>
f010d9fa:	83 c4 10             	add    $0x10,%esp
f010d9fd:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(wsSize < (curenv->page_WS_max_size))
f010da00:	8b 45 08             	mov    0x8(%ebp),%eax
f010da03:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010da09:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010da0c:	76 14                	jbe    f010da22 <page_fault_handler+0x39>
	{
		//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
f010da0e:	83 ec 04             	sub    $0x4,%esp
f010da11:	68 ec 3b 13 f0       	push   $0xf0133bec
f010da16:	6a 55                	push   $0x55
f010da18:	68 cf 3b 13 f0       	push   $0xf0133bcf
f010da1d:	e8 8e 27 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010da22:	e8 e9 fe ff ff       	call   f010d910 <isPageReplacmentAlgorithmFIFO>
f010da27:	85 c0                	test   %eax,%eax
f010da29:	74 14                	je     f010da3f <page_fault_handler+0x56>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010da2b:	83 ec 04             	sub    $0x4,%esp
f010da2e:	68 28 3c 13 f0       	push   $0xf0133c28
f010da33:	6a 61                	push   $0x61
f010da35:	68 cf 3b 13 f0       	push   $0xf0133bcf
f010da3a:	e8 71 27 ff ff       	call   f01001b0 <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010da3f:	83 ec 0c             	sub    $0xc,%esp
f010da42:	6a 02                	push   $0x2
f010da44:	e8 96 fe ff ff       	call   f010d8df <isPageReplacmentAlgorithmLRU>
f010da49:	83 c4 10             	add    $0x10,%esp
f010da4c:	85 c0                	test   %eax,%eax
f010da4e:	74 14                	je     f010da64 <page_fault_handler+0x7b>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010da50:	83 ec 04             	sub    $0x4,%esp
f010da53:	68 6c 3c 13 f0       	push   $0xf0133c6c
f010da58:	6a 67                	push   $0x67
f010da5a:	68 cf 3b 13 f0       	push   $0xf0133bcf
f010da5f:	e8 4c 27 ff ff       	call   f01001b0 <_panic>

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010da64:	90                   	nop
f010da65:	c9                   	leave  
f010da66:	c3                   	ret    

f010da67 <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010da67:	55                   	push   %ebp
f010da68:	89 e5                	mov    %esp,%ebp
f010da6a:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010da6d:	83 ec 04             	sub    $0x4,%esp
f010da70:	68 b0 3c 13 f0       	push   $0xf0133cb0
f010da75:	6a 70                	push   $0x70
f010da77:	68 cf 3b 13 f0       	push   $0xf0133bcf
f010da7c:	e8 2f 27 ff ff       	call   f01001b0 <_panic>

f010da81 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010da81:	55                   	push   %ebp
f010da82:	89 e5                	mov    %esp,%ebp
f010da84:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010da87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010da8e:	e9 aa 00 00 00       	jmp    f010db3d <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010da93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da96:	89 d0                	mov    %edx,%eax
f010da98:	c1 e0 02             	shl    $0x2,%eax
f010da9b:	01 d0                	add    %edx,%eax
f010da9d:	01 c0                	add    %eax,%eax
f010da9f:	01 d0                	add    %edx,%eax
f010daa1:	01 c0                	add    %eax,%eax
f010daa3:	01 d0                	add    %edx,%eax
f010daa5:	c1 e0 02             	shl    $0x2,%eax
f010daa8:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010daad:	83 ec 04             	sub    $0x4,%esp
f010dab0:	6a 5c                	push   $0x5c
f010dab2:	6a 00                	push   $0x0
f010dab4:	50                   	push   %eax
f010dab5:	e8 d0 17 02 00       	call   f012f28a <memset>
f010daba:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010dabd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dac0:	89 d0                	mov    %edx,%eax
f010dac2:	c1 e0 02             	shl    $0x2,%eax
f010dac5:	01 d0                	add    %edx,%eax
f010dac7:	01 c0                	add    %eax,%eax
f010dac9:	01 d0                	add    %edx,%eax
f010dacb:	01 c0                	add    %eax,%eax
f010dacd:	01 d0                	add    %edx,%eax
f010dacf:	c1 e0 02             	shl    $0x2,%eax
f010dad2:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010dad7:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010dada:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dadd:	89 d0                	mov    %edx,%eax
f010dadf:	c1 e0 02             	shl    $0x2,%eax
f010dae2:	01 d0                	add    %edx,%eax
f010dae4:	01 c0                	add    %eax,%eax
f010dae6:	01 d0                	add    %edx,%eax
f010dae8:	01 c0                	add    %eax,%eax
f010daea:	01 d0                	add    %edx,%eax
f010daec:	c1 e0 02             	shl    $0x2,%eax
f010daef:	05 24 9a 2b f0       	add    $0xf02b9a24,%eax
f010daf4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010dafa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dafd:	89 d0                	mov    %edx,%eax
f010daff:	c1 e0 02             	shl    $0x2,%eax
f010db02:	01 d0                	add    %edx,%eax
f010db04:	01 c0                	add    %eax,%eax
f010db06:	01 d0                	add    %edx,%eax
f010db08:	01 c0                	add    %eax,%eax
f010db0a:	01 d0                	add    %edx,%eax
f010db0c:	c1 e0 02             	shl    $0x2,%eax
f010db0f:	05 28 9a 2b f0       	add    $0xf02b9a28,%eax
f010db14:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010db1d:	89 d0                	mov    %edx,%eax
f010db1f:	c1 e0 02             	shl    $0x2,%eax
f010db22:	01 d0                	add    %edx,%eax
f010db24:	01 c0                	add    %eax,%eax
f010db26:	01 d0                	add    %edx,%eax
f010db28:	01 c0                	add    %eax,%eax
f010db2a:	01 d0                	add    %edx,%eax
f010db2c:	c1 e0 02             	shl    $0x2,%eax
f010db2f:	05 30 9a 2b f0       	add    $0xf02b9a30,%eax
f010db34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010db3a:	ff 45 f4             	incl   -0xc(%ebp)
f010db3d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010db41:	0f 8e 4c ff ff ff    	jle    f010da93 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010db47:	90                   	nop
f010db48:	c9                   	leave  
f010db49:	c3                   	ret    

f010db4a <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010db4a:	55                   	push   %ebp
f010db4b:	89 e5                	mov    %esp,%ebp
f010db4d:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010db50:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010db57:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010db5e:	eb 2b                	jmp    f010db8b <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010db60:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010db63:	89 d0                	mov    %edx,%eax
f010db65:	c1 e0 02             	shl    $0x2,%eax
f010db68:	01 d0                	add    %edx,%eax
f010db6a:	01 c0                	add    %eax,%eax
f010db6c:	01 d0                	add    %edx,%eax
f010db6e:	01 c0                	add    %eax,%eax
f010db70:	01 d0                	add    %edx,%eax
f010db72:	c1 e0 02             	shl    $0x2,%eax
f010db75:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010db7a:	8a 00                	mov    (%eax),%al
f010db7c:	84 c0                	test   %al,%al
f010db7e:	74 08                	je     f010db88 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010db80:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010db83:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010db86:	eb 09                	jmp    f010db91 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010db88:	ff 45 f8             	incl   -0x8(%ebp)
f010db8b:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)
f010db8f:	7e cf                	jle    f010db60 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010db91:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010db95:	75 07                	jne    f010db9e <allocate_semaphore_object+0x54>
	{
		return E_NO_SEMAPHORE ;
f010db97:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010db9c:	eb 40                	jmp    f010dbde <allocate_semaphore_object+0x94>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010db9e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dba1:	89 d0                	mov    %edx,%eax
f010dba3:	c1 e0 02             	shl    $0x2,%eax
f010dba6:	01 d0                	add    %edx,%eax
f010dba8:	01 c0                	add    %eax,%eax
f010dbaa:	01 d0                	add    %edx,%eax
f010dbac:	01 c0                	add    %eax,%eax
f010dbae:	01 d0                	add    %edx,%eax
f010dbb0:	c1 e0 02             	shl    $0x2,%eax
f010dbb3:	8d 90 e0 99 2b f0    	lea    -0xfd46620(%eax),%edx
f010dbb9:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbbc:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010dbbe:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dbc1:	89 d0                	mov    %edx,%eax
f010dbc3:	c1 e0 02             	shl    $0x2,%eax
f010dbc6:	01 d0                	add    %edx,%eax
f010dbc8:	01 c0                	add    %eax,%eax
f010dbca:	01 d0                	add    %edx,%eax
f010dbcc:	01 c0                	add    %eax,%eax
f010dbce:	01 d0                	add    %edx,%eax
f010dbd0:	c1 e0 02             	shl    $0x2,%eax
f010dbd3:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010dbd8:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010dbdb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010dbde:	c9                   	leave  
f010dbdf:	c3                   	ret    

f010dbe0 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010dbe0:	55                   	push   %ebp
f010dbe1:	89 e5                	mov    %esp,%ebp
f010dbe3:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010dbe6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010dbed:	eb 7a                	jmp    f010dc69 <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010dbef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dbf2:	89 d0                	mov    %edx,%eax
f010dbf4:	c1 e0 02             	shl    $0x2,%eax
f010dbf7:	01 d0                	add    %edx,%eax
f010dbf9:	01 c0                	add    %eax,%eax
f010dbfb:	01 d0                	add    %edx,%eax
f010dbfd:	01 c0                	add    %eax,%eax
f010dbff:	01 d0                	add    %edx,%eax
f010dc01:	c1 e0 02             	shl    $0x2,%eax
f010dc04:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010dc09:	8a 00                	mov    (%eax),%al
f010dc0b:	84 c0                	test   %al,%al
f010dc0d:	75 56                	jne    f010dc65 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010dc0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc12:	89 d0                	mov    %edx,%eax
f010dc14:	c1 e0 02             	shl    $0x2,%eax
f010dc17:	01 d0                	add    %edx,%eax
f010dc19:	01 c0                	add    %eax,%eax
f010dc1b:	01 d0                	add    %edx,%eax
f010dc1d:	01 c0                	add    %eax,%eax
f010dc1f:	01 d0                	add    %edx,%eax
f010dc21:	c1 e0 02             	shl    $0x2,%eax
f010dc24:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010dc29:	8b 00                	mov    (%eax),%eax
f010dc2b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010dc2e:	75 36                	jne    f010dc66 <get_semaphore_object_ID+0x86>
f010dc30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc33:	89 d0                	mov    %edx,%eax
f010dc35:	c1 e0 02             	shl    $0x2,%eax
f010dc38:	01 d0                	add    %edx,%eax
f010dc3a:	01 c0                	add    %eax,%eax
f010dc3c:	01 d0                	add    %edx,%eax
f010dc3e:	01 c0                	add    %eax,%eax
f010dc40:	01 d0                	add    %edx,%eax
f010dc42:	c1 e0 02             	shl    $0x2,%eax
f010dc45:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010dc4a:	83 c0 04             	add    $0x4,%eax
f010dc4d:	83 ec 08             	sub    $0x8,%esp
f010dc50:	50                   	push   %eax
f010dc51:	ff 75 0c             	pushl  0xc(%ebp)
f010dc54:	e8 4f 15 02 00       	call   f012f1a8 <strcmp>
f010dc59:	83 c4 10             	add    $0x10,%esp
f010dc5c:	85 c0                	test   %eax,%eax
f010dc5e:	75 06                	jne    f010dc66 <get_semaphore_object_ID+0x86>
		{
			return i;
f010dc60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc63:	eb 0f                	jmp    f010dc74 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010dc65:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010dc66:	ff 45 f4             	incl   -0xc(%ebp)
f010dc69:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010dc6d:	7e 80                	jle    f010dbef <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010dc6f:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010dc74:	c9                   	leave  
f010dc75:	c3                   	ret    

f010dc76 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010dc76:	55                   	push   %ebp
f010dc77:	89 e5                	mov    %esp,%ebp
f010dc79:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010dc7c:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010dc80:	76 0a                	jbe    f010dc8c <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010dc82:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010dc87:	e9 ac 00 00 00       	jmp    f010dd38 <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010dc8c:	8b 55 08             	mov    0x8(%ebp),%edx
f010dc8f:	89 d0                	mov    %edx,%eax
f010dc91:	c1 e0 02             	shl    $0x2,%eax
f010dc94:	01 d0                	add    %edx,%eax
f010dc96:	01 c0                	add    %eax,%eax
f010dc98:	01 d0                	add    %edx,%eax
f010dc9a:	01 c0                	add    %eax,%eax
f010dc9c:	01 d0                	add    %edx,%eax
f010dc9e:	c1 e0 02             	shl    $0x2,%eax
f010dca1:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010dca6:	83 ec 04             	sub    $0x4,%esp
f010dca9:	6a 5c                	push   $0x5c
f010dcab:	6a 00                	push   $0x0
f010dcad:	50                   	push   %eax
f010dcae:	e8 d7 15 02 00       	call   f012f28a <memset>
f010dcb3:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010dcb6:	8b 55 08             	mov    0x8(%ebp),%edx
f010dcb9:	89 d0                	mov    %edx,%eax
f010dcbb:	c1 e0 02             	shl    $0x2,%eax
f010dcbe:	01 d0                	add    %edx,%eax
f010dcc0:	01 c0                	add    %eax,%eax
f010dcc2:	01 d0                	add    %edx,%eax
f010dcc4:	01 c0                	add    %eax,%eax
f010dcc6:	01 d0                	add    %edx,%eax
f010dcc8:	c1 e0 02             	shl    $0x2,%eax
f010dccb:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010dcd0:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010dcd3:	8b 55 08             	mov    0x8(%ebp),%edx
f010dcd6:	89 d0                	mov    %edx,%eax
f010dcd8:	c1 e0 02             	shl    $0x2,%eax
f010dcdb:	01 d0                	add    %edx,%eax
f010dcdd:	01 c0                	add    %eax,%eax
f010dcdf:	01 d0                	add    %edx,%eax
f010dce1:	01 c0                	add    %eax,%eax
f010dce3:	01 d0                	add    %edx,%eax
f010dce5:	c1 e0 02             	shl    $0x2,%eax
f010dce8:	05 24 9a 2b f0       	add    $0xf02b9a24,%eax
f010dced:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010dcf3:	8b 55 08             	mov    0x8(%ebp),%edx
f010dcf6:	89 d0                	mov    %edx,%eax
f010dcf8:	c1 e0 02             	shl    $0x2,%eax
f010dcfb:	01 d0                	add    %edx,%eax
f010dcfd:	01 c0                	add    %eax,%eax
f010dcff:	01 d0                	add    %edx,%eax
f010dd01:	01 c0                	add    %eax,%eax
f010dd03:	01 d0                	add    %edx,%eax
f010dd05:	c1 e0 02             	shl    $0x2,%eax
f010dd08:	05 28 9a 2b f0       	add    $0xf02b9a28,%eax
f010dd0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010dd13:	8b 55 08             	mov    0x8(%ebp),%edx
f010dd16:	89 d0                	mov    %edx,%eax
f010dd18:	c1 e0 02             	shl    $0x2,%eax
f010dd1b:	01 d0                	add    %edx,%eax
f010dd1d:	01 c0                	add    %eax,%eax
f010dd1f:	01 d0                	add    %edx,%eax
f010dd21:	01 c0                	add    %eax,%eax
f010dd23:	01 d0                	add    %edx,%eax
f010dd25:	c1 e0 02             	shl    $0x2,%eax
f010dd28:	05 30 9a 2b f0       	add    $0xf02b9a30,%eax
f010dd2d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010dd33:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd38:	c9                   	leave  
f010dd39:	c3                   	ret    

f010dd3a <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010dd3a:	55                   	push   %ebp
f010dd3b:	89 e5                	mov    %esp,%ebp
f010dd3d:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010dd40:	83 ec 04             	sub    $0x4,%esp
f010dd43:	68 d4 3c 13 f0       	push   $0xf0133cd4
f010dd48:	68 95 00 00 00       	push   $0x95
f010dd4d:	68 02 3d 13 f0       	push   $0xf0133d02
f010dd52:	e8 59 24 ff ff       	call   f01001b0 <_panic>

f010dd57 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010dd57:	55                   	push   %ebp
f010dd58:	89 e5                	mov    %esp,%ebp
f010dd5a:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010dd5d:	83 ec 04             	sub    $0x4,%esp
f010dd60:	68 20 3d 13 f0       	push   $0xf0133d20
f010dd65:	68 9e 00 00 00       	push   $0x9e
f010dd6a:	68 02 3d 13 f0       	push   $0xf0133d02
f010dd6f:	e8 3c 24 ff ff       	call   f01001b0 <_panic>

f010dd74 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010dd74:	55                   	push   %ebp
f010dd75:	89 e5                	mov    %esp,%ebp
f010dd77:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010dd7a:	83 ec 04             	sub    $0x4,%esp
f010dd7d:	68 4c 3d 13 f0       	push   $0xf0133d4c
f010dd82:	68 a6 00 00 00       	push   $0xa6
f010dd87:	68 02 3d 13 f0       	push   $0xf0133d02
f010dd8c:	e8 1f 24 ff ff       	call   f01001b0 <_panic>

f010dd91 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010dd91:	55                   	push   %ebp
f010dd92:	89 e5                	mov    %esp,%ebp
f010dd94:	c7 05 18 be 2b f0 01 	movl   $0x1,0xf02bbe18
f010dd9b:	00 00 00 
f010dd9e:	90                   	nop
f010dd9f:	5d                   	pop    %ebp
f010dda0:	c3                   	ret    

f010dda1 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010dda1:	55                   	push   %ebp
f010dda2:	89 e5                	mov    %esp,%ebp
f010dda4:	c7 05 18 be 2b f0 02 	movl   $0x2,0xf02bbe18
f010ddab:	00 00 00 
f010ddae:	90                   	nop
f010ddaf:	5d                   	pop    %ebp
f010ddb0:	c3                   	ret    

f010ddb1 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010ddb1:	55                   	push   %ebp
f010ddb2:	89 e5                	mov    %esp,%ebp
f010ddb4:	c7 05 18 be 2b f0 03 	movl   $0x3,0xf02bbe18
f010ddbb:	00 00 00 
f010ddbe:	90                   	nop
f010ddbf:	5d                   	pop    %ebp
f010ddc0:	c3                   	ret    

f010ddc1 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010ddc1:	55                   	push   %ebp
f010ddc2:	89 e5                	mov    %esp,%ebp
f010ddc4:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f010ddc9:	83 f8 01             	cmp    $0x1,%eax
f010ddcc:	75 04                	jne    f010ddd2 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010ddce:	b0 01                	mov    $0x1,%al
f010ddd0:	eb 02                	jmp    f010ddd4 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010ddd2:	b0 00                	mov    $0x0,%al
f010ddd4:	5d                   	pop    %ebp
f010ddd5:	c3                   	ret    

f010ddd6 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010ddd6:	55                   	push   %ebp
f010ddd7:	89 e5                	mov    %esp,%ebp
f010ddd9:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f010ddde:	83 f8 02             	cmp    $0x2,%eax
f010dde1:	75 04                	jne    f010dde7 <isKHeapPlacementStrategyBESTFIT+0x11>
f010dde3:	b0 01                	mov    $0x1,%al
f010dde5:	eb 02                	jmp    f010dde9 <isKHeapPlacementStrategyBESTFIT+0x13>
f010dde7:	b0 00                	mov    $0x0,%al
f010dde9:	5d                   	pop    %ebp
f010ddea:	c3                   	ret    

f010ddeb <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010ddeb:	55                   	push   %ebp
f010ddec:	89 e5                	mov    %esp,%ebp
f010ddee:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f010ddf3:	83 f8 03             	cmp    $0x3,%eax
f010ddf6:	75 04                	jne    f010ddfc <isKHeapPlacementStrategyNEXTFIT+0x11>
f010ddf8:	b0 01                	mov    $0x1,%al
f010ddfa:	eb 02                	jmp    f010ddfe <isKHeapPlacementStrategyNEXTFIT+0x13>
f010ddfc:	b0 00                	mov    $0x0,%al
f010ddfe:	5d                   	pop    %ebp
f010ddff:	c3                   	ret    

f010de00 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010de00:	55                   	push   %ebp
f010de01:	89 e5                	mov    %esp,%ebp
f010de03:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010de06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010de0d:	eb 26                	jmp    f010de35 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010de0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010de19:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de1c:	01 c2                	add    %eax,%edx
f010de1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de21:	40                   	inc    %eax
f010de22:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010de29:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de2c:	01 c8                	add    %ecx,%eax
f010de2e:	8b 00                	mov    (%eax),%eax
f010de30:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010de32:	ff 45 f4             	incl   -0xc(%ebp)
f010de35:	8b 45 08             	mov    0x8(%ebp),%eax
f010de38:	48                   	dec    %eax
f010de39:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010de3c:	7f d1                	jg     f010de0f <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010de3e:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010de41:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010de48:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010de4f:	eb 35                	jmp    f010de86 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010de51:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010de54:	89 d0                	mov    %edx,%eax
f010de56:	01 c0                	add    %eax,%eax
f010de58:	01 d0                	add    %edx,%eax
f010de5a:	c1 e0 02             	shl    $0x2,%eax
f010de5d:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f010de62:	8b 10                	mov    (%eax),%edx
f010de64:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de67:	8b 00                	mov    (%eax),%eax
f010de69:	83 ec 08             	sub    $0x8,%esp
f010de6c:	52                   	push   %edx
f010de6d:	50                   	push   %eax
f010de6e:	e8 35 13 02 00       	call   f012f1a8 <strcmp>
f010de73:	83 c4 10             	add    $0x10,%esp
f010de76:	85 c0                	test   %eax,%eax
f010de78:	75 09                	jne    f010de83 <tst_handler+0x83>
		{
			test_found = 1;
f010de7a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010de81:	eb 0f                	jmp    f010de92 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010de83:	ff 45 ec             	incl   -0x14(%ebp)
f010de86:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010de89:	a1 1c eb 18 f0       	mov    0xf018eb1c,%eax
f010de8e:	39 c2                	cmp    %eax,%edx
f010de90:	72 bf                	jb     f010de51 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010de92:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010de96:	74 29                	je     f010dec1 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010de98:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010de9b:	89 d0                	mov    %edx,%eax
f010de9d:	01 c0                	add    %eax,%eax
f010de9f:	01 d0                	add    %edx,%eax
f010dea1:	c1 e0 02             	shl    $0x2,%eax
f010dea4:	05 88 ea 18 f0       	add    $0xf018ea88,%eax
f010dea9:	8b 00                	mov    (%eax),%eax
f010deab:	83 ec 08             	sub    $0x8,%esp
f010deae:	ff 75 0c             	pushl  0xc(%ebp)
f010deb1:	ff 75 08             	pushl  0x8(%ebp)
f010deb4:	ff d0                	call   *%eax
f010deb6:	83 c4 10             	add    $0x10,%esp
f010deb9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010debc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010debf:	eb 1b                	jmp    f010dedc <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010dec1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dec4:	8b 00                	mov    (%eax),%eax
f010dec6:	83 ec 08             	sub    $0x8,%esp
f010dec9:	50                   	push   %eax
f010deca:	68 00 40 13 f0       	push   $0xf0134000
f010decf:	e8 5d 2f ff ff       	call   f0100e31 <cprintf>
f010ded4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ded7:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010dedc:	c9                   	leave  
f010dedd:	c3                   	ret    

f010dede <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010dede:	55                   	push   %ebp
f010dedf:	89 e5                	mov    %esp,%ebp
f010dee1:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010dee4:	e8 3c 71 01 00       	call   f0125025 <test_three_creation_functions>
	return 0;
f010dee9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010deee:	c9                   	leave  
f010deef:	c3                   	ret    

f010def0 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010def0:	55                   	push   %ebp
f010def1:	89 e5                	mov    %esp,%ebp
f010def3:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010def6:	e8 fe 92 00 00       	call   f01171f9 <test_priority_normal_and_higher>
	return 0;
f010defb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010df00:	c9                   	leave  
f010df01:	c3                   	ret    

f010df02 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010df02:	55                   	push   %ebp
f010df03:	89 e5                	mov    %esp,%ebp
f010df05:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010df08:	e8 56 9d 00 00       	call   f0117c63 <test_priority_normal_and_lower>
	return 0;
f010df0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010df12:	c9                   	leave  
f010df13:	c3                   	ret    

f010df14 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010df14:	55                   	push   %ebp
f010df15:	89 e5                	mov    %esp,%ebp
f010df17:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010df1a:	e8 1a 73 01 00       	call   f0125239 <test_kfreeall>
	return 0;
f010df1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010df24:	c9                   	leave  
f010df25:	c3                   	ret    

f010df26 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010df26:	55                   	push   %ebp
f010df27:	89 e5                	mov    %esp,%ebp
f010df29:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010df2c:	e8 a2 87 01 00       	call   f01266d3 <test_kexpand>
	return 0;
f010df31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010df36:	c9                   	leave  
f010df37:	c3                   	ret    

f010df38 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010df38:	55                   	push   %ebp
f010df39:	89 e5                	mov    %esp,%ebp
f010df3b:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010df3e:	e8 61 93 01 00       	call   f01272a4 <test_kshrink>
	return 0;
f010df43:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010df48:	c9                   	leave  
f010df49:	c3                   	ret    

f010df4a <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010df4a:	55                   	push   %ebp
f010df4b:	89 e5                	mov    %esp,%ebp
f010df4d:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010df50:	e8 56 a0 01 00       	call   f0127fab <test_kfreelast>
	return 0;
f010df55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010df5a:	c9                   	leave  
f010df5b:	c3                   	ret    

f010df5c <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010df5c:	55                   	push   %ebp
f010df5d:	89 e5                	mov    %esp,%ebp
f010df5f:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010df62:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df65:	83 c0 04             	add    $0x4,%eax
f010df68:	8b 00                	mov    (%eax),%eax
f010df6a:	83 ec 04             	sub    $0x4,%esp
f010df6d:	6a 0a                	push   $0xa
f010df6f:	6a 00                	push   $0x0
f010df71:	50                   	push   %eax
f010df72:	e8 85 14 02 00       	call   f012f3fc <strtol>
f010df77:	83 c4 10             	add    $0x10,%esp
f010df7a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010df7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010df84:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010df8b:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f010df90:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010df93:	eb 3b                	jmp    f010dfd0 <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010df95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010df98:	83 c0 5c             	add    $0x5c,%eax
f010df9b:	83 ec 08             	sub    $0x8,%esp
f010df9e:	68 13 40 13 f0       	push   $0xf0134013
f010dfa3:	50                   	push   %eax
f010dfa4:	e8 ff 11 02 00       	call   f012f1a8 <strcmp>
f010dfa9:	83 c4 10             	add    $0x10,%esp
f010dfac:	85 c0                	test   %eax,%eax
f010dfae:	75 12                	jne    f010dfc2 <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010dfb0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010dfb4:	74 07                	je     f010dfbd <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010dfb6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010dfbd:	ff 45 f4             	incl   -0xc(%ebp)
f010dfc0:	eb 06                	jmp    f010dfc8 <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010dfc2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010dfc6:	74 31                	je     f010dff9 <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010dfc8:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f010dfcd:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dfd0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010dfd4:	74 08                	je     f010dfde <tst_sc_MLFQ+0x82>
f010dfd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dfd9:	8b 40 44             	mov    0x44(%eax),%eax
f010dfdc:	eb 05                	jmp    f010dfe3 <tst_sc_MLFQ+0x87>
f010dfde:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfe3:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f010dfe8:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f010dfed:	85 c0                	test   %eax,%eax
f010dfef:	75 a4                	jne    f010df95 <tst_sc_MLFQ+0x39>
f010dff1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010dff5:	75 9e                	jne    f010df95 <tst_sc_MLFQ+0x39>
f010dff7:	eb 01                	jmp    f010dffa <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010dff9:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010dffa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dffd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010e000:	75 12                	jne    f010e014 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010e002:	83 ec 0c             	sub    $0xc,%esp
f010e005:	68 1c 40 13 f0       	push   $0xf013401c
f010e00a:	e8 22 2e ff ff       	call   f0100e31 <cprintf>
f010e00f:	83 c4 10             	add    $0x10,%esp
f010e012:	eb 17                	jmp    f010e02b <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010e014:	83 ec 04             	sub    $0x4,%esp
f010e017:	68 55 40 13 f0       	push   $0xf0134055
f010e01c:	68 94 00 00 00       	push   $0x94
f010e021:	68 6b 40 13 f0       	push   $0xf013406b
f010e026:	e8 85 21 ff ff       	call   f01001b0 <_panic>
	}
	return 0;
f010e02b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e030:	c9                   	leave  
f010e031:	c3                   	ret    

f010e032 <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010e032:	55                   	push   %ebp
f010e033:	89 e5                	mov    %esp,%ebp
f010e035:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010e038:	e8 7f 3e 00 00       	call   f0111ebc <TestAutoCompleteCommand>
f010e03d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010e040:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e045:	c9                   	leave  
f010e046:	c3                   	ret    

f010e047 <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010e047:	55                   	push   %ebp
f010e048:	89 e5                	mov    %esp,%ebp
f010e04a:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e04d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e051:	74 1a                	je     f010e06d <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010e053:	83 ec 0c             	sub    $0xc,%esp
f010e056:	68 84 40 13 f0       	push   $0xf0134084
f010e05b:	e8 d1 2d ff ff       	call   f0100e31 <cprintf>
f010e060:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e063:	b8 00 00 00 00       	mov    $0x0,%eax
f010e068:	e9 2f 01 00 00       	jmp    f010e19c <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010e06d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e070:	83 c0 04             	add    $0x4,%eax
f010e073:	8b 00                	mov    (%eax),%eax
f010e075:	83 ec 08             	sub    $0x8,%esp
f010e078:	68 c1 40 13 f0       	push   $0xf01340c1
f010e07d:	50                   	push   %eax
f010e07e:	e8 25 11 02 00       	call   f012f1a8 <strcmp>
f010e083:	83 c4 10             	add    $0x10,%esp
f010e086:	85 c0                	test   %eax,%eax
f010e088:	75 0a                	jne    f010e094 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010e08a:	e8 80 06 00 00       	call   f010e70f <test_initialize_dynamic_allocator>
f010e08f:	e9 03 01 00 00       	jmp    f010e197 <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010e094:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e097:	83 c0 04             	add    $0x4,%eax
f010e09a:	8b 00                	mov    (%eax),%eax
f010e09c:	83 ec 08             	sub    $0x8,%esp
f010e09f:	68 c6 40 13 f0       	push   $0xf01340c6
f010e0a4:	50                   	push   %eax
f010e0a5:	e8 fe 10 02 00       	call   f012f1a8 <strcmp>
f010e0aa:	83 c4 10             	add    $0x10,%esp
f010e0ad:	85 c0                	test   %eax,%eax
f010e0af:	75 0a                	jne    f010e0bb <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010e0b1:	e8 a1 0a 00 00       	call   f010eb57 <test_alloc_block_FF>
f010e0b6:	e9 dc 00 00 00       	jmp    f010e197 <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010e0bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0be:	83 c0 04             	add    $0x4,%eax
f010e0c1:	8b 00                	mov    (%eax),%eax
f010e0c3:	83 ec 08             	sub    $0x8,%esp
f010e0c6:	68 ce 40 13 f0       	push   $0xf01340ce
f010e0cb:	50                   	push   %eax
f010e0cc:	e8 d7 10 02 00       	call   f012f1a8 <strcmp>
f010e0d1:	83 c4 10             	add    $0x10,%esp
f010e0d4:	85 c0                	test   %eax,%eax
f010e0d6:	75 0a                	jne    f010e0e2 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010e0d8:	e8 84 0e 00 00       	call   f010ef61 <test_alloc_block_BF>
f010e0dd:	e9 b5 00 00 00       	jmp    f010e197 <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010e0e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0e5:	83 c0 04             	add    $0x4,%eax
f010e0e8:	8b 00                	mov    (%eax),%eax
f010e0ea:	83 ec 08             	sub    $0x8,%esp
f010e0ed:	68 d6 40 13 f0       	push   $0xf01340d6
f010e0f2:	50                   	push   %eax
f010e0f3:	e8 b0 10 02 00       	call   f012f1a8 <strcmp>
f010e0f8:	83 c4 10             	add    $0x10,%esp
f010e0fb:	85 c0                	test   %eax,%eax
f010e0fd:	75 0a                	jne    f010e109 <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010e0ff:	e8 b3 12 00 00       	call   f010f3b7 <test_alloc_block_NF>
f010e104:	e9 8e 00 00 00       	jmp    f010e197 <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010e109:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e10c:	83 c0 04             	add    $0x4,%eax
f010e10f:	8b 00                	mov    (%eax),%eax
f010e111:	83 ec 08             	sub    $0x8,%esp
f010e114:	68 de 40 13 f0       	push   $0xf01340de
f010e119:	50                   	push   %eax
f010e11a:	e8 89 10 02 00       	call   f012f1a8 <strcmp>
f010e11f:	83 c4 10             	add    $0x10,%esp
f010e122:	85 c0                	test   %eax,%eax
f010e124:	75 07                	jne    f010e12d <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010e126:	e8 92 12 00 00       	call   f010f3bd <test_free_block_FF>
f010e12b:	eb 6a                	jmp    f010e197 <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010e12d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e130:	83 c0 04             	add    $0x4,%eax
f010e133:	8b 00                	mov    (%eax),%eax
f010e135:	83 ec 08             	sub    $0x8,%esp
f010e138:	68 e5 40 13 f0       	push   $0xf01340e5
f010e13d:	50                   	push   %eax
f010e13e:	e8 65 10 02 00       	call   f012f1a8 <strcmp>
f010e143:	83 c4 10             	add    $0x10,%esp
f010e146:	85 c0                	test   %eax,%eax
f010e148:	75 07                	jne    f010e151 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010e14a:	e8 d3 20 00 00       	call   f0110222 <test_free_block_BF>
f010e14f:	eb 46                	jmp    f010e197 <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010e151:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e154:	83 c0 04             	add    $0x4,%eax
f010e157:	8b 00                	mov    (%eax),%eax
f010e159:	83 ec 08             	sub    $0x8,%esp
f010e15c:	68 ec 40 13 f0       	push   $0xf01340ec
f010e161:	50                   	push   %eax
f010e162:	e8 41 10 02 00       	call   f012f1a8 <strcmp>
f010e167:	83 c4 10             	add    $0x10,%esp
f010e16a:	85 c0                	test   %eax,%eax
f010e16c:	75 07                	jne    f010e175 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010e16e:	e8 c1 2e 00 00       	call   f0111034 <test_free_block_NF>
f010e173:	eb 22                	jmp    f010e197 <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010e175:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e178:	83 c0 04             	add    $0x4,%eax
f010e17b:	8b 00                	mov    (%eax),%eax
f010e17d:	83 ec 08             	sub    $0x8,%esp
f010e180:	68 f3 40 13 f0       	push   $0xf01340f3
f010e185:	50                   	push   %eax
f010e186:	e8 1d 10 02 00       	call   f012f1a8 <strcmp>
f010e18b:	83 c4 10             	add    $0x10,%esp
f010e18e:	85 c0                	test   %eax,%eax
f010e190:	75 05                	jne    f010e197 <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010e192:	e8 a6 2f 00 00       	call   f011113d <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010e197:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e19c:	c9                   	leave  
f010e19d:	c3                   	ret    

f010e19e <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010e19e:	55                   	push   %ebp
f010e19f:	89 e5                	mov    %esp,%ebp
f010e1a1:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e1a4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e1a8:	74 1a                	je     f010e1c4 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010e1aa:	83 ec 0c             	sub    $0xc,%esp
f010e1ad:	68 00 41 13 f0       	push   $0xf0134100
f010e1b2:	e8 7a 2c ff ff       	call   f0100e31 <cprintf>
f010e1b7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e1ba:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1bf:	e9 e1 00 00 00       	jmp    f010e2a5 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010e1c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1c7:	83 c0 04             	add    $0x4,%eax
f010e1ca:	8b 00                	mov    (%eax),%eax
f010e1cc:	83 ec 08             	sub    $0x8,%esp
f010e1cf:	68 39 41 13 f0       	push   $0xf0134139
f010e1d4:	50                   	push   %eax
f010e1d5:	e8 ce 0f 02 00       	call   f012f1a8 <strcmp>
f010e1da:	83 c4 10             	add    $0x10,%esp
f010e1dd:	85 c0                	test   %eax,%eax
f010e1df:	75 0a                	jne    f010e1eb <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010e1e1:	e8 dc 43 00 00       	call   f01125c2 <test_cut_paste_pages>
f010e1e6:	e9 b5 00 00 00       	jmp    f010e2a0 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010e1eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1ee:	83 c0 04             	add    $0x4,%eax
f010e1f1:	8b 00                	mov    (%eax),%eax
f010e1f3:	83 ec 08             	sub    $0x8,%esp
f010e1f6:	68 42 41 13 f0       	push   $0xf0134142
f010e1fb:	50                   	push   %eax
f010e1fc:	e8 a7 0f 02 00       	call   f012f1a8 <strcmp>
f010e201:	83 c4 10             	add    $0x10,%esp
f010e204:	85 c0                	test   %eax,%eax
f010e206:	75 0a                	jne    f010e212 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010e208:	e8 06 4e 00 00       	call   f0113013 <test_copy_paste_chunk>
f010e20d:	e9 8e 00 00 00       	jmp    f010e2a0 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010e212:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e215:	83 c0 04             	add    $0x4,%eax
f010e218:	8b 00                	mov    (%eax),%eax
f010e21a:	83 ec 08             	sub    $0x8,%esp
f010e21d:	68 4c 41 13 f0       	push   $0xf013414c
f010e222:	50                   	push   %eax
f010e223:	e8 80 0f 02 00       	call   f012f1a8 <strcmp>
f010e228:	83 c4 10             	add    $0x10,%esp
f010e22b:	85 c0                	test   %eax,%eax
f010e22d:	75 07                	jne    f010e236 <tst_chunks+0x98>
	{
		test_share_chunk();
f010e22f:	e8 e3 5e 00 00       	call   f0114117 <test_share_chunk>
f010e234:	eb 6a                	jmp    f010e2a0 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010e236:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e239:	83 c0 04             	add    $0x4,%eax
f010e23c:	8b 00                	mov    (%eax),%eax
f010e23e:	83 ec 08             	sub    $0x8,%esp
f010e241:	68 52 41 13 f0       	push   $0xf0134152
f010e246:	50                   	push   %eax
f010e247:	e8 5c 0f 02 00       	call   f012f1a8 <strcmp>
f010e24c:	83 c4 10             	add    $0x10,%esp
f010e24f:	85 c0                	test   %eax,%eax
f010e251:	75 07                	jne    f010e25a <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010e253:	e8 ed 68 00 00       	call   f0114b45 <test_allocate_chunk>
f010e258:	eb 46                	jmp    f010e2a0 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010e25a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e25d:	83 c0 04             	add    $0x4,%eax
f010e260:	8b 00                	mov    (%eax),%eax
f010e262:	83 ec 08             	sub    $0x8,%esp
f010e265:	68 5b 41 13 f0       	push   $0xf013415b
f010e26a:	50                   	push   %eax
f010e26b:	e8 38 0f 02 00       	call   f012f1a8 <strcmp>
f010e270:	83 c4 10             	add    $0x10,%esp
f010e273:	85 c0                	test   %eax,%eax
f010e275:	75 07                	jne    f010e27e <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010e277:	e8 d6 71 00 00       	call   f0115452 <test_calculate_required_frames>
f010e27c:	eb 22                	jmp    f010e2a0 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010e27e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e281:	83 c0 04             	add    $0x4,%eax
f010e284:	8b 00                	mov    (%eax),%eax
f010e286:	83 ec 08             	sub    $0x8,%esp
f010e289:	68 6a 41 13 f0       	push   $0xf013416a
f010e28e:	50                   	push   %eax
f010e28f:	e8 14 0f 02 00       	call   f012f1a8 <strcmp>
f010e294:	83 c4 10             	add    $0x10,%esp
f010e297:	85 c0                	test   %eax,%eax
f010e299:	75 05                	jne    f010e2a0 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010e29b:	e8 2c 7a 00 00       	call   f0115ccc <test_calculate_allocated_space>
	}
	return 0;
f010e2a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e2a5:	c9                   	leave  
f010e2a6:	c3                   	ret    

f010e2a7 <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010e2a7:	55                   	push   %ebp
f010e2a8:	89 e5                	mov    %esp,%ebp
f010e2aa:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e2ad:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e2b1:	74 1a                	je     f010e2cd <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010e2b3:	83 ec 0c             	sub    $0xc,%esp
f010e2b6:	68 7c 41 13 f0       	push   $0xf013417c
f010e2bb:	e8 71 2b ff ff       	call   f0100e31 <cprintf>
f010e2c0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e2c3:	b8 00 00 00 00       	mov    $0x0,%eax
f010e2c8:	e9 ba 00 00 00       	jmp    f010e387 <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010e2cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2d0:	83 c0 04             	add    $0x4,%eax
f010e2d3:	8b 00                	mov    (%eax),%eax
f010e2d5:	83 ec 08             	sub    $0x8,%esp
f010e2d8:	68 b2 41 13 f0       	push   $0xf01341b2
f010e2dd:	50                   	push   %eax
f010e2de:	e8 c5 0e 02 00       	call   f012f1a8 <strcmp>
f010e2e3:	83 c4 10             	add    $0x10,%esp
f010e2e6:	85 c0                	test   %eax,%eax
f010e2e8:	75 0a                	jne    f010e2f4 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010e2ea:	e8 52 3d 00 00       	call   f0112041 <test_pt_set_page_permissions>
f010e2ef:	e9 8e 00 00 00       	jmp    f010e382 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010e2f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2f7:	83 c0 04             	add    $0x4,%eax
f010e2fa:	8b 00                	mov    (%eax),%eax
f010e2fc:	83 ec 08             	sub    $0x8,%esp
f010e2ff:	68 ba 41 13 f0       	push   $0xf01341ba
f010e304:	50                   	push   %eax
f010e305:	e8 9e 0e 02 00       	call   f012f1a8 <strcmp>
f010e30a:	83 c4 10             	add    $0x10,%esp
f010e30d:	85 c0                	test   %eax,%eax
f010e30f:	75 07                	jne    f010e318 <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010e311:	e8 8e 3f 00 00       	call   f01122a4 <test_pt_set_page_permissions_invalid_va>
f010e316:	eb 6a                	jmp    f010e382 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010e318:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e31b:	83 c0 04             	add    $0x4,%eax
f010e31e:	8b 00                	mov    (%eax),%eax
f010e320:	83 ec 08             	sub    $0x8,%esp
f010e323:	68 c2 41 13 f0       	push   $0xf01341c2
f010e328:	50                   	push   %eax
f010e329:	e8 7a 0e 02 00       	call   f012f1a8 <strcmp>
f010e32e:	83 c4 10             	add    $0x10,%esp
f010e331:	85 c0                	test   %eax,%eax
f010e333:	75 07                	jne    f010e33c <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010e335:	e8 b3 3f 00 00       	call   f01122ed <test_pt_get_page_permissions>
f010e33a:	eb 46                	jmp    f010e382 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010e33c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e33f:	83 c0 04             	add    $0x4,%eax
f010e342:	8b 00                	mov    (%eax),%eax
f010e344:	83 ec 08             	sub    $0x8,%esp
f010e347:	68 ca 41 13 f0       	push   $0xf01341ca
f010e34c:	50                   	push   %eax
f010e34d:	e8 56 0e 02 00       	call   f012f1a8 <strcmp>
f010e352:	83 c4 10             	add    $0x10,%esp
f010e355:	85 c0                	test   %eax,%eax
f010e357:	75 07                	jne    f010e360 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010e359:	e8 d3 40 00 00       	call   f0112431 <test_pt_clear_page_table_entry>
f010e35e:	eb 22                	jmp    f010e382 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010e360:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e363:	83 c0 04             	add    $0x4,%eax
f010e366:	8b 00                	mov    (%eax),%eax
f010e368:	83 ec 08             	sub    $0x8,%esp
f010e36b:	68 d1 41 13 f0       	push   $0xf01341d1
f010e370:	50                   	push   %eax
f010e371:	e8 32 0e 02 00       	call   f012f1a8 <strcmp>
f010e376:	83 c4 10             	add    $0x10,%esp
f010e379:	85 c0                	test   %eax,%eax
f010e37b:	75 05                	jne    f010e382 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010e37d:	e8 08 42 00 00       	call   f011258a <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010e382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e387:	c9                   	leave  
f010e388:	c3                   	ret    

f010e389 <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010e389:	55                   	push   %ebp
f010e38a:	89 e5                	mov    %esp,%ebp
f010e38c:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010e38f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e392:	83 c0 08             	add    $0x8,%eax
f010e395:	8b 00                	mov    (%eax),%eax
f010e397:	83 ec 08             	sub    $0x8,%esp
f010e39a:	68 d8 41 13 f0       	push   $0xf01341d8
f010e39f:	50                   	push   %eax
f010e3a0:	e8 03 0e 02 00       	call   f012f1a8 <strcmp>
f010e3a5:	83 c4 10             	add    $0x10,%esp
f010e3a8:	85 c0                	test   %eax,%eax
f010e3aa:	75 20                	jne    f010e3cc <tst_kheap+0x43>
f010e3ac:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010e3b0:	74 1a                	je     f010e3cc <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010e3b2:	83 ec 0c             	sub    $0xc,%esp
f010e3b5:	68 e0 41 13 f0       	push   $0xf01341e0
f010e3ba:	e8 72 2a ff ff       	call   f0100e31 <cprintf>
f010e3bf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e3c2:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3c7:	e9 41 03 00 00       	jmp    f010e70d <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010e3cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3cf:	83 c0 08             	add    $0x8,%eax
f010e3d2:	8b 00                	mov    (%eax),%eax
f010e3d4:	83 ec 08             	sub    $0x8,%esp
f010e3d7:	68 d8 41 13 f0       	push   $0xf01341d8
f010e3dc:	50                   	push   %eax
f010e3dd:	e8 c6 0d 02 00       	call   f012f1a8 <strcmp>
f010e3e2:	83 c4 10             	add    $0x10,%esp
f010e3e5:	85 c0                	test   %eax,%eax
f010e3e7:	74 20                	je     f010e409 <tst_kheap+0x80>
f010e3e9:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010e3ed:	74 1a                	je     f010e409 <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010e3ef:	83 ec 0c             	sub    $0xc,%esp
f010e3f2:	68 30 42 13 f0       	push   $0xf0134230
f010e3f7:	e8 35 2a ff ff       	call   f0100e31 <cprintf>
f010e3fc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e3ff:	b8 00 00 00 00       	mov    $0x0,%eax
f010e404:	e9 04 03 00 00       	jmp    f010e70d <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010e409:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e40c:	83 c0 04             	add    $0x4,%eax
f010e40f:	8b 00                	mov    (%eax),%eax
f010e411:	83 ec 08             	sub    $0x8,%esp
f010e414:	68 75 42 13 f0       	push   $0xf0134275
f010e419:	50                   	push   %eax
f010e41a:	e8 89 0d 02 00       	call   f012f1a8 <strcmp>
f010e41f:	83 c4 10             	add    $0x10,%esp
f010e422:	85 c0                	test   %eax,%eax
f010e424:	74 1d                	je     f010e443 <tst_kheap+0xba>
f010e426:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e429:	83 c0 04             	add    $0x4,%eax
f010e42c:	8b 00                	mov    (%eax),%eax
f010e42e:	83 ec 08             	sub    $0x8,%esp
f010e431:	68 78 42 13 f0       	push   $0xf0134278
f010e436:	50                   	push   %eax
f010e437:	e8 6c 0d 02 00       	call   f012f1a8 <strcmp>
f010e43c:	83 c4 10             	add    $0x10,%esp
f010e43f:	85 c0                	test   %eax,%eax
f010e441:	75 1a                	jne    f010e45d <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010e443:	e8 49 f9 ff ff       	call   f010dd91 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010e448:	83 ec 0c             	sub    $0xc,%esp
f010e44b:	68 7c 42 13 f0       	push   $0xf013427c
f010e450:	e8 dc 29 ff ff       	call   f0100e31 <cprintf>
f010e455:	83 c4 10             	add    $0x10,%esp
f010e458:	e9 a0 00 00 00       	jmp    f010e4fd <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010e45d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e460:	83 c0 04             	add    $0x4,%eax
f010e463:	8b 00                	mov    (%eax),%eax
f010e465:	83 ec 08             	sub    $0x8,%esp
f010e468:	68 a9 42 13 f0       	push   $0xf01342a9
f010e46d:	50                   	push   %eax
f010e46e:	e8 35 0d 02 00       	call   f012f1a8 <strcmp>
f010e473:	83 c4 10             	add    $0x10,%esp
f010e476:	85 c0                	test   %eax,%eax
f010e478:	74 1d                	je     f010e497 <tst_kheap+0x10e>
f010e47a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e47d:	83 c0 04             	add    $0x4,%eax
f010e480:	8b 00                	mov    (%eax),%eax
f010e482:	83 ec 08             	sub    $0x8,%esp
f010e485:	68 ac 42 13 f0       	push   $0xf01342ac
f010e48a:	50                   	push   %eax
f010e48b:	e8 18 0d 02 00       	call   f012f1a8 <strcmp>
f010e490:	83 c4 10             	add    $0x10,%esp
f010e493:	85 c0                	test   %eax,%eax
f010e495:	75 17                	jne    f010e4ae <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010e497:	e8 05 f9 ff ff       	call   f010dda1 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010e49c:	83 ec 0c             	sub    $0xc,%esp
f010e49f:	68 b0 42 13 f0       	push   $0xf01342b0
f010e4a4:	e8 88 29 ff ff       	call   f0100e31 <cprintf>
f010e4a9:	83 c4 10             	add    $0x10,%esp
f010e4ac:	eb 4f                	jmp    f010e4fd <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010e4ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4b1:	83 c0 04             	add    $0x4,%eax
f010e4b4:	8b 00                	mov    (%eax),%eax
f010e4b6:	83 ec 08             	sub    $0x8,%esp
f010e4b9:	68 dc 42 13 f0       	push   $0xf01342dc
f010e4be:	50                   	push   %eax
f010e4bf:	e8 e4 0c 02 00       	call   f012f1a8 <strcmp>
f010e4c4:	83 c4 10             	add    $0x10,%esp
f010e4c7:	85 c0                	test   %eax,%eax
f010e4c9:	74 1d                	je     f010e4e8 <tst_kheap+0x15f>
f010e4cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4ce:	83 c0 04             	add    $0x4,%eax
f010e4d1:	8b 00                	mov    (%eax),%eax
f010e4d3:	83 ec 08             	sub    $0x8,%esp
f010e4d6:	68 df 42 13 f0       	push   $0xf01342df
f010e4db:	50                   	push   %eax
f010e4dc:	e8 c7 0c 02 00       	call   f012f1a8 <strcmp>
f010e4e1:	83 c4 10             	add    $0x10,%esp
f010e4e4:	85 c0                	test   %eax,%eax
f010e4e6:	75 15                	jne    f010e4fd <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010e4e8:	e8 c4 f8 ff ff       	call   f010ddb1 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010e4ed:	83 ec 0c             	sub    $0xc,%esp
f010e4f0:	68 e4 42 13 f0       	push   $0xf01342e4
f010e4f5:	e8 37 29 ff ff       	call   f0100e31 <cprintf>
f010e4fa:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010e4fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e500:	83 c0 08             	add    $0x8,%eax
f010e503:	8b 00                	mov    (%eax),%eax
f010e505:	83 ec 08             	sub    $0x8,%esp
f010e508:	68 d8 41 13 f0       	push   $0xf01341d8
f010e50d:	50                   	push   %eax
f010e50e:	e8 95 0c 02 00       	call   f012f1a8 <strcmp>
f010e513:	83 c4 10             	add    $0x10,%esp
f010e516:	85 c0                	test   %eax,%eax
f010e518:	0f 85 13 01 00 00    	jne    f010e631 <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010e51e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e521:	83 c0 0c             	add    $0xc,%eax
f010e524:	8b 00                	mov    (%eax),%eax
f010e526:	83 ec 04             	sub    $0x4,%esp
f010e529:	6a 0a                	push   $0xa
f010e52b:	6a 00                	push   $0x0
f010e52d:	50                   	push   %eax
f010e52e:	e8 c9 0e 02 00       	call   f012f3fc <strtol>
f010e533:	83 c4 10             	add    $0x10,%esp
f010e536:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010e539:	e8 83 f8 ff ff       	call   f010ddc1 <isKHeapPlacementStrategyFIRSTFIT>
f010e53e:	84 c0                	test   %al,%al
f010e540:	74 54                	je     f010e596 <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010e542:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e546:	75 1a                	jne    f010e562 <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010e548:	83 ec 0c             	sub    $0xc,%esp
f010e54b:	68 10 43 13 f0       	push   $0xf0134310
f010e550:	e8 dc 28 ff ff       	call   f0100e31 <cprintf>
f010e555:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e558:	b8 00 00 00 00       	mov    $0x0,%eax
f010e55d:	e9 ab 01 00 00       	jmp    f010e70d <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010e562:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e566:	75 0a                	jne    f010e572 <tst_kheap+0x1e9>
				test_kmalloc();
f010e568:	e8 58 a1 00 00       	call   f01186c5 <test_kmalloc>
f010e56d:	e9 b5 00 00 00       	jmp    f010e627 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e572:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e576:	75 0a                	jne    f010e582 <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010e578:	e8 95 e3 00 00       	call   f011c912 <test_kmalloc_firstfit1>
f010e57d:	e9 a5 00 00 00       	jmp    f010e627 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e582:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e586:	0f 85 9b 00 00 00    	jne    f010e627 <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010e58c:	e8 2f f4 00 00       	call   f011d9c0 <test_kmalloc_firstfit2>
f010e591:	e9 91 00 00 00       	jmp    f010e627 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010e596:	e8 3b f8 ff ff       	call   f010ddd6 <isKHeapPlacementStrategyBESTFIT>
f010e59b:	84 c0                	test   %al,%al
f010e59d:	74 47                	je     f010e5e6 <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010e59f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e5a3:	75 1a                	jne    f010e5bf <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010e5a5:	83 ec 0c             	sub    $0xc,%esp
f010e5a8:	68 60 43 13 f0       	push   $0xf0134360
f010e5ad:	e8 7f 28 ff ff       	call   f0100e31 <cprintf>
f010e5b2:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e5b5:	b8 00 00 00 00       	mov    $0x0,%eax
f010e5ba:	e9 4e 01 00 00       	jmp    f010e70d <tst_kheap+0x384>
			}
			if (testNum == 1)
f010e5bf:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e5c3:	75 07                	jne    f010e5cc <tst_kheap+0x243>
				test_kmalloc();
f010e5c5:	e8 fb a0 00 00       	call   f01186c5 <test_kmalloc>
f010e5ca:	eb 5b                	jmp    f010e627 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e5cc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e5d0:	75 07                	jne    f010e5d9 <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010e5d2:	e8 b7 c3 00 00       	call   f011a98e <test_kmalloc_bestfit1>
f010e5d7:	eb 4e                	jmp    f010e627 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e5d9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e5dd:	75 48                	jne    f010e627 <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010e5df:	e8 42 d3 00 00       	call   f011b926 <test_kmalloc_bestfit2>
f010e5e4:	eb 41                	jmp    f010e627 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010e5e6:	e8 00 f8 ff ff       	call   f010ddeb <isKHeapPlacementStrategyNEXTFIT>
f010e5eb:	84 c0                	test   %al,%al
f010e5ed:	74 38                	je     f010e627 <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010e5ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e5f3:	75 1a                	jne    f010e60f <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010e5f5:	83 ec 0c             	sub    $0xc,%esp
f010e5f8:	68 b0 43 13 f0       	push   $0xf01343b0
f010e5fd:	e8 2f 28 ff ff       	call   f0100e31 <cprintf>
f010e602:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e605:	b8 00 00 00 00       	mov    $0x0,%eax
f010e60a:	e9 fe 00 00 00       	jmp    f010e70d <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010e60f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e613:	75 07                	jne    f010e61c <tst_kheap+0x293>
				test_kmalloc();
f010e615:	e8 ab a0 00 00       	call   f01186c5 <test_kmalloc>
f010e61a:	eb 0b                	jmp    f010e627 <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010e61c:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e620:	75 05                	jne    f010e627 <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010e622:	e8 aa b0 00 00       	call   f01196d1 <test_kmalloc_nextfit>
		}
		return 0;
f010e627:	b8 00 00 00 00       	mov    $0x0,%eax
f010e62c:	e9 dc 00 00 00       	jmp    f010e70d <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010e631:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e634:	83 c0 08             	add    $0x8,%eax
f010e637:	8b 00                	mov    (%eax),%eax
f010e639:	83 ec 08             	sub    $0x8,%esp
f010e63c:	68 fe 43 13 f0       	push   $0xf01343fe
f010e641:	50                   	push   %eax
f010e642:	e8 61 0b 02 00       	call   f012f1a8 <strcmp>
f010e647:	83 c4 10             	add    $0x10,%esp
f010e64a:	85 c0                	test   %eax,%eax
f010e64c:	75 28                	jne    f010e676 <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010e64e:	e8 83 f7 ff ff       	call   f010ddd6 <isKHeapPlacementStrategyBESTFIT>
f010e653:	84 c0                	test   %al,%al
f010e655:	75 09                	jne    f010e660 <tst_kheap+0x2d7>
f010e657:	e8 65 f7 ff ff       	call   f010ddc1 <isKHeapPlacementStrategyFIRSTFIT>
f010e65c:	84 c0                	test   %al,%al
f010e65e:	74 07                	je     f010e667 <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010e660:	e8 14 30 01 00       	call   f0121679 <test_kfree_bestfirstfit>
f010e665:	eb 05                	jmp    f010e66c <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010e667:	e8 1b 12 01 00       	call   f011f887 <test_kfree>
		}
		return 0;
f010e66c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e671:	e9 97 00 00 00       	jmp    f010e70d <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010e676:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e679:	83 c0 08             	add    $0x8,%eax
f010e67c:	8b 00                	mov    (%eax),%eax
f010e67e:	83 ec 08             	sub    $0x8,%esp
f010e681:	68 04 44 13 f0       	push   $0xf0134404
f010e686:	50                   	push   %eax
f010e687:	e8 1c 0b 02 00       	call   f012f1a8 <strcmp>
f010e68c:	83 c4 10             	add    $0x10,%esp
f010e68f:	85 c0                	test   %eax,%eax
f010e691:	75 0c                	jne    f010e69f <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010e693:	e8 8b 47 01 00       	call   f0122e23 <test_kheap_phys_addr>
		return 0;
f010e698:	b8 00 00 00 00       	mov    $0x0,%eax
f010e69d:	eb 6e                	jmp    f010e70d <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010e69f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e6a2:	83 c0 08             	add    $0x8,%eax
f010e6a5:	8b 00                	mov    (%eax),%eax
f010e6a7:	83 ec 08             	sub    $0x8,%esp
f010e6aa:	68 0e 44 13 f0       	push   $0xf013440e
f010e6af:	50                   	push   %eax
f010e6b0:	e8 f3 0a 02 00       	call   f012f1a8 <strcmp>
f010e6b5:	83 c4 10             	add    $0x10,%esp
f010e6b8:	85 c0                	test   %eax,%eax
f010e6ba:	75 0c                	jne    f010e6c8 <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010e6bc:	e8 a0 58 01 00       	call   f0123f61 <test_kheap_virt_addr>
		return 0;
f010e6c1:	b8 00 00 00 00       	mov    $0x0,%eax
f010e6c6:	eb 45                	jmp    f010e70d <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010e6c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e6cb:	83 c0 08             	add    $0x8,%eax
f010e6ce:	8b 00                	mov    (%eax),%eax
f010e6d0:	83 ec 08             	sub    $0x8,%esp
f010e6d3:	68 18 44 13 f0       	push   $0xf0134418
f010e6d8:	50                   	push   %eax
f010e6d9:	e8 ca 0a 02 00       	call   f012f1a8 <strcmp>
f010e6de:	83 c4 10             	add    $0x10,%esp
f010e6e1:	85 c0                	test   %eax,%eax
f010e6e3:	75 23                	jne    f010e708 <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010e6e5:	e8 01 f7 ff ff       	call   f010ddeb <isKHeapPlacementStrategyNEXTFIT>
f010e6ea:	84 c0                	test   %al,%al
f010e6ec:	74 05                	je     f010e6f3 <tst_kheap+0x36a>
		{
			test_krealloc();
f010e6ee:	e8 11 ba 01 00       	call   f012a104 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010e6f3:	e8 de f6 ff ff       	call   f010ddd6 <isKHeapPlacementStrategyBESTFIT>
f010e6f8:	84 c0                	test   %al,%al
f010e6fa:	74 05                	je     f010e701 <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010e6fc:	e8 97 d7 01 00       	call   f012be98 <test_krealloc_BF>
		}
		return 0;
f010e701:	b8 00 00 00 00       	mov    $0x0,%eax
f010e706:	eb 05                	jmp    f010e70d <tst_kheap+0x384>
	}
	return 0;
f010e708:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e70d:	c9                   	leave  
f010e70e:	c3                   	ret    

f010e70f <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010e70f:	55                   	push   %ebp
f010e710:	89 e5                	mov    %esp,%ebp
f010e712:	83 ec 18             	sub    $0x18,%esp
	return;
#endif


	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010e715:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010e71c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e71f:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010e725:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e728:	83 c0 04             	add    $0x4,%eax
f010e72b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010e731:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e738:	83 ec 08             	sub    $0x8,%esp
f010e73b:	ff 75 f0             	pushl  -0x10(%ebp)
f010e73e:	68 00 00 00 f6       	push   $0xf6000000
f010e743:	e8 d5 14 02 00       	call   f012fc1d <initialize_dynamic_allocator>
f010e748:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	struct BlockMetaData *metaDataBegin = (struct BlockMetaData *) KERNEL_HEAP_START ;
f010e74b:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	if (metaDataBegin->is_free != 1 || metaDataBegin->size != initAllocatedSpace)
f010e752:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e755:	8a 40 04             	mov    0x4(%eax),%al
f010e758:	3c 01                	cmp    $0x1,%al
f010e75a:	75 0a                	jne    f010e766 <test_initialize_dynamic_allocator+0x57>
f010e75c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e75f:	8b 00                	mov    (%eax),%eax
f010e761:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e764:	74 14                	je     f010e77a <test_initialize_dynamic_allocator+0x6b>
	{
		panic("Content of Meta data are not set correctly");
f010e766:	83 ec 04             	sub    $0x4,%esp
f010e769:	68 24 44 13 f0       	push   $0xf0134424
f010e76e:	6a 29                	push   $0x29
f010e770:	68 50 44 13 f0       	push   $0xf0134450
f010e775:	e8 36 1a ff ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010e77a:	83 ec 0c             	sub    $0xc,%esp
f010e77d:	68 74 44 13 f0       	push   $0xf0134474
f010e782:	e8 aa 26 ff ff       	call   f0100e31 <cprintf>
f010e787:	83 c4 10             	add    $0x10,%esp
}
f010e78a:	90                   	nop
f010e78b:	c9                   	leave  
f010e78c:	c3                   	ret    

f010e78d <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010e78d:	55                   	push   %ebp
f010e78e:	89 e5                	mov    %esp,%ebp
f010e790:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010e793:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010e79a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010e7a1:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e7a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e7ab:	83 ec 08             	sub    $0x8,%esp
f010e7ae:	50                   	push   %eax
f010e7af:	68 00 00 00 f6       	push   $0xf6000000
f010e7b4:	e8 64 14 02 00       	call   f012fc1d <initialize_dynamic_allocator>
f010e7b9:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e7bc:	83 ec 0c             	sub    $0xc,%esp
f010e7bf:	68 c4 44 13 f0       	push   $0xf01344c4
f010e7c4:	e8 68 26 ff ff       	call   f0100e31 <cprintf>
f010e7c9:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010e7cc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010e7d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e7d6:	89 c2                	mov    %eax,%edx
f010e7d8:	01 d2                	add    %edx,%edx
f010e7da:	01 d0                	add    %edx,%eax
f010e7dc:	83 ec 08             	sub    $0x8,%esp
f010e7df:	ff 75 08             	pushl  0x8(%ebp)
f010e7e2:	50                   	push   %eax
f010e7e3:	e8 1c 13 02 00       	call   f012fb04 <alloc_block>
f010e7e8:	83 c4 10             	add    $0x10,%esp
f010e7eb:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e7ee:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e7f2:	74 17                	je     f010e80b <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010e7f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e7fb:	83 ec 0c             	sub    $0xc,%esp
f010e7fe:	68 00 45 13 f0       	push   $0xf0134500
f010e803:	e8 29 26 ff ff       	call   f0100e31 <cprintf>
f010e808:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010e80b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e80e:	83 ec 08             	sub    $0x8,%esp
f010e811:	ff 75 08             	pushl  0x8(%ebp)
f010e814:	50                   	push   %eax
f010e815:	e8 ea 12 02 00       	call   f012fb04 <alloc_block>
f010e81a:	83 c4 10             	add    $0x10,%esp
f010e81d:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e820:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e824:	74 17                	je     f010e83d <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010e826:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e82d:	83 ec 0c             	sub    $0xc,%esp
f010e830:	68 58 45 13 f0       	push   $0xf0134558
f010e835:	e8 f7 25 ff ff       	call   f0100e31 <cprintf>
f010e83a:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e83d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e841:	74 04                	je     f010e847 <test_initial_alloc+0xba>
	{
		eval += 5;
f010e843:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010e847:	83 ec 0c             	sub    $0xc,%esp
f010e84a:	68 b0 45 13 f0       	push   $0xf01345b0
f010e84f:	e8 dd 25 ff ff       	call   f0100e31 <cprintf>
f010e854:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e857:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010e85e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e865:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010e86c:	eb 2a                	jmp    f010e898 <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010e86e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e871:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f010e878:	89 d0                	mov    %edx,%eax
f010e87a:	c1 e0 02             	shl    $0x2,%eax
f010e87d:	01 d0                	add    %edx,%eax
f010e87f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e886:	01 d0                	add    %edx,%eax
f010e888:	c1 e0 03             	shl    $0x3,%eax
f010e88b:	89 c2                	mov    %eax,%edx
f010e88d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e890:	01 d0                	add    %edx,%eax
f010e892:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010e895:	ff 45 e8             	incl   -0x18(%ebp)
f010e898:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010e89c:	7e d0                	jle    f010e86e <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010e89e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e8a1:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010e8a4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010e8a7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e8ab:	7f 17                	jg     f010e8c4 <test_initial_alloc+0x137>
	{
		is_correct = 0;
f010e8ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010e8b4:	83 ec 0c             	sub    $0xc,%esp
f010e8b7:	68 fc 45 13 f0       	push   $0xf01345fc
f010e8bc:	e8 70 25 ff ff       	call   f0100e31 <cprintf>
f010e8c1:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010e8c4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010e8cb:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e8d2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e8d9:	e9 fc 00 00 00       	jmp    f010e9da <test_initial_alloc+0x24d>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e8de:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010e8e5:	e9 e0 00 00 00       	jmp    f010e9ca <test_initial_alloc+0x23d>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010e8ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e8ed:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010e8f4:	83 e8 10             	sub    $0x10,%eax
f010e8f7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e8fa:	83 ec 08             	sub    $0x8,%esp
f010e8fd:	ff 75 08             	pushl  0x8(%ebp)
f010e900:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e903:	e8 fc 11 02 00       	call   f012fb04 <alloc_block>
f010e908:	83 c4 10             	add    $0x10,%esp
f010e90b:	89 c2                	mov    %eax,%edx
f010e90d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e910:	89 14 85 a0 a3 2d f0 	mov    %edx,-0xfd25c60(,%eax,4)
f010e917:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e91a:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010e921:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010e924:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e927:	d1 e8                	shr    %eax
f010e929:	89 c2                	mov    %eax,%edx
f010e92b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e92e:	01 c2                	add    %eax,%edx
f010e930:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e933:	89 14 85 a0 cf 2d f0 	mov    %edx,-0xfd23060(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010e93a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e93d:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e940:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e943:	01 c2                	add    %eax,%edx
f010e945:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e948:	89 14 85 a0 b9 2d f0 	mov    %edx,-0xfd24660(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e94f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e953:	74 0b                	je     f010e960 <test_initial_alloc+0x1d3>
f010e955:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e958:	83 c0 10             	add    $0x10,%eax
f010e95b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e95e:	74 27                	je     f010e987 <test_initial_alloc+0x1fa>
			{
				if (is_correct)
f010e960:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e964:	74 21                	je     f010e987 <test_initial_alloc+0x1fa>
				{
					is_correct = 0;
f010e966:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData() ,va);
f010e96d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e970:	83 c0 10             	add    $0x10,%eax
f010e973:	ff 75 cc             	pushl  -0x34(%ebp)
f010e976:	50                   	push   %eax
f010e977:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e97a:	68 78 46 13 f0       	push   $0xf0134678
f010e97f:	e8 ad 24 ff ff       	call   f0100e31 <cprintf>
f010e984:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010e987:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e98a:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010e991:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010e994:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e997:	8b 14 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%edx
f010e99e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9a1:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010e9a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9a7:	8b 14 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%edx
f010e9ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9b1:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010e9b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9b7:	8b 14 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%edx
f010e9be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9c1:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010e9c4:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e9c7:	ff 45 d8             	incl   -0x28(%ebp)
f010e9ca:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010e9d1:	0f 8e 13 ff ff ff    	jle    f010e8ea <test_initial_alloc+0x15d>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e9d7:	ff 45 dc             	incl   -0x24(%ebp)
f010e9da:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e9de:	0f 8e fa fe ff ff    	jle    f010e8de <test_initial_alloc+0x151>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010e9e4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e9e8:	74 04                	je     f010e9ee <test_initial_alloc+0x261>
	{
		eval += 20;
f010e9ea:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e9ee:	83 ec 0c             	sub    $0xc,%esp
f010e9f1:	68 dc 46 13 f0       	push   $0xf01346dc
f010e9f6:	e8 36 24 ff ff       	call   f0100e31 <cprintf>
f010e9fb:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e9fe:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData();
f010ea05:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ea08:	83 e8 10             	sub    $0x10,%eax
f010ea0b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010ea0e:	83 ec 08             	sub    $0x8,%esp
f010ea11:	ff 75 08             	pushl  0x8(%ebp)
f010ea14:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ea17:	e8 e8 10 02 00       	call   f012fb04 <alloc_block>
f010ea1c:	83 c4 10             	add    $0x10,%esp
f010ea1f:	89 c2                	mov    %eax,%edx
f010ea21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea24:	89 14 85 a0 a3 2d f0 	mov    %edx,-0xfd25c60(,%eax,4)
f010ea2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea2e:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010ea35:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010ea38:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ea3b:	d1 e8                	shr    %eax
f010ea3d:	89 c2                	mov    %eax,%edx
f010ea3f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ea42:	01 c2                	add    %eax,%edx
f010ea44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea47:	89 14 85 a0 cf 2d f0 	mov    %edx,-0xfd23060(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010ea4e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ea51:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ea54:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ea57:	01 c2                	add    %eax,%edx
f010ea59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea5c:	89 14 85 a0 b9 2d f0 	mov    %edx,-0xfd24660(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010ea63:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010ea67:	74 0b                	je     f010ea74 <test_initial_alloc+0x2e7>
f010ea69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ea6c:	83 c0 10             	add    $0x10,%eax
f010ea6f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010ea72:	74 17                	je     f010ea8b <test_initial_alloc+0x2fe>
	{
		is_correct = 0;
f010ea74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC - alloc_block_xx return wrong address.\n");
f010ea7b:	83 ec 0c             	sub    $0xc,%esp
f010ea7e:	68 28 47 13 f0       	push   $0xf0134728
f010ea83:	e8 a9 23 ff ff       	call   f0100e31 <cprintf>
f010ea88:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010ea8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea8e:	8b 14 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%edx
f010ea95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea98:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010ea9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea9e:	8b 14 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%edx
f010eaa5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eaa8:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010eaab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eaae:	8b 14 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%edx
f010eab5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eab8:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010eabb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010eabf:	74 04                	je     f010eac5 <test_initial_alloc+0x338>
	{
		eval += 5;
f010eac1:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010eac5:	83 ec 0c             	sub    $0xc,%esp
f010eac8:	68 70 47 13 f0       	push   $0xf0134770
f010eacd:	e8 5f 23 ff ff       	call   f0100e31 <cprintf>
f010ead2:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ead5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010eadc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010eae3:	eb 5b                	jmp    f010eb40 <test_initial_alloc+0x3b3>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010eae5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eae8:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010eaef:	66 8b 00             	mov    (%eax),%ax
f010eaf2:	98                   	cwtl   
f010eaf3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010eaf6:	75 26                	jne    f010eb1e <test_initial_alloc+0x391>
f010eaf8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eafb:	8b 04 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%eax
f010eb02:	66 8b 00             	mov    (%eax),%ax
f010eb05:	98                   	cwtl   
f010eb06:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010eb09:	75 13                	jne    f010eb1e <test_initial_alloc+0x391>
f010eb0b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eb0e:	8b 04 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%eax
f010eb15:	66 8b 00             	mov    (%eax),%ax
f010eb18:	98                   	cwtl   
f010eb19:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010eb1c:	74 1f                	je     f010eb3d <test_initial_alloc+0x3b0>
		{
			is_correct = 0;
f010eb1e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010eb25:	83 ec 04             	sub    $0x4,%esp
f010eb28:	ff 75 d4             	pushl  -0x2c(%ebp)
f010eb2b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010eb2e:	68 a4 47 13 f0       	push   $0xf01347a4
f010eb33:	e8 f9 22 ff ff       	call   f0100e31 <cprintf>
f010eb38:	83 c4 10             	add    $0x10,%esp
			break;
f010eb3b:	eb 0b                	jmp    f010eb48 <test_initial_alloc+0x3bb>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010eb3d:	ff 45 d4             	incl   -0x2c(%ebp)
f010eb40:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eb43:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010eb46:	7c 9d                	jl     f010eae5 <test_initial_alloc+0x358>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010eb48:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010eb4c:	74 04                	je     f010eb52 <test_initial_alloc+0x3c5>
	{
		eval += 10;
f010eb4e:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010eb52:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010eb55:	c9                   	leave  
f010eb56:	c3                   	ret    

f010eb57 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010eb57:	55                   	push   %ebp
f010eb58:	89 e5                	mov    %esp,%ebp
f010eb5a:	57                   	push   %edi
f010eb5b:	56                   	push   %esi
f010eb5c:	53                   	push   %ebx
f010eb5d:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010eb63:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010eb6a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010eb71:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010eb78:	83 ec 0c             	sub    $0xc,%esp
f010eb7b:	68 f4 47 13 f0       	push   $0xf01347f4
f010eb80:	e8 ac 22 ff ff       	call   f0100e31 <cprintf>
f010eb85:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010eb88:	83 ec 0c             	sub    $0xc,%esp
f010eb8b:	68 30 48 13 f0       	push   $0xf0134830
f010eb90:	e8 9c 22 ff ff       	call   f0100e31 <cprintf>
f010eb95:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010eb98:	83 ec 0c             	sub    $0xc,%esp
f010eb9b:	68 f4 47 13 f0       	push   $0xf01347f4
f010eba0:	e8 8c 22 ff ff       	call   f0100e31 <cprintf>
f010eba5:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010eba8:	83 ec 0c             	sub    $0xc,%esp
f010ebab:	6a 01                	push   $0x1
f010ebad:	e8 db fb ff ff       	call   f010e78d <test_initial_alloc>
f010ebb2:	83 c4 10             	add    $0x10,%esp
f010ebb5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010ebb8:	83 ec 0c             	sub    $0xc,%esp
f010ebbb:	68 6c 48 13 f0       	push   $0xf013486c
f010ebc0:	e8 6c 22 ff ff       	call   f0100e31 <cprintf>
f010ebc5:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010ebc8:	83 ec 0c             	sub    $0xc,%esp
f010ebcb:	68 a4 48 13 f0       	push   $0xf01348a4
f010ebd0:	e8 5c 22 ff ff       	call   f0100e31 <cprintf>
f010ebd5:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010ebd8:	83 ec 0c             	sub    $0xc,%esp
f010ebdb:	68 6c 48 13 f0       	push   $0xf013486c
f010ebe0:	e8 4c 22 ff ff       	call   f0100e31 <cprintf>
f010ebe5:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ebe8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ebef:	eb 2c                	jmp    f010ec1d <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ebf1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ebf4:	89 d0                	mov    %edx,%eax
f010ebf6:	c1 e0 02             	shl    $0x2,%eax
f010ebf9:	01 d0                	add    %edx,%eax
f010ebfb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ec02:	01 d0                	add    %edx,%eax
f010ec04:	c1 e0 03             	shl    $0x3,%eax
f010ec07:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010ec0e:	83 ec 0c             	sub    $0xc,%esp
f010ec11:	50                   	push   %eax
f010ec12:	e8 8b 14 02 00       	call   f01300a2 <free_block>
f010ec17:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ec1a:	ff 45 dc             	incl   -0x24(%ebp)
f010ec1d:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ec21:	7e ce                	jle    f010ebf1 <test_alloc_block_FF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ec23:	83 ec 0c             	sub    $0xc,%esp
f010ec26:	68 c4 44 13 f0       	push   $0xf01344c4
f010ec2b:	e8 01 22 ff ff       	call   f0100e31 <cprintf>
f010ec30:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ec33:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010ec3a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010ec41:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010ec48:	eb 1f                	jmp    f010ec69 <test_alloc_block_FF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010ec4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ec4d:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010ec54:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ec57:	76 0d                	jbe    f010ec66 <test_alloc_block_FF+0x10f>
			maxSize = allocSizes[i] ;
f010ec59:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ec5c:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010ec63:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010ec66:	ff 45 d4             	incl   -0x2c(%ebp)
f010ec69:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010ec6d:	7e db                	jle    f010ec4a <test_alloc_block_FF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010ec6f:	83 ec 08             	sub    $0x8,%esp
f010ec72:	6a 01                	push   $0x1
f010ec74:	ff 75 d8             	pushl  -0x28(%ebp)
f010ec77:	e8 88 0e 02 00       	call   f012fb04 <alloc_block>
f010ec7c:	83 c4 10             	add    $0x10,%esp
f010ec7f:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010ec82:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ec86:	74 17                	je     f010ec9f <test_alloc_block_FF+0x148>
	{
		is_correct = 0;
f010ec88:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f010ec8f:	83 ec 0c             	sub    $0xc,%esp
f010ec92:	68 dc 48 13 f0       	push   $0xf01348dc
f010ec97:	e8 95 21 ff ff       	call   f0100e31 <cprintf>
f010ec9c:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010ec9f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eca3:	74 04                	je     f010eca9 <test_alloc_block_FF+0x152>
	{
		eval += 10;
f010eca5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010eca9:	83 ec 0c             	sub    $0xc,%esp
f010ecac:	68 54 49 13 f0       	push   $0xf0134954
f010ecb1:	e8 7b 21 ff ff       	call   f0100e31 <cprintf>
f010ecb6:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ecb9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f010ecc0:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010ecc3:	bb 14 4b 13 f0       	mov    $0xf0134b14,%ebx
f010ecc8:	ba 03 00 00 00       	mov    $0x3,%edx
f010eccd:	89 c7                	mov    %eax,%edi
f010eccf:	89 de                	mov    %ebx,%esi
f010ecd1:	89 d1                	mov    %edx,%ecx
f010ecd3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010ecd5:	a1 60 b6 2d f0       	mov    0xf02db660,%eax
f010ecda:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
f010ecdd:	c7 45 a4 10 00 00 f6 	movl   $0xf6000010,-0x5c(%ebp)
f010ece4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ece7:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010ecea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010eced:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010ecf2:	89 45 ac             	mov    %eax,-0x54(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010ecf5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010ecfc:	e9 c6 00 00 00       	jmp    f010edc7 <test_alloc_block_FF+0x270>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010ed01:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed04:	8b 44 85 b0          	mov    -0x50(%ebp,%eax,4),%eax
f010ed08:	83 e8 10             	sub    $0x10,%eax
f010ed0b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f010ed0e:	83 ec 08             	sub    $0x8,%esp
f010ed11:	6a 01                	push   $0x1
f010ed13:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ed16:	e8 e9 0d 02 00       	call   f012fb04 <alloc_block>
f010ed1b:	83 c4 10             	add    $0x10,%esp
f010ed1e:	89 c2                	mov    %eax,%edx
f010ed20:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed23:	89 54 85 94          	mov    %edx,-0x6c(%ebp,%eax,4)
f010ed27:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed2a:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ed2e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010ed31:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed34:	d1 e8                	shr    %eax
f010ed36:	89 c2                	mov    %eax,%edx
f010ed38:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ed3b:	01 c2                	add    %eax,%edx
f010ed3d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed40:	89 54 85 84          	mov    %edx,-0x7c(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010ed44:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed47:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ed4a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ed4d:	01 c2                	add    %eax,%edx
f010ed4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed52:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010ed59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed5c:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ed60:	85 c0                	test   %eax,%eax
f010ed62:	74 12                	je     f010ed76 <test_alloc_block_FF+0x21f>
f010ed64:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed67:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010ed6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed6e:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ed72:	39 c2                	cmp    %eax,%edx
f010ed74:	74 27                	je     f010ed9d <test_alloc_block_FF+0x246>
		{
			is_correct = 0;
f010ed76:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010ed7d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed80:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010ed84:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed87:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ed8b:	52                   	push   %edx
f010ed8c:	50                   	push   %eax
f010ed8d:	ff 75 d0             	pushl  -0x30(%ebp)
f010ed90:	68 b0 49 13 f0       	push   $0xf01349b0
f010ed95:	e8 97 20 ff ff       	call   f0100e31 <cprintf>
f010ed9a:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010ed9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eda0:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eda4:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010eda9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010edac:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010edb0:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010edb5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010edb8:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010edbf:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010edc4:	ff 45 d0             	incl   -0x30(%ebp)
f010edc7:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f010edcb:	0f 8e 30 ff ff ff    	jle    f010ed01 <test_alloc_block_FF+0x1aa>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f010edd1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010edd5:	74 04                	je     f010eddb <test_alloc_block_FF+0x284>
	{
		eval += 15;
f010edd7:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010eddb:	83 ec 0c             	sub    $0xc,%esp
f010edde:	68 dc 46 13 f0       	push   $0xf01346dc
f010ede3:	e8 49 20 ff ff       	call   f0100e31 <cprintf>
f010ede8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010edeb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData();
f010edf2:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f010edf9:	83 ec 08             	sub    $0x8,%esp
f010edfc:	6a 01                	push   $0x1
f010edfe:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ee01:	e8 fe 0c 02 00       	call   f012fb04 <alloc_block>
f010ee06:	83 c4 10             	add    $0x10,%esp
f010ee09:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010ee0c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ee0f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f010ee12:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ee15:	d1 e8                	shr    %eax
f010ee17:	89 c2                	mov    %eax,%edx
f010ee19:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ee1c:	01 d0                	add    %edx,%eax
f010ee1e:	89 45 90             	mov    %eax,-0x70(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f010ee21:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ee24:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ee27:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ee2a:	01 d0                	add    %edx,%eax
f010ee2c:	89 45 80             	mov    %eax,-0x80(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + testSizes[0] + testSizes[2] + sizeOfMetaData()) ;
f010ee2f:	8b 55 b0             	mov    -0x50(%ebp),%edx
f010ee32:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ee35:	01 d0                	add    %edx,%eax
f010ee37:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010ee3c:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va == NULL || (va != expected))
f010ee3f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ee43:	74 08                	je     f010ee4d <test_alloc_block_FF+0x2f6>
f010ee45:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ee48:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010ee4b:	74 1d                	je     f010ee6a <test_alloc_block_FF+0x313>
	{
		is_correct = 0;
f010ee4d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f010ee54:	83 ec 04             	sub    $0x4,%esp
f010ee57:	ff 75 c8             	pushl  -0x38(%ebp)
f010ee5a:	ff 75 bc             	pushl  -0x44(%ebp)
f010ee5d:	68 14 4a 13 f0       	push   $0xf0134a14
f010ee62:	e8 ca 1f ff ff       	call   f0100e31 <cprintf>
f010ee67:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfFFTests]) = 353 ;
f010ee6a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ee6d:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f010ee72:	8b 45 90             	mov    -0x70(%ebp),%eax
f010ee75:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f010ee7a:	8b 45 80             	mov    -0x80(%ebp),%eax
f010ee7d:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010ee82:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ee86:	74 04                	je     f010ee8c <test_alloc_block_FF+0x335>
	{
		eval += 15;
f010ee88:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010ee8c:	83 ec 0c             	sub    $0xc,%esp
f010ee8f:	68 70 47 13 f0       	push   $0xf0134770
f010ee94:	e8 98 1f ff ff       	call   f0100e31 <cprintf>
f010ee99:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ee9c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f010eea3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010eeaa:	e9 82 00 00 00       	jmp    f010ef31 <test_alloc_block_FF+0x3da>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010eeaf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eeb2:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eeb6:	66 8b 00             	mov    (%eax),%ax
f010eeb9:	66 3d 61 01          	cmp    $0x161,%ax
f010eebd:	75 23                	jne    f010eee2 <test_alloc_block_FF+0x38b>
f010eebf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eec2:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010eec6:	66 8b 00             	mov    (%eax),%ax
f010eec9:	66 3d 61 01          	cmp    $0x161,%ax
f010eecd:	75 13                	jne    f010eee2 <test_alloc_block_FF+0x38b>
f010eecf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eed2:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010eed9:	66 8b 00             	mov    (%eax),%ax
f010eedc:	66 3d 61 01          	cmp    $0x161,%ax
f010eee0:	74 4c                	je     f010ef2e <test_alloc_block_FF+0x3d7>
		{
			is_correct = 0;
f010eee2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010eee9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eeec:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010eef3:	66 8b 00             	mov    (%eax),%ax
f010eef6:	0f bf c8             	movswl %ax,%ecx
f010eef9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eefc:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ef00:	66 8b 00             	mov    (%eax),%ax
f010ef03:	0f bf d0             	movswl %ax,%edx
f010ef06:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ef09:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ef0d:	66 8b 00             	mov    (%eax),%ax
f010ef10:	98                   	cwtl   
f010ef11:	83 ec 08             	sub    $0x8,%esp
f010ef14:	51                   	push   %ecx
f010ef15:	52                   	push   %edx
f010ef16:	50                   	push   %eax
f010ef17:	68 61 01 00 00       	push   $0x161
f010ef1c:	ff 75 cc             	pushl  -0x34(%ebp)
f010ef1f:	68 74 4a 13 f0       	push   $0xf0134a74
f010ef24:	e8 08 1f ff ff       	call   f0100e31 <cprintf>
f010ef29:	83 c4 20             	add    $0x20,%esp
			break;
f010ef2c:	eb 0d                	jmp    f010ef3b <test_alloc_block_FF+0x3e4>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f010ef2e:	ff 45 cc             	incl   -0x34(%ebp)
f010ef31:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f010ef35:	0f 8e 74 ff ff ff    	jle    f010eeaf <test_alloc_block_FF+0x358>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010ef3b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ef3f:	74 04                	je     f010ef45 <test_alloc_block_FF+0x3ee>
	{
		eval += 20;
f010ef41:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f010ef45:	83 ec 08             	sub    $0x8,%esp
f010ef48:	ff 75 e4             	pushl  -0x1c(%ebp)
f010ef4b:	68 e0 4a 13 f0       	push   $0xf0134ae0
f010ef50:	e8 dc 1e ff ff       	call   f0100e31 <cprintf>
f010ef55:	83 c4 10             	add    $0x10,%esp
}
f010ef58:	90                   	nop
f010ef59:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ef5c:	5b                   	pop    %ebx
f010ef5d:	5e                   	pop    %esi
f010ef5e:	5f                   	pop    %edi
f010ef5f:	5d                   	pop    %ebp
f010ef60:	c3                   	ret    

f010ef61 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010ef61:	55                   	push   %ebp
f010ef62:	89 e5                	mov    %esp,%ebp
f010ef64:	57                   	push   %edi
f010ef65:	56                   	push   %esi
f010ef66:	53                   	push   %ebx
f010ef67:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010ef6d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ef74:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ef7b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=================================================\n") ;
f010ef82:	83 ec 0c             	sub    $0xc,%esp
f010ef85:	68 20 4b 13 f0       	push   $0xf0134b20
f010ef8a:	e8 a2 1e ff ff       	call   f0100e31 <cprintf>
f010ef8f:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY\n") ;
f010ef92:	83 ec 0c             	sub    $0xc,%esp
f010ef95:	68 54 4b 13 f0       	push   $0xf0134b54
f010ef9a:	e8 92 1e ff ff       	call   f0100e31 <cprintf>
f010ef9f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010efa2:	83 ec 0c             	sub    $0xc,%esp
f010efa5:	68 20 4b 13 f0       	push   $0xf0134b20
f010efaa:	e8 82 1e ff ff       	call   f0100e31 <cprintf>
f010efaf:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f010efb2:	83 ec 0c             	sub    $0xc,%esp
f010efb5:	6a 03                	push   $0x3
f010efb7:	e8 d1 f7 ff ff       	call   f010e78d <test_initial_alloc>
f010efbc:	83 c4 10             	add    $0x10,%esp
f010efbf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("=================================================\n") ;
f010efc2:	83 ec 0c             	sub    $0xc,%esp
f010efc5:	68 20 4b 13 f0       	push   $0xf0134b20
f010efca:	e8 62 1e ff ff       	call   f0100e31 <cprintf>
f010efcf:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
f010efd2:	83 ec 0c             	sub    $0xc,%esp
f010efd5:	68 88 4b 13 f0       	push   $0xf0134b88
f010efda:	e8 52 1e ff ff       	call   f0100e31 <cprintf>
f010efdf:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010efe2:	83 ec 0c             	sub    $0xc,%esp
f010efe5:	68 20 4b 13 f0       	push   $0xf0134b20
f010efea:	e8 42 1e ff ff       	call   f0100e31 <cprintf>
f010efef:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010eff2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010eff9:	eb 2c                	jmp    f010f027 <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010effb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010effe:	89 d0                	mov    %edx,%eax
f010f000:	c1 e0 02             	shl    $0x2,%eax
f010f003:	01 d0                	add    %edx,%eax
f010f005:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f00c:	01 d0                	add    %edx,%eax
f010f00e:	c1 e0 03             	shl    $0x3,%eax
f010f011:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010f018:	83 ec 0c             	sub    $0xc,%esp
f010f01b:	50                   	push   %eax
f010f01c:	e8 81 10 02 00       	call   f01300a2 <free_block>
f010f021:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
	cprintf("=================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f024:	ff 45 dc             	incl   -0x24(%ebp)
f010f027:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f02b:	7e ce                	jle    f010effb <test_alloc_block_BF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010f02d:	83 ec 0c             	sub    $0xc,%esp
f010f030:	68 c4 44 13 f0       	push   $0xf01344c4
f010f035:	e8 f7 1d ff ff       	call   f0100e31 <cprintf>
f010f03a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f03d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010f044:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f04b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f052:	eb 1f                	jmp    f010f073 <test_alloc_block_BF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010f054:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f057:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f05e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f061:	76 0d                	jbe    f010f070 <test_alloc_block_BF+0x10f>
			maxSize = allocSizes[i] ;
f010f063:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f066:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f06d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010f070:	ff 45 d4             	incl   -0x2c(%ebp)
f010f073:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010f077:	7e db                	jle    f010f054 <test_alloc_block_BF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f010f079:	83 ec 08             	sub    $0x8,%esp
f010f07c:	6a 03                	push   $0x3
f010f07e:	ff 75 d8             	pushl  -0x28(%ebp)
f010f081:	e8 7e 0a 02 00       	call   f012fb04 <alloc_block>
f010f086:	83 c4 10             	add    $0x10,%esp
f010f089:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010f08c:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f090:	74 17                	je     f010f0a9 <test_alloc_block_BF+0x148>
	{
		is_correct = 0;
f010f092:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f010f099:	83 ec 0c             	sub    $0xc,%esp
f010f09c:	68 bc 4b 13 f0       	push   $0xf0134bbc
f010f0a1:	e8 8b 1d ff ff       	call   f0100e31 <cprintf>
f010f0a6:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010f0a9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f0ad:	74 04                	je     f010f0b3 <test_alloc_block_BF+0x152>
	{
		eval += 10;
f010f0af:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010f0b3:	83 ec 0c             	sub    $0xc,%esp
f010f0b6:	68 54 49 13 f0       	push   $0xf0134954
f010f0bb:	e8 71 1d ff ff       	call   f0100e31 <cprintf>
f010f0c0:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f0c3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {/*only 1 can fit*/4*kilo + kilo/2, /*many can fit*/ 1*kilo + kilo/4, 4*sizeof(short) + sizeOfMetaData(), kilo/2, /*only 1 can fit (@head)*/3*kilo } ;
f010f0ca:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010f0cd:	bb e0 4d 13 f0       	mov    $0xf0134de0,%ebx
f010f0d2:	ba 05 00 00 00       	mov    $0x5,%edx
f010f0d7:	89 c7                	mov    %eax,%edi
f010f0d9:	89 de                	mov    %ebx,%esi
f010f0db:	89 d1                	mov    %edx,%ecx
f010f0dd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st12B = (uint32)startVAs[3*allocCntPerSize];
f010f0df:	a1 00 ad 2d f0       	mov    0xf02dad00,%eax
f010f0e4:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f010f0e7:	a1 20 b0 2d f0       	mov    0xf02db020,%eax
f010f0ec:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010f0ef:	a1 60 b6 2d f0       	mov    0xf02db660,%eax
f010f0f4:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
f010f0f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f0fa:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010f0fd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f100:	89 45 90             	mov    %eax,-0x70(%ebp)
f010f103:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f106:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010f109:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f10c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f10f:	01 d0                	add    %edx,%eax
f010f111:	89 45 98             	mov    %eax,-0x68(%ebp)
f010f114:	c7 45 9c 10 00 00 f6 	movl   $0xf6000010,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f11b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f122:	e9 de 00 00 00       	jmp    f010f205 <test_alloc_block_BF+0x2a4>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010f127:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f12a:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f010f12e:	83 e8 10             	sub    $0x10,%eax
f010f131:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f010f134:	83 ec 08             	sub    $0x8,%esp
f010f137:	6a 03                	push   $0x3
f010f139:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f13c:	e8 c3 09 02 00       	call   f012fb04 <alloc_block>
f010f141:	83 c4 10             	add    $0x10,%esp
f010f144:	89 c2                	mov    %eax,%edx
f010f146:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f149:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
f010f150:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f153:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f15a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010f15d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f160:	d1 e8                	shr    %eax
f010f162:	89 c2                	mov    %eax,%edx
f010f164:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f167:	01 c2                	add    %eax,%edx
f010f169:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f16c:	89 94 85 5c ff ff ff 	mov    %edx,-0xa4(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010f173:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f176:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f179:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f17c:	01 c2                	add    %eax,%edx
f010f17e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f181:	89 94 85 44 ff ff ff 	mov    %edx,-0xbc(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010f188:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f18b:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f192:	85 c0                	test   %eax,%eax
f010f194:	74 15                	je     f010f1ab <test_alloc_block_BF+0x24a>
f010f196:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f199:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f1a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f1a3:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f1a7:	39 c2                	cmp    %eax,%edx
f010f1a9:	74 2a                	je     f010f1d5 <test_alloc_block_BF+0x274>
		{
			is_correct = 0;
f010f1ab:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #6.%d: WRONG BF ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010f1b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f1b5:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f1bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f1bf:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f1c3:	52                   	push   %edx
f010f1c4:	50                   	push   %eax
f010f1c5:	ff 75 d0             	pushl  -0x30(%ebp)
f010f1c8:	68 34 4c 13 f0       	push   $0xf0134c34
f010f1cd:	e8 5f 1c ff ff       	call   f0100e31 <cprintf>
f010f1d2:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010f1d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f1d8:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f1df:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010f1e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f1e7:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f1ee:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010f1f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f1f6:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f1fd:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f202:	ff 45 d0             	incl   -0x30(%ebp)
f010f205:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f010f209:	0f 8e 18 ff ff ff    	jle    f010f127 <test_alloc_block_BF+0x1c6>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct)
f010f20f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f213:	74 04                	je     f010f219 <test_alloc_block_BF+0x2b8>
	{
		eval += 15;
f010f215:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f010f219:	83 ec 0c             	sub    $0xc,%esp
f010f21c:	68 98 4c 13 f0       	push   $0xf0134c98
f010f221:	e8 0b 1c ff ff       	call   f0100e31 <cprintf>
f010f226:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f229:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData();
f010f230:	c7 45 c4 f0 00 00 00 	movl   $0xf0,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f010f237:	83 ec 08             	sub    $0x8,%esp
f010f23a:	6a 03                	push   $0x3
f010f23c:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f23f:	e8 c0 08 02 00       	call   f012fb04 <alloc_block>
f010f244:	83 c4 10             	add    $0x10,%esp
f010f247:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f24a:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f24d:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f010f250:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f253:	d1 e8                	shr    %eax
f010f255:	89 c2                	mov    %eax,%edx
f010f257:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f25a:	01 d0                	add    %edx,%eax
f010f25c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f010f262:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f265:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f268:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f26b:	01 d0                	add    %edx,%eax
f010f26d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
	//Check returned va
	void* expected = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f010f273:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f276:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f279:	01 c2                	add    %eax,%edx
f010f27b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f27e:	01 d0                	add    %edx,%eax
f010f280:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(va == NULL || (va != expected))
f010f283:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f287:	74 08                	je     f010f291 <test_alloc_block_BF+0x330>
f010f289:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f28c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f28f:	74 1d                	je     f010f2ae <test_alloc_block_BF+0x34d>
	{
		is_correct = 0;
f010f291:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #7: WRONG BF ALLOC - alloc_block_BF return wrong address. expected %x, actual %x\n", expected, va);
f010f298:	83 ec 04             	sub    $0x4,%esp
f010f29b:	ff 75 c8             	pushl  -0x38(%ebp)
f010f29e:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f2a1:	68 dc 4c 13 f0       	push   $0xf0134cdc
f010f2a6:	e8 86 1b ff ff       	call   f0100e31 <cprintf>
f010f2ab:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfBFTests]) = 353 ;
f010f2ae:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f2b1:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f010f2b6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f2bc:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f010f2c1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f2c7:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010f2cc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f2d0:	74 04                	je     f010f2d6 <test_alloc_block_BF+0x375>
	{
		eval += 15;
f010f2d2:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010f2d6:	83 ec 0c             	sub    $0xc,%esp
f010f2d9:	68 70 47 13 f0       	push   $0xf0134770
f010f2de:	e8 4e 1b ff ff       	call   f0100e31 <cprintf>
f010f2e3:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f2e6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfBFTests; ++i)
f010f2ed:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010f2f4:	e9 8e 00 00 00       	jmp    f010f387 <test_alloc_block_BF+0x426>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010f2f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2fc:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f303:	66 8b 00             	mov    (%eax),%ax
f010f306:	66 3d 61 01          	cmp    $0x161,%ax
f010f30a:	75 26                	jne    f010f332 <test_alloc_block_BF+0x3d1>
f010f30c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f30f:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f316:	66 8b 00             	mov    (%eax),%ax
f010f319:	66 3d 61 01          	cmp    $0x161,%ax
f010f31d:	75 13                	jne    f010f332 <test_alloc_block_BF+0x3d1>
f010f31f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f322:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f329:	66 8b 00             	mov    (%eax),%ax
f010f32c:	66 3d 61 01          	cmp    $0x161,%ax
f010f330:	74 52                	je     f010f384 <test_alloc_block_BF+0x423>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f010f332:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010f339:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f33c:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f343:	66 8b 00             	mov    (%eax),%ax
f010f346:	0f bf c8             	movswl %ax,%ecx
f010f349:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f34c:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f353:	66 8b 00             	mov    (%eax),%ax
f010f356:	0f bf d0             	movswl %ax,%edx
f010f359:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f35c:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f363:	66 8b 00             	mov    (%eax),%ax
f010f366:	98                   	cwtl   
f010f367:	83 ec 08             	sub    $0x8,%esp
f010f36a:	51                   	push   %ecx
f010f36b:	52                   	push   %edx
f010f36c:	50                   	push   %eax
f010f36d:	68 61 01 00 00       	push   $0x161
f010f372:	ff 75 cc             	pushl  -0x34(%ebp)
f010f375:	68 40 4d 13 f0       	push   $0xf0134d40
f010f37a:	e8 b2 1a ff ff       	call   f0100e31 <cprintf>
f010f37f:	83 c4 20             	add    $0x20,%esp
			break;
f010f382:	eb 0d                	jmp    f010f391 <test_alloc_block_BF+0x430>
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfBFTests; ++i)
f010f384:	ff 45 cc             	incl   -0x34(%ebp)
f010f387:	83 7d cc 05          	cmpl   $0x5,-0x34(%ebp)
f010f38b:	0f 8e 68 ff ff ff    	jle    f010f2f9 <test_alloc_block_BF+0x398>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010f391:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f395:	74 04                	je     f010f39b <test_alloc_block_BF+0x43a>
	{
		eval += 20;
f010f397:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f010f39b:	83 ec 08             	sub    $0x8,%esp
f010f39e:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f3a1:	68 ac 4d 13 f0       	push   $0xf0134dac
f010f3a6:	e8 86 1a ff ff       	call   f0100e31 <cprintf>
f010f3ab:	83 c4 10             	add    $0x10,%esp
}
f010f3ae:	90                   	nop
f010f3af:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f3b2:	5b                   	pop    %ebx
f010f3b3:	5e                   	pop    %esi
f010f3b4:	5f                   	pop    %edi
f010f3b5:	5d                   	pop    %ebp
f010f3b6:	c3                   	ret    

f010f3b7 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f3b7:	55                   	push   %ebp
f010f3b8:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010f3ba:	90                   	nop
f010f3bb:	5d                   	pop    %ebp
f010f3bc:	c3                   	ret    

f010f3bd <test_free_block_FF>:

void test_free_block_FF()
{
f010f3bd:	55                   	push   %ebp
f010f3be:	89 e5                	mov    %esp,%ebp
f010f3c0:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010f3c3:	83 ec 0c             	sub    $0xc,%esp
f010f3c6:	68 f4 4d 13 f0       	push   $0xf0134df4
f010f3cb:	e8 61 1a ff ff       	call   f0100e31 <cprintf>
f010f3d0:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010f3d3:	83 ec 0c             	sub    $0xc,%esp
f010f3d6:	68 34 4e 13 f0       	push   $0xf0134e34
f010f3db:	e8 51 1a ff ff       	call   f0100e31 <cprintf>
f010f3e0:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010f3e3:	83 ec 0c             	sub    $0xc,%esp
f010f3e6:	68 f4 4d 13 f0       	push   $0xf0134df4
f010f3eb:	e8 41 1a ff ff       	call   f0100e31 <cprintf>
f010f3f0:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f010f3f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f010f3fa:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010f401:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f404:	83 ec 08             	sub    $0x8,%esp
f010f407:	50                   	push   %eax
f010f408:	68 00 00 00 f6       	push   $0xf6000000
f010f40d:	e8 0b 08 02 00       	call   f012fc1d <initialize_dynamic_allocator>
f010f412:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010f415:	83 ec 0c             	sub    $0xc,%esp
f010f418:	68 74 4e 13 f0       	push   $0xf0134e74
f010f41d:	e8 0f 1a ff ff       	call   f0100e31 <cprintf>
f010f422:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010f425:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f42c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010f433:	eb 2a                	jmp    f010f45f <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010f435:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f438:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f010f43f:	89 d0                	mov    %edx,%eax
f010f441:	c1 e0 02             	shl    $0x2,%eax
f010f444:	01 d0                	add    %edx,%eax
f010f446:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f44d:	01 d0                	add    %edx,%eax
f010f44f:	c1 e0 03             	shl    $0x3,%eax
f010f452:	89 c2                	mov    %eax,%edx
f010f454:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f457:	01 d0                	add    %edx,%eax
f010f459:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010f45c:	ff 45 e8             	incl   -0x18(%ebp)
f010f45f:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010f463:	7e d0                	jle    f010f435 <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010f465:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f468:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010f46b:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f010f46e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f472:	7f 17                	jg     f010f48b <test_free_block_FF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010f474:	83 ec 04             	sub    $0x4,%esp
f010f477:	68 cc 4e 13 f0       	push   $0xf0134ecc
f010f47c:	68 fe 01 00 00       	push   $0x1fe
f010f481:	68 50 44 13 f0       	push   $0xf0134450
f010f486:	e8 25 0d ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010f48b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010f492:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f499:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010f4a0:	e9 f8 00 00 00       	jmp    f010f59d <test_free_block_FF+0x1e0>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f4a5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010f4ac:	e9 dc 00 00 00       	jmp    f010f58d <test_free_block_FF+0x1d0>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010f4b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4b4:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f4bb:	83 e8 10             	sub    $0x10,%eax
f010f4be:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f4c1:	83 ec 08             	sub    $0x8,%esp
f010f4c4:	6a 01                	push   $0x1
f010f4c6:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f4c9:	e8 36 06 02 00       	call   f012fb04 <alloc_block>
f010f4ce:	83 c4 10             	add    $0x10,%esp
f010f4d1:	89 c2                	mov    %eax,%edx
f010f4d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4d6:	89 14 85 a0 a3 2d f0 	mov    %edx,-0xfd25c60(,%eax,4)
f010f4dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4e0:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010f4e7:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010f4ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f4ed:	d1 e8                	shr    %eax
f010f4ef:	89 c2                	mov    %eax,%edx
f010f4f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f4f4:	01 c2                	add    %eax,%edx
f010f4f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4f9:	89 14 85 a0 cf 2d f0 	mov    %edx,-0xfd23060(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010f500:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f503:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f506:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f509:	01 c2                	add    %eax,%edx
f010f50b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f50e:	89 14 85 a0 b9 2d f0 	mov    %edx,-0xfd24660(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f515:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f519:	74 0b                	je     f010f526 <test_free_block_FF+0x169>
f010f51b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f51e:	83 c0 10             	add    $0x10,%eax
f010f521:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f524:	74 24                	je     f010f54a <test_free_block_FF+0x18d>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010f526:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f529:	83 c0 10             	add    $0x10,%eax
f010f52c:	83 ec 08             	sub    $0x8,%esp
f010f52f:	ff 75 c0             	pushl  -0x40(%ebp)
f010f532:	50                   	push   %eax
f010f533:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f536:	68 44 4f 13 f0       	push   $0xf0134f44
f010f53b:	68 0d 02 00 00       	push   $0x20d
f010f540:	68 50 44 13 f0       	push   $0xf0134450
f010f545:	e8 66 0c ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010f54a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f54d:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f554:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010f557:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f55a:	8b 14 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%edx
f010f561:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f564:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010f567:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f56a:	8b 14 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%edx
f010f571:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f574:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010f577:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f57a:	8b 14 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%edx
f010f581:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f584:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010f587:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f58a:	ff 45 d8             	incl   -0x28(%ebp)
f010f58d:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010f594:	0f 8e 17 ff ff ff    	jle    f010f4b1 <test_free_block_FF+0xf4>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f59a:	ff 45 dc             	incl   -0x24(%ebp)
f010f59d:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f5a1:	0f 8e fe fe ff ff    	jle    f010f4a5 <test_free_block_FF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010f5a7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f5aa:	83 e8 10             	sub    $0x10,%eax
f010f5ad:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f5b0:	83 ec 08             	sub    $0x8,%esp
f010f5b3:	6a 01                	push   $0x1
f010f5b5:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f5b8:	e8 47 05 02 00       	call   f012fb04 <alloc_block>
f010f5bd:	83 c4 10             	add    $0x10,%esp
f010f5c0:	89 c2                	mov    %eax,%edx
f010f5c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5c5:	89 14 85 a0 a3 2d f0 	mov    %edx,-0xfd25c60(,%eax,4)
f010f5cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5cf:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010f5d6:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010f5d9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f5dc:	d1 e8                	shr    %eax
f010f5de:	89 c2                	mov    %eax,%edx
f010f5e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f5e3:	01 c2                	add    %eax,%edx
f010f5e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5e8:	89 14 85 a0 cf 2d f0 	mov    %edx,-0xfd23060(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010f5ef:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f5f2:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f5f5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f5f8:	01 c2                	add    %eax,%edx
f010f5fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5fd:	89 14 85 a0 b9 2d f0 	mov    %edx,-0xfd24660(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f604:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f608:	74 0b                	je     f010f615 <test_free_block_FF+0x258>
f010f60a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f60d:	83 c0 10             	add    $0x10,%eax
f010f610:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f613:	74 17                	je     f010f62c <test_free_block_FF+0x26f>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f010f615:	83 ec 04             	sub    $0x4,%esp
f010f618:	68 a8 4f 13 f0       	push   $0xf0134fa8
f010f61d:	68 1e 02 00 00       	push   $0x21e
f010f622:	68 50 44 13 f0       	push   $0xf0134450
f010f627:	e8 84 0b ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010f62c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f62f:	8b 14 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%edx
f010f636:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f639:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010f63c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f63f:	8b 14 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%edx
f010f646:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f649:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010f64c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f64f:	8b 14 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%edx
f010f656:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f659:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010f65c:	83 ec 0c             	sub    $0xc,%esp
f010f65f:	68 f0 4f 13 f0       	push   $0xf0134ff0
f010f664:	e8 c8 17 ff ff       	call   f0100e31 <cprintf>
f010f669:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f66c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010f673:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f67a:	eb 5b                	jmp    f010f6d7 <test_free_block_FF+0x31a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010f67c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f67f:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010f686:	66 8b 00             	mov    (%eax),%ax
f010f689:	98                   	cwtl   
f010f68a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f68d:	75 26                	jne    f010f6b5 <test_free_block_FF+0x2f8>
f010f68f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f692:	8b 04 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%eax
f010f699:	66 8b 00             	mov    (%eax),%ax
f010f69c:	98                   	cwtl   
f010f69d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f6a0:	75 13                	jne    f010f6b5 <test_free_block_FF+0x2f8>
f010f6a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f6a5:	8b 04 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%eax
f010f6ac:	66 8b 00             	mov    (%eax),%ax
f010f6af:	98                   	cwtl   
f010f6b0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f6b3:	74 1f                	je     f010f6d4 <test_free_block_FF+0x317>
		{
			is_correct = 0;
f010f6b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010f6bc:	83 ec 04             	sub    $0x4,%esp
f010f6bf:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f6c2:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f6c5:	68 24 50 13 f0       	push   $0xf0135024
f010f6ca:	e8 62 17 ff ff       	call   f0100e31 <cprintf>
f010f6cf:	83 c4 10             	add    $0x10,%esp
			break;
f010f6d2:	eb 0b                	jmp    f010f6df <test_free_block_FF+0x322>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010f6d4:	ff 45 d4             	incl   -0x2c(%ebp)
f010f6d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f6da:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f6dd:	7c 9d                	jl     f010f67c <test_free_block_FF+0x2bf>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010f6df:	83 ec 0c             	sub    $0xc,%esp
f010f6e2:	68 74 50 13 f0       	push   $0xf0135074
f010f6e7:	e8 45 17 ff ff       	call   f0100e31 <cprintf>
f010f6ec:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f6ef:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f6f6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f6fd:	e9 e4 00 00 00       	jmp    f010f7e6 <test_free_block_FF+0x429>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010f702:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f705:	89 d0                	mov    %edx,%eax
f010f707:	c1 e0 02             	shl    $0x2,%eax
f010f70a:	01 d0                	add    %edx,%eax
f010f70c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f713:	01 d0                	add    %edx,%eax
f010f715:	c1 e0 03             	shl    $0x3,%eax
f010f718:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010f71f:	83 ec 0c             	sub    $0xc,%esp
f010f722:	50                   	push   %eax
f010f723:	e8 7a 09 02 00       	call   f01300a2 <free_block>
f010f728:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f010f72b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f72e:	89 d0                	mov    %edx,%eax
f010f730:	c1 e0 02             	shl    $0x2,%eax
f010f733:	01 d0                	add    %edx,%eax
f010f735:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f73c:	01 d0                	add    %edx,%eax
f010f73e:	c1 e0 03             	shl    $0x3,%eax
f010f741:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010f748:	83 ec 0c             	sub    $0xc,%esp
f010f74b:	50                   	push   %eax
f010f74c:	e8 86 03 02 00       	call   f012fad7 <get_block_size>
f010f751:	83 c4 10             	add    $0x10,%esp
f010f754:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f010f757:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f75a:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f761:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010f764:	74 2b                	je     f010f791 <test_free_block_FF+0x3d4>
		{
			if (is_correct)
f010f766:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f76a:	74 25                	je     f010f791 <test_free_block_FF+0x3d4>
			{
				is_correct = 0;
f010f76c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f010f773:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f776:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f77d:	ff 75 bc             	pushl  -0x44(%ebp)
f010f780:	50                   	push   %eax
f010f781:	ff 75 d0             	pushl  -0x30(%ebp)
f010f784:	68 a4 50 13 f0       	push   $0xf01350a4
f010f789:	e8 a3 16 ff ff       	call   f0100e31 <cprintf>
f010f78e:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f010f791:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f794:	89 d0                	mov    %edx,%eax
f010f796:	c1 e0 02             	shl    $0x2,%eax
f010f799:	01 d0                	add    %edx,%eax
f010f79b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f7a2:	01 d0                	add    %edx,%eax
f010f7a4:	c1 e0 03             	shl    $0x3,%eax
f010f7a7:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010f7ae:	83 ec 0c             	sub    $0xc,%esp
f010f7b1:	50                   	push   %eax
f010f7b2:	e8 36 03 02 00       	call   f012faed <is_free_block>
f010f7b7:	83 c4 10             	add    $0x10,%esp
f010f7ba:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f010f7bd:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f010f7c1:	74 20                	je     f010f7e3 <test_free_block_FF+0x426>
		{
			if (is_correct)
f010f7c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f7c7:	74 1a                	je     f010f7e3 <test_free_block_FF+0x426>
			{
				is_correct = 0;
f010f7c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
f010f7d0:	83 ec 08             	sub    $0x8,%esp
f010f7d3:	ff 75 d0             	pushl  -0x30(%ebp)
f010f7d6:	68 08 51 13 f0       	push   $0xf0135108
f010f7db:	e8 51 16 ff ff       	call   f0100e31 <cprintf>
f010f7e0:	83 c4 10             	add    $0x10,%esp
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f7e3:	ff 45 d0             	incl   -0x30(%ebp)
f010f7e6:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f010f7ea:	0f 8e 12 ff ff ff    	jle    f010f702 <test_free_block_FF+0x345>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
			}
		}
	}
	if (is_correct)
f010f7f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f7f4:	74 04                	je     f010f7fa <test_free_block_FF+0x43d>
	{
		eval += 10;
f010f7f6:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f010f7fa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f010f801:	a1 80 b9 2d f0       	mov    0xf02db980,%eax
f010f806:	83 ec 0c             	sub    $0xc,%esp
f010f809:	50                   	push   %eax
f010f80a:	e8 93 08 02 00       	call   f01300a2 <free_block>
f010f80f:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f812:	a1 80 b9 2d f0       	mov    0xf02db980,%eax
f010f817:	83 ec 0c             	sub    $0xc,%esp
f010f81a:	50                   	push   %eax
f010f81b:	e8 b7 02 02 00       	call   f012fad7 <get_block_size>
f010f820:	83 c4 10             	add    $0x10,%esp
f010f823:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize)
f010f826:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f829:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010f82c:	74 1d                	je     f010f84b <test_free_block_FF+0x48e>
	{
		is_correct = 0;
f010f82e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f010f835:	83 ec 04             	sub    $0x4,%esp
f010f838:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f83b:	ff 75 c8             	pushl  -0x38(%ebp)
f010f83e:	68 60 51 13 f0       	push   $0xf0135160
f010f843:	e8 e9 15 ff ff       	call   f0100e31 <cprintf>
f010f848:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f84b:	a1 80 b9 2d f0       	mov    0xf02db980,%eax
f010f850:	83 ec 0c             	sub    $0xc,%esp
f010f853:	50                   	push   %eax
f010f854:	e8 94 02 02 00       	call   f012faed <is_free_block>
f010f859:	83 c4 10             	add    $0x10,%esp
f010f85c:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f85f:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f863:	74 17                	je     f010f87c <test_free_block_FF+0x4bf>
	{
		is_correct = 0;
f010f865:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f86c:	83 ec 0c             	sub    $0xc,%esp
f010f86f:	68 c0 51 13 f0       	push   $0xf01351c0
f010f874:	e8 b8 15 ff ff       	call   f0100e31 <cprintf>
f010f879:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f010f87c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f87f:	83 e8 10             	sub    $0x10,%eax
f010f882:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f885:	83 ec 08             	sub    $0x8,%esp
f010f888:	6a 01                	push   $0x1
f010f88a:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f88d:	e8 72 02 02 00       	call   f012fb04 <alloc_block>
f010f892:	83 c4 10             	add    $0x10,%esp
f010f895:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f898:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f89c:	74 0b                	je     f010f8a9 <test_free_block_FF+0x4ec>
f010f89e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f8a1:	83 c0 10             	add    $0x10,%eax
f010f8a4:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f8a7:	74 17                	je     f010f8c0 <test_free_block_FF+0x503>
	{
		is_correct = 0;
f010f8a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f8b0:	83 ec 0c             	sub    $0xc,%esp
f010f8b3:	68 18 52 13 f0       	push   $0xf0135218
f010f8b8:	e8 74 15 ff ff       	call   f0100e31 <cprintf>
f010f8bd:	83 c4 10             	add    $0x10,%esp
	}
	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f010f8c0:	a1 7c b9 2d f0       	mov    0xf02db97c,%eax
f010f8c5:	83 ec 0c             	sub    $0xc,%esp
f010f8c8:	50                   	push   %eax
f010f8c9:	e8 d4 07 02 00       	call   f01300a2 <free_block>
f010f8ce:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f010f8d1:	a1 7c b9 2d f0       	mov    0xf02db97c,%eax
f010f8d6:	83 ec 0c             	sub    $0xc,%esp
f010f8d9:	50                   	push   %eax
f010f8da:	e8 f8 01 02 00       	call   f012fad7 <get_block_size>
f010f8df:	83 c4 10             	add    $0x10,%esp
f010f8e2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f010f8e5:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f010f8ea:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f8ed:	74 20                	je     f010f90f <test_free_block_FF+0x552>
	{
		is_correct = 0;
f010f8ef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f010f8f6:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f010f8fb:	83 ec 04             	sub    $0x4,%esp
f010f8fe:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f901:	50                   	push   %eax
f010f902:	68 64 52 13 f0       	push   $0xf0135264
f010f907:	e8 25 15 ff ff       	call   f0100e31 <cprintf>
f010f90c:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f010f90f:	a1 7c b9 2d f0       	mov    0xf02db97c,%eax
f010f914:	83 ec 0c             	sub    $0xc,%esp
f010f917:	50                   	push   %eax
f010f918:	e8 d0 01 02 00       	call   f012faed <is_free_block>
f010f91d:	83 c4 10             	add    $0x10,%esp
f010f920:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f923:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f927:	74 17                	je     f010f940 <test_free_block_FF+0x583>
	{
		is_correct = 0;
f010f929:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f930:	83 ec 0c             	sub    $0xc,%esp
f010f933:	68 c4 52 13 f0       	push   $0xf01352c4
f010f938:	e8 f4 14 ff ff       	call   f0100e31 <cprintf>
f010f93d:	83 c4 10             	add    $0x10,%esp
	}
	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f010f940:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010f945:	83 e8 10             	sub    $0x10,%eax
f010f948:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f94b:	83 ec 08             	sub    $0x8,%esp
f010f94e:	6a 01                	push   $0x1
f010f950:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f953:	e8 ac 01 02 00       	call   f012fb04 <alloc_block>
f010f958:	83 c4 10             	add    $0x10,%esp
f010f95b:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f010f95e:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f962:	74 09                	je     f010f96d <test_free_block_FF+0x5b0>
f010f964:	81 7d c0 10 00 00 f6 	cmpl   $0xf6000010,-0x40(%ebp)
f010f96b:	74 17                	je     f010f984 <test_free_block_FF+0x5c7>
	{
		is_correct = 0;
f010f96d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f974:	83 ec 0c             	sub    $0xc,%esp
f010f977:	68 1c 53 13 f0       	push   $0xf013531c
f010f97c:	e8 b0 14 ff ff       	call   f0100e31 <cprintf>
f010f981:	83 c4 10             	add    $0x10,%esp
	}
	//Free 2nd block
	free_block(startVAs[1]);
f010f984:	a1 a4 a3 2d f0       	mov    0xf02da3a4,%eax
f010f989:	83 ec 0c             	sub    $0xc,%esp
f010f98c:	50                   	push   %eax
f010f98d:	e8 10 07 02 00       	call   f01300a2 <free_block>
f010f992:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f010f995:	a1 a4 a3 2d f0       	mov    0xf02da3a4,%eax
f010f99a:	83 ec 0c             	sub    $0xc,%esp
f010f99d:	50                   	push   %eax
f010f99e:	e8 34 01 02 00       	call   f012fad7 <get_block_size>
f010f9a3:	83 c4 10             	add    $0x10,%esp
f010f9a6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0])
f010f9a9:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010f9ae:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f9b1:	74 20                	je     f010f9d3 <test_free_block_FF+0x616>
	{
		is_correct = 0;
f010f9b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f010f9ba:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010f9bf:	83 ec 04             	sub    $0x4,%esp
f010f9c2:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f9c5:	50                   	push   %eax
f010f9c6:	68 68 53 13 f0       	push   $0xf0135368
f010f9cb:	e8 61 14 ff ff       	call   f0100e31 <cprintf>
f010f9d0:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f010f9d3:	a1 a4 a3 2d f0       	mov    0xf02da3a4,%eax
f010f9d8:	83 ec 0c             	sub    $0xc,%esp
f010f9db:	50                   	push   %eax
f010f9dc:	e8 0c 01 02 00       	call   f012faed <is_free_block>
f010f9e1:	83 c4 10             	add    $0x10,%esp
f010f9e4:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f9e7:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f9eb:	74 17                	je     f010fa04 <test_free_block_FF+0x647>
	{
		is_correct = 0;
f010f9ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f9f4:	83 ec 0c             	sub    $0xc,%esp
f010f9f7:	68 c8 53 13 f0       	push   $0xf01353c8
f010f9fc:	e8 30 14 ff ff       	call   f0100e31 <cprintf>
f010fa01:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fa04:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fa08:	74 04                	je     f010fa0e <test_free_block_FF+0x651>
	{
		eval += 10;
f010fa0a:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f010fa0e:	83 ec 0c             	sub    $0xc,%esp
f010fa11:	68 20 54 13 f0       	push   $0xf0135420
f010fa16:	e8 16 14 ff ff       	call   f0100e31 <cprintf>
f010fa1b:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f010fa1e:	83 ec 0c             	sub    $0xc,%esp
f010fa21:	68 5c 54 13 f0       	push   $0xf013545c
f010fa26:	e8 06 14 ff ff       	call   f0100e31 <cprintf>
f010fa2b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fa2e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f010fa35:	c7 45 ac 78 05 00 00 	movl   $0x578,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fa3c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa3f:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fa46:	83 ec 0c             	sub    $0xc,%esp
f010fa49:	50                   	push   %eax
f010fa4a:	e8 53 06 02 00       	call   f01300a2 <free_block>
f010fa4f:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fa52:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa55:	48                   	dec    %eax
f010fa56:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fa5d:	83 ec 0c             	sub    $0xc,%esp
f010fa60:	50                   	push   %eax
f010fa61:	e8 71 00 02 00       	call   f012fad7 <get_block_size>
f010fa66:	83 c4 10             	add    $0x10,%esp
f010fa69:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f010fa6c:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f010fa72:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fa75:	01 d0                	add    %edx,%eax
f010fa77:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fa7a:	74 26                	je     f010faa2 <test_free_block_FF+0x6e5>
	{
		is_correct = 0;
f010fa7c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f010fa83:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f010fa89:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fa8c:	01 d0                	add    %edx,%eax
f010fa8e:	83 ec 04             	sub    $0x4,%esp
f010fa91:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fa94:	50                   	push   %eax
f010fa95:	68 74 54 13 f0       	push   $0xf0135474
f010fa9a:	e8 92 13 ff ff       	call   f0100e31 <cprintf>
f010fa9f:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010faa2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010faa5:	48                   	dec    %eax
f010faa6:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010faad:	83 ec 0c             	sub    $0xc,%esp
f010fab0:	50                   	push   %eax
f010fab1:	e8 37 00 02 00       	call   f012faed <is_free_block>
f010fab6:	83 c4 10             	add    $0x10,%esp
f010fab9:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fabc:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fac0:	74 17                	je     f010fad9 <test_free_block_FF+0x71c>
	{
		is_correct = 0;
f010fac2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fac9:	83 ec 0c             	sub    $0xc,%esp
f010facc:	68 d4 54 13 f0       	push   $0xf01354d4
f010fad1:	e8 5b 13 ff ff       	call   f0100e31 <cprintf>
f010fad6:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010fad9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fadc:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fae3:	83 ec 0c             	sub    $0xc,%esp
f010fae6:	50                   	push   %eax
f010fae7:	e8 eb ff 01 00       	call   f012fad7 <get_block_size>
f010faec:	83 c4 10             	add    $0x10,%esp
f010faef:	85 c0                	test   %eax,%eax
f010faf1:	75 1a                	jne    f010fb0d <test_free_block_FF+0x750>
f010faf3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010faf6:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fafd:	83 ec 0c             	sub    $0xc,%esp
f010fb00:	50                   	push   %eax
f010fb01:	e8 e7 ff 01 00       	call   f012faed <is_free_block>
f010fb06:	83 c4 10             	add    $0x10,%esp
f010fb09:	84 c0                	test   %al,%al
f010fb0b:	74 17                	je     f010fb24 <test_free_block_FF+0x767>
	{
		is_correct = 0;
f010fb0d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fb14:	83 ec 0c             	sub    $0xc,%esp
f010fb17:	68 2c 55 13 f0       	push   $0xf013552c
f010fb1c:	e8 10 13 ff ff       	call   f0100e31 <cprintf>
f010fb21:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f010fb24:	83 ec 0c             	sub    $0xc,%esp
f010fb27:	68 96 55 13 f0       	push   $0xf0135596
f010fb2c:	e8 00 13 ff ff       	call   f0100e31 <cprintf>
f010fb31:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f010fb34:	c7 45 ac 91 01 00 00 	movl   $0x191,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fb3b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb3e:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fb45:	83 ec 0c             	sub    $0xc,%esp
f010fb48:	50                   	push   %eax
f010fb49:	e8 54 05 02 00       	call   f01300a2 <free_block>
f010fb4e:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fb51:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb54:	48                   	dec    %eax
f010fb55:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fb5c:	83 ec 0c             	sub    $0xc,%esp
f010fb5f:	50                   	push   %eax
f010fb60:	e8 72 ff 01 00       	call   f012fad7 <get_block_size>
f010fb65:	83 c4 10             	add    $0x10,%esp
f010fb68:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f010fb6b:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f010fb71:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f010fb76:	01 d0                	add    %edx,%eax
f010fb78:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fb7b:	74 28                	je     f010fba5 <test_free_block_FF+0x7e8>
	{
		is_correct = 0;
f010fb7d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f010fb84:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f010fb8a:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f010fb8f:	01 d0                	add    %edx,%eax
f010fb91:	83 ec 04             	sub    $0x4,%esp
f010fb94:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fb97:	50                   	push   %eax
f010fb98:	68 b0 55 13 f0       	push   $0xf01355b0
f010fb9d:	e8 8f 12 ff ff       	call   f0100e31 <cprintf>
f010fba2:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fba5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fba8:	48                   	dec    %eax
f010fba9:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fbb0:	83 ec 0c             	sub    $0xc,%esp
f010fbb3:	50                   	push   %eax
f010fbb4:	e8 34 ff 01 00       	call   f012faed <is_free_block>
f010fbb9:	83 c4 10             	add    $0x10,%esp
f010fbbc:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fbbf:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fbc3:	74 17                	je     f010fbdc <test_free_block_FF+0x81f>
	{
		is_correct = 0;
f010fbc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fbcc:	83 ec 0c             	sub    $0xc,%esp
f010fbcf:	68 10 56 13 f0       	push   $0xf0135610
f010fbd4:	e8 58 12 ff ff       	call   f0100e31 <cprintf>
f010fbd9:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010fbdc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbdf:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fbe6:	83 ec 0c             	sub    $0xc,%esp
f010fbe9:	50                   	push   %eax
f010fbea:	e8 e8 fe 01 00       	call   f012fad7 <get_block_size>
f010fbef:	83 c4 10             	add    $0x10,%esp
f010fbf2:	85 c0                	test   %eax,%eax
f010fbf4:	75 1a                	jne    f010fc10 <test_free_block_FF+0x853>
f010fbf6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbf9:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fc00:	83 ec 0c             	sub    $0xc,%esp
f010fc03:	50                   	push   %eax
f010fc04:	e8 e4 fe 01 00       	call   f012faed <is_free_block>
f010fc09:	83 c4 10             	add    $0x10,%esp
f010fc0c:	84 c0                	test   %al,%al
f010fc0e:	74 17                	je     f010fc27 <test_free_block_FF+0x86a>
	{
		is_correct = 0;
f010fc10:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fc17:	83 ec 0c             	sub    $0xc,%esp
f010fc1a:	68 68 56 13 f0       	push   $0xf0135668
f010fc1f:	e8 0d 12 ff ff       	call   f0100e31 <cprintf>
f010fc24:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fc27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fc2b:	74 04                	je     f010fc31 <test_free_block_FF+0x874>
	{
		eval += 15;
f010fc2d:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f010fc31:	83 ec 0c             	sub    $0xc,%esp
f010fc34:	68 d4 56 13 f0       	push   $0xf01356d4
f010fc39:	e8 f3 11 ff ff       	call   f0100e31 <cprintf>
f010fc3e:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f010fc41:	83 ec 0c             	sub    $0xc,%esp
f010fc44:	68 0c 57 13 f0       	push   $0xf013570c
f010fc49:	e8 e3 11 ff ff       	call   f0100e31 <cprintf>
f010fc4e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fc51:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f010fc58:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fc5f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc62:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fc69:	83 ec 0c             	sub    $0xc,%esp
f010fc6c:	50                   	push   %eax
f010fc6d:	e8 30 04 02 00       	call   f01300a2 <free_block>
f010fc72:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fc75:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc78:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fc7f:	83 ec 0c             	sub    $0xc,%esp
f010fc82:	50                   	push   %eax
f010fc83:	e8 4f fe 01 00       	call   f012fad7 <get_block_size>
f010fc88:	83 c4 10             	add    $0x10,%esp
f010fc8b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f010fc8e:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fc94:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010fc99:	01 d0                	add    %edx,%eax
f010fc9b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fc9e:	74 28                	je     f010fcc8 <test_free_block_FF+0x90b>
	{
		is_correct = 0;
f010fca0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f010fca7:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fcad:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010fcb2:	01 d0                	add    %edx,%eax
f010fcb4:	83 ec 04             	sub    $0x4,%esp
f010fcb7:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fcba:	50                   	push   %eax
f010fcbb:	68 b0 55 13 f0       	push   $0xf01355b0
f010fcc0:	e8 6c 11 ff ff       	call   f0100e31 <cprintf>
f010fcc5:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fcc8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fccb:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fcd2:	83 ec 0c             	sub    $0xc,%esp
f010fcd5:	50                   	push   %eax
f010fcd6:	e8 12 fe 01 00       	call   f012faed <is_free_block>
f010fcdb:	83 c4 10             	add    $0x10,%esp
f010fcde:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fce1:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fce5:	74 17                	je     f010fcfe <test_free_block_FF+0x941>
	{
		is_correct = 0;
f010fce7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fcee:	83 ec 0c             	sub    $0xc,%esp
f010fcf1:	68 10 56 13 f0       	push   $0xf0135610
f010fcf6:	e8 36 11 ff ff       	call   f0100e31 <cprintf>
f010fcfb:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fcfe:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd01:	40                   	inc    %eax
f010fd02:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fd09:	83 ec 0c             	sub    $0xc,%esp
f010fd0c:	50                   	push   %eax
f010fd0d:	e8 c5 fd 01 00       	call   f012fad7 <get_block_size>
f010fd12:	83 c4 10             	add    $0x10,%esp
f010fd15:	85 c0                	test   %eax,%eax
f010fd17:	75 1b                	jne    f010fd34 <test_free_block_FF+0x977>
f010fd19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd1c:	40                   	inc    %eax
f010fd1d:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fd24:	83 ec 0c             	sub    $0xc,%esp
f010fd27:	50                   	push   %eax
f010fd28:	e8 c0 fd 01 00       	call   f012faed <is_free_block>
f010fd2d:	83 c4 10             	add    $0x10,%esp
f010fd30:	84 c0                	test   %al,%al
f010fd32:	74 17                	je     f010fd4b <test_free_block_FF+0x98e>
	{
		is_correct = 0;
f010fd34:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fd3b:	83 ec 0c             	sub    $0xc,%esp
f010fd3e:	68 68 56 13 f0       	push   $0xf0135668
f010fd43:	e8 e9 10 ff ff       	call   f0100e31 <cprintf>
f010fd48:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f010fd4b:	83 ec 0c             	sub    $0xc,%esp
f010fd4e:	68 21 57 13 f0       	push   $0xf0135721
f010fd53:	e8 d9 10 ff ff       	call   f0100e31 <cprintf>
f010fd58:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f010fd5b:	c7 45 ac c7 00 00 00 	movl   $0xc7,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fd62:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd65:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fd6c:	83 ec 0c             	sub    $0xc,%esp
f010fd6f:	50                   	push   %eax
f010fd70:	e8 2d 03 02 00       	call   f01300a2 <free_block>
f010fd75:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fd78:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd7b:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fd82:	83 ec 0c             	sub    $0xc,%esp
f010fd85:	50                   	push   %eax
f010fd86:	e8 4c fd 01 00       	call   f012fad7 <get_block_size>
f010fd8b:	83 c4 10             	add    $0x10,%esp
f010fd8e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f010fd91:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fd97:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f010fd9c:	01 d0                	add    %edx,%eax
f010fd9e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fda1:	74 28                	je     f010fdcb <test_free_block_FF+0xa0e>
	{
		is_correct = 0;
f010fda3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f010fdaa:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fdb0:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f010fdb5:	01 d0                	add    %edx,%eax
f010fdb7:	83 ec 04             	sub    $0x4,%esp
f010fdba:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fdbd:	50                   	push   %eax
f010fdbe:	68 3c 57 13 f0       	push   $0xf013573c
f010fdc3:	e8 69 10 ff ff       	call   f0100e31 <cprintf>
f010fdc8:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fdcb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fdce:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fdd5:	83 ec 0c             	sub    $0xc,%esp
f010fdd8:	50                   	push   %eax
f010fdd9:	e8 0f fd 01 00       	call   f012faed <is_free_block>
f010fdde:	83 c4 10             	add    $0x10,%esp
f010fde1:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fde4:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fde8:	74 17                	je     f010fe01 <test_free_block_FF+0xa44>
	{
		is_correct = 0;
f010fdea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fdf1:	83 ec 0c             	sub    $0xc,%esp
f010fdf4:	68 a0 57 13 f0       	push   $0xf01357a0
f010fdf9:	e8 33 10 ff ff       	call   f0100e31 <cprintf>
f010fdfe:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fe01:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe04:	40                   	inc    %eax
f010fe05:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fe0c:	83 ec 0c             	sub    $0xc,%esp
f010fe0f:	50                   	push   %eax
f010fe10:	e8 c2 fc 01 00       	call   f012fad7 <get_block_size>
f010fe15:	83 c4 10             	add    $0x10,%esp
f010fe18:	85 c0                	test   %eax,%eax
f010fe1a:	75 1b                	jne    f010fe37 <test_free_block_FF+0xa7a>
f010fe1c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe1f:	40                   	inc    %eax
f010fe20:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fe27:	83 ec 0c             	sub    $0xc,%esp
f010fe2a:	50                   	push   %eax
f010fe2b:	e8 bd fc 01 00       	call   f012faed <is_free_block>
f010fe30:	83 c4 10             	add    $0x10,%esp
f010fe33:	84 c0                	test   %al,%al
f010fe35:	74 17                	je     f010fe4e <test_free_block_FF+0xa91>
	{
		is_correct = 0;
f010fe37:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fe3e:	83 ec 0c             	sub    $0xc,%esp
f010fe41:	68 f8 57 13 f0       	push   $0xf01357f8
f010fe46:	e8 e6 0f ff ff       	call   f0100e31 <cprintf>
f010fe4b:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fe4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fe52:	74 04                	je     f010fe58 <test_free_block_FF+0xa9b>
	{
		eval += 15;
f010fe54:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f010fe58:	83 ec 0c             	sub    $0xc,%esp
f010fe5b:	68 64 58 13 f0       	push   $0xf0135864
f010fe60:	e8 cc 0f ff ff       	call   f0100e31 <cprintf>
f010fe65:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fe68:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f010fe6f:	c7 45 ac 1e 03 00 00 	movl   $0x31e,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fe76:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe79:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fe80:	83 ec 0c             	sub    $0xc,%esp
f010fe83:	50                   	push   %eax
f010fe84:	e8 19 02 02 00       	call   f01300a2 <free_block>
f010fe89:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f010fe8c:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fe93:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe96:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010fe9d:	83 ec 0c             	sub    $0xc,%esp
f010fea0:	50                   	push   %eax
f010fea1:	e8 fc 01 02 00       	call   f01300a2 <free_block>
f010fea6:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fea9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010feac:	48                   	dec    %eax
f010fead:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010feb4:	83 ec 0c             	sub    $0xc,%esp
f010feb7:	50                   	push   %eax
f010feb8:	e8 1a fc 01 00       	call   f012fad7 <get_block_size>
f010febd:	83 c4 10             	add    $0x10,%esp
f010fec0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f010fec3:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f010fec9:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f010fece:	01 c2                	add    %eax,%edx
f010fed0:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f010fed5:	01 d0                	add    %edx,%eax
f010fed7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010feda:	74 2f                	je     f010ff0b <test_free_block_FF+0xb4e>
	{
		is_correct = 0;
f010fedc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f010fee3:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f010fee9:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f010feee:	01 c2                	add    %eax,%edx
f010fef0:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f010fef5:	01 d0                	add    %edx,%eax
f010fef7:	83 ec 04             	sub    $0x4,%esp
f010fefa:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fefd:	50                   	push   %eax
f010fefe:	68 a4 58 13 f0       	push   $0xf01358a4
f010ff03:	e8 29 0f ff ff       	call   f0100e31 <cprintf>
f010ff08:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010ff0b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ff0e:	48                   	dec    %eax
f010ff0f:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010ff16:	83 ec 0c             	sub    $0xc,%esp
f010ff19:	50                   	push   %eax
f010ff1a:	e8 ce fb 01 00       	call   f012faed <is_free_block>
f010ff1f:	83 c4 10             	add    $0x10,%esp
f010ff22:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010ff25:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010ff29:	74 17                	je     f010ff42 <test_free_block_FF+0xb85>
	{
		is_correct = 0;
f010ff2b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010ff32:	83 ec 0c             	sub    $0xc,%esp
f010ff35:	68 08 59 13 f0       	push   $0xf0135908
f010ff3a:	e8 f2 0e ff ff       	call   f0100e31 <cprintf>
f010ff3f:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010ff42:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ff45:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010ff4c:	83 ec 0c             	sub    $0xc,%esp
f010ff4f:	50                   	push   %eax
f010ff50:	e8 82 fb 01 00       	call   f012fad7 <get_block_size>
f010ff55:	83 c4 10             	add    $0x10,%esp
f010ff58:	85 c0                	test   %eax,%eax
f010ff5a:	75 50                	jne    f010ffac <test_free_block_FF+0xbef>
f010ff5c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ff5f:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010ff66:	83 ec 0c             	sub    $0xc,%esp
f010ff69:	50                   	push   %eax
f010ff6a:	e8 7e fb 01 00       	call   f012faed <is_free_block>
f010ff6f:	83 c4 10             	add    $0x10,%esp
f010ff72:	84 c0                	test   %al,%al
f010ff74:	75 36                	jne    f010ffac <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010ff76:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ff79:	40                   	inc    %eax
f010ff7a:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010ff81:	83 ec 0c             	sub    $0xc,%esp
f010ff84:	50                   	push   %eax
f010ff85:	e8 4d fb 01 00       	call   f012fad7 <get_block_size>
f010ff8a:	83 c4 10             	add    $0x10,%esp
	if (block_status != 1)
	{
		is_correct = 0;
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010ff8d:	85 c0                	test   %eax,%eax
f010ff8f:	75 1b                	jne    f010ffac <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010ff91:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ff94:	40                   	inc    %eax
f010ff95:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f010ff9c:	83 ec 0c             	sub    $0xc,%esp
f010ff9f:	50                   	push   %eax
f010ffa0:	e8 48 fb 01 00       	call   f012faed <is_free_block>
f010ffa5:	83 c4 10             	add    $0x10,%esp
f010ffa8:	84 c0                	test   %al,%al
f010ffaa:	74 17                	je     f010ffc3 <test_free_block_FF+0xc06>
	{
		is_correct = 0;
f010ffac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010ffb3:	83 ec 0c             	sub    $0xc,%esp
f010ffb6:	68 60 59 13 f0       	push   $0xf0135960
f010ffbb:	e8 71 0e ff ff       	call   f0100e31 <cprintf>
f010ffc0:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ffc3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ffc7:	74 04                	je     f010ffcd <test_free_block_FF+0xc10>
	{
		eval += 20;
f010ffc9:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f010ffcd:	83 ec 0c             	sub    $0xc,%esp
f010ffd0:	68 cc 59 13 f0       	push   $0xf01359cc
f010ffd5:	e8 57 0e ff ff       	call   f0100e31 <cprintf>
f010ffda:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f010ffdd:	83 ec 0c             	sub    $0xc,%esp
f010ffe0:	68 10 5a 13 f0       	push   $0xf0135a10
f010ffe5:	e8 47 0e ff ff       	call   f0100e31 <cprintf>
f010ffea:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ffed:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData();
f010fff4:	c7 45 c4 f0 13 00 00 	movl   $0x13f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fffb:	83 ec 08             	sub    $0x8,%esp
f010fffe:	6a 01                	push   $0x1
f0110000:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110003:	e8 fc fa 01 00       	call   f012fb04 <alloc_block>
f0110008:	83 c4 10             	add    $0x10,%esp
f011000b:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f011000e:	c7 45 a8 10 00 00 f6 	movl   $0xf6000010,-0x58(%ebp)
	if(va == NULL || (va != expected))
f0110015:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0110019:	74 08                	je     f0110023 <test_free_block_FF+0xc66>
f011001b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011001e:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110021:	74 1d                	je     f0110040 <test_free_block_FF+0xc83>
	{
		is_correct = 0;
f0110023:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011002a:	83 ec 04             	sub    $0x4,%esp
f011002d:	ff 75 c0             	pushl  -0x40(%ebp)
f0110030:	ff 75 a8             	pushl  -0x58(%ebp)
f0110033:	68 38 5a 13 f0       	push   $0xf0135a38
f0110038:	e8 f4 0d ff ff       	call   f0100e31 <cprintf>
f011003d:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData();
f0110040:	c7 45 c4 f0 0b 00 00 	movl   $0xbf0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110047:	83 ec 08             	sub    $0x8,%esp
f011004a:	6a 01                	push   $0x1
f011004c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011004f:	e8 b0 fa 01 00       	call   f012fb04 <alloc_block>
f0110054:	83 c4 10             	add    $0x10,%esp
f0110057:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f011005a:	c7 45 a8 10 14 00 f6 	movl   $0xf6001410,-0x58(%ebp)
	if(va == NULL || (va != expected))
f0110061:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0110065:	74 08                	je     f011006f <test_free_block_FF+0xcb2>
f0110067:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011006a:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f011006d:	74 1d                	je     f011008c <test_free_block_FF+0xccf>
	{
		is_correct = 0;
f011006f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0110076:	83 ec 04             	sub    $0x4,%esp
f0110079:	ff 75 c0             	pushl  -0x40(%ebp)
f011007c:	ff 75 a8             	pushl  -0x58(%ebp)
f011007f:	68 9c 5a 13 f0       	push   $0xf0135a9c
f0110084:	e8 a8 0d ff ff       	call   f0100e31 <cprintf>
f0110089:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f011008c:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110093:	83 ec 08             	sub    $0x8,%esp
f0110096:	6a 01                	push   $0x1
f0110098:	ff 75 c4             	pushl  -0x3c(%ebp)
f011009b:	e8 64 fa 01 00       	call   f012fb04 <alloc_block>
f01100a0:	83 c4 10             	add    $0x10,%esp
f01100a3:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f01100a6:	a1 bc a6 2d f0       	mov    0xf02da6bc,%eax
f01100ab:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f01100ae:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f01100b2:	74 08                	je     f01100bc <test_free_block_FF+0xcff>
f01100b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01100b7:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f01100ba:	74 1d                	je     f01100d9 <test_free_block_FF+0xd1c>
	{
		is_correct = 0;
f01100bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f01100c3:	83 ec 04             	sub    $0x4,%esp
f01100c6:	ff 75 c0             	pushl  -0x40(%ebp)
f01100c9:	ff 75 a8             	pushl  -0x58(%ebp)
f01100cc:	68 00 5b 13 f0       	push   $0xf0135b00
f01100d1:	e8 5b 0d ff ff       	call   f0100e31 <cprintf>
f01100d6:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f01100d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01100dd:	74 04                	je     f01100e3 <test_free_block_FF+0xd26>
	{
		eval += 10;
f01100df:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f01100e3:	83 ec 0c             	sub    $0xc,%esp
f01100e6:	68 64 5b 13 f0       	push   $0xf0135b64
f01100eb:	e8 41 0d ff ff       	call   f0100e31 <cprintf>
f01100f0:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01100f3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f01100fa:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110101:	83 ec 08             	sub    $0x8,%esp
f0110104:	6a 01                	push   $0x1
f0110106:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110109:	e8 f6 f9 01 00       	call   f012fb04 <alloc_block>
f011010e:	83 c4 10             	add    $0x10,%esp
f0110111:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f0110114:	a1 18 b0 2d f0       	mov    0xf02db018,%eax
f0110119:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f011011c:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0110120:	74 08                	je     f011012a <test_free_block_FF+0xd6d>
f0110122:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110125:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110128:	74 1d                	je     f0110147 <test_free_block_FF+0xd8a>
	{
		is_correct = 0;
f011012a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0110131:	83 ec 04             	sub    $0x4,%esp
f0110134:	ff 75 c0             	pushl  -0x40(%ebp)
f0110137:	ff 75 a8             	pushl  -0x58(%ebp)
f011013a:	68 94 5b 13 f0       	push   $0xf0135b94
f011013f:	e8 ed 0c ff ff       	call   f0100e31 <cprintf>
f0110144:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110147:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011014b:	74 04                	je     f0110151 <test_free_block_FF+0xd94>
	{
		eval += 10;
f011014d:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f0110151:	83 ec 0c             	sub    $0xc,%esp
f0110154:	68 f8 5b 13 f0       	push   $0xf0135bf8
f0110159:	e8 d3 0c ff ff       	call   f0100e31 <cprintf>
f011015e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110161:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData();
f0110168:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011016f:	83 ec 08             	sub    $0x8,%esp
f0110172:	6a 01                	push   $0x1
f0110174:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110177:	e8 88 f9 01 00       	call   f012fb04 <alloc_block>
f011017c:	83 c4 10             	add    $0x10,%esp
f011017f:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0110182:	a1 e0 a9 2d f0       	mov    0xf02da9e0,%eax
f0110187:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f011018a:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011018e:	74 08                	je     f0110198 <test_free_block_FF+0xddb>
f0110190:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110193:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110196:	74 1d                	je     f01101b5 <test_free_block_FF+0xdf8>
	{
		is_correct = 0;
f0110198:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011019f:	83 ec 04             	sub    $0x4,%esp
f01101a2:	ff 75 c0             	pushl  -0x40(%ebp)
f01101a5:	ff 75 a8             	pushl  -0x58(%ebp)
f01101a8:	68 94 5b 13 f0       	push   $0xf0135b94
f01101ad:	e8 7f 0c ff ff       	call   f0100e31 <cprintf>
f01101b2:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData();
f01101b5:	c7 45 c4 f0 1f 00 00 	movl   $0x1ff0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01101bc:	83 ec 08             	sub    $0x8,%esp
f01101bf:	6a 01                	push   $0x1
f01101c1:	ff 75 c4             	pushl  -0x3c(%ebp)
f01101c4:	e8 3b f9 01 00       	call   f012fb04 <alloc_block>
f01101c9:	83 c4 10             	add    $0x10,%esp
f01101cc:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f01101cf:	a1 7c b9 2d f0       	mov    0xf02db97c,%eax
f01101d4:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f01101d7:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f01101db:	74 08                	je     f01101e5 <test_free_block_FF+0xe28>
f01101dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01101e0:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f01101e3:	74 1d                	je     f0110202 <test_free_block_FF+0xe45>
	{
		is_correct = 0;
f01101e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f01101ec:	83 ec 04             	sub    $0x4,%esp
f01101ef:	ff 75 c0             	pushl  -0x40(%ebp)
f01101f2:	ff 75 a8             	pushl  -0x58(%ebp)
f01101f5:	68 20 5c 13 f0       	push   $0xf0135c20
f01101fa:	e8 32 0c ff ff       	call   f0100e31 <cprintf>
f01101ff:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110202:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110206:	74 04                	je     f011020c <test_free_block_FF+0xe4f>
	{
		eval += 10;
f0110208:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f011020c:	83 ec 08             	sub    $0x8,%esp
f011020f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110212:	68 84 5c 13 f0       	push   $0xf0135c84
f0110217:	e8 15 0c ff ff       	call   f0100e31 <cprintf>
f011021c:	83 c4 10             	add    $0x10,%esp

}
f011021f:	90                   	nop
f0110220:	c9                   	leave  
f0110221:	c3                   	ret    

f0110222 <test_free_block_BF>:

void test_free_block_BF()
{
f0110222:	55                   	push   %ebp
f0110223:	89 e5                	mov    %esp,%ebp
f0110225:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f0110228:	83 ec 0c             	sub    $0xc,%esp
f011022b:	68 f4 4d 13 f0       	push   $0xf0134df4
f0110230:	e8 fc 0b ff ff       	call   f0100e31 <cprintf>
f0110235:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f0110238:	83 ec 0c             	sub    $0xc,%esp
f011023b:	68 34 4e 13 f0       	push   $0xf0134e34
f0110240:	e8 ec 0b ff ff       	call   f0100e31 <cprintf>
f0110245:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f0110248:	83 ec 0c             	sub    $0xc,%esp
f011024b:	68 f4 4d 13 f0       	push   $0xf0134df4
f0110250:	e8 dc 0b ff ff       	call   f0100e31 <cprintf>
f0110255:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f0110258:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f011025f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110262:	83 ec 08             	sub    $0x8,%esp
f0110265:	50                   	push   %eax
f0110266:	68 00 00 00 f6       	push   $0xf6000000
f011026b:	e8 ad f9 01 00       	call   f012fc1d <initialize_dynamic_allocator>
f0110270:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f0110273:	83 ec 0c             	sub    $0xc,%esp
f0110276:	68 74 4e 13 f0       	push   $0xf0134e74
f011027b:	e8 b1 0b ff ff       	call   f0100e31 <cprintf>
f0110280:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f0110283:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f011028a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0110291:	eb 2a                	jmp    f01102bd <test_free_block_BF+0x9b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110293:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0110296:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f011029d:	89 d0                	mov    %edx,%eax
f011029f:	c1 e0 02             	shl    $0x2,%eax
f01102a2:	01 d0                	add    %edx,%eax
f01102a4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01102ab:	01 d0                	add    %edx,%eax
f01102ad:	c1 e0 03             	shl    $0x3,%eax
f01102b0:	89 c2                	mov    %eax,%edx
f01102b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01102b5:	01 d0                	add    %edx,%eax
f01102b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f01102ba:	ff 45 f0             	incl   -0x10(%ebp)
f01102bd:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f01102c1:	7e d0                	jle    f0110293 <test_free_block_BF+0x71>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f01102c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01102c6:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01102c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f01102cc:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f01102d0:	7f 17                	jg     f01102e9 <test_free_block_BF+0xc7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f01102d2:	83 ec 04             	sub    $0x4,%esp
f01102d5:	68 cc 4e 13 f0       	push   $0xf0134ecc
f01102da:	68 90 03 00 00       	push   $0x390
f01102df:	68 50 44 13 f0       	push   $0xf0134450
f01102e4:	e8 c7 fe fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f01102e9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f01102f0:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f01102f7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01102fe:	e9 f8 00 00 00       	jmp    f01103fb <test_free_block_BF+0x1d9>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110303:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011030a:	e9 dc 00 00 00       	jmp    f01103eb <test_free_block_BF+0x1c9>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f011030f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110312:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f0110319:	83 e8 10             	sub    $0x10,%eax
f011031c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f011031f:	83 ec 08             	sub    $0x8,%esp
f0110322:	6a 03                	push   $0x3
f0110324:	ff 75 cc             	pushl  -0x34(%ebp)
f0110327:	e8 d8 f7 01 00       	call   f012fb04 <alloc_block>
f011032c:	83 c4 10             	add    $0x10,%esp
f011032f:	89 c2                	mov    %eax,%edx
f0110331:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110334:	89 14 85 a0 a3 2d f0 	mov    %edx,-0xfd25c60(,%eax,4)
f011033b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011033e:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110345:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110348:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011034b:	d1 e8                	shr    %eax
f011034d:	89 c2                	mov    %eax,%edx
f011034f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110352:	01 c2                	add    %eax,%edx
f0110354:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110357:	89 14 85 a0 cf 2d f0 	mov    %edx,-0xfd23060(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f011035e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110361:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110364:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110367:	01 c2                	add    %eax,%edx
f0110369:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011036c:	89 14 85 a0 b9 2d f0 	mov    %edx,-0xfd24660(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110373:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110377:	74 0b                	je     f0110384 <test_free_block_BF+0x162>
f0110379:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011037c:	83 c0 10             	add    $0x10,%eax
f011037f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0110382:	74 24                	je     f01103a8 <test_free_block_BF+0x186>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0110384:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110387:	83 c0 10             	add    $0x10,%eax
f011038a:	83 ec 08             	sub    $0x8,%esp
f011038d:	ff 75 c8             	pushl  -0x38(%ebp)
f0110390:	50                   	push   %eax
f0110391:	ff 75 ec             	pushl  -0x14(%ebp)
f0110394:	68 c0 5c 13 f0       	push   $0xf0135cc0
f0110399:	68 9f 03 00 00       	push   $0x39f
f011039e:	68 50 44 13 f0       	push   $0xf0134450
f01103a3:	e8 08 fe fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f01103a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01103ab:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01103b2:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f01103b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103b8:	8b 14 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%edx
f01103bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103c2:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f01103c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103c8:	8b 14 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%edx
f01103cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103d2:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f01103d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103d8:	8b 14 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%edx
f01103df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103e2:	66 89 02             	mov    %ax,(%edx)
			idx++;
f01103e5:	ff 45 ec             	incl   -0x14(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01103e8:	ff 45 e0             	incl   -0x20(%ebp)
f01103eb:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f01103f2:	0f 8e 17 ff ff ff    	jle    f011030f <test_free_block_BF+0xed>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f01103f8:	ff 45 e4             	incl   -0x1c(%ebp)
f01103fb:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f01103ff:	0f 8e fe fe ff ff    	jle    f0110303 <test_free_block_BF+0xe1>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f0110405:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110408:	83 e8 10             	sub    $0x10,%eax
f011040b:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f011040e:	83 ec 08             	sub    $0x8,%esp
f0110411:	6a 03                	push   $0x3
f0110413:	ff 75 cc             	pushl  -0x34(%ebp)
f0110416:	e8 e9 f6 01 00       	call   f012fb04 <alloc_block>
f011041b:	83 c4 10             	add    $0x10,%esp
f011041e:	89 c2                	mov    %eax,%edx
f0110420:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110423:	89 14 85 a0 a3 2d f0 	mov    %edx,-0xfd25c60(,%eax,4)
f011042a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011042d:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110434:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0110437:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011043a:	d1 e8                	shr    %eax
f011043c:	89 c2                	mov    %eax,%edx
f011043e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110441:	01 c2                	add    %eax,%edx
f0110443:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110446:	89 14 85 a0 cf 2d f0 	mov    %edx,-0xfd23060(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f011044d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110450:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110453:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110456:	01 c2                	add    %eax,%edx
f0110458:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011045b:	89 14 85 a0 b9 2d f0 	mov    %edx,-0xfd24660(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110462:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110466:	74 0b                	je     f0110473 <test_free_block_BF+0x251>
f0110468:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011046b:	83 c0 10             	add    $0x10,%eax
f011046e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0110471:	74 17                	je     f011048a <test_free_block_BF+0x268>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_BF return wrong address.");
f0110473:	83 ec 04             	sub    $0x4,%esp
f0110476:	68 24 5d 13 f0       	push   $0xf0135d24
f011047b:	68 b0 03 00 00       	push   $0x3b0
f0110480:	68 50 44 13 f0       	push   $0xf0134450
f0110485:	e8 26 fd fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f011048a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011048d:	8b 14 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%edx
f0110494:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110497:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f011049a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011049d:	8b 14 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%edx
f01104a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104a7:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f01104aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104ad:	8b 14 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%edx
f01104b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104b7:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f01104ba:	83 ec 0c             	sub    $0xc,%esp
f01104bd:	68 f0 4f 13 f0       	push   $0xf0134ff0
f01104c2:	e8 6a 09 ff ff       	call   f0100e31 <cprintf>
f01104c7:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f01104ca:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01104d1:	eb 59                	jmp    f011052c <test_free_block_BF+0x30a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01104d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01104d6:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01104dd:	66 8b 00             	mov    (%eax),%ax
f01104e0:	98                   	cwtl   
f01104e1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01104e4:	75 26                	jne    f011050c <test_free_block_BF+0x2ea>
f01104e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01104e9:	8b 04 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%eax
f01104f0:	66 8b 00             	mov    (%eax),%ax
f01104f3:	98                   	cwtl   
f01104f4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01104f7:	75 13                	jne    f011050c <test_free_block_BF+0x2ea>
f01104f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01104fc:	8b 04 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%eax
f0110503:	66 8b 00             	mov    (%eax),%ax
f0110506:	98                   	cwtl   
f0110507:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011050a:	74 1d                	je     f0110529 <test_free_block_BF+0x307>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f011050c:	83 ec 0c             	sub    $0xc,%esp
f011050f:	ff 75 dc             	pushl  -0x24(%ebp)
f0110512:	ff 75 dc             	pushl  -0x24(%ebp)
f0110515:	68 6c 5d 13 f0       	push   $0xf0135d6c
f011051a:	68 bc 03 00 00       	push   $0x3bc
f011051f:	68 50 44 13 f0       	push   $0xf0134450
f0110524:	e8 87 fc fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f0110529:	ff 45 dc             	incl   -0x24(%ebp)
f011052c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011052f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110532:	7c 9f                	jl     f01104d3 <test_free_block_BF+0x2b1>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110534:	83 ec 0c             	sub    $0xc,%esp
f0110537:	68 74 50 13 f0       	push   $0xf0135074
f011053c:	e8 f0 08 ff ff       	call   f0100e31 <cprintf>
f0110541:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110544:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011054b:	e9 d8 00 00 00       	jmp    f0110628 <test_free_block_BF+0x406>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0110550:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110553:	89 d0                	mov    %edx,%eax
f0110555:	c1 e0 02             	shl    $0x2,%eax
f0110558:	01 d0                	add    %edx,%eax
f011055a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110561:	01 d0                	add    %edx,%eax
f0110563:	c1 e0 03             	shl    $0x3,%eax
f0110566:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011056d:	83 ec 0c             	sub    $0xc,%esp
f0110570:	50                   	push   %eax
f0110571:	e8 2c fb 01 00       	call   f01300a2 <free_block>
f0110576:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f0110579:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011057c:	89 d0                	mov    %edx,%eax
f011057e:	c1 e0 02             	shl    $0x2,%eax
f0110581:	01 d0                	add    %edx,%eax
f0110583:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011058a:	01 d0                	add    %edx,%eax
f011058c:	c1 e0 03             	shl    $0x3,%eax
f011058f:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110596:	83 ec 0c             	sub    $0xc,%esp
f0110599:	50                   	push   %eax
f011059a:	e8 38 f5 01 00       	call   f012fad7 <get_block_size>
f011059f:	83 c4 10             	add    $0x10,%esp
f01105a2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (block_size != allocSizes[i])
f01105a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01105a8:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01105af:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01105b2:	74 28                	je     f01105dc <test_free_block_BF+0x3ba>
			panic("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f01105b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01105b7:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01105be:	83 ec 08             	sub    $0x8,%esp
f01105c1:	ff 75 c4             	pushl  -0x3c(%ebp)
f01105c4:	50                   	push   %eax
f01105c5:	ff 75 d8             	pushl  -0x28(%ebp)
f01105c8:	68 bc 5d 13 f0       	push   $0xf0135dbc
f01105cd:	68 c9 03 00 00       	push   $0x3c9
f01105d2:	68 50 44 13 f0       	push   $0xf0134450
f01105d7:	e8 d4 fb fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f01105dc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01105df:	89 d0                	mov    %edx,%eax
f01105e1:	c1 e0 02             	shl    $0x2,%eax
f01105e4:	01 d0                	add    %edx,%eax
f01105e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01105ed:	01 d0                	add    %edx,%eax
f01105ef:	c1 e0 03             	shl    $0x3,%eax
f01105f2:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01105f9:	83 ec 0c             	sub    $0xc,%esp
f01105fc:	50                   	push   %eax
f01105fd:	e8 eb f4 01 00       	call   f012faed <is_free_block>
f0110602:	83 c4 10             	add    $0x10,%esp
f0110605:	88 45 c3             	mov    %al,-0x3d(%ebp)
		if (block_status != 1)
f0110608:	80 7d c3 01          	cmpb   $0x1,-0x3d(%ebp)
f011060c:	74 17                	je     f0110625 <test_free_block_BF+0x403>
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f011060e:	ff 75 d8             	pushl  -0x28(%ebp)
f0110611:	68 1c 5e 13 f0       	push   $0xf0135e1c
f0110616:	68 cc 03 00 00       	push   $0x3cc
f011061b:	68 50 44 13 f0       	push   $0xf0134450
f0110620:	e8 8b fb fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110625:	ff 45 d8             	incl   -0x28(%ebp)
f0110628:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f011062c:	0f 8e 1e ff ff ff    	jle    f0110550 <test_free_block_BF+0x32e>
		if (block_status != 1)
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0110632:	a1 80 b9 2d f0       	mov    0xf02db980,%eax
f0110637:	83 ec 0c             	sub    $0xc,%esp
f011063a:	50                   	push   %eax
f011063b:	e8 62 fa 01 00       	call   f01300a2 <free_block>
f0110640:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f0110643:	a1 80 b9 2d f0       	mov    0xf02db980,%eax
f0110648:	83 ec 0c             	sub    $0xc,%esp
f011064b:	50                   	push   %eax
f011064c:	e8 86 f4 01 00       	call   f012fad7 <get_block_size>
f0110651:	83 c4 10             	add    $0x10,%esp
f0110654:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize)
f0110657:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011065a:	39 45 bc             	cmp    %eax,-0x44(%ebp)
f011065d:	74 1d                	je     f011067c <test_free_block_BF+0x45a>
		panic("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize,block_size);
f011065f:	83 ec 0c             	sub    $0xc,%esp
f0110662:	ff 75 bc             	pushl  -0x44(%ebp)
f0110665:	ff 75 d0             	pushl  -0x30(%ebp)
f0110668:	68 74 5e 13 f0       	push   $0xf0135e74
f011066d:	68 d3 03 00 00       	push   $0x3d3
f0110672:	68 50 44 13 f0       	push   $0xf0134450
f0110677:	e8 34 fb fe ff       	call   f01001b0 <_panic>
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f011067c:	a1 80 b9 2d f0       	mov    0xf02db980,%eax
f0110681:	83 ec 0c             	sub    $0xc,%esp
f0110684:	50                   	push   %eax
f0110685:	e8 63 f4 01 00       	call   f012faed <is_free_block>
f011068a:	83 c4 10             	add    $0x10,%esp
f011068d:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110690:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110694:	74 17                	je     f01106ad <test_free_block_BF+0x48b>
		panic("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110696:	83 ec 04             	sub    $0x4,%esp
f0110699:	68 d4 5e 13 f0       	push   $0xf0135ed4
f011069e:	68 d6 03 00 00       	push   $0x3d6
f01106a3:	68 50 44 13 f0       	push   $0xf0134450
f01106a8:	e8 03 fb fe ff       	call   f01001b0 <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f01106ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106b0:	83 e8 10             	sub    $0x10,%eax
f01106b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01106b6:	83 ec 08             	sub    $0x8,%esp
f01106b9:	6a 03                	push   $0x3
f01106bb:	ff 75 cc             	pushl  -0x34(%ebp)
f01106be:	e8 41 f4 01 00       	call   f012fb04 <alloc_block>
f01106c3:	83 c4 10             	add    $0x10,%esp
f01106c6:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01106c9:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01106cd:	74 0b                	je     f01106da <test_free_block_BF+0x4b8>
f01106cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01106d2:	83 c0 10             	add    $0x10,%eax
f01106d5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01106d8:	74 17                	je     f01106f1 <test_free_block_BF+0x4cf>
		panic("test_free_block #6.3: WRONG ALLOC - alloc_block_BF return wrong address.");
f01106da:	83 ec 04             	sub    $0x4,%esp
f01106dd:	68 28 5f 13 f0       	push   $0xf0135f28
f01106e2:	68 dd 03 00 00       	push   $0x3dd
f01106e7:	68 50 44 13 f0       	push   $0xf0134450
f01106ec:	e8 bf fa fe ff       	call   f01001b0 <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f01106f1:	a1 7c b9 2d f0       	mov    0xf02db97c,%eax
f01106f6:	83 ec 0c             	sub    $0xc,%esp
f01106f9:	50                   	push   %eax
f01106fa:	e8 a3 f9 01 00       	call   f01300a2 <free_block>
f01106ff:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f0110702:	a1 7c b9 2d f0       	mov    0xf02db97c,%eax
f0110707:	83 ec 0c             	sub    $0xc,%esp
f011070a:	50                   	push   %eax
f011070b:	e8 c7 f3 01 00       	call   f012fad7 <get_block_size>
f0110710:	83 c4 10             	add    $0x10,%esp
f0110713:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f0110716:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f011071b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011071e:	74 20                	je     f0110740 <test_free_block_BF+0x51e>
		panic("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[numOfAllocs-1],block_size);
f0110720:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f0110725:	83 ec 0c             	sub    $0xc,%esp
f0110728:	ff 75 bc             	pushl  -0x44(%ebp)
f011072b:	50                   	push   %eax
f011072c:	68 74 5f 13 f0       	push   $0xf0135f74
f0110731:	68 e3 03 00 00       	push   $0x3e3
f0110736:	68 50 44 13 f0       	push   $0xf0134450
f011073b:	e8 70 fa fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f0110740:	a1 7c b9 2d f0       	mov    0xf02db97c,%eax
f0110745:	83 ec 0c             	sub    $0xc,%esp
f0110748:	50                   	push   %eax
f0110749:	e8 9f f3 01 00       	call   f012faed <is_free_block>
f011074e:	83 c4 10             	add    $0x10,%esp
f0110751:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110754:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110758:	74 17                	je     f0110771 <test_free_block_BF+0x54f>
		panic("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011075a:	83 ec 04             	sub    $0x4,%esp
f011075d:	68 d4 5f 13 f0       	push   $0xf0135fd4
f0110762:	68 e6 03 00 00       	push   $0x3e6
f0110767:	68 50 44 13 f0       	push   $0xf0134450
f011076c:	e8 3f fa fe ff       	call   f01001b0 <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f0110771:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0110776:	83 e8 10             	sub    $0x10,%eax
f0110779:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011077c:	83 ec 08             	sub    $0x8,%esp
f011077f:	6a 03                	push   $0x3
f0110781:	ff 75 cc             	pushl  -0x34(%ebp)
f0110784:	e8 7b f3 01 00       	call   f012fb04 <alloc_block>
f0110789:	83 c4 10             	add    $0x10,%esp
f011078c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f011078f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110793:	74 09                	je     f011079e <test_free_block_BF+0x57c>
f0110795:	81 7d c8 10 00 00 f6 	cmpl   $0xf6000010,-0x38(%ebp)
f011079c:	74 17                	je     f01107b5 <test_free_block_BF+0x593>
		panic("test_free_block #7.1: WRONG ALLOC - alloc_block_BF return wrong address.");
f011079e:	83 ec 04             	sub    $0x4,%esp
f01107a1:	68 28 60 13 f0       	push   $0xf0136028
f01107a6:	68 ed 03 00 00       	push   $0x3ed
f01107ab:	68 50 44 13 f0       	push   $0xf0134450
f01107b0:	e8 fb f9 fe ff       	call   f01001b0 <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f01107b5:	a1 a4 a3 2d f0       	mov    0xf02da3a4,%eax
f01107ba:	83 ec 0c             	sub    $0xc,%esp
f01107bd:	50                   	push   %eax
f01107be:	e8 df f8 01 00       	call   f01300a2 <free_block>
f01107c3:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f01107c6:	a1 a4 a3 2d f0       	mov    0xf02da3a4,%eax
f01107cb:	83 ec 0c             	sub    $0xc,%esp
f01107ce:	50                   	push   %eax
f01107cf:	e8 03 f3 01 00       	call   f012fad7 <get_block_size>
f01107d4:	83 c4 10             	add    $0x10,%esp
f01107d7:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0])
f01107da:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f01107df:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01107e2:	74 20                	je     f0110804 <test_free_block_BF+0x5e2>
		panic("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0],block_size);
f01107e4:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f01107e9:	83 ec 0c             	sub    $0xc,%esp
f01107ec:	ff 75 bc             	pushl  -0x44(%ebp)
f01107ef:	50                   	push   %eax
f01107f0:	68 74 60 13 f0       	push   $0xf0136074
f01107f5:	68 f3 03 00 00       	push   $0x3f3
f01107fa:	68 50 44 13 f0       	push   $0xf0134450
f01107ff:	e8 ac f9 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[1]) ;
f0110804:	a1 a4 a3 2d f0       	mov    0xf02da3a4,%eax
f0110809:	83 ec 0c             	sub    $0xc,%esp
f011080c:	50                   	push   %eax
f011080d:	e8 db f2 01 00       	call   f012faed <is_free_block>
f0110812:	83 c4 10             	add    $0x10,%esp
f0110815:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110818:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f011081c:	74 17                	je     f0110835 <test_free_block_BF+0x613>
		panic("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011081e:	83 ec 04             	sub    $0x4,%esp
f0110821:	68 d4 60 13 f0       	push   $0xf01360d4
f0110826:	68 f6 03 00 00       	push   $0x3f6
f011082b:	68 50 44 13 f0       	push   $0xf0134450
f0110830:	e8 7b f9 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0110835:	83 ec 0c             	sub    $0xc,%esp
f0110838:	68 20 54 13 f0       	push   $0xf0135420
f011083d:	e8 ef 05 ff ff       	call   f0100e31 <cprintf>
f0110842:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0110845:	83 ec 0c             	sub    $0xc,%esp
f0110848:	68 5c 54 13 f0       	push   $0xf013545c
f011084d:	e8 df 05 ff ff       	call   f0100e31 <cprintf>
f0110852:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0110855:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011085c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011085f:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110866:	83 ec 0c             	sub    $0xc,%esp
f0110869:	50                   	push   %eax
f011086a:	e8 33 f8 01 00       	call   f01300a2 <free_block>
f011086f:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110872:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110875:	48                   	dec    %eax
f0110876:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011087d:	83 ec 0c             	sub    $0xc,%esp
f0110880:	50                   	push   %eax
f0110881:	e8 51 f2 01 00       	call   f012fad7 <get_block_size>
f0110886:	83 c4 10             	add    $0x10,%esp
f0110889:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f011088c:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f0110892:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110895:	01 d0                	add    %edx,%eax
f0110897:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011089a:	74 26                	je     f01108c2 <test_free_block_BF+0x6a0>
		panic("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize + allocSizes[numOfAllocs-1],block_size);
f011089c:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f01108a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01108a5:	01 d0                	add    %edx,%eax
f01108a7:	83 ec 0c             	sub    $0xc,%esp
f01108aa:	ff 75 bc             	pushl  -0x44(%ebp)
f01108ad:	50                   	push   %eax
f01108ae:	68 28 61 13 f0       	push   $0xf0136128
f01108b3:	68 01 04 00 00       	push   $0x401
f01108b8:	68 50 44 13 f0       	push   $0xf0134450
f01108bd:	e8 ee f8 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01108c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108c5:	48                   	dec    %eax
f01108c6:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01108cd:	83 ec 0c             	sub    $0xc,%esp
f01108d0:	50                   	push   %eax
f01108d1:	e8 17 f2 01 00       	call   f012faed <is_free_block>
f01108d6:	83 c4 10             	add    $0x10,%esp
f01108d9:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01108dc:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01108e0:	74 17                	je     f01108f9 <test_free_block_BF+0x6d7>
		panic("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01108e2:	83 ec 04             	sub    $0x4,%esp
f01108e5:	68 88 61 13 f0       	push   $0xf0136188
f01108ea:	68 04 04 00 00       	push   $0x404
f01108ef:	68 50 44 13 f0       	push   $0xf0134450
f01108f4:	e8 b7 f8 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f01108f9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108fc:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110903:	83 ec 0c             	sub    $0xc,%esp
f0110906:	50                   	push   %eax
f0110907:	e8 cb f1 01 00       	call   f012fad7 <get_block_size>
f011090c:	83 c4 10             	add    $0x10,%esp
f011090f:	85 c0                	test   %eax,%eax
f0110911:	75 1a                	jne    f011092d <test_free_block_BF+0x70b>
f0110913:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110916:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011091d:	83 ec 0c             	sub    $0xc,%esp
f0110920:	50                   	push   %eax
f0110921:	e8 c7 f1 01 00       	call   f012faed <is_free_block>
f0110926:	83 c4 10             	add    $0x10,%esp
f0110929:	84 c0                	test   %al,%al
f011092b:	74 17                	je     f0110944 <test_free_block_BF+0x722>
		panic("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f011092d:	83 ec 04             	sub    $0x4,%esp
f0110930:	68 dc 61 13 f0       	push   $0xf01361dc
f0110935:	68 07 04 00 00       	push   $0x407
f011093a:	68 50 44 13 f0       	push   $0xf0134450
f011093f:	e8 6c f8 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0110944:	83 ec 0c             	sub    $0xc,%esp
f0110947:	68 96 55 13 f0       	push   $0xf0135596
f011094c:	e8 e0 04 ff ff       	call   f0100e31 <cprintf>
f0110951:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0110954:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011095b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011095e:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110965:	83 ec 0c             	sub    $0xc,%esp
f0110968:	50                   	push   %eax
f0110969:	e8 34 f7 01 00       	call   f01300a2 <free_block>
f011096e:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110971:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110974:	48                   	dec    %eax
f0110975:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011097c:	83 ec 0c             	sub    $0xc,%esp
f011097f:	50                   	push   %eax
f0110980:	e8 52 f1 01 00       	call   f012fad7 <get_block_size>
f0110985:	83 c4 10             	add    $0x10,%esp
f0110988:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f011098b:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f0110991:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f0110996:	01 d0                	add    %edx,%eax
f0110998:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011099b:	74 28                	je     f01109c5 <test_free_block_BF+0x7a3>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[2] + allocSizes[2],block_size);
f011099d:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f01109a3:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f01109a8:	01 d0                	add    %edx,%eax
f01109aa:	83 ec 0c             	sub    $0xc,%esp
f01109ad:	ff 75 bc             	pushl  -0x44(%ebp)
f01109b0:	50                   	push   %eax
f01109b1:	68 48 62 13 f0       	push   $0xf0136248
f01109b6:	68 10 04 00 00       	push   $0x410
f01109bb:	68 50 44 13 f0       	push   $0xf0134450
f01109c0:	e8 eb f7 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01109c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109c8:	48                   	dec    %eax
f01109c9:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01109d0:	83 ec 0c             	sub    $0xc,%esp
f01109d3:	50                   	push   %eax
f01109d4:	e8 14 f1 01 00       	call   f012faed <is_free_block>
f01109d9:	83 c4 10             	add    $0x10,%esp
f01109dc:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01109df:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01109e3:	74 17                	je     f01109fc <test_free_block_BF+0x7da>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01109e5:	83 ec 04             	sub    $0x4,%esp
f01109e8:	68 a8 62 13 f0       	push   $0xf01362a8
f01109ed:	68 13 04 00 00       	push   $0x413
f01109f2:	68 50 44 13 f0       	push   $0xf0134450
f01109f7:	e8 b4 f7 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f01109fc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109ff:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110a06:	83 ec 0c             	sub    $0xc,%esp
f0110a09:	50                   	push   %eax
f0110a0a:	e8 c8 f0 01 00       	call   f012fad7 <get_block_size>
f0110a0f:	83 c4 10             	add    $0x10,%esp
f0110a12:	85 c0                	test   %eax,%eax
f0110a14:	75 1a                	jne    f0110a30 <test_free_block_BF+0x80e>
f0110a16:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a19:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110a20:	83 ec 0c             	sub    $0xc,%esp
f0110a23:	50                   	push   %eax
f0110a24:	e8 c4 f0 01 00       	call   f012faed <is_free_block>
f0110a29:	83 c4 10             	add    $0x10,%esp
f0110a2c:	84 c0                	test   %al,%al
f0110a2e:	74 17                	je     f0110a47 <test_free_block_BF+0x825>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110a30:	83 ec 04             	sub    $0x4,%esp
f0110a33:	68 fc 62 13 f0       	push   $0xf01362fc
f0110a38:	68 16 04 00 00       	push   $0x416
f0110a3d:	68 50 44 13 f0       	push   $0xf0134450
f0110a42:	e8 69 f7 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f0110a47:	83 ec 0c             	sub    $0xc,%esp
f0110a4a:	68 d4 56 13 f0       	push   $0xf01356d4
f0110a4f:	e8 dd 03 ff ff       	call   f0100e31 <cprintf>
f0110a54:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f0110a57:	83 ec 0c             	sub    $0xc,%esp
f0110a5a:	68 0c 57 13 f0       	push   $0xf013570c
f0110a5f:	e8 cd 03 ff ff       	call   f0100e31 <cprintf>
f0110a64:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f0110a67:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110a6e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a71:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110a78:	83 ec 0c             	sub    $0xc,%esp
f0110a7b:	50                   	push   %eax
f0110a7c:	e8 21 f6 01 00       	call   f01300a2 <free_block>
f0110a81:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110a84:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a87:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110a8e:	83 ec 0c             	sub    $0xc,%esp
f0110a91:	50                   	push   %eax
f0110a92:	e8 40 f0 01 00       	call   f012fad7 <get_block_size>
f0110a97:	83 c4 10             	add    $0x10,%esp
f0110a9a:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f0110a9d:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110aa3:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0110aa8:	01 d0                	add    %edx,%eax
f0110aaa:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110aad:	74 28                	je     f0110ad7 <test_free_block_BF+0x8b5>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[0],block_size);
f0110aaf:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110ab5:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0110aba:	01 d0                	add    %edx,%eax
f0110abc:	83 ec 0c             	sub    $0xc,%esp
f0110abf:	ff 75 bc             	pushl  -0x44(%ebp)
f0110ac2:	50                   	push   %eax
f0110ac3:	68 48 62 13 f0       	push   $0xf0136248
f0110ac8:	68 20 04 00 00       	push   $0x420
f0110acd:	68 50 44 13 f0       	push   $0xf0134450
f0110ad2:	e8 d9 f6 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110ad7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ada:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110ae1:	83 ec 0c             	sub    $0xc,%esp
f0110ae4:	50                   	push   %eax
f0110ae5:	e8 03 f0 01 00       	call   f012faed <is_free_block>
f0110aea:	83 c4 10             	add    $0x10,%esp
f0110aed:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110af0:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110af4:	74 17                	je     f0110b0d <test_free_block_BF+0x8eb>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110af6:	83 ec 04             	sub    $0x4,%esp
f0110af9:	68 a8 62 13 f0       	push   $0xf01362a8
f0110afe:	68 23 04 00 00       	push   $0x423
f0110b03:	68 50 44 13 f0       	push   $0xf0134450
f0110b08:	e8 a3 f6 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110b0d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b10:	40                   	inc    %eax
f0110b11:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110b18:	83 ec 0c             	sub    $0xc,%esp
f0110b1b:	50                   	push   %eax
f0110b1c:	e8 b6 ef 01 00       	call   f012fad7 <get_block_size>
f0110b21:	83 c4 10             	add    $0x10,%esp
f0110b24:	85 c0                	test   %eax,%eax
f0110b26:	75 1b                	jne    f0110b43 <test_free_block_BF+0x921>
f0110b28:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b2b:	40                   	inc    %eax
f0110b2c:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110b33:	83 ec 0c             	sub    $0xc,%esp
f0110b36:	50                   	push   %eax
f0110b37:	e8 b1 ef 01 00       	call   f012faed <is_free_block>
f0110b3c:	83 c4 10             	add    $0x10,%esp
f0110b3f:	84 c0                	test   %al,%al
f0110b41:	74 17                	je     f0110b5a <test_free_block_BF+0x938>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110b43:	83 ec 04             	sub    $0x4,%esp
f0110b46:	68 fc 62 13 f0       	push   $0xf01362fc
f0110b4b:	68 26 04 00 00       	push   $0x426
f0110b50:	68 50 44 13 f0       	push   $0xf0134450
f0110b55:	e8 56 f6 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f0110b5a:	83 ec 0c             	sub    $0xc,%esp
f0110b5d:	68 21 57 13 f0       	push   $0xf0135721
f0110b62:	e8 ca 02 ff ff       	call   f0100e31 <cprintf>
f0110b67:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0110b6a:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110b71:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b74:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110b7b:	83 ec 0c             	sub    $0xc,%esp
f0110b7e:	50                   	push   %eax
f0110b7f:	e8 1e f5 01 00       	call   f01300a2 <free_block>
f0110b84:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110b87:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b8a:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110b91:	83 ec 0c             	sub    $0xc,%esp
f0110b94:	50                   	push   %eax
f0110b95:	e8 3d ef 01 00       	call   f012fad7 <get_block_size>
f0110b9a:	83 c4 10             	add    $0x10,%esp
f0110b9d:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f0110ba0:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110ba6:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f0110bab:	01 d0                	add    %edx,%eax
f0110bad:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110bb0:	74 28                	je     f0110bda <test_free_block_BF+0x9b8>
		panic("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[1],block_size);
f0110bb2:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110bb8:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f0110bbd:	01 d0                	add    %edx,%eax
f0110bbf:	83 ec 0c             	sub    $0xc,%esp
f0110bc2:	ff 75 bc             	pushl  -0x44(%ebp)
f0110bc5:	50                   	push   %eax
f0110bc6:	68 68 63 13 f0       	push   $0xf0136368
f0110bcb:	68 2f 04 00 00       	push   $0x42f
f0110bd0:	68 50 44 13 f0       	push   $0xf0134450
f0110bd5:	e8 d6 f5 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110bda:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110bdd:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110be4:	83 ec 0c             	sub    $0xc,%esp
f0110be7:	50                   	push   %eax
f0110be8:	e8 00 ef 01 00       	call   f012faed <is_free_block>
f0110bed:	83 c4 10             	add    $0x10,%esp
f0110bf0:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110bf3:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110bf7:	74 17                	je     f0110c10 <test_free_block_BF+0x9ee>
		panic("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110bf9:	83 ec 04             	sub    $0x4,%esp
f0110bfc:	68 c8 63 13 f0       	push   $0xf01363c8
f0110c01:	68 32 04 00 00       	push   $0x432
f0110c06:	68 50 44 13 f0       	push   $0xf0134450
f0110c0b:	e8 a0 f5 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110c10:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c13:	40                   	inc    %eax
f0110c14:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110c1b:	83 ec 0c             	sub    $0xc,%esp
f0110c1e:	50                   	push   %eax
f0110c1f:	e8 b3 ee 01 00       	call   f012fad7 <get_block_size>
f0110c24:	83 c4 10             	add    $0x10,%esp
f0110c27:	85 c0                	test   %eax,%eax
f0110c29:	75 1b                	jne    f0110c46 <test_free_block_BF+0xa24>
f0110c2b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c2e:	40                   	inc    %eax
f0110c2f:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110c36:	83 ec 0c             	sub    $0xc,%esp
f0110c39:	50                   	push   %eax
f0110c3a:	e8 ae ee 01 00       	call   f012faed <is_free_block>
f0110c3f:	83 c4 10             	add    $0x10,%esp
f0110c42:	84 c0                	test   %al,%al
f0110c44:	74 17                	je     f0110c5d <test_free_block_BF+0xa3b>
		panic("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110c46:	83 ec 04             	sub    $0x4,%esp
f0110c49:	68 20 64 13 f0       	push   $0xf0136420
f0110c4e:	68 35 04 00 00       	push   $0x435
f0110c53:	68 50 44 13 f0       	push   $0xf0134450
f0110c58:	e8 53 f5 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0110c5d:	83 ec 0c             	sub    $0xc,%esp
f0110c60:	68 64 58 13 f0       	push   $0xf0135864
f0110c65:	e8 c7 01 ff ff       	call   f0100e31 <cprintf>
f0110c6a:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0110c6d:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110c74:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c77:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110c7e:	83 ec 0c             	sub    $0xc,%esp
f0110c81:	50                   	push   %eax
f0110c82:	e8 1b f4 01 00       	call   f01300a2 <free_block>
f0110c87:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0110c8a:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110c91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c94:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110c9b:	83 ec 0c             	sub    $0xc,%esp
f0110c9e:	50                   	push   %eax
f0110c9f:	e8 fe f3 01 00       	call   f01300a2 <free_block>
f0110ca4:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110ca7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110caa:	48                   	dec    %eax
f0110cab:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110cb2:	83 ec 0c             	sub    $0xc,%esp
f0110cb5:	50                   	push   %eax
f0110cb6:	e8 1c ee 01 00       	call   f012fad7 <get_block_size>
f0110cbb:	83 c4 10             	add    $0x10,%esp
f0110cbe:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f0110cc1:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f0110cc7:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f0110ccc:	01 c2                	add    %eax,%edx
f0110cce:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f0110cd3:	01 d0                	add    %edx,%eax
f0110cd5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110cd8:	74 2f                	je     f0110d09 <test_free_block_BF+0xae7>
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f0110cda:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f0110ce0:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f0110ce5:	01 c2                	add    %eax,%edx
f0110ce7:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f0110cec:	01 d0                	add    %edx,%eax
f0110cee:	83 ec 0c             	sub    $0xc,%esp
f0110cf1:	ff 75 bc             	pushl  -0x44(%ebp)
f0110cf4:	50                   	push   %eax
f0110cf5:	68 8c 64 13 f0       	push   $0xf013648c
f0110cfa:	68 41 04 00 00       	push   $0x441
f0110cff:	68 50 44 13 f0       	push   $0xf0134450
f0110d04:	e8 a7 f4 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110d09:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110d0c:	48                   	dec    %eax
f0110d0d:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110d14:	83 ec 0c             	sub    $0xc,%esp
f0110d17:	50                   	push   %eax
f0110d18:	e8 d0 ed 01 00       	call   f012faed <is_free_block>
f0110d1d:	83 c4 10             	add    $0x10,%esp
f0110d20:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110d23:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110d27:	74 17                	je     f0110d40 <test_free_block_BF+0xb1e>
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110d29:	83 ec 04             	sub    $0x4,%esp
f0110d2c:	68 ec 64 13 f0       	push   $0xf01364ec
f0110d31:	68 44 04 00 00       	push   $0x444
f0110d36:	68 50 44 13 f0       	push   $0xf0134450
f0110d3b:	e8 70 f4 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110d40:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110d43:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110d4a:	83 ec 0c             	sub    $0xc,%esp
f0110d4d:	50                   	push   %eax
f0110d4e:	e8 84 ed 01 00       	call   f012fad7 <get_block_size>
f0110d53:	83 c4 10             	add    $0x10,%esp
f0110d56:	85 c0                	test   %eax,%eax
f0110d58:	75 50                	jne    f0110daa <test_free_block_BF+0xb88>
f0110d5a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110d5d:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110d64:	83 ec 0c             	sub    $0xc,%esp
f0110d67:	50                   	push   %eax
f0110d68:	e8 80 ed 01 00       	call   f012faed <is_free_block>
f0110d6d:	83 c4 10             	add    $0x10,%esp
f0110d70:	84 c0                	test   %al,%al
f0110d72:	75 36                	jne    f0110daa <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110d74:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110d77:	40                   	inc    %eax
f0110d78:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110d7f:	83 ec 0c             	sub    $0xc,%esp
f0110d82:	50                   	push   %eax
f0110d83:	e8 4f ed 01 00       	call   f012fad7 <get_block_size>
f0110d88:	83 c4 10             	add    $0x10,%esp
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
	block_status = is_free_block(startVAs[blockIndex-1]) ;
	if (block_status != 1)
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110d8b:	85 c0                	test   %eax,%eax
f0110d8d:	75 1b                	jne    f0110daa <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110d8f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110d92:	40                   	inc    %eax
f0110d93:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0110d9a:	83 ec 0c             	sub    $0xc,%esp
f0110d9d:	50                   	push   %eax
f0110d9e:	e8 4a ed 01 00       	call   f012faed <is_free_block>
f0110da3:	83 c4 10             	add    $0x10,%esp
f0110da6:	84 c0                	test   %al,%al
f0110da8:	74 17                	je     f0110dc1 <test_free_block_BF+0xb9f>
		panic("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110daa:	83 ec 04             	sub    $0x4,%esp
f0110dad:	68 44 65 13 f0       	push   $0xf0136544
f0110db2:	68 48 04 00 00       	push   $0x448
f0110db7:	68 50 44 13 f0       	push   $0xf0134450
f0110dbc:	e8 ef f3 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f0110dc1:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)

	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData() ;
f0110dc8:	c7 45 cc f0 1b 00 00 	movl   $0x1bf0,-0x34(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0110dcf:	83 ec 08             	sub    $0x8,%esp
f0110dd2:	6a 03                	push   $0x3
f0110dd4:	ff 75 cc             	pushl  -0x34(%ebp)
f0110dd7:	e8 28 ed 01 00       	call   f012fb04 <alloc_block>
f0110ddc:	83 c4 10             	add    $0x10,%esp
f0110ddf:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0110de2:	a1 60 b6 2d f0       	mov    0xf02db660,%eax
f0110de7:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if(va == NULL || (va != expected))
f0110dea:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110dee:	74 08                	je     f0110df8 <test_free_block_BF+0xbd6>
f0110df0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110df3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110df6:	74 1d                	je     f0110e15 <test_free_block_BF+0xbf3>
			panic("test_free_block #12.0: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110df8:	83 ec 0c             	sub    $0xc,%esp
f0110dfb:	ff 75 c8             	pushl  -0x38(%ebp)
f0110dfe:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e01:	68 b0 65 13 f0       	push   $0xf01365b0
f0110e06:	68 55 04 00 00       	push   $0x455
f0110e0b:	68 50 44 13 f0       	push   $0xf0134450
f0110e10:	e8 9b f3 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0110e15:	83 ec 0c             	sub    $0xc,%esp
f0110e18:	68 cc 59 13 f0       	push   $0xf01359cc
f0110e1d:	e8 0f 00 ff ff       	call   f0100e31 <cprintf>
f0110e22:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0110e25:	83 ec 0c             	sub    $0xc,%esp
f0110e28:	68 14 66 13 f0       	push   $0xf0136614
f0110e2d:	e8 ff ff fe ff       	call   f0100e31 <cprintf>
f0110e32:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData();
f0110e35:	c7 45 cc f0 07 00 00 	movl   $0x7f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110e3c:	83 ec 08             	sub    $0x8,%esp
f0110e3f:	6a 03                	push   $0x3
f0110e41:	ff 75 cc             	pushl  -0x34(%ebp)
f0110e44:	e8 bb ec 01 00       	call   f012fb04 <alloc_block>
f0110e49:	83 c4 10             	add    $0x10,%esp
f0110e4c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0110e4f:	a1 e0 a9 2d f0       	mov    0xf02da9e0,%eax
f0110e54:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110e57:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e5b:	74 08                	je     f0110e65 <test_free_block_BF+0xc43>
f0110e5d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e60:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e63:	74 1d                	je     f0110e82 <test_free_block_BF+0xc60>
		panic("test_free_block #12.1: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e65:	83 ec 0c             	sub    $0xc,%esp
f0110e68:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e6b:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e6e:	68 3c 66 13 f0       	push   $0xf013663c
f0110e73:	68 60 04 00 00       	push   $0x460
f0110e78:	68 50 44 13 f0       	push   $0xf0134450
f0110e7d:	e8 2e f3 fe ff       	call   f01001b0 <_panic>

	actualSize = 8*kilo;
f0110e82:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110e89:	83 ec 08             	sub    $0x8,%esp
f0110e8c:	6a 03                	push   $0x3
f0110e8e:	ff 75 cc             	pushl  -0x34(%ebp)
f0110e91:	e8 6e ec 01 00       	call   f012fb04 <alloc_block>
f0110e96:	83 c4 10             	add    $0x10,%esp
f0110e99:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110e9c:	a1 7c b9 2d f0       	mov    0xf02db97c,%eax
f0110ea1:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110ea4:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110ea8:	74 08                	je     f0110eb2 <test_free_block_BF+0xc90>
f0110eaa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110ead:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110eb0:	74 1d                	je     f0110ecf <test_free_block_BF+0xcad>
		panic("test_free_block #12.2: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110eb2:	83 ec 0c             	sub    $0xc,%esp
f0110eb5:	ff 75 c8             	pushl  -0x38(%ebp)
f0110eb8:	ff 75 b0             	pushl  -0x50(%ebp)
f0110ebb:	68 a0 66 13 f0       	push   $0xf01366a0
f0110ec0:	68 67 04 00 00       	push   $0x467
f0110ec5:	68 50 44 13 f0       	push   $0xf0134450
f0110eca:	e8 e1 f2 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0110ecf:	83 ec 0c             	sub    $0xc,%esp
f0110ed2:	68 64 5b 13 f0       	push   $0xf0135b64
f0110ed7:	e8 55 ff fe ff       	call   f0100e31 <cprintf>
f0110edc:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f0110edf:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110ee6:	83 ec 08             	sub    $0x8,%esp
f0110ee9:	6a 03                	push   $0x3
f0110eeb:	ff 75 cc             	pushl  -0x34(%ebp)
f0110eee:	e8 11 ec 01 00       	call   f012fb04 <alloc_block>
f0110ef3:	83 c4 10             	add    $0x10,%esp
f0110ef6:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f0110ef9:	a1 18 b0 2d f0       	mov    0xf02db018,%eax
f0110efe:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110f01:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110f05:	74 08                	je     f0110f0f <test_free_block_BF+0xced>
f0110f07:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110f0a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110f0d:	74 1d                	je     f0110f2c <test_free_block_BF+0xd0a>
		panic("test_free_block #12.3: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110f0f:	83 ec 0c             	sub    $0xc,%esp
f0110f12:	ff 75 c8             	pushl  -0x38(%ebp)
f0110f15:	ff 75 b0             	pushl  -0x50(%ebp)
f0110f18:	68 04 67 13 f0       	push   $0xf0136704
f0110f1d:	68 6f 04 00 00       	push   $0x46f
f0110f22:	68 50 44 13 f0       	push   $0xf0134450
f0110f27:	e8 84 f2 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.3: in block coalesces with NEXT\n\n") ;
f0110f2c:	83 ec 0c             	sub    $0xc,%esp
f0110f2f:	68 68 67 13 f0       	push   $0xf0136768
f0110f34:	e8 f8 fe fe ff       	call   f0100e31 <cprintf>
f0110f39:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f0110f3c:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110f43:	83 ec 08             	sub    $0x8,%esp
f0110f46:	6a 03                	push   $0x3
f0110f48:	ff 75 cc             	pushl  -0x34(%ebp)
f0110f4b:	e8 b4 eb 01 00       	call   f012fb04 <alloc_block>
f0110f50:	83 c4 10             	add    $0x10,%esp
f0110f53:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0110f56:	a1 bc a6 2d f0       	mov    0xf02da6bc,%eax
f0110f5b:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110f5e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110f62:	74 08                	je     f0110f6c <test_free_block_BF+0xd4a>
f0110f64:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110f67:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110f6a:	74 1d                	je     f0110f89 <test_free_block_BF+0xd67>
		panic("test_free_block #12.4: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110f6c:	83 ec 0c             	sub    $0xc,%esp
f0110f6f:	ff 75 c8             	pushl  -0x38(%ebp)
f0110f72:	ff 75 b0             	pushl  -0x50(%ebp)
f0110f75:	68 90 67 13 f0       	push   $0xf0136790
f0110f7a:	68 77 04 00 00       	push   $0x477
f0110f7f:	68 50 44 13 f0       	push   $0xf0134450
f0110f84:	e8 27 f2 fe ff       	call   f01001b0 <_panic>

	actualSize = 5*kilo - sizeOfMetaData();
f0110f89:	c7 45 cc f0 13 00 00 	movl   $0x13f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110f90:	83 ec 08             	sub    $0x8,%esp
f0110f93:	6a 03                	push   $0x3
f0110f95:	ff 75 cc             	pushl  -0x34(%ebp)
f0110f98:	e8 67 eb 01 00       	call   f012fb04 <alloc_block>
f0110f9d:	83 c4 10             	add    $0x10,%esp
f0110fa0:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f0110fa3:	c7 45 b0 10 00 00 f6 	movl   $0xf6000010,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110faa:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110fae:	74 08                	je     f0110fb8 <test_free_block_BF+0xd96>
f0110fb0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110fb3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110fb6:	74 1d                	je     f0110fd5 <test_free_block_BF+0xdb3>
		panic("test_free_block #12.5: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110fb8:	83 ec 0c             	sub    $0xc,%esp
f0110fbb:	ff 75 c8             	pushl  -0x38(%ebp)
f0110fbe:	ff 75 b0             	pushl  -0x50(%ebp)
f0110fc1:	68 f4 67 13 f0       	push   $0xf01367f4
f0110fc6:	68 7e 04 00 00       	push   $0x47e
f0110fcb:	68 50 44 13 f0       	push   $0xf0134450
f0110fd0:	e8 db f1 fe ff       	call   f01001b0 <_panic>

	actualSize = 3*kilo - sizeOfMetaData();
f0110fd5:	c7 45 cc f0 0b 00 00 	movl   $0xbf0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110fdc:	83 ec 08             	sub    $0x8,%esp
f0110fdf:	6a 03                	push   $0x3
f0110fe1:	ff 75 cc             	pushl  -0x34(%ebp)
f0110fe4:	e8 1b eb 01 00       	call   f012fb04 <alloc_block>
f0110fe9:	83 c4 10             	add    $0x10,%esp
f0110fec:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f0110fef:	c7 45 b0 10 14 00 f6 	movl   $0xf6001410,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110ff6:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110ffa:	74 08                	je     f0111004 <test_free_block_BF+0xde2>
f0110ffc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110fff:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111002:	74 1d                	je     f0111021 <test_free_block_BF+0xdff>
		panic("test_free_block #12.6: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0111004:	83 ec 0c             	sub    $0xc,%esp
f0111007:	ff 75 c8             	pushl  -0x38(%ebp)
f011100a:	ff 75 b0             	pushl  -0x50(%ebp)
f011100d:	68 58 68 13 f0       	push   $0xf0136858
f0111012:	68 85 04 00 00       	push   $0x485
f0111017:	68 50 44 13 f0       	push   $0xf0134450
f011101c:	e8 8f f1 fe ff       	call   f01001b0 <_panic>


	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f0111021:	83 ec 0c             	sub    $0xc,%esp
f0111024:	68 bc 68 13 f0       	push   $0xf01368bc
f0111029:	e8 03 fe fe ff       	call   f0100e31 <cprintf>
f011102e:	83 c4 10             	add    $0x10,%esp

}
f0111031:	90                   	nop
f0111032:	c9                   	leave  
f0111033:	c3                   	ret    

f0111034 <test_free_block_NF>:

void test_free_block_NF()
{
f0111034:	55                   	push   %ebp
f0111035:	89 e5                	mov    %esp,%ebp
f0111037:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f011103a:	83 ec 04             	sub    $0x4,%esp
f011103d:	68 05 69 13 f0       	push   $0xf0136905
f0111042:	68 8e 04 00 00       	push   $0x48e
f0111047:	68 50 44 13 f0       	push   $0xf0134450
f011104c:	e8 5f f1 fe ff       	call   f01001b0 <_panic>

f0111051 <findFreeBlockff>:
}
//my functions
//returns the address of the first freeblock
void *findFreeBlockff(){
f0111051:	55                   	push   %ebp
f0111052:	89 e5                	mov    %esp,%ebp
f0111054:	83 ec 18             	sub    $0x18,%esp
 struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f0111057:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f011105c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011105f:	eb 39                	jmp    f011109a <findFreeBlockff+0x49>
		if(iterator->is_free){
f0111061:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111064:	8a 40 04             	mov    0x4(%eax),%al
f0111067:	84 c0                	test   %al,%al
f0111069:	74 27                	je     f0111092 <findFreeBlockff+0x41>
			 struct BlockMetaData* address=(struct BlockMetaData*)((uint32)iterator+sizeOfMetaData());
f011106b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011106e:	83 c0 10             	add    $0x10,%eax
f0111071:	89 45 f0             	mov    %eax,-0x10(%ebp)
			cprintf("found empty block at %x with size %x \n",address,iterator->size);
f0111074:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111077:	8b 00                	mov    (%eax),%eax
f0111079:	83 ec 04             	sub    $0x4,%esp
f011107c:	50                   	push   %eax
f011107d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111080:	68 18 69 13 f0       	push   $0xf0136918
f0111085:	e8 a7 fd fe ff       	call   f0100e31 <cprintf>
f011108a:	83 c4 10             	add    $0x10,%esp
			 return address;
f011108d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111090:	eb 44                	jmp    f01110d6 <findFreeBlockff+0x85>
}
//my functions
//returns the address of the first freeblock
void *findFreeBlockff(){
 struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f0111092:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f0111097:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011109a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011109e:	74 08                	je     f01110a8 <findFreeBlockff+0x57>
f01110a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01110a3:	8b 40 08             	mov    0x8(%eax),%eax
f01110a6:	eb 05                	jmp    f01110ad <findFreeBlockff+0x5c>
f01110a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01110ad:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f01110b2:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f01110b7:	85 c0                	test   %eax,%eax
f01110b9:	75 a6                	jne    f0111061 <findFreeBlockff+0x10>
f01110bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01110bf:	75 a0                	jne    f0111061 <findFreeBlockff+0x10>
			 struct BlockMetaData* address=(struct BlockMetaData*)((uint32)iterator+sizeOfMetaData());
			cprintf("found empty block at %x with size %x \n",address,iterator->size);
			 return address;
		}
	}
	cprintf("memory is full");
f01110c1:	83 ec 0c             	sub    $0xc,%esp
f01110c4:	68 3f 69 13 f0       	push   $0xf013693f
f01110c9:	e8 63 fd fe ff       	call   f0100e31 <cprintf>
f01110ce:	83 c4 10             	add    $0x10,%esp
	return NULL;
f01110d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01110d6:	c9                   	leave  
f01110d7:	c3                   	ret    

f01110d8 <listFreeBlocks>:
void listFreeBlocks(){
f01110d8:	55                   	push   %ebp
f01110d9:	89 e5                	mov    %esp,%ebp
f01110db:	83 ec 18             	sub    $0x18,%esp
	struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f01110de:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f01110e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01110e6:	eb 2b                	jmp    f0111113 <listFreeBlocks+0x3b>
		if(iterator->is_free){
f01110e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01110eb:	8a 40 04             	mov    0x4(%eax),%al
f01110ee:	84 c0                	test   %al,%al
f01110f0:	74 19                	je     f011110b <listFreeBlocks+0x33>
	cprintf("empty block at address %x with size %x \n",iterator,iterator->size);
f01110f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01110f5:	8b 00                	mov    (%eax),%eax
f01110f7:	83 ec 04             	sub    $0x4,%esp
f01110fa:	50                   	push   %eax
f01110fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01110fe:	68 50 69 13 f0       	push   $0xf0136950
f0111103:	e8 29 fd fe ff       	call   f0100e31 <cprintf>
f0111108:	83 c4 10             	add    $0x10,%esp
	cprintf("memory is full");
	return NULL;
}
void listFreeBlocks(){
	struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f011110b:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f0111110:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111113:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111117:	74 08                	je     f0111121 <listFreeBlocks+0x49>
f0111119:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011111c:	8b 40 08             	mov    0x8(%eax),%eax
f011111f:	eb 05                	jmp    f0111126 <listFreeBlocks+0x4e>
f0111121:	b8 00 00 00 00       	mov    $0x0,%eax
f0111126:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f011112b:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f0111130:	85 c0                	test   %eax,%eax
f0111132:	75 b4                	jne    f01110e8 <listFreeBlocks+0x10>
f0111134:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111138:	75 ae                	jne    f01110e8 <listFreeBlocks+0x10>
		if(iterator->is_free){
	cprintf("empty block at address %x with size %x \n",iterator,iterator->size);
		}
		}
}
f011113a:	90                   	nop
f011113b:	c9                   	leave  
f011113c:	c3                   	ret    

f011113d <test_realloc_block_FF>:
void test_realloc_block_FF()
{
f011113d:	55                   	push   %ebp
f011113e:	89 e5                	mov    %esp,%ebp
f0111140:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f0111143:	83 ec 0c             	sub    $0xc,%esp
f0111146:	68 7c 69 13 f0       	push   $0xf013697c
f011114b:	e8 e1 fc fe ff       	call   f0100e31 <cprintf>
f0111150:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f0111153:	83 ec 0c             	sub    $0xc,%esp
f0111156:	68 b4 69 13 f0       	push   $0xf01369b4
f011115b:	e8 d1 fc fe ff       	call   f0100e31 <cprintf>
f0111160:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f0111163:	83 ec 0c             	sub    $0xc,%esp
f0111166:	68 ec 69 13 f0       	push   $0xf01369ec
f011116b:	e8 c1 fc fe ff       	call   f0100e31 <cprintf>
f0111170:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0111173:	83 ec 0c             	sub    $0xc,%esp
f0111176:	68 7c 69 13 f0       	push   $0xf013697c
f011117b:	e8 b1 fc fe ff       	call   f0100e31 <cprintf>
f0111180:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'23.MS1 - #9] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	int eval = 0;
f0111183:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f011118a:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0111191:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111194:	83 ec 08             	sub    $0x8,%esp
f0111197:	50                   	push   %eax
f0111198:	68 00 00 00 f6       	push   $0xf6000000
f011119d:	e8 7b ea 01 00       	call   f012fc1d <initialize_dynamic_allocator>
f01111a2:	83 c4 10             	add    $0x10,%esp
	void * va ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f01111a5:	83 ec 0c             	sub    $0xc,%esp
f01111a8:	68 24 6a 13 f0       	push   $0xf0136a24
f01111ad:	e8 7f fc fe ff       	call   f0100e31 <cprintf>
f01111b2:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01111b5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int totalSizes = 0;
f01111bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01111c3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01111ca:	eb 2a                	jmp    f01111f6 <test_realloc_block_FF+0xb9>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01111cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01111cf:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f01111d6:	89 d0                	mov    %edx,%eax
f01111d8:	c1 e0 02             	shl    $0x2,%eax
f01111db:	01 d0                	add    %edx,%eax
f01111dd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01111e4:	01 d0                	add    %edx,%eax
f01111e6:	c1 e0 03             	shl    $0x3,%eax
f01111e9:	89 c2                	mov    %eax,%edx
f01111eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111ee:	01 d0                	add    %edx,%eax
f01111f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;
	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f01111f3:	ff 45 e8             	incl   -0x18(%ebp)
f01111f6:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f01111fa:	7e d0                	jle    f01111cc <test_realloc_block_FF+0x8f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f01111fc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01111ff:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0111202:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f0111205:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0111209:	7f 17                	jg     f0111222 <test_realloc_block_FF+0xe5>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f011120b:	83 ec 04             	sub    $0x4,%esp
f011120e:	68 54 6a 13 f0       	push   $0xf0136a54
f0111213:	68 c9 04 00 00       	push   $0x4c9
f0111218:	68 50 44 13 f0       	push   $0xf0134450
f011121d:	e8 8e ef fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f0111222:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0111229:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0111230:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0111237:	e9 f8 00 00 00       	jmp    f0111334 <test_realloc_block_FF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011123c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0111243:	e9 dc 00 00 00       	jmp    f0111324 <test_realloc_block_FF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0111248:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011124b:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f0111252:	83 e8 10             	sub    $0x10,%eax
f0111255:	89 45 c0             	mov    %eax,-0x40(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0111258:	83 ec 08             	sub    $0x8,%esp
f011125b:	ff 75 c0             	pushl  -0x40(%ebp)
f011125e:	6a 00                	push   $0x0
f0111260:	e8 df ee 01 00       	call   f0130144 <realloc_block_FF>
f0111265:	83 c4 10             	add    $0x10,%esp
f0111268:	89 c2                	mov    %eax,%edx
f011126a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011126d:	89 14 85 a0 a3 2d f0 	mov    %edx,-0xfd25c60(,%eax,4)
f0111274:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111277:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011127e:	89 45 bc             	mov    %eax,-0x44(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0111281:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111284:	d1 e8                	shr    %eax
f0111286:	89 c2                	mov    %eax,%edx
f0111288:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011128b:	01 c2                	add    %eax,%edx
f011128d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111290:	89 14 85 a0 cf 2d f0 	mov    %edx,-0xfd23060(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0111297:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011129a:	8d 50 fe             	lea    -0x2(%eax),%edx
f011129d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01112a0:	01 c2                	add    %eax,%edx
f01112a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01112a5:	89 14 85 a0 b9 2d f0 	mov    %edx,-0xfd24660(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01112ac:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01112b0:	74 0b                	je     f01112bd <test_realloc_block_FF+0x180>
f01112b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01112b5:	83 c0 10             	add    $0x10,%eax
f01112b8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01112bb:	74 24                	je     f01112e1 <test_realloc_block_FF+0x1a4>
				panic("test_realloc_block_FF #1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f01112bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01112c0:	83 c0 10             	add    $0x10,%eax
f01112c3:	83 ec 08             	sub    $0x8,%esp
f01112c6:	ff 75 bc             	pushl  -0x44(%ebp)
f01112c9:	50                   	push   %eax
f01112ca:	ff 75 e4             	pushl  -0x1c(%ebp)
f01112cd:	68 d4 6a 13 f0       	push   $0xf0136ad4
f01112d2:	68 d8 04 00 00       	push   $0x4d8
f01112d7:	68 50 44 13 f0       	push   $0xf0134450
f01112dc:	e8 cf ee fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f01112e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01112e4:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01112eb:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f01112ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01112f1:	8b 14 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%edx
f01112f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01112fb:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f01112fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111301:	8b 14 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%edx
f0111308:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011130b:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f011130e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111311:	8b 14 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%edx
f0111318:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011131b:	66 89 02             	mov    %ax,(%edx)
			idx++;
f011131e:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0111321:	ff 45 d8             	incl   -0x28(%ebp)
f0111324:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f011132b:	0f 8e 17 ff ff ff    	jle    f0111248 <test_realloc_block_FF+0x10b>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0111331:	ff 45 dc             	incl   -0x24(%ebp)
f0111334:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0111338:	0f 8e fe fe ff ff    	jle    f011123c <test_realloc_block_FF+0xff>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f011133e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111341:	83 e8 10             	sub    $0x10,%eax
f0111344:	89 45 c0             	mov    %eax,-0x40(%ebp)
	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0111347:	83 ec 08             	sub    $0x8,%esp
f011134a:	ff 75 c0             	pushl  -0x40(%ebp)
f011134d:	6a 00                	push   $0x0
f011134f:	e8 f0 ed 01 00       	call   f0130144 <realloc_block_FF>
f0111354:	83 c4 10             	add    $0x10,%esp
f0111357:	89 c2                	mov    %eax,%edx
f0111359:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011135c:	89 14 85 a0 a3 2d f0 	mov    %edx,-0xfd25c60(,%eax,4)
f0111363:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111366:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011136d:	89 45 bc             	mov    %eax,-0x44(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0111370:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111373:	d1 e8                	shr    %eax
f0111375:	89 c2                	mov    %eax,%edx
f0111377:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011137a:	01 c2                	add    %eax,%edx
f011137c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011137f:	89 14 85 a0 cf 2d f0 	mov    %edx,-0xfd23060(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0111386:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111389:	8d 50 fe             	lea    -0x2(%eax),%edx
f011138c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011138f:	01 c2                	add    %eax,%edx
f0111391:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111394:	89 14 85 a0 b9 2d f0 	mov    %edx,-0xfd24660(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f011139b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011139f:	74 0b                	je     f01113ac <test_realloc_block_FF+0x26f>
f01113a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01113a4:	83 c0 10             	add    $0x10,%eax
f01113a7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01113aa:	74 17                	je     f01113c3 <test_realloc_block_FF+0x286>
		panic("test_realloc_block_FF #2: WRONG ALLOC - it return wrong address.");
f01113ac:	83 ec 04             	sub    $0x4,%esp
f01113af:	68 30 6b 13 f0       	push   $0xf0136b30
f01113b4:	68 e9 04 00 00       	push   $0x4e9
f01113b9:	68 50 44 13 f0       	push   $0xf0134450
f01113be:	e8 ed ed fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f01113c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01113c6:	8b 14 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%edx
f01113cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01113d0:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f01113d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01113d6:	8b 14 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%edx
f01113dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01113e0:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f01113e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01113e6:	8b 14 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%edx
f01113ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01113f0:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01113f3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01113fa:	eb 59                	jmp    f0111455 <test_realloc_block_FF+0x318>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01113fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01113ff:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111406:	66 8b 00             	mov    (%eax),%ax
f0111409:	98                   	cwtl   
f011140a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011140d:	75 26                	jne    f0111435 <test_realloc_block_FF+0x2f8>
f011140f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111412:	8b 04 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%eax
f0111419:	66 8b 00             	mov    (%eax),%ax
f011141c:	98                   	cwtl   
f011141d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111420:	75 13                	jne    f0111435 <test_realloc_block_FF+0x2f8>
f0111422:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111425:	8b 04 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%eax
f011142c:	66 8b 00             	mov    (%eax),%ax
f011142f:	98                   	cwtl   
f0111430:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111433:	74 1d                	je     f0111452 <test_realloc_block_FF+0x315>
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111435:	83 ec 0c             	sub    $0xc,%esp
f0111438:	ff 75 d4             	pushl  -0x2c(%ebp)
f011143b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011143e:	68 74 6b 13 f0       	push   $0xf0136b74
f0111443:	68 f3 04 00 00       	push   $0x4f3
f0111448:	68 50 44 13 f0       	push   $0xf0134450
f011144d:	e8 5e ed fe ff       	call   f01001b0 <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111452:	ff 45 d4             	incl   -0x2c(%ebp)
f0111455:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111458:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011145b:	7c 9f                	jl     f01113fc <test_realloc_block_FF+0x2bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f011145d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111461:	74 04                	je     f0111467 <test_realloc_block_FF+0x32a>
	{
		eval += 10;
f0111463:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f0111467:	83 ec 0c             	sub    $0xc,%esp
f011146a:	68 cc 6b 13 f0       	push   $0xf0136bcc
f011146f:	e8 bd f9 fe ff       	call   f0100e31 <cprintf>
f0111474:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111477:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011147e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0111485:	e9 fa 00 00 00       	jmp    f0111584 <test_realloc_block_FF+0x447>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f011148a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011148d:	89 d0                	mov    %edx,%eax
f011148f:	c1 e0 02             	shl    $0x2,%eax
f0111492:	01 d0                	add    %edx,%eax
f0111494:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011149b:	01 d0                	add    %edx,%eax
f011149d:	c1 e0 03             	shl    $0x3,%eax
f01114a0:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01114a7:	83 ec 08             	sub    $0x8,%esp
f01114aa:	6a 00                	push   $0x0
f01114ac:	50                   	push   %eax
f01114ad:	e8 92 ec 01 00       	call   f0130144 <realloc_block_FF>
f01114b2:	83 c4 10             	add    $0x10,%esp
f01114b5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f01114b8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01114bb:	89 d0                	mov    %edx,%eax
f01114bd:	c1 e0 02             	shl    $0x2,%eax
f01114c0:	01 d0                	add    %edx,%eax
f01114c2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01114c9:	01 d0                	add    %edx,%eax
f01114cb:	c1 e0 03             	shl    $0x3,%eax
f01114ce:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01114d5:	83 ec 0c             	sub    $0xc,%esp
f01114d8:	50                   	push   %eax
f01114d9:	e8 f9 e5 01 00       	call   f012fad7 <get_block_size>
f01114de:	83 c4 10             	add    $0x10,%esp
f01114e1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (block_size != allocSizes[i])
f01114e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01114e7:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01114ee:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01114f1:	74 28                	je     f011151b <test_realloc_block_FF+0x3de>
			panic("test_realloc_block_FF #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f01114f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01114f6:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01114fd:	83 ec 08             	sub    $0x8,%esp
f0111500:	ff 75 b8             	pushl  -0x48(%ebp)
f0111503:	50                   	push   %eax
f0111504:	ff 75 d0             	pushl  -0x30(%ebp)
f0111507:	68 fc 6b 13 f0       	push   $0xf0136bfc
f011150c:	68 07 05 00 00       	push   $0x507
f0111511:	68 50 44 13 f0       	push   $0xf0134450
f0111516:	e8 95 ec fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f011151b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011151e:	89 d0                	mov    %edx,%eax
f0111520:	c1 e0 02             	shl    $0x2,%eax
f0111523:	01 d0                	add    %edx,%eax
f0111525:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011152c:	01 d0                	add    %edx,%eax
f011152e:	c1 e0 03             	shl    $0x3,%eax
f0111531:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111538:	83 ec 0c             	sub    $0xc,%esp
f011153b:	50                   	push   %eax
f011153c:	e8 ac e5 01 00       	call   f012faed <is_free_block>
f0111541:	83 c4 10             	add    $0x10,%esp
f0111544:	88 45 b7             	mov    %al,-0x49(%ebp)
		if (block_status != 1)
f0111547:	80 7d b7 01          	cmpb   $0x1,-0x49(%ebp)
f011154b:	74 17                	je     f0111564 <test_realloc_block_FF+0x427>
			panic("test_realloc_block_FF #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f011154d:	ff 75 d0             	pushl  -0x30(%ebp)
f0111550:	68 64 6c 13 f0       	push   $0xf0136c64
f0111555:	68 0a 05 00 00       	push   $0x50a
f011155a:	68 50 44 13 f0       	push   $0xf0134450
f011155f:	e8 4c ec fe ff       	call   f01001b0 <_panic>
		if(va != NULL)
f0111564:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111568:	74 17                	je     f0111581 <test_realloc_block_FF+0x444>
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
f011156a:	ff 75 d0             	pushl  -0x30(%ebp)
f011156d:	68 c0 6c 13 f0       	push   $0xf0136cc0
f0111572:	68 0c 05 00 00       	push   $0x50c
f0111577:	68 50 44 13 f0       	push   $0xf0134450
f011157c:	e8 2f ec fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111581:	ff 45 d0             	incl   -0x30(%ebp)
f0111584:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f0111588:	0f 8e fc fe ff ff    	jle    f011148a <test_realloc_block_FF+0x34d>
		if(va != NULL)
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f011158e:	83 ec 08             	sub    $0x8,%esp
f0111591:	6a 00                	push   $0x0
f0111593:	6a 00                	push   $0x0
f0111595:	e8 aa eb 01 00       	call   f0130144 <realloc_block_FF>
f011159a:	83 c4 10             	add    $0x10,%esp
f011159d:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va != NULL)
f01115a0:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01115a4:	74 17                	je     f01115bd <test_realloc_block_FF+0x480>
		panic("test_realloc_block_FF #7: it should return NULL.");
f01115a6:	83 ec 04             	sub    $0x4,%esp
f01115a9:	68 f4 6c 13 f0       	push   $0xf0136cf4
f01115ae:	68 12 05 00 00       	push   $0x512
f01115b3:	68 50 44 13 f0       	push   $0xf0134450
f01115b8:	e8 f3 eb fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01115bd:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01115c4:	eb 6b                	jmp    f0111631 <test_realloc_block_FF+0x4f4>
	{

		if (i % allocCntPerSize == 0)
f01115c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01115c9:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f01115ce:	99                   	cltd   
f01115cf:	f7 f9                	idiv   %ecx
f01115d1:	89 d0                	mov    %edx,%eax
f01115d3:	85 c0                	test   %eax,%eax
f01115d5:	74 56                	je     f011162d <test_realloc_block_FF+0x4f0>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01115d7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01115da:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01115e1:	66 8b 00             	mov    (%eax),%ax
f01115e4:	98                   	cwtl   
f01115e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01115e8:	75 26                	jne    f0111610 <test_realloc_block_FF+0x4d3>
f01115ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01115ed:	8b 04 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%eax
f01115f4:	66 8b 00             	mov    (%eax),%ax
f01115f7:	98                   	cwtl   
f01115f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01115fb:	75 13                	jne    f0111610 <test_realloc_block_FF+0x4d3>
f01115fd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111600:	8b 04 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%eax
f0111607:	66 8b 00             	mov    (%eax),%ax
f011160a:	98                   	cwtl   
f011160b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011160e:	74 1e                	je     f011162e <test_realloc_block_FF+0x4f1>
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111610:	83 ec 0c             	sub    $0xc,%esp
f0111613:	ff 75 cc             	pushl  -0x34(%ebp)
f0111616:	ff 75 cc             	pushl  -0x34(%ebp)
f0111619:	68 28 6d 13 f0       	push   $0xf0136d28
f011161e:	68 1b 05 00 00       	push   $0x51b
f0111623:	68 50 44 13 f0       	push   $0xf0134450
f0111628:	e8 83 eb fe ff       	call   f01001b0 <_panic>
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{

		if (i % allocCntPerSize == 0)
			continue;
f011162d:	90                   	nop
	va = realloc_block_FF(NULL, 0);
	if(va != NULL)
		panic("test_realloc_block_FF #7: it should return NULL.");
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f011162e:	ff 45 cc             	incl   -0x34(%ebp)
f0111631:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111634:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111637:	7c 8d                	jl     f01115c6 <test_realloc_block_FF+0x489>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f0111639:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011163d:	74 04                	je     f0111643 <test_realloc_block_FF+0x506>
	{
		eval += 10;
f011163f:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f0111643:	83 ec 0c             	sub    $0xc,%esp
f0111646:	68 80 6d 13 f0       	push   $0xf0136d80
f011164b:	e8 e1 f7 fe ff       	call   f0100e31 <cprintf>
f0111650:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, expected_size, newBlockIndex;
	void* expected_va = NULL;
f0111653:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f011165a:	83 ec 0c             	sub    $0xc,%esp
f011165d:	68 b8 6d 13 f0       	push   $0xf0136db8
f0111662:	e8 ca f7 fe ff       	call   f0100e31 <cprintf>
f0111667:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011166a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{


		blockIndex = 4*allocCntPerSize - 1 ;
f0111671:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f0111678:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f011167d:	8b 15 30 eb 18 f0    	mov    0xf018eb30,%edx
f0111683:	d1 ea                	shr    %edx
f0111685:	01 d0                	add    %edx,%eax
f0111687:	83 e8 10             	sub    $0x10,%eax
f011168a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f011168d:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111690:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111693:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011169a:	83 ec 08             	sub    $0x8,%esp
f011169d:	52                   	push   %edx
f011169e:	50                   	push   %eax
f011169f:	e8 a0 ea 01 00       	call   f0130144 <realloc_block_FF>
f01116a4:	83 c4 10             	add    $0x10,%esp
f01116a7:	89 45 bc             	mov    %eax,-0x44(%ebp)


		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f01116aa:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01116ae:	74 0f                	je     f01116bf <test_realloc_block_FF+0x582>
f01116b0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116b3:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01116ba:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01116bd:	74 25                	je     f01116e4 <test_realloc_block_FF+0x5a7>
		{
			is_correct = 0;
f01116bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01116c6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116c9:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01116d0:	83 ec 04             	sub    $0x4,%esp
f01116d3:	ff 75 bc             	pushl  -0x44(%ebp)
f01116d6:	50                   	push   %eax
f01116d7:	68 f0 6d 13 f0       	push   $0xf0136df0
f01116dc:	e8 50 f7 fe ff       	call   f0100e31 <cprintf>
f01116e1:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f01116e4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116e7:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01116ee:	83 ec 0c             	sub    $0xc,%esp
f01116f1:	50                   	push   %eax
f01116f2:	e8 e0 e3 01 00       	call   f012fad7 <get_block_size>
f01116f7:	83 c4 10             	add    $0x10,%esp
f01116fa:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f01116fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111700:	8d 50 10             	lea    0x10(%eax),%edx
f0111703:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111706:	39 c2                	cmp    %eax,%edx
f0111708:	74 21                	je     f011172b <test_realloc_block_FF+0x5ee>
		{
			is_correct = 0;
f011170a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111711:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111714:	83 c0 10             	add    $0x10,%eax
f0111717:	83 ec 04             	sub    $0x4,%esp
f011171a:	ff 75 a4             	pushl  -0x5c(%ebp)
f011171d:	50                   	push   %eax
f011171e:	68 50 6e 13 f0       	push   $0xf0136e50
f0111723:	e8 09 f7 fe ff       	call   f0100e31 <cprintf>
f0111728:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f011172b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011172e:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111735:	83 ec 0c             	sub    $0xc,%esp
f0111738:	50                   	push   %eax
f0111739:	e8 af e3 01 00       	call   f012faed <is_free_block>
f011173e:	83 c4 10             	add    $0x10,%esp
f0111741:	0f be c0             	movsbl %al,%eax
f0111744:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111747:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f011174b:	74 17                	je     f0111764 <test_realloc_block_FF+0x627>
		{
			is_correct = 0;
f011174d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111754:	83 ec 0c             	sub    $0xc,%esp
f0111757:	68 bc 6e 13 f0       	push   $0xf0136ebc
f011175c:	e8 d0 f6 fe ff       	call   f0100e31 <cprintf>
f0111761:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0111764:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111767:	40                   	inc    %eax
f0111768:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011176f:	83 ec 0c             	sub    $0xc,%esp
f0111772:	50                   	push   %eax
f0111773:	e8 5f e3 01 00       	call   f012fad7 <get_block_size>
f0111778:	83 c4 10             	add    $0x10,%esp
f011177b:	85 c0                	test   %eax,%eax
f011177d:	75 1b                	jne    f011179a <test_realloc_block_FF+0x65d>
f011177f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111782:	40                   	inc    %eax
f0111783:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011178a:	83 ec 0c             	sub    $0xc,%esp
f011178d:	50                   	push   %eax
f011178e:	e8 5a e3 01 00       	call   f012faed <is_free_block>
f0111793:	83 c4 10             	add    $0x10,%esp
f0111796:	84 c0                	test   %al,%al
f0111798:	74 17                	je     f01117b1 <test_realloc_block_FF+0x674>
		{
			is_correct = 0;
f011179a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f01117a1:	83 ec 0c             	sub    $0xc,%esp
f01117a4:	68 1c 6f 13 f0       	push   $0xf0136f1c
f01117a9:	e8 83 f6 fe ff       	call   f0100e31 <cprintf>
f01117ae:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f01117b1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117b4:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01117bb:	66 8b 00             	mov    (%eax),%ax
f01117be:	98                   	cwtl   
f01117bf:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01117c2:	75 26                	jne    f01117ea <test_realloc_block_FF+0x6ad>
f01117c4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117c7:	8b 04 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%eax
f01117ce:	66 8b 00             	mov    (%eax),%ax
f01117d1:	98                   	cwtl   
f01117d2:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01117d5:	75 13                	jne    f01117ea <test_realloc_block_FF+0x6ad>
f01117d7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117da:	8b 04 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%eax
f01117e1:	66 8b 00             	mov    (%eax),%ax
f01117e4:	98                   	cwtl   
f01117e5:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01117e8:	74 1a                	je     f0111804 <test_realloc_block_FF+0x6c7>
		{
			is_correct = 0;
f01117ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01117f1:	83 ec 08             	sub    $0x8,%esp
f01117f4:	ff 75 ac             	pushl  -0x54(%ebp)
f01117f7:	68 90 6f 13 f0       	push   $0xf0136f90
f01117fc:	e8 30 f6 fe ff       	call   f0100e31 <cprintf>
f0111801:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111804:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111808:	74 04                	je     f011180e <test_realloc_block_FF+0x6d1>
	{
		eval += 25;
f011180a:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f011180e:	83 ec 0c             	sub    $0xc,%esp
f0111811:	68 f0 6f 13 f0       	push   $0xf0136ff0
f0111816:	e8 16 f6 fe ff       	call   f0100e31 <cprintf>
f011181b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011181e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f0111825:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f011182c:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f0111831:	8b 15 30 eb 18 f0    	mov    0xf018eb30,%edx
f0111837:	d1 ea                	shr    %edx
f0111839:	01 d0                	add    %edx,%eax
f011183b:	83 e8 10             	sub    $0x10,%eax
f011183e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111841:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111844:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111847:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011184e:	83 ec 08             	sub    $0x8,%esp
f0111851:	52                   	push   %edx
f0111852:	50                   	push   %eax
f0111853:	e8 ec e8 01 00       	call   f0130144 <realloc_block_FF>
f0111858:	83 c4 10             	add    $0x10,%esp
f011185b:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f011185e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111862:	74 0f                	je     f0111873 <test_realloc_block_FF+0x736>
f0111864:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111867:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011186e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111871:	74 25                	je     f0111898 <test_realloc_block_FF+0x75b>
		{
			is_correct = 0;
f0111873:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f011187a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011187d:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111884:	83 ec 04             	sub    $0x4,%esp
f0111887:	ff 75 bc             	pushl  -0x44(%ebp)
f011188a:	50                   	push   %eax
f011188b:	68 2c 70 13 f0       	push   $0xf013702c
f0111890:	e8 9c f5 fe ff       	call   f0100e31 <cprintf>
f0111895:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111898:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011189b:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01118a2:	83 ec 0c             	sub    $0xc,%esp
f01118a5:	50                   	push   %eax
f01118a6:	e8 2c e2 01 00       	call   f012fad7 <get_block_size>
f01118ab:	83 c4 10             	add    $0x10,%esp
f01118ae:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f01118b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01118b4:	8d 50 10             	lea    0x10(%eax),%edx
f01118b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01118ba:	39 c2                	cmp    %eax,%edx
f01118bc:	74 21                	je     f01118df <test_realloc_block_FF+0x7a2>
		{
			is_correct = 0;
f01118be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f01118c5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01118c8:	83 c0 10             	add    $0x10,%eax
f01118cb:	83 ec 04             	sub    $0x4,%esp
f01118ce:	ff 75 a4             	pushl  -0x5c(%ebp)
f01118d1:	50                   	push   %eax
f01118d2:	68 8c 70 13 f0       	push   $0xf013708c
f01118d7:	e8 55 f5 fe ff       	call   f0100e31 <cprintf>
f01118dc:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f01118df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118e2:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f01118e9:	83 ec 0c             	sub    $0xc,%esp
f01118ec:	50                   	push   %eax
f01118ed:	e8 fb e1 01 00       	call   f012faed <is_free_block>
f01118f2:	83 c4 10             	add    $0x10,%esp
f01118f5:	0f be c0             	movsbl %al,%eax
f01118f8:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f01118fb:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01118ff:	74 17                	je     f0111918 <test_realloc_block_FF+0x7db>
		{
			is_correct = 0;
f0111901:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111908:	83 ec 0c             	sub    $0xc,%esp
f011190b:	68 fc 70 13 f0       	push   $0xf01370fc
f0111910:	e8 1c f5 fe ff       	call   f0100e31 <cprintf>
f0111915:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0111918:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011191b:	40                   	inc    %eax
f011191c:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111923:	83 ec 0c             	sub    $0xc,%esp
f0111926:	50                   	push   %eax
f0111927:	e8 ab e1 01 00       	call   f012fad7 <get_block_size>
f011192c:	83 c4 10             	add    $0x10,%esp
f011192f:	85 c0                	test   %eax,%eax
f0111931:	75 1b                	jne    f011194e <test_realloc_block_FF+0x811>
f0111933:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111936:	40                   	inc    %eax
f0111937:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011193e:	83 ec 0c             	sub    $0xc,%esp
f0111941:	50                   	push   %eax
f0111942:	e8 a6 e1 01 00       	call   f012faed <is_free_block>
f0111947:	83 c4 10             	add    $0x10,%esp
f011194a:	84 c0                	test   %al,%al
f011194c:	74 17                	je     f0111965 <test_realloc_block_FF+0x828>
		{
			is_correct = 0;
f011194e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f0111955:	83 ec 0c             	sub    $0xc,%esp
f0111958:	68 5c 71 13 f0       	push   $0xf013715c
f011195d:	e8 cf f4 fe ff       	call   f0100e31 <cprintf>
f0111962:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0111965:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111968:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f011196f:	66 8b 00             	mov    (%eax),%ax
f0111972:	98                   	cwtl   
f0111973:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111976:	75 26                	jne    f011199e <test_realloc_block_FF+0x861>
f0111978:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011197b:	8b 04 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%eax
f0111982:	66 8b 00             	mov    (%eax),%ax
f0111985:	98                   	cwtl   
f0111986:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111989:	75 13                	jne    f011199e <test_realloc_block_FF+0x861>
f011198b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011198e:	8b 04 85 a0 b9 2d f0 	mov    -0xfd24660(,%eax,4),%eax
f0111995:	66 8b 00             	mov    (%eax),%ax
f0111998:	98                   	cwtl   
f0111999:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011199c:	74 1a                	je     f01119b8 <test_realloc_block_FF+0x87b>
		{
			is_correct = 0;
f011199e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01119a5:	83 ec 08             	sub    $0x8,%esp
f01119a8:	ff 75 ac             	pushl  -0x54(%ebp)
f01119ab:	68 d0 71 13 f0       	push   $0xf01371d0
f01119b0:	e8 7c f4 fe ff       	call   f0100e31 <cprintf>
f01119b5:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f01119b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01119bc:	74 04                	je     f01119c2 <test_realloc_block_FF+0x885>
	{
		eval += 25;
f01119be:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[4] Test realloc with decreased sizes
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f01119c2:	83 ec 0c             	sub    $0xc,%esp
f01119c5:	68 30 72 13 f0       	push   $0xf0137230
f01119ca:	e8 62 f4 fe ff       	call   f0100e31 <cprintf>
f01119cf:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f01119d2:	83 ec 0c             	sub    $0xc,%esp
f01119d5:	68 68 72 13 f0       	push   $0xf0137268
f01119da:	e8 52 f4 fe ff       	call   f0100e31 <cprintf>
f01119df:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01119e2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f01119e9:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
		old_size = allocSizes[0] /*4KB*/;
f01119f0:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f01119f5:	89 45 9c             	mov    %eax,-0x64(%ebp)
		new_size = old_size - 1*kilo - sizeOfMetaData();
f01119f8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01119fb:	2d 10 04 00 00       	sub    $0x410,%eax
f0111a00:	89 45 a8             	mov    %eax,-0x58(%ebp)
		cprintf("REALLOCATE to size %d\n",new_size ) ;
f0111a03:	83 ec 08             	sub    $0x8,%esp
f0111a06:	ff 75 a8             	pushl  -0x58(%ebp)
f0111a09:	68 91 72 13 f0       	push   $0xf0137291
f0111a0e:	e8 1e f4 fe ff       	call   f0100e31 <cprintf>
f0111a13:	83 c4 10             	add    $0x10,%esp
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111a16:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111a19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a1c:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111a23:	83 ec 08             	sub    $0x8,%esp
f0111a26:	52                   	push   %edx
f0111a27:	50                   	push   %eax
f0111a28:	e8 17 e7 01 00       	call   f0130144 <realloc_block_FF>
f0111a2d:	83 c4 10             	add    $0x10,%esp
f0111a30:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111a33:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111a37:	74 0f                	je     f0111a48 <test_realloc_block_FF+0x90b>
f0111a39:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a3c:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111a43:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111a46:	74 25                	je     f0111a6d <test_realloc_block_FF+0x930>
		{
			is_correct = 0;
f0111a48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f0111a4f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a52:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111a59:	83 ec 04             	sub    $0x4,%esp
f0111a5c:	ff 75 bc             	pushl  -0x44(%ebp)
f0111a5f:	50                   	push   %eax
f0111a60:	68 a8 72 13 f0       	push   $0xf01372a8
f0111a65:	e8 c7 f3 fe ff       	call   f0100e31 <cprintf>
f0111a6a:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111a6d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a70:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111a77:	83 ec 0c             	sub    $0xc,%esp
f0111a7a:	50                   	push   %eax
f0111a7b:	e8 57 e0 01 00       	call   f012fad7 <get_block_size>
f0111a80:	83 c4 10             	add    $0x10,%esp
f0111a83:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111a86:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111a89:	8d 50 10             	lea    0x10(%eax),%edx
f0111a8c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111a8f:	39 c2                	cmp    %eax,%edx
f0111a91:	74 21                	je     f0111ab4 <test_realloc_block_FF+0x977>
		{
			is_correct = 0;
f0111a93:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111a9a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111a9d:	83 c0 10             	add    $0x10,%eax
f0111aa0:	83 ec 04             	sub    $0x4,%esp
f0111aa3:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111aa6:	50                   	push   %eax
f0111aa7:	68 08 73 13 f0       	push   $0xf0137308
f0111aac:	e8 80 f3 fe ff       	call   f0100e31 <cprintf>
f0111ab1:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111ab4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111ab7:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111abe:	83 ec 0c             	sub    $0xc,%esp
f0111ac1:	50                   	push   %eax
f0111ac2:	e8 26 e0 01 00       	call   f012faed <is_free_block>
f0111ac7:	83 c4 10             	add    $0x10,%esp
f0111aca:	0f be c0             	movsbl %al,%eax
f0111acd:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111ad0:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111ad4:	74 17                	je     f0111aed <test_realloc_block_FF+0x9b0>
		{
			is_correct = 0;
f0111ad6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111add:	83 ec 0c             	sub    $0xc,%esp
f0111ae0:	68 78 73 13 f0       	push   $0xf0137378
f0111ae5:	e8 47 f3 fe ff       	call   f0100e31 <cprintf>
f0111aea:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockMetaData *newBlkMetaData = (struct BlockMetaData *)(va + new_size);
f0111aed:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111af0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111af3:	01 d0                	add    %edx,%eax
f0111af5:	89 45 98             	mov    %eax,-0x68(%ebp)
		expected_size = 1*kilo ;
f0111af8:	c7 45 94 00 04 00 00 	movl   $0x400,-0x6c(%ebp)
		if (newBlkMetaData->size != expected_size || newBlkMetaData->is_free != 1)
f0111aff:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b02:	8b 10                	mov    (%eax),%edx
f0111b04:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111b07:	39 c2                	cmp    %eax,%edx
f0111b09:	75 0a                	jne    f0111b15 <test_realloc_block_FF+0x9d8>
f0111b0b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b0e:	8a 40 04             	mov    0x4(%eax),%al
f0111b11:	3c 01                	cmp    $0x1,%al
f0111b13:	74 20                	je     f0111b35 <test_realloc_block_FF+0x9f8>
		{
			is_correct = 0;
f0111b15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.4: WRONG REALLOC! newly created block is not correct... check it!. Expected %d, Actual %d\n", expected_size, newBlkMetaData->size);
f0111b1c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b1f:	8b 00                	mov    (%eax),%eax
f0111b21:	83 ec 04             	sub    $0x4,%esp
f0111b24:	50                   	push   %eax
f0111b25:	ff 75 94             	pushl  -0x6c(%ebp)
f0111b28:	68 d8 73 13 f0       	push   $0xf01373d8
f0111b2d:	e8 ff f2 fe ff       	call   f0100e31 <cprintf>
f0111b32:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0111b35:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111b38:	8b 04 85 a0 a3 2d f0 	mov    -0xfd25c60(,%eax,4),%eax
f0111b3f:	66 8b 00             	mov    (%eax),%ax
f0111b42:	98                   	cwtl   
f0111b43:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111b46:	75 13                	jne    f0111b5b <test_realloc_block_FF+0xa1e>
f0111b48:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111b4b:	8b 04 85 a0 cf 2d f0 	mov    -0xfd23060(,%eax,4),%eax
f0111b52:	66 8b 00             	mov    (%eax),%ax
f0111b55:	98                   	cwtl   
f0111b56:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111b59:	74 1a                	je     f0111b75 <test_realloc_block_FF+0xa38>
		{
			is_correct = 0;
f0111b5b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111b62:	83 ec 08             	sub    $0x8,%esp
f0111b65:	ff 75 ac             	pushl  -0x54(%ebp)
f0111b68:	68 50 74 13 f0       	push   $0xf0137450
f0111b6d:	e8 bf f2 fe ff       	call   f0100e31 <cprintf>
f0111b72:	83 c4 10             	add    $0x10,%esp
		}

	}
	if (is_correct)
f0111b75:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111b79:	74 04                	je     f0111b7f <test_realloc_block_FF+0xa42>
		{
			eval += 30;
f0111b7b:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)
		}


	cprintf("test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0111b7f:	83 ec 08             	sub    $0x8,%esp
f0111b82:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b85:	68 b0 74 13 f0       	push   $0xf01374b0
f0111b8a:	e8 a2 f2 fe ff       	call   f0100e31 <cprintf>
f0111b8f:	83 c4 10             	add    $0x10,%esp

}
f0111b92:	90                   	nop
f0111b93:	c9                   	leave  
f0111b94:	c3                   	ret    

f0111b95 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f0111b95:	55                   	push   %ebp
f0111b96:	89 e5                	mov    %esp,%ebp
f0111b98:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f0111b9b:	83 ec 04             	sub    $0x4,%esp
f0111b9e:	68 ef 74 13 f0       	push   $0xf01374ef
f0111ba3:	68 c7 05 00 00       	push   $0x5c7
f0111ba8:	68 50 44 13 f0       	push   $0xf0134450
f0111bad:	e8 fe e5 fe ff       	call   f01001b0 <_panic>

f0111bb2 <sys_check_LRU_lists>:
#include <kern/tests/test_working_set.h>
#include <kern/proc/user_environment.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0111bb2:	55                   	push   %ebp
f0111bb3:	89 e5                	mov    %esp,%ebp
f0111bb5:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111bb8:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0111bbd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f0111bc0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f0111bc7:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f0111bce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0111bd2:	0f 84 a5 00 00 00    	je     f0111c7d <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f0111bd8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111bdf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111be2:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111be8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111beb:	eb 4a                	jmp    f0111c37 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f0111bed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111bf0:	8b 00                	mov    (%eax),%eax
f0111bf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111bf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111bf8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111bfd:	89 c2                	mov    %eax,%edx
f0111bff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111c02:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111c09:	8b 45 08             	mov    0x8(%ebp),%eax
f0111c0c:	01 c8                	add    %ecx,%eax
f0111c0e:	8b 00                	mov    (%eax),%eax
f0111c10:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111c13:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111c16:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111c1b:	39 c2                	cmp    %eax,%edx
f0111c1d:	74 09                	je     f0111c28 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f0111c1f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f0111c26:	eb 3e                	jmp    f0111c66 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f0111c28:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111c2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111c2e:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111c34:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111c37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111c3b:	74 08                	je     f0111c45 <sys_check_LRU_lists+0x93>
f0111c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111c40:	8b 40 10             	mov    0x10(%eax),%eax
f0111c43:	eb 05                	jmp    f0111c4a <sys_check_LRU_lists+0x98>
f0111c45:	b8 00 00 00 00       	mov    $0x0,%eax
f0111c4a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111c4d:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111c53:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111c56:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111c5c:	85 c0                	test   %eax,%eax
f0111c5e:	75 8d                	jne    f0111bed <sys_check_LRU_lists+0x3b>
f0111c60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111c64:	75 87                	jne    f0111bed <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f0111c66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111c69:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0111c6f:	8b 45 10             	mov    0x10(%ebp),%eax
f0111c72:	39 c2                	cmp    %eax,%edx
f0111c74:	74 07                	je     f0111c7d <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f0111c76:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f0111c7d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0111c81:	0f 84 a5 00 00 00    	je     f0111d2c <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f0111c87:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111c8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111c91:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111c97:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111c9a:	eb 4a                	jmp    f0111ce6 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f0111c9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111c9f:	8b 00                	mov    (%eax),%eax
f0111ca1:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111ca4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111ca7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111cac:	89 c2                	mov    %eax,%edx
f0111cae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111cb1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111cb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111cbb:	01 c8                	add    %ecx,%eax
f0111cbd:	8b 00                	mov    (%eax),%eax
f0111cbf:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0111cc2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111cc5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111cca:	39 c2                	cmp    %eax,%edx
f0111ccc:	74 09                	je     f0111cd7 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f0111cce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f0111cd5:	eb 3e                	jmp    f0111d15 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f0111cd7:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111cda:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111cdd:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111ce3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111ce6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111cea:	74 08                	je     f0111cf4 <sys_check_LRU_lists+0x142>
f0111cec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111cef:	8b 40 10             	mov    0x10(%eax),%eax
f0111cf2:	eb 05                	jmp    f0111cf9 <sys_check_LRU_lists+0x147>
f0111cf4:	b8 00 00 00 00       	mov    $0x0,%eax
f0111cf9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111cfc:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111d02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111d05:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111d0b:	85 c0                	test   %eax,%eax
f0111d0d:	75 8d                	jne    f0111c9c <sys_check_LRU_lists+0xea>
f0111d0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111d13:	75 87                	jne    f0111c9c <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0111d15:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111d18:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0111d1e:	8b 45 14             	mov    0x14(%ebp),%eax
f0111d21:	39 c2                	cmp    %eax,%edx
f0111d23:	74 07                	je     f0111d2c <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f0111d25:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f0111d2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111d2f:	23 45 f8             	and    -0x8(%ebp),%eax
}
f0111d32:	c9                   	leave  
f0111d33:	c3                   	ret    

f0111d34 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0111d34:	55                   	push   %ebp
f0111d35:	89 e5                	mov    %esp,%ebp
f0111d37:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111d3a:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0111d3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f0111d42:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111d49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111d4c:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111d52:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111d55:	eb 65                	jmp    f0111dbc <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f0111d57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111d5e:	eb 3a                	jmp    f0111d9a <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111d60:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111d63:	8b 00                	mov    (%eax),%eax
f0111d65:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111d68:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111d6b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111d70:	89 c2                	mov    %eax,%edx
f0111d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111d75:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111d7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0111d7f:	01 c8                	add    %ecx,%eax
f0111d81:	8b 00                	mov    (%eax),%eax
f0111d83:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111d86:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111d89:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111d8e:	39 c2                	cmp    %eax,%edx
f0111d90:	75 05                	jne    f0111d97 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f0111d92:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111d95:	eb 0b                	jmp    f0111da2 <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0111d97:	ff 45 f4             	incl   -0xc(%ebp)
f0111d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111d9d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111da0:	7c be                	jl     f0111d60 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111da2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111da6:	7e 08                	jle    f0111db0 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f0111da8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111dab:	e9 ed 00 00 00       	jmp    f0111e9d <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111db0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111db3:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111db9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111dbc:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111dc0:	74 08                	je     f0111dca <sys_check_LRU_lists_free+0x96>
f0111dc2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111dc5:	8b 40 10             	mov    0x10(%eax),%eax
f0111dc8:	eb 05                	jmp    f0111dcf <sys_check_LRU_lists_free+0x9b>
f0111dca:	b8 00 00 00 00       	mov    $0x0,%eax
f0111dcf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111dd2:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111dd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111ddb:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111de1:	85 c0                	test   %eax,%eax
f0111de3:	0f 85 6e ff ff ff    	jne    f0111d57 <sys_check_LRU_lists_free+0x23>
f0111de9:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111ded:	0f 85 64 ff ff ff    	jne    f0111d57 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111df3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111df6:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111dfc:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111dff:	eb 62                	jmp    f0111e63 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f0111e01:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0111e08:	eb 3a                	jmp    f0111e44 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111e0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111e0d:	8b 00                	mov    (%eax),%eax
f0111e0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0111e12:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111e15:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111e1a:	89 c2                	mov    %eax,%edx
f0111e1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111e1f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111e26:	8b 45 08             	mov    0x8(%ebp),%eax
f0111e29:	01 c8                	add    %ecx,%eax
f0111e2b:	8b 00                	mov    (%eax),%eax
f0111e2d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111e30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111e33:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111e38:	39 c2                	cmp    %eax,%edx
f0111e3a:	75 05                	jne    f0111e41 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f0111e3c:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111e3f:	eb 0b                	jmp    f0111e4c <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f0111e41:	ff 45 f0             	incl   -0x10(%ebp)
f0111e44:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111e47:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111e4a:	7c be                	jl     f0111e0a <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111e4c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111e50:	7e 05                	jle    f0111e57 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f0111e52:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111e55:	eb 46                	jmp    f0111e9d <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111e57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111e5a:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111e60:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111e63:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111e67:	74 08                	je     f0111e71 <sys_check_LRU_lists_free+0x13d>
f0111e69:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111e6c:	8b 40 10             	mov    0x10(%eax),%eax
f0111e6f:	eb 05                	jmp    f0111e76 <sys_check_LRU_lists_free+0x142>
f0111e71:	b8 00 00 00 00       	mov    $0x0,%eax
f0111e76:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111e79:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111e7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111e82:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111e88:	85 c0                	test   %eax,%eax
f0111e8a:	0f 85 71 ff ff ff    	jne    f0111e01 <sys_check_LRU_lists_free+0xcd>
f0111e90:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111e94:	0f 85 67 ff ff ff    	jne    f0111e01 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f0111e9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0111e9d:	c9                   	leave  
f0111e9e:	c3                   	ret    

f0111e9f <sys_check_WS_list>:

//2023
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_in_order)
{
f0111e9f:	55                   	push   %ebp
f0111ea0:	89 e5                	mov    %esp,%ebp
f0111ea2:	83 ec 08             	sub    $0x8,%esp
			}
		}
	}
	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f0111ea5:	83 ec 04             	sub    $0x4,%esp
f0111ea8:	68 04 75 13 f0       	push   $0xf0137504
f0111ead:	68 9c 00 00 00       	push   $0x9c
f0111eb2:	68 4f 75 13 f0       	push   $0xf013754f
f0111eb7:	e8 f4 e2 fe ff       	call   f01001b0 <_panic>

f0111ebc <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111ebc:	55                   	push   %ebp
f0111ebd:	89 e5                	mov    %esp,%ebp
f0111ebf:	57                   	push   %edi
f0111ec0:	56                   	push   %esi
f0111ec1:	53                   	push   %ebx
f0111ec2:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111ec8:	83 ec 0c             	sub    $0xc,%esp
f0111ecb:	68 70 75 13 f0       	push   $0xf0137570
f0111ed0:	e8 5c ef fe ff       	call   f0100e31 <cprintf>
f0111ed5:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0111ed8:	83 ec 0c             	sub    $0xc,%esp
f0111edb:	68 94 75 13 f0       	push   $0xf0137594
f0111ee0:	e8 4c ef fe ff       	call   f0100e31 <cprintf>
f0111ee5:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111ee8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111eef:	83 ec 0c             	sub    $0xc,%esp
f0111ef2:	68 b0 75 13 f0       	push   $0xf01375b0
f0111ef7:	e8 35 ef fe ff       	call   f0100e31 <cprintf>
f0111efc:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111eff:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111f02:	bb 6a 76 13 f0       	mov    $0xf013766a,%ebx
f0111f07:	ba 03 00 00 00       	mov    $0x3,%edx
f0111f0c:	89 c7                	mov    %eax,%edi
f0111f0e:	89 de                	mov    %ebx,%esi
f0111f10:	89 d1                	mov    %edx,%ecx
f0111f12:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111f14:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111f17:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111f1c:	b8 00 00 00 00       	mov    $0x0,%eax
f0111f21:	89 d7                	mov    %edx,%edi
f0111f23:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111f25:	83 ec 0c             	sub    $0xc,%esp
f0111f28:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111f2b:	50                   	push   %eax
f0111f2c:	e8 92 fc fe ff       	call   f0101bc3 <execute_command>
f0111f31:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111f34:	83 ec 0c             	sub    $0xc,%esp
f0111f37:	68 de 75 13 f0       	push   $0xf01375de
f0111f3c:	e8 f0 ee fe ff       	call   f0100e31 <cprintf>
f0111f41:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111f44:	83 ec 0c             	sub    $0xc,%esp
f0111f47:	68 f4 75 13 f0       	push   $0xf01375f4
f0111f4c:	e8 e0 ee fe ff       	call   f0100e31 <cprintf>
f0111f51:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111f54:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111f5b:	65 00 00 
f0111f5e:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111f64:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111f69:	b8 00 00 00 00       	mov    $0x0,%eax
f0111f6e:	89 d7                	mov    %edx,%edi
f0111f70:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111f72:	83 ec 0c             	sub    $0xc,%esp
f0111f75:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111f7b:	50                   	push   %eax
f0111f7c:	e8 42 fc fe ff       	call   f0101bc3 <execute_command>
f0111f81:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111f84:	83 ec 0c             	sub    $0xc,%esp
f0111f87:	68 de 75 13 f0       	push   $0xf01375de
f0111f8c:	e8 a0 ee fe ff       	call   f0100e31 <cprintf>
f0111f91:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111f94:	83 ec 0c             	sub    $0xc,%esp
f0111f97:	68 1c 76 13 f0       	push   $0xf013761c
f0111f9c:	e8 90 ee fe ff       	call   f0100e31 <cprintf>
f0111fa1:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111fa4:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111fab:	75 00 00 
f0111fae:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111fb4:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111fb9:	b8 00 00 00 00       	mov    $0x0,%eax
f0111fbe:	89 d7                	mov    %edx,%edi
f0111fc0:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0111fc2:	83 ec 0c             	sub    $0xc,%esp
f0111fc5:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111fcb:	50                   	push   %eax
f0111fcc:	e8 f2 fb fe ff       	call   f0101bc3 <execute_command>
f0111fd1:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111fd4:	83 ec 0c             	sub    $0xc,%esp
f0111fd7:	68 de 75 13 f0       	push   $0xf01375de
f0111fdc:	e8 50 ee fe ff       	call   f0100e31 <cprintf>
f0111fe1:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111fe4:	83 ec 0c             	sub    $0xc,%esp
f0111fe7:	68 44 76 13 f0       	push   $0xf0137644
f0111fec:	e8 40 ee fe ff       	call   f0100e31 <cprintf>
f0111ff1:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0111ff4:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111ffb:	6d 6d 00 
f0111ffe:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0112004:	b9 18 00 00 00       	mov    $0x18,%ecx
f0112009:	b8 00 00 00 00       	mov    $0x0,%eax
f011200e:	89 d7                	mov    %edx,%edi
f0112010:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0112012:	83 ec 0c             	sub    $0xc,%esp
f0112015:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f011201b:	50                   	push   %eax
f011201c:	e8 a2 fb fe ff       	call   f0101bc3 <execute_command>
f0112021:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0112024:	83 ec 0c             	sub    $0xc,%esp
f0112027:	68 de 75 13 f0       	push   $0xf01375de
f011202c:	e8 00 ee fe ff       	call   f0100e31 <cprintf>
f0112031:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112034:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112039:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011203c:	5b                   	pop    %ebx
f011203d:	5e                   	pop    %esi
f011203e:	5f                   	pop    %edi
f011203f:	5d                   	pop    %ebp
f0112040:	c3                   	ret    

f0112041 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0112041:	55                   	push   %ebp
f0112042:	89 e5                	mov    %esp,%ebp
f0112044:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0112047:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011204e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0112055:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011205c:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112061:	ff 75 ec             	pushl  -0x14(%ebp)
f0112064:	ff 75 f0             	pushl  -0x10(%ebp)
f0112067:	ff 75 f4             	pushl  -0xc(%ebp)
f011206a:	50                   	push   %eax
f011206b:	e8 4b 60 ff ff       	call   f01080bb <pt_set_page_permissions>
f0112070:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112073:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112078:	ff 75 ec             	pushl  -0x14(%ebp)
f011207b:	ff 75 f0             	pushl  -0x10(%ebp)
f011207e:	ff 75 f4             	pushl  -0xc(%ebp)
f0112081:	50                   	push   %eax
f0112082:	e8 b8 4d 00 00       	call   f0116e3f <CP>
f0112087:	83 c4 10             	add    $0x10,%esp
f011208a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011208d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112091:	74 14                	je     f01120a7 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0112093:	83 ec 04             	sub    $0x4,%esp
f0112096:	68 d0 76 13 f0       	push   $0xf01376d0
f011209b:	6a 5a                	push   $0x5a
f011209d:	68 f2 76 13 f0       	push   $0xf01376f2
f01120a2:	e8 09 e1 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f01120a7:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01120ae:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01120b5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01120bc:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01120c1:	ff 75 ec             	pushl  -0x14(%ebp)
f01120c4:	ff 75 f0             	pushl  -0x10(%ebp)
f01120c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01120ca:	50                   	push   %eax
f01120cb:	e8 eb 5f ff ff       	call   f01080bb <pt_set_page_permissions>
f01120d0:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01120d3:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01120d8:	ff 75 ec             	pushl  -0x14(%ebp)
f01120db:	ff 75 f0             	pushl  -0x10(%ebp)
f01120de:	ff 75 f4             	pushl  -0xc(%ebp)
f01120e1:	50                   	push   %eax
f01120e2:	e8 58 4d 00 00       	call   f0116e3f <CP>
f01120e7:	83 c4 10             	add    $0x10,%esp
f01120ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01120ed:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01120f1:	74 14                	je     f0112107 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f01120f3:	83 ec 04             	sub    $0x4,%esp
f01120f6:	68 10 77 13 f0       	push   $0xf0137710
f01120fb:	6a 66                	push   $0x66
f01120fd:	68 f2 76 13 f0       	push   $0xf01376f2
f0112102:	e8 a9 e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0112107:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f011210e:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0112115:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011211c:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112121:	ff 75 ec             	pushl  -0x14(%ebp)
f0112124:	ff 75 f0             	pushl  -0x10(%ebp)
f0112127:	ff 75 f4             	pushl  -0xc(%ebp)
f011212a:	50                   	push   %eax
f011212b:	e8 8b 5f ff ff       	call   f01080bb <pt_set_page_permissions>
f0112130:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112133:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112138:	ff 75 ec             	pushl  -0x14(%ebp)
f011213b:	ff 75 f0             	pushl  -0x10(%ebp)
f011213e:	ff 75 f4             	pushl  -0xc(%ebp)
f0112141:	50                   	push   %eax
f0112142:	e8 f8 4c 00 00       	call   f0116e3f <CP>
f0112147:	83 c4 10             	add    $0x10,%esp
f011214a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011214d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112151:	74 14                	je     f0112167 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0112153:	83 ec 04             	sub    $0x4,%esp
f0112156:	68 34 77 13 f0       	push   $0xf0137734
f011215b:	6a 71                	push   $0x71
f011215d:	68 f2 76 13 f0       	push   $0xf01376f2
f0112162:	e8 49 e0 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0112167:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f011216e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0112175:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011217c:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112181:	ff 75 ec             	pushl  -0x14(%ebp)
f0112184:	ff 75 f0             	pushl  -0x10(%ebp)
f0112187:	ff 75 f4             	pushl  -0xc(%ebp)
f011218a:	50                   	push   %eax
f011218b:	e8 2b 5f ff ff       	call   f01080bb <pt_set_page_permissions>
f0112190:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112193:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112198:	ff 75 ec             	pushl  -0x14(%ebp)
f011219b:	ff 75 f0             	pushl  -0x10(%ebp)
f011219e:	ff 75 f4             	pushl  -0xc(%ebp)
f01121a1:	50                   	push   %eax
f01121a2:	e8 98 4c 00 00       	call   f0116e3f <CP>
f01121a7:	83 c4 10             	add    $0x10,%esp
f01121aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01121ad:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01121b1:	74 14                	je     f01121c7 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f01121b3:	83 ec 04             	sub    $0x4,%esp
f01121b6:	68 58 77 13 f0       	push   $0xf0137758
f01121bb:	6a 7d                	push   $0x7d
f01121bd:	68 f2 76 13 f0       	push   $0xf01376f2
f01121c2:	e8 e9 df fe ff       	call   f01001b0 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f01121c7:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f01121ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f01121d5:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01121dc:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01121e1:	ff 75 ec             	pushl  -0x14(%ebp)
f01121e4:	ff 75 f0             	pushl  -0x10(%ebp)
f01121e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01121ea:	50                   	push   %eax
f01121eb:	e8 cb 5e ff ff       	call   f01080bb <pt_set_page_permissions>
f01121f0:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01121f3:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01121f8:	ff 75 ec             	pushl  -0x14(%ebp)
f01121fb:	ff 75 f0             	pushl  -0x10(%ebp)
f01121fe:	ff 75 f4             	pushl  -0xc(%ebp)
f0112201:	50                   	push   %eax
f0112202:	e8 38 4c 00 00       	call   f0116e3f <CP>
f0112207:	83 c4 10             	add    $0x10,%esp
f011220a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011220d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112211:	74 17                	je     f011222a <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0112213:	83 ec 04             	sub    $0x4,%esp
f0112216:	68 7c 77 13 f0       	push   $0xf013777c
f011221b:	68 89 00 00 00       	push   $0x89
f0112220:	68 f2 76 13 f0       	push   $0xf01376f2
f0112225:	e8 86 df fe ff       	call   f01001b0 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f011222a:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0112231:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0112238:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011223f:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112244:	ff 75 ec             	pushl  -0x14(%ebp)
f0112247:	ff 75 f0             	pushl  -0x10(%ebp)
f011224a:	ff 75 f4             	pushl  -0xc(%ebp)
f011224d:	50                   	push   %eax
f011224e:	e8 68 5e ff ff       	call   f01080bb <pt_set_page_permissions>
f0112253:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112256:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011225b:	ff 75 ec             	pushl  -0x14(%ebp)
f011225e:	ff 75 f0             	pushl  -0x10(%ebp)
f0112261:	ff 75 f4             	pushl  -0xc(%ebp)
f0112264:	50                   	push   %eax
f0112265:	e8 d5 4b 00 00       	call   f0116e3f <CP>
f011226a:	83 c4 10             	add    $0x10,%esp
f011226d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112270:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112274:	74 17                	je     f011228d <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0112276:	83 ec 04             	sub    $0x4,%esp
f0112279:	68 a0 77 13 f0       	push   $0xf01377a0
f011227e:	68 95 00 00 00       	push   $0x95
f0112283:	68 f2 76 13 f0       	push   $0xf01376f2
f0112288:	e8 23 df fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f011228d:	83 ec 0c             	sub    $0xc,%esp
f0112290:	68 cc 77 13 f0       	push   $0xf01377cc
f0112295:	e8 97 eb fe ff       	call   f0100e31 <cprintf>
f011229a:	83 c4 10             	add    $0x10,%esp
	return 0;
f011229d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01122a2:	c9                   	leave  
f01122a3:	c3                   	ret    

f01122a4 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f01122a4:	55                   	push   %ebp
f01122a5:	89 e5                	mov    %esp,%ebp
f01122a7:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f01122aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01122b1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01122b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01122bf:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01122c4:	ff 75 ec             	pushl  -0x14(%ebp)
f01122c7:	ff 75 f0             	pushl  -0x10(%ebp)
f01122ca:	ff 75 f4             	pushl  -0xc(%ebp)
f01122cd:	50                   	push   %eax
f01122ce:	e8 e8 5d ff ff       	call   f01080bb <pt_set_page_permissions>
f01122d3:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f01122d6:	83 ec 04             	sub    $0x4,%esp
f01122d9:	68 1c 78 13 f0       	push   $0xf013781c
f01122de:	68 a2 00 00 00       	push   $0xa2
f01122e3:	68 f2 76 13 f0       	push   $0xf01376f2
f01122e8:	e8 c3 de fe ff       	call   f01001b0 <_panic>

f01122ed <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f01122ed:	55                   	push   %ebp
f01122ee:	89 e5                	mov    %esp,%ebp
f01122f0:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f01122f3:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f01122fa:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01122ff:	83 ec 08             	sub    $0x8,%esp
f0112302:	ff 75 f4             	pushl  -0xc(%ebp)
f0112305:	50                   	push   %eax
f0112306:	e8 74 5e ff ff       	call   f010817f <pt_get_page_permissions>
f011230b:	83 c4 10             	add    $0x10,%esp
f011230e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0112311:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0112315:	74 17                	je     f011232e <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0112317:	83 ec 04             	sub    $0x4,%esp
f011231a:	68 b8 78 13 f0       	push   $0xf01378b8
f011231f:	68 b0 00 00 00       	push   $0xb0
f0112324:	68 f2 76 13 f0       	push   $0xf01376f2
f0112329:	e8 82 de fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f011232e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112335:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011233a:	83 ec 08             	sub    $0x8,%esp
f011233d:	ff 75 f4             	pushl  -0xc(%ebp)
f0112340:	50                   	push   %eax
f0112341:	e8 39 5e ff ff       	call   f010817f <pt_get_page_permissions>
f0112346:	83 c4 10             	add    $0x10,%esp
f0112349:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f011234c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112350:	74 17                	je     f0112369 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0112352:	83 ec 04             	sub    $0x4,%esp
f0112355:	68 dc 78 13 f0       	push   $0xf01378dc
f011235a:	68 b8 00 00 00       	push   $0xb8
f011235f:	68 f2 76 13 f0       	push   $0xf01376f2
f0112364:	e8 47 de fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0112369:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112370:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112375:	83 ec 08             	sub    $0x8,%esp
f0112378:	ff 75 f4             	pushl  -0xc(%ebp)
f011237b:	50                   	push   %eax
f011237c:	e8 fe 5d ff ff       	call   f010817f <pt_get_page_permissions>
f0112381:	83 c4 10             	add    $0x10,%esp
f0112384:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0112387:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011238b:	74 17                	je     f01123a4 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f011238d:	83 ec 04             	sub    $0x4,%esp
f0112390:	68 00 79 13 f0       	push   $0xf0137900
f0112395:	68 c0 00 00 00       	push   $0xc0
f011239a:	68 f2 76 13 f0       	push   $0xf01376f2
f011239f:	e8 0c de fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF1000000;
f01123a4:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01123ab:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01123b0:	83 ec 08             	sub    $0x8,%esp
f01123b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01123b6:	50                   	push   %eax
f01123b7:	e8 c3 5d ff ff       	call   f010817f <pt_get_page_permissions>
f01123bc:	83 c4 10             	add    $0x10,%esp
f01123bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01123c2:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01123c6:	74 17                	je     f01123df <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01123c8:	83 ec 04             	sub    $0x4,%esp
f01123cb:	68 24 79 13 f0       	push   $0xf0137924
f01123d0:	68 c7 00 00 00       	push   $0xc7
f01123d5:	68 f2 76 13 f0       	push   $0xf01376f2
f01123da:	e8 d1 dd fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f01123df:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01123e6:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01123eb:	83 ec 08             	sub    $0x8,%esp
f01123ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01123f1:	50                   	push   %eax
f01123f2:	e8 88 5d ff ff       	call   f010817f <pt_get_page_permissions>
f01123f7:	83 c4 10             	add    $0x10,%esp
f01123fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f01123fd:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0112401:	74 17                	je     f011241a <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0112403:	83 ec 04             	sub    $0x4,%esp
f0112406:	68 48 79 13 f0       	push   $0xf0137948
f011240b:	68 ce 00 00 00       	push   $0xce
f0112410:	68 f2 76 13 f0       	push   $0xf01376f2
f0112415:	e8 96 dd fe ff       	call   f01001b0 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f011241a:	83 ec 0c             	sub    $0xc,%esp
f011241d:	68 6c 79 13 f0       	push   $0xf013796c
f0112422:	e8 0a ea fe ff       	call   f0100e31 <cprintf>
f0112427:	83 c4 10             	add    $0x10,%esp
	return 0;
f011242a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011242f:	c9                   	leave  
f0112430:	c3                   	ret    

f0112431 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0112431:	55                   	push   %ebp
f0112432:	89 e5                	mov    %esp,%ebp
f0112434:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0112437:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011243e:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112443:	83 ec 08             	sub    $0x8,%esp
f0112446:	ff 75 f4             	pushl  -0xc(%ebp)
f0112449:	50                   	push   %eax
f011244a:	e8 79 5d ff ff       	call   f01081c8 <pt_clear_page_table_entry>
f011244f:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0112452:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112457:	83 ec 08             	sub    $0x8,%esp
f011245a:	ff 75 f4             	pushl  -0xc(%ebp)
f011245d:	50                   	push   %eax
f011245e:	e8 38 49 00 00       	call   f0116d9b <CE>
f0112463:	83 c4 10             	add    $0x10,%esp
f0112466:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112469:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011246d:	74 17                	je     f0112486 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f011246f:	83 ec 04             	sub    $0x4,%esp
f0112472:	68 b4 79 13 f0       	push   $0xf01379b4
f0112477:	68 de 00 00 00       	push   $0xde
f011247c:	68 f2 76 13 f0       	push   $0xf01376f2
f0112481:	e8 2a dd fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0112486:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011248d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112492:	83 ec 08             	sub    $0x8,%esp
f0112495:	ff 75 f4             	pushl  -0xc(%ebp)
f0112498:	50                   	push   %eax
f0112499:	e8 2a 5d ff ff       	call   f01081c8 <pt_clear_page_table_entry>
f011249e:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01124a1:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01124a6:	83 ec 08             	sub    $0x8,%esp
f01124a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01124ac:	50                   	push   %eax
f01124ad:	e8 e9 48 00 00       	call   f0116d9b <CE>
f01124b2:	83 c4 10             	add    $0x10,%esp
f01124b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01124b8:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01124bc:	74 17                	je     f01124d5 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f01124be:	83 ec 04             	sub    $0x4,%esp
f01124c1:	68 e0 79 13 f0       	push   $0xf01379e0
f01124c6:	68 e6 00 00 00       	push   $0xe6
f01124cb:	68 f2 76 13 f0       	push   $0xf01376f2
f01124d0:	e8 db dc fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f01124d5:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01124dc:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01124e1:	83 ec 08             	sub    $0x8,%esp
f01124e4:	ff 75 f4             	pushl  -0xc(%ebp)
f01124e7:	50                   	push   %eax
f01124e8:	e8 db 5c ff ff       	call   f01081c8 <pt_clear_page_table_entry>
f01124ed:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01124f0:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01124f5:	83 ec 08             	sub    $0x8,%esp
f01124f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01124fb:	50                   	push   %eax
f01124fc:	e8 9a 48 00 00       	call   f0116d9b <CE>
f0112501:	83 c4 10             	add    $0x10,%esp
f0112504:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112507:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011250b:	74 17                	je     f0112524 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f011250d:	83 ec 04             	sub    $0x4,%esp
f0112510:	68 0c 7a 13 f0       	push   $0xf0137a0c
f0112515:	68 ee 00 00 00       	push   $0xee
f011251a:	68 f2 76 13 f0       	push   $0xf01376f2
f011251f:	e8 8c dc fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0000000;
f0112524:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011252b:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112530:	83 ec 08             	sub    $0x8,%esp
f0112533:	ff 75 f4             	pushl  -0xc(%ebp)
f0112536:	50                   	push   %eax
f0112537:	e8 8c 5c ff ff       	call   f01081c8 <pt_clear_page_table_entry>
f011253c:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011253f:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112544:	83 ec 08             	sub    $0x8,%esp
f0112547:	ff 75 f4             	pushl  -0xc(%ebp)
f011254a:	50                   	push   %eax
f011254b:	e8 4b 48 00 00       	call   f0116d9b <CE>
f0112550:	83 c4 10             	add    $0x10,%esp
f0112553:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112556:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011255a:	74 17                	je     f0112573 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f011255c:	83 ec 04             	sub    $0x4,%esp
f011255f:	68 38 7a 13 f0       	push   $0xf0137a38
f0112564:	68 f6 00 00 00       	push   $0xf6
f0112569:	68 f2 76 13 f0       	push   $0xf01376f2
f011256e:	e8 3d dc fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0112573:	83 ec 0c             	sub    $0xc,%esp
f0112576:	68 64 7a 13 f0       	push   $0xf0137a64
f011257b:	e8 b1 e8 fe ff       	call   f0100e31 <cprintf>
f0112580:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112583:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112588:	c9                   	leave  
f0112589:	c3                   	ret    

f011258a <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f011258a:	55                   	push   %ebp
f011258b:	89 e5                	mov    %esp,%ebp
f011258d:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0112590:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112597:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011259c:	83 ec 08             	sub    $0x8,%esp
f011259f:	ff 75 f4             	pushl  -0xc(%ebp)
f01125a2:	50                   	push   %eax
f01125a3:	e8 20 5c ff ff       	call   f01081c8 <pt_clear_page_table_entry>
f01125a8:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f01125ab:	83 ec 04             	sub    $0x4,%esp
f01125ae:	68 b0 7a 13 f0       	push   $0xf0137ab0
f01125b3:	68 01 01 00 00       	push   $0x101
f01125b8:	68 f2 76 13 f0       	push   $0xf01376f2
f01125bd:	e8 ee db fe ff       	call   f01001b0 <_panic>

f01125c2 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f01125c2:	55                   	push   %ebp
f01125c3:	89 e5                	mov    %esp,%ebp
f01125c5:	57                   	push   %edi
f01125c6:	56                   	push   %esi
f01125c7:	53                   	push   %ebx
f01125c8:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01125ce:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01125d4:	bb f4 7d 13 f0       	mov    $0xf0137df4,%ebx
f01125d9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01125de:	89 c7                	mov    %eax,%edi
f01125e0:	89 de                	mov    %ebx,%esi
f01125e2:	89 d1                	mov    %edx,%ecx
f01125e4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01125e6:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01125ec:	b9 23 00 00 00       	mov    $0x23,%ecx
f01125f1:	b0 00                	mov    $0x0,%al
f01125f3:	89 d7                	mov    %edx,%edi
f01125f5:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01125f7:	6a 00                	push   $0x0
f01125f9:	6a 0a                	push   $0xa
f01125fb:	6a 14                	push   $0x14
f01125fd:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112603:	50                   	push   %eax
f0112604:	e8 5e 67 ff ff       	call   f0108d67 <env_create>
f0112609:	83 c4 10             	add    $0x10,%esp
f011260c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011260f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112612:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112618:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011261b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011261e:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112624:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0112627:	8b 45 90             	mov    -0x70(%ebp),%eax
f011262a:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011262d:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0112634:	75 70 20 
f0112637:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f011263e:	00 00 00 
f0112641:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0112647:	b9 03 00 00 00       	mov    $0x3,%ecx
f011264c:	b8 00 00 00 00       	mov    $0x0,%eax
f0112651:	89 d7                	mov    %edx,%edi
f0112653:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112655:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112658:	8b 40 4c             	mov    0x4c(%eax),%eax
f011265b:	83 ec 08             	sub    $0x8,%esp
f011265e:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112664:	52                   	push   %edx
f0112665:	50                   	push   %eax
f0112666:	e8 d7 ce 01 00       	call   f012f542 <ltostr>
f011266b:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011266e:	83 ec 04             	sub    $0x4,%esp
f0112671:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112677:	50                   	push   %eax
f0112678:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f011267e:	50                   	push   %eax
f011267f:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112685:	50                   	push   %eax
f0112686:	e8 af cf 01 00       	call   f012f63a <strcconcat>
f011268b:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f011268e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112695:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011269c:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f01126a3:	83 ec 0c             	sub    $0xc,%esp
f01126a6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126a9:	e8 ee 48 00 00       	call   f0116f9c <ClearUserSpace>
f01126ae:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f01126b1:	83 ec 04             	sub    $0x4,%esp
f01126b4:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01126ba:	50                   	push   %eax
f01126bb:	68 46 7b 13 f0       	push   $0xf0137b46
f01126c0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01126c6:	50                   	push   %eax
f01126c7:	e8 6e cf 01 00       	call   f012f63a <strcconcat>
f01126cc:	83 c4 10             	add    $0x10,%esp
f01126cf:	83 ec 0c             	sub    $0xc,%esp
f01126d2:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01126d8:	50                   	push   %eax
f01126d9:	e8 e5 f4 fe ff       	call   f0101bc3 <execute_command>
f01126de:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01126e1:	83 ec 04             	sub    $0x4,%esp
f01126e4:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01126ea:	50                   	push   %eax
f01126eb:	68 51 7b 13 f0       	push   $0xf0137b51
f01126f0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01126f6:	50                   	push   %eax
f01126f7:	e8 3e cf 01 00       	call   f012f63a <strcconcat>
f01126fc:	83 c4 10             	add    $0x10,%esp
f01126ff:	83 ec 0c             	sub    $0xc,%esp
f0112702:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0112708:	50                   	push   %eax
f0112709:	e8 b5 f4 fe ff       	call   f0101bc3 <execute_command>
f011270e:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0112711:	83 ec 04             	sub    $0x4,%esp
f0112714:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011271a:	50                   	push   %eax
f011271b:	68 5c 7b 13 f0       	push   $0xf0137b5c
f0112720:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112726:	50                   	push   %eax
f0112727:	e8 0e cf 01 00       	call   f012f63a <strcconcat>
f011272c:	83 c4 10             	add    $0x10,%esp
f011272f:	83 ec 0c             	sub    $0xc,%esp
f0112732:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0112738:	50                   	push   %eax
f0112739:	e8 85 f4 fe ff       	call   f0101bc3 <execute_command>
f011273e:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0112741:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0112748:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011274b:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f011274e:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112755:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112758:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011275b:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112762:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112765:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0112768:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011276b:	83 ec 08             	sub    $0x8,%esp
f011276e:	50                   	push   %eax
f011276f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112772:	e8 8c 47 00 00       	call   f0116f03 <GP>
f0112777:	83 c4 10             	add    $0x10,%esp
f011277a:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f011277d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112784:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011278b:	e8 d2 a2 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0112790:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112793:	83 ec 0c             	sub    $0xc,%esp
f0112796:	68 68 7b 13 f0       	push   $0xf0137b68
f011279b:	e8 91 e6 fe ff       	call   f0100e31 <cprintf>
f01127a0:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f01127a3:	6a 03                	push   $0x3
f01127a5:	68 00 00 90 02       	push   $0x2900000
f01127aa:	68 00 00 80 02       	push   $0x2800000
f01127af:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127b2:	e8 72 64 ff ff       	call   f0108c29 <cut_paste_pages>
f01127b7:	83 c4 10             	add    $0x10,%esp
f01127ba:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f01127bd:	e8 a0 a2 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01127c2:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f01127c5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f01127cc:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01127d0:	75 08                	jne    f01127da <test_cut_paste_pages+0x218>
f01127d2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127d5:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01127d8:	74 2b                	je     f0112805 <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01127da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127dd:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01127e0:	83 ec 0c             	sub    $0xc,%esp
f01127e3:	50                   	push   %eax
f01127e4:	ff 75 b4             	pushl  -0x4c(%ebp)
f01127e7:	68 98 7b 13 f0       	push   $0xf0137b98
f01127ec:	68 3a 01 00 00       	push   $0x13a
f01127f1:	68 f2 76 13 f0       	push   $0xf01376f2
f01127f6:	e8 c3 db fe ff       	call   f01003be <_warn>
f01127fb:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01127fe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0112805:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112809:	74 04                	je     f011280f <test_cut_paste_pages+0x24d>
f011280b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011280f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112816:	83 ec 08             	sub    $0x8,%esp
f0112819:	6a 00                	push   $0x0
f011281b:	6a 01                	push   $0x1
f011281d:	6a 00                	push   $0x0
f011281f:	68 ff 0f 00 00       	push   $0xfff
f0112824:	ff 75 bc             	pushl  -0x44(%ebp)
f0112827:	6a 01                	push   $0x1
f0112829:	68 00 30 00 00       	push   $0x3000
f011282e:	68 00 00 90 02       	push   $0x2900000
f0112833:	68 00 00 80 02       	push   $0x2800000
f0112838:	ff 75 d4             	pushl  -0x2c(%ebp)
f011283b:	e8 90 47 00 00       	call   f0116fd0 <CCP>
f0112840:	83 c4 30             	add    $0x30,%esp
f0112843:	83 f8 01             	cmp    $0x1,%eax
f0112846:	74 21                	je     f0112869 <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112848:	83 ec 04             	sub    $0x4,%esp
f011284b:	68 ec 7b 13 f0       	push   $0xf0137bec
f0112850:	68 42 01 00 00       	push   $0x142
f0112855:	68 f2 76 13 f0       	push   $0xf01376f2
f011285a:	e8 5f db fe ff       	call   f01003be <_warn>
f011285f:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112862:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0112869:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011286d:	74 04                	je     f0112873 <test_cut_paste_pages+0x2b1>
f011286f:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112873:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011287a:	83 ec 04             	sub    $0x4,%esp
f011287d:	6a 00                	push   $0x0
f011287f:	68 00 00 90 02       	push   $0x2900000
f0112884:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112887:	e8 d5 41 00 00       	call   f0116a61 <CB>
f011288c:	83 c4 10             	add    $0x10,%esp
f011288f:	85 c0                	test   %eax,%eax
f0112891:	0f 84 f6 00 00 00    	je     f011298d <test_cut_paste_pages+0x3cb>
f0112897:	83 ec 04             	sub    $0x4,%esp
f011289a:	6a 00                	push   $0x0
f011289c:	68 00 10 90 02       	push   $0x2901000
f01128a1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128a4:	e8 b8 41 00 00       	call   f0116a61 <CB>
f01128a9:	83 c4 10             	add    $0x10,%esp
f01128ac:	85 c0                	test   %eax,%eax
f01128ae:	0f 84 d9 00 00 00    	je     f011298d <test_cut_paste_pages+0x3cb>
f01128b4:	83 ec 04             	sub    $0x4,%esp
f01128b7:	6a 00                	push   $0x0
f01128b9:	68 00 20 90 02       	push   $0x2902000
f01128be:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128c1:	e8 9b 41 00 00       	call   f0116a61 <CB>
f01128c6:	83 c4 10             	add    $0x10,%esp
f01128c9:	85 c0                	test   %eax,%eax
f01128cb:	0f 84 bc 00 00 00    	je     f011298d <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f01128d1:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01128d8:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01128df:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01128e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128e9:	8a 00                	mov    (%eax),%al
f01128eb:	3c 61                	cmp    $0x61,%al
f01128ed:	75 12                	jne    f0112901 <test_cut_paste_pages+0x33f>
f01128ef:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01128f2:	8a 00                	mov    (%eax),%al
f01128f4:	3c 62                	cmp    $0x62,%al
f01128f6:	75 09                	jne    f0112901 <test_cut_paste_pages+0x33f>
f01128f8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01128fb:	8a 00                	mov    (%eax),%al
f01128fd:	3c 63                	cmp    $0x63,%al
f01128ff:	74 21                	je     f0112922 <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112901:	83 ec 04             	sub    $0x4,%esp
f0112904:	68 38 7c 13 f0       	push   $0xf0137c38
f0112909:	68 4f 01 00 00       	push   $0x14f
f011290e:	68 f2 76 13 f0       	push   $0xf01376f2
f0112913:	e8 a6 da fe ff       	call   f01003be <_warn>
f0112918:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011291b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112922:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112926:	74 04                	je     f011292c <test_cut_paste_pages+0x36a>
f0112928:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011292c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112933:	83 ec 04             	sub    $0x4,%esp
f0112936:	6a 01                	push   $0x1
f0112938:	68 00 10 90 02       	push   $0x2901000
f011293d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112940:	e8 1c 41 00 00       	call   f0116a61 <CB>
f0112945:	83 c4 10             	add    $0x10,%esp
f0112948:	85 c0                	test   %eax,%eax
f011294a:	74 41                	je     f011298d <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f011294c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011294f:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0112952:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112955:	8a 00                	mov    (%eax),%al
f0112957:	3c 79                	cmp    $0x79,%al
f0112959:	74 21                	je     f011297c <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011295b:	83 ec 04             	sub    $0x4,%esp
f011295e:	68 38 7c 13 f0       	push   $0xf0137c38
f0112963:	68 5a 01 00 00       	push   $0x15a
f0112968:	68 f2 76 13 f0       	push   $0xf01376f2
f011296d:	e8 4c da fe ff       	call   f01003be <_warn>
f0112972:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112975:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011297c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112980:	74 04                	je     f0112986 <test_cut_paste_pages+0x3c4>
f0112982:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112986:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f011298d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112990:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112993:	6a 02                	push   $0x2
f0112995:	68 00 f0 bf 02       	push   $0x2bff000
f011299a:	68 00 10 90 02       	push   $0x2901000
f011299f:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129a2:	e8 82 62 ff ff       	call   f0108c29 <cut_paste_pages>
f01129a7:	83 c4 10             	add    $0x10,%esp
f01129aa:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01129ad:	e8 b0 a0 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01129b2:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f01129b5:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01129b9:	75 0b                	jne    f01129c6 <test_cut_paste_pages+0x404>
f01129bb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129be:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01129c1:	83 f8 01             	cmp    $0x1,%eax
f01129c4:	74 2b                	je     f01129f1 <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01129c6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129c9:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01129cc:	83 ec 0c             	sub    $0xc,%esp
f01129cf:	50                   	push   %eax
f01129d0:	ff 75 b4             	pushl  -0x4c(%ebp)
f01129d3:	68 98 7b 13 f0       	push   $0xf0137b98
f01129d8:	68 6b 01 00 00       	push   $0x16b
f01129dd:	68 f2 76 13 f0       	push   $0xf01376f2
f01129e2:	e8 d7 d9 fe ff       	call   f01003be <_warn>
f01129e7:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01129ea:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01129f1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129f5:	74 04                	je     f01129fb <test_cut_paste_pages+0x439>
f01129f7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01129fb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112a02:	83 ec 08             	sub    $0x8,%esp
f0112a05:	6a 00                	push   $0x0
f0112a07:	6a 01                	push   $0x1
f0112a09:	6a 00                	push   $0x0
f0112a0b:	68 ff 0f 00 00       	push   $0xfff
f0112a10:	ff 75 bc             	pushl  -0x44(%ebp)
f0112a13:	6a 01                	push   $0x1
f0112a15:	68 00 20 00 00       	push   $0x2000
f0112a1a:	68 00 f0 bf 02       	push   $0x2bff000
f0112a1f:	68 00 10 90 02       	push   $0x2901000
f0112a24:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a27:	e8 a4 45 00 00       	call   f0116fd0 <CCP>
f0112a2c:	83 c4 30             	add    $0x30,%esp
f0112a2f:	83 f8 01             	cmp    $0x1,%eax
f0112a32:	74 21                	je     f0112a55 <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112a34:	83 ec 04             	sub    $0x4,%esp
f0112a37:	68 ec 7b 13 f0       	push   $0xf0137bec
f0112a3c:	68 73 01 00 00       	push   $0x173
f0112a41:	68 f2 76 13 f0       	push   $0xf01376f2
f0112a46:	e8 73 d9 fe ff       	call   f01003be <_warn>
f0112a4b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112a4e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112a55:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a59:	74 04                	je     f0112a5f <test_cut_paste_pages+0x49d>
f0112a5b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112a5f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112a66:	83 ec 04             	sub    $0x4,%esp
f0112a69:	6a 00                	push   $0x0
f0112a6b:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112a70:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a73:	e8 e9 3f 00 00       	call   f0116a61 <CB>
f0112a78:	83 c4 10             	add    $0x10,%esp
f0112a7b:	85 c0                	test   %eax,%eax
f0112a7d:	74 6b                	je     f0112aea <test_cut_paste_pages+0x528>
f0112a7f:	83 ec 04             	sub    $0x4,%esp
f0112a82:	6a 00                	push   $0x0
f0112a84:	68 ff 0f c0 02       	push   $0x2c00fff
f0112a89:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a8c:	e8 d0 3f 00 00       	call   f0116a61 <CB>
f0112a91:	83 c4 10             	add    $0x10,%esp
f0112a94:	85 c0                	test   %eax,%eax
f0112a96:	74 52                	je     f0112aea <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112a98:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112a9f:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112aa6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112aa9:	8a 00                	mov    (%eax),%al
f0112aab:	3c 79                	cmp    $0x79,%al
f0112aad:	75 09                	jne    f0112ab8 <test_cut_paste_pages+0x4f6>
f0112aaf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112ab2:	8a 00                	mov    (%eax),%al
f0112ab4:	3c 63                	cmp    $0x63,%al
f0112ab6:	74 21                	je     f0112ad9 <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112ab8:	83 ec 04             	sub    $0x4,%esp
f0112abb:	68 38 7c 13 f0       	push   $0xf0137c38
f0112ac0:	68 7f 01 00 00       	push   $0x17f
f0112ac5:	68 f2 76 13 f0       	push   $0xf01376f2
f0112aca:	e8 ef d8 fe ff       	call   f01003be <_warn>
f0112acf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ad2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112ad9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112add:	74 04                	je     f0112ae3 <test_cut_paste_pages+0x521>
f0112adf:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112ae3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0112aea:	83 ec 0c             	sub    $0xc,%esp
f0112aed:	68 71 7c 13 f0       	push   $0xf0137c71
f0112af2:	e8 3a e3 fe ff       	call   f0100e31 <cprintf>
f0112af7:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0112afa:	83 ec 0c             	sub    $0xc,%esp
f0112afd:	68 80 7c 13 f0       	push   $0xf0137c80
f0112b02:	e8 2a e3 fe ff       	call   f0100e31 <cprintf>
f0112b07:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0112b0a:	83 ec 04             	sub    $0x4,%esp
f0112b0d:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112b13:	50                   	push   %eax
f0112b14:	68 a9 7c 13 f0       	push   $0xf0137ca9
f0112b19:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112b1f:	50                   	push   %eax
f0112b20:	e8 15 cb 01 00       	call   f012f63a <strcconcat>
f0112b25:	83 c4 10             	add    $0x10,%esp
f0112b28:	83 ec 0c             	sub    $0xc,%esp
f0112b2b:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112b31:	50                   	push   %eax
f0112b32:	e8 8c f0 fe ff       	call   f0101bc3 <execute_command>
f0112b37:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0112b3a:	83 ec 04             	sub    $0x4,%esp
f0112b3d:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112b43:	50                   	push   %eax
f0112b44:	68 b4 7c 13 f0       	push   $0xf0137cb4
f0112b49:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112b4f:	50                   	push   %eax
f0112b50:	e8 e5 ca 01 00       	call   f012f63a <strcconcat>
f0112b55:	83 c4 10             	add    $0x10,%esp
f0112b58:	83 ec 0c             	sub    $0xc,%esp
f0112b5b:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112b61:	50                   	push   %eax
f0112b62:	e8 5c f0 fe ff       	call   f0101bc3 <execute_command>
f0112b67:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0112b6a:	83 ec 04             	sub    $0x4,%esp
f0112b6d:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112b73:	50                   	push   %eax
f0112b74:	68 bf 7c 13 f0       	push   $0xf0137cbf
f0112b79:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112b7f:	50                   	push   %eax
f0112b80:	e8 b5 ca 01 00       	call   f012f63a <strcconcat>
f0112b85:	83 c4 10             	add    $0x10,%esp
f0112b88:	83 ec 0c             	sub    $0xc,%esp
f0112b8b:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112b91:	50                   	push   %eax
f0112b92:	e8 2c f0 fe ff       	call   f0101bc3 <execute_command>
f0112b97:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112b9a:	83 ec 04             	sub    $0x4,%esp
f0112b9d:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112ba3:	50                   	push   %eax
f0112ba4:	68 ca 7c 13 f0       	push   $0xf0137cca
f0112ba9:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112baf:	50                   	push   %eax
f0112bb0:	e8 85 ca 01 00       	call   f012f63a <strcconcat>
f0112bb5:	83 c4 10             	add    $0x10,%esp
f0112bb8:	83 ec 0c             	sub    $0xc,%esp
f0112bbb:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112bc1:	50                   	push   %eax
f0112bc2:	e8 fc ef fe ff       	call   f0101bc3 <execute_command>
f0112bc7:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112bca:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112bd1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112bd4:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112bd7:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112bde:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112be1:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112be4:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0112beb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112bee:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112bf1:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112bf8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112bfb:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112bfe:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112c05:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c08:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0112c0b:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112c12:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c15:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0112c18:	83 ec 08             	sub    $0x8,%esp
f0112c1b:	68 00 00 c0 01       	push   $0x1c00000
f0112c20:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c23:	e8 db 42 00 00       	call   f0116f03 <GP>
f0112c28:	83 c4 10             	add    $0x10,%esp
f0112c2b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112c2e:	83 ec 08             	sub    $0x8,%esp
f0112c31:	68 00 00 40 01       	push   $0x1400000
f0112c36:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c39:	e8 c5 42 00 00       	call   f0116f03 <GP>
f0112c3e:	83 c4 10             	add    $0x10,%esp
f0112c41:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112c44:	e8 19 9e ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0112c49:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0112c4c:	6a 01                	push   $0x1
f0112c4e:	68 00 00 40 01       	push   $0x1400000
f0112c53:	68 00 00 c0 01       	push   $0x1c00000
f0112c58:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c5b:	e8 c9 5f ff ff       	call   f0108c29 <cut_paste_pages>
f0112c60:	83 c4 10             	add    $0x10,%esp
f0112c63:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112c66:	e8 f7 9d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0112c6b:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112c6e:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112c72:	75 08                	jne    f0112c7c <test_cut_paste_pages+0x6ba>
f0112c74:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112c77:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112c7a:	74 2b                	je     f0112ca7 <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112c7c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112c7f:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112c82:	83 ec 0c             	sub    $0xc,%esp
f0112c85:	50                   	push   %eax
f0112c86:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112c89:	68 d8 7c 13 f0       	push   $0xf0137cd8
f0112c8e:	68 a2 01 00 00       	push   $0x1a2
f0112c93:	68 f2 76 13 f0       	push   $0xf01376f2
f0112c98:	e8 21 d7 fe ff       	call   f01003be <_warn>
f0112c9d:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112ca0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112ca7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112cab:	74 04                	je     f0112cb1 <test_cut_paste_pages+0x6ef>
f0112cad:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112cb1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112cb8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112cbf:	83 ec 08             	sub    $0x8,%esp
f0112cc2:	6a 00                	push   $0x0
f0112cc4:	68 ff 0f 00 00       	push   $0xfff
f0112cc9:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112ccc:	68 ff 0f 00 00       	push   $0xfff
f0112cd1:	ff 75 a0             	pushl  -0x60(%ebp)
f0112cd4:	6a 01                	push   $0x1
f0112cd6:	68 00 10 00 00       	push   $0x1000
f0112cdb:	68 00 00 40 01       	push   $0x1400000
f0112ce0:	68 00 00 c0 01       	push   $0x1c00000
f0112ce5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ce8:	e8 e3 42 00 00       	call   f0116fd0 <CCP>
f0112ced:	83 c4 30             	add    $0x30,%esp
f0112cf0:	83 f8 01             	cmp    $0x1,%eax
f0112cf3:	74 28                	je     f0112d1d <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112cf5:	83 ec 04             	sub    $0x4,%esp
f0112cf8:	68 ec 7b 13 f0       	push   $0xf0137bec
f0112cfd:	68 ab 01 00 00       	push   $0x1ab
f0112d02:	68 f2 76 13 f0       	push   $0xf01376f2
f0112d07:	e8 b2 d6 fe ff       	call   f01003be <_warn>
f0112d0c:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112d0f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112d16:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112d1d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d21:	74 04                	je     f0112d27 <test_cut_paste_pages+0x765>
f0112d23:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112d27:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112d2e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112d32:	0f 84 92 00 00 00    	je     f0112dca <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f0112d38:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112d3f:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112d46:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112d4d:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112d54:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112d5b:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112d62:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112d65:	8a 00                	mov    (%eax),%al
f0112d67:	3c 61                	cmp    $0x61,%al
f0112d69:	75 2d                	jne    f0112d98 <test_cut_paste_pages+0x7d6>
f0112d6b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112d6e:	8a 00                	mov    (%eax),%al
f0112d70:	3c 78                	cmp    $0x78,%al
f0112d72:	75 24                	jne    f0112d98 <test_cut_paste_pages+0x7d6>
f0112d74:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112d77:	8a 00                	mov    (%eax),%al
f0112d79:	3c 62                	cmp    $0x62,%al
f0112d7b:	75 1b                	jne    f0112d98 <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112d7d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112d80:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112d82:	3c 79                	cmp    $0x79,%al
f0112d84:	75 12                	jne    f0112d98 <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112d86:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d89:	8a 00                	mov    (%eax),%al
f0112d8b:	3c 63                	cmp    $0x63,%al
f0112d8d:	75 09                	jne    f0112d98 <test_cut_paste_pages+0x7d6>
f0112d8f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112d92:	8a 00                	mov    (%eax),%al
f0112d94:	3c 7a                	cmp    $0x7a,%al
f0112d96:	74 21                	je     f0112db9 <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112d98:	83 ec 04             	sub    $0x4,%esp
f0112d9b:	68 38 7c 13 f0       	push   $0xf0137c38
f0112da0:	68 bd 01 00 00       	push   $0x1bd
f0112da5:	68 f2 76 13 f0       	push   $0xf01376f2
f0112daa:	e8 0f d6 fe ff       	call   f01003be <_warn>
f0112daf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112db2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112db9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112dbd:	74 04                	je     f0112dc3 <test_cut_paste_pages+0x801>
f0112dbf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112dc3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112dca:	e8 93 9c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0112dcf:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112dd2:	6a 03                	push   $0x3
f0112dd4:	68 00 f0 bf 01       	push   $0x1bff000
f0112dd9:	68 00 00 40 01       	push   $0x1400000
f0112dde:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112de1:	e8 43 5e ff ff       	call   f0108c29 <cut_paste_pages>
f0112de6:	83 c4 10             	add    $0x10,%esp
f0112de9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112dec:	e8 71 9c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0112df1:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112df4:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112df8:	75 08                	jne    f0112e02 <test_cut_paste_pages+0x840>
f0112dfa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112dfd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112e00:	74 2b                	je     f0112e2d <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112e02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112e05:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112e08:	83 ec 0c             	sub    $0xc,%esp
f0112e0b:	50                   	push   %eax
f0112e0c:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112e0f:	68 d8 7c 13 f0       	push   $0xf0137cd8
f0112e14:	68 cc 01 00 00       	push   $0x1cc
f0112e19:	68 f2 76 13 f0       	push   $0xf01376f2
f0112e1e:	e8 9b d5 fe ff       	call   f01003be <_warn>
f0112e23:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112e26:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112e2d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e31:	74 04                	je     f0112e37 <test_cut_paste_pages+0x875>
f0112e33:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112e37:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112e3e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112e45:	83 ec 04             	sub    $0x4,%esp
f0112e48:	6a 00                	push   $0x0
f0112e4a:	68 00 00 40 01       	push   $0x1400000
f0112e4f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e52:	e8 0a 3c 00 00       	call   f0116a61 <CB>
f0112e57:	83 c4 10             	add    $0x10,%esp
f0112e5a:	83 f8 01             	cmp    $0x1,%eax
f0112e5d:	0f 85 80 00 00 00    	jne    f0112ee3 <test_cut_paste_pages+0x921>
f0112e63:	83 ec 04             	sub    $0x4,%esp
f0112e66:	6a 00                	push   $0x0
f0112e68:	68 00 10 40 01       	push   $0x1401000
f0112e6d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e70:	e8 ec 3b 00 00       	call   f0116a61 <CB>
f0112e75:	83 c4 10             	add    $0x10,%esp
f0112e78:	83 f8 01             	cmp    $0x1,%eax
f0112e7b:	75 66                	jne    f0112ee3 <test_cut_paste_pages+0x921>
f0112e7d:	83 ec 04             	sub    $0x4,%esp
f0112e80:	6a 00                	push   $0x0
f0112e82:	68 00 20 40 01       	push   $0x1402000
f0112e87:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e8a:	e8 d2 3b 00 00       	call   f0116a61 <CB>
f0112e8f:	83 c4 10             	add    $0x10,%esp
f0112e92:	83 f8 01             	cmp    $0x1,%eax
f0112e95:	75 4c                	jne    f0112ee3 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112e97:	83 ec 04             	sub    $0x4,%esp
f0112e9a:	6a 00                	push   $0x0
f0112e9c:	68 00 f0 bf 01       	push   $0x1bff000
f0112ea1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ea4:	e8 b8 3b 00 00       	call   f0116a61 <CB>
f0112ea9:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112eac:	85 c0                	test   %eax,%eax
f0112eae:	75 33                	jne    f0112ee3 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112eb0:	83 ec 04             	sub    $0x4,%esp
f0112eb3:	6a 00                	push   $0x0
f0112eb5:	68 00 00 c0 01       	push   $0x1c00000
f0112eba:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ebd:	e8 9f 3b 00 00       	call   f0116a61 <CB>
f0112ec2:	83 c4 10             	add    $0x10,%esp
f0112ec5:	83 f8 01             	cmp    $0x1,%eax
f0112ec8:	75 19                	jne    f0112ee3 <test_cut_paste_pages+0x921>
f0112eca:	83 ec 04             	sub    $0x4,%esp
f0112ecd:	6a 00                	push   $0x0
f0112ecf:	68 00 10 c0 01       	push   $0x1c01000
f0112ed4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ed7:	e8 85 3b 00 00       	call   f0116a61 <CB>
f0112edc:	83 c4 10             	add    $0x10,%esp
f0112edf:	85 c0                	test   %eax,%eax
f0112ee1:	74 28                	je     f0112f0b <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112ee3:	83 ec 04             	sub    $0x4,%esp
f0112ee6:	68 38 7d 13 f0       	push   $0xf0137d38
f0112eeb:	68 d5 01 00 00       	push   $0x1d5
f0112ef0:	68 f2 76 13 f0       	push   $0xf01376f2
f0112ef5:	e8 c4 d4 fe ff       	call   f01003be <_warn>
f0112efa:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112efd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112f04:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112f0b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f0f:	74 04                	je     f0112f15 <test_cut_paste_pages+0x953>
f0112f11:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112f15:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112f1c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112f20:	0f 84 99 00 00 00    	je     f0112fbf <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f0112f26:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112f2d:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112f34:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112f3b:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112f42:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112f49:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112f50:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112f53:	8a 00                	mov    (%eax),%al
f0112f55:	3c 61                	cmp    $0x61,%al
f0112f57:	75 2d                	jne    f0112f86 <test_cut_paste_pages+0x9c4>
f0112f59:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112f5c:	8a 00                	mov    (%eax),%al
f0112f5e:	3c 78                	cmp    $0x78,%al
f0112f60:	75 24                	jne    f0112f86 <test_cut_paste_pages+0x9c4>
f0112f62:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112f65:	8a 00                	mov    (%eax),%al
f0112f67:	3c 62                	cmp    $0x62,%al
f0112f69:	75 1b                	jne    f0112f86 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112f6b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112f6e:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112f70:	3c 79                	cmp    $0x79,%al
f0112f72:	75 12                	jne    f0112f86 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112f74:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112f77:	8a 00                	mov    (%eax),%al
f0112f79:	3c 63                	cmp    $0x63,%al
f0112f7b:	75 09                	jne    f0112f86 <test_cut_paste_pages+0x9c4>
f0112f7d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112f80:	8a 00                	mov    (%eax),%al
f0112f82:	3c 7a                	cmp    $0x7a,%al
f0112f84:	74 28                	je     f0112fae <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f0112f86:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112f8d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112f94:	83 ec 04             	sub    $0x4,%esp
f0112f97:	68 38 7c 13 f0       	push   $0xf0137c38
f0112f9c:	68 e9 01 00 00       	push   $0x1e9
f0112fa1:	68 f2 76 13 f0       	push   $0xf01376f2
f0112fa6:	e8 13 d4 fe ff       	call   f01003be <_warn>
f0112fab:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112fae:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112fb2:	74 04                	je     f0112fb8 <test_cut_paste_pages+0x9f6>
f0112fb4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112fb8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112fbf:	83 ec 0c             	sub    $0xc,%esp
f0112fc2:	68 71 7d 13 f0       	push   $0xf0137d71
f0112fc7:	e8 65 de fe ff       	call   f0100e31 <cprintf>
f0112fcc:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112fcf:	83 ec 08             	sub    $0x8,%esp
f0112fd2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112fd5:	68 80 7d 13 f0       	push   $0xf0137d80
f0112fda:	e8 52 de fe ff       	call   f0100e31 <cprintf>
f0112fdf:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112fe2:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112fe6:	75 10                	jne    f0112ff8 <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112fe8:	83 ec 0c             	sub    $0xc,%esp
f0112feb:	68 b4 7d 13 f0       	push   $0xf0137db4
f0112ff0:	e8 3c de fe ff       	call   f0100e31 <cprintf>
f0112ff5:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112ff8:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0112ffd:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113000:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113003:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113006:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011300b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011300e:	5b                   	pop    %ebx
f011300f:	5e                   	pop    %esi
f0113010:	5f                   	pop    %edi
f0113011:	5d                   	pop    %ebp
f0113012:	c3                   	ret    

f0113013 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0113013:	55                   	push   %ebp
f0113014:	89 e5                	mov    %esp,%ebp
f0113016:	57                   	push   %edi
f0113017:	56                   	push   %esi
f0113018:	53                   	push   %ebx
f0113019:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011301f:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0113025:	bb f4 7d 13 f0       	mov    $0xf0137df4,%ebx
f011302a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011302f:	89 c7                	mov    %eax,%edi
f0113031:	89 de                	mov    %ebx,%esi
f0113033:	89 d1                	mov    %edx,%ecx
f0113035:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113037:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f011303d:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113042:	b0 00                	mov    $0x0,%al
f0113044:	89 d7                	mov    %edx,%edi
f0113046:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113048:	6a 00                	push   $0x0
f011304a:	6a 0a                	push   $0xa
f011304c:	6a 14                	push   $0x14
f011304e:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0113054:	50                   	push   %eax
f0113055:	e8 0d 5d ff ff       	call   f0108d67 <env_create>
f011305a:	83 c4 10             	add    $0x10,%esp
f011305d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113060:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113063:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0113069:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011306c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011306f:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0113075:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011307b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0113081:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113084:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f011308b:	75 70 20 
f011308e:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0113095:	00 00 00 
f0113098:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011309e:	b9 03 00 00 00       	mov    $0x3,%ecx
f01130a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01130a8:	89 d7                	mov    %edx,%edi
f01130aa:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01130ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01130af:	8b 40 4c             	mov    0x4c(%eax),%eax
f01130b2:	83 ec 08             	sub    $0x8,%esp
f01130b5:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f01130bb:	52                   	push   %edx
f01130bc:	50                   	push   %eax
f01130bd:	e8 80 c4 01 00       	call   f012f542 <ltostr>
f01130c2:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01130c5:	83 ec 04             	sub    $0x4,%esp
f01130c8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01130ce:	50                   	push   %eax
f01130cf:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f01130d5:	50                   	push   %eax
f01130d6:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f01130dc:	50                   	push   %eax
f01130dd:	e8 58 c5 01 00       	call   f012f63a <strcconcat>
f01130e2:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01130e5:	83 ec 0c             	sub    $0xc,%esp
f01130e8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01130eb:	e8 ac 3e 00 00       	call   f0116f9c <ClearUserSpace>
f01130f0:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01130f3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01130fa:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0113101:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0113108:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f011310f:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113116:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f011311d:	83 ec 0c             	sub    $0xc,%esp
f0113120:	68 28 7e 13 f0       	push   $0xf0137e28
f0113125:	e8 07 dd fe ff       	call   f0100e31 <cprintf>
f011312a:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011312d:	83 ec 04             	sub    $0x4,%esp
f0113130:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113136:	50                   	push   %eax
f0113137:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011313c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113142:	50                   	push   %eax
f0113143:	e8 f2 c4 01 00       	call   f012f63a <strcconcat>
f0113148:	83 c4 10             	add    $0x10,%esp
f011314b:	83 ec 0c             	sub    $0xc,%esp
f011314e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113154:	50                   	push   %eax
f0113155:	e8 69 ea fe ff       	call   f0101bc3 <execute_command>
f011315a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f011315d:	83 ec 04             	sub    $0x4,%esp
f0113160:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113166:	50                   	push   %eax
f0113167:	68 63 7e 13 f0       	push   $0xf0137e63
f011316c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113172:	50                   	push   %eax
f0113173:	e8 c2 c4 01 00       	call   f012f63a <strcconcat>
f0113178:	83 c4 10             	add    $0x10,%esp
f011317b:	83 ec 0c             	sub    $0xc,%esp
f011317e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113184:	50                   	push   %eax
f0113185:	e8 39 ea fe ff       	call   f0101bc3 <execute_command>
f011318a:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f011318d:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113193:	bb 69 81 13 f0       	mov    $0xf0138169,%ebx
f0113198:	ba 0f 00 00 00       	mov    $0xf,%edx
f011319d:	89 c7                	mov    %eax,%edi
f011319f:	89 de                	mov    %ebx,%esi
f01131a1:	89 d1                	mov    %edx,%ecx
f01131a3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131a5:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01131ab:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131b0:	b0 00                	mov    $0x0,%al
f01131b2:	89 d7                	mov    %edx,%edi
f01131b4:	f3 aa                	rep stos %al,%es:(%edi)
f01131b6:	83 ec 0c             	sub    $0xc,%esp
f01131b9:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01131bf:	50                   	push   %eax
f01131c0:	e8 fe e9 fe ff       	call   f0101bc3 <execute_command>
f01131c5:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f01131c8:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01131ce:	bb cd 81 13 f0       	mov    $0xf01381cd,%ebx
f01131d3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131d8:	89 c7                	mov    %eax,%edi
f01131da:	89 de                	mov    %ebx,%esi
f01131dc:	89 d1                	mov    %edx,%ecx
f01131de:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131e0:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01131e6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131eb:	b0 00                	mov    $0x0,%al
f01131ed:	89 d7                	mov    %edx,%edi
f01131ef:	f3 aa                	rep stos %al,%es:(%edi)
f01131f1:	83 ec 0c             	sub    $0xc,%esp
f01131f4:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01131fa:	50                   	push   %eax
f01131fb:	e8 c3 e9 fe ff       	call   f0101bc3 <execute_command>
f0113200:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0113203:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113209:	bb 31 82 13 f0       	mov    $0xf0138231,%ebx
f011320e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113213:	89 c7                	mov    %eax,%edi
f0113215:	89 de                	mov    %ebx,%esi
f0113217:	89 d1                	mov    %edx,%ecx
f0113219:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011321b:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0113221:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113226:	b0 00                	mov    $0x0,%al
f0113228:	89 d7                	mov    %edx,%edi
f011322a:	f3 aa                	rep stos %al,%es:(%edi)
f011322c:	83 ec 0c             	sub    $0xc,%esp
f011322f:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113235:	50                   	push   %eax
f0113236:	e8 88 e9 fe ff       	call   f0101bc3 <execute_command>
f011323b:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f011323e:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113244:	bb 95 82 13 f0       	mov    $0xf0138295,%ebx
f0113249:	ba 0f 00 00 00       	mov    $0xf,%edx
f011324e:	89 c7                	mov    %eax,%edi
f0113250:	89 de                	mov    %ebx,%esi
f0113252:	89 d1                	mov    %edx,%ecx
f0113254:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113256:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011325c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113261:	b0 00                	mov    $0x0,%al
f0113263:	89 d7                	mov    %edx,%edi
f0113265:	f3 aa                	rep stos %al,%es:(%edi)
f0113267:	83 ec 0c             	sub    $0xc,%esp
f011326a:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113270:	50                   	push   %eax
f0113271:	e8 4d e9 fe ff       	call   f0101bc3 <execute_command>
f0113276:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0113279:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011327f:	bb f9 82 13 f0       	mov    $0xf01382f9,%ebx
f0113284:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113289:	89 c7                	mov    %eax,%edi
f011328b:	89 de                	mov    %ebx,%esi
f011328d:	89 d1                	mov    %edx,%ecx
f011328f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113291:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113297:	b9 55 00 00 00       	mov    $0x55,%ecx
f011329c:	b0 00                	mov    $0x0,%al
f011329e:	89 d7                	mov    %edx,%edi
f01132a0:	f3 aa                	rep stos %al,%es:(%edi)
f01132a2:	83 ec 0c             	sub    $0xc,%esp
f01132a5:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01132ab:	50                   	push   %eax
f01132ac:	e8 12 e9 fe ff       	call   f0101bc3 <execute_command>
f01132b1:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f01132b4:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01132ba:	bb 5d 83 13 f0       	mov    $0xf013835d,%ebx
f01132bf:	ba 0f 00 00 00       	mov    $0xf,%edx
f01132c4:	89 c7                	mov    %eax,%edi
f01132c6:	89 de                	mov    %ebx,%esi
f01132c8:	89 d1                	mov    %edx,%ecx
f01132ca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01132cc:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01132d2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01132d7:	b0 00                	mov    $0x0,%al
f01132d9:	89 d7                	mov    %edx,%edi
f01132db:	f3 aa                	rep stos %al,%es:(%edi)
f01132dd:	83 ec 0c             	sub    $0xc,%esp
f01132e0:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01132e6:	50                   	push   %eax
f01132e7:	e8 d7 e8 fe ff       	call   f0101bc3 <execute_command>
f01132ec:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01132ef:	83 ec 04             	sub    $0x4,%esp
f01132f2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01132f8:	50                   	push   %eax
f01132f9:	68 6b 7e 13 f0       	push   $0xf0137e6b
f01132fe:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113304:	50                   	push   %eax
f0113305:	e8 30 c3 01 00       	call   f012f63a <strcconcat>
f011330a:	83 c4 10             	add    $0x10,%esp
f011330d:	83 ec 0c             	sub    $0xc,%esp
f0113310:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113316:	50                   	push   %eax
f0113317:	e8 a7 e8 fe ff       	call   f0101bc3 <execute_command>
f011331c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f011331f:	83 ec 04             	sub    $0x4,%esp
f0113322:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113328:	50                   	push   %eax
f0113329:	68 75 7e 13 f0       	push   $0xf0137e75
f011332e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113334:	50                   	push   %eax
f0113335:	e8 00 c3 01 00       	call   f012f63a <strcconcat>
f011333a:	83 c4 10             	add    $0x10,%esp
f011333d:	83 ec 0c             	sub    $0xc,%esp
f0113340:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113346:	50                   	push   %eax
f0113347:	e8 77 e8 fe ff       	call   f0101bc3 <execute_command>
f011334c:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f011334f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113355:	bb c1 83 13 f0       	mov    $0xf01383c1,%ebx
f011335a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011335f:	89 c7                	mov    %eax,%edi
f0113361:	89 de                	mov    %ebx,%esi
f0113363:	89 d1                	mov    %edx,%ecx
f0113365:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113367:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011336d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113372:	b0 00                	mov    $0x0,%al
f0113374:	89 d7                	mov    %edx,%edi
f0113376:	f3 aa                	rep stos %al,%es:(%edi)
f0113378:	83 ec 0c             	sub    $0xc,%esp
f011337b:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113381:	50                   	push   %eax
f0113382:	e8 3c e8 fe ff       	call   f0101bc3 <execute_command>
f0113387:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f011338a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113390:	bb 25 84 13 f0       	mov    $0xf0138425,%ebx
f0113395:	ba 0f 00 00 00       	mov    $0xf,%edx
f011339a:	89 c7                	mov    %eax,%edi
f011339c:	89 de                	mov    %ebx,%esi
f011339e:	89 d1                	mov    %edx,%ecx
f01133a0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133a2:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01133a8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133ad:	b0 00                	mov    $0x0,%al
f01133af:	89 d7                	mov    %edx,%edi
f01133b1:	f3 aa                	rep stos %al,%es:(%edi)
f01133b3:	83 ec 0c             	sub    $0xc,%esp
f01133b6:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01133bc:	50                   	push   %eax
f01133bd:	e8 01 e8 fe ff       	call   f0101bc3 <execute_command>
f01133c2:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f01133c5:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01133cb:	bb 89 84 13 f0       	mov    $0xf0138489,%ebx
f01133d0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133d5:	89 c7                	mov    %eax,%edi
f01133d7:	89 de                	mov    %ebx,%esi
f01133d9:	89 d1                	mov    %edx,%ecx
f01133db:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133dd:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01133e3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133e8:	b0 00                	mov    $0x0,%al
f01133ea:	89 d7                	mov    %edx,%edi
f01133ec:	f3 aa                	rep stos %al,%es:(%edi)
f01133ee:	83 ec 0c             	sub    $0xc,%esp
f01133f1:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01133f7:	50                   	push   %eax
f01133f8:	e8 c6 e7 fe ff       	call   f0101bc3 <execute_command>
f01133fd:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0113400:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0113407:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f011340e:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0113415:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f011341c:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0113423:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f011342a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0113431:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0113438:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f011343f:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0113446:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f011344d:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0113454:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113457:	8a 00                	mov    (%eax),%al
f0113459:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f011345f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113462:	8a 00                	mov    (%eax),%al
f0113464:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f011346a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011346d:	8a 00                	mov    (%eax),%al
f011346f:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113475:	e8 e8 95 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011347a:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f011347d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113480:	89 d0                	mov    %edx,%eax
f0113482:	01 c0                	add    %eax,%eax
f0113484:	01 d0                	add    %edx,%eax
f0113486:	01 c0                	add    %eax,%eax
f0113488:	50                   	push   %eax
f0113489:	68 00 00 10 00       	push   $0x100000
f011348e:	6a 00                	push   $0x0
f0113490:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113493:	e8 ab 57 ff ff       	call   f0108c43 <copy_paste_chunk>
f0113498:	83 c4 10             	add    $0x10,%esp
f011349b:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011349e:	e8 bf 95 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01134a3:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01134a6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01134ad:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f01134b1:	75 08                	jne    f01134bb <test_copy_paste_chunk+0x4a8>
f01134b3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01134b6:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01134b9:	74 2b                	je     f01134e6 <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01134bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01134be:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01134c1:	83 ec 0c             	sub    $0xc,%esp
f01134c4:	50                   	push   %eax
f01134c5:	ff 75 88             	pushl  -0x78(%ebp)
f01134c8:	68 84 7e 13 f0       	push   $0xf0137e84
f01134cd:	68 3c 02 00 00       	push   $0x23c
f01134d2:	68 f2 76 13 f0       	push   $0xf01376f2
f01134d7:	e8 e2 ce fe ff       	call   f01003be <_warn>
f01134dc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01134df:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01134e6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01134ea:	74 04                	je     f01134f0 <test_copy_paste_chunk+0x4dd>
f01134ec:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01134f0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01134f7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01134fa:	8a 00                	mov    (%eax),%al
f01134fc:	3c 61                	cmp    $0x61,%al
f01134fe:	75 75                	jne    f0113575 <test_copy_paste_chunk+0x562>
f0113500:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113503:	8a 00                	mov    (%eax),%al
f0113505:	3c 78                	cmp    $0x78,%al
f0113507:	75 6c                	jne    f0113575 <test_copy_paste_chunk+0x562>
f0113509:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011350c:	8a 00                	mov    (%eax),%al
f011350e:	3c 62                	cmp    $0x62,%al
f0113510:	75 63                	jne    f0113575 <test_copy_paste_chunk+0x562>
f0113512:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113515:	8a 00                	mov    (%eax),%al
f0113517:	3c 79                	cmp    $0x79,%al
f0113519:	75 5a                	jne    f0113575 <test_copy_paste_chunk+0x562>
f011351b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011351e:	8a 00                	mov    (%eax),%al
f0113520:	3c 63                	cmp    $0x63,%al
f0113522:	75 51                	jne    f0113575 <test_copy_paste_chunk+0x562>
f0113524:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113527:	8a 00                	mov    (%eax),%al
f0113529:	3c 7a                	cmp    $0x7a,%al
f011352b:	75 48                	jne    f0113575 <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f011352d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113530:	8a 00                	mov    (%eax),%al
f0113532:	3c 64                	cmp    $0x64,%al
f0113534:	75 3f                	jne    f0113575 <test_copy_paste_chunk+0x562>
f0113536:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113539:	8a 10                	mov    (%eax),%dl
f011353b:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0113541:	38 c2                	cmp    %al,%dl
f0113543:	75 30                	jne    f0113575 <test_copy_paste_chunk+0x562>
f0113545:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113548:	8a 00                	mov    (%eax),%al
f011354a:	3c 65                	cmp    $0x65,%al
f011354c:	75 27                	jne    f0113575 <test_copy_paste_chunk+0x562>
f011354e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113551:	8a 10                	mov    (%eax),%dl
f0113553:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0113559:	38 c2                	cmp    %al,%dl
f011355b:	75 18                	jne    f0113575 <test_copy_paste_chunk+0x562>
f011355d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113560:	8a 00                	mov    (%eax),%al
f0113562:	3c 66                	cmp    $0x66,%al
f0113564:	75 0f                	jne    f0113575 <test_copy_paste_chunk+0x562>
f0113566:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113569:	8a 10                	mov    (%eax),%dl
f011356b:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113571:	38 c2                	cmp    %al,%dl
f0113573:	74 21                	je     f0113596 <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113575:	83 ec 04             	sub    $0x4,%esp
f0113578:	68 e8 7e 13 f0       	push   $0xf0137ee8
f011357d:	68 45 02 00 00       	push   $0x245
f0113582:	68 f2 76 13 f0       	push   $0xf01376f2
f0113587:	e8 32 ce fe ff       	call   f01003be <_warn>
f011358c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011358f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113596:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011359a:	74 04                	je     f01135a0 <test_copy_paste_chunk+0x58d>
f011359c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01135a0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f01135a7:	83 ec 0c             	sub    $0xc,%esp
f01135aa:	68 22 7f 13 f0       	push   $0xf0137f22
f01135af:	e8 7d d8 fe ff       	call   f0100e31 <cprintf>
f01135b4:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f01135b7:	83 ec 0c             	sub    $0xc,%esp
f01135ba:	68 34 7f 13 f0       	push   $0xf0137f34
f01135bf:	e8 6d d8 fe ff       	call   f0100e31 <cprintf>
f01135c4:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f01135c7:	83 ec 04             	sub    $0x4,%esp
f01135ca:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01135d0:	50                   	push   %eax
f01135d1:	68 6a 7f 13 f0       	push   $0xf0137f6a
f01135d6:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01135dc:	50                   	push   %eax
f01135dd:	e8 58 c0 01 00       	call   f012f63a <strcconcat>
f01135e2:	83 c4 10             	add    $0x10,%esp
f01135e5:	83 ec 0c             	sub    $0xc,%esp
f01135e8:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01135ee:	50                   	push   %eax
f01135ef:	e8 cf e5 fe ff       	call   f0101bc3 <execute_command>
f01135f4:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01135f7:	83 ec 04             	sub    $0x4,%esp
f01135fa:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113600:	50                   	push   %eax
f0113601:	68 74 7f 13 f0       	push   $0xf0137f74
f0113606:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011360c:	50                   	push   %eax
f011360d:	e8 28 c0 01 00       	call   f012f63a <strcconcat>
f0113612:	83 c4 10             	add    $0x10,%esp
f0113615:	83 ec 0c             	sub    $0xc,%esp
f0113618:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011361e:	50                   	push   %eax
f011361f:	e8 9f e5 fe ff       	call   f0101bc3 <execute_command>
f0113624:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0113627:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011362d:	bb ed 84 13 f0       	mov    $0xf01384ed,%ebx
f0113632:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113637:	89 c7                	mov    %eax,%edi
f0113639:	89 de                	mov    %ebx,%esi
f011363b:	89 d1                	mov    %edx,%ecx
f011363d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011363f:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113645:	b9 55 00 00 00       	mov    $0x55,%ecx
f011364a:	b0 00                	mov    $0x0,%al
f011364c:	89 d7                	mov    %edx,%edi
f011364e:	f3 aa                	rep stos %al,%es:(%edi)
f0113650:	83 ec 0c             	sub    $0xc,%esp
f0113653:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113659:	50                   	push   %eax
f011365a:	e8 64 e5 fe ff       	call   f0101bc3 <execute_command>
f011365f:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0113662:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113668:	bb 51 85 13 f0       	mov    $0xf0138551,%ebx
f011366d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113672:	89 c7                	mov    %eax,%edi
f0113674:	89 de                	mov    %ebx,%esi
f0113676:	89 d1                	mov    %edx,%ecx
f0113678:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011367a:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0113680:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113685:	b0 00                	mov    $0x0,%al
f0113687:	89 d7                	mov    %edx,%edi
f0113689:	f3 aa                	rep stos %al,%es:(%edi)
f011368b:	83 ec 0c             	sub    $0xc,%esp
f011368e:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113694:	50                   	push   %eax
f0113695:	e8 29 e5 fe ff       	call   f0101bc3 <execute_command>
f011369a:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f011369d:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01136a3:	bb b5 85 13 f0       	mov    $0xf01385b5,%ebx
f01136a8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136ad:	89 c7                	mov    %eax,%edi
f01136af:	89 de                	mov    %ebx,%esi
f01136b1:	89 d1                	mov    %edx,%ecx
f01136b3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136b5:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01136bb:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136c0:	b0 00                	mov    $0x0,%al
f01136c2:	89 d7                	mov    %edx,%edi
f01136c4:	f3 aa                	rep stos %al,%es:(%edi)
f01136c6:	83 ec 0c             	sub    $0xc,%esp
f01136c9:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01136cf:	50                   	push   %eax
f01136d0:	e8 ee e4 fe ff       	call   f0101bc3 <execute_command>
f01136d5:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f01136d8:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01136de:	bb 19 86 13 f0       	mov    $0xf0138619,%ebx
f01136e3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136e8:	89 c7                	mov    %eax,%edi
f01136ea:	89 de                	mov    %ebx,%esi
f01136ec:	89 d1                	mov    %edx,%ecx
f01136ee:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136f0:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01136f6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136fb:	b0 00                	mov    $0x0,%al
f01136fd:	89 d7                	mov    %edx,%edi
f01136ff:	f3 aa                	rep stos %al,%es:(%edi)
f0113701:	83 ec 0c             	sub    $0xc,%esp
f0113704:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011370a:	50                   	push   %eax
f011370b:	e8 b3 e4 fe ff       	call   f0101bc3 <execute_command>
f0113710:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0113713:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113719:	bb 7d 86 13 f0       	mov    $0xf013867d,%ebx
f011371e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113723:	89 c7                	mov    %eax,%edi
f0113725:	89 de                	mov    %ebx,%esi
f0113727:	89 d1                	mov    %edx,%ecx
f0113729:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011372b:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113731:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113736:	b0 00                	mov    $0x0,%al
f0113738:	89 d7                	mov    %edx,%edi
f011373a:	f3 aa                	rep stos %al,%es:(%edi)
f011373c:	83 ec 0c             	sub    $0xc,%esp
f011373f:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113745:	50                   	push   %eax
f0113746:	e8 78 e4 fe ff       	call   f0101bc3 <execute_command>
f011374b:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f011374e:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113754:	bb e1 86 13 f0       	mov    $0xf01386e1,%ebx
f0113759:	ba 0f 00 00 00       	mov    $0xf,%edx
f011375e:	89 c7                	mov    %eax,%edi
f0113760:	89 de                	mov    %ebx,%esi
f0113762:	89 d1                	mov    %edx,%ecx
f0113764:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113766:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f011376c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113771:	b0 00                	mov    $0x0,%al
f0113773:	89 d7                	mov    %edx,%edi
f0113775:	f3 aa                	rep stos %al,%es:(%edi)
f0113777:	83 ec 0c             	sub    $0xc,%esp
f011377a:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113780:	50                   	push   %eax
f0113781:	e8 3d e4 fe ff       	call   f0101bc3 <execute_command>
f0113786:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0113789:	83 ec 04             	sub    $0x4,%esp
f011378c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113792:	50                   	push   %eax
f0113793:	68 7e 7f 13 f0       	push   $0xf0137f7e
f0113798:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011379e:	50                   	push   %eax
f011379f:	e8 96 be 01 00       	call   f012f63a <strcconcat>
f01137a4:	83 c4 10             	add    $0x10,%esp
f01137a7:	83 ec 0c             	sub    $0xc,%esp
f01137aa:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01137b0:	50                   	push   %eax
f01137b1:	e8 0d e4 fe ff       	call   f0101bc3 <execute_command>
f01137b6:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01137b9:	83 ec 04             	sub    $0x4,%esp
f01137bc:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01137c2:	50                   	push   %eax
f01137c3:	68 88 7f 13 f0       	push   $0xf0137f88
f01137c8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01137ce:	50                   	push   %eax
f01137cf:	e8 66 be 01 00       	call   f012f63a <strcconcat>
f01137d4:	83 c4 10             	add    $0x10,%esp
f01137d7:	83 ec 0c             	sub    $0xc,%esp
f01137da:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01137e0:	50                   	push   %eax
f01137e1:	e8 dd e3 fe ff       	call   f0101bc3 <execute_command>
f01137e6:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01137e9:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01137ef:	bb 45 87 13 f0       	mov    $0xf0138745,%ebx
f01137f4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01137f9:	89 c7                	mov    %eax,%edi
f01137fb:	89 de                	mov    %ebx,%esi
f01137fd:	89 d1                	mov    %edx,%ecx
f01137ff:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113801:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113807:	b9 55 00 00 00       	mov    $0x55,%ecx
f011380c:	b0 00                	mov    $0x0,%al
f011380e:	89 d7                	mov    %edx,%edi
f0113810:	f3 aa                	rep stos %al,%es:(%edi)
f0113812:	83 ec 0c             	sub    $0xc,%esp
f0113815:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011381b:	50                   	push   %eax
f011381c:	e8 a2 e3 fe ff       	call   f0101bc3 <execute_command>
f0113821:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113824:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011382a:	bb a9 87 13 f0       	mov    $0xf01387a9,%ebx
f011382f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113834:	89 c7                	mov    %eax,%edi
f0113836:	89 de                	mov    %ebx,%esi
f0113838:	89 d1                	mov    %edx,%ecx
f011383a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011383c:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113842:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113847:	b0 00                	mov    $0x0,%al
f0113849:	89 d7                	mov    %edx,%edi
f011384b:	f3 aa                	rep stos %al,%es:(%edi)
f011384d:	83 ec 0c             	sub    $0xc,%esp
f0113850:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113856:	50                   	push   %eax
f0113857:	e8 67 e3 fe ff       	call   f0101bc3 <execute_command>
f011385c:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f011385f:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113865:	bb 0d 88 13 f0       	mov    $0xf013880d,%ebx
f011386a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011386f:	89 c7                	mov    %eax,%edi
f0113871:	89 de                	mov    %ebx,%esi
f0113873:	89 d1                	mov    %edx,%ecx
f0113875:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113877:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011387d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113882:	b0 00                	mov    $0x0,%al
f0113884:	89 d7                	mov    %edx,%edi
f0113886:	f3 aa                	rep stos %al,%es:(%edi)
f0113888:	83 ec 0c             	sub    $0xc,%esp
f011388b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113891:	50                   	push   %eax
f0113892:	e8 2c e3 fe ff       	call   f0101bc3 <execute_command>
f0113897:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f011389a:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f01138a1:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f01138a8:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01138af:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f01138b6:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f01138bd:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f01138c4:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f01138cb:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f01138d2:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01138d9:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01138e0:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01138e7:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01138ee:	8b 45 90             	mov    -0x70(%ebp),%eax
f01138f1:	8a 00                	mov    (%eax),%al
f01138f3:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01138f9:	e8 64 91 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01138fe:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0113901:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113904:	89 d0                	mov    %edx,%eax
f0113906:	01 c0                	add    %eax,%eax
f0113908:	01 d0                	add    %edx,%eax
f011390a:	01 c0                	add    %eax,%eax
f011390c:	50                   	push   %eax
f011390d:	68 00 00 40 00       	push   $0x400000
f0113912:	68 00 00 20 00       	push   $0x200000
f0113917:	ff 75 d4             	pushl  -0x2c(%ebp)
f011391a:	e8 24 53 ff ff       	call   f0108c43 <copy_paste_chunk>
f011391f:	83 c4 10             	add    $0x10,%esp
f0113922:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113925:	e8 38 91 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011392a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011392d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113934:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113938:	75 08                	jne    f0113942 <test_copy_paste_chunk+0x92f>
f011393a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011393d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113940:	74 2b                	je     f011396d <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113942:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113945:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113948:	83 ec 0c             	sub    $0xc,%esp
f011394b:	50                   	push   %eax
f011394c:	ff 75 80             	pushl  -0x80(%ebp)
f011394f:	68 94 7f 13 f0       	push   $0xf0137f94
f0113954:	68 75 02 00 00       	push   $0x275
f0113959:	68 f2 76 13 f0       	push   $0xf01376f2
f011395e:	e8 5b ca fe ff       	call   f01003be <_warn>
f0113963:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113966:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011396d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113971:	74 04                	je     f0113977 <test_copy_paste_chunk+0x964>
f0113973:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113977:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f011397e:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0113985:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113988:	83 ec 08             	sub    $0x8,%esp
f011398b:	6a 01                	push   $0x1
f011398d:	6a 07                	push   $0x7
f011398f:	6a 07                	push   $0x7
f0113991:	6a 07                	push   $0x7
f0113993:	6a 07                	push   $0x7
f0113995:	6a 01                	push   $0x1
f0113997:	68 00 20 00 00       	push   $0x2000
f011399c:	68 00 00 40 00       	push   $0x400000
f01139a1:	68 00 00 20 00       	push   $0x200000
f01139a6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01139a9:	e8 22 36 00 00       	call   f0116fd0 <CCP>
f01139ae:	83 c4 30             	add    $0x30,%esp
f01139b1:	83 f8 01             	cmp    $0x1,%eax
f01139b4:	74 2b                	je     f01139e1 <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f01139b6:	83 ec 04             	sub    $0x4,%esp
f01139b9:	68 e8 7f 13 f0       	push   $0xf0137fe8
f01139be:	68 7e 02 00 00       	push   $0x27e
f01139c3:	68 f2 76 13 f0       	push   $0xf01376f2
f01139c8:	e8 f1 c9 fe ff       	call   f01003be <_warn>
f01139cd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01139d0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01139d7:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01139de:	00 00 00 
		}
		if (correct) eval += 5 ;
f01139e1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01139e5:	74 04                	je     f01139eb <test_copy_paste_chunk+0x9d8>
f01139e7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139eb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01139f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01139f5:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01139f8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01139fb:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01139fe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113a01:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113a04:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a07:	8a 00                	mov    (%eax),%al
f0113a09:	3c 61                	cmp    $0x61,%al
f0113a0b:	75 69                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a0d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a10:	8a 00                	mov    (%eax),%al
f0113a12:	3c 61                	cmp    $0x61,%al
f0113a14:	75 60                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a16:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a19:	8a 00                	mov    (%eax),%al
f0113a1b:	3c 79                	cmp    $0x79,%al
f0113a1d:	75 57                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a1f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113a22:	8a 00                	mov    (%eax),%al
f0113a24:	3c 62                	cmp    $0x62,%al
f0113a26:	75 4e                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a28:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113a2b:	8a 00                	mov    (%eax),%al
f0113a2d:	3c 63                	cmp    $0x63,%al
f0113a2f:	75 45                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a31:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113a34:	8a 00                	mov    (%eax),%al
f0113a36:	3c 7a                	cmp    $0x7a,%al
f0113a38:	75 3c                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0113a3a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113a3d:	8a 00                	mov    (%eax),%al
f0113a3f:	3c 77                	cmp    $0x77,%al
f0113a41:	75 33                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a43:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113a46:	8a 00                	mov    (%eax),%al
f0113a48:	3c 64                	cmp    $0x64,%al
f0113a4a:	75 2a                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a4c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113a4f:	8a 00                	mov    (%eax),%al
f0113a51:	3c 65                	cmp    $0x65,%al
f0113a53:	75 21                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a55:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113a58:	8a 00                	mov    (%eax),%al
f0113a5a:	3c 65                	cmp    $0x65,%al
f0113a5c:	75 18                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a5e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113a61:	8a 00                	mov    (%eax),%al
f0113a63:	3c 66                	cmp    $0x66,%al
f0113a65:	75 0f                	jne    f0113a76 <test_copy_paste_chunk+0xa63>
f0113a67:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113a6a:	8a 10                	mov    (%eax),%dl
f0113a6c:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113a72:	38 c2                	cmp    %al,%dl
f0113a74:	74 21                	je     f0113a97 <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113a76:	83 ec 04             	sub    $0x4,%esp
f0113a79:	68 e8 7e 13 f0       	push   $0xf0137ee8
f0113a7e:	68 8c 02 00 00       	push   $0x28c
f0113a83:	68 f2 76 13 f0       	push   $0xf01376f2
f0113a88:	e8 31 c9 fe ff       	call   f01003be <_warn>
f0113a8d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113a90:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113a97:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113a9b:	74 04                	je     f0113aa1 <test_copy_paste_chunk+0xa8e>
f0113a9d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113aa1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113aa8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113aab:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113aae:	e8 af 8f ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0113ab3:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113ab6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ab9:	89 c2                	mov    %eax,%edx
f0113abb:	01 d2                	add    %edx,%edx
f0113abd:	01 d0                	add    %edx,%eax
f0113abf:	50                   	push   %eax
f0113ac0:	68 00 08 20 00       	push   $0x200800
f0113ac5:	68 00 08 40 00       	push   $0x400800
f0113aca:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113acd:	e8 71 51 ff ff       	call   f0108c43 <copy_paste_chunk>
f0113ad2:	83 c4 10             	add    $0x10,%esp
f0113ad5:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ad8:	e8 85 8f ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0113add:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113ae0:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113ae4:	75 08                	jne    f0113aee <test_copy_paste_chunk+0xadb>
f0113ae6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113ae9:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113aec:	74 2b                	je     f0113b19 <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113aee:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113af1:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113af4:	83 ec 0c             	sub    $0xc,%esp
f0113af7:	50                   	push   %eax
f0113af8:	ff 75 80             	pushl  -0x80(%ebp)
f0113afb:	68 94 7f 13 f0       	push   $0xf0137f94
f0113b00:	68 9c 02 00 00       	push   $0x29c
f0113b05:	68 f2 76 13 f0       	push   $0xf01376f2
f0113b0a:	e8 af c8 fe ff       	call   f01003be <_warn>
f0113b0f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b12:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113b19:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b1d:	74 04                	je     f0113b23 <test_copy_paste_chunk+0xb10>
f0113b1f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b23:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113b2a:	83 ec 08             	sub    $0x8,%esp
f0113b2d:	6a 01                	push   $0x1
f0113b2f:	6a 07                	push   $0x7
f0113b31:	6a 07                	push   $0x7
f0113b33:	6a 07                	push   $0x7
f0113b35:	6a 07                	push   $0x7
f0113b37:	6a 01                	push   $0x1
f0113b39:	68 00 20 00 00       	push   $0x2000
f0113b3e:	68 00 00 20 00       	push   $0x200000
f0113b43:	68 00 00 40 00       	push   $0x400000
f0113b48:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b4b:	e8 80 34 00 00       	call   f0116fd0 <CCP>
f0113b50:	83 c4 30             	add    $0x30,%esp
f0113b53:	83 f8 01             	cmp    $0x1,%eax
f0113b56:	74 21                	je     f0113b79 <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113b58:	83 ec 04             	sub    $0x4,%esp
f0113b5b:	68 34 80 13 f0       	push   $0xf0138034
f0113b60:	68 a4 02 00 00       	push   $0x2a4
f0113b65:	68 f2 76 13 f0       	push   $0xf01376f2
f0113b6a:	e8 4f c8 fe ff       	call   f01003be <_warn>
f0113b6f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b72:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113b79:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b7d:	74 04                	je     f0113b83 <test_copy_paste_chunk+0xb70>
f0113b7f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b83:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113b8a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b8d:	8a 00                	mov    (%eax),%al
f0113b8f:	3c 61                	cmp    $0x61,%al
f0113b91:	75 69                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
f0113b93:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b96:	8a 00                	mov    (%eax),%al
f0113b98:	3c 61                	cmp    $0x61,%al
f0113b9a:	75 60                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
f0113b9c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b9f:	8a 00                	mov    (%eax),%al
f0113ba1:	3c 79                	cmp    $0x79,%al
f0113ba3:	75 57                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
f0113ba5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113ba8:	8a 00                	mov    (%eax),%al
f0113baa:	3c 62                	cmp    $0x62,%al
f0113bac:	75 4e                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
f0113bae:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113bb1:	8a 00                	mov    (%eax),%al
f0113bb3:	3c 7a                	cmp    $0x7a,%al
f0113bb5:	75 45                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
f0113bb7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113bba:	8a 00                	mov    (%eax),%al
f0113bbc:	3c 7a                	cmp    $0x7a,%al
f0113bbe:	75 3c                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113bc0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113bc3:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113bc5:	3c 64                	cmp    $0x64,%al
f0113bc7:	75 33                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113bc9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113bcc:	8a 00                	mov    (%eax),%al
f0113bce:	3c 64                	cmp    $0x64,%al
f0113bd0:	75 2a                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
f0113bd2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113bd5:	8a 00                	mov    (%eax),%al
f0113bd7:	3c 65                	cmp    $0x65,%al
f0113bd9:	75 21                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
f0113bdb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113bde:	8a 00                	mov    (%eax),%al
f0113be0:	3c 78                	cmp    $0x78,%al
f0113be2:	75 18                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
f0113be4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113be7:	8a 00                	mov    (%eax),%al
f0113be9:	3c 66                	cmp    $0x66,%al
f0113beb:	75 0f                	jne    f0113bfc <test_copy_paste_chunk+0xbe9>
f0113bed:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113bf0:	8a 10                	mov    (%eax),%dl
f0113bf2:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113bf8:	38 c2                	cmp    %al,%dl
f0113bfa:	74 21                	je     f0113c1d <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113bfc:	83 ec 04             	sub    $0x4,%esp
f0113bff:	68 e8 7e 13 f0       	push   $0xf0137ee8
f0113c04:	68 ad 02 00 00       	push   $0x2ad
f0113c09:	68 f2 76 13 f0       	push   $0xf01376f2
f0113c0e:	e8 ab c7 fe ff       	call   f01003be <_warn>
f0113c13:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c16:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113c1d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c21:	74 04                	je     f0113c27 <test_copy_paste_chunk+0xc14>
f0113c23:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113c27:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0113c2e:	83 ec 0c             	sub    $0xc,%esp
f0113c31:	68 7f 80 13 f0       	push   $0xf013807f
f0113c36:	e8 f6 d1 fe ff       	call   f0100e31 <cprintf>
f0113c3b:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0113c3e:	83 ec 0c             	sub    $0xc,%esp
f0113c41:	68 90 80 13 f0       	push   $0xf0138090
f0113c46:	e8 e6 d1 fe ff       	call   f0100e31 <cprintf>
f0113c4b:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0113c4e:	83 ec 04             	sub    $0x4,%esp
f0113c51:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113c57:	50                   	push   %eax
f0113c58:	68 c4 80 13 f0       	push   $0xf01380c4
f0113c5d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113c63:	50                   	push   %eax
f0113c64:	e8 d1 b9 01 00       	call   f012f63a <strcconcat>
f0113c69:	83 c4 10             	add    $0x10,%esp
f0113c6c:	83 ec 0c             	sub    $0xc,%esp
f0113c6f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113c75:	50                   	push   %eax
f0113c76:	e8 48 df fe ff       	call   f0101bc3 <execute_command>
f0113c7b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113c7e:	83 ec 04             	sub    $0x4,%esp
f0113c81:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113c87:	50                   	push   %eax
f0113c88:	68 ce 80 13 f0       	push   $0xf01380ce
f0113c8d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113c93:	50                   	push   %eax
f0113c94:	e8 a1 b9 01 00       	call   f012f63a <strcconcat>
f0113c99:	83 c4 10             	add    $0x10,%esp
f0113c9c:	83 ec 0c             	sub    $0xc,%esp
f0113c9f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113ca5:	50                   	push   %eax
f0113ca6:	e8 18 df fe ff       	call   f0101bc3 <execute_command>
f0113cab:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113cae:	83 ec 04             	sub    $0x4,%esp
f0113cb1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113cb7:	50                   	push   %eax
f0113cb8:	68 d8 80 13 f0       	push   $0xf01380d8
f0113cbd:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113cc3:	50                   	push   %eax
f0113cc4:	e8 71 b9 01 00       	call   f012f63a <strcconcat>
f0113cc9:	83 c4 10             	add    $0x10,%esp
f0113ccc:	83 ec 0c             	sub    $0xc,%esp
f0113ccf:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113cd5:	50                   	push   %eax
f0113cd6:	e8 e8 de fe ff       	call   f0101bc3 <execute_command>
f0113cdb:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113cde:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113ce4:	bb 71 88 13 f0       	mov    $0xf0138871,%ebx
f0113ce9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113cee:	89 c7                	mov    %eax,%edi
f0113cf0:	89 de                	mov    %ebx,%esi
f0113cf2:	89 d1                	mov    %edx,%ecx
f0113cf4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113cf6:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113cfc:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113d01:	b0 00                	mov    $0x0,%al
f0113d03:	89 d7                	mov    %edx,%edi
f0113d05:	f3 aa                	rep stos %al,%es:(%edi)
f0113d07:	83 ec 0c             	sub    $0xc,%esp
f0113d0a:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113d10:	50                   	push   %eax
f0113d11:	e8 ad de fe ff       	call   f0101bc3 <execute_command>
f0113d16:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113d19:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113d1f:	bb d5 88 13 f0       	mov    $0xf01388d5,%ebx
f0113d24:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113d29:	89 c7                	mov    %eax,%edi
f0113d2b:	89 de                	mov    %ebx,%esi
f0113d2d:	89 d1                	mov    %edx,%ecx
f0113d2f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113d31:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113d37:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113d3c:	b0 00                	mov    $0x0,%al
f0113d3e:	89 d7                	mov    %edx,%edi
f0113d40:	f3 aa                	rep stos %al,%es:(%edi)
f0113d42:	83 ec 0c             	sub    $0xc,%esp
f0113d45:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113d4b:	50                   	push   %eax
f0113d4c:	e8 72 de fe ff       	call   f0101bc3 <execute_command>
f0113d51:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113d54:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113d5a:	bb 39 89 13 f0       	mov    $0xf0138939,%ebx
f0113d5f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113d64:	89 c7                	mov    %eax,%edi
f0113d66:	89 de                	mov    %ebx,%esi
f0113d68:	89 d1                	mov    %edx,%ecx
f0113d6a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113d6c:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113d72:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113d77:	b0 00                	mov    $0x0,%al
f0113d79:	89 d7                	mov    %edx,%edi
f0113d7b:	f3 aa                	rep stos %al,%es:(%edi)
f0113d7d:	83 ec 0c             	sub    $0xc,%esp
f0113d80:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113d86:	50                   	push   %eax
f0113d87:	e8 37 de fe ff       	call   f0101bc3 <execute_command>
f0113d8c:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113d8f:	e8 ce 8c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0113d94:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113d97:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113d9a:	89 d0                	mov    %edx,%eax
f0113d9c:	01 c0                	add    %eax,%eax
f0113d9e:	01 d0                	add    %edx,%eax
f0113da0:	c1 e0 02             	shl    $0x2,%eax
f0113da3:	50                   	push   %eax
f0113da4:	68 00 00 90 00       	push   $0x900000
f0113da9:	68 00 00 80 00       	push   $0x800000
f0113dae:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113db1:	e8 8d 4e ff ff       	call   f0108c43 <copy_paste_chunk>
f0113db6:	83 c4 10             	add    $0x10,%esp
f0113db9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113dbf:	e8 9e 8c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0113dc4:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113dc7:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113dce:	75 0b                	jne    f0113ddb <test_copy_paste_chunk+0xdc8>
f0113dd0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113dd3:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113dd6:	83 f8 03             	cmp    $0x3,%eax
f0113dd9:	74 2e                	je     f0113e09 <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113ddb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113dde:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113de1:	83 ec 0c             	sub    $0xc,%esp
f0113de4:	50                   	push   %eax
f0113de5:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113deb:	68 94 7f 13 f0       	push   $0xf0137f94
f0113df0:	68 cb 02 00 00       	push   $0x2cb
f0113df5:	68 f2 76 13 f0       	push   $0xf01376f2
f0113dfa:	e8 bf c5 fe ff       	call   f01003be <_warn>
f0113dff:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e02:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113e09:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113e0d:	74 04                	je     f0113e13 <test_copy_paste_chunk+0xe00>
f0113e0f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e13:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113e1a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113e21:	83 ec 08             	sub    $0x8,%esp
f0113e24:	6a 01                	push   $0x1
f0113e26:	6a 07                	push   $0x7
f0113e28:	6a 07                	push   $0x7
f0113e2a:	6a 07                	push   $0x7
f0113e2c:	6a 07                	push   $0x7
f0113e2e:	6a 01                	push   $0x1
f0113e30:	68 00 30 00 00       	push   $0x3000
f0113e35:	68 00 00 90 00       	push   $0x900000
f0113e3a:	68 00 00 80 00       	push   $0x800000
f0113e3f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113e42:	e8 89 31 00 00       	call   f0116fd0 <CCP>
f0113e47:	83 c4 30             	add    $0x30,%esp
f0113e4a:	83 f8 01             	cmp    $0x1,%eax
f0113e4d:	74 28                	je     f0113e77 <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113e4f:	83 ec 04             	sub    $0x4,%esp
f0113e52:	68 34 80 13 f0       	push   $0xf0138034
f0113e57:	68 d4 02 00 00       	push   $0x2d4
f0113e5c:	68 f2 76 13 f0       	push   $0xf01376f2
f0113e61:	e8 58 c5 fe ff       	call   f01003be <_warn>
f0113e66:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e69:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113e70:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113e77:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113e7b:	74 04                	je     f0113e81 <test_copy_paste_chunk+0xe6e>
f0113e7d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e81:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113e88:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113e8c:	0f 84 9e 00 00 00    	je     f0113f30 <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113e92:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113e99:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113ea0:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113ea7:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113eae:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113eb5:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113ebc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ebf:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113ec2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113ec5:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113ec8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113ecb:	8a 00                	mov    (%eax),%al
f0113ecd:	3c 61                	cmp    $0x61,%al
f0113ecf:	75 2d                	jne    f0113efe <test_copy_paste_chunk+0xeeb>
f0113ed1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113ed4:	8a 00                	mov    (%eax),%al
f0113ed6:	3c 61                	cmp    $0x61,%al
f0113ed8:	75 24                	jne    f0113efe <test_copy_paste_chunk+0xeeb>
f0113eda:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113edd:	8a 00                	mov    (%eax),%al
f0113edf:	3c 79                	cmp    $0x79,%al
f0113ee1:	75 1b                	jne    f0113efe <test_copy_paste_chunk+0xeeb>
f0113ee3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113ee6:	8a 00                	mov    (%eax),%al
f0113ee8:	3c 62                	cmp    $0x62,%al
f0113eea:	75 12                	jne    f0113efe <test_copy_paste_chunk+0xeeb>
f0113eec:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113eef:	8a 00                	mov    (%eax),%al
f0113ef1:	3c 63                	cmp    $0x63,%al
f0113ef3:	75 09                	jne    f0113efe <test_copy_paste_chunk+0xeeb>
f0113ef5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113ef8:	8a 00                	mov    (%eax),%al
f0113efa:	3c 7a                	cmp    $0x7a,%al
f0113efc:	74 21                	je     f0113f1f <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113efe:	83 ec 04             	sub    $0x4,%esp
f0113f01:	68 e8 7e 13 f0       	push   $0xf0137ee8
f0113f06:	68 e6 02 00 00       	push   $0x2e6
f0113f0b:	68 f2 76 13 f0       	push   $0xf01376f2
f0113f10:	e8 a9 c4 fe ff       	call   f01003be <_warn>
f0113f15:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113f18:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113f1f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113f23:	74 04                	je     f0113f29 <test_copy_paste_chunk+0xf16>
f0113f25:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113f29:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f30:	e8 2d 8b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0113f35:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113f38:	6a 00                	push   $0x0
f0113f3a:	6a 02                	push   $0x2
f0113f3c:	68 00 10 90 00       	push   $0x901000
f0113f41:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113f44:	e8 c9 2b 00 00       	call   f0116b12 <SB>
f0113f49:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113f4c:	6a 00                	push   $0x0
f0113f4e:	6a 02                	push   $0x2
f0113f50:	68 00 20 90 00       	push   $0x902000
f0113f55:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113f58:	e8 b5 2b 00 00       	call   f0116b12 <SB>
f0113f5d:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113f60:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f63:	c1 e0 03             	shl    $0x3,%eax
f0113f66:	50                   	push   %eax
f0113f67:	68 00 f0 bf 00       	push   $0xbff000
f0113f6c:	68 00 10 90 00       	push   $0x901000
f0113f71:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113f74:	e8 ca 4c ff ff       	call   f0108c43 <copy_paste_chunk>
f0113f79:	83 c4 10             	add    $0x10,%esp
f0113f7c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113f82:	e8 db 8a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0113f87:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113f8a:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113f91:	75 0b                	jne    f0113f9e <test_copy_paste_chunk+0xf8b>
f0113f93:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113f96:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113f99:	83 f8 03             	cmp    $0x3,%eax
f0113f9c:	74 2e                	je     f0113fcc <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113f9e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113fa1:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113fa4:	83 ec 0c             	sub    $0xc,%esp
f0113fa7:	50                   	push   %eax
f0113fa8:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113fae:	68 94 7f 13 f0       	push   $0xf0137f94
f0113fb3:	68 f6 02 00 00       	push   $0x2f6
f0113fb8:	68 f2 76 13 f0       	push   $0xf01376f2
f0113fbd:	e8 fc c3 fe ff       	call   f01003be <_warn>
f0113fc2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113fc5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113fcc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113fd0:	74 04                	je     f0113fd6 <test_copy_paste_chunk+0xfc3>
f0113fd2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113fd6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113fdd:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113fe4:	83 ec 08             	sub    $0x8,%esp
f0113fe7:	6a 01                	push   $0x1
f0113fe9:	6a 07                	push   $0x7
f0113feb:	6a 03                	push   $0x3
f0113fed:	6a 07                	push   $0x7
f0113fef:	6a 03                	push   $0x3
f0113ff1:	6a 01                	push   $0x1
f0113ff3:	68 00 20 00 00       	push   $0x2000
f0113ff8:	68 00 f0 bf 00       	push   $0xbff000
f0113ffd:	68 00 10 90 00       	push   $0x901000
f0114002:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114005:	e8 c6 2f 00 00       	call   f0116fd0 <CCP>
f011400a:	83 c4 30             	add    $0x30,%esp
f011400d:	83 f8 01             	cmp    $0x1,%eax
f0114010:	74 28                	je     f011403a <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0114012:	83 ec 04             	sub    $0x4,%esp
f0114015:	68 34 80 13 f0       	push   $0xf0138034
f011401a:	68 ff 02 00 00       	push   $0x2ff
f011401f:	68 f2 76 13 f0       	push   $0xf01376f2
f0114024:	e8 95 c3 fe ff       	call   f01003be <_warn>
f0114029:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011402c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0114033:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f011403a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011403e:	74 04                	je     f0114044 <test_copy_paste_chunk+0x1031>
f0114040:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114044:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011404b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011404f:	74 72                	je     f01140c3 <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0114051:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0114058:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f011405f:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0114066:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f011406d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114070:	8a 00                	mov    (%eax),%al
f0114072:	3c 62                	cmp    $0x62,%al
f0114074:	75 1b                	jne    f0114091 <test_copy_paste_chunk+0x107e>
f0114076:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114079:	8a 00                	mov    (%eax),%al
f011407b:	3c 62                	cmp    $0x62,%al
f011407d:	75 12                	jne    f0114091 <test_copy_paste_chunk+0x107e>
f011407f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114082:	8a 00                	mov    (%eax),%al
f0114084:	3c 7a                	cmp    $0x7a,%al
f0114086:	75 09                	jne    f0114091 <test_copy_paste_chunk+0x107e>
f0114088:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011408b:	8a 00                	mov    (%eax),%al
f011408d:	3c 7a                	cmp    $0x7a,%al
f011408f:	74 21                	je     f01140b2 <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0114091:	83 ec 04             	sub    $0x4,%esp
f0114094:	68 e8 7e 13 f0       	push   $0xf0137ee8
f0114099:	68 0b 03 00 00       	push   $0x30b
f011409e:	68 f2 76 13 f0       	push   $0xf01376f2
f01140a3:	e8 16 c3 fe ff       	call   f01003be <_warn>
f01140a8:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01140ab:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01140b2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01140b6:	74 04                	je     f01140bc <test_copy_paste_chunk+0x10a9>
f01140b8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01140bc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01140c3:	83 ec 0c             	sub    $0xc,%esp
f01140c6:	68 e2 80 13 f0       	push   $0xf01380e2
f01140cb:	e8 61 cd fe ff       	call   f0100e31 <cprintf>
f01140d0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f01140d3:	83 ec 08             	sub    $0x8,%esp
f01140d6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01140d9:	68 f4 80 13 f0       	push   $0xf01380f4
f01140de:	e8 4e cd fe ff       	call   f0100e31 <cprintf>
f01140e3:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01140e6:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01140ea:	75 10                	jne    f01140fc <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01140ec:	83 ec 0c             	sub    $0xc,%esp
f01140ef:	68 28 81 13 f0       	push   $0xf0138128
f01140f4:	e8 38 cd fe ff       	call   f0100e31 <cprintf>
f01140f9:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01140fc:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0114101:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0114104:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114107:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011410a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011410f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114112:	5b                   	pop    %ebx
f0114113:	5e                   	pop    %esi
f0114114:	5f                   	pop    %edi
f0114115:	5d                   	pop    %ebp
f0114116:	c3                   	ret    

f0114117 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0114117:	55                   	push   %ebp
f0114118:	89 e5                	mov    %esp,%ebp
f011411a:	57                   	push   %edi
f011411b:	56                   	push   %esi
f011411c:	53                   	push   %ebx
f011411d:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114123:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0114129:	bb f4 7d 13 f0       	mov    $0xf0137df4,%ebx
f011412e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114133:	89 c7                	mov    %eax,%edi
f0114135:	89 de                	mov    %ebx,%esi
f0114137:	89 d1                	mov    %edx,%ecx
f0114139:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011413b:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0114141:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114146:	b0 00                	mov    $0x0,%al
f0114148:	89 d7                	mov    %edx,%edi
f011414a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011414c:	6a 00                	push   $0x0
f011414e:	6a 0a                	push   $0xa
f0114150:	6a 14                	push   $0x14
f0114152:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0114158:	50                   	push   %eax
f0114159:	e8 09 4c ff ff       	call   f0108d67 <env_create>
f011415e:	83 c4 10             	add    $0x10,%esp
f0114161:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114164:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114167:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011416d:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0114170:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114173:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114179:	89 45 80             	mov    %eax,-0x80(%ebp)
f011417c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011417f:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114182:	83 ec 0c             	sub    $0xc,%esp
f0114185:	ff 75 cc             	pushl  -0x34(%ebp)
f0114188:	e8 0f 2e 00 00       	call   f0116f9c <ClearUserSpace>
f011418d:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114190:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114197:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f011419e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f01141a5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f01141a9:	83 ec 0c             	sub    $0xc,%esp
f01141ac:	68 a0 89 13 f0       	push   $0xf01389a0
f01141b1:	e8 7b cc fe ff       	call   f0100e31 <cprintf>
f01141b6:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f01141b9:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f01141c0:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f01141c7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141ca:	8a 00                	mov    (%eax),%al
f01141cc:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f01141d2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01141d5:	8a 00                	mov    (%eax),%al
f01141d7:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01141dd:	e8 80 88 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01141e2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f01141e5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01141e8:	89 d0                	mov    %edx,%eax
f01141ea:	01 c0                	add    %eax,%eax
f01141ec:	01 d0                	add    %edx,%eax
f01141ee:	01 c0                	add    %eax,%eax
f01141f0:	83 ec 0c             	sub    $0xc,%esp
f01141f3:	6a 02                	push   $0x2
f01141f5:	50                   	push   %eax
f01141f6:	68 00 40 10 f0       	push   $0xf0104000
f01141fb:	68 00 00 10 f0       	push   $0xf0100000
f0114200:	ff 75 cc             	pushl  -0x34(%ebp)
f0114203:	e8 55 4a ff ff       	call   f0108c5d <share_chunk>
f0114208:	83 c4 20             	add    $0x20,%esp
f011420b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011420e:	e8 4f 88 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114213:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114216:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011421a:	75 08                	jne    f0114224 <test_share_chunk+0x10d>
f011421c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011421f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114222:	74 28                	je     f011424c <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0114224:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114227:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011422a:	83 ec 0c             	sub    $0xc,%esp
f011422d:	50                   	push   %eax
f011422e:	ff 75 b0             	pushl  -0x50(%ebp)
f0114231:	68 cc 89 13 f0       	push   $0xf01389cc
f0114236:	68 47 03 00 00       	push   $0x347
f011423b:	68 f2 76 13 f0       	push   $0xf01376f2
f0114240:	e8 79 c1 fe ff       	call   f01003be <_warn>
f0114245:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114248:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011424c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114250:	74 04                	je     f0114256 <test_share_chunk+0x13f>
f0114252:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114256:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f011425a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011425d:	c1 e0 03             	shl    $0x3,%eax
f0114260:	83 ec 08             	sub    $0x8,%esp
f0114263:	68 fd 00 00 00       	push   $0xfd
f0114268:	6a 07                	push   $0x7
f011426a:	6a 03                	push   $0x3
f011426c:	6a 07                	push   $0x7
f011426e:	6a 03                	push   $0x3
f0114270:	6a 01                	push   $0x1
f0114272:	50                   	push   %eax
f0114273:	68 00 40 10 f0       	push   $0xf0104000
f0114278:	68 00 00 10 f0       	push   $0xf0100000
f011427d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114280:	e8 4b 2d 00 00       	call   f0116fd0 <CCP>
f0114285:	83 c4 30             	add    $0x30,%esp
f0114288:	85 c0                	test   %eax,%eax
f011428a:	75 1e                	jne    f01142aa <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011428c:	83 ec 04             	sub    $0x4,%esp
f011428f:	68 28 8a 13 f0       	push   $0xf0138a28
f0114294:	68 4f 03 00 00       	push   $0x34f
f0114299:	68 f2 76 13 f0       	push   $0xf01376f2
f011429e:	e8 1b c1 fe ff       	call   f01003be <_warn>
f01142a3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142a6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01142aa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142ae:	74 04                	je     f01142b4 <test_share_chunk+0x19d>
f01142b0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f01142b4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142b7:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f01142ba:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142bd:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f01142c0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142c3:	8a 00                	mov    (%eax),%al
f01142c5:	3c 41                	cmp    $0x41,%al
f01142c7:	75 09                	jne    f01142d2 <test_share_chunk+0x1bb>
f01142c9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142cc:	8a 00                	mov    (%eax),%al
f01142ce:	3c 42                	cmp    $0x42,%al
f01142d0:	74 1e                	je     f01142f0 <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01142d2:	83 ec 04             	sub    $0x4,%esp
f01142d5:	68 70 8a 13 f0       	push   $0xf0138a70
f01142da:	68 59 03 00 00       	push   $0x359
f01142df:	68 f2 76 13 f0       	push   $0xf01376f2
f01142e4:	e8 d5 c0 fe ff       	call   f01003be <_warn>
f01142e9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142ec:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01142f0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142f4:	74 04                	je     f01142fa <test_share_chunk+0x1e3>
f01142f6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01142fa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01142fe:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0114304:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114307:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0114309:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f011430f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114312:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0114314:	83 ec 0c             	sub    $0xc,%esp
f0114317:	68 a5 8a 13 f0       	push   $0xf0138aa5
f011431c:	e8 10 cb fe ff       	call   f0100e31 <cprintf>
f0114321:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0114324:	83 ec 0c             	sub    $0xc,%esp
f0114327:	68 b4 8a 13 f0       	push   $0xf0138ab4
f011432c:	e8 00 cb fe ff       	call   f0100e31 <cprintf>
f0114331:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114334:	e8 29 87 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114339:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011433c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011433f:	c1 e0 05             	shl    $0x5,%eax
f0114342:	83 ec 0c             	sub    $0xc,%esp
f0114345:	68 02 0e 00 00       	push   $0xe02
f011434a:	50                   	push   %eax
f011434b:	68 00 00 00 40       	push   $0x40000000
f0114350:	68 00 00 00 f0       	push   $0xf0000000
f0114355:	ff 75 cc             	pushl  -0x34(%ebp)
f0114358:	e8 00 49 ff ff       	call   f0108c5d <share_chunk>
f011435d:	83 c4 20             	add    $0x20,%esp
f0114360:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114363:	e8 fa 86 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114368:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f011436b:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f011436f:	75 1f                	jne    f0114390 <test_share_chunk+0x279>
f0114371:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114374:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114377:	89 c1                	mov    %eax,%ecx
f0114379:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011437c:	c1 e0 05             	shl    $0x5,%eax
f011437f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114382:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114389:	99                   	cltd   
f011438a:	f7 fb                	idiv   %ebx
f011438c:	39 c1                	cmp    %eax,%ecx
f011438e:	74 28                	je     f01143b8 <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114390:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114393:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114396:	83 ec 0c             	sub    $0xc,%esp
f0114399:	50                   	push   %eax
f011439a:	ff 75 a8             	pushl  -0x58(%ebp)
f011439d:	68 f0 8a 13 f0       	push   $0xf0138af0
f01143a2:	68 71 03 00 00       	push   $0x371
f01143a7:	68 f2 76 13 f0       	push   $0xf01376f2
f01143ac:	e8 0d c0 fe ff       	call   f01003be <_warn>
f01143b1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143b4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143b8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143bc:	74 04                	je     f01143c2 <test_share_chunk+0x2ab>
f01143be:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143c2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01143c6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01143cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01143d0:	c1 e0 05             	shl    $0x5,%eax
f01143d3:	83 ec 08             	sub    $0x8,%esp
f01143d6:	6a 02                	push   $0x2
f01143d8:	6a 07                	push   $0x7
f01143da:	6a 03                	push   $0x3
f01143dc:	68 07 0e 00 00       	push   $0xe07
f01143e1:	68 03 0e 00 00       	push   $0xe03
f01143e6:	6a ff                	push   $0xffffffff
f01143e8:	50                   	push   %eax
f01143e9:	68 00 00 00 40       	push   $0x40000000
f01143ee:	68 00 00 00 f0       	push   $0xf0000000
f01143f3:	ff 75 cc             	pushl  -0x34(%ebp)
f01143f6:	e8 d5 2b 00 00       	call   f0116fd0 <CCP>
f01143fb:	83 c4 30             	add    $0x30,%esp
f01143fe:	85 c0                	test   %eax,%eax
f0114400:	75 25                	jne    f0114427 <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114402:	83 ec 04             	sub    $0x4,%esp
f0114405:	68 28 8a 13 f0       	push   $0xf0138a28
f011440a:	68 7a 03 00 00       	push   $0x37a
f011440f:	68 f2 76 13 f0       	push   $0xf01376f2
f0114414:	e8 a5 bf fe ff       	call   f01003be <_warn>
f0114419:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011441c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114420:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114427:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011442a:	89 d0                	mov    %edx,%eax
f011442c:	01 c0                	add    %eax,%eax
f011442e:	01 d0                	add    %edx,%eax
f0114430:	c1 e0 02             	shl    $0x2,%eax
f0114433:	83 ec 08             	sub    $0x8,%esp
f0114436:	6a 02                	push   $0x2
f0114438:	6a 07                	push   $0x7
f011443a:	6a 03                	push   $0x3
f011443c:	68 07 0e 00 00       	push   $0xe07
f0114441:	68 03 0e 00 00       	push   $0xe03
f0114446:	6a 02                	push   $0x2
f0114448:	50                   	push   %eax
f0114449:	68 00 00 00 40       	push   $0x40000000
f011444e:	68 00 00 00 f0       	push   $0xf0000000
f0114453:	ff 75 cc             	pushl  -0x34(%ebp)
f0114456:	e8 75 2b 00 00       	call   f0116fd0 <CCP>
f011445b:	83 c4 30             	add    $0x30,%esp
f011445e:	85 c0                	test   %eax,%eax
f0114460:	75 1e                	jne    f0114480 <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114462:	83 ec 04             	sub    $0x4,%esp
f0114465:	68 28 8a 13 f0       	push   $0xf0138a28
f011446a:	68 81 03 00 00       	push   $0x381
f011446f:	68 f2 76 13 f0       	push   $0xf01376f2
f0114474:	e8 45 bf fe ff       	call   f01003be <_warn>
f0114479:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011447c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114480:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114484:	74 04                	je     f011448a <test_share_chunk+0x373>
f0114486:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011448a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f011448e:	b8 8c e5 2d f0       	mov    $0xf02de58c,%eax
f0114493:	05 00 00 00 10       	add    $0x10000000,%eax
f0114498:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011449b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011449e:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f01144a3:	83 ec 08             	sub    $0x8,%esp
f01144a6:	6a 02                	push   $0x2
f01144a8:	6a 07                	push   $0x7
f01144aa:	6a 03                	push   $0x3
f01144ac:	68 07 0e 00 00       	push   $0xe07
f01144b1:	68 03 0e 00 00       	push   $0xe03
f01144b6:	6a 02                	push   $0x2
f01144b8:	50                   	push   %eax
f01144b9:	68 00 00 0a 40       	push   $0x400a0000
f01144be:	68 00 00 0a f0       	push   $0xf00a0000
f01144c3:	ff 75 cc             	pushl  -0x34(%ebp)
f01144c6:	e8 05 2b 00 00       	call   f0116fd0 <CCP>
f01144cb:	83 c4 30             	add    $0x30,%esp
f01144ce:	85 c0                	test   %eax,%eax
f01144d0:	75 1e                	jne    f01144f0 <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01144d2:	83 ec 04             	sub    $0x4,%esp
f01144d5:	68 28 8a 13 f0       	push   $0xf0138a28
f01144da:	68 8b 03 00 00       	push   $0x38b
f01144df:	68 f2 76 13 f0       	push   $0xf01376f2
f01144e4:	e8 d5 be fe ff       	call   f01003be <_warn>
f01144e9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01144ec:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144f0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144f4:	74 04                	je     f01144fa <test_share_chunk+0x3e3>
f01144f6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144fa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01144fe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114502:	0f 84 a4 00 00 00    	je     f01145ac <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0114508:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f011450f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114512:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0114515:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f011451c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011451f:	8a 00                	mov    (%eax),%al
f0114521:	3c 41                	cmp    $0x41,%al
f0114523:	75 09                	jne    f011452e <test_share_chunk+0x417>
f0114525:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114528:	8a 00                	mov    (%eax),%al
f011452a:	3c 41                	cmp    $0x41,%al
f011452c:	74 1e                	je     f011454c <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011452e:	83 ec 04             	sub    $0x4,%esp
f0114531:	68 70 8a 13 f0       	push   $0xf0138a70
f0114536:	68 98 03 00 00       	push   $0x398
f011453b:	68 f2 76 13 f0       	push   $0xf01376f2
f0114540:	e8 79 be fe ff       	call   f01003be <_warn>
f0114545:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114548:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011454c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114550:	74 04                	je     f0114556 <test_share_chunk+0x43f>
f0114552:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114556:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f011455a:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0114561:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114564:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0114567:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f011456e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114571:	8a 00                	mov    (%eax),%al
f0114573:	3c 43                	cmp    $0x43,%al
f0114575:	75 09                	jne    f0114580 <test_share_chunk+0x469>
f0114577:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011457a:	8a 00                	mov    (%eax),%al
f011457c:	3c 43                	cmp    $0x43,%al
f011457e:	74 1e                	je     f011459e <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114580:	83 ec 04             	sub    $0x4,%esp
f0114583:	68 70 8a 13 f0       	push   $0xf0138a70
f0114588:	68 a3 03 00 00       	push   $0x3a3
f011458d:	68 f2 76 13 f0       	push   $0xf01376f2
f0114592:	e8 27 be fe ff       	call   f01003be <_warn>
f0114597:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011459a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011459e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145a2:	74 04                	je     f01145a8 <test_share_chunk+0x491>
f01145a4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01145a8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01145ac:	83 ec 0c             	sub    $0xc,%esp
f01145af:	68 7f 80 13 f0       	push   $0xf013807f
f01145b4:	e8 78 c8 fe ff       	call   f0100e31 <cprintf>
f01145b9:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f01145bc:	83 ec 0c             	sub    $0xc,%esp
f01145bf:	68 40 8b 13 f0       	push   $0xf0138b40
f01145c4:	e8 68 c8 fe ff       	call   f0100e31 <cprintf>
f01145c9:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01145cc:	e8 91 84 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01145d1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f01145d4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145d7:	89 d0                	mov    %edx,%eax
f01145d9:	c1 e0 03             	shl    $0x3,%eax
f01145dc:	01 d0                	add    %edx,%eax
f01145de:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01145e5:	01 d0                	add    %edx,%eax
f01145e7:	c1 e0 03             	shl    $0x3,%eax
f01145ea:	83 ec 0c             	sub    $0xc,%esp
f01145ed:	6a 06                	push   $0x6
f01145ef:	50                   	push   %eax
f01145f0:	6a 00                	push   $0x0
f01145f2:	68 00 00 00 40       	push   $0x40000000
f01145f7:	ff 75 cc             	pushl  -0x34(%ebp)
f01145fa:	e8 5e 46 ff ff       	call   f0108c5d <share_chunk>
f01145ff:	83 c4 20             	add    $0x20,%esp
f0114602:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114605:	e8 58 84 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011460a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011460d:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0114611:	75 0b                	jne    f011461e <test_share_chunk+0x507>
f0114613:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114616:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114619:	83 f8 01             	cmp    $0x1,%eax
f011461c:	74 28                	je     f0114646 <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011461e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114621:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114624:	83 ec 0c             	sub    $0xc,%esp
f0114627:	50                   	push   %eax
f0114628:	ff 75 a0             	pushl  -0x60(%ebp)
f011462b:	68 f0 8a 13 f0       	push   $0xf0138af0
f0114630:	68 b9 03 00 00       	push   $0x3b9
f0114635:	68 f2 76 13 f0       	push   $0xf01376f2
f011463a:	e8 7f bd fe ff       	call   f01003be <_warn>
f011463f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114642:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114646:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011464a:	74 04                	je     f0114650 <test_share_chunk+0x539>
f011464c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114650:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114654:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011465b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011465e:	05 00 80 02 00       	add    $0x28000,%eax
f0114663:	c1 e0 02             	shl    $0x2,%eax
f0114666:	83 ec 08             	sub    $0x8,%esp
f0114669:	6a 02                	push   $0x2
f011466b:	6a 07                	push   $0x7
f011466d:	6a 03                	push   $0x3
f011466f:	6a 07                	push   $0x7
f0114671:	6a 07                	push   $0x7
f0114673:	6a ff                	push   $0xffffffff
f0114675:	50                   	push   %eax
f0114676:	6a 00                	push   $0x0
f0114678:	68 00 00 00 40       	push   $0x40000000
f011467d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114680:	e8 4b 29 00 00       	call   f0116fd0 <CCP>
f0114685:	83 c4 30             	add    $0x30,%esp
f0114688:	85 c0                	test   %eax,%eax
f011468a:	75 25                	jne    f01146b1 <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011468c:	83 ec 04             	sub    $0x4,%esp
f011468f:	68 28 8a 13 f0       	push   $0xf0138a28
f0114694:	68 c2 03 00 00       	push   $0x3c2
f0114699:	68 f2 76 13 f0       	push   $0xf01376f2
f011469e:	e8 1b bd fe ff       	call   f01003be <_warn>
f01146a3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146a6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01146aa:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01146b1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01146b4:	89 d0                	mov    %edx,%eax
f01146b6:	01 c0                	add    %eax,%eax
f01146b8:	01 d0                	add    %edx,%eax
f01146ba:	c1 e0 02             	shl    $0x2,%eax
f01146bd:	83 ec 08             	sub    $0x8,%esp
f01146c0:	6a 02                	push   $0x2
f01146c2:	6a 07                	push   $0x7
f01146c4:	6a 03                	push   $0x3
f01146c6:	6a 07                	push   $0x7
f01146c8:	6a 07                	push   $0x7
f01146ca:	6a 03                	push   $0x3
f01146cc:	50                   	push   %eax
f01146cd:	6a 00                	push   $0x0
f01146cf:	68 00 00 00 40       	push   $0x40000000
f01146d4:	ff 75 cc             	pushl  -0x34(%ebp)
f01146d7:	e8 f4 28 00 00       	call   f0116fd0 <CCP>
f01146dc:	83 c4 30             	add    $0x30,%esp
f01146df:	85 c0                	test   %eax,%eax
f01146e1:	75 1e                	jne    f0114701 <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01146e3:	83 ec 04             	sub    $0x4,%esp
f01146e6:	68 28 8a 13 f0       	push   $0xf0138a28
f01146eb:	68 c9 03 00 00       	push   $0x3c9
f01146f0:	68 f2 76 13 f0       	push   $0xf01376f2
f01146f5:	e8 c4 bc fe ff       	call   f01003be <_warn>
f01146fa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114701:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114705:	74 04                	je     f011470b <test_share_chunk+0x5f4>
f0114707:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011470b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011470f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114712:	89 d0                	mov    %edx,%eax
f0114714:	01 c0                	add    %eax,%eax
f0114716:	01 d0                	add    %edx,%eax
f0114718:	c1 e0 02             	shl    $0x2,%eax
f011471b:	f7 d8                	neg    %eax
f011471d:	05 00 00 0a 00       	add    $0xa0000,%eax
f0114722:	83 ec 08             	sub    $0x8,%esp
f0114725:	6a 02                	push   $0x2
f0114727:	6a 07                	push   $0x7
f0114729:	6a 03                	push   $0x3
f011472b:	6a 07                	push   $0x7
f011472d:	6a 07                	push   $0x7
f011472f:	6a 02                	push   $0x2
f0114731:	50                   	push   %eax
f0114732:	68 00 30 00 00       	push   $0x3000
f0114737:	68 00 30 00 40       	push   $0x40003000
f011473c:	ff 75 cc             	pushl  -0x34(%ebp)
f011473f:	e8 8c 28 00 00       	call   f0116fd0 <CCP>
f0114744:	83 c4 30             	add    $0x30,%esp
f0114747:	85 c0                	test   %eax,%eax
f0114749:	75 1e                	jne    f0114769 <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011474b:	83 ec 04             	sub    $0x4,%esp
f011474e:	68 28 8a 13 f0       	push   $0xf0138a28
f0114753:	68 d1 03 00 00       	push   $0x3d1
f0114758:	68 f2 76 13 f0       	push   $0xf01376f2
f011475d:	e8 5c bc fe ff       	call   f01003be <_warn>
f0114762:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114765:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114769:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011476d:	74 04                	je     f0114773 <test_share_chunk+0x65c>
f011476f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114773:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114777:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011477a:	c1 e0 02             	shl    $0x2,%eax
f011477d:	83 ec 08             	sub    $0x8,%esp
f0114780:	6a 02                	push   $0x2
f0114782:	6a 07                	push   $0x7
f0114784:	6a 03                	push   $0x3
f0114786:	6a 07                	push   $0x7
f0114788:	6a 07                	push   $0x7
f011478a:	6a 03                	push   $0x3
f011478c:	50                   	push   %eax
f011478d:	68 00 00 0a 00       	push   $0xa0000
f0114792:	68 00 00 0a 40       	push   $0x400a0000
f0114797:	ff 75 cc             	pushl  -0x34(%ebp)
f011479a:	e8 31 28 00 00       	call   f0116fd0 <CCP>
f011479f:	83 c4 30             	add    $0x30,%esp
f01147a2:	85 c0                	test   %eax,%eax
f01147a4:	75 1e                	jne    f01147c4 <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01147a6:	83 ec 04             	sub    $0x4,%esp
f01147a9:	68 28 8a 13 f0       	push   $0xf0138a28
f01147ae:	68 d9 03 00 00       	push   $0x3d9
f01147b3:	68 f2 76 13 f0       	push   $0xf01376f2
f01147b8:	e8 01 bc fe ff       	call   f01003be <_warn>
f01147bd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01147c0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01147c4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147c8:	74 04                	je     f01147ce <test_share_chunk+0x6b7>
f01147ca:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01147ce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01147d2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01147d6:	0f 84 92 00 00 00    	je     f011486e <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f01147dc:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01147e3:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01147ea:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01147f1:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01147f8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01147fb:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01147fe:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0114805:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011480c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011480f:	8a 00                	mov    (%eax),%al
f0114811:	3c 41                	cmp    $0x41,%al
f0114813:	75 2d                	jne    f0114842 <test_share_chunk+0x72b>
f0114815:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114818:	8a 00                	mov    (%eax),%al
f011481a:	3c 41                	cmp    $0x41,%al
f011481c:	75 24                	jne    f0114842 <test_share_chunk+0x72b>
f011481e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114821:	8a 00                	mov    (%eax),%al
f0114823:	3c 41                	cmp    $0x41,%al
f0114825:	75 1b                	jne    f0114842 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114827:	8b 45 98             	mov    -0x68(%ebp),%eax
f011482a:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011482c:	3c 44                	cmp    $0x44,%al
f011482e:	75 12                	jne    f0114842 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114830:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114833:	8a 00                	mov    (%eax),%al
f0114835:	3c 44                	cmp    $0x44,%al
f0114837:	75 09                	jne    f0114842 <test_share_chunk+0x72b>
f0114839:	8b 45 90             	mov    -0x70(%ebp),%eax
f011483c:	8a 00                	mov    (%eax),%al
f011483e:	3c 44                	cmp    $0x44,%al
f0114840:	74 1e                	je     f0114860 <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114842:	83 ec 04             	sub    $0x4,%esp
f0114845:	68 70 8a 13 f0       	push   $0xf0138a70
f011484a:	68 eb 03 00 00       	push   $0x3eb
f011484f:	68 f2 76 13 f0       	push   $0xf01376f2
f0114854:	e8 65 bb fe ff       	call   f01003be <_warn>
f0114859:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011485c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114860:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114864:	74 04                	je     f011486a <test_share_chunk+0x753>
f0114866:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011486a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f011486e:	83 ec 0c             	sub    $0xc,%esp
f0114871:	68 e2 80 13 f0       	push   $0xf01380e2
f0114876:	e8 b6 c5 fe ff       	call   f0100e31 <cprintf>
f011487b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f011487e:	83 ec 0c             	sub    $0xc,%esp
f0114881:	68 7c 8b 13 f0       	push   $0xf0138b7c
f0114886:	e8 a6 c5 fe ff       	call   f0100e31 <cprintf>
f011488b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011488e:	e8 cf 81 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114893:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0114896:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114899:	89 d0                	mov    %edx,%eax
f011489b:	01 c0                	add    %eax,%eax
f011489d:	01 d0                	add    %edx,%eax
f011489f:	01 c0                	add    %eax,%eax
f01148a1:	01 d0                	add    %edx,%eax
f01148a3:	83 ec 0c             	sub    $0xc,%esp
f01148a6:	6a 04                	push   $0x4
f01148a8:	50                   	push   %eax
f01148a9:	68 00 fc 3f 00       	push   $0x3ffc00
f01148ae:	68 00 fc 09 00       	push   $0x9fc00
f01148b3:	ff 75 cc             	pushl  -0x34(%ebp)
f01148b6:	e8 a2 43 ff ff       	call   f0108c5d <share_chunk>
f01148bb:	83 c4 20             	add    $0x20,%esp
f01148be:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01148c1:	e8 9c 81 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01148c6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01148c9:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f01148cd:	75 0b                	jne    f01148da <test_share_chunk+0x7c3>
f01148cf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01148d2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01148d5:	83 f8 01             	cmp    $0x1,%eax
f01148d8:	74 28                	je     f0114902 <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01148da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01148dd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01148e0:	83 ec 0c             	sub    $0xc,%esp
f01148e3:	50                   	push   %eax
f01148e4:	ff 75 8c             	pushl  -0x74(%ebp)
f01148e7:	68 f0 8a 13 f0       	push   $0xf0138af0
f01148ec:	68 01 04 00 00       	push   $0x401
f01148f1:	68 f2 76 13 f0       	push   $0xf01376f2
f01148f6:	e8 c3 ba fe ff       	call   f01003be <_warn>
f01148fb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148fe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114902:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114906:	74 04                	je     f011490c <test_share_chunk+0x7f5>
f0114908:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011490c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114910:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114917:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011491a:	89 d0                	mov    %edx,%eax
f011491c:	01 c0                	add    %eax,%eax
f011491e:	01 d0                	add    %edx,%eax
f0114920:	c1 e0 02             	shl    $0x2,%eax
f0114923:	83 ec 08             	sub    $0x8,%esp
f0114926:	6a 02                	push   $0x2
f0114928:	6a 07                	push   $0x7
f011492a:	6a 07                	push   $0x7
f011492c:	6a 07                	push   $0x7
f011492e:	6a 05                	push   $0x5
f0114930:	6a ff                	push   $0xffffffff
f0114932:	50                   	push   %eax
f0114933:	68 00 f0 3f 00       	push   $0x3ff000
f0114938:	68 00 f0 09 00       	push   $0x9f000
f011493d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114940:	e8 8b 26 00 00       	call   f0116fd0 <CCP>
f0114945:	83 c4 30             	add    $0x30,%esp
f0114948:	85 c0                	test   %eax,%eax
f011494a:	75 25                	jne    f0114971 <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011494c:	83 ec 04             	sub    $0x4,%esp
f011494f:	68 28 8a 13 f0       	push   $0xf0138a28
f0114954:	68 0a 04 00 00       	push   $0x40a
f0114959:	68 f2 76 13 f0       	push   $0xf01376f2
f011495e:	e8 5b ba fe ff       	call   f01003be <_warn>
f0114963:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114966:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011496a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114971:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114975:	74 04                	je     f011497b <test_share_chunk+0x864>
f0114977:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011497b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011497f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114982:	c1 e0 02             	shl    $0x2,%eax
f0114985:	83 ec 08             	sub    $0x8,%esp
f0114988:	6a 02                	push   $0x2
f011498a:	6a 07                	push   $0x7
f011498c:	6a 07                	push   $0x7
f011498e:	6a 07                	push   $0x7
f0114990:	6a 05                	push   $0x5
f0114992:	6a 03                	push   $0x3
f0114994:	50                   	push   %eax
f0114995:	68 00 f0 3f 00       	push   $0x3ff000
f011499a:	68 00 f0 09 00       	push   $0x9f000
f011499f:	ff 75 cc             	pushl  -0x34(%ebp)
f01149a2:	e8 29 26 00 00       	call   f0116fd0 <CCP>
f01149a7:	83 c4 30             	add    $0x30,%esp
f01149aa:	85 c0                	test   %eax,%eax
f01149ac:	75 1e                	jne    f01149cc <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01149ae:	83 ec 04             	sub    $0x4,%esp
f01149b1:	68 28 8a 13 f0       	push   $0xf0138a28
f01149b6:	68 13 04 00 00       	push   $0x413
f01149bb:	68 f2 76 13 f0       	push   $0xf01376f2
f01149c0:	e8 f9 b9 fe ff       	call   f01003be <_warn>
f01149c5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01149c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01149cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149d0:	74 04                	je     f01149d6 <test_share_chunk+0x8bf>
f01149d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01149da:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149dd:	c1 e0 03             	shl    $0x3,%eax
f01149e0:	83 ec 08             	sub    $0x8,%esp
f01149e3:	6a 02                	push   $0x2
f01149e5:	6a 07                	push   $0x7
f01149e7:	6a 07                	push   $0x7
f01149e9:	6a 07                	push   $0x7
f01149eb:	6a 05                	push   $0x5
f01149ed:	6a 04                	push   $0x4
f01149ef:	50                   	push   %eax
f01149f0:	68 00 00 40 00       	push   $0x400000
f01149f5:	68 00 00 0a 00       	push   $0xa0000
f01149fa:	ff 75 cc             	pushl  -0x34(%ebp)
f01149fd:	e8 ce 25 00 00       	call   f0116fd0 <CCP>
f0114a02:	83 c4 30             	add    $0x30,%esp
f0114a05:	85 c0                	test   %eax,%eax
f0114a07:	75 1e                	jne    f0114a27 <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114a09:	83 ec 04             	sub    $0x4,%esp
f0114a0c:	68 28 8a 13 f0       	push   $0xf0138a28
f0114a11:	68 1b 04 00 00       	push   $0x41b
f0114a16:	68 f2 76 13 f0       	push   $0xf01376f2
f0114a1b:	e8 9e b9 fe ff       	call   f01003be <_warn>
f0114a20:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a23:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a27:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a2b:	74 04                	je     f0114a31 <test_share_chunk+0x91a>
f0114a2d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a31:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114a35:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114a39:	0f 84 b2 00 00 00    	je     f0114af1 <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f0114a3f:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0114a46:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0114a4d:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0114a54:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0114a5b:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114a62:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0114a69:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114a70:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114a77:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114a7a:	8a 00                	mov    (%eax),%al
f0114a7c:	3c 44                	cmp    $0x44,%al
f0114a7e:	75 45                	jne    f0114ac5 <test_share_chunk+0x9ae>
f0114a80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114a83:	8a 00                	mov    (%eax),%al
f0114a85:	3c 44                	cmp    $0x44,%al
f0114a87:	75 3c                	jne    f0114ac5 <test_share_chunk+0x9ae>
f0114a89:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114a8c:	8a 00                	mov    (%eax),%al
f0114a8e:	3c 44                	cmp    $0x44,%al
f0114a90:	75 33                	jne    f0114ac5 <test_share_chunk+0x9ae>
f0114a92:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114a95:	8a 00                	mov    (%eax),%al
f0114a97:	3c 44                	cmp    $0x44,%al
f0114a99:	75 2a                	jne    f0114ac5 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114a9b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114a9e:	8a 10                	mov    (%eax),%dl
f0114aa0:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114aa3:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114aa5:	38 c2                	cmp    %al,%dl
f0114aa7:	75 1c                	jne    f0114ac5 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114aa9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114aac:	8a 10                	mov    (%eax),%dl
f0114aae:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114ab1:	8a 00                	mov    (%eax),%al
f0114ab3:	38 c2                	cmp    %al,%dl
f0114ab5:	75 0e                	jne    f0114ac5 <test_share_chunk+0x9ae>
f0114ab7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114aba:	8a 10                	mov    (%eax),%dl
f0114abc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114abf:	8a 00                	mov    (%eax),%al
f0114ac1:	38 c2                	cmp    %al,%dl
f0114ac3:	74 1e                	je     f0114ae3 <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114ac5:	83 ec 04             	sub    $0x4,%esp
f0114ac8:	68 70 8a 13 f0       	push   $0xf0138a70
f0114acd:	68 30 04 00 00       	push   $0x430
f0114ad2:	68 f2 76 13 f0       	push   $0xf01376f2
f0114ad7:	e8 e2 b8 fe ff       	call   f01003be <_warn>
f0114adc:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114adf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114ae3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ae7:	74 04                	je     f0114aed <test_share_chunk+0x9d6>
f0114ae9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114aed:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114af1:	83 ec 0c             	sub    $0xc,%esp
f0114af4:	68 b4 8b 13 f0       	push   $0xf0138bb4
f0114af9:	e8 33 c3 fe ff       	call   f0100e31 <cprintf>
f0114afe:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114b01:	83 ec 08             	sub    $0x8,%esp
f0114b04:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114b07:	68 c4 8b 13 f0       	push   $0xf0138bc4
f0114b0c:	e8 20 c3 fe ff       	call   f0100e31 <cprintf>
f0114b11:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114b14:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114b18:	75 10                	jne    f0114b2a <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0114b1a:	83 ec 0c             	sub    $0xc,%esp
f0114b1d:	68 f4 8b 13 f0       	push   $0xf0138bf4
f0114b22:	e8 0a c3 fe ff       	call   f0100e31 <cprintf>
f0114b27:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114b2a:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0114b2f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114b32:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114b35:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114b38:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114b3d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114b40:	5b                   	pop    %ebx
f0114b41:	5e                   	pop    %esi
f0114b42:	5f                   	pop    %edi
f0114b43:	5d                   	pop    %ebp
f0114b44:	c3                   	ret    

f0114b45 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0114b45:	55                   	push   %ebp
f0114b46:	89 e5                	mov    %esp,%ebp
f0114b48:	57                   	push   %edi
f0114b49:	56                   	push   %esi
f0114b4a:	53                   	push   %ebx
f0114b4b:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114b51:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114b57:	bb f4 7d 13 f0       	mov    $0xf0137df4,%ebx
f0114b5c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b61:	89 c7                	mov    %eax,%edi
f0114b63:	89 de                	mov    %ebx,%esi
f0114b65:	89 d1                	mov    %edx,%ecx
f0114b67:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b69:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114b6f:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114b74:	b0 00                	mov    $0x0,%al
f0114b76:	89 d7                	mov    %edx,%edi
f0114b78:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114b7a:	6a 00                	push   $0x0
f0114b7c:	6a 0a                	push   $0xa
f0114b7e:	6a 14                	push   $0x14
f0114b80:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114b86:	50                   	push   %eax
f0114b87:	e8 db 41 ff ff       	call   f0108d67 <env_create>
f0114b8c:	83 c4 10             	add    $0x10,%esp
f0114b8f:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114b92:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114b95:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0114b9b:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0114b9e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ba1:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114ba7:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114baa:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114bad:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114bb0:	83 ec 0c             	sub    $0xc,%esp
f0114bb3:	ff 75 cc             	pushl  -0x34(%ebp)
f0114bb6:	e8 e1 23 00 00       	call   f0116f9c <ClearUserSpace>
f0114bbb:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114bbe:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114bc5:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0114bcc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0114bd3:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114bd7:	83 ec 0c             	sub    $0xc,%esp
f0114bda:	68 30 8c 13 f0       	push   $0xf0138c30
f0114bdf:	e8 4d c2 fe ff       	call   f0100e31 <cprintf>
f0114be4:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114be7:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114bee:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f0114bf5:	eb 03                	jmp    f0114bfa <test_allocate_chunk+0xb5>
f0114bf7:	ff 4d e4             	decl   -0x1c(%ebp)
f0114bfa:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114c01:	76 09                	jbe    f0114c0c <test_allocate_chunk+0xc7>
f0114c03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c06:	8a 00                	mov    (%eax),%al
f0114c08:	84 c0                	test   %al,%al
f0114c0a:	74 eb                	je     f0114bf7 <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f0114c0c:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114c13:	75 06                	jne    f0114c1b <test_allocate_chunk+0xd6>
f0114c15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c18:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f0114c1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c1e:	8a 00                	mov    (%eax),%al
f0114c20:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114c26:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114c29:	8a 00                	mov    (%eax),%al
f0114c2b:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0114c31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c34:	8a 00                	mov    (%eax),%al
f0114c36:	0f be c0             	movsbl %al,%eax
f0114c39:	83 ec 08             	sub    $0x8,%esp
f0114c3c:	50                   	push   %eax
f0114c3d:	68 5a 8c 13 f0       	push   $0xf0138c5a
f0114c42:	e8 ea c1 fe ff       	call   f0100e31 <cprintf>
f0114c47:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f0114c4a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114c4d:	8a 00                	mov    (%eax),%al
f0114c4f:	0f be c0             	movsbl %al,%eax
f0114c52:	83 ec 08             	sub    $0x8,%esp
f0114c55:	50                   	push   %eax
f0114c56:	68 66 8c 13 f0       	push   $0xf0138c66
f0114c5b:	e8 d1 c1 fe ff       	call   f0100e31 <cprintf>
f0114c60:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114c63:	83 ec 08             	sub    $0x8,%esp
f0114c66:	68 00 f0 bf ef       	push   $0xefbff000
f0114c6b:	ff 75 cc             	pushl  -0x34(%ebp)
f0114c6e:	e8 90 22 00 00       	call   f0116f03 <GP>
f0114c73:	83 c4 10             	add    $0x10,%esp
f0114c76:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114c79:	e8 e4 7d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114c7e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114c81:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c84:	c1 e0 02             	shl    $0x2,%eax
f0114c87:	6a 02                	push   $0x2
f0114c89:	50                   	push   %eax
f0114c8a:	68 00 f0 bf ef       	push   $0xefbff000
f0114c8f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114c92:	e8 e0 3f ff ff       	call   f0108c77 <allocate_chunk>
f0114c97:	83 c4 10             	add    $0x10,%esp
f0114c9a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114c9d:	e8 c0 7d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114ca2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114ca5:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114ca9:	75 08                	jne    f0114cb3 <test_allocate_chunk+0x16e>
f0114cab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114cae:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114cb1:	74 2a                	je     f0114cdd <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114cb3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114cb6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114cb9:	83 ec 08             	sub    $0x8,%esp
f0114cbc:	6a 00                	push   $0x0
f0114cbe:	50                   	push   %eax
f0114cbf:	ff 75 b0             	pushl  -0x50(%ebp)
f0114cc2:	68 74 8c 13 f0       	push   $0xf0138c74
f0114cc7:	68 70 04 00 00       	push   $0x470
f0114ccc:	68 f2 76 13 f0       	push   $0xf01376f2
f0114cd1:	e8 e8 b6 fe ff       	call   f01003be <_warn>
f0114cd6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114cd9:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114cdd:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ce1:	74 04                	je     f0114ce7 <test_allocate_chunk+0x1a2>
f0114ce3:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114ce7:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114ceb:	e8 72 7d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114cf0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114cf3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cf6:	01 c0                	add    %eax,%eax
f0114cf8:	89 c1                	mov    %eax,%ecx
f0114cfa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114cfd:	89 d0                	mov    %edx,%eax
f0114cff:	c1 e0 02             	shl    $0x2,%eax
f0114d02:	01 d0                	add    %edx,%eax
f0114d04:	f7 d8                	neg    %eax
f0114d06:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114d0b:	6a 02                	push   $0x2
f0114d0d:	51                   	push   %ecx
f0114d0e:	50                   	push   %eax
f0114d0f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d12:	e8 60 3f ff ff       	call   f0108c77 <allocate_chunk>
f0114d17:	83 c4 10             	add    $0x10,%esp
f0114d1a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114d1d:	e8 40 7d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114d22:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114d25:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114d29:	75 08                	jne    f0114d33 <test_allocate_chunk+0x1ee>
f0114d2b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d2e:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114d31:	74 2a                	je     f0114d5d <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114d33:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d36:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d39:	83 ec 08             	sub    $0x8,%esp
f0114d3c:	6a 00                	push   $0x0
f0114d3e:	50                   	push   %eax
f0114d3f:	ff 75 b0             	pushl  -0x50(%ebp)
f0114d42:	68 74 8c 13 f0       	push   $0xf0138c74
f0114d47:	68 7e 04 00 00       	push   $0x47e
f0114d4c:	68 f2 76 13 f0       	push   $0xf01376f2
f0114d51:	e8 68 b6 fe ff       	call   f01003be <_warn>
f0114d56:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d59:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114d5d:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114d61:	74 04                	je     f0114d67 <test_allocate_chunk+0x222>
f0114d63:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114d67:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114d6b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d6e:	c1 e0 02             	shl    $0x2,%eax
f0114d71:	83 ec 08             	sub    $0x8,%esp
f0114d74:	6a 03                	push   $0x3
f0114d76:	6a 00                	push   $0x0
f0114d78:	6a 00                	push   $0x0
f0114d7a:	68 ff 0f 00 00       	push   $0xfff
f0114d7f:	ff 75 b8             	pushl  -0x48(%ebp)
f0114d82:	6a 01                	push   $0x1
f0114d84:	50                   	push   %eax
f0114d85:	68 00 f0 bf ef       	push   $0xefbff000
f0114d8a:	6a 00                	push   $0x0
f0114d8c:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d8f:	e8 3c 22 00 00       	call   f0116fd0 <CCP>
f0114d94:	83 c4 30             	add    $0x30,%esp
f0114d97:	85 c0                	test   %eax,%eax
f0114d99:	75 1e                	jne    f0114db9 <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114d9b:	83 ec 04             	sub    $0x4,%esp
f0114d9e:	68 dc 8c 13 f0       	push   $0xf0138cdc
f0114da3:	68 86 04 00 00       	push   $0x486
f0114da8:	68 f2 76 13 f0       	push   $0xf01376f2
f0114dad:	e8 0c b6 fe ff       	call   f01003be <_warn>
f0114db2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114db5:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114db9:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114dbd:	74 04                	je     f0114dc3 <test_allocate_chunk+0x27e>
f0114dbf:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114dc3:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114dc7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114dca:	8a 10                	mov    (%eax),%dl
f0114dcc:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114dd2:	38 c2                	cmp    %al,%dl
f0114dd4:	75 0f                	jne    f0114de5 <test_allocate_chunk+0x2a0>
f0114dd6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114dd9:	8a 10                	mov    (%eax),%dl
f0114ddb:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114de1:	38 c2                	cmp    %al,%dl
f0114de3:	74 1e                	je     f0114e03 <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114de5:	83 ec 04             	sub    $0x4,%esp
f0114de8:	68 28 8d 13 f0       	push   $0xf0138d28
f0114ded:	68 8e 04 00 00       	push   $0x48e
f0114df2:	68 f2 76 13 f0       	push   $0xf01376f2
f0114df7:	e8 c2 b5 fe ff       	call   f01003be <_warn>
f0114dfc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114dff:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114e03:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114e07:	74 04                	je     f0114e0d <test_allocate_chunk+0x2c8>
f0114e09:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114e0d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114e11:	83 ec 0c             	sub    $0xc,%esp
f0114e14:	68 a5 8a 13 f0       	push   $0xf0138aa5
f0114e19:	e8 13 c0 fe ff       	call   f0100e31 <cprintf>
f0114e1e:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114e21:	83 ec 0c             	sub    $0xc,%esp
f0114e24:	68 60 8d 13 f0       	push   $0xf0138d60
f0114e29:	e8 03 c0 fe ff       	call   f0100e31 <cprintf>
f0114e2e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114e31:	e8 2c 7c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114e36:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114e39:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e3c:	c1 e0 05             	shl    $0x5,%eax
f0114e3f:	68 02 0e 00 00       	push   $0xe02
f0114e44:	50                   	push   %eax
f0114e45:	6a 00                	push   $0x0
f0114e47:	ff 75 cc             	pushl  -0x34(%ebp)
f0114e4a:	e8 28 3e ff ff       	call   f0108c77 <allocate_chunk>
f0114e4f:	83 c4 10             	add    $0x10,%esp
f0114e52:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114e55:	e8 08 7c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114e5a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114e5d:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114e61:	75 36                	jne    f0114e99 <test_allocate_chunk+0x354>
f0114e63:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e66:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e69:	89 c1                	mov    %eax,%ecx
f0114e6b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e6e:	c1 e0 05             	shl    $0x5,%eax
f0114e71:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114e74:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e7b:	99                   	cltd   
f0114e7c:	f7 fe                	idiv   %esi
f0114e7e:	89 c3                	mov    %eax,%ebx
f0114e80:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e83:	c1 e0 05             	shl    $0x5,%eax
f0114e86:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114e89:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e90:	99                   	cltd   
f0114e91:	f7 fe                	idiv   %esi
f0114e93:	01 d8                	add    %ebx,%eax
f0114e95:	39 c1                	cmp    %eax,%ecx
f0114e97:	74 54                	je     f0114eed <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114e99:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e9c:	c1 e0 05             	shl    $0x5,%eax
f0114e9f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114ea2:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114ea9:	99                   	cltd   
f0114eaa:	f7 ff                	idiv   %edi
f0114eac:	89 c1                	mov    %eax,%ecx
f0114eae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114eb1:	c1 e0 05             	shl    $0x5,%eax
f0114eb4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114eb7:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ebe:	99                   	cltd   
f0114ebf:	f7 fe                	idiv   %esi
f0114ec1:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114ec4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114ec7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114eca:	83 ec 08             	sub    $0x8,%esp
f0114ecd:	52                   	push   %edx
f0114ece:	50                   	push   %eax
f0114ecf:	ff 75 a8             	pushl  -0x58(%ebp)
f0114ed2:	68 a0 8d 13 f0       	push   $0xf0138da0
f0114ed7:	68 a3 04 00 00       	push   $0x4a3
f0114edc:	68 f2 76 13 f0       	push   $0xf01376f2
f0114ee1:	e8 d8 b4 fe ff       	call   f01003be <_warn>
f0114ee6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ee9:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114eed:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ef1:	74 04                	je     f0114ef7 <test_allocate_chunk+0x3b2>
f0114ef3:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114ef7:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114efb:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114f02:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f05:	c1 e0 05             	shl    $0x5,%eax
f0114f08:	83 ec 08             	sub    $0x8,%esp
f0114f0b:	6a 03                	push   $0x3
f0114f0d:	6a 00                	push   $0x0
f0114f0f:	6a 00                	push   $0x0
f0114f11:	68 07 0e 00 00       	push   $0xe07
f0114f16:	68 03 0e 00 00       	push   $0xe03
f0114f1b:	6a 01                	push   $0x1
f0114f1d:	50                   	push   %eax
f0114f1e:	6a 00                	push   $0x0
f0114f20:	6a 00                	push   $0x0
f0114f22:	ff 75 cc             	pushl  -0x34(%ebp)
f0114f25:	e8 a6 20 00 00       	call   f0116fd0 <CCP>
f0114f2a:	83 c4 30             	add    $0x30,%esp
f0114f2d:	85 c0                	test   %eax,%eax
f0114f2f:	75 25                	jne    f0114f56 <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114f31:	83 ec 04             	sub    $0x4,%esp
f0114f34:	68 dc 8c 13 f0       	push   $0xf0138cdc
f0114f39:	68 ac 04 00 00       	push   $0x4ac
f0114f3e:	68 f2 76 13 f0       	push   $0xf01376f2
f0114f43:	e8 76 b4 fe ff       	call   f01003be <_warn>
f0114f48:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114f4b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114f4f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114f56:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114f5a:	74 04                	je     f0114f60 <test_allocate_chunk+0x41b>
f0114f5c:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114f60:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114f64:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114f68:	74 5a                	je     f0114fc4 <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114f6a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114f6d:	01 c0                	add    %eax,%eax
f0114f6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114f72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114f75:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114f78:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f7b:	01 c0                	add    %eax,%eax
f0114f7d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114f80:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114f83:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114f86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114f89:	8a 00                	mov    (%eax),%al
f0114f8b:	3c 4b                	cmp    $0x4b,%al
f0114f8d:	75 09                	jne    f0114f98 <test_allocate_chunk+0x453>
f0114f8f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114f92:	8a 00                	mov    (%eax),%al
f0114f94:	3c 4d                	cmp    $0x4d,%al
f0114f96:	74 1e                	je     f0114fb6 <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114f98:	83 ec 04             	sub    $0x4,%esp
f0114f9b:	68 28 8d 13 f0       	push   $0xf0138d28
f0114fa0:	68 ba 04 00 00       	push   $0x4ba
f0114fa5:	68 f2 76 13 f0       	push   $0xf01376f2
f0114faa:	e8 0f b4 fe ff       	call   f01003be <_warn>
f0114faf:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114fb2:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114fb6:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114fba:	74 04                	je     f0114fc0 <test_allocate_chunk+0x47b>
f0114fbc:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114fc0:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114fc4:	83 ec 0c             	sub    $0xc,%esp
f0114fc7:	68 7f 80 13 f0       	push   $0xf013807f
f0114fcc:	e8 60 be fe ff       	call   f0100e31 <cprintf>
f0114fd1:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114fd4:	83 ec 0c             	sub    $0xc,%esp
f0114fd7:	68 00 8e 13 f0       	push   $0xf0138e00
f0114fdc:	e8 50 be fe ff       	call   f0100e31 <cprintf>
f0114fe1:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114fe4:	e8 79 7a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0114fe9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114fec:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114fef:	c1 e0 06             	shl    $0x6,%eax
f0114ff2:	89 c2                	mov    %eax,%edx
f0114ff4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ff7:	c1 e0 05             	shl    $0x5,%eax
f0114ffa:	6a 00                	push   $0x0
f0114ffc:	52                   	push   %edx
f0114ffd:	50                   	push   %eax
f0114ffe:	ff 75 cc             	pushl  -0x34(%ebp)
f0115001:	e8 71 3c ff ff       	call   f0108c77 <allocate_chunk>
f0115006:	83 c4 10             	add    $0x10,%esp
f0115009:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011500c:	e8 51 7a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0115011:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0115014:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0115018:	75 36                	jne    f0115050 <test_allocate_chunk+0x50b>
f011501a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011501d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115020:	89 c1                	mov    %eax,%ecx
f0115022:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115025:	c1 e0 06             	shl    $0x6,%eax
f0115028:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011502b:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0115032:	99                   	cltd   
f0115033:	f7 ff                	idiv   %edi
f0115035:	89 c3                	mov    %eax,%ebx
f0115037:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011503a:	c1 e0 06             	shl    $0x6,%eax
f011503d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115040:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115047:	99                   	cltd   
f0115048:	f7 fe                	idiv   %esi
f011504a:	01 d8                	add    %ebx,%eax
f011504c:	39 c1                	cmp    %eax,%ecx
f011504e:	74 54                	je     f01150a4 <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0115050:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115053:	c1 e0 06             	shl    $0x6,%eax
f0115056:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115059:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115060:	99                   	cltd   
f0115061:	f7 fb                	idiv   %ebx
f0115063:	89 c1                	mov    %eax,%ecx
f0115065:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115068:	c1 e0 06             	shl    $0x6,%eax
f011506b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011506e:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0115075:	99                   	cltd   
f0115076:	f7 ff                	idiv   %edi
f0115078:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011507b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011507e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115081:	83 ec 08             	sub    $0x8,%esp
f0115084:	52                   	push   %edx
f0115085:	50                   	push   %eax
f0115086:	ff 75 a4             	pushl  -0x5c(%ebp)
f0115089:	68 a0 8d 13 f0       	push   $0xf0138da0
f011508e:	68 d0 04 00 00       	push   $0x4d0
f0115093:	68 f2 76 13 f0       	push   $0xf01376f2
f0115098:	e8 21 b3 fe ff       	call   f01003be <_warn>
f011509d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150a0:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01150a4:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01150a8:	74 04                	je     f01150ae <test_allocate_chunk+0x569>
f01150aa:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01150ae:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01150b2:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01150b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01150bc:	c1 e0 06             	shl    $0x6,%eax
f01150bf:	89 c2                	mov    %eax,%edx
f01150c1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01150c4:	c1 e0 05             	shl    $0x5,%eax
f01150c7:	83 ec 08             	sub    $0x8,%esp
f01150ca:	6a 03                	push   $0x3
f01150cc:	6a 00                	push   $0x0
f01150ce:	6a 00                	push   $0x0
f01150d0:	68 07 0e 00 00       	push   $0xe07
f01150d5:	6a 01                	push   $0x1
f01150d7:	6a 01                	push   $0x1
f01150d9:	52                   	push   %edx
f01150da:	50                   	push   %eax
f01150db:	6a 00                	push   $0x0
f01150dd:	ff 75 cc             	pushl  -0x34(%ebp)
f01150e0:	e8 eb 1e 00 00       	call   f0116fd0 <CCP>
f01150e5:	83 c4 30             	add    $0x30,%esp
f01150e8:	85 c0                	test   %eax,%eax
f01150ea:	75 25                	jne    f0115111 <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01150ec:	83 ec 04             	sub    $0x4,%esp
f01150ef:	68 dc 8c 13 f0       	push   $0xf0138cdc
f01150f4:	68 d9 04 00 00       	push   $0x4d9
f01150f9:	68 f2 76 13 f0       	push   $0xf01376f2
f01150fe:	e8 bb b2 fe ff       	call   f01003be <_warn>
f0115103:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115106:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f011510a:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0115111:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115115:	74 04                	je     f011511b <test_allocate_chunk+0x5d6>
f0115117:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011511b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f011511f:	83 ec 0c             	sub    $0xc,%esp
f0115122:	68 e2 80 13 f0       	push   $0xf01380e2
f0115127:	e8 05 bd fe ff       	call   f0100e31 <cprintf>
f011512c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f011512f:	83 ec 0c             	sub    $0xc,%esp
f0115132:	68 40 8e 13 f0       	push   $0xf0138e40
f0115137:	e8 f5 bc fe ff       	call   f0100e31 <cprintf>
f011513c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011513f:	e8 1e 79 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0115144:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0115147:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011514a:	c1 e0 06             	shl    $0x6,%eax
f011514d:	68 06 0e 00 00       	push   $0xe06
f0115152:	50                   	push   %eax
f0115153:	68 00 00 00 80       	push   $0x80000000
f0115158:	ff 75 cc             	pushl  -0x34(%ebp)
f011515b:	e8 17 3b ff ff       	call   f0108c77 <allocate_chunk>
f0115160:	83 c4 10             	add    $0x10,%esp
f0115163:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115166:	e8 f7 78 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011516b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f011516e:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0115172:	75 36                	jne    f01151aa <test_allocate_chunk+0x665>
f0115174:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115177:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011517a:	89 c1                	mov    %eax,%ecx
f011517c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011517f:	c1 e0 06             	shl    $0x6,%eax
f0115182:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115185:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011518c:	99                   	cltd   
f011518d:	f7 fb                	idiv   %ebx
f011518f:	89 c3                	mov    %eax,%ebx
f0115191:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115194:	c1 e0 06             	shl    $0x6,%eax
f0115197:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011519a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01151a1:	99                   	cltd   
f01151a2:	f7 fe                	idiv   %esi
f01151a4:	01 d8                	add    %ebx,%eax
f01151a6:	39 c1                	cmp    %eax,%ecx
f01151a8:	74 54                	je     f01151fe <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f01151aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01151ad:	c1 e0 06             	shl    $0x6,%eax
f01151b0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01151b3:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01151ba:	99                   	cltd   
f01151bb:	f7 ff                	idiv   %edi
f01151bd:	89 c1                	mov    %eax,%ecx
f01151bf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01151c2:	c1 e0 06             	shl    $0x6,%eax
f01151c5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01151c8:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01151cf:	99                   	cltd   
f01151d0:	f7 fb                	idiv   %ebx
f01151d2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01151d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01151d8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01151db:	83 ec 08             	sub    $0x8,%esp
f01151de:	52                   	push   %edx
f01151df:	50                   	push   %eax
f01151e0:	ff 75 9c             	pushl  -0x64(%ebp)
f01151e3:	68 a0 8d 13 f0       	push   $0xf0138da0
f01151e8:	68 ef 04 00 00       	push   $0x4ef
f01151ed:	68 f2 76 13 f0       	push   $0xf01376f2
f01151f2:	e8 c7 b1 fe ff       	call   f01003be <_warn>
f01151f7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151fa:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01151fe:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115202:	74 04                	je     f0115208 <test_allocate_chunk+0x6c3>
f0115204:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0115208:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f011520c:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0115213:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115216:	c1 e0 06             	shl    $0x6,%eax
f0115219:	83 ec 08             	sub    $0x8,%esp
f011521c:	6a 03                	push   $0x3
f011521e:	6a 00                	push   $0x0
f0115220:	6a 00                	push   $0x0
f0115222:	68 07 0e 00 00       	push   $0xe07
f0115227:	68 07 0e 00 00       	push   $0xe07
f011522c:	6a 01                	push   $0x1
f011522e:	50                   	push   %eax
f011522f:	68 00 00 00 80       	push   $0x80000000
f0115234:	6a 00                	push   $0x0
f0115236:	ff 75 cc             	pushl  -0x34(%ebp)
f0115239:	e8 92 1d 00 00       	call   f0116fd0 <CCP>
f011523e:	83 c4 30             	add    $0x30,%esp
f0115241:	85 c0                	test   %eax,%eax
f0115243:	75 25                	jne    f011526a <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0115245:	83 ec 04             	sub    $0x4,%esp
f0115248:	68 dc 8c 13 f0       	push   $0xf0138cdc
f011524d:	68 f8 04 00 00       	push   $0x4f8
f0115252:	68 f2 76 13 f0       	push   $0xf01376f2
f0115257:	e8 62 b1 fe ff       	call   f01003be <_warn>
f011525c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011525f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0115263:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f011526a:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011526e:	74 04                	je     f0115274 <test_allocate_chunk+0x72f>
f0115270:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0115274:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0115278:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011527c:	74 6f                	je     f01152ed <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f011527e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115281:	01 c0                	add    %eax,%eax
f0115283:	05 00 00 00 80       	add    $0x80000000,%eax
f0115288:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011528b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011528e:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0115291:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115294:	89 d0                	mov    %edx,%eax
f0115296:	c1 e0 02             	shl    $0x2,%eax
f0115299:	01 d0                	add    %edx,%eax
f011529b:	01 c0                	add    %eax,%eax
f011529d:	01 d0                	add    %edx,%eax
f011529f:	01 c0                	add    %eax,%eax
f01152a1:	05 00 00 00 80       	add    $0x80000000,%eax
f01152a6:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01152a9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01152ac:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01152af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01152b2:	8a 00                	mov    (%eax),%al
f01152b4:	3c 4b                	cmp    $0x4b,%al
f01152b6:	75 09                	jne    f01152c1 <test_allocate_chunk+0x77c>
f01152b8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01152bb:	8a 00                	mov    (%eax),%al
f01152bd:	3c 4d                	cmp    $0x4d,%al
f01152bf:	74 1e                	je     f01152df <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01152c1:	83 ec 04             	sub    $0x4,%esp
f01152c4:	68 28 8d 13 f0       	push   $0xf0138d28
f01152c9:	68 06 05 00 00       	push   $0x506
f01152ce:	68 f2 76 13 f0       	push   $0xf01376f2
f01152d3:	e8 e6 b0 fe ff       	call   f01003be <_warn>
f01152d8:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01152db:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f01152df:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01152e3:	74 04                	je     f01152e9 <test_allocate_chunk+0x7a4>
f01152e5:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f01152e9:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f01152ed:	83 ec 0c             	sub    $0xc,%esp
f01152f0:	68 b4 8b 13 f0       	push   $0xf0138bb4
f01152f5:	e8 37 bb fe ff       	call   f0100e31 <cprintf>
f01152fa:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f01152fd:	83 ec 0c             	sub    $0xc,%esp
f0115300:	68 7c 8e 13 f0       	push   $0xf0138e7c
f0115305:	e8 27 bb fe ff       	call   f0100e31 <cprintf>
f011530a:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011530d:	e8 50 77 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0115312:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0115315:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115318:	89 d0                	mov    %edx,%eax
f011531a:	01 c0                	add    %eax,%eax
f011531c:	01 d0                	add    %edx,%eax
f011531e:	01 c0                	add    %eax,%eax
f0115320:	01 d0                	add    %edx,%eax
f0115322:	68 04 0e 00 00       	push   $0xe04
f0115327:	50                   	push   %eax
f0115328:	68 00 fc 3f 40       	push   $0x403ffc00
f011532d:	ff 75 cc             	pushl  -0x34(%ebp)
f0115330:	e8 42 39 ff ff       	call   f0108c77 <allocate_chunk>
f0115335:	83 c4 10             	add    $0x10,%esp
f0115338:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011533b:	e8 22 77 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0115340:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0115343:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0115347:	75 0b                	jne    f0115354 <test_allocate_chunk+0x80f>
f0115349:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011534c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011534f:	83 f8 05             	cmp    $0x5,%eax
f0115352:	74 2a                	je     f011537e <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0115354:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115357:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011535a:	83 ec 08             	sub    $0x8,%esp
f011535d:	6a 05                	push   $0x5
f011535f:	50                   	push   %eax
f0115360:	ff 75 98             	pushl  -0x68(%ebp)
f0115363:	68 a0 8d 13 f0       	push   $0xf0138da0
f0115368:	68 1d 05 00 00       	push   $0x51d
f011536d:	68 f2 76 13 f0       	push   $0xf01376f2
f0115372:	e8 47 b0 fe ff       	call   f01003be <_warn>
f0115377:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011537a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f011537e:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115382:	74 04                	je     f0115388 <test_allocate_chunk+0x843>
f0115384:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0115388:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f011538c:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0115393:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115396:	89 d0                	mov    %edx,%eax
f0115398:	01 c0                	add    %eax,%eax
f011539a:	01 d0                	add    %edx,%eax
f011539c:	c1 e0 02             	shl    $0x2,%eax
f011539f:	83 ec 08             	sub    $0x8,%esp
f01153a2:	6a 03                	push   $0x3
f01153a4:	6a 00                	push   $0x0
f01153a6:	6a 00                	push   $0x0
f01153a8:	68 07 0e 00 00       	push   $0xe07
f01153ad:	68 05 0e 00 00       	push   $0xe05
f01153b2:	6a 01                	push   $0x1
f01153b4:	50                   	push   %eax
f01153b5:	68 00 f0 3f 40       	push   $0x403ff000
f01153ba:	6a 00                	push   $0x0
f01153bc:	ff 75 cc             	pushl  -0x34(%ebp)
f01153bf:	e8 0c 1c 00 00       	call   f0116fd0 <CCP>
f01153c4:	83 c4 30             	add    $0x30,%esp
f01153c7:	85 c0                	test   %eax,%eax
f01153c9:	75 25                	jne    f01153f0 <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01153cb:	83 ec 04             	sub    $0x4,%esp
f01153ce:	68 dc 8c 13 f0       	push   $0xf0138cdc
f01153d3:	68 26 05 00 00       	push   $0x526
f01153d8:	68 f2 76 13 f0       	push   $0xf01376f2
f01153dd:	e8 dc af fe ff       	call   f01003be <_warn>
f01153e2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01153e5:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f01153e9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f01153f0:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01153f4:	74 04                	je     f01153fa <test_allocate_chunk+0x8b5>
f01153f6:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01153fa:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f01153fe:	83 ec 0c             	sub    $0xc,%esp
f0115401:	68 b3 8e 13 f0       	push   $0xf0138eb3
f0115406:	e8 26 ba fe ff       	call   f0100e31 <cprintf>
f011540b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f011540e:	83 ec 08             	sub    $0x8,%esp
f0115411:	ff 75 e0             	pushl  -0x20(%ebp)
f0115414:	68 c4 8e 13 f0       	push   $0xf0138ec4
f0115419:	e8 13 ba fe ff       	call   f0100e31 <cprintf>
f011541e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115421:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0115425:	75 10                	jne    f0115437 <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0115427:	83 ec 0c             	sub    $0xc,%esp
f011542a:	68 f8 8e 13 f0       	push   $0xf0138ef8
f011542f:	e8 fd b9 fe ff       	call   f0100e31 <cprintf>
f0115434:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115437:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f011543c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011543f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115442:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115445:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011544a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011544d:	5b                   	pop    %ebx
f011544e:	5e                   	pop    %esi
f011544f:	5f                   	pop    %edi
f0115450:	5d                   	pop    %ebp
f0115451:	c3                   	ret    

f0115452 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0115452:	55                   	push   %ebp
f0115453:	89 e5                	mov    %esp,%ebp
f0115455:	57                   	push   %edi
f0115456:	56                   	push   %esi
f0115457:	53                   	push   %ebx
f0115458:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011545e:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115461:	bb f4 7d 13 f0       	mov    $0xf0137df4,%ebx
f0115466:	ba 0f 00 00 00       	mov    $0xf,%edx
f011546b:	89 c7                	mov    %eax,%edi
f011546d:	89 de                	mov    %ebx,%esi
f011546f:	89 d1                	mov    %edx,%ecx
f0115471:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115473:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115476:	b9 23 00 00 00       	mov    $0x23,%ecx
f011547b:	b0 00                	mov    $0x0,%al
f011547d:	89 d7                	mov    %edx,%edi
f011547f:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115481:	6a 00                	push   $0x0
f0115483:	6a 0a                	push   $0xa
f0115485:	6a 14                	push   $0x14
f0115487:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011548a:	50                   	push   %eax
f011548b:	e8 d7 38 ff ff       	call   f0108d67 <env_create>
f0115490:	83 c4 10             	add    $0x10,%esp
f0115493:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115496:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115499:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011549f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01154a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01154a5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01154ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01154ae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01154b1:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01154b4:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01154bb:	75 70 20 
f01154be:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01154c5:	00 00 00 
f01154c8:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01154cb:	b9 03 00 00 00       	mov    $0x3,%ecx
f01154d0:	b8 00 00 00 00       	mov    $0x0,%eax
f01154d5:	89 d7                	mov    %edx,%edi
f01154d7:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01154d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01154dc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01154df:	83 ec 08             	sub    $0x8,%esp
f01154e2:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01154e8:	52                   	push   %edx
f01154e9:	50                   	push   %eax
f01154ea:	e8 53 a0 01 00       	call   f012f542 <ltostr>
f01154ef:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01154f2:	83 ec 04             	sub    $0x4,%esp
f01154f5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01154fb:	50                   	push   %eax
f01154fc:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115502:	50                   	push   %eax
f0115503:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115509:	50                   	push   %eax
f011550a:	e8 2b a1 01 00       	call   f012f63a <strcconcat>
f011550f:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115512:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115519:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115520:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0115527:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f011552e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0115532:	83 ec 0c             	sub    $0xc,%esp
f0115535:	ff 75 d8             	pushl  -0x28(%ebp)
f0115538:	e8 5f 1a 00 00       	call   f0116f9c <ClearUserSpace>
f011553d:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115540:	83 ec 0c             	sub    $0xc,%esp
f0115543:	68 38 8f 13 f0       	push   $0xf0138f38
f0115548:	e8 e4 b8 fe ff       	call   f0100e31 <cprintf>
f011554d:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115550:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115553:	c1 e0 03             	shl    $0x3,%eax
f0115556:	83 ec 04             	sub    $0x4,%esp
f0115559:	50                   	push   %eax
f011555a:	6a 00                	push   $0x0
f011555c:	ff 75 d8             	pushl  -0x28(%ebp)
f011555f:	e8 47 37 ff ff       	call   f0108cab <calculate_required_frames>
f0115564:	83 c4 10             	add    $0x10,%esp
f0115567:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011556a:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011556e:	74 23                	je     f0115593 <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115570:	83 ec 0c             	sub    $0xc,%esp
f0115573:	6a 03                	push   $0x3
f0115575:	ff 75 c8             	pushl  -0x38(%ebp)
f0115578:	68 6c 8f 13 f0       	push   $0xf0138f6c
f011557d:	68 5f 05 00 00       	push   $0x55f
f0115582:	68 f2 76 13 f0       	push   $0xf01376f2
f0115587:	e8 32 ae fe ff       	call   f01003be <_warn>
f011558c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011558f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115593:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115597:	74 04                	je     f011559d <test_calculate_required_frames+0x14b>
f0115599:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011559d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01155a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01155a4:	c1 e0 02             	shl    $0x2,%eax
f01155a7:	83 ec 04             	sub    $0x4,%esp
f01155aa:	50                   	push   %eax
f01155ab:	6a 00                	push   $0x0
f01155ad:	ff 75 d8             	pushl  -0x28(%ebp)
f01155b0:	e8 f6 36 ff ff       	call   f0108cab <calculate_required_frames>
f01155b5:	83 c4 10             	add    $0x10,%esp
f01155b8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f01155bb:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f01155c2:	74 26                	je     f01155ea <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f01155c4:	83 ec 0c             	sub    $0xc,%esp
f01155c7:	68 01 04 00 00       	push   $0x401
f01155cc:	ff 75 c8             	pushl  -0x38(%ebp)
f01155cf:	68 6c 8f 13 f0       	push   $0xf0138f6c
f01155d4:	68 69 05 00 00       	push   $0x569
f01155d9:	68 f2 76 13 f0       	push   $0xf01376f2
f01155de:	e8 db ad fe ff       	call   f01003be <_warn>
f01155e3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155e6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01155ea:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155ee:	74 04                	je     f01155f4 <test_calculate_required_frames+0x1a2>
f01155f0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01155f4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01155f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01155fb:	c1 e0 0a             	shl    $0xa,%eax
f01155fe:	83 ec 04             	sub    $0x4,%esp
f0115601:	50                   	push   %eax
f0115602:	6a 00                	push   $0x0
f0115604:	ff 75 d8             	pushl  -0x28(%ebp)
f0115607:	e8 9f 36 ff ff       	call   f0108cab <calculate_required_frames>
f011560c:	83 c4 10             	add    $0x10,%esp
f011560f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0115612:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115615:	c1 e0 0a             	shl    $0xa,%eax
f0115618:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011561b:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115622:	99                   	cltd   
f0115623:	f7 fb                	idiv   %ebx
f0115625:	89 c1                	mov    %eax,%ecx
f0115627:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011562a:	c1 e0 0a             	shl    $0xa,%eax
f011562d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115630:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115637:	99                   	cltd   
f0115638:	f7 fe                	idiv   %esi
f011563a:	01 c8                	add    %ecx,%eax
f011563c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011563f:	74 4c                	je     f011568d <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0115641:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115644:	c1 e0 0a             	shl    $0xa,%eax
f0115647:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011564a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115651:	99                   	cltd   
f0115652:	f7 fb                	idiv   %ebx
f0115654:	89 c1                	mov    %eax,%ecx
f0115656:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115659:	c1 e0 0a             	shl    $0xa,%eax
f011565c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011565f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115666:	99                   	cltd   
f0115667:	f7 fe                	idiv   %esi
f0115669:	01 c8                	add    %ecx,%eax
f011566b:	83 ec 0c             	sub    $0xc,%esp
f011566e:	50                   	push   %eax
f011566f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115672:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115677:	68 73 05 00 00       	push   $0x573
f011567c:	68 f2 76 13 f0       	push   $0xf01376f2
f0115681:	e8 38 ad fe ff       	call   f01003be <_warn>
f0115686:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115689:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011568d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115691:	74 04                	je     f0115697 <test_calculate_required_frames+0x245>
f0115693:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115697:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f011569b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011569e:	89 d0                	mov    %edx,%eax
f01156a0:	01 c0                	add    %eax,%eax
f01156a2:	01 d0                	add    %edx,%eax
f01156a4:	01 c0                	add    %eax,%eax
f01156a6:	83 ec 04             	sub    $0x4,%esp
f01156a9:	50                   	push   %eax
f01156aa:	68 00 10 00 00       	push   $0x1000
f01156af:	ff 75 d8             	pushl  -0x28(%ebp)
f01156b2:	e8 f4 35 ff ff       	call   f0108cab <calculate_required_frames>
f01156b7:	83 c4 10             	add    $0x10,%esp
f01156ba:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01156bd:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01156c1:	74 23                	je     f01156e6 <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01156c3:	83 ec 0c             	sub    $0xc,%esp
f01156c6:	6a 03                	push   $0x3
f01156c8:	ff 75 c8             	pushl  -0x38(%ebp)
f01156cb:	68 6c 8f 13 f0       	push   $0xf0138f6c
f01156d0:	68 7f 05 00 00       	push   $0x57f
f01156d5:	68 f2 76 13 f0       	push   $0xf01376f2
f01156da:	e8 df ac fe ff       	call   f01003be <_warn>
f01156df:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156e2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01156e6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156ea:	74 04                	je     f01156f0 <test_calculate_required_frames+0x29e>
f01156ec:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01156f0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01156f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01156f7:	89 c2                	mov    %eax,%edx
f01156f9:	01 d2                	add    %edx,%edx
f01156fb:	01 d0                	add    %edx,%eax
f01156fd:	83 ec 04             	sub    $0x4,%esp
f0115700:	50                   	push   %eax
f0115701:	68 00 18 00 00       	push   $0x1800
f0115706:	ff 75 d8             	pushl  -0x28(%ebp)
f0115709:	e8 9d 35 ff ff       	call   f0108cab <calculate_required_frames>
f011570e:	83 c4 10             	add    $0x10,%esp
f0115711:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115714:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115718:	74 23                	je     f011573d <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011571a:	83 ec 0c             	sub    $0xc,%esp
f011571d:	6a 03                	push   $0x3
f011571f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115722:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115727:	68 89 05 00 00       	push   $0x589
f011572c:	68 f2 76 13 f0       	push   $0xf01376f2
f0115731:	e8 88 ac fe ff       	call   f01003be <_warn>
f0115736:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115739:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011573d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115741:	74 04                	je     f0115747 <test_calculate_required_frames+0x2f5>
f0115743:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115747:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011574b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011574e:	89 d0                	mov    %edx,%eax
f0115750:	c1 e0 02             	shl    $0x2,%eax
f0115753:	01 d0                	add    %edx,%eax
f0115755:	01 c0                	add    %eax,%eax
f0115757:	83 ec 04             	sub    $0x4,%esp
f011575a:	50                   	push   %eax
f011575b:	68 00 00 40 00       	push   $0x400000
f0115760:	ff 75 d8             	pushl  -0x28(%ebp)
f0115763:	e8 43 35 ff ff       	call   f0108cab <calculate_required_frames>
f0115768:	83 c4 10             	add    $0x10,%esp
f011576b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f011576e:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0115775:	74 26                	je     f011579d <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115777:	83 ec 0c             	sub    $0xc,%esp
f011577a:	68 03 0a 00 00       	push   $0xa03
f011577f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115782:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115787:	68 93 05 00 00       	push   $0x593
f011578c:	68 f2 76 13 f0       	push   $0xf01376f2
f0115791:	e8 28 ac fe ff       	call   f01003be <_warn>
f0115796:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115799:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011579d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157a1:	74 04                	je     f01157a7 <test_calculate_required_frames+0x355>
f01157a3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157a7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01157ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01157ae:	01 c0                	add    %eax,%eax
f01157b0:	83 ec 04             	sub    $0x4,%esp
f01157b3:	50                   	push   %eax
f01157b4:	68 00 00 70 00       	push   $0x700000
f01157b9:	ff 75 d8             	pushl  -0x28(%ebp)
f01157bc:	e8 ea 34 ff ff       	call   f0108cab <calculate_required_frames>
f01157c1:	83 c4 10             	add    $0x10,%esp
f01157c4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01157c7:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01157ce:	74 26                	je     f01157f6 <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01157d0:	83 ec 0c             	sub    $0xc,%esp
f01157d3:	68 02 02 00 00       	push   $0x202
f01157d8:	ff 75 c8             	pushl  -0x38(%ebp)
f01157db:	68 6c 8f 13 f0       	push   $0xf0138f6c
f01157e0:	68 9f 05 00 00       	push   $0x59f
f01157e5:	68 f2 76 13 f0       	push   $0xf01376f2
f01157ea:	e8 cf ab fe ff       	call   f01003be <_warn>
f01157ef:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157f2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01157f6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157fa:	74 04                	je     f0115800 <test_calculate_required_frames+0x3ae>
f01157fc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115800:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115804:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115807:	83 ec 04             	sub    $0x4,%esp
f011580a:	50                   	push   %eax
f011580b:	68 ff ff 3f 00       	push   $0x3fffff
f0115810:	ff 75 d8             	pushl  -0x28(%ebp)
f0115813:	e8 93 34 ff ff       	call   f0108cab <calculate_required_frames>
f0115818:	83 c4 10             	add    $0x10,%esp
f011581b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f011581e:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115822:	74 23                	je     f0115847 <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115824:	83 ec 0c             	sub    $0xc,%esp
f0115827:	6a 04                	push   $0x4
f0115829:	ff 75 c8             	pushl  -0x38(%ebp)
f011582c:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115831:	68 a9 05 00 00       	push   $0x5a9
f0115836:	68 f2 76 13 f0       	push   $0xf01376f2
f011583b:	e8 7e ab fe ff       	call   f01003be <_warn>
f0115840:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115843:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115847:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011584b:	74 04                	je     f0115851 <test_calculate_required_frames+0x3ff>
f011584d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115851:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115855:	83 ec 0c             	sub    $0xc,%esp
f0115858:	68 a5 8a 13 f0       	push   $0xf0138aa5
f011585d:	e8 cf b5 fe ff       	call   f0100e31 <cprintf>
f0115862:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115865:	83 ec 0c             	sub    $0xc,%esp
f0115868:	68 c4 8f 13 f0       	push   $0xf0138fc4
f011586d:	e8 bf b5 fe ff       	call   f0100e31 <cprintf>
f0115872:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115875:	83 ec 04             	sub    $0x4,%esp
f0115878:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011587e:	50                   	push   %eax
f011587f:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0115884:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011588a:	50                   	push   %eax
f011588b:	e8 aa 9d 01 00       	call   f012f63a <strcconcat>
f0115890:	83 c4 10             	add    $0x10,%esp
f0115893:	83 ec 0c             	sub    $0xc,%esp
f0115896:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011589c:	50                   	push   %eax
f011589d:	e8 21 c3 fe ff       	call   f0101bc3 <execute_command>
f01158a2:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01158a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01158a8:	c1 e0 03             	shl    $0x3,%eax
f01158ab:	83 ec 04             	sub    $0x4,%esp
f01158ae:	50                   	push   %eax
f01158af:	6a 00                	push   $0x0
f01158b1:	ff 75 d8             	pushl  -0x28(%ebp)
f01158b4:	e8 f2 33 ff ff       	call   f0108cab <calculate_required_frames>
f01158b9:	83 c4 10             	add    $0x10,%esp
f01158bc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01158bf:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01158c6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01158c9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01158cc:	74 24                	je     f01158f2 <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01158ce:	83 ec 0c             	sub    $0xc,%esp
f01158d1:	ff 75 c4             	pushl  -0x3c(%ebp)
f01158d4:	ff 75 c8             	pushl  -0x38(%ebp)
f01158d7:	68 6c 8f 13 f0       	push   $0xf0138f6c
f01158dc:	68 bd 05 00 00       	push   $0x5bd
f01158e1:	68 f2 76 13 f0       	push   $0xf01376f2
f01158e6:	e8 d3 aa fe ff       	call   f01003be <_warn>
f01158eb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158ee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158f2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158f6:	74 04                	je     f01158fc <test_calculate_required_frames+0x4aa>
f01158f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158fc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115900:	83 ec 04             	sub    $0x4,%esp
f0115903:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115909:	50                   	push   %eax
f011590a:	68 6b 7e 13 f0       	push   $0xf0137e6b
f011590f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115915:	50                   	push   %eax
f0115916:	e8 1f 9d 01 00       	call   f012f63a <strcconcat>
f011591b:	83 c4 10             	add    $0x10,%esp
f011591e:	83 ec 0c             	sub    $0xc,%esp
f0115921:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115927:	50                   	push   %eax
f0115928:	e8 96 c2 fe ff       	call   f0101bc3 <execute_command>
f011592d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115930:	83 ec 04             	sub    $0x4,%esp
f0115933:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115939:	50                   	push   %eax
f011593a:	68 f8 8f 13 f0       	push   $0xf0138ff8
f011593f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115945:	50                   	push   %eax
f0115946:	e8 ef 9c 01 00       	call   f012f63a <strcconcat>
f011594b:	83 c4 10             	add    $0x10,%esp
f011594e:	83 ec 0c             	sub    $0xc,%esp
f0115951:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115957:	50                   	push   %eax
f0115958:	e8 66 c2 fe ff       	call   f0101bc3 <execute_command>
f011595d:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115960:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115963:	c1 e0 03             	shl    $0x3,%eax
f0115966:	83 ec 04             	sub    $0x4,%esp
f0115969:	50                   	push   %eax
f011596a:	6a 00                	push   $0x0
f011596c:	ff 75 d8             	pushl  -0x28(%ebp)
f011596f:	e8 37 33 ff ff       	call   f0108cab <calculate_required_frames>
f0115974:	83 c4 10             	add    $0x10,%esp
f0115977:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f011597a:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0115981:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115984:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115987:	74 24                	je     f01159ad <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115989:	83 ec 0c             	sub    $0xc,%esp
f011598c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011598f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115992:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115997:	68 cb 05 00 00       	push   $0x5cb
f011599c:	68 f2 76 13 f0       	push   $0xf01376f2
f01159a1:	e8 18 aa fe ff       	call   f01003be <_warn>
f01159a6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159a9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01159ad:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159b1:	74 04                	je     f01159b7 <test_calculate_required_frames+0x565>
f01159b3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01159b7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01159bb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159be:	c1 e0 0a             	shl    $0xa,%eax
f01159c1:	83 ec 04             	sub    $0x4,%esp
f01159c4:	50                   	push   %eax
f01159c5:	6a 00                	push   $0x0
f01159c7:	ff 75 d8             	pushl  -0x28(%ebp)
f01159ca:	e8 dc 32 ff ff       	call   f0108cab <calculate_required_frames>
f01159cf:	83 c4 10             	add    $0x10,%esp
f01159d2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01159d5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159d8:	c1 e0 0a             	shl    $0xa,%eax
f01159db:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01159de:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01159e5:	99                   	cltd   
f01159e6:	f7 fb                	idiv   %ebx
f01159e8:	89 c1                	mov    %eax,%ecx
f01159ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159ed:	c1 e0 0a             	shl    $0xa,%eax
f01159f0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01159f3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01159fa:	99                   	cltd   
f01159fb:	f7 fe                	idiv   %esi
f01159fd:	01 c8                	add    %ecx,%eax
f01159ff:	83 e8 05             	sub    $0x5,%eax
f0115a02:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115a05:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115a08:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115a0b:	74 24                	je     f0115a31 <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115a0d:	83 ec 0c             	sub    $0xc,%esp
f0115a10:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115a13:	ff 75 c8             	pushl  -0x38(%ebp)
f0115a16:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115a1b:	68 d6 05 00 00       	push   $0x5d6
f0115a20:	68 f2 76 13 f0       	push   $0xf01376f2
f0115a25:	e8 94 a9 fe ff       	call   f01003be <_warn>
f0115a2a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a2d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115a31:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a35:	74 04                	je     f0115a3b <test_calculate_required_frames+0x5e9>
f0115a37:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115a3b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115a3f:	83 ec 04             	sub    $0x4,%esp
f0115a42:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115a48:	50                   	push   %eax
f0115a49:	68 04 90 13 f0       	push   $0xf0139004
f0115a4e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115a54:	50                   	push   %eax
f0115a55:	e8 e0 9b 01 00       	call   f012f63a <strcconcat>
f0115a5a:	83 c4 10             	add    $0x10,%esp
f0115a5d:	83 ec 0c             	sub    $0xc,%esp
f0115a60:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115a66:	50                   	push   %eax
f0115a67:	e8 57 c1 fe ff       	call   f0101bc3 <execute_command>
f0115a6c:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115a6f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a72:	89 c2                	mov    %eax,%edx
f0115a74:	01 d2                	add    %edx,%edx
f0115a76:	01 d0                	add    %edx,%eax
f0115a78:	83 ec 04             	sub    $0x4,%esp
f0115a7b:	50                   	push   %eax
f0115a7c:	68 00 18 00 00       	push   $0x1800
f0115a81:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a84:	e8 22 32 ff ff       	call   f0108cab <calculate_required_frames>
f0115a89:	83 c4 10             	add    $0x10,%esp
f0115a8c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115a8f:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115a96:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115a99:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115a9c:	74 24                	je     f0115ac2 <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115a9e:	83 ec 0c             	sub    $0xc,%esp
f0115aa1:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115aa4:	ff 75 c8             	pushl  -0x38(%ebp)
f0115aa7:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115aac:	68 e5 05 00 00       	push   $0x5e5
f0115ab1:	68 f2 76 13 f0       	push   $0xf01376f2
f0115ab6:	e8 03 a9 fe ff       	call   f01003be <_warn>
f0115abb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115abe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ac2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ac6:	74 04                	je     f0115acc <test_calculate_required_frames+0x67a>
f0115ac8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115acc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115ad0:	83 ec 04             	sub    $0x4,%esp
f0115ad3:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115ad9:	50                   	push   %eax
f0115ada:	68 c4 80 13 f0       	push   $0xf01380c4
f0115adf:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ae5:	50                   	push   %eax
f0115ae6:	e8 4f 9b 01 00       	call   f012f63a <strcconcat>
f0115aeb:	83 c4 10             	add    $0x10,%esp
f0115aee:	83 ec 0c             	sub    $0xc,%esp
f0115af1:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115af7:	50                   	push   %eax
f0115af8:	e8 c6 c0 fe ff       	call   f0101bc3 <execute_command>
f0115afd:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115b00:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115b03:	89 d0                	mov    %edx,%eax
f0115b05:	c1 e0 02             	shl    $0x2,%eax
f0115b08:	01 d0                	add    %edx,%eax
f0115b0a:	01 c0                	add    %eax,%eax
f0115b0c:	83 ec 04             	sub    $0x4,%esp
f0115b0f:	50                   	push   %eax
f0115b10:	68 00 00 40 00       	push   $0x400000
f0115b15:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b18:	e8 8e 31 ff ff       	call   f0108cab <calculate_required_frames>
f0115b1d:	83 c4 10             	add    $0x10,%esp
f0115b20:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115b23:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0115b2a:	74 26                	je     f0115b52 <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115b2c:	83 ec 0c             	sub    $0xc,%esp
f0115b2f:	68 03 0a 00 00       	push   $0xa03
f0115b34:	ff 75 c8             	pushl  -0x38(%ebp)
f0115b37:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115b3c:	68 f1 05 00 00       	push   $0x5f1
f0115b41:	68 f2 76 13 f0       	push   $0xf01376f2
f0115b46:	e8 73 a8 fe ff       	call   f01003be <_warn>
f0115b4b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b4e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b52:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b56:	74 04                	je     f0115b5c <test_calculate_required_frames+0x70a>
f0115b58:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b5c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115b60:	83 ec 04             	sub    $0x4,%esp
f0115b63:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115b69:	50                   	push   %eax
f0115b6a:	68 ce 80 13 f0       	push   $0xf01380ce
f0115b6f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115b75:	50                   	push   %eax
f0115b76:	e8 bf 9a 01 00       	call   f012f63a <strcconcat>
f0115b7b:	83 c4 10             	add    $0x10,%esp
f0115b7e:	83 ec 0c             	sub    $0xc,%esp
f0115b81:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115b87:	50                   	push   %eax
f0115b88:	e8 36 c0 fe ff       	call   f0101bc3 <execute_command>
f0115b8d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115b90:	83 ec 04             	sub    $0x4,%esp
f0115b93:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115b99:	50                   	push   %eax
f0115b9a:	68 0c 90 13 f0       	push   $0xf013900c
f0115b9f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ba5:	50                   	push   %eax
f0115ba6:	e8 8f 9a 01 00       	call   f012f63a <strcconcat>
f0115bab:	83 c4 10             	add    $0x10,%esp
f0115bae:	83 ec 0c             	sub    $0xc,%esp
f0115bb1:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115bb7:	50                   	push   %eax
f0115bb8:	e8 06 c0 fe ff       	call   f0101bc3 <execute_command>
f0115bbd:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115bc0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115bc3:	01 c0                	add    %eax,%eax
f0115bc5:	83 ec 04             	sub    $0x4,%esp
f0115bc8:	50                   	push   %eax
f0115bc9:	68 00 00 70 00       	push   $0x700000
f0115bce:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bd1:	e8 d5 30 ff ff       	call   f0108cab <calculate_required_frames>
f0115bd6:	83 c4 10             	add    $0x10,%esp
f0115bd9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0115bdc:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115be3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115be6:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115be9:	74 24                	je     f0115c0f <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115beb:	83 ec 0c             	sub    $0xc,%esp
f0115bee:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115bf1:	ff 75 c8             	pushl  -0x38(%ebp)
f0115bf4:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115bf9:	68 01 06 00 00       	push   $0x601
f0115bfe:	68 f2 76 13 f0       	push   $0xf01376f2
f0115c03:	e8 b6 a7 fe ff       	call   f01003be <_warn>
f0115c08:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c0b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115c0f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c13:	74 04                	je     f0115c19 <test_calculate_required_frames+0x7c7>
f0115c15:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115c19:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115c1d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115c20:	83 ec 04             	sub    $0x4,%esp
f0115c23:	50                   	push   %eax
f0115c24:	68 ff ff 3f 00       	push   $0x3fffff
f0115c29:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c2c:	e8 7a 30 ff ff       	call   f0108cab <calculate_required_frames>
f0115c31:	83 c4 10             	add    $0x10,%esp
f0115c34:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115c37:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115c3e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115c41:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115c44:	74 24                	je     f0115c6a <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115c46:	83 ec 0c             	sub    $0xc,%esp
f0115c49:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115c4c:	ff 75 c8             	pushl  -0x38(%ebp)
f0115c4f:	68 6c 8f 13 f0       	push   $0xf0138f6c
f0115c54:	68 0c 06 00 00       	push   $0x60c
f0115c59:	68 f2 76 13 f0       	push   $0xf01376f2
f0115c5e:	e8 5b a7 fe ff       	call   f01003be <_warn>
f0115c63:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c66:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115c6a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c6e:	74 04                	je     f0115c74 <test_calculate_required_frames+0x822>
f0115c70:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115c74:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115c78:	83 ec 0c             	sub    $0xc,%esp
f0115c7b:	68 7f 80 13 f0       	push   $0xf013807f
f0115c80:	e8 ac b1 fe ff       	call   f0100e31 <cprintf>
f0115c85:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0115c88:	83 ec 08             	sub    $0x8,%esp
f0115c8b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115c8e:	68 18 90 13 f0       	push   $0xf0139018
f0115c93:	e8 99 b1 fe ff       	call   f0100e31 <cprintf>
f0115c98:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115c9b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115c9f:	75 10                	jne    f0115cb1 <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115ca1:	83 ec 0c             	sub    $0xc,%esp
f0115ca4:	68 58 90 13 f0       	push   $0xf0139058
f0115ca9:	e8 83 b1 fe ff       	call   f0100e31 <cprintf>
f0115cae:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115cb1:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0115cb6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115cb9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115cbc:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115cbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115cc4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115cc7:	5b                   	pop    %ebx
f0115cc8:	5e                   	pop    %esi
f0115cc9:	5f                   	pop    %edi
f0115cca:	5d                   	pop    %ebp
f0115ccb:	c3                   	ret    

f0115ccc <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115ccc:	55                   	push   %ebp
f0115ccd:	89 e5                	mov    %esp,%ebp
f0115ccf:	57                   	push   %edi
f0115cd0:	56                   	push   %esi
f0115cd1:	53                   	push   %ebx
f0115cd2:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115cd8:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115cdb:	bb f4 7d 13 f0       	mov    $0xf0137df4,%ebx
f0115ce0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115ce5:	89 c7                	mov    %eax,%edi
f0115ce7:	89 de                	mov    %ebx,%esi
f0115ce9:	89 d1                	mov    %edx,%ecx
f0115ceb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115ced:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115cf0:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115cf5:	b0 00                	mov    $0x0,%al
f0115cf7:	89 d7                	mov    %edx,%edi
f0115cf9:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115cfb:	6a 00                	push   $0x0
f0115cfd:	6a 0a                	push   $0xa
f0115cff:	6a 14                	push   $0x14
f0115d01:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115d04:	50                   	push   %eax
f0115d05:	e8 5d 30 ff ff       	call   f0108d67 <env_create>
f0115d0a:	83 c4 10             	add    $0x10,%esp
f0115d0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115d10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115d13:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0115d19:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115d1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115d1f:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0115d25:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115d28:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115d2b:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115d2e:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115d35:	75 70 20 
f0115d38:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115d3f:	00 00 00 
f0115d42:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115d45:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115d4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d4f:	89 d7                	mov    %edx,%edi
f0115d51:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115d53:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115d56:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115d59:	83 ec 08             	sub    $0x8,%esp
f0115d5c:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115d62:	52                   	push   %edx
f0115d63:	50                   	push   %eax
f0115d64:	e8 d9 97 01 00       	call   f012f542 <ltostr>
f0115d69:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115d6c:	83 ec 04             	sub    $0x4,%esp
f0115d6f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115d75:	50                   	push   %eax
f0115d76:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115d7c:	50                   	push   %eax
f0115d7d:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115d83:	50                   	push   %eax
f0115d84:	e8 b1 98 01 00       	call   f012f63a <strcconcat>
f0115d89:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115d8c:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115d93:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115d9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115da1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115da5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115dac:	00 00 00 
	uint32 num_tables = 0;
f0115daf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115db6:	00 00 00 
	ClearUserSpace(proc_directory);
f0115db9:	83 ec 0c             	sub    $0xc,%esp
f0115dbc:	ff 75 d8             	pushl  -0x28(%ebp)
f0115dbf:	e8 d8 11 00 00       	call   f0116f9c <ClearUserSpace>
f0115dc4:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115dc7:	83 ec 0c             	sub    $0xc,%esp
f0115dca:	68 38 8f 13 f0       	push   $0xf0138f38
f0115dcf:	e8 5d b0 fe ff       	call   f0100e31 <cprintf>
f0115dd4:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115dd7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115dda:	c1 e0 03             	shl    $0x3,%eax
f0115ddd:	89 c2                	mov    %eax,%edx
f0115ddf:	83 ec 0c             	sub    $0xc,%esp
f0115de2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115de8:	50                   	push   %eax
f0115de9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115def:	50                   	push   %eax
f0115df0:	52                   	push   %edx
f0115df1:	6a 00                	push   $0x0
f0115df3:	ff 75 d8             	pushl  -0x28(%ebp)
f0115df6:	e8 96 2e ff ff       	call   f0108c91 <calculate_allocated_space>
f0115dfb:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115dfe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e04:	85 c0                	test   %eax,%eax
f0115e06:	74 27                	je     f0115e2f <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e08:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e0e:	83 ec 0c             	sub    $0xc,%esp
f0115e11:	6a 00                	push   $0x0
f0115e13:	50                   	push   %eax
f0115e14:	68 a4 90 13 f0       	push   $0xf01390a4
f0115e19:	68 41 06 00 00       	push   $0x641
f0115e1e:	68 f2 76 13 f0       	push   $0xf01376f2
f0115e23:	e8 96 a5 fe ff       	call   f01003be <_warn>
f0115e28:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e2b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e2f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e35:	85 c0                	test   %eax,%eax
f0115e37:	74 27                	je     f0115e60 <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e39:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e3f:	83 ec 0c             	sub    $0xc,%esp
f0115e42:	6a 00                	push   $0x0
f0115e44:	50                   	push   %eax
f0115e45:	68 04 91 13 f0       	push   $0xf0139104
f0115e4a:	68 46 06 00 00       	push   $0x646
f0115e4f:	68 f2 76 13 f0       	push   $0xf01376f2
f0115e54:	e8 65 a5 fe ff       	call   f01003be <_warn>
f0115e59:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e5c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e60:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e64:	74 04                	je     f0115e6a <test_calculate_allocated_space+0x19e>
f0115e66:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e6a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115e6e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e75:	00 00 00 
		num_pages = 0;
f0115e78:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e7f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115e82:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115e85:	c1 e0 02             	shl    $0x2,%eax
f0115e88:	89 c2                	mov    %eax,%edx
f0115e8a:	83 ec 0c             	sub    $0xc,%esp
f0115e8d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e93:	50                   	push   %eax
f0115e94:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e9a:	50                   	push   %eax
f0115e9b:	52                   	push   %edx
f0115e9c:	6a 00                	push   $0x0
f0115e9e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ea1:	e8 eb 2d ff ff       	call   f0108c91 <calculate_allocated_space>
f0115ea6:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ea9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115eaf:	85 c0                	test   %eax,%eax
f0115eb1:	74 27                	je     f0115eda <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115eb3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115eb9:	83 ec 0c             	sub    $0xc,%esp
f0115ebc:	6a 00                	push   $0x0
f0115ebe:	50                   	push   %eax
f0115ebf:	68 a4 90 13 f0       	push   $0xf01390a4
f0115ec4:	68 52 06 00 00       	push   $0x652
f0115ec9:	68 f2 76 13 f0       	push   $0xf01376f2
f0115ece:	e8 eb a4 fe ff       	call   f01003be <_warn>
f0115ed3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ed6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115eda:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ee0:	85 c0                	test   %eax,%eax
f0115ee2:	74 27                	je     f0115f0b <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ee4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115eea:	83 ec 0c             	sub    $0xc,%esp
f0115eed:	6a 00                	push   $0x0
f0115eef:	50                   	push   %eax
f0115ef0:	68 04 91 13 f0       	push   $0xf0139104
f0115ef5:	68 57 06 00 00       	push   $0x657
f0115efa:	68 f2 76 13 f0       	push   $0xf01376f2
f0115eff:	e8 ba a4 fe ff       	call   f01003be <_warn>
f0115f04:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f07:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f0b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f0f:	74 04                	je     f0115f15 <test_calculate_allocated_space+0x249>
f0115f11:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f15:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115f19:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f20:	00 00 00 
		num_pages = 0;
f0115f23:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f2a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115f2d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115f30:	c1 e0 0a             	shl    $0xa,%eax
f0115f33:	89 c2                	mov    %eax,%edx
f0115f35:	83 ec 0c             	sub    $0xc,%esp
f0115f38:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f3e:	50                   	push   %eax
f0115f3f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f45:	50                   	push   %eax
f0115f46:	52                   	push   %edx
f0115f47:	6a 00                	push   $0x0
f0115f49:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f4c:	e8 40 2d ff ff       	call   f0108c91 <calculate_allocated_space>
f0115f51:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f54:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f5a:	85 c0                	test   %eax,%eax
f0115f5c:	74 27                	je     f0115f85 <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115f5e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f64:	83 ec 0c             	sub    $0xc,%esp
f0115f67:	6a 00                	push   $0x0
f0115f69:	50                   	push   %eax
f0115f6a:	68 a4 90 13 f0       	push   $0xf01390a4
f0115f6f:	68 63 06 00 00       	push   $0x663
f0115f74:	68 f2 76 13 f0       	push   $0xf01376f2
f0115f79:	e8 40 a4 fe ff       	call   f01003be <_warn>
f0115f7e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115f85:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f8b:	85 c0                	test   %eax,%eax
f0115f8d:	74 27                	je     f0115fb6 <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115f8f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f95:	83 ec 0c             	sub    $0xc,%esp
f0115f98:	6a 00                	push   $0x0
f0115f9a:	50                   	push   %eax
f0115f9b:	68 04 91 13 f0       	push   $0xf0139104
f0115fa0:	68 68 06 00 00       	push   $0x668
f0115fa5:	68 f2 76 13 f0       	push   $0xf01376f2
f0115faa:	e8 0f a4 fe ff       	call   f01003be <_warn>
f0115faf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fb2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115fb6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115fba:	74 04                	je     f0115fc0 <test_calculate_allocated_space+0x2f4>
f0115fbc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115fc0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115fc4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115fcb:	00 00 00 
		num_pages = 0;
f0115fce:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115fd5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115fd8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115fdb:	89 d0                	mov    %edx,%eax
f0115fdd:	01 c0                	add    %eax,%eax
f0115fdf:	01 d0                	add    %edx,%eax
f0115fe1:	01 c0                	add    %eax,%eax
f0115fe3:	05 00 10 00 00       	add    $0x1000,%eax
f0115fe8:	89 c2                	mov    %eax,%edx
f0115fea:	83 ec 0c             	sub    $0xc,%esp
f0115fed:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ff3:	50                   	push   %eax
f0115ff4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ffa:	50                   	push   %eax
f0115ffb:	52                   	push   %edx
f0115ffc:	68 00 10 00 00       	push   $0x1000
f0116001:	ff 75 d8             	pushl  -0x28(%ebp)
f0116004:	e8 88 2c ff ff       	call   f0108c91 <calculate_allocated_space>
f0116009:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011600c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116012:	85 c0                	test   %eax,%eax
f0116014:	74 27                	je     f011603d <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0116016:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011601c:	83 ec 0c             	sub    $0xc,%esp
f011601f:	6a 00                	push   $0x0
f0116021:	50                   	push   %eax
f0116022:	68 a4 90 13 f0       	push   $0xf01390a4
f0116027:	68 75 06 00 00       	push   $0x675
f011602c:	68 f2 76 13 f0       	push   $0xf01376f2
f0116031:	e8 88 a3 fe ff       	call   f01003be <_warn>
f0116036:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116039:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011603d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116043:	85 c0                	test   %eax,%eax
f0116045:	74 27                	je     f011606e <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0116047:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011604d:	83 ec 0c             	sub    $0xc,%esp
f0116050:	6a 00                	push   $0x0
f0116052:	50                   	push   %eax
f0116053:	68 04 91 13 f0       	push   $0xf0139104
f0116058:	68 7a 06 00 00       	push   $0x67a
f011605d:	68 f2 76 13 f0       	push   $0xf01376f2
f0116062:	e8 57 a3 fe ff       	call   f01003be <_warn>
f0116067:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011606a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011606e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116072:	74 04                	je     f0116078 <test_calculate_allocated_space+0x3ac>
f0116074:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116078:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f011607c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116083:	00 00 00 
		num_pages = 0;
f0116086:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011608d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0116090:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116093:	89 c2                	mov    %eax,%edx
f0116095:	01 d2                	add    %edx,%edx
f0116097:	01 d0                	add    %edx,%eax
f0116099:	05 00 18 00 00       	add    $0x1800,%eax
f011609e:	89 c2                	mov    %eax,%edx
f01160a0:	83 ec 0c             	sub    $0xc,%esp
f01160a3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01160a9:	50                   	push   %eax
f01160aa:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01160b0:	50                   	push   %eax
f01160b1:	52                   	push   %edx
f01160b2:	68 00 18 00 00       	push   $0x1800
f01160b7:	ff 75 d8             	pushl  -0x28(%ebp)
f01160ba:	e8 d2 2b ff ff       	call   f0108c91 <calculate_allocated_space>
f01160bf:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01160c2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160c8:	85 c0                	test   %eax,%eax
f01160ca:	74 27                	je     f01160f3 <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01160cc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160d2:	83 ec 0c             	sub    $0xc,%esp
f01160d5:	6a 00                	push   $0x0
f01160d7:	50                   	push   %eax
f01160d8:	68 a4 90 13 f0       	push   $0xf01390a4
f01160dd:	68 86 06 00 00       	push   $0x686
f01160e2:	68 f2 76 13 f0       	push   $0xf01376f2
f01160e7:	e8 d2 a2 fe ff       	call   f01003be <_warn>
f01160ec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01160f3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160f9:	85 c0                	test   %eax,%eax
f01160fb:	74 27                	je     f0116124 <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01160fd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116103:	83 ec 0c             	sub    $0xc,%esp
f0116106:	6a 00                	push   $0x0
f0116108:	50                   	push   %eax
f0116109:	68 04 91 13 f0       	push   $0xf0139104
f011610e:	68 8b 06 00 00       	push   $0x68b
f0116113:	68 f2 76 13 f0       	push   $0xf01376f2
f0116118:	e8 a1 a2 fe ff       	call   f01003be <_warn>
f011611d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116120:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116124:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116128:	74 04                	je     f011612e <test_calculate_allocated_space+0x462>
f011612a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011612e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0116132:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116139:	00 00 00 
		num_pages = 0;
f011613c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116143:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116146:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116149:	89 d0                	mov    %edx,%eax
f011614b:	c1 e0 02             	shl    $0x2,%eax
f011614e:	01 d0                	add    %edx,%eax
f0116150:	01 c0                	add    %eax,%eax
f0116152:	05 00 00 40 00       	add    $0x400000,%eax
f0116157:	89 c2                	mov    %eax,%edx
f0116159:	83 ec 0c             	sub    $0xc,%esp
f011615c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116162:	50                   	push   %eax
f0116163:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116169:	50                   	push   %eax
f011616a:	52                   	push   %edx
f011616b:	68 00 00 40 00       	push   $0x400000
f0116170:	ff 75 d8             	pushl  -0x28(%ebp)
f0116173:	e8 19 2b ff ff       	call   f0108c91 <calculate_allocated_space>
f0116178:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011617b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116181:	85 c0                	test   %eax,%eax
f0116183:	74 27                	je     f01161ac <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0116185:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011618b:	83 ec 0c             	sub    $0xc,%esp
f011618e:	6a 00                	push   $0x0
f0116190:	50                   	push   %eax
f0116191:	68 a4 90 13 f0       	push   $0xf01390a4
f0116196:	68 97 06 00 00       	push   $0x697
f011619b:	68 f2 76 13 f0       	push   $0xf01376f2
f01161a0:	e8 19 a2 fe ff       	call   f01003be <_warn>
f01161a5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161a8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01161ac:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161b2:	85 c0                	test   %eax,%eax
f01161b4:	74 27                	je     f01161dd <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01161b6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161bc:	83 ec 0c             	sub    $0xc,%esp
f01161bf:	6a 00                	push   $0x0
f01161c1:	50                   	push   %eax
f01161c2:	68 04 91 13 f0       	push   $0xf0139104
f01161c7:	68 9c 06 00 00       	push   $0x69c
f01161cc:	68 f2 76 13 f0       	push   $0xf01376f2
f01161d1:	e8 e8 a1 fe ff       	call   f01003be <_warn>
f01161d6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161d9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01161dd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161e1:	74 04                	je     f01161e7 <test_calculate_allocated_space+0x51b>
f01161e3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01161e7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f01161eb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01161f2:	00 00 00 
		num_pages = 0;
f01161f5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01161fc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01161ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116202:	05 00 00 38 00       	add    $0x380000,%eax
f0116207:	01 c0                	add    %eax,%eax
f0116209:	89 c2                	mov    %eax,%edx
f011620b:	83 ec 0c             	sub    $0xc,%esp
f011620e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116214:	50                   	push   %eax
f0116215:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011621b:	50                   	push   %eax
f011621c:	52                   	push   %edx
f011621d:	68 00 00 70 00       	push   $0x700000
f0116222:	ff 75 d8             	pushl  -0x28(%ebp)
f0116225:	e8 67 2a ff ff       	call   f0108c91 <calculate_allocated_space>
f011622a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011622d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116233:	85 c0                	test   %eax,%eax
f0116235:	74 27                	je     f011625e <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0116237:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011623d:	83 ec 0c             	sub    $0xc,%esp
f0116240:	6a 00                	push   $0x0
f0116242:	50                   	push   %eax
f0116243:	68 a4 90 13 f0       	push   $0xf01390a4
f0116248:	68 a9 06 00 00       	push   $0x6a9
f011624d:	68 f2 76 13 f0       	push   $0xf01376f2
f0116252:	e8 67 a1 fe ff       	call   f01003be <_warn>
f0116257:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011625a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011625e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116264:	85 c0                	test   %eax,%eax
f0116266:	74 27                	je     f011628f <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0116268:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011626e:	83 ec 0c             	sub    $0xc,%esp
f0116271:	6a 00                	push   $0x0
f0116273:	50                   	push   %eax
f0116274:	68 04 91 13 f0       	push   $0xf0139104
f0116279:	68 ae 06 00 00       	push   $0x6ae
f011627e:	68 f2 76 13 f0       	push   $0xf01376f2
f0116283:	e8 36 a1 fe ff       	call   f01003be <_warn>
f0116288:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011628b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011628f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116293:	74 04                	je     f0116299 <test_calculate_allocated_space+0x5cd>
f0116295:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116299:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f011629d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01162a4:	00 00 00 
		num_pages = 0;
f01162a7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01162ae:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01162b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01162b4:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01162b9:	89 c2                	mov    %eax,%edx
f01162bb:	83 ec 0c             	sub    $0xc,%esp
f01162be:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01162c4:	50                   	push   %eax
f01162c5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01162cb:	50                   	push   %eax
f01162cc:	52                   	push   %edx
f01162cd:	68 ff ff 3f 00       	push   $0x3fffff
f01162d2:	ff 75 d8             	pushl  -0x28(%ebp)
f01162d5:	e8 b7 29 ff ff       	call   f0108c91 <calculate_allocated_space>
f01162da:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01162dd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162e3:	85 c0                	test   %eax,%eax
f01162e5:	74 27                	je     f011630e <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01162e7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162ed:	83 ec 0c             	sub    $0xc,%esp
f01162f0:	6a 00                	push   $0x0
f01162f2:	50                   	push   %eax
f01162f3:	68 a4 90 13 f0       	push   $0xf01390a4
f01162f8:	68 ba 06 00 00       	push   $0x6ba
f01162fd:	68 f2 76 13 f0       	push   $0xf01376f2
f0116302:	e8 b7 a0 fe ff       	call   f01003be <_warn>
f0116307:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011630a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011630e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116314:	85 c0                	test   %eax,%eax
f0116316:	74 27                	je     f011633f <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0116318:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011631e:	83 ec 0c             	sub    $0xc,%esp
f0116321:	6a 00                	push   $0x0
f0116323:	50                   	push   %eax
f0116324:	68 04 91 13 f0       	push   $0xf0139104
f0116329:	68 bf 06 00 00       	push   $0x6bf
f011632e:	68 f2 76 13 f0       	push   $0xf01376f2
f0116333:	e8 86 a0 fe ff       	call   f01003be <_warn>
f0116338:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011633b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011633f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116343:	74 04                	je     f0116349 <test_calculate_allocated_space+0x67d>
f0116345:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116349:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011634d:	83 ec 0c             	sub    $0xc,%esp
f0116350:	68 a5 8a 13 f0       	push   $0xf0138aa5
f0116355:	e8 d7 aa fe ff       	call   f0100e31 <cprintf>
f011635a:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011635d:	83 ec 0c             	sub    $0xc,%esp
f0116360:	68 c4 8f 13 f0       	push   $0xf0138fc4
f0116365:	e8 c7 aa fe ff       	call   f0100e31 <cprintf>
f011636a:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011636d:	83 ec 04             	sub    $0x4,%esp
f0116370:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116376:	50                   	push   %eax
f0116377:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011637c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116382:	50                   	push   %eax
f0116383:	e8 b2 92 01 00       	call   f012f63a <strcconcat>
f0116388:	83 c4 10             	add    $0x10,%esp
f011638b:	83 ec 0c             	sub    $0xc,%esp
f011638e:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116394:	50                   	push   %eax
f0116395:	e8 29 b8 fe ff       	call   f0101bc3 <execute_command>
f011639a:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f011639d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01163a4:	00 00 00 
		num_pages = 0;
f01163a7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01163ae:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01163b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01163b4:	c1 e0 03             	shl    $0x3,%eax
f01163b7:	89 c2                	mov    %eax,%edx
f01163b9:	83 ec 0c             	sub    $0xc,%esp
f01163bc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01163c2:	50                   	push   %eax
f01163c3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01163c9:	50                   	push   %eax
f01163ca:	52                   	push   %edx
f01163cb:	6a 00                	push   $0x0
f01163cd:	ff 75 d8             	pushl  -0x28(%ebp)
f01163d0:	e8 bc 28 ff ff       	call   f0108c91 <calculate_allocated_space>
f01163d5:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01163d8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f01163df:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01163e6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163ec:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01163ef:	74 28                	je     f0116419 <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01163f1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163f7:	83 ec 0c             	sub    $0xc,%esp
f01163fa:	ff 75 c8             	pushl  -0x38(%ebp)
f01163fd:	50                   	push   %eax
f01163fe:	68 a4 90 13 f0       	push   $0xf01390a4
f0116403:	68 d6 06 00 00       	push   $0x6d6
f0116408:	68 f2 76 13 f0       	push   $0xf01376f2
f011640d:	e8 ac 9f fe ff       	call   f01003be <_warn>
f0116412:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116415:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116419:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011641f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116422:	74 28                	je     f011644c <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116424:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011642a:	83 ec 0c             	sub    $0xc,%esp
f011642d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116430:	50                   	push   %eax
f0116431:	68 04 91 13 f0       	push   $0xf0139104
f0116436:	68 db 06 00 00       	push   $0x6db
f011643b:	68 f2 76 13 f0       	push   $0xf01376f2
f0116440:	e8 79 9f fe ff       	call   f01003be <_warn>
f0116445:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116448:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011644c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116450:	74 04                	je     f0116456 <test_calculate_allocated_space+0x78a>
f0116452:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116456:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011645a:	83 ec 04             	sub    $0x4,%esp
f011645d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116463:	50                   	push   %eax
f0116464:	68 6b 7e 13 f0       	push   $0xf0137e6b
f0116469:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011646f:	50                   	push   %eax
f0116470:	e8 c5 91 01 00       	call   f012f63a <strcconcat>
f0116475:	83 c4 10             	add    $0x10,%esp
f0116478:	83 ec 0c             	sub    $0xc,%esp
f011647b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116481:	50                   	push   %eax
f0116482:	e8 3c b7 fe ff       	call   f0101bc3 <execute_command>
f0116487:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011648a:	83 ec 04             	sub    $0x4,%esp
f011648d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116493:	50                   	push   %eax
f0116494:	68 f8 8f 13 f0       	push   $0xf0138ff8
f0116499:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011649f:	50                   	push   %eax
f01164a0:	e8 95 91 01 00       	call   f012f63a <strcconcat>
f01164a5:	83 c4 10             	add    $0x10,%esp
f01164a8:	83 ec 0c             	sub    $0xc,%esp
f01164ab:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164b1:	50                   	push   %eax
f01164b2:	e8 0c b7 fe ff       	call   f0101bc3 <execute_command>
f01164b7:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f01164ba:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01164c1:	00 00 00 
		num_pages = 0;
f01164c4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01164cb:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f01164ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01164d1:	c1 e0 03             	shl    $0x3,%eax
f01164d4:	89 c2                	mov    %eax,%edx
f01164d6:	83 ec 0c             	sub    $0xc,%esp
f01164d9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01164df:	50                   	push   %eax
f01164e0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01164e6:	50                   	push   %eax
f01164e7:	52                   	push   %edx
f01164e8:	6a 00                	push   $0x0
f01164ea:	ff 75 d8             	pushl  -0x28(%ebp)
f01164ed:	e8 9f 27 ff ff       	call   f0108c91 <calculate_allocated_space>
f01164f2:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01164f5:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f01164fc:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116503:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116509:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011650c:	74 28                	je     f0116536 <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011650e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116514:	83 ec 0c             	sub    $0xc,%esp
f0116517:	ff 75 c8             	pushl  -0x38(%ebp)
f011651a:	50                   	push   %eax
f011651b:	68 a4 90 13 f0       	push   $0xf01390a4
f0116520:	68 ec 06 00 00       	push   $0x6ec
f0116525:	68 f2 76 13 f0       	push   $0xf01376f2
f011652a:	e8 8f 9e fe ff       	call   f01003be <_warn>
f011652f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116532:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116536:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011653c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011653f:	74 28                	je     f0116569 <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116541:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116547:	83 ec 0c             	sub    $0xc,%esp
f011654a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011654d:	50                   	push   %eax
f011654e:	68 04 91 13 f0       	push   $0xf0139104
f0116553:	68 f1 06 00 00       	push   $0x6f1
f0116558:	68 f2 76 13 f0       	push   $0xf01376f2
f011655d:	e8 5c 9e fe ff       	call   f01003be <_warn>
f0116562:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116565:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116569:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011656d:	74 04                	je     f0116573 <test_calculate_allocated_space+0x8a7>
f011656f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116573:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0116577:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011657e:	00 00 00 
		num_pages = 0;
f0116581:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116588:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011658b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011658e:	c1 e0 0a             	shl    $0xa,%eax
f0116591:	89 c2                	mov    %eax,%edx
f0116593:	83 ec 0c             	sub    $0xc,%esp
f0116596:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011659c:	50                   	push   %eax
f011659d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01165a3:	50                   	push   %eax
f01165a4:	52                   	push   %edx
f01165a5:	6a 00                	push   $0x0
f01165a7:	ff 75 d8             	pushl  -0x28(%ebp)
f01165aa:	e8 e2 26 ff ff       	call   f0108c91 <calculate_allocated_space>
f01165af:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f01165b2:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f01165b9:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01165c0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165c6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01165c9:	74 28                	je     f01165f3 <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01165cb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165d1:	83 ec 0c             	sub    $0xc,%esp
f01165d4:	ff 75 c8             	pushl  -0x38(%ebp)
f01165d7:	50                   	push   %eax
f01165d8:	68 a4 90 13 f0       	push   $0xf01390a4
f01165dd:	68 ff 06 00 00       	push   $0x6ff
f01165e2:	68 f2 76 13 f0       	push   $0xf01376f2
f01165e7:	e8 d2 9d fe ff       	call   f01003be <_warn>
f01165ec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01165ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01165f3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01165f9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01165fc:	74 28                	je     f0116626 <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01165fe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116604:	83 ec 0c             	sub    $0xc,%esp
f0116607:	ff 75 c4             	pushl  -0x3c(%ebp)
f011660a:	50                   	push   %eax
f011660b:	68 04 91 13 f0       	push   $0xf0139104
f0116610:	68 04 07 00 00       	push   $0x704
f0116615:	68 f2 76 13 f0       	push   $0xf01376f2
f011661a:	e8 9f 9d fe ff       	call   f01003be <_warn>
f011661f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116622:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116626:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011662a:	74 04                	je     f0116630 <test_calculate_allocated_space+0x964>
f011662c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116630:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0116634:	83 ec 04             	sub    $0x4,%esp
f0116637:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011663d:	50                   	push   %eax
f011663e:	68 04 90 13 f0       	push   $0xf0139004
f0116643:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116649:	50                   	push   %eax
f011664a:	e8 eb 8f 01 00       	call   f012f63a <strcconcat>
f011664f:	83 c4 10             	add    $0x10,%esp
f0116652:	83 ec 0c             	sub    $0xc,%esp
f0116655:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011665b:	50                   	push   %eax
f011665c:	e8 62 b5 fe ff       	call   f0101bc3 <execute_command>
f0116661:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0116664:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011666b:	00 00 00 
		num_pages = 0;
f011666e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116675:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0116678:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011667b:	89 c2                	mov    %eax,%edx
f011667d:	01 d2                	add    %edx,%edx
f011667f:	01 d0                	add    %edx,%eax
f0116681:	05 00 18 00 00       	add    $0x1800,%eax
f0116686:	89 c2                	mov    %eax,%edx
f0116688:	83 ec 0c             	sub    $0xc,%esp
f011668b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116691:	50                   	push   %eax
f0116692:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116698:	50                   	push   %eax
f0116699:	52                   	push   %edx
f011669a:	68 00 18 00 00       	push   $0x1800
f011669f:	ff 75 d8             	pushl  -0x28(%ebp)
f01166a2:	e8 ea 25 ff ff       	call   f0108c91 <calculate_allocated_space>
f01166a7:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01166aa:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01166b1:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01166b8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01166be:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01166c1:	74 28                	je     f01166eb <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01166c3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01166c9:	83 ec 0c             	sub    $0xc,%esp
f01166cc:	ff 75 c8             	pushl  -0x38(%ebp)
f01166cf:	50                   	push   %eax
f01166d0:	68 a4 90 13 f0       	push   $0xf01390a4
f01166d5:	68 15 07 00 00       	push   $0x715
f01166da:	68 f2 76 13 f0       	push   $0xf01376f2
f01166df:	e8 da 9c fe ff       	call   f01003be <_warn>
f01166e4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01166e7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01166eb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166f1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01166f4:	74 28                	je     f011671e <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01166f6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166fc:	83 ec 0c             	sub    $0xc,%esp
f01166ff:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116702:	50                   	push   %eax
f0116703:	68 04 91 13 f0       	push   $0xf0139104
f0116708:	68 1a 07 00 00       	push   $0x71a
f011670d:	68 f2 76 13 f0       	push   $0xf01376f2
f0116712:	e8 a7 9c fe ff       	call   f01003be <_warn>
f0116717:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011671a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011671e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116722:	74 04                	je     f0116728 <test_calculate_allocated_space+0xa5c>
f0116724:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116728:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011672c:	83 ec 04             	sub    $0x4,%esp
f011672f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116735:	50                   	push   %eax
f0116736:	68 c4 80 13 f0       	push   $0xf01380c4
f011673b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116741:	50                   	push   %eax
f0116742:	e8 f3 8e 01 00       	call   f012f63a <strcconcat>
f0116747:	83 c4 10             	add    $0x10,%esp
f011674a:	83 ec 0c             	sub    $0xc,%esp
f011674d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116753:	50                   	push   %eax
f0116754:	e8 6a b4 fe ff       	call   f0101bc3 <execute_command>
f0116759:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f011675c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116763:	00 00 00 
		num_pages = 0;
f0116766:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011676d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116770:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116773:	89 d0                	mov    %edx,%eax
f0116775:	c1 e0 02             	shl    $0x2,%eax
f0116778:	01 d0                	add    %edx,%eax
f011677a:	01 c0                	add    %eax,%eax
f011677c:	05 00 00 40 00       	add    $0x400000,%eax
f0116781:	89 c2                	mov    %eax,%edx
f0116783:	83 ec 0c             	sub    $0xc,%esp
f0116786:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011678c:	50                   	push   %eax
f011678d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116793:	50                   	push   %eax
f0116794:	52                   	push   %edx
f0116795:	68 00 00 40 00       	push   $0x400000
f011679a:	ff 75 d8             	pushl  -0x28(%ebp)
f011679d:	e8 ef 24 ff ff       	call   f0108c91 <calculate_allocated_space>
f01167a2:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01167a5:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01167ac:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01167b3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01167b9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01167bc:	74 28                	je     f01167e6 <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01167be:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01167c4:	83 ec 0c             	sub    $0xc,%esp
f01167c7:	ff 75 c8             	pushl  -0x38(%ebp)
f01167ca:	50                   	push   %eax
f01167cb:	68 a4 90 13 f0       	push   $0xf01390a4
f01167d0:	68 2a 07 00 00       	push   $0x72a
f01167d5:	68 f2 76 13 f0       	push   $0xf01376f2
f01167da:	e8 df 9b fe ff       	call   f01003be <_warn>
f01167df:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01167e2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01167e6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01167ec:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01167ef:	74 28                	je     f0116819 <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01167f1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01167f7:	83 ec 0c             	sub    $0xc,%esp
f01167fa:	ff 75 c4             	pushl  -0x3c(%ebp)
f01167fd:	50                   	push   %eax
f01167fe:	68 04 91 13 f0       	push   $0xf0139104
f0116803:	68 2f 07 00 00       	push   $0x72f
f0116808:	68 f2 76 13 f0       	push   $0xf01376f2
f011680d:	e8 ac 9b fe ff       	call   f01003be <_warn>
f0116812:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116815:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116819:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011681d:	74 04                	je     f0116823 <test_calculate_allocated_space+0xb57>
f011681f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116823:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0116827:	83 ec 04             	sub    $0x4,%esp
f011682a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116830:	50                   	push   %eax
f0116831:	68 ce 80 13 f0       	push   $0xf01380ce
f0116836:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011683c:	50                   	push   %eax
f011683d:	e8 f8 8d 01 00       	call   f012f63a <strcconcat>
f0116842:	83 c4 10             	add    $0x10,%esp
f0116845:	83 ec 0c             	sub    $0xc,%esp
f0116848:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011684e:	50                   	push   %eax
f011684f:	e8 6f b3 fe ff       	call   f0101bc3 <execute_command>
f0116854:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0116857:	83 ec 04             	sub    $0x4,%esp
f011685a:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116860:	50                   	push   %eax
f0116861:	68 0c 90 13 f0       	push   $0xf013900c
f0116866:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011686c:	50                   	push   %eax
f011686d:	e8 c8 8d 01 00       	call   f012f63a <strcconcat>
f0116872:	83 c4 10             	add    $0x10,%esp
f0116875:	83 ec 0c             	sub    $0xc,%esp
f0116878:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011687e:	50                   	push   %eax
f011687f:	e8 3f b3 fe ff       	call   f0101bc3 <execute_command>
f0116884:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0116887:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011688e:	00 00 00 
		num_pages = 0;
f0116891:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116898:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011689b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011689e:	05 00 00 38 00       	add    $0x380000,%eax
f01168a3:	01 c0                	add    %eax,%eax
f01168a5:	89 c2                	mov    %eax,%edx
f01168a7:	83 ec 0c             	sub    $0xc,%esp
f01168aa:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01168b0:	50                   	push   %eax
f01168b1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01168b7:	50                   	push   %eax
f01168b8:	52                   	push   %edx
f01168b9:	68 00 00 70 00       	push   $0x700000
f01168be:	ff 75 d8             	pushl  -0x28(%ebp)
f01168c1:	e8 cb 23 ff ff       	call   f0108c91 <calculate_allocated_space>
f01168c6:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01168c9:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01168d0:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01168d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01168dd:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01168e0:	74 28                	je     f011690a <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01168e2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01168e8:	83 ec 0c             	sub    $0xc,%esp
f01168eb:	ff 75 c8             	pushl  -0x38(%ebp)
f01168ee:	50                   	push   %eax
f01168ef:	68 a4 90 13 f0       	push   $0xf01390a4
f01168f4:	68 41 07 00 00       	push   $0x741
f01168f9:	68 f2 76 13 f0       	push   $0xf01376f2
f01168fe:	e8 bb 9a fe ff       	call   f01003be <_warn>
f0116903:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116906:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011690a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116910:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116913:	74 28                	je     f011693d <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116915:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011691b:	83 ec 0c             	sub    $0xc,%esp
f011691e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116921:	50                   	push   %eax
f0116922:	68 04 91 13 f0       	push   $0xf0139104
f0116927:	68 46 07 00 00       	push   $0x746
f011692c:	68 f2 76 13 f0       	push   $0xf01376f2
f0116931:	e8 88 9a fe ff       	call   f01003be <_warn>
f0116936:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116939:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011693d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116941:	74 04                	je     f0116947 <test_calculate_allocated_space+0xc7b>
f0116943:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116947:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f011694b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116952:	00 00 00 
		num_pages = 0;
f0116955:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011695c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f011695f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116962:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0116967:	89 c2                	mov    %eax,%edx
f0116969:	83 ec 0c             	sub    $0xc,%esp
f011696c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116972:	50                   	push   %eax
f0116973:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116979:	50                   	push   %eax
f011697a:	52                   	push   %edx
f011697b:	68 ff ff 3f 00       	push   $0x3fffff
f0116980:	ff 75 d8             	pushl  -0x28(%ebp)
f0116983:	e8 09 23 ff ff       	call   f0108c91 <calculate_allocated_space>
f0116988:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011698b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116992:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116999:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011699f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01169a2:	74 28                	je     f01169cc <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01169a4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01169aa:	83 ec 0c             	sub    $0xc,%esp
f01169ad:	ff 75 c8             	pushl  -0x38(%ebp)
f01169b0:	50                   	push   %eax
f01169b1:	68 a4 90 13 f0       	push   $0xf01390a4
f01169b6:	68 54 07 00 00       	push   $0x754
f01169bb:	68 f2 76 13 f0       	push   $0xf01376f2
f01169c0:	e8 f9 99 fe ff       	call   f01003be <_warn>
f01169c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01169c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01169cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01169d2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01169d5:	74 28                	je     f01169ff <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01169d7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01169dd:	83 ec 0c             	sub    $0xc,%esp
f01169e0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01169e3:	50                   	push   %eax
f01169e4:	68 04 91 13 f0       	push   $0xf0139104
f01169e9:	68 59 07 00 00       	push   $0x759
f01169ee:	68 f2 76 13 f0       	push   $0xf01376f2
f01169f3:	e8 c6 99 fe ff       	call   f01003be <_warn>
f01169f8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01169fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01169ff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116a03:	74 04                	je     f0116a09 <test_calculate_allocated_space+0xd3d>
f0116a05:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116a09:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116a0d:	83 ec 0c             	sub    $0xc,%esp
f0116a10:	68 7f 80 13 f0       	push   $0xf013807f
f0116a15:	e8 17 a4 fe ff       	call   f0100e31 <cprintf>
f0116a1a:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116a1d:	83 ec 08             	sub    $0x8,%esp
f0116a20:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116a23:	68 60 91 13 f0       	push   $0xf0139160
f0116a28:	e8 04 a4 fe ff       	call   f0100e31 <cprintf>
f0116a2d:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116a30:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116a34:	75 10                	jne    f0116a46 <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0116a36:	83 ec 0c             	sub    $0xc,%esp
f0116a39:	68 a0 91 13 f0       	push   $0xf01391a0
f0116a3e:	e8 ee a3 fe ff       	call   f0100e31 <cprintf>
f0116a43:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116a46:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0116a4b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116a4e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116a51:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116a54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116a59:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116a5c:	5b                   	pop    %ebx
f0116a5d:	5e                   	pop    %esi
f0116a5e:	5f                   	pop    %edi
f0116a5f:	5d                   	pop    %ebp
f0116a60:	c3                   	ret    

f0116a61 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116a61:	55                   	push   %ebp
f0116a62:	89 e5                	mov    %esp,%ebp
f0116a64:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116a67:	8b 45 10             	mov    0x10(%ebp),%eax
f0116a6a:	ba 01 00 00 00       	mov    $0x1,%edx
f0116a6f:	88 c1                	mov    %al,%cl
f0116a71:	d3 e2                	shl    %cl,%edx
f0116a73:	89 d0                	mov    %edx,%eax
f0116a75:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a7b:	c1 e8 16             	shr    $0x16,%eax
f0116a7e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a88:	01 d0                	add    %edx,%eax
f0116a8a:	8b 00                	mov    (%eax),%eax
f0116a8c:	83 e0 01             	and    $0x1,%eax
f0116a8f:	85 c0                	test   %eax,%eax
f0116a91:	75 07                	jne    f0116a9a <CB+0x39>
f0116a93:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a98:	eb 76                	jmp    f0116b10 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116a9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a9d:	c1 e8 16             	shr    $0x16,%eax
f0116aa0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0116aaa:	01 d0                	add    %edx,%eax
f0116aac:	8b 00                	mov    (%eax),%eax
f0116aae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116ab3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116ab6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ab9:	c1 e8 0c             	shr    $0xc,%eax
f0116abc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116abf:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116ac4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116ac7:	72 17                	jb     f0116ae0 <CB+0x7f>
f0116ac9:	ff 75 f0             	pushl  -0x10(%ebp)
f0116acc:	68 ec 91 13 f0       	push   $0xf01391ec
f0116ad1:	68 74 07 00 00       	push   $0x774
f0116ad6:	68 f2 76 13 f0       	push   $0xf01376f2
f0116adb:	e8 d0 96 fe ff       	call   f01001b0 <_panic>
f0116ae0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ae3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0116aeb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116aee:	c1 e8 0c             	shr    $0xc,%eax
f0116af1:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116af6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116afd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116b00:	01 d0                	add    %edx,%eax
f0116b02:	8b 00                	mov    (%eax),%eax
f0116b04:	23 45 f4             	and    -0xc(%ebp),%eax
f0116b07:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116b0a:	0f 94 c0             	sete   %al
f0116b0d:	0f b6 c0             	movzbl %al,%eax
}
f0116b10:	c9                   	leave  
f0116b11:	c3                   	ret    

f0116b12 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116b12:	55                   	push   %ebp
f0116b13:	89 e5                	mov    %esp,%ebp
f0116b15:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116b18:	8b 45 10             	mov    0x10(%ebp),%eax
f0116b1b:	ba 01 00 00 00       	mov    $0x1,%edx
f0116b20:	88 c1                	mov    %al,%cl
f0116b22:	d3 e2                	shl    %cl,%edx
f0116b24:	89 d0                	mov    %edx,%eax
f0116b26:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116b29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b2c:	c1 e8 16             	shr    $0x16,%eax
f0116b2f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b36:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b39:	01 d0                	add    %edx,%eax
f0116b3b:	8b 00                	mov    (%eax),%eax
f0116b3d:	83 e0 01             	and    $0x1,%eax
f0116b40:	85 c0                	test   %eax,%eax
f0116b42:	75 0a                	jne    f0116b4e <SB+0x3c>
f0116b44:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b49:	e9 cd 00 00 00       	jmp    f0116c1b <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116b4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b51:	c1 e8 16             	shr    $0x16,%eax
f0116b54:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b5e:	01 d0                	add    %edx,%eax
f0116b60:	8b 00                	mov    (%eax),%eax
f0116b62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116b67:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116b6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116b6d:	c1 e8 0c             	shr    $0xc,%eax
f0116b70:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116b73:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116b78:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116b7b:	72 17                	jb     f0116b94 <SB+0x82>
f0116b7d:	ff 75 f0             	pushl  -0x10(%ebp)
f0116b80:	68 ec 91 13 f0       	push   $0xf01391ec
f0116b85:	68 7c 07 00 00       	push   $0x77c
f0116b8a:	68 f2 76 13 f0       	push   $0xf01376f2
f0116b8f:	e8 1c 96 fe ff       	call   f01001b0 <_panic>
f0116b94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116b97:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116b9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0116b9f:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0116ba3:	74 3c                	je     f0116be1 <SB+0xcf>
f0116ba5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ba8:	c1 e8 0c             	shr    $0xc,%eax
f0116bab:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116bb0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116bba:	01 d0                	add    %edx,%eax
f0116bbc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116bbf:	c1 ea 0c             	shr    $0xc,%edx
f0116bc2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116bc8:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0116bcf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0116bd2:	01 ca                	add    %ecx,%edx
f0116bd4:	8b 12                	mov    (%edx),%edx
f0116bd6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0116bd9:	f7 d1                	not    %ecx
f0116bdb:	21 ca                	and    %ecx,%edx
f0116bdd:	89 10                	mov    %edx,(%eax)
f0116bdf:	eb 35                	jmp    f0116c16 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0116be1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116be4:	c1 e8 0c             	shr    $0xc,%eax
f0116be7:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116bec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116bf6:	01 c2                	add    %eax,%edx
f0116bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116bfb:	c1 e8 0c             	shr    $0xc,%eax
f0116bfe:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c03:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0116c0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116c0d:	01 c8                	add    %ecx,%eax
f0116c0f:	8b 00                	mov    (%eax),%eax
f0116c11:	0b 45 f4             	or     -0xc(%ebp),%eax
f0116c14:	89 02                	mov    %eax,(%edx)
	return 0;
f0116c16:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116c1b:	c9                   	leave  
f0116c1c:	c3                   	ret    

f0116c1d <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116c1d:	55                   	push   %ebp
f0116c1e:	89 e5                	mov    %esp,%ebp
f0116c20:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116c23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c26:	c1 e8 16             	shr    $0x16,%eax
f0116c29:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c30:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c33:	01 d0                	add    %edx,%eax
f0116c35:	8b 00                	mov    (%eax),%eax
f0116c37:	83 e0 01             	and    $0x1,%eax
f0116c3a:	85 c0                	test   %eax,%eax
f0116c3c:	75 0a                	jne    f0116c48 <CPs+0x2b>
f0116c3e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116c43:	e9 b8 00 00 00       	jmp    f0116d00 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116c48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c4b:	c1 e8 16             	shr    $0x16,%eax
f0116c4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c55:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c58:	01 d0                	add    %edx,%eax
f0116c5a:	8b 00                	mov    (%eax),%eax
f0116c5c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116c61:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116c64:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116c67:	c1 e8 0c             	shr    $0xc,%eax
f0116c6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116c6d:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116c72:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116c75:	72 17                	jb     f0116c8e <CPs+0x71>
f0116c77:	ff 75 f0             	pushl  -0x10(%ebp)
f0116c7a:	68 ec 91 13 f0       	push   $0xf01391ec
f0116c7f:	68 85 07 00 00       	push   $0x785
f0116c84:	68 f2 76 13 f0       	push   $0xf01376f2
f0116c89:	e8 22 95 fe ff       	call   f01001b0 <_panic>
f0116c8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116c91:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116c96:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0116c99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116ca0:	eb 53                	jmp    f0116cf5 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0116ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116ca5:	ba 01 00 00 00       	mov    $0x1,%edx
f0116caa:	88 c1                	mov    %al,%cl
f0116cac:	d3 e2                	shl    %cl,%edx
f0116cae:	89 d0                	mov    %edx,%eax
f0116cb0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0116cb3:	8b 45 14             	mov    0x14(%ebp),%eax
f0116cb6:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116cb9:	85 c0                	test   %eax,%eax
f0116cbb:	74 34                	je     f0116cf1 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0116cbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116cc0:	c1 e8 0c             	shr    $0xc,%eax
f0116cc3:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116cc8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116cd2:	01 d0                	add    %edx,%eax
f0116cd4:	8b 00                	mov    (%eax),%eax
f0116cd6:	33 45 10             	xor    0x10(%ebp),%eax
f0116cd9:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116cdc:	85 c0                	test   %eax,%eax
f0116cde:	0f 94 c0             	sete   %al
f0116ce1:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0116ce4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116ce8:	75 08                	jne    f0116cf2 <CPs+0xd5>
f0116cea:	b8 00 00 00 00       	mov    $0x0,%eax
f0116cef:	eb 0f                	jmp    f0116d00 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0116cf1:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0116cf2:	ff 45 f4             	incl   -0xc(%ebp)
f0116cf5:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0116cf9:	7e a7                	jle    f0116ca2 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0116cfb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116d00:	c9                   	leave  
f0116d01:	c3                   	ret    

f0116d02 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0116d02:	55                   	push   %ebp
f0116d03:	89 e5                	mov    %esp,%ebp
f0116d05:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116d08:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d0b:	c1 e8 16             	shr    $0x16,%eax
f0116d0e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d15:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d18:	01 d0                	add    %edx,%eax
f0116d1a:	8b 00                	mov    (%eax),%eax
f0116d1c:	83 e0 01             	and    $0x1,%eax
f0116d1f:	85 c0                	test   %eax,%eax
f0116d21:	75 07                	jne    f0116d2a <CA+0x28>
f0116d23:	b8 00 00 00 00       	mov    $0x0,%eax
f0116d28:	eb 6f                	jmp    f0116d99 <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116d2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d2d:	c1 e8 16             	shr    $0x16,%eax
f0116d30:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d37:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d3a:	01 d0                	add    %edx,%eax
f0116d3c:	8b 00                	mov    (%eax),%eax
f0116d3e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116d46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d49:	c1 e8 0c             	shr    $0xc,%eax
f0116d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116d4f:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116d54:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116d57:	72 17                	jb     f0116d70 <CA+0x6e>
f0116d59:	ff 75 f4             	pushl  -0xc(%ebp)
f0116d5c:	68 ec 91 13 f0       	push   $0xf01391ec
f0116d61:	68 94 07 00 00       	push   $0x794
f0116d66:	68 f2 76 13 f0       	push   $0xf01376f2
f0116d6b:	e8 40 94 fe ff       	call   f01001b0 <_panic>
f0116d70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d73:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116d78:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0116d7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d7e:	c1 e8 0c             	shr    $0xc,%eax
f0116d81:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116d86:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116d90:	01 d0                	add    %edx,%eax
f0116d92:	8b 00                	mov    (%eax),%eax
f0116d94:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0116d99:	c9                   	leave  
f0116d9a:	c3                   	ret    

f0116d9b <CE>:

int CE(uint32 *_d, uint32 va)
{
f0116d9b:	55                   	push   %ebp
f0116d9c:	89 e5                	mov    %esp,%ebp
f0116d9e:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116da1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116da4:	c1 e8 16             	shr    $0x16,%eax
f0116da7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116dae:	8b 45 08             	mov    0x8(%ebp),%eax
f0116db1:	01 d0                	add    %edx,%eax
f0116db3:	8b 00                	mov    (%eax),%eax
f0116db5:	83 e0 01             	and    $0x1,%eax
f0116db8:	85 c0                	test   %eax,%eax
f0116dba:	75 07                	jne    f0116dc3 <CE+0x28>
f0116dbc:	b8 00 00 00 00       	mov    $0x0,%eax
f0116dc1:	eb 7a                	jmp    f0116e3d <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116dc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116dc6:	c1 e8 16             	shr    $0x16,%eax
f0116dc9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116dd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0116dd3:	01 d0                	add    %edx,%eax
f0116dd5:	8b 00                	mov    (%eax),%eax
f0116dd7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116ddc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116ddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116de2:	c1 e8 0c             	shr    $0xc,%eax
f0116de5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116de8:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116ded:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116df0:	72 17                	jb     f0116e09 <CE+0x6e>
f0116df2:	ff 75 f4             	pushl  -0xc(%ebp)
f0116df5:	68 ec 91 13 f0       	push   $0xf01391ec
f0116dfa:	68 9b 07 00 00       	push   $0x79b
f0116dff:	68 f2 76 13 f0       	push   $0xf01376f2
f0116e04:	e8 a7 93 fe ff       	call   f01001b0 <_panic>
f0116e09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116e0c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116e11:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116e14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e17:	c1 e8 0c             	shr    $0xc,%eax
f0116e1a:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116e1f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e29:	01 d0                	add    %edx,%eax
f0116e2b:	8b 00                	mov    (%eax),%eax
f0116e2d:	85 c0                	test   %eax,%eax
f0116e2f:	74 07                	je     f0116e38 <CE+0x9d>
f0116e31:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e36:	eb 05                	jmp    f0116e3d <CE+0xa2>
	return 1;
f0116e38:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116e3d:	c9                   	leave  
f0116e3e:	c3                   	ret    

f0116e3f <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116e3f:	55                   	push   %ebp
f0116e40:	89 e5                	mov    %esp,%ebp
f0116e42:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0116e45:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e48:	c1 e8 16             	shr    $0x16,%eax
f0116e4b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e52:	8b 45 08             	mov    0x8(%ebp),%eax
f0116e55:	01 d0                	add    %edx,%eax
f0116e57:	8b 00                	mov    (%eax),%eax
f0116e59:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0116e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116e5f:	83 e0 01             	and    $0x1,%eax
f0116e62:	85 c0                	test   %eax,%eax
f0116e64:	0f 84 92 00 00 00    	je     f0116efc <CP+0xbd>
	{
		uint32 *t = NULL;
f0116e6a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0116e71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116e74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116e79:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116e7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e7f:	c1 e8 0c             	shr    $0xc,%eax
f0116e82:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0116e85:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116e8a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0116e8d:	72 17                	jb     f0116ea6 <CP+0x67>
f0116e8f:	ff 75 ec             	pushl  -0x14(%ebp)
f0116e92:	68 ec 91 13 f0       	push   $0xf01391ec
f0116e97:	68 a7 07 00 00       	push   $0x7a7
f0116e9c:	68 f2 76 13 f0       	push   $0xf01376f2
f0116ea1:	e8 0a 93 fe ff       	call   f01001b0 <_panic>
f0116ea6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116ea9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116eae:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0116eb1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116eb4:	c1 e8 0c             	shr    $0xc,%eax
f0116eb7:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116ebc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ec3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ec6:	01 d0                	add    %edx,%eax
f0116ec8:	8b 00                	mov    (%eax),%eax
f0116eca:	23 45 10             	and    0x10(%ebp),%eax
f0116ecd:	3b 45 10             	cmp    0x10(%ebp),%eax
f0116ed0:	75 2a                	jne    f0116efc <CP+0xbd>
f0116ed2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ed5:	c1 e8 0c             	shr    $0xc,%eax
f0116ed8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116edd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ee4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ee7:	01 d0                	add    %edx,%eax
f0116ee9:	8b 00                	mov    (%eax),%eax
f0116eeb:	f7 d0                	not    %eax
f0116eed:	23 45 14             	and    0x14(%ebp),%eax
f0116ef0:	3b 45 14             	cmp    0x14(%ebp),%eax
f0116ef3:	75 07                	jne    f0116efc <CP+0xbd>
			return 1;
f0116ef5:	b8 01 00 00 00       	mov    $0x1,%eax
f0116efa:	eb 05                	jmp    f0116f01 <CP+0xc2>
	}
	return 0;
f0116efc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116f01:	c9                   	leave  
f0116f02:	c3                   	ret    

f0116f03 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116f03:	55                   	push   %ebp
f0116f04:	89 e5                	mov    %esp,%ebp
f0116f06:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116f09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116f0c:	c1 e8 16             	shr    $0x16,%eax
f0116f0f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116f16:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f19:	01 d0                	add    %edx,%eax
f0116f1b:	8b 00                	mov    (%eax),%eax
f0116f1d:	83 e0 01             	and    $0x1,%eax
f0116f20:	85 c0                	test   %eax,%eax
f0116f22:	75 07                	jne    f0116f2b <GP+0x28>
f0116f24:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f29:	eb 6f                	jmp    f0116f9a <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116f2b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116f2e:	c1 e8 16             	shr    $0x16,%eax
f0116f31:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116f38:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f3b:	01 d0                	add    %edx,%eax
f0116f3d:	8b 00                	mov    (%eax),%eax
f0116f3f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116f4a:	c1 e8 0c             	shr    $0xc,%eax
f0116f4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116f50:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116f55:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116f58:	72 17                	jb     f0116f71 <GP+0x6e>
f0116f5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0116f5d:	68 ec 91 13 f0       	push   $0xf01391ec
f0116f62:	68 b4 07 00 00       	push   $0x7b4
f0116f67:	68 f2 76 13 f0       	push   $0xf01376f2
f0116f6c:	e8 3f 92 fe ff       	call   f01001b0 <_panic>
f0116f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116f74:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116f79:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0116f7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116f7f:	c1 e8 0c             	shr    $0xc,%eax
f0116f82:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116f87:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116f8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116f91:	01 d0                	add    %edx,%eax
f0116f93:	8b 00                	mov    (%eax),%eax
f0116f95:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0116f9a:	c9                   	leave  
f0116f9b:	c3                   	ret    

f0116f9c <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0116f9c:	55                   	push   %ebp
f0116f9d:	89 e5                	mov    %esp,%ebp
f0116f9f:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116fa2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116fa9:	eb 18                	jmp    f0116fc3 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116fab:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116fae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116fb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0116fb8:	01 d0                	add    %edx,%eax
f0116fba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116fc0:	ff 45 fc             	incl   -0x4(%ebp)
f0116fc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116fc6:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116fcb:	76 de                	jbe    f0116fab <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116fcd:	90                   	nop
f0116fce:	c9                   	leave  
f0116fcf:	c3                   	ret    

f0116fd0 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116fd0:	55                   	push   %ebp
f0116fd1:	89 e5                	mov    %esp,%ebp
f0116fd3:	83 ec 38             	sub    $0x38,%esp
f0116fd6:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116fd9:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116fdc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116fdf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116fe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0116fe7:	8b 45 10             	mov    0x10(%ebp),%eax
f0116fea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116fef:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116ff2:	e9 ea 01 00 00       	jmp    f01171e1 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0116ff7:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116ffb:	74 44                	je     f0117041 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117000:	83 ec 04             	sub    $0x4,%esp
f0117003:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0117006:	52                   	push   %edx
f0117007:	50                   	push   %eax
f0117008:	ff 75 08             	pushl  0x8(%ebp)
f011700b:	e8 6f 07 ff ff       	call   f010777f <get_frame_info>
f0117010:	83 c4 10             	add    $0x10,%esp
f0117013:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0117016:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117019:	85 c0                	test   %eax,%eax
f011701b:	75 24                	jne    f0117041 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f011701d:	83 ec 04             	sub    $0x4,%esp
f0117020:	68 1c 92 13 f0       	push   $0xf013921c
f0117025:	68 cf 07 00 00       	push   $0x7cf
f011702a:	68 f2 76 13 f0       	push   $0xf01376f2
f011702f:	e8 8a 93 fe ff       	call   f01003be <_warn>
f0117034:	83 c4 10             	add    $0x10,%esp
				return 0;
f0117037:	b8 00 00 00 00       	mov    $0x0,%eax
f011703c:	e9 b6 01 00 00       	jmp    f01171f7 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0117041:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117044:	83 ec 04             	sub    $0x4,%esp
f0117047:	8d 55 d8             	lea    -0x28(%ebp),%edx
f011704a:	52                   	push   %edx
f011704b:	50                   	push   %eax
f011704c:	ff 75 08             	pushl  0x8(%ebp)
f011704f:	e8 2b 07 ff ff       	call   f010777f <get_frame_info>
f0117054:	83 c4 10             	add    $0x10,%esp
f0117057:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f011705a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011705d:	85 c0                	test   %eax,%eax
f011705f:	75 24                	jne    f0117085 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0117061:	83 ec 04             	sub    $0x4,%esp
f0117064:	68 48 92 13 f0       	push   $0xf0139248
f0117069:	68 d6 07 00 00       	push   $0x7d6
f011706e:	68 f2 76 13 f0       	push   $0xf01376f2
f0117073:	e8 46 93 fe ff       	call   f01003be <_warn>
f0117078:	83 c4 10             	add    $0x10,%esp
			return 0;
f011707b:	b8 00 00 00 00       	mov    $0x0,%eax
f0117080:	e9 72 01 00 00       	jmp    f01171f7 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0117085:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0117089:	75 70                	jne    f01170fb <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f011708b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011708e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117091:	c1 ea 0c             	shr    $0xc,%edx
f0117094:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011709a:	c1 e2 02             	shl    $0x2,%edx
f011709d:	01 d0                	add    %edx,%eax
f011709f:	8b 00                	mov    (%eax),%eax
f01170a1:	c1 e8 0c             	shr    $0xc,%eax
f01170a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f01170a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01170aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01170ad:	c1 ea 0c             	shr    $0xc,%edx
f01170b0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01170b6:	c1 e2 02             	shl    $0x2,%edx
f01170b9:	01 d0                	add    %edx,%eax
f01170bb:	8b 00                	mov    (%eax),%eax
f01170bd:	c1 e8 0c             	shr    $0xc,%eax
f01170c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01170c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01170c6:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01170c9:	74 30                	je     f01170fb <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01170cb:	83 ec 04             	sub    $0x4,%esp
f01170ce:	ff 75 e4             	pushl  -0x1c(%ebp)
f01170d1:	ff 75 e8             	pushl  -0x18(%ebp)
f01170d4:	ff 75 f0             	pushl  -0x10(%ebp)
f01170d7:	ff 75 f4             	pushl  -0xc(%ebp)
f01170da:	68 74 92 13 f0       	push   $0xf0139274
f01170df:	68 e0 07 00 00       	push   $0x7e0
f01170e4:	68 f2 76 13 f0       	push   $0xf01376f2
f01170e9:	e8 d0 92 fe ff       	call   f01003be <_warn>
f01170ee:	83 c4 20             	add    $0x20,%esp
				return 0;
f01170f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01170f6:	e9 fc 00 00 00       	jmp    f01171f7 <CCP+0x227>
			}
		}
		if (ref != -1)
f01170fb:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01170ff:	74 52                	je     f0117153 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0117101:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117105:	74 0e                	je     f0117115 <CCP+0x145>
f0117107:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011710a:	8b 40 08             	mov    0x8(%eax),%eax
f011710d:	0f b7 c0             	movzwl %ax,%eax
f0117110:	3b 45 18             	cmp    0x18(%ebp),%eax
f0117113:	74 3e                	je     f0117153 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0117115:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117119:	74 0b                	je     f0117126 <CCP+0x156>
f011711b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011711e:	8b 40 08             	mov    0x8(%eax),%eax
f0117121:	0f b7 c0             	movzwl %ax,%eax
f0117124:	eb 05                	jmp    f011712b <CCP+0x15b>
f0117126:	b8 00 00 00 00       	mov    $0x0,%eax
f011712b:	83 ec 0c             	sub    $0xc,%esp
f011712e:	50                   	push   %eax
f011712f:	ff 75 f0             	pushl  -0x10(%ebp)
f0117132:	68 d0 92 13 f0       	push   $0xf01392d0
f0117137:	68 e8 07 00 00       	push   $0x7e8
f011713c:	68 f2 76 13 f0       	push   $0xf01376f2
f0117141:	e8 78 92 fe ff       	call   f01003be <_warn>
f0117146:	83 c4 20             	add    $0x20,%esp
				return 0;
f0117149:	b8 00 00 00 00       	mov    $0x0,%eax
f011714e:	e9 a4 00 00 00       	jmp    f01171f7 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0117153:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117156:	ff 75 20             	pushl  0x20(%ebp)
f0117159:	ff 75 1c             	pushl  0x1c(%ebp)
f011715c:	50                   	push   %eax
f011715d:	ff 75 08             	pushl  0x8(%ebp)
f0117160:	e8 b8 fa ff ff       	call   f0116c1d <CPs>
f0117165:	83 c4 10             	add    $0x10,%esp
f0117168:	85 c0                	test   %eax,%eax
f011716a:	7f 21                	jg     f011718d <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f011716c:	83 ec 04             	sub    $0x4,%esp
f011716f:	68 40 93 13 f0       	push   $0xf0139340
f0117174:	68 ee 07 00 00       	push   $0x7ee
f0117179:	68 f2 76 13 f0       	push   $0xf01376f2
f011717e:	e8 3b 92 fe ff       	call   f01003be <_warn>
f0117183:	83 c4 10             	add    $0x10,%esp
			return 0;
f0117186:	b8 00 00 00 00       	mov    $0x0,%eax
f011718b:	eb 6a                	jmp    f01171f7 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f011718d:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0117191:	74 3a                	je     f01171cd <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0117193:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117196:	ff 75 28             	pushl  0x28(%ebp)
f0117199:	ff 75 24             	pushl  0x24(%ebp)
f011719c:	50                   	push   %eax
f011719d:	ff 75 08             	pushl  0x8(%ebp)
f01171a0:	e8 78 fa ff ff       	call   f0116c1d <CPs>
f01171a5:	83 c4 10             	add    $0x10,%esp
f01171a8:	85 c0                	test   %eax,%eax
f01171aa:	7f 21                	jg     f01171cd <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f01171ac:	83 ec 04             	sub    $0x4,%esp
f01171af:	68 88 93 13 f0       	push   $0xf0139388
f01171b4:	68 f5 07 00 00       	push   $0x7f5
f01171b9:	68 f2 76 13 f0       	push   $0xf01376f2
f01171be:	e8 fb 91 fe ff       	call   f01003be <_warn>
f01171c3:	83 c4 10             	add    $0x10,%esp
				return 0;
f01171c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01171cb:	eb 2a                	jmp    f01171f7 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f01171cd:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01171d1:	74 07                	je     f01171da <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f01171d3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01171da:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01171e1:	8b 55 10             	mov    0x10(%ebp),%edx
f01171e4:	8b 45 14             	mov    0x14(%ebp),%eax
f01171e7:	01 d0                	add    %edx,%eax
f01171e9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01171ec:	0f 87 05 fe ff ff    	ja     f0116ff7 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f01171f2:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01171f7:	c9                   	leave  
f01171f8:	c3                   	ret    

f01171f9 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01171f9:	55                   	push   %ebp
f01171fa:	89 e5                	mov    %esp,%ebp
f01171fc:	57                   	push   %edi
f01171fd:	56                   	push   %esi
f01171fe:	53                   	push   %ebx
f01171ff:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0117205:	a0 3c eb 18 f0       	mov    0xf018eb3c,%al
f011720a:	84 c0                	test   %al,%al
f011720c:	0f 84 38 0a 00 00    	je     f0117c4a <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0117212:	c6 05 3c eb 18 f0 00 	movb   $0x0,0xf018eb3c
		char command[100] = "load fos_add 20";
f0117219:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011721f:	bb 44 96 13 f0       	mov    $0xf0139644,%ebx
f0117224:	ba 04 00 00 00       	mov    $0x4,%edx
f0117229:	89 c7                	mov    %eax,%edi
f011722b:	89 de                	mov    %ebx,%esi
f011722d:	89 d1                	mov    %edx,%ecx
f011722f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117231:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0117237:	b9 15 00 00 00       	mov    $0x15,%ecx
f011723c:	b8 00 00 00 00       	mov    $0x0,%eax
f0117241:	89 d7                	mov    %edx,%edi
f0117243:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117245:	83 ec 0c             	sub    $0xc,%esp
f0117248:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011724e:	50                   	push   %eax
f011724f:	e8 6f a9 fe ff       	call   f0101bc3 <execute_command>
f0117254:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0117257:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011725d:	bb a8 96 13 f0       	mov    $0xf01396a8,%ebx
f0117262:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117267:	89 c7                	mov    %eax,%edi
f0117269:	89 de                	mov    %ebx,%esi
f011726b:	89 d1                	mov    %edx,%ecx
f011726d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011726f:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0117275:	b9 57 00 00 00       	mov    $0x57,%ecx
f011727a:	b0 00                	mov    $0x0,%al
f011727c:	89 d7                	mov    %edx,%edi
f011727e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117280:	83 ec 0c             	sub    $0xc,%esp
f0117283:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0117289:	50                   	push   %eax
f011728a:	e8 34 a9 fe ff       	call   f0101bc3 <execute_command>
f011728f:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0117292:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0117298:	bb 0c 97 13 f0       	mov    $0xf013970c,%ebx
f011729d:	ba 17 00 00 00       	mov    $0x17,%edx
f01172a2:	89 c7                	mov    %eax,%edi
f01172a4:	89 de                	mov    %ebx,%esi
f01172a6:	89 d1                	mov    %edx,%ecx
f01172a8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01172aa:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f01172b0:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01172b5:	b0 00                	mov    $0x0,%al
f01172b7:	89 d7                	mov    %edx,%edi
f01172b9:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01172bb:	83 ec 0c             	sub    $0xc,%esp
f01172be:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01172c4:	50                   	push   %eax
f01172c5:	e8 f9 a8 fe ff       	call   f0101bc3 <execute_command>
f01172ca:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f01172cd:	83 ec 04             	sub    $0x4,%esp
f01172d0:	6a 00                	push   $0x0
f01172d2:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01172d5:	50                   	push   %eax
f01172d6:	6a 10                	push   $0x10
f01172d8:	e8 8d 27 ff ff       	call   f0109a6a <envid2env>
f01172dd:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f01172e0:	83 ec 04             	sub    $0x4,%esp
f01172e3:	6a 00                	push   $0x0
f01172e5:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01172e8:	50                   	push   %eax
f01172e9:	6a 11                	push   $0x11
f01172eb:	e8 7a 27 ff ff       	call   f0109a6a <envid2env>
f01172f0:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f01172f3:	83 ec 04             	sub    $0x4,%esp
f01172f6:	6a 00                	push   $0x0
f01172f8:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01172fb:	50                   	push   %eax
f01172fc:	6a 12                	push   $0x12
f01172fe:	e8 67 27 ff ff       	call   f0109a6a <envid2env>
f0117303:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117306:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117309:	85 c0                	test   %eax,%eax
f011730b:	74 0e                	je     f011731b <test_priority_normal_and_higher+0x122>
f011730d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117310:	85 c0                	test   %eax,%eax
f0117312:	74 07                	je     f011731b <test_priority_normal_and_higher+0x122>
f0117314:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117317:	85 c0                	test   %eax,%eax
f0117319:	75 14                	jne    f011732f <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f011731b:	83 ec 04             	sub    $0x4,%esp
f011731e:	68 c8 93 13 f0       	push   $0xf01393c8
f0117323:	6a 29                	push   $0x29
f0117325:	68 e1 93 13 f0       	push   $0xf01393e1
f011732a:	e8 81 8e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011732f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117332:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117338:	83 f8 14             	cmp    $0x14,%eax
f011733b:	75 1c                	jne    f0117359 <test_priority_normal_and_higher+0x160>
f011733d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117340:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117346:	83 f8 0f             	cmp    $0xf,%eax
f0117349:	75 0e                	jne    f0117359 <test_priority_normal_and_higher+0x160>
f011734b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011734e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117354:	83 f8 0a             	cmp    $0xa,%eax
f0117357:	74 32                	je     f011738b <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f0117359:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011735c:	8b 88 7c d5 01 00    	mov    0x1d57c(%eax),%ecx
f0117362:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117365:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f011736b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011736e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117374:	83 ec 08             	sub    $0x8,%esp
f0117377:	51                   	push   %ecx
f0117378:	52                   	push   %edx
f0117379:	50                   	push   %eax
f011737a:	68 fc 93 13 f0       	push   $0xf01393fc
f011737f:	6a 2c                	push   $0x2c
f0117381:	68 e1 93 13 f0       	push   $0xf01393e1
f0117386:	e8 25 8e fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f011738b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117392:	eb 47                	jmp    f01173db <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117394:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0117397:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011739a:	89 d0                	mov    %edx,%eax
f011739c:	01 c0                	add    %eax,%eax
f011739e:	01 d0                	add    %edx,%eax
f01173a0:	c1 e0 03             	shl    $0x3,%eax
f01173a3:	01 c8                	add    %ecx,%eax
f01173a5:	05 b8 00 00 00       	add    $0xb8,%eax
f01173aa:	8b 10                	mov    (%eax),%edx
f01173ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01173af:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01173b6:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f01173b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01173bc:	89 d0                	mov    %edx,%eax
f01173be:	01 c0                	add    %eax,%eax
f01173c0:	01 d0                	add    %edx,%eax
f01173c2:	c1 e0 03             	shl    $0x3,%eax
f01173c5:	01 c8                	add    %ecx,%eax
f01173c7:	05 c0 00 00 00       	add    $0xc0,%eax
f01173cc:	8b 10                	mov    (%eax),%edx
f01173ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01173d1:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f01173d8:	ff 45 e4             	incl   -0x1c(%ebp)
f01173db:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01173df:	7e b3                	jle    f0117394 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01173e1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01173e8:	eb 47                	jmp    f0117431 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01173ea:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01173ed:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01173f0:	89 d0                	mov    %edx,%eax
f01173f2:	01 c0                	add    %eax,%eax
f01173f4:	01 d0                	add    %edx,%eax
f01173f6:	c1 e0 03             	shl    $0x3,%eax
f01173f9:	01 c8                	add    %ecx,%eax
f01173fb:	05 b8 00 00 00       	add    $0xb8,%eax
f0117400:	8b 10                	mov    (%eax),%edx
f0117402:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117405:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011740c:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011740f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117412:	89 d0                	mov    %edx,%eax
f0117414:	01 c0                	add    %eax,%eax
f0117416:	01 d0                	add    %edx,%eax
f0117418:	c1 e0 03             	shl    $0x3,%eax
f011741b:	01 c8                	add    %ecx,%eax
f011741d:	05 c0 00 00 00       	add    $0xc0,%eax
f0117422:	8b 10                	mov    (%eax),%edx
f0117424:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117427:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011742e:	ff 45 e0             	incl   -0x20(%ebp)
f0117431:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0117435:	7e b3                	jle    f01173ea <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0117437:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011743e:	eb 47                	jmp    f0117487 <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117440:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117443:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117446:	89 d0                	mov    %edx,%eax
f0117448:	01 c0                	add    %eax,%eax
f011744a:	01 d0                	add    %edx,%eax
f011744c:	c1 e0 03             	shl    $0x3,%eax
f011744f:	01 c8                	add    %ecx,%eax
f0117451:	05 b8 00 00 00       	add    $0xb8,%eax
f0117456:	8b 10                	mov    (%eax),%edx
f0117458:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011745b:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117462:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117465:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117468:	89 d0                	mov    %edx,%eax
f011746a:	01 c0                	add    %eax,%eax
f011746c:	01 d0                	add    %edx,%eax
f011746e:	c1 e0 03             	shl    $0x3,%eax
f0117471:	01 c8                	add    %ecx,%eax
f0117473:	05 c0 00 00 00       	add    $0xc0,%eax
f0117478:	8b 10                	mov    (%eax),%edx
f011747a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011747d:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0117484:	ff 45 dc             	incl   -0x24(%ebp)
f0117487:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011748b:	7e b3                	jle    f0117440 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011748d:	e8 d0 55 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0117492:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0117495:	e8 ea d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011749a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011749d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01174a0:	83 ec 08             	sub    $0x8,%esp
f01174a3:	6a 03                	push   $0x3
f01174a5:	50                   	push   %eax
f01174a6:	e8 9f 3a ff ff       	call   f010af4a <set_program_priority>
f01174ab:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01174ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01174b1:	83 ec 08             	sub    $0x8,%esp
f01174b4:	6a 03                	push   $0x3
f01174b6:	50                   	push   %eax
f01174b7:	e8 8e 3a ff ff       	call   f010af4a <set_program_priority>
f01174bc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01174bf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01174c2:	83 ec 08             	sub    $0x8,%esp
f01174c5:	6a 03                	push   $0x3
f01174c7:	50                   	push   %eax
f01174c8:	e8 7d 3a ff ff       	call   f010af4a <set_program_priority>
f01174cd:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01174d0:	e8 af d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01174d5:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01174d8:	74 14                	je     f01174ee <test_priority_normal_and_higher+0x2f5>
f01174da:	83 ec 04             	sub    $0x4,%esp
f01174dd:	68 64 94 13 f0       	push   $0xf0139464
f01174e2:	6a 48                	push   $0x48
f01174e4:	68 e1 93 13 f0       	push   $0xf01393e1
f01174e9:	e8 c2 8c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01174ee:	e8 6f 55 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01174f3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01174f6:	74 14                	je     f011750c <test_priority_normal_and_higher+0x313>
f01174f8:	83 ec 04             	sub    $0x4,%esp
f01174fb:	68 64 94 13 f0       	push   $0xf0139464
f0117500:	6a 49                	push   $0x49
f0117502:	68 e1 93 13 f0       	push   $0xf01393e1
f0117507:	e8 a4 8c fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011750c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011750f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117515:	83 f8 14             	cmp    $0x14,%eax
f0117518:	75 1c                	jne    f0117536 <test_priority_normal_and_higher+0x33d>
f011751a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011751d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117523:	83 f8 0f             	cmp    $0xf,%eax
f0117526:	75 0e                	jne    f0117536 <test_priority_normal_and_higher+0x33d>
f0117528:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011752b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117531:	83 f8 0a             	cmp    $0xa,%eax
f0117534:	74 14                	je     f011754a <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117536:	83 ec 04             	sub    $0x4,%esp
f0117539:	68 90 94 13 f0       	push   $0xf0139490
f011753e:	6a 4c                	push   $0x4c
f0117540:	68 e1 93 13 f0       	push   $0xf01393e1
f0117545:	e8 66 8c fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f011754a:	e8 13 55 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011754f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117552:	e8 2d d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117557:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f011755a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011755d:	83 ec 08             	sub    $0x8,%esp
f0117560:	6a 04                	push   $0x4
f0117562:	50                   	push   %eax
f0117563:	e8 e2 39 ff ff       	call   f010af4a <set_program_priority>
f0117568:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f011756b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011756e:	83 ec 08             	sub    $0x8,%esp
f0117571:	6a 04                	push   $0x4
f0117573:	50                   	push   %eax
f0117574:	e8 d1 39 ff ff       	call   f010af4a <set_program_priority>
f0117579:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011757c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011757f:	83 ec 08             	sub    $0x8,%esp
f0117582:	6a 04                	push   $0x4
f0117584:	50                   	push   %eax
f0117585:	e8 c0 39 ff ff       	call   f010af4a <set_program_priority>
f011758a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011758d:	e8 f2 d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117592:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117595:	74 14                	je     f01175ab <test_priority_normal_and_higher+0x3b2>
f0117597:	83 ec 04             	sub    $0x4,%esp
f011759a:	68 64 94 13 f0       	push   $0xf0139464
f011759f:	6a 56                	push   $0x56
f01175a1:	68 e1 93 13 f0       	push   $0xf01393e1
f01175a6:	e8 05 8c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f01175ab:	e8 b2 54 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01175b0:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01175b3:	74 14                	je     f01175c9 <test_priority_normal_and_higher+0x3d0>
f01175b5:	83 ec 04             	sub    $0x4,%esp
f01175b8:	68 e4 94 13 f0       	push   $0xf01394e4
f01175bd:	6a 57                	push   $0x57
f01175bf:	68 e1 93 13 f0       	push   $0xf01393e1
f01175c4:	e8 e7 8b fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01175c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01175cc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01175d2:	83 f8 14             	cmp    $0x14,%eax
f01175d5:	75 1c                	jne    f01175f3 <test_priority_normal_and_higher+0x3fa>
f01175d7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01175da:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01175e0:	83 f8 0f             	cmp    $0xf,%eax
f01175e3:	75 0e                	jne    f01175f3 <test_priority_normal_and_higher+0x3fa>
f01175e5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01175e8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01175ee:	83 f8 14             	cmp    $0x14,%eax
f01175f1:	74 14                	je     f0117607 <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f01175f3:	83 ec 04             	sub    $0x4,%esp
f01175f6:	68 14 95 13 f0       	push   $0xf0139514
f01175fb:	6a 5a                	push   $0x5a
f01175fd:	68 e1 93 13 f0       	push   $0xf01393e1
f0117602:	e8 a9 8b fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117607:	e8 56 54 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011760c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011760f:	e8 70 d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117614:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0117617:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011761a:	83 ec 08             	sub    $0x8,%esp
f011761d:	6a 04                	push   $0x4
f011761f:	50                   	push   %eax
f0117620:	e8 25 39 ff ff       	call   f010af4a <set_program_priority>
f0117625:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117628:	e8 57 d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011762d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117630:	74 14                	je     f0117646 <test_priority_normal_and_higher+0x44d>
f0117632:	83 ec 04             	sub    $0x4,%esp
f0117635:	68 64 94 13 f0       	push   $0xf0139464
f011763a:	6a 62                	push   $0x62
f011763c:	68 e1 93 13 f0       	push   $0xf01393e1
f0117641:	e8 6a 8b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117646:	e8 17 54 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011764b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011764e:	74 14                	je     f0117664 <test_priority_normal_and_higher+0x46b>
f0117650:	83 ec 04             	sub    $0x4,%esp
f0117653:	68 64 94 13 f0       	push   $0xf0139464
f0117658:	6a 63                	push   $0x63
f011765a:	68 e1 93 13 f0       	push   $0xf01393e1
f011765f:	e8 4c 8b fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117664:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117667:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011766d:	83 f8 14             	cmp    $0x14,%eax
f0117670:	75 1c                	jne    f011768e <test_priority_normal_and_higher+0x495>
f0117672:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117675:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011767b:	83 f8 0f             	cmp    $0xf,%eax
f011767e:	75 0e                	jne    f011768e <test_priority_normal_and_higher+0x495>
f0117680:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117683:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117689:	83 f8 14             	cmp    $0x14,%eax
f011768c:	74 14                	je     f01176a2 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f011768e:	83 ec 04             	sub    $0x4,%esp
f0117691:	68 5c 95 13 f0       	push   $0xf013955c
f0117696:	6a 66                	push   $0x66
f0117698:	68 e1 93 13 f0       	push   $0xf01393e1
f011769d:	e8 0e 8b fe ff       	call   f01001b0 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01176a2:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f01176a9:	eb 1c                	jmp    f01176c7 <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01176ab:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01176ae:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01176b1:	89 d0                	mov    %edx,%eax
f01176b3:	01 c0                	add    %eax,%eax
f01176b5:	01 d0                	add    %edx,%eax
f01176b7:	c1 e0 03             	shl    $0x3,%eax
f01176ba:	01 c8                	add    %ecx,%eax
f01176bc:	05 bc 00 00 00       	add    $0xbc,%eax
f01176c1:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01176c4:	ff 45 d8             	incl   -0x28(%ebp)
f01176c7:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f01176cb:	7e de                	jle    f01176ab <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01176cd:	e8 90 53 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01176d2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176d5:	e8 aa cf fe ff       	call   f0104684 <pf_calculate_free_frames>
f01176da:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f01176dd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01176e0:	83 ec 08             	sub    $0x8,%esp
f01176e3:	6a 04                	push   $0x4
f01176e5:	50                   	push   %eax
f01176e6:	e8 5f 38 ff ff       	call   f010af4a <set_program_priority>
f01176eb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01176ee:	e8 91 cf fe ff       	call   f0104684 <pf_calculate_free_frames>
f01176f3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01176f6:	74 14                	je     f011770c <test_priority_normal_and_higher+0x513>
f01176f8:	83 ec 04             	sub    $0x4,%esp
f01176fb:	68 64 94 13 f0       	push   $0xf0139464
f0117700:	6a 73                	push   $0x73
f0117702:	68 e1 93 13 f0       	push   $0xf01393e1
f0117707:	e8 a4 8a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011770c:	e8 51 53 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0117711:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117714:	74 14                	je     f011772a <test_priority_normal_and_higher+0x531>
f0117716:	83 ec 04             	sub    $0x4,%esp
f0117719:	68 64 94 13 f0       	push   $0xf0139464
f011771e:	6a 74                	push   $0x74
f0117720:	68 e1 93 13 f0       	push   $0xf01393e1
f0117725:	e8 86 8a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011772a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011772d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117733:	83 f8 14             	cmp    $0x14,%eax
f0117736:	75 1c                	jne    f0117754 <test_priority_normal_and_higher+0x55b>
f0117738:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011773b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117741:	83 f8 0f             	cmp    $0xf,%eax
f0117744:	75 0e                	jne    f0117754 <test_priority_normal_and_higher+0x55b>
f0117746:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117749:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011774f:	83 f8 14             	cmp    $0x14,%eax
f0117752:	74 14                	je     f0117768 <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f0117754:	83 ec 04             	sub    $0x4,%esp
f0117757:	68 5c 95 13 f0       	push   $0xf013955c
f011775c:	6a 77                	push   $0x77
f011775e:	68 e1 93 13 f0       	push   $0xf01393e1
f0117763:	e8 48 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 10; i < 15; i++)
f0117768:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f011776f:	eb 1c                	jmp    f011778d <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117771:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117774:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117777:	89 d0                	mov    %edx,%eax
f0117779:	01 c0                	add    %eax,%eax
f011777b:	01 d0                	add    %edx,%eax
f011777d:	c1 e0 03             	shl    $0x3,%eax
f0117780:	01 c8                	add    %ecx,%eax
f0117782:	05 bc 00 00 00       	add    $0xbc,%eax
f0117787:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f011778a:	ff 45 d4             	incl   -0x2c(%ebp)
f011778d:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117791:	7e de                	jle    f0117771 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117793:	e8 ca 52 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0117798:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011779b:	e8 e4 ce fe ff       	call   f0104684 <pf_calculate_free_frames>
f01177a0:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01177a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01177a6:	83 ec 08             	sub    $0x8,%esp
f01177a9:	6a 05                	push   $0x5
f01177ab:	50                   	push   %eax
f01177ac:	e8 99 37 ff ff       	call   f010af4a <set_program_priority>
f01177b1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f01177b4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01177b7:	83 ec 08             	sub    $0x8,%esp
f01177ba:	6a 05                	push   $0x5
f01177bc:	50                   	push   %eax
f01177bd:	e8 88 37 ff ff       	call   f010af4a <set_program_priority>
f01177c2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01177c5:	e8 ba ce fe ff       	call   f0104684 <pf_calculate_free_frames>
f01177ca:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01177cd:	74 17                	je     f01177e6 <test_priority_normal_and_higher+0x5ed>
f01177cf:	83 ec 04             	sub    $0x4,%esp
f01177d2:	68 64 94 13 f0       	push   $0xf0139464
f01177d7:	68 82 00 00 00       	push   $0x82
f01177dc:	68 e1 93 13 f0       	push   $0xf01393e1
f01177e1:	e8 ca 89 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01177e6:	e8 77 52 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01177eb:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01177ee:	74 17                	je     f0117807 <test_priority_normal_and_higher+0x60e>
f01177f0:	83 ec 04             	sub    $0x4,%esp
f01177f3:	68 64 94 13 f0       	push   $0xf0139464
f01177f8:	68 83 00 00 00       	push   $0x83
f01177fd:	68 e1 93 13 f0       	push   $0xf01393e1
f0117802:	e8 a9 89 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117807:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011780a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117810:	83 f8 14             	cmp    $0x14,%eax
f0117813:	75 1c                	jne    f0117831 <test_priority_normal_and_higher+0x638>
f0117815:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117818:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011781e:	83 f8 1e             	cmp    $0x1e,%eax
f0117821:	75 0e                	jne    f0117831 <test_priority_normal_and_higher+0x638>
f0117823:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117826:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011782c:	83 f8 28             	cmp    $0x28,%eax
f011782f:	74 17                	je     f0117848 <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f0117831:	83 ec 04             	sub    $0x4,%esp
f0117834:	68 98 95 13 f0       	push   $0xf0139598
f0117839:	68 86 00 00 00       	push   $0x86
f011783e:	68 e1 93 13 f0       	push   $0xf01393e1
f0117843:	e8 68 89 fe ff       	call   f01001b0 <_panic>

		for(int i = 20; i < 40; i++)
f0117848:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f011784f:	eb 1c                	jmp    f011786d <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0117851:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117854:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117857:	89 d0                	mov    %edx,%eax
f0117859:	01 c0                	add    %eax,%eax
f011785b:	01 d0                	add    %edx,%eax
f011785d:	c1 e0 03             	shl    $0x3,%eax
f0117860:	01 c8                	add    %ecx,%eax
f0117862:	05 bc 00 00 00       	add    $0xbc,%eax
f0117867:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011786a:	ff 45 d0             	incl   -0x30(%ebp)
f011786d:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117871:	7e de                	jle    f0117851 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117873:	e8 ea 51 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0117878:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011787b:	e8 04 ce fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117880:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117883:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117886:	83 ec 08             	sub    $0x8,%esp
f0117889:	6a 05                	push   $0x5
f011788b:	50                   	push   %eax
f011788c:	e8 b9 36 ff ff       	call   f010af4a <set_program_priority>
f0117891:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117894:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117897:	83 ec 08             	sub    $0x8,%esp
f011789a:	6a 04                	push   $0x4
f011789c:	50                   	push   %eax
f011789d:	e8 a8 36 ff ff       	call   f010af4a <set_program_priority>
f01178a2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01178a5:	e8 da cd fe ff       	call   f0104684 <pf_calculate_free_frames>
f01178aa:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01178ad:	74 17                	je     f01178c6 <test_priority_normal_and_higher+0x6cd>
f01178af:	83 ec 04             	sub    $0x4,%esp
f01178b2:	68 64 94 13 f0       	push   $0xf0139464
f01178b7:	68 91 00 00 00       	push   $0x91
f01178bc:	68 e1 93 13 f0       	push   $0xf01393e1
f01178c1:	e8 ea 88 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01178c6:	e8 97 51 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01178cb:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01178ce:	74 17                	je     f01178e7 <test_priority_normal_and_higher+0x6ee>
f01178d0:	83 ec 04             	sub    $0x4,%esp
f01178d3:	68 64 94 13 f0       	push   $0xf0139464
f01178d8:	68 92 00 00 00       	push   $0x92
f01178dd:	68 e1 93 13 f0       	push   $0xf01393e1
f01178e2:	e8 c9 88 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01178e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01178ea:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01178f0:	83 f8 14             	cmp    $0x14,%eax
f01178f3:	75 1c                	jne    f0117911 <test_priority_normal_and_higher+0x718>
f01178f5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01178f8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01178fe:	83 f8 1e             	cmp    $0x1e,%eax
f0117901:	75 0e                	jne    f0117911 <test_priority_normal_and_higher+0x718>
f0117903:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117906:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011790c:	83 f8 28             	cmp    $0x28,%eax
f011790f:	74 17                	je     f0117928 <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f0117911:	83 ec 04             	sub    $0x4,%esp
f0117914:	68 98 95 13 f0       	push   $0xf0139598
f0117919:	68 95 00 00 00       	push   $0x95
f011791e:	68 e1 93 13 f0       	push   $0xf01393e1
f0117923:	e8 88 88 fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 30; i++)
f0117928:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f011792f:	eb 1c                	jmp    f011794d <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117931:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117934:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117937:	89 d0                	mov    %edx,%eax
f0117939:	01 c0                	add    %eax,%eax
f011793b:	01 d0                	add    %edx,%eax
f011793d:	c1 e0 03             	shl    $0x3,%eax
f0117940:	01 c8                	add    %ecx,%eax
f0117942:	05 bc 00 00 00       	add    $0xbc,%eax
f0117947:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f011794a:	ff 45 cc             	incl   -0x34(%ebp)
f011794d:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0117951:	7e de                	jle    f0117931 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117953:	e8 0a 51 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0117958:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011795b:	e8 24 cd fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117960:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117963:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117966:	83 ec 08             	sub    $0x8,%esp
f0117969:	6a 05                	push   $0x5
f011796b:	50                   	push   %eax
f011796c:	e8 d9 35 ff ff       	call   f010af4a <set_program_priority>
f0117971:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117974:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117977:	83 ec 08             	sub    $0x8,%esp
f011797a:	6a 04                	push   $0x4
f011797c:	50                   	push   %eax
f011797d:	e8 c8 35 ff ff       	call   f010af4a <set_program_priority>
f0117982:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117985:	e8 fa cc fe ff       	call   f0104684 <pf_calculate_free_frames>
f011798a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011798d:	74 17                	je     f01179a6 <test_priority_normal_and_higher+0x7ad>
f011798f:	83 ec 04             	sub    $0x4,%esp
f0117992:	68 64 94 13 f0       	push   $0xf0139464
f0117997:	68 a0 00 00 00       	push   $0xa0
f011799c:	68 e1 93 13 f0       	push   $0xf01393e1
f01179a1:	e8 0a 88 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01179a6:	e8 b7 50 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01179ab:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01179ae:	74 17                	je     f01179c7 <test_priority_normal_and_higher+0x7ce>
f01179b0:	83 ec 04             	sub    $0x4,%esp
f01179b3:	68 64 94 13 f0       	push   $0xf0139464
f01179b8:	68 a1 00 00 00       	push   $0xa1
f01179bd:	68 e1 93 13 f0       	push   $0xf01393e1
f01179c2:	e8 e9 87 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01179c7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01179ca:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01179d0:	83 f8 14             	cmp    $0x14,%eax
f01179d3:	75 1c                	jne    f01179f1 <test_priority_normal_and_higher+0x7f8>
f01179d5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01179d8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01179de:	83 f8 3c             	cmp    $0x3c,%eax
f01179e1:	75 0e                	jne    f01179f1 <test_priority_normal_and_higher+0x7f8>
f01179e3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01179e6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01179ec:	83 f8 28             	cmp    $0x28,%eax
f01179ef:	74 17                	je     f0117a08 <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f01179f1:	83 ec 04             	sub    $0x4,%esp
f01179f4:	68 98 95 13 f0       	push   $0xf0139598
f01179f9:	68 a4 00 00 00       	push   $0xa4
f01179fe:	68 e1 93 13 f0       	push   $0xf01393e1
f0117a03:	e8 a8 87 fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 60; i++)
f0117a08:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117a0f:	eb 1c                	jmp    f0117a2d <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117a11:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117a14:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117a17:	89 d0                	mov    %edx,%eax
f0117a19:	01 c0                	add    %eax,%eax
f0117a1b:	01 d0                	add    %edx,%eax
f0117a1d:	c1 e0 03             	shl    $0x3,%eax
f0117a20:	01 c8                	add    %ecx,%eax
f0117a22:	05 bc 00 00 00       	add    $0xbc,%eax
f0117a27:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0117a2a:	ff 45 c8             	incl   -0x38(%ebp)
f0117a2d:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0117a31:	7e de                	jle    f0117a11 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117a33:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0117a3a:	eb 1c                	jmp    f0117a58 <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0117a3c:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117a3f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117a42:	89 d0                	mov    %edx,%eax
f0117a44:	01 c0                	add    %eax,%eax
f0117a46:	01 d0                	add    %edx,%eax
f0117a48:	c1 e0 03             	shl    $0x3,%eax
f0117a4b:	01 c8                	add    %ecx,%eax
f0117a4d:	05 bc 00 00 00       	add    $0xbc,%eax
f0117a52:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117a55:	ff 45 c4             	incl   -0x3c(%ebp)
f0117a58:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0117a5c:	7e de                	jle    f0117a3c <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117a5e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0117a65:	eb 7d                	jmp    f0117ae4 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117a67:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117a6a:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0117a71:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117a74:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117a77:	89 d0                	mov    %edx,%eax
f0117a79:	01 c0                	add    %eax,%eax
f0117a7b:	01 d0                	add    %edx,%eax
f0117a7d:	c1 e0 03             	shl    $0x3,%eax
f0117a80:	01 d8                	add    %ebx,%eax
f0117a82:	05 b8 00 00 00       	add    $0xb8,%eax
f0117a87:	8b 00                	mov    (%eax),%eax
f0117a89:	39 c1                	cmp    %eax,%ecx
f0117a8b:	74 17                	je     f0117aa4 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f0117a8d:	83 ec 04             	sub    $0x4,%esp
f0117a90:	68 d4 95 13 f0       	push   $0xf01395d4
f0117a95:	68 b2 00 00 00       	push   $0xb2
f0117a9a:	68 e1 93 13 f0       	push   $0xf01393e1
f0117a9f:	e8 0c 87 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117aa4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117aa7:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0117aae:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117ab1:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117ab4:	89 d0                	mov    %edx,%eax
f0117ab6:	01 c0                	add    %eax,%eax
f0117ab8:	01 d0                	add    %edx,%eax
f0117aba:	c1 e0 03             	shl    $0x3,%eax
f0117abd:	01 d8                	add    %ebx,%eax
f0117abf:	05 c0 00 00 00       	add    $0xc0,%eax
f0117ac4:	8b 00                	mov    (%eax),%eax
f0117ac6:	39 c1                	cmp    %eax,%ecx
f0117ac8:	74 17                	je     f0117ae1 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f0117aca:	83 ec 04             	sub    $0x4,%esp
f0117acd:	68 d4 95 13 f0       	push   $0xf01395d4
f0117ad2:	68 b5 00 00 00       	push   $0xb5
f0117ad7:	68 e1 93 13 f0       	push   $0xf01393e1
f0117adc:	e8 cf 86 fe ff       	call   f01001b0 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117ae1:	ff 45 c0             	incl   -0x40(%ebp)
f0117ae4:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0117ae8:	0f 8e 79 ff ff ff    	jle    f0117a67 <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117aee:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0117af5:	eb 7d                	jmp    f0117b74 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117af7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117afa:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0117b01:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117b04:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117b07:	89 d0                	mov    %edx,%eax
f0117b09:	01 c0                	add    %eax,%eax
f0117b0b:	01 d0                	add    %edx,%eax
f0117b0d:	c1 e0 03             	shl    $0x3,%eax
f0117b10:	01 d8                	add    %ebx,%eax
f0117b12:	05 b8 00 00 00       	add    $0xb8,%eax
f0117b17:	8b 00                	mov    (%eax),%eax
f0117b19:	39 c1                	cmp    %eax,%ecx
f0117b1b:	74 17                	je     f0117b34 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f0117b1d:	83 ec 04             	sub    $0x4,%esp
f0117b20:	68 d4 95 13 f0       	push   $0xf01395d4
f0117b25:	68 bb 00 00 00       	push   $0xbb
f0117b2a:	68 e1 93 13 f0       	push   $0xf01393e1
f0117b2f:	e8 7c 86 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117b34:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117b37:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0117b3e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117b41:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117b44:	89 d0                	mov    %edx,%eax
f0117b46:	01 c0                	add    %eax,%eax
f0117b48:	01 d0                	add    %edx,%eax
f0117b4a:	c1 e0 03             	shl    $0x3,%eax
f0117b4d:	01 d8                	add    %ebx,%eax
f0117b4f:	05 c0 00 00 00       	add    $0xc0,%eax
f0117b54:	8b 00                	mov    (%eax),%eax
f0117b56:	39 c1                	cmp    %eax,%ecx
f0117b58:	74 17                	je     f0117b71 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f0117b5a:	83 ec 04             	sub    $0x4,%esp
f0117b5d:	68 d4 95 13 f0       	push   $0xf01395d4
f0117b62:	68 be 00 00 00       	push   $0xbe
f0117b67:	68 e1 93 13 f0       	push   $0xf01393e1
f0117b6c:	e8 3f 86 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117b71:	ff 45 bc             	incl   -0x44(%ebp)
f0117b74:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0117b78:	0f 8e 79 ff ff ff    	jle    f0117af7 <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117b7e:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0117b85:	eb 7d                	jmp    f0117c04 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117b87:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b8a:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117b91:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117b94:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117b97:	89 d0                	mov    %edx,%eax
f0117b99:	01 c0                	add    %eax,%eax
f0117b9b:	01 d0                	add    %edx,%eax
f0117b9d:	c1 e0 03             	shl    $0x3,%eax
f0117ba0:	01 d8                	add    %ebx,%eax
f0117ba2:	05 b8 00 00 00       	add    $0xb8,%eax
f0117ba7:	8b 00                	mov    (%eax),%eax
f0117ba9:	39 c1                	cmp    %eax,%ecx
f0117bab:	74 17                	je     f0117bc4 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f0117bad:	83 ec 04             	sub    $0x4,%esp
f0117bb0:	68 d4 95 13 f0       	push   $0xf01395d4
f0117bb5:	68 c4 00 00 00       	push   $0xc4
f0117bba:	68 e1 93 13 f0       	push   $0xf01393e1
f0117bbf:	e8 ec 85 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117bc4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117bc7:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117bce:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117bd1:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117bd4:	89 d0                	mov    %edx,%eax
f0117bd6:	01 c0                	add    %eax,%eax
f0117bd8:	01 d0                	add    %edx,%eax
f0117bda:	c1 e0 03             	shl    $0x3,%eax
f0117bdd:	01 d8                	add    %ebx,%eax
f0117bdf:	05 c0 00 00 00       	add    $0xc0,%eax
f0117be4:	8b 00                	mov    (%eax),%eax
f0117be6:	39 c1                	cmp    %eax,%ecx
f0117be8:	74 17                	je     f0117c01 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f0117bea:	83 ec 04             	sub    $0x4,%esp
f0117bed:	68 d4 95 13 f0       	push   $0xf01395d4
f0117bf2:	68 c7 00 00 00       	push   $0xc7
f0117bf7:	68 e1 93 13 f0       	push   $0xf01393e1
f0117bfc:	e8 af 85 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117c01:	ff 45 b8             	incl   -0x48(%ebp)
f0117c04:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117c08:	0f 8e 79 ff ff ff    	jle    f0117b87 <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117c0e:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117c15:	75 6e 61 
f0117c18:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117c1f:	6c 00 00 
f0117c22:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0117c28:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117c2d:	b8 00 00 00 00       	mov    $0x0,%eax
f0117c32:	89 d7                	mov    %edx,%edi
f0117c34:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117c36:	83 ec 0c             	sub    $0xc,%esp
f0117c39:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0117c3f:	50                   	push   %eax
f0117c40:	e8 7e 9f fe ff       	call   f0101bc3 <execute_command>
f0117c45:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f0117c48:	eb 10                	jmp    f0117c5a <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0117c4a:	83 ec 0c             	sub    $0xc,%esp
f0117c4d:	68 08 96 13 f0       	push   $0xf0139608
f0117c52:	e8 da 91 fe ff       	call   f0100e31 <cprintf>
f0117c57:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0117c5a:	90                   	nop
f0117c5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117c5e:	5b                   	pop    %ebx
f0117c5f:	5e                   	pop    %esi
f0117c60:	5f                   	pop    %edi
f0117c61:	5d                   	pop    %ebp
f0117c62:	c3                   	ret    

f0117c63 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117c63:	55                   	push   %ebp
f0117c64:	89 e5                	mov    %esp,%ebp
f0117c66:	57                   	push   %edi
f0117c67:	56                   	push   %esi
f0117c68:	53                   	push   %ebx
f0117c69:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0117c6f:	a0 3c eb 18 f0       	mov    0xf018eb3c,%al
f0117c74:	84 c0                	test   %al,%al
f0117c76:	0f 84 1b 0a 00 00    	je     f0118697 <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0117c7c:	c6 05 3c eb 18 f0 00 	movb   $0x0,0xf018eb3c
		char command[100] = "load fos_add 20";
f0117c83:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117c89:	bb 44 96 13 f0       	mov    $0xf0139644,%ebx
f0117c8e:	ba 04 00 00 00       	mov    $0x4,%edx
f0117c93:	89 c7                	mov    %eax,%edi
f0117c95:	89 de                	mov    %ebx,%esi
f0117c97:	89 d1                	mov    %edx,%ecx
f0117c99:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117c9b:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0117ca1:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117ca6:	b8 00 00 00 00       	mov    $0x0,%eax
f0117cab:	89 d7                	mov    %edx,%edi
f0117cad:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117caf:	83 ec 0c             	sub    $0xc,%esp
f0117cb2:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117cb8:	50                   	push   %eax
f0117cb9:	e8 05 9f fe ff       	call   f0101bc3 <execute_command>
f0117cbe:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0117cc1:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117cc7:	bb 4c 99 13 f0       	mov    $0xf013994c,%ebx
f0117ccc:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117cd1:	89 c7                	mov    %eax,%edi
f0117cd3:	89 de                	mov    %ebx,%esi
f0117cd5:	89 d1                	mov    %edx,%ecx
f0117cd7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117cd9:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117cdf:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117ce4:	b0 00                	mov    $0x0,%al
f0117ce6:	89 d7                	mov    %edx,%edi
f0117ce8:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117cea:	83 ec 0c             	sub    $0xc,%esp
f0117ced:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117cf3:	50                   	push   %eax
f0117cf4:	e8 ca 9e fe ff       	call   f0101bc3 <execute_command>
f0117cf9:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117cfc:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117d02:	bb b0 99 13 f0       	mov    $0xf01399b0,%ebx
f0117d07:	ba 17 00 00 00       	mov    $0x17,%edx
f0117d0c:	89 c7                	mov    %eax,%edi
f0117d0e:	89 de                	mov    %ebx,%esi
f0117d10:	89 d1                	mov    %edx,%ecx
f0117d12:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117d14:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117d1a:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117d1f:	b0 00                	mov    $0x0,%al
f0117d21:	89 d7                	mov    %edx,%edi
f0117d23:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117d25:	83 ec 0c             	sub    $0xc,%esp
f0117d28:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117d2e:	50                   	push   %eax
f0117d2f:	e8 8f 9e fe ff       	call   f0101bc3 <execute_command>
f0117d34:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117d37:	83 ec 04             	sub    $0x4,%esp
f0117d3a:	6a 00                	push   $0x0
f0117d3c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117d3f:	50                   	push   %eax
f0117d40:	68 00 10 00 00       	push   $0x1000
f0117d45:	e8 20 1d ff ff       	call   f0109a6a <envid2env>
f0117d4a:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117d4d:	83 ec 04             	sub    $0x4,%esp
f0117d50:	6a 00                	push   $0x0
f0117d52:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117d55:	50                   	push   %eax
f0117d56:	68 01 10 00 00       	push   $0x1001
f0117d5b:	e8 0a 1d ff ff       	call   f0109a6a <envid2env>
f0117d60:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117d63:	83 ec 04             	sub    $0x4,%esp
f0117d66:	6a 00                	push   $0x0
f0117d68:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117d6b:	50                   	push   %eax
f0117d6c:	68 02 10 00 00       	push   $0x1002
f0117d71:	e8 f4 1c ff ff       	call   f0109a6a <envid2env>
f0117d76:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117d79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d7c:	85 c0                	test   %eax,%eax
f0117d7e:	74 0e                	je     f0117d8e <test_priority_normal_and_lower+0x12b>
f0117d80:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d83:	85 c0                	test   %eax,%eax
f0117d85:	74 07                	je     f0117d8e <test_priority_normal_and_lower+0x12b>
f0117d87:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d8a:	85 c0                	test   %eax,%eax
f0117d8c:	75 17                	jne    f0117da5 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117d8e:	83 ec 04             	sub    $0x4,%esp
f0117d91:	68 c8 93 13 f0       	push   $0xf01393c8
f0117d96:	68 f2 00 00 00       	push   $0xf2
f0117d9b:	68 e1 93 13 f0       	push   $0xf01393e1
f0117da0:	e8 0b 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117da5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117da8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117dae:	83 f8 14             	cmp    $0x14,%eax
f0117db1:	75 1c                	jne    f0117dcf <test_priority_normal_and_lower+0x16c>
f0117db3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117db6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117dbc:	83 f8 1e             	cmp    $0x1e,%eax
f0117dbf:	75 0e                	jne    f0117dcf <test_priority_normal_and_lower+0x16c>
f0117dc1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117dc4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117dca:	83 f8 28             	cmp    $0x28,%eax
f0117dcd:	74 17                	je     f0117de6 <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f0117dcf:	83 ec 04             	sub    $0x4,%esp
f0117dd2:	68 70 97 13 f0       	push   $0xf0139770
f0117dd7:	68 f5 00 00 00       	push   $0xf5
f0117ddc:	68 e1 93 13 f0       	push   $0xf01393e1
f0117de1:	e8 ca 83 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f0117de6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117ded:	eb 47                	jmp    f0117e36 <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117def:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117df2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117df5:	89 d0                	mov    %edx,%eax
f0117df7:	01 c0                	add    %eax,%eax
f0117df9:	01 d0                	add    %edx,%eax
f0117dfb:	c1 e0 03             	shl    $0x3,%eax
f0117dfe:	01 c8                	add    %ecx,%eax
f0117e00:	05 b8 00 00 00       	add    $0xb8,%eax
f0117e05:	8b 10                	mov    (%eax),%edx
f0117e07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117e0a:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117e11:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117e14:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117e17:	89 d0                	mov    %edx,%eax
f0117e19:	01 c0                	add    %eax,%eax
f0117e1b:	01 d0                	add    %edx,%eax
f0117e1d:	c1 e0 03             	shl    $0x3,%eax
f0117e20:	01 c8                	add    %ecx,%eax
f0117e22:	05 c0 00 00 00       	add    $0xc0,%eax
f0117e27:	8b 10                	mov    (%eax),%edx
f0117e29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117e2c:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117e33:	ff 45 e4             	incl   -0x1c(%ebp)
f0117e36:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117e3a:	7e b3                	jle    f0117def <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117e3c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117e43:	eb 47                	jmp    f0117e8c <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117e45:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117e48:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117e4b:	89 d0                	mov    %edx,%eax
f0117e4d:	01 c0                	add    %eax,%eax
f0117e4f:	01 d0                	add    %edx,%eax
f0117e51:	c1 e0 03             	shl    $0x3,%eax
f0117e54:	01 c8                	add    %ecx,%eax
f0117e56:	05 b8 00 00 00       	add    $0xb8,%eax
f0117e5b:	8b 10                	mov    (%eax),%edx
f0117e5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117e60:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117e67:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117e6a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117e6d:	89 d0                	mov    %edx,%eax
f0117e6f:	01 c0                	add    %eax,%eax
f0117e71:	01 d0                	add    %edx,%eax
f0117e73:	c1 e0 03             	shl    $0x3,%eax
f0117e76:	01 c8                	add    %ecx,%eax
f0117e78:	05 c0 00 00 00       	add    $0xc0,%eax
f0117e7d:	8b 10                	mov    (%eax),%edx
f0117e7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117e82:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117e89:	ff 45 e0             	incl   -0x20(%ebp)
f0117e8c:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117e90:	7e b3                	jle    f0117e45 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117e92:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117e99:	eb 47                	jmp    f0117ee2 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117e9b:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117e9e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117ea1:	89 d0                	mov    %edx,%eax
f0117ea3:	01 c0                	add    %eax,%eax
f0117ea5:	01 d0                	add    %edx,%eax
f0117ea7:	c1 e0 03             	shl    $0x3,%eax
f0117eaa:	01 c8                	add    %ecx,%eax
f0117eac:	05 b8 00 00 00       	add    $0xb8,%eax
f0117eb1:	8b 10                	mov    (%eax),%edx
f0117eb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117eb6:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117ebd:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117ec0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117ec3:	89 d0                	mov    %edx,%eax
f0117ec5:	01 c0                	add    %eax,%eax
f0117ec7:	01 d0                	add    %edx,%eax
f0117ec9:	c1 e0 03             	shl    $0x3,%eax
f0117ecc:	01 c8                	add    %ecx,%eax
f0117ece:	05 c0 00 00 00       	add    $0xc0,%eax
f0117ed3:	8b 10                	mov    (%eax),%edx
f0117ed5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117ed8:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117edf:	ff 45 dc             	incl   -0x24(%ebp)
f0117ee2:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117ee6:	7e b3                	jle    f0117e9b <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117ee8:	e8 75 4b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0117eed:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117ef0:	e8 8f c7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117ef5:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117ef8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117efb:	83 ec 08             	sub    $0x8,%esp
f0117efe:	6a 03                	push   $0x3
f0117f00:	50                   	push   %eax
f0117f01:	e8 44 30 ff ff       	call   f010af4a <set_program_priority>
f0117f06:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117f09:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117f0c:	83 ec 08             	sub    $0x8,%esp
f0117f0f:	6a 03                	push   $0x3
f0117f11:	50                   	push   %eax
f0117f12:	e8 33 30 ff ff       	call   f010af4a <set_program_priority>
f0117f17:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117f1a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117f1d:	83 ec 08             	sub    $0x8,%esp
f0117f20:	6a 03                	push   $0x3
f0117f22:	50                   	push   %eax
f0117f23:	e8 22 30 ff ff       	call   f010af4a <set_program_priority>
f0117f28:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117f2b:	e8 54 c7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117f30:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117f33:	74 17                	je     f0117f4c <test_priority_normal_and_lower+0x2e9>
f0117f35:	83 ec 04             	sub    $0x4,%esp
f0117f38:	68 64 94 13 f0       	push   $0xf0139464
f0117f3d:	68 11 01 00 00       	push   $0x111
f0117f42:	68 e1 93 13 f0       	push   $0xf01393e1
f0117f47:	e8 64 82 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117f4c:	e8 11 4b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0117f51:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117f54:	74 17                	je     f0117f6d <test_priority_normal_and_lower+0x30a>
f0117f56:	83 ec 04             	sub    $0x4,%esp
f0117f59:	68 64 94 13 f0       	push   $0xf0139464
f0117f5e:	68 12 01 00 00       	push   $0x112
f0117f63:	68 e1 93 13 f0       	push   $0xf01393e1
f0117f68:	e8 43 82 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117f6d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117f70:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117f76:	83 f8 14             	cmp    $0x14,%eax
f0117f79:	75 1c                	jne    f0117f97 <test_priority_normal_and_lower+0x334>
f0117f7b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117f7e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117f84:	83 f8 1e             	cmp    $0x1e,%eax
f0117f87:	75 0e                	jne    f0117f97 <test_priority_normal_and_lower+0x334>
f0117f89:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117f8c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117f92:	83 f8 28             	cmp    $0x28,%eax
f0117f95:	74 17                	je     f0117fae <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117f97:	83 ec 04             	sub    $0x4,%esp
f0117f9a:	68 90 94 13 f0       	push   $0xf0139490
f0117f9f:	68 15 01 00 00       	push   $0x115
f0117fa4:	68 e1 93 13 f0       	push   $0xf01393e1
f0117fa9:	e8 02 82 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117fae:	e8 af 4a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0117fb3:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117fb6:	e8 c9 c6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117fbb:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117fbe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117fc1:	83 ec 08             	sub    $0x8,%esp
f0117fc4:	6a 02                	push   $0x2
f0117fc6:	50                   	push   %eax
f0117fc7:	e8 7e 2f ff ff       	call   f010af4a <set_program_priority>
f0117fcc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117fcf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117fd2:	83 ec 08             	sub    $0x8,%esp
f0117fd5:	6a 02                	push   $0x2
f0117fd7:	50                   	push   %eax
f0117fd8:	e8 6d 2f ff ff       	call   f010af4a <set_program_priority>
f0117fdd:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117fe0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117fe3:	83 ec 08             	sub    $0x8,%esp
f0117fe6:	6a 02                	push   $0x2
f0117fe8:	50                   	push   %eax
f0117fe9:	e8 5c 2f ff ff       	call   f010af4a <set_program_priority>
f0117fee:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117ff1:	e8 8e c6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117ff6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117ff9:	74 17                	je     f0118012 <test_priority_normal_and_lower+0x3af>
f0117ffb:	83 ec 04             	sub    $0x4,%esp
f0117ffe:	68 64 94 13 f0       	push   $0xf0139464
f0118003:	68 1f 01 00 00       	push   $0x11f
f0118008:	68 e1 93 13 f0       	push   $0xf01393e1
f011800d:	e8 9e 81 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0118012:	e8 4b 4a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118017:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011801a:	74 21                	je     f011803d <test_priority_normal_and_lower+0x3da>
f011801c:	e8 41 4a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118021:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0118024:	29 c2                	sub    %eax,%edx
f0118026:	89 d0                	mov    %edx,%eax
f0118028:	50                   	push   %eax
f0118029:	68 e4 94 13 f0       	push   $0xf01394e4
f011802e:	68 20 01 00 00       	push   $0x120
f0118033:	68 e1 93 13 f0       	push   $0xf01393e1
f0118038:	e8 73 81 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011803d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118040:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118046:	83 f8 0a             	cmp    $0xa,%eax
f0118049:	75 1c                	jne    f0118067 <test_priority_normal_and_lower+0x404>
f011804b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011804e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118054:	83 f8 0f             	cmp    $0xf,%eax
f0118057:	75 0e                	jne    f0118067 <test_priority_normal_and_lower+0x404>
f0118059:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011805c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118062:	83 f8 14             	cmp    $0x14,%eax
f0118065:	74 17                	je     f011807e <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0118067:	83 ec 04             	sub    $0x4,%esp
f011806a:	68 14 95 13 f0       	push   $0xf0139514
f011806f:	68 23 01 00 00       	push   $0x123
f0118074:	68 e1 93 13 f0       	push   $0xf01393e1
f0118079:	e8 32 81 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f011807e:	e8 df 49 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118083:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118086:	e8 f9 c5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011808b:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011808e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118091:	83 ec 08             	sub    $0x8,%esp
f0118094:	6a 02                	push   $0x2
f0118096:	50                   	push   %eax
f0118097:	e8 ae 2e ff ff       	call   f010af4a <set_program_priority>
f011809c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011809f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180a2:	83 ec 08             	sub    $0x8,%esp
f01180a5:	6a 02                	push   $0x2
f01180a7:	50                   	push   %eax
f01180a8:	e8 9d 2e ff ff       	call   f010af4a <set_program_priority>
f01180ad:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01180b0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180b3:	83 ec 08             	sub    $0x8,%esp
f01180b6:	6a 02                	push   $0x2
f01180b8:	50                   	push   %eax
f01180b9:	e8 8c 2e ff ff       	call   f010af4a <set_program_priority>
f01180be:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01180c1:	e8 be c5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01180c6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01180c9:	74 17                	je     f01180e2 <test_priority_normal_and_lower+0x47f>
f01180cb:	83 ec 04             	sub    $0x4,%esp
f01180ce:	68 64 94 13 f0       	push   $0xf0139464
f01180d3:	68 2d 01 00 00       	push   $0x12d
f01180d8:	68 e1 93 13 f0       	push   $0xf01393e1
f01180dd:	e8 ce 80 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01180e2:	e8 7b 49 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01180e7:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01180ea:	74 21                	je     f011810d <test_priority_normal_and_lower+0x4aa>
f01180ec:	e8 71 49 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01180f1:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01180f4:	29 c2                	sub    %eax,%edx
f01180f6:	89 d0                	mov    %edx,%eax
f01180f8:	50                   	push   %eax
f01180f9:	68 e4 94 13 f0       	push   $0xf01394e4
f01180fe:	68 2e 01 00 00       	push   $0x12e
f0118103:	68 e1 93 13 f0       	push   $0xf01393e1
f0118108:	e8 a3 80 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011810d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118110:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118116:	83 f8 0a             	cmp    $0xa,%eax
f0118119:	75 1c                	jne    f0118137 <test_priority_normal_and_lower+0x4d4>
f011811b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011811e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118124:	83 f8 0f             	cmp    $0xf,%eax
f0118127:	75 0e                	jne    f0118137 <test_priority_normal_and_lower+0x4d4>
f0118129:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011812c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118132:	83 f8 0a             	cmp    $0xa,%eax
f0118135:	74 17                	je     f011814e <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0118137:	83 ec 04             	sub    $0x4,%esp
f011813a:	68 14 95 13 f0       	push   $0xf0139514
f011813f:	68 31 01 00 00       	push   $0x131
f0118144:	68 e1 93 13 f0       	push   $0xf01393e1
f0118149:	e8 62 80 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 10; i++)
f011814e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0118155:	eb 7d                	jmp    f01181d4 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0118157:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011815a:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0118161:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0118164:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118167:	89 d0                	mov    %edx,%eax
f0118169:	01 c0                	add    %eax,%eax
f011816b:	01 d0                	add    %edx,%eax
f011816d:	c1 e0 03             	shl    $0x3,%eax
f0118170:	01 d8                	add    %ebx,%eax
f0118172:	05 b8 00 00 00       	add    $0xb8,%eax
f0118177:	8b 00                	mov    (%eax),%eax
f0118179:	39 c1                	cmp    %eax,%ecx
f011817b:	74 17                	je     f0118194 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f011817d:	83 ec 04             	sub    $0x4,%esp
f0118180:	68 d4 95 13 f0       	push   $0xf01395d4
f0118185:	68 36 01 00 00       	push   $0x136
f011818a:	68 e1 93 13 f0       	push   $0xf01393e1
f011818f:	e8 1c 80 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0118194:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118197:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011819e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01181a1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01181a4:	89 d0                	mov    %edx,%eax
f01181a6:	01 c0                	add    %eax,%eax
f01181a8:	01 d0                	add    %edx,%eax
f01181aa:	c1 e0 03             	shl    $0x3,%eax
f01181ad:	01 d8                	add    %ebx,%eax
f01181af:	05 c0 00 00 00       	add    $0xc0,%eax
f01181b4:	8b 00                	mov    (%eax),%eax
f01181b6:	39 c1                	cmp    %eax,%ecx
f01181b8:	74 17                	je     f01181d1 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f01181ba:	83 ec 04             	sub    $0x4,%esp
f01181bd:	68 d4 95 13 f0       	push   $0xf01395d4
f01181c2:	68 39 01 00 00       	push   $0x139
f01181c7:	68 e1 93 13 f0       	push   $0xf01393e1
f01181cc:	e8 df 7f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01181d1:	ff 45 d8             	incl   -0x28(%ebp)
f01181d4:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01181d8:	0f 8e 79 ff ff ff    	jle    f0118157 <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01181de:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01181e5:	eb 7d                	jmp    f0118264 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01181e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01181ea:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01181f1:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01181f4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01181f7:	89 d0                	mov    %edx,%eax
f01181f9:	01 c0                	add    %eax,%eax
f01181fb:	01 d0                	add    %edx,%eax
f01181fd:	c1 e0 03             	shl    $0x3,%eax
f0118200:	01 d8                	add    %ebx,%eax
f0118202:	05 b8 00 00 00       	add    $0xb8,%eax
f0118207:	8b 00                	mov    (%eax),%eax
f0118209:	39 c1                	cmp    %eax,%ecx
f011820b:	74 17                	je     f0118224 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f011820d:	83 ec 04             	sub    $0x4,%esp
f0118210:	68 d4 95 13 f0       	push   $0xf01395d4
f0118215:	68 3f 01 00 00       	push   $0x13f
f011821a:	68 e1 93 13 f0       	push   $0xf01393e1
f011821f:	e8 8c 7f fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0118224:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118227:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011822e:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118231:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0118234:	89 d0                	mov    %edx,%eax
f0118236:	01 c0                	add    %eax,%eax
f0118238:	01 d0                	add    %edx,%eax
f011823a:	c1 e0 03             	shl    $0x3,%eax
f011823d:	01 d8                	add    %ebx,%eax
f011823f:	05 c0 00 00 00       	add    $0xc0,%eax
f0118244:	8b 00                	mov    (%eax),%eax
f0118246:	39 c1                	cmp    %eax,%ecx
f0118248:	74 17                	je     f0118261 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f011824a:	83 ec 04             	sub    $0x4,%esp
f011824d:	68 d4 95 13 f0       	push   $0xf01395d4
f0118252:	68 42 01 00 00       	push   $0x142
f0118257:	68 e1 93 13 f0       	push   $0xf01393e1
f011825c:	e8 4f 7f fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0118261:	ff 45 d4             	incl   -0x2c(%ebp)
f0118264:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0118268:	0f 8e 79 ff ff ff    	jle    f01181e7 <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011826e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0118275:	eb 7d                	jmp    f01182f4 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0118277:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011827a:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0118281:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118284:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0118287:	89 d0                	mov    %edx,%eax
f0118289:	01 c0                	add    %eax,%eax
f011828b:	01 d0                	add    %edx,%eax
f011828d:	c1 e0 03             	shl    $0x3,%eax
f0118290:	01 d8                	add    %ebx,%eax
f0118292:	05 b8 00 00 00       	add    $0xb8,%eax
f0118297:	8b 00                	mov    (%eax),%eax
f0118299:	39 c1                	cmp    %eax,%ecx
f011829b:	74 17                	je     f01182b4 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f011829d:	83 ec 04             	sub    $0x4,%esp
f01182a0:	68 d4 95 13 f0       	push   $0xf01395d4
f01182a5:	68 48 01 00 00       	push   $0x148
f01182aa:	68 e1 93 13 f0       	push   $0xf01393e1
f01182af:	e8 fc 7e fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01182b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01182b7:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01182be:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01182c1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01182c4:	89 d0                	mov    %edx,%eax
f01182c6:	01 c0                	add    %eax,%eax
f01182c8:	01 d0                	add    %edx,%eax
f01182ca:	c1 e0 03             	shl    $0x3,%eax
f01182cd:	01 d8                	add    %ebx,%eax
f01182cf:	05 c0 00 00 00       	add    $0xc0,%eax
f01182d4:	8b 00                	mov    (%eax),%eax
f01182d6:	39 c1                	cmp    %eax,%ecx
f01182d8:	74 17                	je     f01182f1 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f01182da:	83 ec 04             	sub    $0x4,%esp
f01182dd:	68 d4 95 13 f0       	push   $0xf01395d4
f01182e2:	68 4b 01 00 00       	push   $0x14b
f01182e7:	68 e1 93 13 f0       	push   $0xf01393e1
f01182ec:	e8 bf 7e fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01182f1:	ff 45 d0             	incl   -0x30(%ebp)
f01182f4:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01182f8:	0f 8e 79 ff ff ff    	jle    f0118277 <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01182fe:	e8 5f 47 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118303:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118306:	e8 79 c3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011830b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011830e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118311:	83 ec 08             	sub    $0x8,%esp
f0118314:	6a 01                	push   $0x1
f0118316:	50                   	push   %eax
f0118317:	e8 2e 2c ff ff       	call   f010af4a <set_program_priority>
f011831c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f011831f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118322:	83 ec 08             	sub    $0x8,%esp
f0118325:	6a 01                	push   $0x1
f0118327:	50                   	push   %eax
f0118328:	e8 1d 2c ff ff       	call   f010af4a <set_program_priority>
f011832d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0118330:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118333:	83 ec 08             	sub    $0x8,%esp
f0118336:	6a 01                	push   $0x1
f0118338:	50                   	push   %eax
f0118339:	e8 0c 2c ff ff       	call   f010af4a <set_program_priority>
f011833e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118341:	e8 3e c3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118346:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0118349:	74 17                	je     f0118362 <test_priority_normal_and_lower+0x6ff>
f011834b:	83 ec 04             	sub    $0x4,%esp
f011834e:	68 64 94 13 f0       	push   $0xf0139464
f0118353:	68 54 01 00 00       	push   $0x154
f0118358:	68 e1 93 13 f0       	push   $0xf01393e1
f011835d:	e8 4e 7e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0118362:	e8 fb 46 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118367:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011836a:	83 f8 0d             	cmp    $0xd,%eax
f011836d:	74 17                	je     f0118386 <test_priority_normal_and_lower+0x723>
f011836f:	83 ec 04             	sub    $0x4,%esp
f0118372:	68 bc 97 13 f0       	push   $0xf01397bc
f0118377:	68 55 01 00 00       	push   $0x155
f011837c:	68 e1 93 13 f0       	push   $0xf01393e1
f0118381:	e8 2a 7e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0118386:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118389:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011838f:	83 f8 05             	cmp    $0x5,%eax
f0118392:	75 1c                	jne    f01183b0 <test_priority_normal_and_lower+0x74d>
f0118394:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118397:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011839d:	83 f8 07             	cmp    $0x7,%eax
f01183a0:	75 0e                	jne    f01183b0 <test_priority_normal_and_lower+0x74d>
f01183a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01183a5:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01183ab:	83 f8 05             	cmp    $0x5,%eax
f01183ae:	74 17                	je     f01183c7 <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f01183b0:	83 ec 04             	sub    $0x4,%esp
f01183b3:	68 04 98 13 f0       	push   $0xf0139804
f01183b8:	68 58 01 00 00       	push   $0x158
f01183bd:	68 e1 93 13 f0       	push   $0xf01393e1
f01183c2:	e8 e9 7d fe ff       	call   f01001b0 <_panic>


		freeFrames = sys_calculate_free_frames();
f01183c7:	e8 96 46 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01183cc:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01183cf:	e8 b0 c2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01183d4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01183d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01183da:	83 ec 08             	sub    $0x8,%esp
f01183dd:	6a 01                	push   $0x1
f01183df:	50                   	push   %eax
f01183e0:	e8 65 2b ff ff       	call   f010af4a <set_program_priority>
f01183e5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01183e8:	e8 97 c2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01183ed:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01183f0:	74 17                	je     f0118409 <test_priority_normal_and_lower+0x7a6>
f01183f2:	83 ec 04             	sub    $0x4,%esp
f01183f5:	68 64 94 13 f0       	push   $0xf0139464
f01183fa:	68 5e 01 00 00       	push   $0x15e
f01183ff:	68 e1 93 13 f0       	push   $0xf01393e1
f0118404:	e8 a7 7d fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0118409:	e8 54 46 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011840e:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0118411:	83 f8 03             	cmp    $0x3,%eax
f0118414:	74 17                	je     f011842d <test_priority_normal_and_lower+0x7ca>
f0118416:	83 ec 04             	sub    $0x4,%esp
f0118419:	68 64 94 13 f0       	push   $0xf0139464
f011841e:	68 5f 01 00 00       	push   $0x15f
f0118423:	68 e1 93 13 f0       	push   $0xf01393e1
f0118428:	e8 83 7d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011842d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118430:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118436:	83 f8 02             	cmp    $0x2,%eax
f0118439:	75 1c                	jne    f0118457 <test_priority_normal_and_lower+0x7f4>
f011843b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011843e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118444:	83 f8 07             	cmp    $0x7,%eax
f0118447:	75 0e                	jne    f0118457 <test_priority_normal_and_lower+0x7f4>
f0118449:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011844c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118452:	83 f8 05             	cmp    $0x5,%eax
f0118455:	74 17                	je     f011846e <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f0118457:	83 ec 04             	sub    $0x4,%esp
f011845a:	68 98 95 13 f0       	push   $0xf0139598
f011845f:	68 62 01 00 00       	push   $0x162
f0118464:	68 e1 93 13 f0       	push   $0xf01393e1
f0118469:	e8 42 7d fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 2; i++)
f011846e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0118475:	e9 83 00 00 00       	jmp    f01184fd <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011847a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011847d:	83 c0 08             	add    $0x8,%eax
f0118480:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0118487:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011848a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011848d:	89 d0                	mov    %edx,%eax
f011848f:	01 c0                	add    %eax,%eax
f0118491:	01 d0                	add    %edx,%eax
f0118493:	c1 e0 03             	shl    $0x3,%eax
f0118496:	01 d8                	add    %ebx,%eax
f0118498:	05 b8 00 00 00       	add    $0xb8,%eax
f011849d:	8b 00                	mov    (%eax),%eax
f011849f:	39 c1                	cmp    %eax,%ecx
f01184a1:	74 17                	je     f01184ba <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01184a3:	83 ec 04             	sub    $0x4,%esp
f01184a6:	68 34 98 13 f0       	push   $0xf0139834
f01184ab:	68 67 01 00 00       	push   $0x167
f01184b0:	68 e1 93 13 f0       	push   $0xf01393e1
f01184b5:	e8 f6 7c fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01184ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01184bd:	83 c0 08             	add    $0x8,%eax
f01184c0:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01184c7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01184ca:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01184cd:	89 d0                	mov    %edx,%eax
f01184cf:	01 c0                	add    %eax,%eax
f01184d1:	01 d0                	add    %edx,%eax
f01184d3:	c1 e0 03             	shl    $0x3,%eax
f01184d6:	01 d8                	add    %ebx,%eax
f01184d8:	05 c0 00 00 00       	add    $0xc0,%eax
f01184dd:	8b 00                	mov    (%eax),%eax
f01184df:	39 c1                	cmp    %eax,%ecx
f01184e1:	74 17                	je     f01184fa <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01184e3:	83 ec 04             	sub    $0x4,%esp
f01184e6:	68 34 98 13 f0       	push   $0xf0139834
f01184eb:	68 6a 01 00 00       	push   $0x16a
f01184f0:	68 e1 93 13 f0       	push   $0xf01393e1
f01184f5:	e8 b6 7c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01184fa:	ff 45 cc             	incl   -0x34(%ebp)
f01184fd:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0118501:	0f 8e 73 ff ff ff    	jle    f011847a <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0118507:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f011850e:	e9 83 00 00 00       	jmp    f0118596 <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0118513:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118516:	83 c0 03             	add    $0x3,%eax
f0118519:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0118520:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118523:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0118526:	89 d0                	mov    %edx,%eax
f0118528:	01 c0                	add    %eax,%eax
f011852a:	01 d0                	add    %edx,%eax
f011852c:	c1 e0 03             	shl    $0x3,%eax
f011852f:	01 d8                	add    %ebx,%eax
f0118531:	05 b8 00 00 00       	add    $0xb8,%eax
f0118536:	8b 00                	mov    (%eax),%eax
f0118538:	39 c1                	cmp    %eax,%ecx
f011853a:	74 17                	je     f0118553 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f011853c:	ff 75 c8             	pushl  -0x38(%ebp)
f011853f:	68 a0 98 13 f0       	push   $0xf01398a0
f0118544:	68 70 01 00 00       	push   $0x170
f0118549:	68 e1 93 13 f0       	push   $0xf01393e1
f011854e:	e8 5d 7c fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0118553:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118556:	83 c0 03             	add    $0x3,%eax
f0118559:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0118560:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118563:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0118566:	89 d0                	mov    %edx,%eax
f0118568:	01 c0                	add    %eax,%eax
f011856a:	01 d0                	add    %edx,%eax
f011856c:	c1 e0 03             	shl    $0x3,%eax
f011856f:	01 d8                	add    %ebx,%eax
f0118571:	05 c0 00 00 00       	add    $0xc0,%eax
f0118576:	8b 00                	mov    (%eax),%eax
f0118578:	39 c1                	cmp    %eax,%ecx
f011857a:	74 17                	je     f0118593 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011857c:	83 ec 04             	sub    $0x4,%esp
f011857f:	68 34 98 13 f0       	push   $0xf0139834
f0118584:	68 73 01 00 00       	push   $0x173
f0118589:	68 e1 93 13 f0       	push   $0xf01393e1
f011858e:	e8 1d 7c fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0118593:	ff 45 c8             	incl   -0x38(%ebp)
f0118596:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f011859a:	0f 8e 73 ff ff ff    	jle    f0118513 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01185a0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01185a7:	e9 83 00 00 00       	jmp    f011862f <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01185ac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01185af:	83 c0 05             	add    $0x5,%eax
f01185b2:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01185b9:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01185bc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01185bf:	89 d0                	mov    %edx,%eax
f01185c1:	01 c0                	add    %eax,%eax
f01185c3:	01 d0                	add    %edx,%eax
f01185c5:	c1 e0 03             	shl    $0x3,%eax
f01185c8:	01 d8                	add    %ebx,%eax
f01185ca:	05 b8 00 00 00       	add    $0xb8,%eax
f01185cf:	8b 00                	mov    (%eax),%eax
f01185d1:	39 c1                	cmp    %eax,%ecx
f01185d3:	74 17                	je     f01185ec <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01185d5:	83 ec 04             	sub    $0x4,%esp
f01185d8:	68 34 98 13 f0       	push   $0xf0139834
f01185dd:	68 79 01 00 00       	push   $0x179
f01185e2:	68 e1 93 13 f0       	push   $0xf01393e1
f01185e7:	e8 c4 7b fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01185ec:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01185ef:	83 c0 05             	add    $0x5,%eax
f01185f2:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01185f9:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01185fc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01185ff:	89 d0                	mov    %edx,%eax
f0118601:	01 c0                	add    %eax,%eax
f0118603:	01 d0                	add    %edx,%eax
f0118605:	c1 e0 03             	shl    $0x3,%eax
f0118608:	01 d8                	add    %ebx,%eax
f011860a:	05 c0 00 00 00       	add    $0xc0,%eax
f011860f:	8b 00                	mov    (%eax),%eax
f0118611:	39 c1                	cmp    %eax,%ecx
f0118613:	74 17                	je     f011862c <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118615:	83 ec 04             	sub    $0x4,%esp
f0118618:	68 34 98 13 f0       	push   $0xf0139834
f011861d:	68 7c 01 00 00       	push   $0x17c
f0118622:	68 e1 93 13 f0       	push   $0xf01393e1
f0118627:	e8 84 7b fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011862c:	ff 45 c4             	incl   -0x3c(%ebp)
f011862f:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0118633:	0f 8e 73 ff ff ff    	jle    f01185ac <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0118639:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011863c:	83 ec 08             	sub    $0x8,%esp
f011863f:	6a 05                	push   $0x5
f0118641:	50                   	push   %eax
f0118642:	e8 03 29 ff ff       	call   f010af4a <set_program_priority>
f0118647:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f011864a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011864d:	83 ec 08             	sub    $0x8,%esp
f0118650:	6a 05                	push   $0x5
f0118652:	50                   	push   %eax
f0118653:	e8 f2 28 ff ff       	call   f010af4a <set_program_priority>
f0118658:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011865b:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0118662:	75 6e 61 
f0118665:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f011866c:	6c 00 00 
f011866f:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0118675:	b9 17 00 00 00       	mov    $0x17,%ecx
f011867a:	b8 00 00 00 00       	mov    $0x0,%eax
f011867f:	89 d7                	mov    %edx,%edi
f0118681:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0118683:	83 ec 0c             	sub    $0xc,%esp
f0118686:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f011868c:	50                   	push   %eax
f011868d:	e8 31 95 fe ff       	call   f0101bc3 <execute_command>
f0118692:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f0118695:	eb 10                	jmp    f01186a7 <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0118697:	83 ec 0c             	sub    $0xc,%esp
f011869a:	68 10 99 13 f0       	push   $0xf0139910
f011869f:	e8 8d 87 fe ff       	call   f0100e31 <cprintf>
f01186a4:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f01186a7:	90                   	nop
f01186a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01186ab:	5b                   	pop    %ebx
f01186ac:	5e                   	pop    %esi
f01186ad:	5f                   	pop    %edi
f01186ae:	5d                   	pop    %ebp
f01186af:	c3                   	ret    

f01186b0 <isKHeapPlacementStrategyNEXTFIT>:
f01186b0:	55                   	push   %ebp
f01186b1:	89 e5                	mov    %esp,%ebp
f01186b3:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01186b8:	83 f8 03             	cmp    $0x3,%eax
f01186bb:	75 04                	jne    f01186c1 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01186bd:	b0 01                	mov    $0x1,%al
f01186bf:	eb 02                	jmp    f01186c3 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01186c1:	b0 00                	mov    $0x0,%al
f01186c3:	5d                   	pop    %ebp
f01186c4:	c3                   	ret    

f01186c5 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f01186c5:	55                   	push   %ebp
f01186c6:	89 e5                	mov    %esp,%ebp
f01186c8:	57                   	push   %edi
f01186c9:	53                   	push   %ebx
f01186ca:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f01186d0:	83 ec 0c             	sub    $0xc,%esp
f01186d3:	68 14 9a 13 f0       	push   $0xf0139a14
f01186d8:	e8 54 87 fe ff       	call   f0100e31 <cprintf>
f01186dd:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01186e0:	83 ec 0c             	sub    $0xc,%esp
f01186e3:	68 44 9a 13 f0       	push   $0xf0139a44
f01186e8:	e8 44 87 fe ff       	call   f0100e31 <cprintf>
f01186ed:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01186f0:	83 ec 0c             	sub    $0xc,%esp
f01186f3:	68 14 9a 13 f0       	push   $0xf0139a14
f01186f8:	e8 34 87 fe ff       	call   f0100e31 <cprintf>
f01186fd:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118700:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0118704:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0118708:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f011870e:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0118714:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011871b:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118722:	e8 3b 43 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118727:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011872a:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f0118730:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118735:	b8 00 00 00 00       	mov    $0x0,%eax
f011873a:	89 d7                	mov    %edx,%edi
f011873c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f011873e:	e8 1f 43 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118743:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0118746:	e8 39 bf fe ff       	call   f0104684 <pf_calculate_free_frames>
f011874b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f011874e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0118755:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011875a:	0f b6 d0             	movzbl %al,%edx
f011875d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118760:	01 d0                	add    %edx,%eax
f0118762:	48                   	dec    %eax
f0118763:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0118766:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118769:	ba 00 00 00 00       	mov    $0x0,%edx
f011876e:	f7 75 d4             	divl   -0x2c(%ebp)
f0118771:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118774:	29 d0                	sub    %edx,%eax
f0118776:	89 c1                	mov    %eax,%ecx
f0118778:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011877f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118784:	0f b6 c0             	movzbl %al,%eax
f0118787:	c1 e0 04             	shl    $0x4,%eax
f011878a:	89 c2                	mov    %eax,%edx
f011878c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011878f:	01 d0                	add    %edx,%eax
f0118791:	48                   	dec    %eax
f0118792:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0118795:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118798:	ba 00 00 00 00       	mov    $0x0,%edx
f011879d:	f7 75 cc             	divl   -0x34(%ebp)
f01187a0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01187a3:	29 d0                	sub    %edx,%eax
f01187a5:	01 c8                	add    %ecx,%eax
f01187a7:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01187ac:	29 c2                	sub    %eax,%edx
f01187ae:	89 d0                	mov    %edx,%eax
f01187b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f01187b3:	83 ec 0c             	sub    $0xc,%esp
f01187b6:	ff 75 c4             	pushl  -0x3c(%ebp)
f01187b9:	e8 3a f8 fe ff       	call   f0107ff8 <kmalloc>
f01187be:	83 c4 10             	add    $0x10,%esp
f01187c1:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f01187c7:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01187cd:	85 c0                	test   %eax,%eax
f01187cf:	74 14                	je     f01187e5 <test_kmalloc+0x120>
f01187d1:	83 ec 04             	sub    $0x4,%esp
f01187d4:	68 a0 9a 13 f0       	push   $0xf0139aa0
f01187d9:	6a 40                	push   $0x40
f01187db:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01187e0:	e8 cb 79 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01187e5:	e8 9a be fe ff       	call   f0104684 <pf_calculate_free_frames>
f01187ea:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01187ed:	74 14                	je     f0118803 <test_kmalloc+0x13e>
f01187ef:	83 ec 04             	sub    $0x4,%esp
f01187f2:	68 ec 9a 13 f0       	push   $0xf0139aec
f01187f7:	6a 41                	push   $0x41
f01187f9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01187fe:	e8 ad 79 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118803:	e8 5a 42 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118808:	89 c2                	mov    %eax,%edx
f011880a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011880d:	39 c2                	cmp    %eax,%edx
f011880f:	74 14                	je     f0118825 <test_kmalloc+0x160>
f0118811:	83 ec 04             	sub    $0x4,%esp
f0118814:	68 54 9b 13 f0       	push   $0xf0139b54
f0118819:	6a 42                	push   $0x42
f011881b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118820:	e8 8b 79 fe ff       	call   f01001b0 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118825:	83 ec 0c             	sub    $0xc,%esp
f0118828:	68 94 9b 13 f0       	push   $0xf0139b94
f011882d:	e8 ff 85 fe ff       	call   f0100e31 <cprintf>
f0118832:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118835:	e8 28 42 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011883a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011883d:	e8 42 be fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118842:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118845:	83 ec 0c             	sub    $0xc,%esp
f0118848:	68 00 fc 1f 00       	push   $0x1ffc00
f011884d:	e8 a6 f7 fe ff       	call   f0107ff8 <kmalloc>
f0118852:	83 c4 10             	add    $0x10,%esp
f0118855:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011885b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118861:	89 c1                	mov    %eax,%ecx
f0118863:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011886a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011886f:	0f b6 d0             	movzbl %al,%edx
f0118872:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118875:	01 d0                	add    %edx,%eax
f0118877:	48                   	dec    %eax
f0118878:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011887b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011887e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118883:	f7 75 c0             	divl   -0x40(%ebp)
f0118886:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118889:	29 d0                	sub    %edx,%eax
f011888b:	89 c3                	mov    %eax,%ebx
f011888d:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118894:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118899:	0f b6 c0             	movzbl %al,%eax
f011889c:	c1 e0 04             	shl    $0x4,%eax
f011889f:	89 c2                	mov    %eax,%edx
f01188a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01188a4:	01 d0                	add    %edx,%eax
f01188a6:	48                   	dec    %eax
f01188a7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01188aa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01188ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01188b2:	f7 75 b8             	divl   -0x48(%ebp)
f01188b5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01188b8:	29 d0                	sub    %edx,%eax
f01188ba:	01 d8                	add    %ebx,%eax
f01188bc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01188c1:	39 c1                	cmp    %eax,%ecx
f01188c3:	74 14                	je     f01188d9 <test_kmalloc+0x214>
f01188c5:	83 ec 04             	sub    $0x4,%esp
f01188c8:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01188cd:	6a 49                	push   $0x49
f01188cf:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01188d4:	e8 d7 78 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01188d9:	e8 a6 bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f01188de:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01188e1:	74 14                	je     f01188f7 <test_kmalloc+0x232>
f01188e3:	83 ec 04             	sub    $0x4,%esp
f01188e6:	68 ec 9a 13 f0       	push   $0xf0139aec
f01188eb:	6a 4a                	push   $0x4a
f01188ed:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01188f2:	e8 b9 78 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01188f7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01188fa:	e8 63 41 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01188ff:	29 c3                	sub    %eax,%ebx
f0118901:	89 d8                	mov    %ebx,%eax
f0118903:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118908:	74 14                	je     f011891e <test_kmalloc+0x259>
f011890a:	83 ec 04             	sub    $0x4,%esp
f011890d:	68 54 9b 13 f0       	push   $0xf0139b54
f0118912:	6a 4b                	push   $0x4b
f0118914:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118919:	e8 92 78 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011891e:	e8 3f 41 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118923:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118926:	e8 59 bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f011892b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011892e:	83 ec 0c             	sub    $0xc,%esp
f0118931:	68 00 fc 1f 00       	push   $0x1ffc00
f0118936:	e8 bd f6 fe ff       	call   f0107ff8 <kmalloc>
f011893b:	83 c4 10             	add    $0x10,%esp
f011893e:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118944:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011894a:	89 c1                	mov    %eax,%ecx
f011894c:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118953:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118958:	0f b6 d0             	movzbl %al,%edx
f011895b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011895e:	01 d0                	add    %edx,%eax
f0118960:	48                   	dec    %eax
f0118961:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118964:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118967:	ba 00 00 00 00       	mov    $0x0,%edx
f011896c:	f7 75 b0             	divl   -0x50(%ebp)
f011896f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118972:	29 d0                	sub    %edx,%eax
f0118974:	89 c3                	mov    %eax,%ebx
f0118976:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011897d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118982:	0f b6 c0             	movzbl %al,%eax
f0118985:	c1 e0 04             	shl    $0x4,%eax
f0118988:	89 c2                	mov    %eax,%edx
f011898a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011898d:	01 d0                	add    %edx,%eax
f011898f:	48                   	dec    %eax
f0118990:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118993:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118996:	ba 00 00 00 00       	mov    $0x0,%edx
f011899b:	f7 75 a8             	divl   -0x58(%ebp)
f011899e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01189a1:	29 d0                	sub    %edx,%eax
f01189a3:	01 d8                	add    %ebx,%eax
f01189a5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01189aa:	39 c1                	cmp    %eax,%ecx
f01189ac:	74 14                	je     f01189c2 <test_kmalloc+0x2fd>
f01189ae:	83 ec 04             	sub    $0x4,%esp
f01189b1:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01189b6:	6a 51                	push   $0x51
f01189b8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01189bd:	e8 ee 77 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189c2:	e8 bd bc fe ff       	call   f0104684 <pf_calculate_free_frames>
f01189c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01189ca:	74 14                	je     f01189e0 <test_kmalloc+0x31b>
f01189cc:	83 ec 04             	sub    $0x4,%esp
f01189cf:	68 ec 9a 13 f0       	push   $0xf0139aec
f01189d4:	6a 52                	push   $0x52
f01189d6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01189db:	e8 d0 77 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01189e0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01189e3:	e8 7a 40 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f01189e8:	29 c3                	sub    %eax,%ebx
f01189ea:	89 d8                	mov    %ebx,%eax
f01189ec:	3d 00 02 00 00       	cmp    $0x200,%eax
f01189f1:	74 14                	je     f0118a07 <test_kmalloc+0x342>
f01189f3:	83 ec 04             	sub    $0x4,%esp
f01189f6:	68 54 9b 13 f0       	push   $0xf0139b54
f01189fb:	6a 53                	push   $0x53
f01189fd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118a02:	e8 a9 77 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118a07:	e8 56 40 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118a0c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a0f:	e8 70 bc fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118a14:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0118a17:	83 ec 0c             	sub    $0xc,%esp
f0118a1a:	68 00 08 00 00       	push   $0x800
f0118a1f:	e8 d4 f5 fe ff       	call   f0107ff8 <kmalloc>
f0118a24:	83 c4 10             	add    $0x10,%esp
f0118a27:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118a2d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118a33:	89 c1                	mov    %eax,%ecx
f0118a35:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118a3c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118a41:	0f b6 d0             	movzbl %al,%edx
f0118a44:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118a47:	01 d0                	add    %edx,%eax
f0118a49:	48                   	dec    %eax
f0118a4a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118a4d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118a50:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a55:	f7 75 a0             	divl   -0x60(%ebp)
f0118a58:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118a5b:	29 d0                	sub    %edx,%eax
f0118a5d:	89 c3                	mov    %eax,%ebx
f0118a5f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118a66:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118a6b:	0f b6 c0             	movzbl %al,%eax
f0118a6e:	c1 e0 04             	shl    $0x4,%eax
f0118a71:	89 c2                	mov    %eax,%edx
f0118a73:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118a76:	01 d0                	add    %edx,%eax
f0118a78:	48                   	dec    %eax
f0118a79:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118a7c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118a7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a84:	f7 75 98             	divl   -0x68(%ebp)
f0118a87:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118a8a:	29 d0                	sub    %edx,%eax
f0118a8c:	01 d8                	add    %ebx,%eax
f0118a8e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0118a93:	39 c1                	cmp    %eax,%ecx
f0118a95:	74 14                	je     f0118aab <test_kmalloc+0x3e6>
f0118a97:	83 ec 04             	sub    $0x4,%esp
f0118a9a:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0118a9f:	6a 59                	push   $0x59
f0118aa1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118aa6:	e8 05 77 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118aab:	e8 d4 bb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118ab0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118ab3:	74 14                	je     f0118ac9 <test_kmalloc+0x404>
f0118ab5:	83 ec 04             	sub    $0x4,%esp
f0118ab8:	68 ec 9a 13 f0       	push   $0xf0139aec
f0118abd:	6a 5a                	push   $0x5a
f0118abf:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118ac4:	e8 e7 76 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118ac9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118acc:	e8 91 3f ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118ad1:	29 c3                	sub    %eax,%ebx
f0118ad3:	89 d8                	mov    %ebx,%eax
f0118ad5:	83 f8 01             	cmp    $0x1,%eax
f0118ad8:	74 14                	je     f0118aee <test_kmalloc+0x429>
f0118ada:	83 ec 04             	sub    $0x4,%esp
f0118add:	68 54 9b 13 f0       	push   $0xf0139b54
f0118ae2:	6a 5b                	push   $0x5b
f0118ae4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118ae9:	e8 c2 76 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118aee:	e8 6f 3f ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118af3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118af6:	e8 89 bb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118afb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0118afe:	83 ec 0c             	sub    $0xc,%esp
f0118b01:	68 00 08 00 00       	push   $0x800
f0118b06:	e8 ed f4 fe ff       	call   f0107ff8 <kmalloc>
f0118b0b:	83 c4 10             	add    $0x10,%esp
f0118b0e:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118b14:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118b1a:	89 c1                	mov    %eax,%ecx
f0118b1c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118b23:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118b28:	0f b6 d0             	movzbl %al,%edx
f0118b2b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118b2e:	01 d0                	add    %edx,%eax
f0118b30:	48                   	dec    %eax
f0118b31:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118b34:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118b37:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b3c:	f7 75 90             	divl   -0x70(%ebp)
f0118b3f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118b42:	29 d0                	sub    %edx,%eax
f0118b44:	89 c3                	mov    %eax,%ebx
f0118b46:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118b4d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118b52:	0f b6 c0             	movzbl %al,%eax
f0118b55:	c1 e0 04             	shl    $0x4,%eax
f0118b58:	89 c2                	mov    %eax,%edx
f0118b5a:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118b5d:	01 d0                	add    %edx,%eax
f0118b5f:	48                   	dec    %eax
f0118b60:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118b63:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118b66:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b6b:	f7 75 88             	divl   -0x78(%ebp)
f0118b6e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118b71:	29 d0                	sub    %edx,%eax
f0118b73:	01 d8                	add    %ebx,%eax
f0118b75:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118b7a:	39 c1                	cmp    %eax,%ecx
f0118b7c:	74 14                	je     f0118b92 <test_kmalloc+0x4cd>
f0118b7e:	83 ec 04             	sub    $0x4,%esp
f0118b81:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0118b86:	6a 61                	push   $0x61
f0118b88:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118b8d:	e8 1e 76 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b92:	e8 ed ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118b97:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118b9a:	74 14                	je     f0118bb0 <test_kmalloc+0x4eb>
f0118b9c:	83 ec 04             	sub    $0x4,%esp
f0118b9f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0118ba4:	6a 62                	push   $0x62
f0118ba6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118bab:	e8 00 76 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118bb0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118bb3:	e8 aa 3e ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118bb8:	29 c3                	sub    %eax,%ebx
f0118bba:	89 d8                	mov    %ebx,%eax
f0118bbc:	83 f8 01             	cmp    $0x1,%eax
f0118bbf:	74 14                	je     f0118bd5 <test_kmalloc+0x510>
f0118bc1:	83 ec 04             	sub    $0x4,%esp
f0118bc4:	68 54 9b 13 f0       	push   $0xf0139b54
f0118bc9:	6a 63                	push   $0x63
f0118bcb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118bd0:	e8 db 75 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118bd5:	e8 88 3e ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118bda:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118bdd:	e8 a2 ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118be2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118be5:	83 ec 0c             	sub    $0xc,%esp
f0118be8:	68 00 1c 00 00       	push   $0x1c00
f0118bed:	e8 06 f4 fe ff       	call   f0107ff8 <kmalloc>
f0118bf2:	83 c4 10             	add    $0x10,%esp
f0118bf5:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118bfb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118c01:	89 c1                	mov    %eax,%ecx
f0118c03:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118c0a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118c0f:	0f b6 d0             	movzbl %al,%edx
f0118c12:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118c15:	01 d0                	add    %edx,%eax
f0118c17:	48                   	dec    %eax
f0118c18:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118c1e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c29:	f7 75 80             	divl   -0x80(%ebp)
f0118c2c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118c32:	29 d0                	sub    %edx,%eax
f0118c34:	89 c3                	mov    %eax,%ebx
f0118c36:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118c3d:	10 00 00 
f0118c40:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118c45:	0f b6 c0             	movzbl %al,%eax
f0118c48:	c1 e0 04             	shl    $0x4,%eax
f0118c4b:	89 c2                	mov    %eax,%edx
f0118c4d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118c53:	01 d0                	add    %edx,%eax
f0118c55:	48                   	dec    %eax
f0118c56:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118c5c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118c62:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c67:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118c6d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118c73:	29 d0                	sub    %edx,%eax
f0118c75:	01 d8                	add    %ebx,%eax
f0118c77:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118c7c:	39 c1                	cmp    %eax,%ecx
f0118c7e:	74 14                	je     f0118c94 <test_kmalloc+0x5cf>
f0118c80:	83 ec 04             	sub    $0x4,%esp
f0118c83:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0118c88:	6a 69                	push   $0x69
f0118c8a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118c8f:	e8 1c 75 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c94:	e8 eb b9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118c99:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118c9c:	74 14                	je     f0118cb2 <test_kmalloc+0x5ed>
f0118c9e:	83 ec 04             	sub    $0x4,%esp
f0118ca1:	68 ec 9a 13 f0       	push   $0xf0139aec
f0118ca6:	6a 6a                	push   $0x6a
f0118ca8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118cad:	e8 fe 74 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118cb2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118cb5:	e8 a8 3d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118cba:	29 c3                	sub    %eax,%ebx
f0118cbc:	89 d8                	mov    %ebx,%eax
f0118cbe:	83 f8 02             	cmp    $0x2,%eax
f0118cc1:	74 14                	je     f0118cd7 <test_kmalloc+0x612>
f0118cc3:	83 ec 04             	sub    $0x4,%esp
f0118cc6:	68 54 9b 13 f0       	push   $0xf0139b54
f0118ccb:	6a 6b                	push   $0x6b
f0118ccd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118cd2:	e8 d9 74 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118cd7:	e8 86 3d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118cdc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118cdf:	e8 a0 b9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118ce4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118ce7:	83 ec 0c             	sub    $0xc,%esp
f0118cea:	68 00 fc 2f 00       	push   $0x2ffc00
f0118cef:	e8 04 f3 fe ff       	call   f0107ff8 <kmalloc>
f0118cf4:	83 c4 10             	add    $0x10,%esp
f0118cf7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118cfd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118d03:	89 c1                	mov    %eax,%ecx
f0118d05:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118d0c:	10 00 00 
f0118d0f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118d14:	0f b6 d0             	movzbl %al,%edx
f0118d17:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118d1d:	01 d0                	add    %edx,%eax
f0118d1f:	48                   	dec    %eax
f0118d20:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118d26:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118d2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d31:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118d37:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118d3d:	29 d0                	sub    %edx,%eax
f0118d3f:	89 c3                	mov    %eax,%ebx
f0118d41:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118d48:	10 00 00 
f0118d4b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118d50:	0f b6 c0             	movzbl %al,%eax
f0118d53:	c1 e0 04             	shl    $0x4,%eax
f0118d56:	89 c2                	mov    %eax,%edx
f0118d58:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118d5e:	01 d0                	add    %edx,%eax
f0118d60:	48                   	dec    %eax
f0118d61:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118d67:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118d6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d72:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118d78:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118d7e:	29 d0                	sub    %edx,%eax
f0118d80:	01 d8                	add    %ebx,%eax
f0118d82:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118d87:	39 c1                	cmp    %eax,%ecx
f0118d89:	74 14                	je     f0118d9f <test_kmalloc+0x6da>
f0118d8b:	83 ec 04             	sub    $0x4,%esp
f0118d8e:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0118d93:	6a 71                	push   $0x71
f0118d95:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118d9a:	e8 11 74 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d9f:	e8 e0 b8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118da4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118da7:	74 14                	je     f0118dbd <test_kmalloc+0x6f8>
f0118da9:	83 ec 04             	sub    $0x4,%esp
f0118dac:	68 ec 9a 13 f0       	push   $0xf0139aec
f0118db1:	6a 72                	push   $0x72
f0118db3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118db8:	e8 f3 73 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118dbd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118dc0:	e8 9d 3c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118dc5:	29 c3                	sub    %eax,%ebx
f0118dc7:	89 d8                	mov    %ebx,%eax
f0118dc9:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118dce:	74 14                	je     f0118de4 <test_kmalloc+0x71f>
f0118dd0:	83 ec 04             	sub    $0x4,%esp
f0118dd3:	68 54 9b 13 f0       	push   $0xf0139b54
f0118dd8:	6a 73                	push   $0x73
f0118dda:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118ddf:	e8 cc 73 fe ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118de4:	e8 79 3c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118de9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118dec:	e8 93 b8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118df1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118df4:	83 ec 0c             	sub    $0xc,%esp
f0118df7:	68 00 fc 5f 00       	push   $0x5ffc00
f0118dfc:	e8 f7 f1 fe ff       	call   f0107ff8 <kmalloc>
f0118e01:	83 c4 10             	add    $0x10,%esp
f0118e04:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118e0a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118e10:	89 c1                	mov    %eax,%ecx
f0118e12:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118e19:	10 00 00 
f0118e1c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118e21:	0f b6 d0             	movzbl %al,%edx
f0118e24:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118e2a:	01 d0                	add    %edx,%eax
f0118e2c:	48                   	dec    %eax
f0118e2d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118e33:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118e39:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e3e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118e44:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118e4a:	29 d0                	sub    %edx,%eax
f0118e4c:	89 c3                	mov    %eax,%ebx
f0118e4e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118e55:	10 00 00 
f0118e58:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118e5d:	0f b6 c0             	movzbl %al,%eax
f0118e60:	c1 e0 04             	shl    $0x4,%eax
f0118e63:	89 c2                	mov    %eax,%edx
f0118e65:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118e6b:	01 d0                	add    %edx,%eax
f0118e6d:	48                   	dec    %eax
f0118e6e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118e74:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118e7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e7f:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118e85:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118e8b:	29 d0                	sub    %edx,%eax
f0118e8d:	01 d8                	add    %ebx,%eax
f0118e8f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118e94:	39 c1                	cmp    %eax,%ecx
f0118e96:	74 14                	je     f0118eac <test_kmalloc+0x7e7>
f0118e98:	83 ec 04             	sub    $0x4,%esp
f0118e9b:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0118ea0:	6a 79                	push   $0x79
f0118ea2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118ea7:	e8 04 73 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118eac:	e8 d3 b7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118eb1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118eb4:	74 14                	je     f0118eca <test_kmalloc+0x805>
f0118eb6:	83 ec 04             	sub    $0x4,%esp
f0118eb9:	68 ec 9a 13 f0       	push   $0xf0139aec
f0118ebe:	6a 7a                	push   $0x7a
f0118ec0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118ec5:	e8 e6 72 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118eca:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118ecd:	e8 90 3b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118ed2:	29 c3                	sub    %eax,%ebx
f0118ed4:	89 d8                	mov    %ebx,%eax
f0118ed6:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118edb:	74 14                	je     f0118ef1 <test_kmalloc+0x82c>
f0118edd:	83 ec 04             	sub    $0x4,%esp
f0118ee0:	68 54 9b 13 f0       	push   $0xf0139b54
f0118ee5:	6a 7b                	push   $0x7b
f0118ee7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118eec:	e8 bf 72 fe ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118ef1:	e8 6c 3b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118ef9:	e8 86 b7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118efe:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118f01:	83 ec 0c             	sub    $0xc,%esp
f0118f04:	68 00 38 00 00       	push   $0x3800
f0118f09:	e8 ea f0 fe ff       	call   f0107ff8 <kmalloc>
f0118f0e:	83 c4 10             	add    $0x10,%esp
f0118f11:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118f17:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f1d:	89 c1                	mov    %eax,%ecx
f0118f1f:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118f26:	10 00 00 
f0118f29:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118f2e:	0f b6 d0             	movzbl %al,%edx
f0118f31:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118f37:	01 d0                	add    %edx,%eax
f0118f39:	48                   	dec    %eax
f0118f3a:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118f40:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118f46:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f4b:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118f51:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118f57:	29 d0                	sub    %edx,%eax
f0118f59:	89 c3                	mov    %eax,%ebx
f0118f5b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118f62:	10 00 00 
f0118f65:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118f6a:	0f b6 c0             	movzbl %al,%eax
f0118f6d:	c1 e0 04             	shl    $0x4,%eax
f0118f70:	89 c2                	mov    %eax,%edx
f0118f72:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118f78:	01 d0                	add    %edx,%eax
f0118f7a:	48                   	dec    %eax
f0118f7b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118f81:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118f87:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f8c:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118f92:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118f98:	29 d0                	sub    %edx,%eax
f0118f9a:	01 d8                	add    %ebx,%eax
f0118f9c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118fa1:	39 c1                	cmp    %eax,%ecx
f0118fa3:	74 17                	je     f0118fbc <test_kmalloc+0x8f7>
f0118fa5:	83 ec 04             	sub    $0x4,%esp
f0118fa8:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0118fad:	68 81 00 00 00       	push   $0x81
f0118fb2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118fb7:	e8 f4 71 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118fbc:	e8 c3 b6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118fc1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118fc4:	74 17                	je     f0118fdd <test_kmalloc+0x918>
f0118fc6:	83 ec 04             	sub    $0x4,%esp
f0118fc9:	68 ec 9a 13 f0       	push   $0xf0139aec
f0118fce:	68 82 00 00 00       	push   $0x82
f0118fd3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0118fd8:	e8 d3 71 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118fdd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118fe0:	e8 7d 3a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0118fe5:	29 c3                	sub    %eax,%ebx
f0118fe7:	89 d8                	mov    %ebx,%eax
f0118fe9:	83 f8 04             	cmp    $0x4,%eax
f0118fec:	74 17                	je     f0119005 <test_kmalloc+0x940>
f0118fee:	83 ec 04             	sub    $0x4,%esp
f0118ff1:	68 54 9b 13 f0       	push   $0xf0139b54
f0118ff6:	68 83 00 00 00       	push   $0x83
f0118ffb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119000:	e8 ab 71 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b50%");
f0119005:	83 ec 0c             	sub    $0xc,%esp
f0119008:	68 1e 9c 13 f0       	push   $0xf0139c1e
f011900d:	e8 1f 7e fe ff       	call   f0100e31 <cprintf>
f0119012:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0119015:	e8 48 3a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011901a:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011901d:	e8 62 b6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119022:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0119025:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f011902c:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f011902f:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119035:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f011903b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119041:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0119044:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0119046:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011904c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119052:	01 c2                	add    %eax,%edx
f0119054:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119057:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0119059:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011905f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0119065:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f011906c:	fd 0f 00 
			shortArr[0] = minShort;
f011906f:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f0119075:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119078:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f011907b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119081:	01 c0                	add    %eax,%eax
f0119083:	89 c2                	mov    %eax,%edx
f0119085:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011908b:	01 c2                	add    %eax,%edx
f011908d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0119091:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0119094:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011909a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f01190a0:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f01190a7:	01 00 00 
			intArr[0] = minInt;
f01190aa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01190b0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01190b3:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f01190b5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01190bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01190c2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01190c8:	01 c2                	add    %eax,%edx
f01190ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01190cd:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f01190cf:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01190d5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f01190db:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f01190e2:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f01190e5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01190eb:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01190ee:	88 10                	mov    %dl,(%eax)
f01190f0:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f01190f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01190f9:	66 89 42 02          	mov    %ax,0x2(%edx)
f01190fd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119103:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0119106:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0119109:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011910f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119116:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011911c:	01 c2                	add    %eax,%edx
f011911e:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119121:	88 02                	mov    %al,(%edx)
f0119123:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119129:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119130:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119136:	01 c2                	add    %eax,%edx
f0119138:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011913c:	66 89 42 02          	mov    %ax,0x2(%edx)
f0119140:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119146:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011914d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119153:	01 c2                	add    %eax,%edx
f0119155:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119158:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f011915b:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f0119162:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0119165:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011916b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f0119171:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119177:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011917a:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f011917c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119182:	89 c2                	mov    %eax,%edx
f0119184:	c1 ea 1f             	shr    $0x1f,%edx
f0119187:	01 d0                	add    %edx,%eax
f0119189:	d1 f8                	sar    %eax
f011918b:	89 c2                	mov    %eax,%edx
f011918d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119193:	01 c2                	add    %eax,%edx
f0119195:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119198:	88 c1                	mov    %al,%cl
f011919a:	c0 e9 07             	shr    $0x7,%cl
f011919d:	01 c8                	add    %ecx,%eax
f011919f:	d0 f8                	sar    %al
f01191a1:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f01191a3:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f01191a9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01191af:	01 c2                	add    %eax,%edx
f01191b1:	8a 45 f2             	mov    -0xe(%ebp),%al
f01191b4:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f01191b6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01191bc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f01191c2:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f01191c9:	1b 00 00 
			shortArr2[0] = minShort;
f01191cc:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f01191d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01191d5:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f01191d8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01191de:	01 c0                	add    %eax,%eax
f01191e0:	89 c2                	mov    %eax,%edx
f01191e2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01191e8:	01 c2                	add    %eax,%edx
f01191ea:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01191ee:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01191f1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01191f7:	8a 00                	mov    (%eax),%al
f01191f9:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01191fc:	75 15                	jne    f0119213 <test_kmalloc+0xb4e>
f01191fe:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0119204:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011920a:	01 d0                	add    %edx,%eax
f011920c:	8a 00                	mov    (%eax),%al
f011920e:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0119211:	74 17                	je     f011922a <test_kmalloc+0xb65>
f0119213:	83 ec 04             	sub    $0x4,%esp
f0119216:	68 28 9c 13 f0       	push   $0xf0139c28
f011921b:	68 b2 00 00 00       	push   $0xb2
f0119220:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119225:	e8 86 6f fe ff       	call   f01001b0 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f011922a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119230:	66 8b 00             	mov    (%eax),%ax
f0119233:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0119237:	75 1b                	jne    f0119254 <test_kmalloc+0xb8f>
f0119239:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011923f:	01 c0                	add    %eax,%eax
f0119241:	89 c2                	mov    %eax,%edx
f0119243:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119249:	01 d0                	add    %edx,%eax
f011924b:	66 8b 00             	mov    (%eax),%ax
f011924e:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0119252:	74 17                	je     f011926b <test_kmalloc+0xba6>
f0119254:	83 ec 04             	sub    $0x4,%esp
f0119257:	68 28 9c 13 f0       	push   $0xf0139c28
f011925c:	68 b3 00 00 00       	push   $0xb3
f0119261:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119266:	e8 45 6f fe ff       	call   f01001b0 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f011926b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119271:	8b 00                	mov    (%eax),%eax
f0119273:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119276:	75 1c                	jne    f0119294 <test_kmalloc+0xbcf>
f0119278:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011927e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0119285:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011928b:	01 d0                	add    %edx,%eax
f011928d:	8b 00                	mov    (%eax),%eax
f011928f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0119292:	74 17                	je     f01192ab <test_kmalloc+0xbe6>
f0119294:	83 ec 04             	sub    $0x4,%esp
f0119297:	68 28 9c 13 f0       	push   $0xf0139c28
f011929c:	68 b4 00 00 00       	push   $0xb4
f01192a1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01192a6:	e8 05 6f fe ff       	call   f01001b0 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f01192ab:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01192b1:	8a 00                	mov    (%eax),%al
f01192b3:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01192b6:	75 1c                	jne    f01192d4 <test_kmalloc+0xc0f>
f01192b8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01192be:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01192c5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01192cb:	01 d0                	add    %edx,%eax
f01192cd:	8a 00                	mov    (%eax),%al
f01192cf:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01192d2:	74 17                	je     f01192eb <test_kmalloc+0xc26>
f01192d4:	83 ec 04             	sub    $0x4,%esp
f01192d7:	68 28 9c 13 f0       	push   $0xf0139c28
f01192dc:	68 b6 00 00 00       	push   $0xb6
f01192e1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01192e6:	e8 c5 6e fe ff       	call   f01001b0 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f01192eb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01192f1:	66 8b 40 02          	mov    0x2(%eax),%ax
f01192f5:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01192f9:	75 1f                	jne    f011931a <test_kmalloc+0xc55>
f01192fb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119301:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119308:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011930e:	01 d0                	add    %edx,%eax
f0119310:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119314:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0119318:	74 17                	je     f0119331 <test_kmalloc+0xc6c>
f011931a:	83 ec 04             	sub    $0x4,%esp
f011931d:	68 28 9c 13 f0       	push   $0xf0139c28
f0119322:	68 b7 00 00 00       	push   $0xb7
f0119327:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011932c:	e8 7f 6e fe ff       	call   f01001b0 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0119331:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119337:	8b 40 04             	mov    0x4(%eax),%eax
f011933a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011933d:	75 1d                	jne    f011935c <test_kmalloc+0xc97>
f011933f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119345:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011934c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119352:	01 d0                	add    %edx,%eax
f0119354:	8b 40 04             	mov    0x4(%eax),%eax
f0119357:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011935a:	74 17                	je     f0119373 <test_kmalloc+0xcae>
f011935c:	83 ec 04             	sub    $0x4,%esp
f011935f:	68 28 9c 13 f0       	push   $0xf0139c28
f0119364:	68 b8 00 00 00       	push   $0xb8
f0119369:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011936e:	e8 3d 6e fe ff       	call   f01001b0 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0119373:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119379:	8a 00                	mov    (%eax),%al
f011937b:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011937e:	75 40                	jne    f01193c0 <test_kmalloc+0xcfb>
f0119380:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119386:	89 c2                	mov    %eax,%edx
f0119388:	c1 ea 1f             	shr    $0x1f,%edx
f011938b:	01 d0                	add    %edx,%eax
f011938d:	d1 f8                	sar    %eax
f011938f:	89 c2                	mov    %eax,%edx
f0119391:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119397:	01 d0                	add    %edx,%eax
f0119399:	8a 10                	mov    (%eax),%dl
f011939b:	8a 45 f2             	mov    -0xe(%ebp),%al
f011939e:	88 c1                	mov    %al,%cl
f01193a0:	c0 e9 07             	shr    $0x7,%cl
f01193a3:	01 c8                	add    %ecx,%eax
f01193a5:	d0 f8                	sar    %al
f01193a7:	38 c2                	cmp    %al,%dl
f01193a9:	75 15                	jne    f01193c0 <test_kmalloc+0xcfb>
f01193ab:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f01193b1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01193b7:	01 d0                	add    %edx,%eax
f01193b9:	8a 00                	mov    (%eax),%al
f01193bb:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01193be:	74 17                	je     f01193d7 <test_kmalloc+0xd12>
f01193c0:	83 ec 04             	sub    $0x4,%esp
f01193c3:	68 28 9c 13 f0       	push   $0xf0139c28
f01193c8:	68 ba 00 00 00       	push   $0xba
f01193cd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01193d2:	e8 d9 6d fe ff       	call   f01001b0 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01193d7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01193dd:	66 8b 00             	mov    (%eax),%ax
f01193e0:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01193e4:	75 1b                	jne    f0119401 <test_kmalloc+0xd3c>
f01193e6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01193ec:	01 c0                	add    %eax,%eax
f01193ee:	89 c2                	mov    %eax,%edx
f01193f0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01193f6:	01 d0                	add    %edx,%eax
f01193f8:	66 8b 00             	mov    (%eax),%ax
f01193fb:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01193ff:	74 17                	je     f0119418 <test_kmalloc+0xd53>
f0119401:	83 ec 04             	sub    $0x4,%esp
f0119404:	68 28 9c 13 f0       	push   $0xf0139c28
f0119409:	68 bb 00 00 00       	push   $0xbb
f011940e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119413:	e8 98 6d fe ff       	call   f01001b0 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119418:	e8 45 36 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011941d:	89 c2                	mov    %eax,%edx
f011941f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119422:	39 c2                	cmp    %eax,%edx
f0119424:	74 17                	je     f011943d <test_kmalloc+0xd78>
f0119426:	83 ec 04             	sub    $0x4,%esp
f0119429:	68 54 9b 13 f0       	push   $0xf0139b54
f011942e:	68 bd 00 00 00       	push   $0xbd
f0119433:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119438:	e8 73 6d fe ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011943d:	e8 42 b2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119442:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0119445:	74 17                	je     f011945e <test_kmalloc+0xd99>
f0119447:	83 ec 04             	sub    $0x4,%esp
f011944a:	68 ec 9a 13 f0       	push   $0xf0139aec
f011944f:	68 be 00 00 00       	push   $0xbe
f0119454:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119459:	e8 52 6d fe ff       	call   f01001b0 <_panic>
		}

		cprintf("\b\b\b80%");
f011945e:	83 ec 0c             	sub    $0xc,%esp
f0119461:	68 5d 9c 13 f0       	push   $0xf0139c5d
f0119466:	e8 c6 79 fe ff       	call   f0100e31 <cprintf>
f011946b:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f011946e:	e8 ef 35 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0119473:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119476:	e8 09 b2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011947b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f011947e:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0119485:	10 00 00 
f0119488:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011948d:	0f b6 d0             	movzbl %al,%edx
f0119490:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119496:	01 d0                	add    %edx,%eax
f0119498:	48                   	dec    %eax
f0119499:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011949f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01194a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01194aa:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01194b0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01194b6:	29 d0                	sub    %edx,%eax
f01194b8:	89 c1                	mov    %eax,%ecx
f01194ba:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01194c1:	10 00 00 
f01194c4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01194c9:	0f b6 c0             	movzbl %al,%eax
f01194cc:	c1 e0 04             	shl    $0x4,%eax
f01194cf:	89 c2                	mov    %eax,%edx
f01194d1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01194d7:	01 d0                	add    %edx,%eax
f01194d9:	48                   	dec    %eax
f01194da:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01194e0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01194e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01194eb:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01194f1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01194f7:	29 d0                	sub    %edx,%eax
f01194f9:	01 c8                	add    %ecx,%eax
f01194fb:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0119500:	29 c2                	sub    %eax,%edx
f0119502:	89 d0                	mov    %edx,%eax
f0119504:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011950a:	83 ec 0c             	sub    $0xc,%esp
f011950d:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f0119513:	e8 e0 ea fe ff       	call   f0107ff8 <kmalloc>
f0119518:	83 c4 10             	add    $0x10,%esp
f011951b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0119521:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119527:	85 c0                	test   %eax,%eax
f0119529:	74 17                	je     f0119542 <test_kmalloc+0xe7d>
f011952b:	83 ec 04             	sub    $0x4,%esp
f011952e:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0119533:	68 c8 00 00 00       	push   $0xc8
f0119538:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011953d:	e8 6e 6c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119542:	e8 3d b1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119547:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011954a:	74 17                	je     f0119563 <test_kmalloc+0xe9e>
f011954c:	83 ec 04             	sub    $0x4,%esp
f011954f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0119554:	68 c9 00 00 00       	push   $0xc9
f0119559:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011955e:	e8 4d 6c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119563:	e8 fa 34 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0119568:	89 c2                	mov    %eax,%edx
f011956a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011956d:	39 c2                	cmp    %eax,%edx
f011956f:	74 17                	je     f0119588 <test_kmalloc+0xec3>
f0119571:	83 ec 04             	sub    $0x4,%esp
f0119574:	68 54 9b 13 f0       	push   $0xf0139b54
f0119579:	68 ca 00 00 00       	push   $0xca
f011957e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119583:	e8 28 6c fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b90%");
f0119588:	83 ec 0c             	sub    $0xc,%esp
f011958b:	68 64 9c 13 f0       	push   $0xf0139c64
f0119590:	e8 9c 78 fe ff       	call   f0100e31 <cprintf>
f0119595:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0119598:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011959e:	05 00 40 00 00       	add    $0x4000,%eax
f01195a3:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01195a9:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01195b0:	10 00 00 
f01195b3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01195b8:	0f b6 d0             	movzbl %al,%edx
f01195bb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01195c1:	01 d0                	add    %edx,%eax
f01195c3:	48                   	dec    %eax
f01195c4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01195ca:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01195d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01195d5:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01195db:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01195e1:	29 d0                	sub    %edx,%eax
f01195e3:	89 c1                	mov    %eax,%ecx
f01195e5:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01195ec:	10 00 00 
f01195ef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01195f4:	0f b6 c0             	movzbl %al,%eax
f01195f7:	c1 e0 04             	shl    $0x4,%eax
f01195fa:	89 c2                	mov    %eax,%edx
f01195fc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119602:	01 d0                	add    %edx,%eax
f0119604:	48                   	dec    %eax
f0119605:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011960b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119611:	ba 00 00 00 00       	mov    $0x0,%edx
f0119616:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011961c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119622:	29 d0                	sub    %edx,%eax
f0119624:	01 c8                	add    %ecx,%eax
f0119626:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011962b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011962e:	eb 6a                	jmp    f011969a <test_kmalloc+0xfd5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0119630:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0119635:	83 ec 04             	sub    $0x4,%esp
f0119638:	8d 95 94 fe ff ff    	lea    -0x16c(%ebp),%edx
f011963e:	52                   	push   %edx
f011963f:	ff 75 f4             	pushl  -0xc(%ebp)
f0119642:	50                   	push   %eax
f0119643:	e8 9f de fe ff       	call   f01074e7 <get_page_table>
f0119648:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011964b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119651:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119654:	c1 ea 0c             	shr    $0xc,%edx
f0119657:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011965d:	c1 e2 02             	shl    $0x2,%edx
f0119660:	01 d0                	add    %edx,%eax
f0119662:	8b 00                	mov    (%eax),%eax
f0119664:	25 ff 0f 00 00       	and    $0xfff,%eax
f0119669:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f011966f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119675:	83 e0 04             	and    $0x4,%eax
f0119678:	85 c0                	test   %eax,%eax
f011967a:	74 17                	je     f0119693 <test_kmalloc+0xfce>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f011967c:	83 ec 04             	sub    $0x4,%esp
f011967f:	68 6c 9c 13 f0       	push   $0xf0139c6c
f0119684:	68 d7 00 00 00       	push   $0xd7
f0119689:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011968e:	e8 1d 6b fe ff       	call   f01001b0 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119693:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011969a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011969d:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f01196a3:	72 8b                	jb     f0119630 <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01196a5:	83 ec 0c             	sub    $0xc,%esp
f01196a8:	68 b6 9c 13 f0       	push   $0xf0139cb6
f01196ad:	e8 7f 77 fe ff       	call   f0100e31 <cprintf>
f01196b2:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01196b5:	83 ec 0c             	sub    $0xc,%esp
f01196b8:	68 c0 9c 13 f0       	push   $0xf0139cc0
f01196bd:	e8 6f 77 fe ff       	call   f0100e31 <cprintf>
f01196c2:	83 c4 10             	add    $0x10,%esp

	return 1;
f01196c5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01196ca:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01196cd:	5b                   	pop    %ebx
f01196ce:	5f                   	pop    %edi
f01196cf:	5d                   	pop    %ebp
f01196d0:	c3                   	ret    

f01196d1 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f01196d1:	55                   	push   %ebp
f01196d2:	89 e5                	mov    %esp,%ebp
f01196d4:	57                   	push   %edi
f01196d5:	53                   	push   %ebx
f01196d6:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f01196dc:	83 ec 0c             	sub    $0xc,%esp
f01196df:	68 14 9a 13 f0       	push   $0xf0139a14
f01196e4:	e8 48 77 fe ff       	call   f0100e31 <cprintf>
f01196e9:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01196ec:	83 ec 0c             	sub    $0xc,%esp
f01196ef:	68 44 9a 13 f0       	push   $0xf0139a44
f01196f4:	e8 38 77 fe ff       	call   f0100e31 <cprintf>
f01196f9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01196fc:	83 ec 0c             	sub    $0xc,%esp
f01196ff:	68 14 9a 13 f0       	push   $0xf0139a14
f0119704:	e8 28 77 fe ff       	call   f0100e31 <cprintf>
f0119709:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011970c:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f0119712:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0119717:	b8 00 00 00 00       	mov    $0x0,%eax
f011971c:	89 d7                	mov    %edx,%edi
f011971e:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0119720:	83 ec 0c             	sub    $0xc,%esp
f0119723:	68 fc 9c 13 f0       	push   $0xf0139cfc
f0119728:	e8 04 77 fe ff       	call   f0100e31 <cprintf>
f011972d:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0119730:	e8 2d 33 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0119735:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0119738:	e8 47 af fe ff       	call   f0104684 <pf_calculate_free_frames>
f011973d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119740:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119747:	eb 1f                	jmp    f0119768 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0119749:	83 ec 0c             	sub    $0xc,%esp
f011974c:	68 00 00 20 00       	push   $0x200000
f0119751:	e8 a2 e8 fe ff       	call   f0107ff8 <kmalloc>
f0119756:	83 c4 10             	add    $0x10,%esp
f0119759:	89 c2                	mov    %eax,%edx
f011975b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011975e:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119765:	ff 45 f4             	incl   -0xc(%ebp)
f0119768:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011976c:	7e db                	jle    f0119749 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f011976e:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0119775:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011977a:	0f b6 d0             	movzbl %al,%edx
f011977d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119780:	01 d0                	add    %edx,%eax
f0119782:	48                   	dec    %eax
f0119783:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0119786:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119789:	ba 00 00 00 00       	mov    $0x0,%edx
f011978e:	f7 75 e8             	divl   -0x18(%ebp)
f0119791:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119794:	29 d0                	sub    %edx,%eax
f0119796:	89 c1                	mov    %eax,%ecx
f0119798:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f011979f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01197a4:	0f b6 c0             	movzbl %al,%eax
f01197a7:	c1 e0 04             	shl    $0x4,%eax
f01197aa:	89 c2                	mov    %eax,%edx
f01197ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01197af:	01 d0                	add    %edx,%eax
f01197b1:	48                   	dec    %eax
f01197b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01197b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01197b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01197bd:	f7 75 e0             	divl   -0x20(%ebp)
f01197c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01197c3:	29 d0                	sub    %edx,%eax
f01197c5:	01 c8                	add    %ecx,%eax
f01197c7:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f01197cc:	29 c2                	sub    %eax,%edx
f01197ce:	89 d0                	mov    %edx,%eax
f01197d0:	83 ec 0c             	sub    $0xc,%esp
f01197d3:	50                   	push   %eax
f01197d4:	e8 1f e8 fe ff       	call   f0107ff8 <kmalloc>
f01197d9:	83 c4 10             	add    $0x10,%esp
f01197dc:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01197e2:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f01197e8:	89 c1                	mov    %eax,%ecx
f01197ea:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f01197f1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01197f6:	0f b6 d0             	movzbl %al,%edx
f01197f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01197fc:	01 d0                	add    %edx,%eax
f01197fe:	48                   	dec    %eax
f01197ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0119802:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119805:	ba 00 00 00 00       	mov    $0x0,%edx
f011980a:	f7 75 d8             	divl   -0x28(%ebp)
f011980d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119810:	29 d0                	sub    %edx,%eax
f0119812:	89 c3                	mov    %eax,%ebx
f0119814:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f011981b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119820:	0f b6 c0             	movzbl %al,%eax
f0119823:	c1 e0 04             	shl    $0x4,%eax
f0119826:	89 c2                	mov    %eax,%edx
f0119828:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011982b:	01 d0                	add    %edx,%eax
f011982d:	48                   	dec    %eax
f011982e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0119831:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119834:	ba 00 00 00 00       	mov    $0x0,%edx
f0119839:	f7 75 d0             	divl   -0x30(%ebp)
f011983c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011983f:	29 d0                	sub    %edx,%eax
f0119841:	01 d8                	add    %ebx,%eax
f0119843:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119848:	39 c1                	cmp    %eax,%ecx
f011984a:	0f 85 4f 03 00 00    	jne    f0119b9f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119850:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0119856:	89 c1                	mov    %eax,%ecx
f0119858:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011985f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119864:	0f b6 d0             	movzbl %al,%edx
f0119867:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011986a:	01 d0                	add    %edx,%eax
f011986c:	48                   	dec    %eax
f011986d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0119870:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119873:	ba 00 00 00 00       	mov    $0x0,%edx
f0119878:	f7 75 c8             	divl   -0x38(%ebp)
f011987b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011987e:	29 d0                	sub    %edx,%eax
f0119880:	89 c3                	mov    %eax,%ebx
f0119882:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0119889:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011988e:	0f b6 c0             	movzbl %al,%eax
f0119891:	c1 e0 04             	shl    $0x4,%eax
f0119894:	89 c2                	mov    %eax,%edx
f0119896:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119899:	01 d0                	add    %edx,%eax
f011989b:	48                   	dec    %eax
f011989c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011989f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01198a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01198a7:	f7 75 c0             	divl   -0x40(%ebp)
f01198aa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01198ad:	29 d0                	sub    %edx,%eax
f01198af:	01 d8                	add    %ebx,%eax
f01198b1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01198b6:	39 c1                	cmp    %eax,%ecx
f01198b8:	0f 85 e1 02 00 00    	jne    f0119b9f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01198be:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f01198c4:	89 c1                	mov    %eax,%ecx
f01198c6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01198cd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01198d2:	0f b6 d0             	movzbl %al,%edx
f01198d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01198d8:	01 d0                	add    %edx,%eax
f01198da:	48                   	dec    %eax
f01198db:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01198de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01198e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01198e6:	f7 75 b8             	divl   -0x48(%ebp)
f01198e9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01198ec:	29 d0                	sub    %edx,%eax
f01198ee:	89 c3                	mov    %eax,%ebx
f01198f0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01198f7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01198fc:	0f b6 c0             	movzbl %al,%eax
f01198ff:	c1 e0 04             	shl    $0x4,%eax
f0119902:	89 c2                	mov    %eax,%edx
f0119904:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119907:	01 d0                	add    %edx,%eax
f0119909:	48                   	dec    %eax
f011990a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011990d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119910:	ba 00 00 00 00       	mov    $0x0,%edx
f0119915:	f7 75 b0             	divl   -0x50(%ebp)
f0119918:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011991b:	29 d0                	sub    %edx,%eax
f011991d:	01 d8                	add    %ebx,%eax
f011991f:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119924:	39 c1                	cmp    %eax,%ecx
f0119926:	0f 85 73 02 00 00    	jne    f0119b9f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011992c:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119932:	89 c1                	mov    %eax,%ecx
f0119934:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011993b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119940:	0f b6 d0             	movzbl %al,%edx
f0119943:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119946:	01 d0                	add    %edx,%eax
f0119948:	48                   	dec    %eax
f0119949:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011994c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011994f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119954:	f7 75 a8             	divl   -0x58(%ebp)
f0119957:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011995a:	29 d0                	sub    %edx,%eax
f011995c:	89 c3                	mov    %eax,%ebx
f011995e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0119965:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011996a:	0f b6 c0             	movzbl %al,%eax
f011996d:	c1 e0 04             	shl    $0x4,%eax
f0119970:	89 c2                	mov    %eax,%edx
f0119972:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119975:	01 d0                	add    %edx,%eax
f0119977:	48                   	dec    %eax
f0119978:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011997b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011997e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119983:	f7 75 a0             	divl   -0x60(%ebp)
f0119986:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119989:	29 d0                	sub    %edx,%eax
f011998b:	01 d8                	add    %ebx,%eax
f011998d:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119992:	39 c1                	cmp    %eax,%ecx
f0119994:	0f 85 05 02 00 00    	jne    f0119b9f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011999a:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f01199a0:	89 c1                	mov    %eax,%ecx
f01199a2:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01199a9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01199ae:	0f b6 d0             	movzbl %al,%edx
f01199b1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01199b4:	01 d0                	add    %edx,%eax
f01199b6:	48                   	dec    %eax
f01199b7:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01199ba:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01199bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01199c2:	f7 75 98             	divl   -0x68(%ebp)
f01199c5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01199c8:	29 d0                	sub    %edx,%eax
f01199ca:	89 c3                	mov    %eax,%ebx
f01199cc:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01199d3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01199d8:	0f b6 c0             	movzbl %al,%eax
f01199db:	c1 e0 04             	shl    $0x4,%eax
f01199de:	89 c2                	mov    %eax,%edx
f01199e0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01199e3:	01 d0                	add    %edx,%eax
f01199e5:	48                   	dec    %eax
f01199e6:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01199e9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01199ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01199f1:	f7 75 90             	divl   -0x70(%ebp)
f01199f4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01199f7:	29 d0                	sub    %edx,%eax
f01199f9:	01 d8                	add    %ebx,%eax
f01199fb:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119a00:	39 c1                	cmp    %eax,%ecx
f0119a02:	0f 85 97 01 00 00    	jne    f0119b9f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119a08:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119a0e:	89 c1                	mov    %eax,%ecx
f0119a10:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0119a17:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119a1c:	0f b6 d0             	movzbl %al,%edx
f0119a1f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119a22:	01 d0                	add    %edx,%eax
f0119a24:	48                   	dec    %eax
f0119a25:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0119a28:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119a2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a30:	f7 75 88             	divl   -0x78(%ebp)
f0119a33:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119a36:	29 d0                	sub    %edx,%eax
f0119a38:	89 c3                	mov    %eax,%ebx
f0119a3a:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0119a41:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119a46:	0f b6 c0             	movzbl %al,%eax
f0119a49:	c1 e0 04             	shl    $0x4,%eax
f0119a4c:	89 c2                	mov    %eax,%edx
f0119a4e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119a51:	01 d0                	add    %edx,%eax
f0119a53:	48                   	dec    %eax
f0119a54:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0119a5a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119a60:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a65:	f7 75 80             	divl   -0x80(%ebp)
f0119a68:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119a6e:	29 d0                	sub    %edx,%eax
f0119a70:	01 d8                	add    %ebx,%eax
f0119a72:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119a77:	39 c1                	cmp    %eax,%ecx
f0119a79:	0f 85 20 01 00 00    	jne    f0119b9f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119a7f:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119a85:	89 c1                	mov    %eax,%ecx
f0119a87:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119a8e:	10 00 00 
f0119a91:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119a96:	0f b6 d0             	movzbl %al,%edx
f0119a99:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119a9f:	01 d0                	add    %edx,%eax
f0119aa1:	48                   	dec    %eax
f0119aa2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0119aa8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119aae:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ab3:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0119ab9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119abf:	29 d0                	sub    %edx,%eax
f0119ac1:	89 c3                	mov    %eax,%ebx
f0119ac3:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0119aca:	10 00 00 
f0119acd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119ad2:	0f b6 c0             	movzbl %al,%eax
f0119ad5:	c1 e0 04             	shl    $0x4,%eax
f0119ad8:	89 c2                	mov    %eax,%edx
f0119ada:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119ae0:	01 d0                	add    %edx,%eax
f0119ae2:	48                   	dec    %eax
f0119ae3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0119ae9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119aef:	ba 00 00 00 00       	mov    $0x0,%edx
f0119af4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0119afa:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119b00:	29 d0                	sub    %edx,%eax
f0119b02:	01 d8                	add    %ebx,%eax
f0119b04:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119b09:	39 c1                	cmp    %eax,%ecx
f0119b0b:	0f 85 8e 00 00 00    	jne    f0119b9f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119b11:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119b17:	89 c1                	mov    %eax,%ecx
f0119b19:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119b20:	10 00 00 
f0119b23:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119b28:	0f b6 d0             	movzbl %al,%edx
f0119b2b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119b31:	01 d0                	add    %edx,%eax
f0119b33:	48                   	dec    %eax
f0119b34:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0119b3a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119b40:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b45:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0119b4b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119b51:	29 d0                	sub    %edx,%eax
f0119b53:	89 c3                	mov    %eax,%ebx
f0119b55:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119b5c:	10 00 00 
f0119b5f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119b64:	0f b6 c0             	movzbl %al,%eax
f0119b67:	c1 e0 04             	shl    $0x4,%eax
f0119b6a:	89 c2                	mov    %eax,%edx
f0119b6c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119b72:	01 d0                	add    %edx,%eax
f0119b74:	48                   	dec    %eax
f0119b75:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119b7b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119b81:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b86:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119b8c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119b92:	29 d0                	sub    %edx,%eax
f0119b94:	01 d8                	add    %ebx,%eax
f0119b96:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119b9b:	39 c1                	cmp    %eax,%ecx
f0119b9d:	74 17                	je     f0119bb6 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119b9f:	83 ec 04             	sub    $0x4,%esp
f0119ba2:	68 4c 9d 13 f0       	push   $0xf0139d4c
f0119ba7:	68 03 01 00 00       	push   $0x103
f0119bac:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119bb1:	e8 fa 65 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bb6:	e8 c9 aa fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119bbb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119bbe:	74 17                	je     f0119bd7 <test_kmalloc_nextfit+0x506>
f0119bc0:	83 ec 04             	sub    $0x4,%esp
f0119bc3:	68 ec 9a 13 f0       	push   $0xf0139aec
f0119bc8:	68 05 01 00 00       	push   $0x105
f0119bcd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119bd2:	e8 d9 65 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0119bd7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119bda:	e8 83 2e ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0119bdf:	29 c3                	sub    %eax,%ebx
f0119be1:	89 d9                	mov    %ebx,%ecx
f0119be3:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0119bea:	10 00 00 
f0119bed:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119bf2:	0f b6 d0             	movzbl %al,%edx
f0119bf5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119bfb:	01 d0                	add    %edx,%eax
f0119bfd:	48                   	dec    %eax
f0119bfe:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0119c04:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119c0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c0f:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119c15:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119c1b:	29 d0                	sub    %edx,%eax
f0119c1d:	89 c3                	mov    %eax,%ebx
f0119c1f:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0119c26:	10 00 00 
f0119c29:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119c2e:	0f b6 c0             	movzbl %al,%eax
f0119c31:	c1 e0 04             	shl    $0x4,%eax
f0119c34:	89 c2                	mov    %eax,%edx
f0119c36:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119c3c:	01 d0                	add    %edx,%eax
f0119c3e:	48                   	dec    %eax
f0119c3f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0119c45:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119c4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c50:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0119c56:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119c5c:	29 d0                	sub    %edx,%eax
f0119c5e:	01 d8                	add    %ebx,%eax
f0119c60:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119c65:	29 c2                	sub    %eax,%edx
f0119c67:	89 d0                	mov    %edx,%eax
f0119c69:	c1 e8 0c             	shr    $0xc,%eax
f0119c6c:	39 c1                	cmp    %eax,%ecx
f0119c6e:	74 17                	je     f0119c87 <test_kmalloc_nextfit+0x5b6>
f0119c70:	83 ec 04             	sub    $0x4,%esp
f0119c73:	68 8f 9d 13 f0       	push   $0xf0139d8f
f0119c78:	68 06 01 00 00       	push   $0x106
f0119c7d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119c82:	e8 29 65 fe ff       	call   f01001b0 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119c87:	e8 f8 a9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119c8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c8f:	e8 ce 2d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0119c94:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119c97:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f0119c9d:	83 ec 0c             	sub    $0xc,%esp
f0119ca0:	50                   	push   %eax
f0119ca1:	e8 6c e3 fe ff       	call   f0108012 <kfree>
f0119ca6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119ca9:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0119caf:	83 ec 0c             	sub    $0xc,%esp
f0119cb2:	50                   	push   %eax
f0119cb3:	e8 5a e3 fe ff       	call   f0108012 <kfree>
f0119cb8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119cbb:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f0119cc1:	83 ec 0c             	sub    $0xc,%esp
f0119cc4:	50                   	push   %eax
f0119cc5:	e8 48 e3 fe ff       	call   f0108012 <kfree>
f0119cca:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119ccd:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f0119cd3:	83 ec 0c             	sub    $0xc,%esp
f0119cd6:	50                   	push   %eax
f0119cd7:	e8 36 e3 fe ff       	call   f0108012 <kfree>
f0119cdc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119cdf:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119ce5:	83 ec 0c             	sub    $0xc,%esp
f0119ce8:	50                   	push   %eax
f0119ce9:	e8 24 e3 fe ff       	call   f0108012 <kfree>
f0119cee:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119cf1:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f0119cf7:	83 ec 0c             	sub    $0xc,%esp
f0119cfa:	50                   	push   %eax
f0119cfb:	e8 12 e3 fe ff       	call   f0108012 <kfree>
f0119d00:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119d03:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f0119d09:	83 ec 0c             	sub    $0xc,%esp
f0119d0c:	50                   	push   %eax
f0119d0d:	e8 00 e3 fe ff       	call   f0108012 <kfree>
f0119d12:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119d15:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119d1b:	83 ec 0c             	sub    $0xc,%esp
f0119d1e:	50                   	push   %eax
f0119d1f:	e8 ee e2 fe ff       	call   f0108012 <kfree>
f0119d24:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119d27:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119d2d:	83 ec 0c             	sub    $0xc,%esp
f0119d30:	50                   	push   %eax
f0119d31:	e8 dc e2 fe ff       	call   f0108012 <kfree>
f0119d36:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0119d39:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119d3f:	83 ec 0c             	sub    $0xc,%esp
f0119d42:	50                   	push   %eax
f0119d43:	e8 ca e2 fe ff       	call   f0108012 <kfree>
f0119d48:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d4b:	e8 34 a9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119d50:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d53:	74 17                	je     f0119d6c <test_kmalloc_nextfit+0x69b>
f0119d55:	83 ec 04             	sub    $0x4,%esp
f0119d58:	68 ec 9a 13 f0       	push   $0xf0139aec
f0119d5d:	68 17 01 00 00       	push   $0x117
f0119d62:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119d67:	e8 44 64 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119d6c:	e8 f1 2c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0119d71:	89 c2                	mov    %eax,%edx
f0119d73:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119d76:	89 d1                	mov    %edx,%ecx
f0119d78:	29 c1                	sub    %eax,%ecx
f0119d7a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119d81:	10 00 00 
f0119d84:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119d89:	0f b6 d0             	movzbl %al,%edx
f0119d8c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119d92:	01 d0                	add    %edx,%eax
f0119d94:	48                   	dec    %eax
f0119d95:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119d9b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119da1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119da6:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119dac:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119db2:	29 d0                	sub    %edx,%eax
f0119db4:	89 c3                	mov    %eax,%ebx
f0119db6:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119dbd:	10 00 00 
f0119dc0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119dc5:	0f b6 c0             	movzbl %al,%eax
f0119dc8:	c1 e0 04             	shl    $0x4,%eax
f0119dcb:	89 c2                	mov    %eax,%edx
f0119dcd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119dd3:	01 d0                	add    %edx,%eax
f0119dd5:	48                   	dec    %eax
f0119dd6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119ddc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119de2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119de7:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119ded:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119df3:	29 d0                	sub    %edx,%eax
f0119df5:	01 d8                	add    %ebx,%eax
f0119df7:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119dfc:	29 c2                	sub    %eax,%edx
f0119dfe:	89 d0                	mov    %edx,%eax
f0119e00:	c1 e8 0c             	shr    $0xc,%eax
f0119e03:	39 c1                	cmp    %eax,%ecx
f0119e05:	74 17                	je     f0119e1e <test_kmalloc_nextfit+0x74d>
f0119e07:	83 ec 04             	sub    $0x4,%esp
f0119e0a:	68 a0 9d 13 f0       	push   $0xf0139da0
f0119e0f:	68 18 01 00 00       	push   $0x118
f0119e14:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119e19:	e8 92 63 fe ff       	call   f01001b0 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119e1e:	e8 61 a8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119e23:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119e26:	e8 37 2c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0119e2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119e2e:	83 ec 0c             	sub    $0xc,%esp
f0119e31:	68 00 fc 0f 00       	push   $0xffc00
f0119e36:	e8 bd e1 fe ff       	call   f0107ff8 <kmalloc>
f0119e3b:	83 c4 10             	add    $0x10,%esp
f0119e3e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119e44:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119e4b:	10 00 00 
f0119e4e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119e53:	0f b6 d0             	movzbl %al,%edx
f0119e56:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119e5c:	01 d0                	add    %edx,%eax
f0119e5e:	48                   	dec    %eax
f0119e5f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119e65:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119e6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e70:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119e76:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119e7c:	29 d0                	sub    %edx,%eax
f0119e7e:	89 c1                	mov    %eax,%ecx
f0119e80:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119e87:	10 00 00 
f0119e8a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119e8f:	0f b6 c0             	movzbl %al,%eax
f0119e92:	c1 e0 04             	shl    $0x4,%eax
f0119e95:	89 c2                	mov    %eax,%edx
f0119e97:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119e9d:	01 d0                	add    %edx,%eax
f0119e9f:	48                   	dec    %eax
f0119ea0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119ea6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119eac:	ba 00 00 00 00       	mov    $0x0,%edx
f0119eb1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119eb7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119ebd:	29 d0                	sub    %edx,%eax
f0119ebf:	01 c8                	add    %ecx,%eax
f0119ec1:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119ec7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119ecd:	39 c2                	cmp    %eax,%edx
f0119ecf:	74 17                	je     f0119ee8 <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f0119ed1:	83 ec 04             	sub    $0x4,%esp
f0119ed4:	68 e0 9d 13 f0       	push   $0xf0139de0
f0119ed9:	68 1f 01 00 00       	push   $0x11f
f0119ede:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119ee3:	e8 c8 62 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ee8:	e8 97 a7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119eed:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ef0:	74 17                	je     f0119f09 <test_kmalloc_nextfit+0x838>
f0119ef2:	83 ec 04             	sub    $0x4,%esp
f0119ef5:	68 ec 9a 13 f0       	push   $0xf0139aec
f0119efa:	68 20 01 00 00       	push   $0x120
f0119eff:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119f04:	e8 a7 62 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119f09:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119f0c:	e8 51 2b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0119f11:	29 c3                	sub    %eax,%ebx
f0119f13:	89 d8                	mov    %ebx,%eax
f0119f15:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119f1a:	74 17                	je     f0119f33 <test_kmalloc_nextfit+0x862>
f0119f1c:	83 ec 04             	sub    $0x4,%esp
f0119f1f:	68 8f 9d 13 f0       	push   $0xf0139d8f
f0119f24:	68 21 01 00 00       	push   $0x121
f0119f29:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119f2e:	e8 7d 62 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119f33:	e8 4c a7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119f38:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f3b:	e8 22 2b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f0119f40:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119f43:	83 ec 0c             	sub    $0xc,%esp
f0119f46:	68 00 04 00 00       	push   $0x400
f0119f4b:	e8 a8 e0 fe ff       	call   f0107ff8 <kmalloc>
f0119f50:	83 c4 10             	add    $0x10,%esp
f0119f53:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119f59:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119f60:	10 00 00 
f0119f63:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119f68:	0f b6 d0             	movzbl %al,%edx
f0119f6b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119f71:	01 d0                	add    %edx,%eax
f0119f73:	48                   	dec    %eax
f0119f74:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119f7a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119f80:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f85:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119f8b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119f91:	29 d0                	sub    %edx,%eax
f0119f93:	89 c1                	mov    %eax,%ecx
f0119f95:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119f9c:	10 00 00 
f0119f9f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119fa4:	0f b6 c0             	movzbl %al,%eax
f0119fa7:	c1 e0 04             	shl    $0x4,%eax
f0119faa:	89 c2                	mov    %eax,%edx
f0119fac:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119fb2:	01 d0                	add    %edx,%eax
f0119fb4:	48                   	dec    %eax
f0119fb5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119fbb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119fc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fc6:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119fcc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119fd2:	29 d0                	sub    %edx,%eax
f0119fd4:	01 c8                	add    %ecx,%eax
f0119fd6:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119fdc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119fe2:	39 c2                	cmp    %eax,%edx
f0119fe4:	74 17                	je     f0119ffd <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f0119fe6:	83 ec 04             	sub    $0x4,%esp
f0119fe9:	68 e0 9d 13 f0       	push   $0xf0139de0
f0119fee:	68 27 01 00 00       	push   $0x127
f0119ff3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0119ff8:	e8 b3 61 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ffd:	e8 82 a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a002:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a005:	74 17                	je     f011a01e <test_kmalloc_nextfit+0x94d>
f011a007:	83 ec 04             	sub    $0x4,%esp
f011a00a:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a00f:	68 28 01 00 00       	push   $0x128
f011a014:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a019:	e8 92 61 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a01e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a021:	e8 3c 2a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a026:	29 c3                	sub    %eax,%ebx
f011a028:	89 d8                	mov    %ebx,%eax
f011a02a:	83 f8 01             	cmp    $0x1,%eax
f011a02d:	74 17                	je     f011a046 <test_kmalloc_nextfit+0x975>
f011a02f:	83 ec 04             	sub    $0x4,%esp
f011a032:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011a037:	68 29 01 00 00       	push   $0x129
f011a03c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a041:	e8 6a 61 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a046:	e8 39 a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a04b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a04e:	e8 0f 2a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a053:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011a056:	83 ec 0c             	sub    $0xc,%esp
f011a059:	68 00 00 50 00       	push   $0x500000
f011a05e:	e8 95 df fe ff       	call   f0107ff8 <kmalloc>
f011a063:	83 c4 10             	add    $0x10,%esp
f011a066:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011a06c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a073:	10 00 00 
f011a076:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a07b:	0f b6 d0             	movzbl %al,%edx
f011a07e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a084:	01 d0                	add    %edx,%eax
f011a086:	48                   	dec    %eax
f011a087:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a08d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a093:	ba 00 00 00 00       	mov    $0x0,%edx
f011a098:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a09e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a0a4:	29 d0                	sub    %edx,%eax
f011a0a6:	89 c1                	mov    %eax,%ecx
f011a0a8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a0af:	10 00 00 
f011a0b2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a0b7:	0f b6 c0             	movzbl %al,%eax
f011a0ba:	c1 e0 04             	shl    $0x4,%eax
f011a0bd:	89 c2                	mov    %eax,%edx
f011a0bf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a0c5:	01 d0                	add    %edx,%eax
f011a0c7:	48                   	dec    %eax
f011a0c8:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a0ce:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a0d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0d9:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a0df:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a0e5:	29 d0                	sub    %edx,%eax
f011a0e7:	01 c8                	add    %ecx,%eax
f011a0e9:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011a0ef:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a0f5:	39 c2                	cmp    %eax,%edx
f011a0f7:	74 17                	je     f011a110 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f011a0f9:	83 ec 04             	sub    $0x4,%esp
f011a0fc:	68 e0 9d 13 f0       	push   $0xf0139de0
f011a101:	68 2f 01 00 00       	push   $0x12f
f011a106:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a10b:	e8 a0 60 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a110:	e8 6f a5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a115:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a118:	74 17                	je     f011a131 <test_kmalloc_nextfit+0xa60>
f011a11a:	83 ec 04             	sub    $0x4,%esp
f011a11d:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a122:	68 30 01 00 00       	push   $0x130
f011a127:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a12c:	e8 7f 60 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a131:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a134:	e8 29 29 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a139:	29 c3                	sub    %eax,%ebx
f011a13b:	89 d8                	mov    %ebx,%eax
f011a13d:	3d 00 05 00 00       	cmp    $0x500,%eax
f011a142:	74 17                	je     f011a15b <test_kmalloc_nextfit+0xa8a>
f011a144:	83 ec 04             	sub    $0x4,%esp
f011a147:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011a14c:	68 31 01 00 00       	push   $0x131
f011a151:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a156:	e8 55 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a15b:	e8 24 a5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a160:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a163:	e8 fa 28 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a168:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f011a16b:	83 ec 0c             	sub    $0xc,%esp
f011a16e:	68 00 00 10 00       	push   $0x100000
f011a173:	e8 80 de fe ff       	call   f0107ff8 <kmalloc>
f011a178:	83 c4 10             	add    $0x10,%esp
f011a17b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f011a181:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a188:	10 00 00 
f011a18b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a190:	0f b6 d0             	movzbl %al,%edx
f011a193:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a199:	01 d0                	add    %edx,%eax
f011a19b:	48                   	dec    %eax
f011a19c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a1a2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a1a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1ad:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a1b3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a1b9:	29 d0                	sub    %edx,%eax
f011a1bb:	89 c1                	mov    %eax,%ecx
f011a1bd:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a1c4:	10 00 00 
f011a1c7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a1cc:	0f b6 c0             	movzbl %al,%eax
f011a1cf:	c1 e0 04             	shl    $0x4,%eax
f011a1d2:	89 c2                	mov    %eax,%edx
f011a1d4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a1da:	01 d0                	add    %edx,%eax
f011a1dc:	48                   	dec    %eax
f011a1dd:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a1e3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a1e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1ee:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a1f4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a1fa:	29 d0                	sub    %edx,%eax
f011a1fc:	01 c8                	add    %ecx,%eax
f011a1fe:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f011a204:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a20a:	39 c2                	cmp    %eax,%edx
f011a20c:	74 17                	je     f011a225 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f011a20e:	83 ec 04             	sub    $0x4,%esp
f011a211:	68 e0 9d 13 f0       	push   $0xf0139de0
f011a216:	68 37 01 00 00       	push   $0x137
f011a21b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a220:	e8 8b 5f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a225:	e8 5a a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a22a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a22d:	74 17                	je     f011a246 <test_kmalloc_nextfit+0xb75>
f011a22f:	83 ec 04             	sub    $0x4,%esp
f011a232:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a237:	68 38 01 00 00       	push   $0x138
f011a23c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a241:	e8 6a 5f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a246:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a249:	e8 14 28 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a24e:	29 c3                	sub    %eax,%ebx
f011a250:	89 d8                	mov    %ebx,%eax
f011a252:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a257:	74 17                	je     f011a270 <test_kmalloc_nextfit+0xb9f>
f011a259:	83 ec 04             	sub    $0x4,%esp
f011a25c:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011a261:	68 39 01 00 00       	push   $0x139
f011a266:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a26b:	e8 40 5f fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a270:	e8 0f a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a275:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a278:	e8 e5 27 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a27d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f011a280:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011a286:	83 ec 0c             	sub    $0xc,%esp
f011a289:	50                   	push   %eax
f011a28a:	e8 83 dd fe ff       	call   f0108012 <kfree>
f011a28f:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a292:	e8 ed a3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a297:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a29a:	74 17                	je     f011a2b3 <test_kmalloc_nextfit+0xbe2>
f011a29c:	83 ec 04             	sub    $0x4,%esp
f011a29f:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a2a4:	68 3e 01 00 00       	push   $0x13e
f011a2a9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a2ae:	e8 fd 5e fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a2b3:	e8 aa 27 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a2b8:	89 c2                	mov    %eax,%edx
f011a2ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a2bd:	29 c2                	sub    %eax,%edx
f011a2bf:	89 d0                	mov    %edx,%eax
f011a2c1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a2c6:	74 17                	je     f011a2df <test_kmalloc_nextfit+0xc0e>
f011a2c8:	83 ec 04             	sub    $0x4,%esp
f011a2cb:	68 a0 9d 13 f0       	push   $0xf0139da0
f011a2d0:	68 3f 01 00 00       	push   $0x13f
f011a2d5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a2da:	e8 d1 5e fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a2df:	e8 a0 a3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a2e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a2e7:	e8 76 27 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a2ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a2ef:	83 ec 0c             	sub    $0xc,%esp
f011a2f2:	68 00 04 00 00       	push   $0x400
f011a2f7:	e8 fc dc fe ff       	call   f0107ff8 <kmalloc>
f011a2fc:	83 c4 10             	add    $0x10,%esp
f011a2ff:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a305:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a30c:	10 00 00 
f011a30f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a314:	0f b6 d0             	movzbl %al,%edx
f011a317:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a31d:	01 d0                	add    %edx,%eax
f011a31f:	48                   	dec    %eax
f011a320:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a326:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a32c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a331:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a337:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a33d:	29 d0                	sub    %edx,%eax
f011a33f:	89 c1                	mov    %eax,%ecx
f011a341:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a348:	10 00 00 
f011a34b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a350:	0f b6 c0             	movzbl %al,%eax
f011a353:	c1 e0 04             	shl    $0x4,%eax
f011a356:	89 c2                	mov    %eax,%edx
f011a358:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a35e:	01 d0                	add    %edx,%eax
f011a360:	48                   	dec    %eax
f011a361:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a367:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a36d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a372:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a378:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a37e:	29 d0                	sub    %edx,%eax
f011a380:	01 c8                	add    %ecx,%eax
f011a382:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a388:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a38e:	39 c2                	cmp    %eax,%edx
f011a390:	74 17                	je     f011a3a9 <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f011a392:	83 ec 04             	sub    $0x4,%esp
f011a395:	68 e0 9d 13 f0       	push   $0xf0139de0
f011a39a:	68 45 01 00 00       	push   $0x145
f011a39f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a3a4:	e8 07 5e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3a9:	e8 d6 a2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a3ae:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a3b1:	74 17                	je     f011a3ca <test_kmalloc_nextfit+0xcf9>
f011a3b3:	83 ec 04             	sub    $0x4,%esp
f011a3b6:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a3bb:	68 46 01 00 00       	push   $0x146
f011a3c0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a3c5:	e8 e6 5d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a3ca:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a3cd:	e8 90 26 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a3d2:	29 c3                	sub    %eax,%ebx
f011a3d4:	89 d8                	mov    %ebx,%eax
f011a3d6:	83 f8 01             	cmp    $0x1,%eax
f011a3d9:	74 17                	je     f011a3f2 <test_kmalloc_nextfit+0xd21>
f011a3db:	83 ec 04             	sub    $0x4,%esp
f011a3de:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011a3e3:	68 47 01 00 00       	push   $0x147
f011a3e8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a3ed:	e8 be 5d fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a3f2:	e8 8d a2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a3f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a3fa:	e8 63 26 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a3ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a402:	83 ec 0c             	sub    $0xc,%esp
f011a405:	68 00 e0 1f 00       	push   $0x1fe000
f011a40a:	e8 e9 db fe ff       	call   f0107ff8 <kmalloc>
f011a40f:	83 c4 10             	add    $0x10,%esp
f011a412:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a418:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a41f:	10 00 00 
f011a422:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a427:	0f b6 d0             	movzbl %al,%edx
f011a42a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a430:	01 d0                	add    %edx,%eax
f011a432:	48                   	dec    %eax
f011a433:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a439:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a43f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a444:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a44a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a450:	29 d0                	sub    %edx,%eax
f011a452:	89 c1                	mov    %eax,%ecx
f011a454:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a45b:	10 00 00 
f011a45e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a463:	0f b6 c0             	movzbl %al,%eax
f011a466:	c1 e0 04             	shl    $0x4,%eax
f011a469:	89 c2                	mov    %eax,%edx
f011a46b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a471:	01 d0                	add    %edx,%eax
f011a473:	48                   	dec    %eax
f011a474:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a47a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a480:	ba 00 00 00 00       	mov    $0x0,%edx
f011a485:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a48b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a491:	29 d0                	sub    %edx,%eax
f011a493:	01 c8                	add    %ecx,%eax
f011a495:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a49b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a4a1:	39 c2                	cmp    %eax,%edx
f011a4a3:	74 17                	je     f011a4bc <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f011a4a5:	83 ec 04             	sub    $0x4,%esp
f011a4a8:	68 e0 9d 13 f0       	push   $0xf0139de0
f011a4ad:	68 4d 01 00 00       	push   $0x14d
f011a4b2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a4b7:	e8 f4 5c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4bc:	e8 c3 a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a4c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a4c4:	74 17                	je     f011a4dd <test_kmalloc_nextfit+0xe0c>
f011a4c6:	83 ec 04             	sub    $0x4,%esp
f011a4c9:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a4ce:	68 4e 01 00 00       	push   $0x14e
f011a4d3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a4d8:	e8 d3 5c fe ff       	call   f01001b0 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a4dd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a4e0:	e8 7d 25 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a4e5:	29 c3                	sub    %eax,%ebx
f011a4e7:	89 d8                	mov    %ebx,%eax
f011a4e9:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a4ee:	74 17                	je     f011a507 <test_kmalloc_nextfit+0xe36>
f011a4f0:	83 ec 04             	sub    $0x4,%esp
f011a4f3:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011a4f8:	68 50 01 00 00       	push   $0x150
f011a4fd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a502:	e8 a9 5c fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a507:	e8 78 a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a50c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a50f:	e8 4e 25 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a514:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a517:	83 ec 0c             	sub    $0xc,%esp
f011a51a:	68 00 00 08 00       	push   $0x80000
f011a51f:	e8 d4 da fe ff       	call   f0107ff8 <kmalloc>
f011a524:	83 c4 10             	add    $0x10,%esp
f011a527:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a52d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a534:	10 00 00 
f011a537:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a53c:	0f b6 d0             	movzbl %al,%edx
f011a53f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a545:	01 d0                	add    %edx,%eax
f011a547:	48                   	dec    %eax
f011a548:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a54e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a554:	ba 00 00 00 00       	mov    $0x0,%edx
f011a559:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a55f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a565:	29 d0                	sub    %edx,%eax
f011a567:	89 c1                	mov    %eax,%ecx
f011a569:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a570:	10 00 00 
f011a573:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a578:	0f b6 c0             	movzbl %al,%eax
f011a57b:	c1 e0 04             	shl    $0x4,%eax
f011a57e:	89 c2                	mov    %eax,%edx
f011a580:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a586:	01 d0                	add    %edx,%eax
f011a588:	48                   	dec    %eax
f011a589:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a58f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a595:	ba 00 00 00 00       	mov    $0x0,%edx
f011a59a:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a5a0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a5a6:	29 d0                	sub    %edx,%eax
f011a5a8:	01 c8                	add    %ecx,%eax
f011a5aa:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a5b0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a5b6:	39 c2                	cmp    %eax,%edx
f011a5b8:	74 17                	je     f011a5d1 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f011a5ba:	83 ec 04             	sub    $0x4,%esp
f011a5bd:	68 e0 9d 13 f0       	push   $0xf0139de0
f011a5c2:	68 56 01 00 00       	push   $0x156
f011a5c7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a5cc:	e8 df 5b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5d1:	e8 ae a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a5d6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a5d9:	74 17                	je     f011a5f2 <test_kmalloc_nextfit+0xf21>
f011a5db:	83 ec 04             	sub    $0x4,%esp
f011a5de:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a5e3:	68 57 01 00 00       	push   $0x157
f011a5e8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a5ed:	e8 be 5b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a5f2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a5f5:	e8 68 24 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a5fa:	29 c3                	sub    %eax,%ebx
f011a5fc:	89 d8                	mov    %ebx,%eax
f011a5fe:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a603:	74 17                	je     f011a61c <test_kmalloc_nextfit+0xf4b>
f011a605:	83 ec 04             	sub    $0x4,%esp
f011a608:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011a60d:	68 58 01 00 00       	push   $0x158
f011a612:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a617:	e8 94 5b fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a61c:	83 ec 0c             	sub    $0xc,%esp
f011a61f:	68 00 9e 13 f0       	push   $0xf0139e00
f011a624:	e8 08 68 fe ff       	call   f0100e31 <cprintf>
f011a629:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a62c:	e8 53 a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a631:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a634:	e8 29 24 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a639:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a63c:	83 ec 0c             	sub    $0xc,%esp
f011a63f:	68 00 00 38 00       	push   $0x380000
f011a644:	e8 af d9 fe ff       	call   f0107ff8 <kmalloc>
f011a649:	83 c4 10             	add    $0x10,%esp
f011a64c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a652:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a659:	10 00 00 
f011a65c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a661:	0f b6 d0             	movzbl %al,%edx
f011a664:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a66a:	01 d0                	add    %edx,%eax
f011a66c:	48                   	dec    %eax
f011a66d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a673:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a679:	ba 00 00 00 00       	mov    $0x0,%edx
f011a67e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a684:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a68a:	29 d0                	sub    %edx,%eax
f011a68c:	89 c1                	mov    %eax,%ecx
f011a68e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a695:	10 00 00 
f011a698:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a69d:	0f b6 c0             	movzbl %al,%eax
f011a6a0:	c1 e0 04             	shl    $0x4,%eax
f011a6a3:	89 c2                	mov    %eax,%edx
f011a6a5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a6ab:	01 d0                	add    %edx,%eax
f011a6ad:	48                   	dec    %eax
f011a6ae:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a6b4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a6ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6bf:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a6c5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a6cb:	29 d0                	sub    %edx,%eax
f011a6cd:	01 c8                	add    %ecx,%eax
f011a6cf:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a6d5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a6db:	39 c2                	cmp    %eax,%edx
f011a6dd:	74 17                	je     f011a6f6 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f011a6df:	83 ec 04             	sub    $0x4,%esp
f011a6e2:	68 e0 9d 13 f0       	push   $0xf0139de0
f011a6e7:	68 62 01 00 00       	push   $0x162
f011a6ec:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a6f1:	e8 ba 5a fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a6f6:	e8 89 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a6fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a6fe:	74 17                	je     f011a717 <test_kmalloc_nextfit+0x1046>
f011a700:	83 ec 04             	sub    $0x4,%esp
f011a703:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a708:	68 63 01 00 00       	push   $0x163
f011a70d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a712:	e8 99 5a fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a717:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a71a:	e8 43 23 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a71f:	29 c3                	sub    %eax,%ebx
f011a721:	89 d8                	mov    %ebx,%eax
f011a723:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a728:	74 17                	je     f011a741 <test_kmalloc_nextfit+0x1070>
f011a72a:	83 ec 04             	sub    $0x4,%esp
f011a72d:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011a732:	68 64 01 00 00       	push   $0x164
f011a737:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a73c:	e8 6f 5a fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a741:	e8 3e 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a746:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a749:	e8 14 23 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a74e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a751:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f011a757:	83 ec 0c             	sub    $0xc,%esp
f011a75a:	50                   	push   %eax
f011a75b:	e8 b2 d8 fe ff       	call   f0108012 <kfree>
f011a760:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a763:	e8 1c 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a768:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a76b:	74 17                	je     f011a784 <test_kmalloc_nextfit+0x10b3>
f011a76d:	83 ec 04             	sub    $0x4,%esp
f011a770:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a775:	68 69 01 00 00       	push   $0x169
f011a77a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a77f:	e8 2c 5a fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a784:	e8 d9 22 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a789:	89 c2                	mov    %eax,%edx
f011a78b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a78e:	29 c2                	sub    %eax,%edx
f011a790:	89 d0                	mov    %edx,%eax
f011a792:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a797:	74 17                	je     f011a7b0 <test_kmalloc_nextfit+0x10df>
f011a799:	83 ec 04             	sub    $0x4,%esp
f011a79c:	68 a0 9d 13 f0       	push   $0xf0139da0
f011a7a1:	68 6a 01 00 00       	push   $0x16a
f011a7a6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a7ab:	e8 00 5a fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a7b0:	e8 cf 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a7b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a7b8:	e8 a5 22 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a7bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a7c0:	83 ec 0c             	sub    $0xc,%esp
f011a7c3:	68 00 fc 3f 00       	push   $0x3ffc00
f011a7c8:	e8 2b d8 fe ff       	call   f0107ff8 <kmalloc>
f011a7cd:	83 c4 10             	add    $0x10,%esp
f011a7d0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a7d6:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011a7dd:	10 00 00 
f011a7e0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a7e5:	0f b6 d0             	movzbl %al,%edx
f011a7e8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011a7ee:	01 d0                	add    %edx,%eax
f011a7f0:	48                   	dec    %eax
f011a7f1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011a7f7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a7fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a802:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011a808:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a80e:	29 d0                	sub    %edx,%eax
f011a810:	89 c1                	mov    %eax,%ecx
f011a812:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011a819:	10 00 00 
f011a81c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a821:	0f b6 c0             	movzbl %al,%eax
f011a824:	c1 e0 04             	shl    $0x4,%eax
f011a827:	89 c2                	mov    %eax,%edx
f011a829:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011a82f:	01 d0                	add    %edx,%eax
f011a831:	48                   	dec    %eax
f011a832:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011a838:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a83e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a843:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011a849:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a84f:	29 d0                	sub    %edx,%eax
f011a851:	01 c8                	add    %ecx,%eax
f011a853:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a859:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a85f:	39 c2                	cmp    %eax,%edx
f011a861:	74 17                	je     f011a87a <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f011a863:	83 ec 04             	sub    $0x4,%esp
f011a866:	68 e0 9d 13 f0       	push   $0xf0139de0
f011a86b:	68 70 01 00 00       	push   $0x170
f011a870:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a875:	e8 36 59 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a87a:	e8 05 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a87f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a882:	74 17                	je     f011a89b <test_kmalloc_nextfit+0x11ca>
f011a884:	83 ec 04             	sub    $0x4,%esp
f011a887:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a88c:	68 71 01 00 00       	push   $0x171
f011a891:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a896:	e8 15 59 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a89b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a89e:	e8 bf 21 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a8a3:	29 c3                	sub    %eax,%ebx
f011a8a5:	89 d8                	mov    %ebx,%eax
f011a8a7:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a8ac:	74 17                	je     f011a8c5 <test_kmalloc_nextfit+0x11f4>
f011a8ae:	83 ec 04             	sub    $0x4,%esp
f011a8b1:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011a8b6:	68 72 01 00 00       	push   $0x172
f011a8bb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a8c0:	e8 eb 58 fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a8c5:	83 ec 0c             	sub    $0xc,%esp
f011a8c8:	68 3c 9e 13 f0       	push   $0xf0139e3c
f011a8cd:	e8 5f 65 fe ff       	call   f0100e31 <cprintf>
f011a8d2:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a8d5:	e8 aa 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a8da:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a8dd:	e8 80 21 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a8e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a8e5:	83 ec 0c             	sub    $0xc,%esp
f011a8e8:	68 00 00 60 00       	push   $0x600000
f011a8ed:	e8 06 d7 fe ff       	call   f0107ff8 <kmalloc>
f011a8f2:	83 c4 10             	add    $0x10,%esp
f011a8f5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f011a8fb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a901:	85 c0                	test   %eax,%eax
f011a903:	74 17                	je     f011a91c <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f011a905:	83 ec 04             	sub    $0x4,%esp
f011a908:	68 e0 9d 13 f0       	push   $0xf0139de0
f011a90d:	68 7c 01 00 00       	push   $0x17c
f011a912:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a917:	e8 94 58 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a91c:	e8 63 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a921:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a924:	74 17                	je     f011a93d <test_kmalloc_nextfit+0x126c>
f011a926:	83 ec 04             	sub    $0x4,%esp
f011a929:	68 ec 9a 13 f0       	push   $0xf0139aec
f011a92e:	68 7d 01 00 00       	push   $0x17d
f011a933:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a938:	e8 73 58 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a93d:	e8 20 21 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a942:	89 c2                	mov    %eax,%edx
f011a944:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a947:	39 c2                	cmp    %eax,%edx
f011a949:	74 17                	je     f011a962 <test_kmalloc_nextfit+0x1291>
f011a94b:	83 ec 04             	sub    $0x4,%esp
f011a94e:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011a953:	68 7e 01 00 00       	push   $0x17e
f011a958:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011a95d:	e8 4e 58 fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a962:	83 ec 0c             	sub    $0xc,%esp
f011a965:	68 74 9e 13 f0       	push   $0xf0139e74
f011a96a:	e8 c2 64 fe ff       	call   f0100e31 <cprintf>
f011a96f:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a972:	83 ec 0c             	sub    $0xc,%esp
f011a975:	68 b0 9e 13 f0       	push   $0xf0139eb0
f011a97a:	e8 b2 64 fe ff       	call   f0100e31 <cprintf>
f011a97f:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a982:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a987:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a98a:	5b                   	pop    %ebx
f011a98b:	5f                   	pop    %edi
f011a98c:	5d                   	pop    %ebp
f011a98d:	c3                   	ret    

f011a98e <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a98e:	55                   	push   %ebp
f011a98f:	89 e5                	mov    %esp,%ebp
f011a991:	57                   	push   %edi
f011a992:	53                   	push   %ebx
f011a993:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f011a999:	83 ec 0c             	sub    $0xc,%esp
f011a99c:	68 14 9a 13 f0       	push   $0xf0139a14
f011a9a1:	e8 8b 64 fe ff       	call   f0100e31 <cprintf>
f011a9a6:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a9a9:	83 ec 0c             	sub    $0xc,%esp
f011a9ac:	68 44 9a 13 f0       	push   $0xf0139a44
f011a9b1:	e8 7b 64 fe ff       	call   f0100e31 <cprintf>
f011a9b6:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a9b9:	83 ec 0c             	sub    $0xc,%esp
f011a9bc:	68 14 9a 13 f0       	push   $0xf0139a14
f011a9c1:	e8 6b 64 fe ff       	call   f0100e31 <cprintf>
f011a9c6:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a9c9:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011a9cf:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a9d4:	b8 00 00 00 00       	mov    $0x0,%eax
f011a9d9:	89 d7                	mov    %edx,%edi
f011a9db:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a9dd:	e8 80 20 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011a9e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9e5:	e8 9a 9c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a9ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a9ed:	83 ec 0c             	sub    $0xc,%esp
f011a9f0:	68 00 fc 2f 00       	push   $0x2ffc00
f011a9f5:	e8 fe d5 fe ff       	call   f0107ff8 <kmalloc>
f011a9fa:	83 c4 10             	add    $0x10,%esp
f011a9fd:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011aa03:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011aa09:	89 c1                	mov    %eax,%ecx
f011aa0b:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011aa12:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011aa17:	0f b6 d0             	movzbl %al,%edx
f011aa1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011aa1d:	01 d0                	add    %edx,%eax
f011aa1f:	48                   	dec    %eax
f011aa20:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011aa23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011aa26:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa2b:	f7 75 ec             	divl   -0x14(%ebp)
f011aa2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011aa31:	29 d0                	sub    %edx,%eax
f011aa33:	89 c3                	mov    %eax,%ebx
f011aa35:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011aa3c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011aa41:	0f b6 c0             	movzbl %al,%eax
f011aa44:	c1 e0 04             	shl    $0x4,%eax
f011aa47:	89 c2                	mov    %eax,%edx
f011aa49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011aa4c:	01 d0                	add    %edx,%eax
f011aa4e:	48                   	dec    %eax
f011aa4f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011aa52:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011aa55:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa5a:	f7 75 e4             	divl   -0x1c(%ebp)
f011aa5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011aa60:	29 d0                	sub    %edx,%eax
f011aa62:	01 d8                	add    %ebx,%eax
f011aa64:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011aa69:	39 c1                	cmp    %eax,%ecx
f011aa6b:	74 17                	je     f011aa84 <test_kmalloc_bestfit1+0xf6>
f011aa6d:	83 ec 04             	sub    $0x4,%esp
f011aa70:	68 ec 9e 13 f0       	push   $0xf0139eec
f011aa75:	68 98 01 00 00       	push   $0x198
f011aa7a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011aa7f:	e8 2c 57 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa84:	e8 fb 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aa89:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa8c:	74 17                	je     f011aaa5 <test_kmalloc_bestfit1+0x117>
f011aa8e:	83 ec 04             	sub    $0x4,%esp
f011aa91:	68 ec 9a 13 f0       	push   $0xf0139aec
f011aa96:	68 99 01 00 00       	push   $0x199
f011aa9b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011aaa0:	e8 0b 57 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aaa5:	e8 b8 1f ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011aaaa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aaad:	29 c2                	sub    %eax,%edx
f011aaaf:	89 d0                	mov    %edx,%eax
f011aab1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aab6:	74 17                	je     f011aacf <test_kmalloc_bestfit1+0x141>
f011aab8:	83 ec 04             	sub    $0x4,%esp
f011aabb:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011aac0:	68 9a 01 00 00       	push   $0x19a
f011aac5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011aaca:	e8 e1 56 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011aacf:	e8 8e 1f ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011aad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aad7:	e8 a8 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aadc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011aadf:	83 ec 0c             	sub    $0xc,%esp
f011aae2:	68 00 fc 2f 00       	push   $0x2ffc00
f011aae7:	e8 0c d5 fe ff       	call   f0107ff8 <kmalloc>
f011aaec:	83 c4 10             	add    $0x10,%esp
f011aaef:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011aaf5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011aafb:	89 c1                	mov    %eax,%ecx
f011aafd:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ab04:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ab09:	0f b6 d0             	movzbl %al,%edx
f011ab0c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ab0f:	01 d0                	add    %edx,%eax
f011ab11:	48                   	dec    %eax
f011ab12:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ab15:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ab18:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab1d:	f7 75 dc             	divl   -0x24(%ebp)
f011ab20:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ab23:	29 d0                	sub    %edx,%eax
f011ab25:	89 c3                	mov    %eax,%ebx
f011ab27:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ab2e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ab33:	0f b6 c0             	movzbl %al,%eax
f011ab36:	c1 e0 04             	shl    $0x4,%eax
f011ab39:	89 c2                	mov    %eax,%edx
f011ab3b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ab3e:	01 d0                	add    %edx,%eax
f011ab40:	48                   	dec    %eax
f011ab41:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ab44:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ab47:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab4c:	f7 75 d4             	divl   -0x2c(%ebp)
f011ab4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ab52:	29 d0                	sub    %edx,%eax
f011ab54:	01 d8                	add    %ebx,%eax
f011ab56:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011ab5b:	39 c1                	cmp    %eax,%ecx
f011ab5d:	74 17                	je     f011ab76 <test_kmalloc_bestfit1+0x1e8>
f011ab5f:	83 ec 04             	sub    $0x4,%esp
f011ab62:	68 ec 9e 13 f0       	push   $0xf0139eec
f011ab67:	68 a0 01 00 00       	push   $0x1a0
f011ab6c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ab71:	e8 3a 56 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab76:	e8 09 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ab7b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab7e:	74 17                	je     f011ab97 <test_kmalloc_bestfit1+0x209>
f011ab80:	83 ec 04             	sub    $0x4,%esp
f011ab83:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ab88:	68 a1 01 00 00       	push   $0x1a1
f011ab8d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ab92:	e8 19 56 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ab97:	e8 c6 1e ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011ab9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab9f:	29 c2                	sub    %eax,%edx
f011aba1:	89 d0                	mov    %edx,%eax
f011aba3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aba8:	74 17                	je     f011abc1 <test_kmalloc_bestfit1+0x233>
f011abaa:	83 ec 04             	sub    $0x4,%esp
f011abad:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011abb2:	68 a2 01 00 00       	push   $0x1a2
f011abb7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011abbc:	e8 ef 55 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011abc1:	e8 9c 1e ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011abc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abc9:	e8 b6 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011abce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011abd1:	83 ec 0c             	sub    $0xc,%esp
f011abd4:	68 00 fc 1f 00       	push   $0x1ffc00
f011abd9:	e8 1a d4 fe ff       	call   f0107ff8 <kmalloc>
f011abde:	83 c4 10             	add    $0x10,%esp
f011abe1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011abe7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011abed:	89 c1                	mov    %eax,%ecx
f011abef:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011abf6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011abfb:	0f b6 d0             	movzbl %al,%edx
f011abfe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ac01:	01 d0                	add    %edx,%eax
f011ac03:	48                   	dec    %eax
f011ac04:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011ac07:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ac0a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac0f:	f7 75 cc             	divl   -0x34(%ebp)
f011ac12:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ac15:	29 d0                	sub    %edx,%eax
f011ac17:	89 c3                	mov    %eax,%ebx
f011ac19:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ac20:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ac25:	0f b6 c0             	movzbl %al,%eax
f011ac28:	c1 e0 04             	shl    $0x4,%eax
f011ac2b:	89 c2                	mov    %eax,%edx
f011ac2d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ac30:	01 d0                	add    %edx,%eax
f011ac32:	48                   	dec    %eax
f011ac33:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ac36:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ac39:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac3e:	f7 75 c4             	divl   -0x3c(%ebp)
f011ac41:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ac44:	29 d0                	sub    %edx,%eax
f011ac46:	01 d8                	add    %ebx,%eax
f011ac48:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011ac4d:	39 c1                	cmp    %eax,%ecx
f011ac4f:	74 17                	je     f011ac68 <test_kmalloc_bestfit1+0x2da>
f011ac51:	83 ec 04             	sub    $0x4,%esp
f011ac54:	68 ec 9e 13 f0       	push   $0xf0139eec
f011ac59:	68 a8 01 00 00       	push   $0x1a8
f011ac5e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ac63:	e8 48 55 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac68:	e8 17 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ac6d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac70:	74 17                	je     f011ac89 <test_kmalloc_bestfit1+0x2fb>
f011ac72:	83 ec 04             	sub    $0x4,%esp
f011ac75:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ac7a:	68 a9 01 00 00       	push   $0x1a9
f011ac7f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ac84:	e8 27 55 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ac89:	e8 d4 1d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011ac8e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac91:	29 c2                	sub    %eax,%edx
f011ac93:	89 d0                	mov    %edx,%eax
f011ac95:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ac9a:	74 17                	je     f011acb3 <test_kmalloc_bestfit1+0x325>
f011ac9c:	83 ec 04             	sub    $0x4,%esp
f011ac9f:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011aca4:	68 aa 01 00 00       	push   $0x1aa
f011aca9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011acae:	e8 fd 54 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011acb3:	e8 aa 1d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011acb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acbb:	e8 c4 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011acc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011acc3:	83 ec 0c             	sub    $0xc,%esp
f011acc6:	68 00 fc 1f 00       	push   $0x1ffc00
f011accb:	e8 28 d3 fe ff       	call   f0107ff8 <kmalloc>
f011acd0:	83 c4 10             	add    $0x10,%esp
f011acd3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011acd9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011acdf:	89 c1                	mov    %eax,%ecx
f011ace1:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ace8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011aced:	0f b6 d0             	movzbl %al,%edx
f011acf0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011acf3:	01 d0                	add    %edx,%eax
f011acf5:	48                   	dec    %eax
f011acf6:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011acf9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011acfc:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad01:	f7 75 bc             	divl   -0x44(%ebp)
f011ad04:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ad07:	29 d0                	sub    %edx,%eax
f011ad09:	89 c3                	mov    %eax,%ebx
f011ad0b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ad12:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ad17:	0f b6 c0             	movzbl %al,%eax
f011ad1a:	c1 e0 04             	shl    $0x4,%eax
f011ad1d:	89 c2                	mov    %eax,%edx
f011ad1f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ad22:	01 d0                	add    %edx,%eax
f011ad24:	48                   	dec    %eax
f011ad25:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ad28:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ad2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad30:	f7 75 b4             	divl   -0x4c(%ebp)
f011ad33:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ad36:	29 d0                	sub    %edx,%eax
f011ad38:	01 d8                	add    %ebx,%eax
f011ad3a:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ad3f:	39 c1                	cmp    %eax,%ecx
f011ad41:	74 17                	je     f011ad5a <test_kmalloc_bestfit1+0x3cc>
f011ad43:	83 ec 04             	sub    $0x4,%esp
f011ad46:	68 ec 9e 13 f0       	push   $0xf0139eec
f011ad4b:	68 b0 01 00 00       	push   $0x1b0
f011ad50:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ad55:	e8 56 54 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad5a:	e8 25 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ad5f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad62:	74 17                	je     f011ad7b <test_kmalloc_bestfit1+0x3ed>
f011ad64:	83 ec 04             	sub    $0x4,%esp
f011ad67:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ad6c:	68 b1 01 00 00       	push   $0x1b1
f011ad71:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ad76:	e8 35 54 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ad7b:	e8 e2 1c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011ad80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad83:	29 c2                	sub    %eax,%edx
f011ad85:	89 d0                	mov    %edx,%eax
f011ad87:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ad8c:	74 17                	je     f011ada5 <test_kmalloc_bestfit1+0x417>
f011ad8e:	83 ec 04             	sub    $0x4,%esp
f011ad91:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011ad96:	68 b2 01 00 00       	push   $0x1b2
f011ad9b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ada0:	e8 0b 54 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ada5:	e8 b8 1c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011adaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011adad:	e8 d2 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011adb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011adb5:	83 ec 0c             	sub    $0xc,%esp
f011adb8:	68 00 fc 0f 00       	push   $0xffc00
f011adbd:	e8 36 d2 fe ff       	call   f0107ff8 <kmalloc>
f011adc2:	83 c4 10             	add    $0x10,%esp
f011adc5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011adcb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011add1:	89 c1                	mov    %eax,%ecx
f011add3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011adda:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011addf:	0f b6 d0             	movzbl %al,%edx
f011ade2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ade5:	01 d0                	add    %edx,%eax
f011ade7:	48                   	dec    %eax
f011ade8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011adeb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011adee:	ba 00 00 00 00       	mov    $0x0,%edx
f011adf3:	f7 75 ac             	divl   -0x54(%ebp)
f011adf6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011adf9:	29 d0                	sub    %edx,%eax
f011adfb:	89 c3                	mov    %eax,%ebx
f011adfd:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ae04:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ae09:	0f b6 c0             	movzbl %al,%eax
f011ae0c:	c1 e0 04             	shl    $0x4,%eax
f011ae0f:	89 c2                	mov    %eax,%edx
f011ae11:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ae14:	01 d0                	add    %edx,%eax
f011ae16:	48                   	dec    %eax
f011ae17:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ae1a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ae1d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae22:	f7 75 a4             	divl   -0x5c(%ebp)
f011ae25:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ae28:	29 d0                	sub    %edx,%eax
f011ae2a:	01 d8                	add    %ebx,%eax
f011ae2c:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011ae31:	39 c1                	cmp    %eax,%ecx
f011ae33:	74 17                	je     f011ae4c <test_kmalloc_bestfit1+0x4be>
f011ae35:	83 ec 04             	sub    $0x4,%esp
f011ae38:	68 ec 9e 13 f0       	push   $0xf0139eec
f011ae3d:	68 b8 01 00 00       	push   $0x1b8
f011ae42:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ae47:	e8 64 53 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae4c:	e8 33 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ae51:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae54:	74 17                	je     f011ae6d <test_kmalloc_bestfit1+0x4df>
f011ae56:	83 ec 04             	sub    $0x4,%esp
f011ae59:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ae5e:	68 b9 01 00 00       	push   $0x1b9
f011ae63:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ae68:	e8 43 53 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ae6d:	e8 f0 1b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011ae72:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae75:	29 c2                	sub    %eax,%edx
f011ae77:	89 d0                	mov    %edx,%eax
f011ae79:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ae7e:	74 17                	je     f011ae97 <test_kmalloc_bestfit1+0x509>
f011ae80:	83 ec 04             	sub    $0x4,%esp
f011ae83:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011ae88:	68 ba 01 00 00       	push   $0x1ba
f011ae8d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ae92:	e8 19 53 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ae97:	e8 c6 1b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011ae9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae9f:	e8 e0 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aea4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011aea7:	83 ec 0c             	sub    $0xc,%esp
f011aeaa:	68 00 fc 0f 00       	push   $0xffc00
f011aeaf:	e8 44 d1 fe ff       	call   f0107ff8 <kmalloc>
f011aeb4:	83 c4 10             	add    $0x10,%esp
f011aeb7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011aebd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011aec3:	89 c1                	mov    %eax,%ecx
f011aec5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011aecc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011aed1:	0f b6 d0             	movzbl %al,%edx
f011aed4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011aed7:	01 d0                	add    %edx,%eax
f011aed9:	48                   	dec    %eax
f011aeda:	89 45 98             	mov    %eax,-0x68(%ebp)
f011aedd:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aee0:	ba 00 00 00 00       	mov    $0x0,%edx
f011aee5:	f7 75 9c             	divl   -0x64(%ebp)
f011aee8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aeeb:	29 d0                	sub    %edx,%eax
f011aeed:	89 c3                	mov    %eax,%ebx
f011aeef:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011aef6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011aefb:	0f b6 c0             	movzbl %al,%eax
f011aefe:	c1 e0 04             	shl    $0x4,%eax
f011af01:	89 c2                	mov    %eax,%edx
f011af03:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011af06:	01 d0                	add    %edx,%eax
f011af08:	48                   	dec    %eax
f011af09:	89 45 90             	mov    %eax,-0x70(%ebp)
f011af0c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011af0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011af14:	f7 75 94             	divl   -0x6c(%ebp)
f011af17:	8b 45 90             	mov    -0x70(%ebp),%eax
f011af1a:	29 d0                	sub    %edx,%eax
f011af1c:	01 d8                	add    %ebx,%eax
f011af1e:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011af23:	39 c1                	cmp    %eax,%ecx
f011af25:	74 17                	je     f011af3e <test_kmalloc_bestfit1+0x5b0>
f011af27:	83 ec 04             	sub    $0x4,%esp
f011af2a:	68 ec 9e 13 f0       	push   $0xf0139eec
f011af2f:	68 c0 01 00 00       	push   $0x1c0
f011af34:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011af39:	e8 72 52 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af3e:	e8 41 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af43:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af46:	74 17                	je     f011af5f <test_kmalloc_bestfit1+0x5d1>
f011af48:	83 ec 04             	sub    $0x4,%esp
f011af4b:	68 ec 9a 13 f0       	push   $0xf0139aec
f011af50:	68 c1 01 00 00       	push   $0x1c1
f011af55:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011af5a:	e8 51 52 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011af5f:	e8 fe 1a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011af64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af67:	29 c2                	sub    %eax,%edx
f011af69:	89 d0                	mov    %edx,%eax
f011af6b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011af70:	74 17                	je     f011af89 <test_kmalloc_bestfit1+0x5fb>
f011af72:	83 ec 04             	sub    $0x4,%esp
f011af75:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011af7a:	68 c2 01 00 00       	push   $0x1c2
f011af7f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011af84:	e8 27 52 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011af89:	e8 d4 1a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011af8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af91:	e8 ee 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af96:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011af99:	83 ec 0c             	sub    $0xc,%esp
f011af9c:	68 00 fc 0f 00       	push   $0xffc00
f011afa1:	e8 52 d0 fe ff       	call   f0107ff8 <kmalloc>
f011afa6:	83 c4 10             	add    $0x10,%esp
f011afa9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011afaf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011afb5:	89 c1                	mov    %eax,%ecx
f011afb7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011afbe:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011afc3:	0f b6 d0             	movzbl %al,%edx
f011afc6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011afc9:	01 d0                	add    %edx,%eax
f011afcb:	48                   	dec    %eax
f011afcc:	89 45 88             	mov    %eax,-0x78(%ebp)
f011afcf:	8b 45 88             	mov    -0x78(%ebp),%eax
f011afd2:	ba 00 00 00 00       	mov    $0x0,%edx
f011afd7:	f7 75 8c             	divl   -0x74(%ebp)
f011afda:	8b 45 88             	mov    -0x78(%ebp),%eax
f011afdd:	29 d0                	sub    %edx,%eax
f011afdf:	89 c3                	mov    %eax,%ebx
f011afe1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011afe8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011afed:	0f b6 c0             	movzbl %al,%eax
f011aff0:	c1 e0 04             	shl    $0x4,%eax
f011aff3:	89 c2                	mov    %eax,%edx
f011aff5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011aff8:	01 d0                	add    %edx,%eax
f011affa:	48                   	dec    %eax
f011affb:	89 45 80             	mov    %eax,-0x80(%ebp)
f011affe:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b001:	ba 00 00 00 00       	mov    $0x0,%edx
f011b006:	f7 75 84             	divl   -0x7c(%ebp)
f011b009:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b00c:	29 d0                	sub    %edx,%eax
f011b00e:	01 d8                	add    %ebx,%eax
f011b010:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011b015:	39 c1                	cmp    %eax,%ecx
f011b017:	74 17                	je     f011b030 <test_kmalloc_bestfit1+0x6a2>
f011b019:	83 ec 04             	sub    $0x4,%esp
f011b01c:	68 ec 9e 13 f0       	push   $0xf0139eec
f011b021:	68 c8 01 00 00       	push   $0x1c8
f011b026:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b02b:	e8 80 51 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b030:	e8 4f 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b035:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b038:	74 17                	je     f011b051 <test_kmalloc_bestfit1+0x6c3>
f011b03a:	83 ec 04             	sub    $0x4,%esp
f011b03d:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b042:	68 c9 01 00 00       	push   $0x1c9
f011b047:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b04c:	e8 5f 51 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b051:	e8 0c 1a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b059:	29 c2                	sub    %eax,%edx
f011b05b:	89 d0                	mov    %edx,%eax
f011b05d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b062:	74 17                	je     f011b07b <test_kmalloc_bestfit1+0x6ed>
f011b064:	83 ec 04             	sub    $0x4,%esp
f011b067:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011b06c:	68 ca 01 00 00       	push   $0x1ca
f011b071:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b076:	e8 35 51 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b07b:	e8 e2 19 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b080:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b083:	e8 fc 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b088:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011b08b:	83 ec 0c             	sub    $0xc,%esp
f011b08e:	68 00 fc 0f 00       	push   $0xffc00
f011b093:	e8 60 cf fe ff       	call   f0107ff8 <kmalloc>
f011b098:	83 c4 10             	add    $0x10,%esp
f011b09b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011b0a1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b0a7:	89 c1                	mov    %eax,%ecx
f011b0a9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b0b0:	10 00 00 
f011b0b3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b0b8:	0f b6 d0             	movzbl %al,%edx
f011b0bb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b0c1:	01 d0                	add    %edx,%eax
f011b0c3:	48                   	dec    %eax
f011b0c4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b0ca:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b0d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0d5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b0db:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b0e1:	29 d0                	sub    %edx,%eax
f011b0e3:	89 c3                	mov    %eax,%ebx
f011b0e5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b0ec:	10 00 00 
f011b0ef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b0f4:	0f b6 c0             	movzbl %al,%eax
f011b0f7:	c1 e0 04             	shl    $0x4,%eax
f011b0fa:	89 c2                	mov    %eax,%edx
f011b0fc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b102:	01 d0                	add    %edx,%eax
f011b104:	48                   	dec    %eax
f011b105:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b10b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b111:	ba 00 00 00 00       	mov    $0x0,%edx
f011b116:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b11c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b122:	29 d0                	sub    %edx,%eax
f011b124:	01 d8                	add    %ebx,%eax
f011b126:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011b12b:	39 c1                	cmp    %eax,%ecx
f011b12d:	74 17                	je     f011b146 <test_kmalloc_bestfit1+0x7b8>
f011b12f:	83 ec 04             	sub    $0x4,%esp
f011b132:	68 ec 9e 13 f0       	push   $0xf0139eec
f011b137:	68 d0 01 00 00       	push   $0x1d0
f011b13c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b141:	e8 6a 50 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b146:	e8 39 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b14b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b14e:	74 17                	je     f011b167 <test_kmalloc_bestfit1+0x7d9>
f011b150:	83 ec 04             	sub    $0x4,%esp
f011b153:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b158:	68 d1 01 00 00       	push   $0x1d1
f011b15d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b162:	e8 49 50 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b167:	e8 f6 18 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b16c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b16f:	29 c2                	sub    %eax,%edx
f011b171:	89 d0                	mov    %edx,%eax
f011b173:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b178:	74 17                	je     f011b191 <test_kmalloc_bestfit1+0x803>
f011b17a:	83 ec 04             	sub    $0x4,%esp
f011b17d:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011b182:	68 d2 01 00 00       	push   $0x1d2
f011b187:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b18c:	e8 1f 50 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b191:	e8 cc 18 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b196:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b199:	e8 e6 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b19e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011b1a1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b1a7:	83 ec 0c             	sub    $0xc,%esp
f011b1aa:	50                   	push   %eax
f011b1ab:	e8 62 ce fe ff       	call   f0108012 <kfree>
f011b1b0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1b3:	e8 cc 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b1b8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b1bb:	74 17                	je     f011b1d4 <test_kmalloc_bestfit1+0x846>
f011b1bd:	83 ec 04             	sub    $0x4,%esp
f011b1c0:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b1c5:	68 db 01 00 00       	push   $0x1db
f011b1ca:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b1cf:	e8 dc 4f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b1d4:	e8 89 18 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b1d9:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b1dc:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b1e1:	74 17                	je     f011b1fa <test_kmalloc_bestfit1+0x86c>
f011b1e3:	83 ec 04             	sub    $0x4,%esp
f011b1e6:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011b1eb:	68 dc 01 00 00       	push   $0x1dc
f011b1f0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b1f5:	e8 b6 4f fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b1fa:	e8 63 18 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b1ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b202:	e8 7d 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b207:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011b20a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b210:	83 ec 0c             	sub    $0xc,%esp
f011b213:	50                   	push   %eax
f011b214:	e8 f9 cd fe ff       	call   f0108012 <kfree>
f011b219:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b21c:	e8 63 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b221:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b224:	74 17                	je     f011b23d <test_kmalloc_bestfit1+0x8af>
f011b226:	83 ec 04             	sub    $0x4,%esp
f011b229:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b22e:	68 e2 01 00 00       	push   $0x1e2
f011b233:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b238:	e8 73 4f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b23d:	e8 20 18 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b242:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b245:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b24a:	74 17                	je     f011b263 <test_kmalloc_bestfit1+0x8d5>
f011b24c:	83 ec 04             	sub    $0x4,%esp
f011b24f:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011b254:	68 e3 01 00 00       	push   $0x1e3
f011b259:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b25e:	e8 4d 4f fe ff       	call   f01001b0 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b263:	e8 fa 17 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b268:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b26b:	e8 14 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b270:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011b273:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b279:	83 ec 0c             	sub    $0xc,%esp
f011b27c:	50                   	push   %eax
f011b27d:	e8 90 cd fe ff       	call   f0108012 <kfree>
f011b282:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b285:	e8 fa 93 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b28a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b28d:	74 17                	je     f011b2a6 <test_kmalloc_bestfit1+0x918>
f011b28f:	83 ec 04             	sub    $0x4,%esp
f011b292:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b297:	68 e9 01 00 00       	push   $0x1e9
f011b29c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b2a1:	e8 0a 4f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b2a6:	e8 b7 17 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b2ab:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b2ae:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b2b3:	74 17                	je     f011b2cc <test_kmalloc_bestfit1+0x93e>
f011b2b5:	83 ec 04             	sub    $0x4,%esp
f011b2b8:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011b2bd:	68 ea 01 00 00       	push   $0x1ea
f011b2c2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b2c7:	e8 e4 4e fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b2cc:	e8 91 17 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b2d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2d4:	e8 ab 93 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b2d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b2dc:	83 ec 0c             	sub    $0xc,%esp
f011b2df:	68 00 00 08 00       	push   $0x80000
f011b2e4:	e8 0f cd fe ff       	call   f0107ff8 <kmalloc>
f011b2e9:	83 c4 10             	add    $0x10,%esp
f011b2ec:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b2f2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b2f8:	89 c1                	mov    %eax,%ecx
f011b2fa:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b301:	10 00 00 
f011b304:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b309:	0f b6 d0             	movzbl %al,%edx
f011b30c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b312:	01 d0                	add    %edx,%eax
f011b314:	48                   	dec    %eax
f011b315:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b31b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b321:	ba 00 00 00 00       	mov    $0x0,%edx
f011b326:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b32c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b332:	29 d0                	sub    %edx,%eax
f011b334:	89 c3                	mov    %eax,%ebx
f011b336:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b33d:	10 00 00 
f011b340:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b345:	0f b6 c0             	movzbl %al,%eax
f011b348:	c1 e0 04             	shl    $0x4,%eax
f011b34b:	89 c2                	mov    %eax,%edx
f011b34d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b353:	01 d0                	add    %edx,%eax
f011b355:	48                   	dec    %eax
f011b356:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b35c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b362:	ba 00 00 00 00       	mov    $0x0,%edx
f011b367:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b36d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b373:	29 d0                	sub    %edx,%eax
f011b375:	01 d8                	add    %ebx,%eax
f011b377:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b37c:	39 c1                	cmp    %eax,%ecx
f011b37e:	74 17                	je     f011b397 <test_kmalloc_bestfit1+0xa09>
f011b380:	83 ec 04             	sub    $0x4,%esp
f011b383:	68 ec 9e 13 f0       	push   $0xf0139eec
f011b388:	68 f3 01 00 00       	push   $0x1f3
f011b38d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b392:	e8 19 4e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b397:	e8 e8 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b39c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b39f:	74 17                	je     f011b3b8 <test_kmalloc_bestfit1+0xa2a>
f011b3a1:	83 ec 04             	sub    $0x4,%esp
f011b3a4:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b3a9:	68 f4 01 00 00       	push   $0x1f4
f011b3ae:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b3b3:	e8 f8 4d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b3b8:	e8 a5 16 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b3bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b3c0:	29 c2                	sub    %eax,%edx
f011b3c2:	89 d0                	mov    %edx,%eax
f011b3c4:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b3c9:	74 17                	je     f011b3e2 <test_kmalloc_bestfit1+0xa54>
f011b3cb:	83 ec 04             	sub    $0x4,%esp
f011b3ce:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011b3d3:	68 f5 01 00 00       	push   $0x1f5
f011b3d8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b3dd:	e8 ce 4d fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b3e2:	e8 7b 16 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b3e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b3ea:	e8 95 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b3ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b3f2:	83 ec 0c             	sub    $0xc,%esp
f011b3f5:	68 00 fc 0f 00       	push   $0xffc00
f011b3fa:	e8 f9 cb fe ff       	call   f0107ff8 <kmalloc>
f011b3ff:	83 c4 10             	add    $0x10,%esp
f011b402:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b408:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b40e:	89 c1                	mov    %eax,%ecx
f011b410:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b417:	10 00 00 
f011b41a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b41f:	0f b6 d0             	movzbl %al,%edx
f011b422:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b428:	01 d0                	add    %edx,%eax
f011b42a:	48                   	dec    %eax
f011b42b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b431:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b437:	ba 00 00 00 00       	mov    $0x0,%edx
f011b43c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b442:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b448:	29 d0                	sub    %edx,%eax
f011b44a:	89 c3                	mov    %eax,%ebx
f011b44c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b453:	10 00 00 
f011b456:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b45b:	0f b6 c0             	movzbl %al,%eax
f011b45e:	c1 e0 04             	shl    $0x4,%eax
f011b461:	89 c2                	mov    %eax,%edx
f011b463:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b469:	01 d0                	add    %edx,%eax
f011b46b:	48                   	dec    %eax
f011b46c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b472:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b478:	ba 00 00 00 00       	mov    $0x0,%edx
f011b47d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b483:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b489:	29 d0                	sub    %edx,%eax
f011b48b:	01 d8                	add    %ebx,%eax
f011b48d:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b492:	39 c1                	cmp    %eax,%ecx
f011b494:	74 17                	je     f011b4ad <test_kmalloc_bestfit1+0xb1f>
f011b496:	83 ec 04             	sub    $0x4,%esp
f011b499:	68 ec 9e 13 f0       	push   $0xf0139eec
f011b49e:	68 fb 01 00 00       	push   $0x1fb
f011b4a3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b4a8:	e8 03 4d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4ad:	e8 d2 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b4b2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4b5:	74 17                	je     f011b4ce <test_kmalloc_bestfit1+0xb40>
f011b4b7:	83 ec 04             	sub    $0x4,%esp
f011b4ba:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b4bf:	68 fc 01 00 00       	push   $0x1fc
f011b4c4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b4c9:	e8 e2 4c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b4ce:	e8 8f 15 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b4d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b4d6:	29 c2                	sub    %eax,%edx
f011b4d8:	89 d0                	mov    %edx,%eax
f011b4da:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b4df:	74 17                	je     f011b4f8 <test_kmalloc_bestfit1+0xb6a>
f011b4e1:	83 ec 04             	sub    $0x4,%esp
f011b4e4:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011b4e9:	68 fd 01 00 00       	push   $0x1fd
f011b4ee:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b4f3:	e8 b8 4c fe ff       	call   f01001b0 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b4f8:	e8 65 15 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b4fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b500:	e8 7f 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b505:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b508:	83 ec 0c             	sub    $0xc,%esp
f011b50b:	68 00 fc 03 00       	push   $0x3fc00
f011b510:	e8 e3 ca fe ff       	call   f0107ff8 <kmalloc>
f011b515:	83 c4 10             	add    $0x10,%esp
f011b518:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b51e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b524:	89 c1                	mov    %eax,%ecx
f011b526:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b52d:	10 00 00 
f011b530:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b535:	0f b6 d0             	movzbl %al,%edx
f011b538:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b53e:	01 d0                	add    %edx,%eax
f011b540:	48                   	dec    %eax
f011b541:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b547:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b54d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b552:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b558:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b55e:	29 d0                	sub    %edx,%eax
f011b560:	89 c3                	mov    %eax,%ebx
f011b562:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b569:	10 00 00 
f011b56c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b571:	0f b6 c0             	movzbl %al,%eax
f011b574:	c1 e0 04             	shl    $0x4,%eax
f011b577:	89 c2                	mov    %eax,%edx
f011b579:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b57f:	01 d0                	add    %edx,%eax
f011b581:	48                   	dec    %eax
f011b582:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b588:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b58e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b593:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b599:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b59f:	29 d0                	sub    %edx,%eax
f011b5a1:	01 d8                	add    %ebx,%eax
f011b5a3:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b5a8:	39 c1                	cmp    %eax,%ecx
f011b5aa:	74 17                	je     f011b5c3 <test_kmalloc_bestfit1+0xc35>
f011b5ac:	83 ec 04             	sub    $0x4,%esp
f011b5af:	68 ec 9e 13 f0       	push   $0xf0139eec
f011b5b4:	68 03 02 00 00       	push   $0x203
f011b5b9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b5be:	e8 ed 4b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5c3:	e8 bc 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b5c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b5cb:	74 17                	je     f011b5e4 <test_kmalloc_bestfit1+0xc56>
f011b5cd:	83 ec 04             	sub    $0x4,%esp
f011b5d0:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b5d5:	68 04 02 00 00       	push   $0x204
f011b5da:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b5df:	e8 cc 4b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b5e4:	e8 79 14 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b5e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b5ec:	29 c2                	sub    %eax,%edx
f011b5ee:	89 d0                	mov    %edx,%eax
f011b5f0:	83 f8 40             	cmp    $0x40,%eax
f011b5f3:	74 17                	je     f011b60c <test_kmalloc_bestfit1+0xc7e>
f011b5f5:	83 ec 04             	sub    $0x4,%esp
f011b5f8:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011b5fd:	68 05 02 00 00       	push   $0x205
f011b602:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b607:	e8 a4 4b fe ff       	call   f01001b0 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b60c:	e8 51 14 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b611:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b614:	e8 6b 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b619:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b61c:	83 ec 0c             	sub    $0xc,%esp
f011b61f:	68 00 fc 3f 00       	push   $0x3ffc00
f011b624:	e8 cf c9 fe ff       	call   f0107ff8 <kmalloc>
f011b629:	83 c4 10             	add    $0x10,%esp
f011b62c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b632:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b638:	89 c1                	mov    %eax,%ecx
f011b63a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b641:	10 00 00 
f011b644:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b649:	0f b6 d0             	movzbl %al,%edx
f011b64c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b652:	01 d0                	add    %edx,%eax
f011b654:	48                   	dec    %eax
f011b655:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b65b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b661:	ba 00 00 00 00       	mov    $0x0,%edx
f011b666:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b66c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b672:	29 d0                	sub    %edx,%eax
f011b674:	89 c3                	mov    %eax,%ebx
f011b676:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b67d:	10 00 00 
f011b680:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b685:	0f b6 c0             	movzbl %al,%eax
f011b688:	c1 e0 04             	shl    $0x4,%eax
f011b68b:	89 c2                	mov    %eax,%edx
f011b68d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b693:	01 d0                	add    %edx,%eax
f011b695:	48                   	dec    %eax
f011b696:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b69c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b6a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6a7:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b6ad:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b6b3:	29 d0                	sub    %edx,%eax
f011b6b5:	01 d8                	add    %ebx,%eax
f011b6b7:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b6bc:	39 c1                	cmp    %eax,%ecx
f011b6be:	74 17                	je     f011b6d7 <test_kmalloc_bestfit1+0xd49>
f011b6c0:	83 ec 04             	sub    $0x4,%esp
f011b6c3:	68 ec 9e 13 f0       	push   $0xf0139eec
f011b6c8:	68 0b 02 00 00       	push   $0x20b
f011b6cd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b6d2:	e8 d9 4a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6d7:	e8 a8 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b6dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b6df:	74 17                	je     f011b6f8 <test_kmalloc_bestfit1+0xd6a>
f011b6e1:	83 ec 04             	sub    $0x4,%esp
f011b6e4:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b6e9:	68 0c 02 00 00       	push   $0x20c
f011b6ee:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b6f3:	e8 b8 4a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b6f8:	e8 65 13 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b6fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b700:	29 c2                	sub    %eax,%edx
f011b702:	89 d0                	mov    %edx,%eax
f011b704:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b709:	74 17                	je     f011b722 <test_kmalloc_bestfit1+0xd94>
f011b70b:	83 ec 04             	sub    $0x4,%esp
f011b70e:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011b713:	68 0d 02 00 00       	push   $0x20d
f011b718:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b71d:	e8 8e 4a fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b722:	e8 3b 13 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b727:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b72a:	e8 55 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b72f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b732:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b738:	83 ec 0c             	sub    $0xc,%esp
f011b73b:	50                   	push   %eax
f011b73c:	e8 d1 c8 fe ff       	call   f0108012 <kfree>
f011b741:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b744:	e8 3b 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b749:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b74c:	74 17                	je     f011b765 <test_kmalloc_bestfit1+0xdd7>
f011b74e:	83 ec 04             	sub    $0x4,%esp
f011b751:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b756:	68 16 02 00 00       	push   $0x216
f011b75b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b760:	e8 4b 4a fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b765:	e8 f8 12 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b76a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b76d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b772:	74 17                	je     f011b78b <test_kmalloc_bestfit1+0xdfd>
f011b774:	83 ec 04             	sub    $0x4,%esp
f011b777:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011b77c:	68 17 02 00 00       	push   $0x217
f011b781:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b786:	e8 25 4a fe ff       	call   f01001b0 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b78b:	e8 d2 12 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b790:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b793:	e8 ec 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b798:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b79b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b7a1:	83 ec 0c             	sub    $0xc,%esp
f011b7a4:	50                   	push   %eax
f011b7a5:	e8 68 c8 fe ff       	call   f0108012 <kfree>
f011b7aa:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7ad:	e8 d2 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b7b2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b7b5:	74 17                	je     f011b7ce <test_kmalloc_bestfit1+0xe40>
f011b7b7:	83 ec 04             	sub    $0x4,%esp
f011b7ba:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b7bf:	68 1d 02 00 00       	push   $0x21d
f011b7c4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b7c9:	e8 e2 49 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b7ce:	e8 8f 12 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b7d3:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b7d6:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b7db:	74 17                	je     f011b7f4 <test_kmalloc_bestfit1+0xe66>
f011b7dd:	83 ec 04             	sub    $0x4,%esp
f011b7e0:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011b7e5:	68 1e 02 00 00       	push   $0x21e
f011b7ea:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b7ef:	e8 bc 49 fe ff       	call   f01001b0 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b7f4:	e8 69 12 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b7f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b7fc:	e8 83 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b801:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b804:	83 ec 0c             	sub    $0xc,%esp
f011b807:	68 00 fc 1f 00       	push   $0x1ffc00
f011b80c:	e8 e7 c7 fe ff       	call   f0107ff8 <kmalloc>
f011b811:	83 c4 10             	add    $0x10,%esp
f011b814:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b81a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b820:	89 c1                	mov    %eax,%ecx
f011b822:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b829:	10 00 00 
f011b82c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b831:	0f b6 d0             	movzbl %al,%edx
f011b834:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b83a:	01 d0                	add    %edx,%eax
f011b83c:	48                   	dec    %eax
f011b83d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b843:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b849:	ba 00 00 00 00       	mov    $0x0,%edx
f011b84e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b854:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b85a:	29 d0                	sub    %edx,%eax
f011b85c:	89 c3                	mov    %eax,%ebx
f011b85e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b865:	10 00 00 
f011b868:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b86d:	0f b6 c0             	movzbl %al,%eax
f011b870:	c1 e0 04             	shl    $0x4,%eax
f011b873:	89 c2                	mov    %eax,%edx
f011b875:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b87b:	01 d0                	add    %edx,%eax
f011b87d:	48                   	dec    %eax
f011b87e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b884:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b88a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b88f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b895:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b89b:	29 d0                	sub    %edx,%eax
f011b89d:	01 d8                	add    %ebx,%eax
f011b89f:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b8a4:	39 c1                	cmp    %eax,%ecx
f011b8a6:	74 17                	je     f011b8bf <test_kmalloc_bestfit1+0xf31>
f011b8a8:	83 ec 04             	sub    $0x4,%esp
f011b8ab:	68 ec 9e 13 f0       	push   $0xf0139eec
f011b8b0:	68 27 02 00 00       	push   $0x227
f011b8b5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b8ba:	e8 f1 48 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8bf:	e8 c0 8d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b8c4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b8c7:	74 17                	je     f011b8e0 <test_kmalloc_bestfit1+0xf52>
f011b8c9:	83 ec 04             	sub    $0x4,%esp
f011b8cc:	68 ec 9a 13 f0       	push   $0xf0139aec
f011b8d1:	68 28 02 00 00       	push   $0x228
f011b8d6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b8db:	e8 d0 48 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b8e0:	e8 7d 11 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011b8e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b8e8:	29 c2                	sub    %eax,%edx
f011b8ea:	89 d0                	mov    %edx,%eax
f011b8ec:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b8f1:	74 17                	je     f011b90a <test_kmalloc_bestfit1+0xf7c>
f011b8f3:	83 ec 04             	sub    $0x4,%esp
f011b8f6:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011b8fb:	68 29 02 00 00       	push   $0x229
f011b900:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011b905:	e8 a6 48 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b90a:	83 ec 0c             	sub    $0xc,%esp
f011b90d:	68 3c 9f 13 f0       	push   $0xf0139f3c
f011b912:	e8 1a 55 fe ff       	call   f0100e31 <cprintf>
f011b917:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b91a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b91f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b922:	5b                   	pop    %ebx
f011b923:	5f                   	pop    %edi
f011b924:	5d                   	pop    %ebp
f011b925:	c3                   	ret    

f011b926 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b926:	55                   	push   %ebp
f011b927:	89 e5                	mov    %esp,%ebp
f011b929:	57                   	push   %edi
f011b92a:	53                   	push   %ebx
f011b92b:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011b931:	83 ec 0c             	sub    $0xc,%esp
f011b934:	68 14 9a 13 f0       	push   $0xf0139a14
f011b939:	e8 f3 54 fe ff       	call   f0100e31 <cprintf>
f011b93e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b941:	83 ec 0c             	sub    $0xc,%esp
f011b944:	68 44 9a 13 f0       	push   $0xf0139a44
f011b949:	e8 e3 54 fe ff       	call   f0100e31 <cprintf>
f011b94e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b951:	83 ec 0c             	sub    $0xc,%esp
f011b954:	68 14 9a 13 f0       	push   $0xf0139a14
f011b959:	e8 d3 54 fe ff       	call   f0100e31 <cprintf>
f011b95e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b961:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011b967:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b96c:	b8 00 00 00 00       	mov    $0x0,%eax
f011b971:	89 d7                	mov    %edx,%edi
f011b973:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b975:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b97c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b981:	0f b6 d0             	movzbl %al,%edx
f011b984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b987:	01 d0                	add    %edx,%eax
f011b989:	48                   	dec    %eax
f011b98a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b98d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b990:	ba 00 00 00 00       	mov    $0x0,%edx
f011b995:	f7 75 f4             	divl   -0xc(%ebp)
f011b998:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b99b:	29 d0                	sub    %edx,%eax
f011b99d:	89 c1                	mov    %eax,%ecx
f011b99f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b9a6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b9ab:	0f b6 c0             	movzbl %al,%eax
f011b9ae:	c1 e0 04             	shl    $0x4,%eax
f011b9b1:	89 c2                	mov    %eax,%edx
f011b9b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b9b6:	01 d0                	add    %edx,%eax
f011b9b8:	48                   	dec    %eax
f011b9b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b9bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b9bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9c4:	f7 75 ec             	divl   -0x14(%ebp)
f011b9c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b9ca:	29 d0                	sub    %edx,%eax
f011b9cc:	01 c8                	add    %ecx,%eax
f011b9ce:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b9d3:	29 c2                	sub    %eax,%edx
f011b9d5:	89 d0                	mov    %edx,%eax
f011b9d7:	83 ec 0c             	sub    $0xc,%esp
f011b9da:	50                   	push   %eax
f011b9db:	e8 18 c6 fe ff       	call   f0107ff8 <kmalloc>
f011b9e0:	83 c4 10             	add    $0x10,%esp
f011b9e3:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b9e9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b9ef:	85 c0                	test   %eax,%eax
f011b9f1:	74 17                	je     f011ba0a <test_kmalloc_bestfit2+0xe4>
f011b9f3:	83 ec 04             	sub    $0x4,%esp
f011b9f6:	68 84 9f 13 f0       	push   $0xf0139f84
f011b9fb:	68 3f 02 00 00       	push   $0x23f
f011ba00:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ba05:	e8 a6 47 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba0a:	e8 53 10 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011ba0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba12:	e8 6d 8c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ba17:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ba1a:	83 ec 0c             	sub    $0xc,%esp
f011ba1d:	68 00 fc 1f 00       	push   $0x1ffc00
f011ba22:	e8 d1 c5 fe ff       	call   f0107ff8 <kmalloc>
f011ba27:	83 c4 10             	add    $0x10,%esp
f011ba2a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ba30:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ba36:	89 c1                	mov    %eax,%ecx
f011ba38:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ba3f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ba44:	0f b6 d0             	movzbl %al,%edx
f011ba47:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ba4a:	01 d0                	add    %edx,%eax
f011ba4c:	48                   	dec    %eax
f011ba4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ba50:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ba53:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba58:	f7 75 dc             	divl   -0x24(%ebp)
f011ba5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ba5e:	29 d0                	sub    %edx,%eax
f011ba60:	89 c3                	mov    %eax,%ebx
f011ba62:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ba69:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ba6e:	0f b6 c0             	movzbl %al,%eax
f011ba71:	c1 e0 04             	shl    $0x4,%eax
f011ba74:	89 c2                	mov    %eax,%edx
f011ba76:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ba79:	01 d0                	add    %edx,%eax
f011ba7b:	48                   	dec    %eax
f011ba7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ba7f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ba82:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba87:	f7 75 d4             	divl   -0x2c(%ebp)
f011ba8a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ba8d:	29 d0                	sub    %edx,%eax
f011ba8f:	01 d8                	add    %ebx,%eax
f011ba91:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ba96:	39 c1                	cmp    %eax,%ecx
f011ba98:	74 17                	je     f011bab1 <test_kmalloc_bestfit2+0x18b>
f011ba9a:	83 ec 04             	sub    $0x4,%esp
f011ba9d:	68 ec 9e 13 f0       	push   $0xf0139eec
f011baa2:	68 49 02 00 00       	push   $0x249
f011baa7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011baac:	e8 ff 46 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bab1:	e8 ce 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bab6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bab9:	74 17                	je     f011bad2 <test_kmalloc_bestfit2+0x1ac>
f011babb:	83 ec 04             	sub    $0x4,%esp
f011babe:	68 ec 9a 13 f0       	push   $0xf0139aec
f011bac3:	68 4a 02 00 00       	push   $0x24a
f011bac8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bacd:	e8 de 46 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bad2:	e8 8b 0f ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bad7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bada:	29 c2                	sub    %eax,%edx
f011badc:	89 d0                	mov    %edx,%eax
f011bade:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bae3:	74 17                	je     f011bafc <test_kmalloc_bestfit2+0x1d6>
f011bae5:	83 ec 04             	sub    $0x4,%esp
f011bae8:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011baed:	68 4b 02 00 00       	push   $0x24b
f011baf2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011baf7:	e8 b4 46 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bafc:	e8 61 0f ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bb01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb04:	e8 7b 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb09:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011bb0c:	83 ec 0c             	sub    $0xc,%esp
f011bb0f:	68 00 fc 1f 00       	push   $0x1ffc00
f011bb14:	e8 df c4 fe ff       	call   f0107ff8 <kmalloc>
f011bb19:	83 c4 10             	add    $0x10,%esp
f011bb1c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011bb22:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bb28:	89 c1                	mov    %eax,%ecx
f011bb2a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011bb31:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bb36:	0f b6 d0             	movzbl %al,%edx
f011bb39:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bb3c:	01 d0                	add    %edx,%eax
f011bb3e:	48                   	dec    %eax
f011bb3f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011bb42:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bb45:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb4a:	f7 75 cc             	divl   -0x34(%ebp)
f011bb4d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bb50:	29 d0                	sub    %edx,%eax
f011bb52:	89 c3                	mov    %eax,%ebx
f011bb54:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bb5b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bb60:	0f b6 c0             	movzbl %al,%eax
f011bb63:	c1 e0 04             	shl    $0x4,%eax
f011bb66:	89 c2                	mov    %eax,%edx
f011bb68:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bb6b:	01 d0                	add    %edx,%eax
f011bb6d:	48                   	dec    %eax
f011bb6e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bb71:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bb74:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb79:	f7 75 c4             	divl   -0x3c(%ebp)
f011bb7c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bb7f:	29 d0                	sub    %edx,%eax
f011bb81:	01 d8                	add    %ebx,%eax
f011bb83:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bb88:	39 c1                	cmp    %eax,%ecx
f011bb8a:	74 17                	je     f011bba3 <test_kmalloc_bestfit2+0x27d>
f011bb8c:	83 ec 04             	sub    $0x4,%esp
f011bb8f:	68 ec 9e 13 f0       	push   $0xf0139eec
f011bb94:	68 51 02 00 00       	push   $0x251
f011bb99:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bb9e:	e8 0d 46 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bba3:	e8 dc 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bba8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bbab:	74 17                	je     f011bbc4 <test_kmalloc_bestfit2+0x29e>
f011bbad:	83 ec 04             	sub    $0x4,%esp
f011bbb0:	68 ec 9a 13 f0       	push   $0xf0139aec
f011bbb5:	68 52 02 00 00       	push   $0x252
f011bbba:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bbbf:	e8 ec 45 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bbc4:	e8 99 0e ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bbc9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bbcc:	29 c2                	sub    %eax,%edx
f011bbce:	89 d0                	mov    %edx,%eax
f011bbd0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bbd5:	74 17                	je     f011bbee <test_kmalloc_bestfit2+0x2c8>
f011bbd7:	83 ec 04             	sub    $0x4,%esp
f011bbda:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011bbdf:	68 53 02 00 00       	push   $0x253
f011bbe4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bbe9:	e8 c2 45 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bbee:	e8 6f 0e ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bbf3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbf6:	e8 89 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bbfb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011bbfe:	83 ec 0c             	sub    $0xc,%esp
f011bc01:	68 00 08 00 00       	push   $0x800
f011bc06:	e8 ed c3 fe ff       	call   f0107ff8 <kmalloc>
f011bc0b:	83 c4 10             	add    $0x10,%esp
f011bc0e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011bc14:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bc1a:	89 c1                	mov    %eax,%ecx
f011bc1c:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bc23:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bc28:	0f b6 d0             	movzbl %al,%edx
f011bc2b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bc2e:	01 d0                	add    %edx,%eax
f011bc30:	48                   	dec    %eax
f011bc31:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bc34:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bc37:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc3c:	f7 75 bc             	divl   -0x44(%ebp)
f011bc3f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bc42:	29 d0                	sub    %edx,%eax
f011bc44:	89 c3                	mov    %eax,%ebx
f011bc46:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bc4d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bc52:	0f b6 c0             	movzbl %al,%eax
f011bc55:	c1 e0 04             	shl    $0x4,%eax
f011bc58:	89 c2                	mov    %eax,%edx
f011bc5a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bc5d:	01 d0                	add    %edx,%eax
f011bc5f:	48                   	dec    %eax
f011bc60:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bc63:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bc66:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc6b:	f7 75 b4             	divl   -0x4c(%ebp)
f011bc6e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bc71:	29 d0                	sub    %edx,%eax
f011bc73:	01 d8                	add    %ebx,%eax
f011bc75:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011bc7a:	39 c1                	cmp    %eax,%ecx
f011bc7c:	74 17                	je     f011bc95 <test_kmalloc_bestfit2+0x36f>
f011bc7e:	83 ec 04             	sub    $0x4,%esp
f011bc81:	68 ec 9e 13 f0       	push   $0xf0139eec
f011bc86:	68 59 02 00 00       	push   $0x259
f011bc8b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bc90:	e8 1b 45 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc95:	e8 ea 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bc9a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bc9d:	74 17                	je     f011bcb6 <test_kmalloc_bestfit2+0x390>
f011bc9f:	83 ec 04             	sub    $0x4,%esp
f011bca2:	68 ec 9a 13 f0       	push   $0xf0139aec
f011bca7:	68 5a 02 00 00       	push   $0x25a
f011bcac:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bcb1:	e8 fa 44 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bcb6:	e8 a7 0d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bcbb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bcbe:	29 c2                	sub    %eax,%edx
f011bcc0:	89 d0                	mov    %edx,%eax
f011bcc2:	83 f8 01             	cmp    $0x1,%eax
f011bcc5:	74 17                	je     f011bcde <test_kmalloc_bestfit2+0x3b8>
f011bcc7:	83 ec 04             	sub    $0x4,%esp
f011bcca:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011bccf:	68 5b 02 00 00       	push   $0x25b
f011bcd4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bcd9:	e8 d2 44 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bcde:	e8 7f 0d ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bce3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bce6:	e8 99 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bceb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011bcee:	83 ec 0c             	sub    $0xc,%esp
f011bcf1:	68 00 08 00 00       	push   $0x800
f011bcf6:	e8 fd c2 fe ff       	call   f0107ff8 <kmalloc>
f011bcfb:	83 c4 10             	add    $0x10,%esp
f011bcfe:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bd04:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011bd0a:	89 c1                	mov    %eax,%ecx
f011bd0c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bd13:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bd18:	0f b6 d0             	movzbl %al,%edx
f011bd1b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bd1e:	01 d0                	add    %edx,%eax
f011bd20:	48                   	dec    %eax
f011bd21:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bd24:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bd27:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd2c:	f7 75 ac             	divl   -0x54(%ebp)
f011bd2f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bd32:	29 d0                	sub    %edx,%eax
f011bd34:	89 c3                	mov    %eax,%ebx
f011bd36:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011bd3d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bd42:	0f b6 c0             	movzbl %al,%eax
f011bd45:	c1 e0 04             	shl    $0x4,%eax
f011bd48:	89 c2                	mov    %eax,%edx
f011bd4a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bd4d:	01 d0                	add    %edx,%eax
f011bd4f:	48                   	dec    %eax
f011bd50:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011bd53:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bd56:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd5b:	f7 75 a4             	divl   -0x5c(%ebp)
f011bd5e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bd61:	29 d0                	sub    %edx,%eax
f011bd63:	01 d8                	add    %ebx,%eax
f011bd65:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bd6a:	39 c1                	cmp    %eax,%ecx
f011bd6c:	74 17                	je     f011bd85 <test_kmalloc_bestfit2+0x45f>
f011bd6e:	83 ec 04             	sub    $0x4,%esp
f011bd71:	68 ec 9e 13 f0       	push   $0xf0139eec
f011bd76:	68 61 02 00 00       	push   $0x261
f011bd7b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bd80:	e8 2b 44 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd85:	e8 fa 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bd8a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bd8d:	74 17                	je     f011bda6 <test_kmalloc_bestfit2+0x480>
f011bd8f:	83 ec 04             	sub    $0x4,%esp
f011bd92:	68 ec 9a 13 f0       	push   $0xf0139aec
f011bd97:	68 62 02 00 00       	push   $0x262
f011bd9c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bda1:	e8 0a 44 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bda6:	e8 b7 0c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bdab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bdae:	29 c2                	sub    %eax,%edx
f011bdb0:	89 d0                	mov    %edx,%eax
f011bdb2:	83 f8 01             	cmp    $0x1,%eax
f011bdb5:	74 17                	je     f011bdce <test_kmalloc_bestfit2+0x4a8>
f011bdb7:	83 ec 04             	sub    $0x4,%esp
f011bdba:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011bdbf:	68 63 02 00 00       	push   $0x263
f011bdc4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bdc9:	e8 e2 43 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bdce:	e8 8f 0c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bdd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdd6:	e8 a9 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bddb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011bdde:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bde4:	83 ec 0c             	sub    $0xc,%esp
f011bde7:	50                   	push   %eax
f011bde8:	e8 25 c2 fe ff       	call   f0108012 <kfree>
f011bded:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bdf0:	e8 8f 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bdf5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bdf8:	74 17                	je     f011be11 <test_kmalloc_bestfit2+0x4eb>
f011bdfa:	83 ec 04             	sub    $0x4,%esp
f011bdfd:	68 ec 9a 13 f0       	push   $0xf0139aec
f011be02:	68 69 02 00 00       	push   $0x269
f011be07:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011be0c:	e8 9f 43 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011be11:	e8 4c 0c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011be16:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011be19:	83 f8 01             	cmp    $0x1,%eax
f011be1c:	74 17                	je     f011be35 <test_kmalloc_bestfit2+0x50f>
f011be1e:	83 ec 04             	sub    $0x4,%esp
f011be21:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011be26:	68 6a 02 00 00       	push   $0x26a
f011be2b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011be30:	e8 7b 43 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011be35:	e8 28 0c ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011be3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be3d:	e8 42 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011be42:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011be45:	83 ec 0c             	sub    $0xc,%esp
f011be48:	68 00 1c 00 00       	push   $0x1c00
f011be4d:	e8 a6 c1 fe ff       	call   f0107ff8 <kmalloc>
f011be52:	83 c4 10             	add    $0x10,%esp
f011be55:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011be5b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011be61:	89 c1                	mov    %eax,%ecx
f011be63:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011be6a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011be6f:	0f b6 d0             	movzbl %al,%edx
f011be72:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011be75:	01 d0                	add    %edx,%eax
f011be77:	48                   	dec    %eax
f011be78:	89 45 98             	mov    %eax,-0x68(%ebp)
f011be7b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011be7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011be83:	f7 75 9c             	divl   -0x64(%ebp)
f011be86:	8b 45 98             	mov    -0x68(%ebp),%eax
f011be89:	29 d0                	sub    %edx,%eax
f011be8b:	89 c3                	mov    %eax,%ebx
f011be8d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011be94:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011be99:	0f b6 c0             	movzbl %al,%eax
f011be9c:	c1 e0 04             	shl    $0x4,%eax
f011be9f:	89 c2                	mov    %eax,%edx
f011bea1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bea4:	01 d0                	add    %edx,%eax
f011bea6:	48                   	dec    %eax
f011bea7:	89 45 90             	mov    %eax,-0x70(%ebp)
f011beaa:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bead:	ba 00 00 00 00       	mov    $0x0,%edx
f011beb2:	f7 75 94             	divl   -0x6c(%ebp)
f011beb5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011beb8:	29 d0                	sub    %edx,%eax
f011beba:	01 d8                	add    %ebx,%eax
f011bebc:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011bec1:	39 c1                	cmp    %eax,%ecx
f011bec3:	74 17                	je     f011bedc <test_kmalloc_bestfit2+0x5b6>
f011bec5:	83 ec 04             	sub    $0x4,%esp
f011bec8:	68 ec 9e 13 f0       	push   $0xf0139eec
f011becd:	68 70 02 00 00       	push   $0x270
f011bed2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bed7:	e8 d4 42 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bedc:	e8 a3 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bee1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bee4:	74 17                	je     f011befd <test_kmalloc_bestfit2+0x5d7>
f011bee6:	83 ec 04             	sub    $0x4,%esp
f011bee9:	68 ec 9a 13 f0       	push   $0xf0139aec
f011beee:	68 71 02 00 00       	push   $0x271
f011bef3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bef8:	e8 b3 42 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011befd:	e8 60 0b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bf02:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bf05:	29 c2                	sub    %eax,%edx
f011bf07:	89 d0                	mov    %edx,%eax
f011bf09:	83 f8 02             	cmp    $0x2,%eax
f011bf0c:	74 17                	je     f011bf25 <test_kmalloc_bestfit2+0x5ff>
f011bf0e:	83 ec 04             	sub    $0x4,%esp
f011bf11:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011bf16:	68 72 02 00 00       	push   $0x272
f011bf1b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bf20:	e8 8b 42 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bf25:	e8 38 0b ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bf2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf2d:	e8 52 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bf32:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011bf35:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bf3b:	83 ec 0c             	sub    $0xc,%esp
f011bf3e:	50                   	push   %eax
f011bf3f:	e8 ce c0 fe ff       	call   f0108012 <kfree>
f011bf44:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf47:	e8 38 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bf4c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bf4f:	74 17                	je     f011bf68 <test_kmalloc_bestfit2+0x642>
f011bf51:	83 ec 04             	sub    $0x4,%esp
f011bf54:	68 ec 9a 13 f0       	push   $0xf0139aec
f011bf59:	68 78 02 00 00       	push   $0x278
f011bf5e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bf63:	e8 48 42 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011bf68:	e8 f5 0a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bf6d:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bf70:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bf75:	74 17                	je     f011bf8e <test_kmalloc_bestfit2+0x668>
f011bf77:	83 ec 04             	sub    $0x4,%esp
f011bf7a:	68 a0 9d 13 f0       	push   $0xf0139da0
f011bf7f:	68 79 02 00 00       	push   $0x279
f011bf84:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011bf89:	e8 22 42 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bf8e:	e8 cf 0a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011bf93:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf96:	e8 e9 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bf9b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bf9e:	83 ec 0c             	sub    $0xc,%esp
f011bfa1:	68 00 fc 2f 00       	push   $0x2ffc00
f011bfa6:	e8 4d c0 fe ff       	call   f0107ff8 <kmalloc>
f011bfab:	83 c4 10             	add    $0x10,%esp
f011bfae:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bfb4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bfba:	89 c1                	mov    %eax,%ecx
f011bfbc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bfc3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bfc8:	0f b6 d0             	movzbl %al,%edx
f011bfcb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bfce:	01 d0                	add    %edx,%eax
f011bfd0:	48                   	dec    %eax
f011bfd1:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bfd4:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bfd7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfdc:	f7 75 8c             	divl   -0x74(%ebp)
f011bfdf:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bfe2:	29 d0                	sub    %edx,%eax
f011bfe4:	89 c3                	mov    %eax,%ebx
f011bfe6:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bfed:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bff2:	0f b6 c0             	movzbl %al,%eax
f011bff5:	c1 e0 04             	shl    $0x4,%eax
f011bff8:	89 c2                	mov    %eax,%edx
f011bffa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bffd:	01 d0                	add    %edx,%eax
f011bfff:	48                   	dec    %eax
f011c000:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c003:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c006:	ba 00 00 00 00       	mov    $0x0,%edx
f011c00b:	f7 75 84             	divl   -0x7c(%ebp)
f011c00e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c011:	29 d0                	sub    %edx,%eax
f011c013:	01 d8                	add    %ebx,%eax
f011c015:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c01a:	39 c1                	cmp    %eax,%ecx
f011c01c:	74 17                	je     f011c035 <test_kmalloc_bestfit2+0x70f>
f011c01e:	83 ec 04             	sub    $0x4,%esp
f011c021:	68 ec 9e 13 f0       	push   $0xf0139eec
f011c026:	68 7f 02 00 00       	push   $0x27f
f011c02b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c030:	e8 7b 41 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c035:	e8 4a 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c03a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c03d:	74 17                	je     f011c056 <test_kmalloc_bestfit2+0x730>
f011c03f:	83 ec 04             	sub    $0x4,%esp
f011c042:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c047:	68 80 02 00 00       	push   $0x280
f011c04c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c051:	e8 5a 41 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011c056:	e8 07 0a ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c05b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c05e:	29 c2                	sub    %eax,%edx
f011c060:	89 d0                	mov    %edx,%eax
f011c062:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c067:	74 17                	je     f011c080 <test_kmalloc_bestfit2+0x75a>
f011c069:	83 ec 04             	sub    $0x4,%esp
f011c06c:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011c071:	68 81 02 00 00       	push   $0x281
f011c076:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c07b:	e8 30 41 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c080:	e8 dd 09 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c085:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c088:	e8 f7 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c08d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011c090:	83 ec 0c             	sub    $0xc,%esp
f011c093:	68 00 18 20 00       	push   $0x201800
f011c098:	e8 5b bf fe ff       	call   f0107ff8 <kmalloc>
f011c09d:	83 c4 10             	add    $0x10,%esp
f011c0a0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c0a6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c0ac:	89 c1                	mov    %eax,%ecx
f011c0ae:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c0b5:	10 00 00 
f011c0b8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c0bd:	0f b6 d0             	movzbl %al,%edx
f011c0c0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c0c6:	01 d0                	add    %edx,%eax
f011c0c8:	48                   	dec    %eax
f011c0c9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c0cf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c0d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0da:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c0e0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c0e6:	29 d0                	sub    %edx,%eax
f011c0e8:	89 c3                	mov    %eax,%ebx
f011c0ea:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c0f1:	10 00 00 
f011c0f4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c0f9:	0f b6 c0             	movzbl %al,%eax
f011c0fc:	c1 e0 04             	shl    $0x4,%eax
f011c0ff:	89 c2                	mov    %eax,%edx
f011c101:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c107:	01 d0                	add    %edx,%eax
f011c109:	48                   	dec    %eax
f011c10a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c110:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c116:	ba 00 00 00 00       	mov    $0x0,%edx
f011c11b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c121:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c127:	29 d0                	sub    %edx,%eax
f011c129:	01 d8                	add    %ebx,%eax
f011c12b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c130:	39 c1                	cmp    %eax,%ecx
f011c132:	74 17                	je     f011c14b <test_kmalloc_bestfit2+0x825>
f011c134:	83 ec 04             	sub    $0x4,%esp
f011c137:	68 ec 9e 13 f0       	push   $0xf0139eec
f011c13c:	68 87 02 00 00       	push   $0x287
f011c141:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c146:	e8 65 40 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c14b:	e8 34 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c150:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c153:	74 17                	je     f011c16c <test_kmalloc_bestfit2+0x846>
f011c155:	83 ec 04             	sub    $0x4,%esp
f011c158:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c15d:	68 88 02 00 00       	push   $0x288
f011c162:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c167:	e8 44 40 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c16c:	e8 f1 08 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c171:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c174:	29 c2                	sub    %eax,%edx
f011c176:	89 d0                	mov    %edx,%eax
f011c178:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c17d:	74 17                	je     f011c196 <test_kmalloc_bestfit2+0x870>
f011c17f:	83 ec 04             	sub    $0x4,%esp
f011c182:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011c187:	68 89 02 00 00       	push   $0x289
f011c18c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c191:	e8 1a 40 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c196:	e8 c7 08 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c19b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c19e:	e8 e1 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c1a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c1a6:	83 ec 0c             	sub    $0xc,%esp
f011c1a9:	68 00 fc 4f 00       	push   $0x4ffc00
f011c1ae:	e8 45 be fe ff       	call   f0107ff8 <kmalloc>
f011c1b3:	83 c4 10             	add    $0x10,%esp
f011c1b6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c1bc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c1c2:	89 c1                	mov    %eax,%ecx
f011c1c4:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c1cb:	10 00 00 
f011c1ce:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c1d3:	0f b6 d0             	movzbl %al,%edx
f011c1d6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c1dc:	01 d0                	add    %edx,%eax
f011c1de:	48                   	dec    %eax
f011c1df:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c1e5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c1eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1f0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c1f6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c1fc:	29 d0                	sub    %edx,%eax
f011c1fe:	89 c3                	mov    %eax,%ebx
f011c200:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c207:	10 00 00 
f011c20a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c20f:	0f b6 c0             	movzbl %al,%eax
f011c212:	c1 e0 04             	shl    $0x4,%eax
f011c215:	89 c2                	mov    %eax,%edx
f011c217:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c21d:	01 d0                	add    %edx,%eax
f011c21f:	48                   	dec    %eax
f011c220:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c226:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c22c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c231:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c237:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c23d:	29 d0                	sub    %edx,%eax
f011c23f:	01 d8                	add    %ebx,%eax
f011c241:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c246:	39 c1                	cmp    %eax,%ecx
f011c248:	74 17                	je     f011c261 <test_kmalloc_bestfit2+0x93b>
f011c24a:	83 ec 04             	sub    $0x4,%esp
f011c24d:	68 ec 9e 13 f0       	push   $0xf0139eec
f011c252:	68 8f 02 00 00       	push   $0x28f
f011c257:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c25c:	e8 4f 3f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c261:	e8 1e 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c266:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c269:	74 17                	je     f011c282 <test_kmalloc_bestfit2+0x95c>
f011c26b:	83 ec 04             	sub    $0x4,%esp
f011c26e:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c273:	68 90 02 00 00       	push   $0x290
f011c278:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c27d:	e8 2e 3f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c282:	e8 db 07 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c287:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c28a:	29 c2                	sub    %eax,%edx
f011c28c:	89 d0                	mov    %edx,%eax
f011c28e:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c293:	74 17                	je     f011c2ac <test_kmalloc_bestfit2+0x986>
f011c295:	83 ec 04             	sub    $0x4,%esp
f011c298:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011c29d:	68 91 02 00 00       	push   $0x291
f011c2a2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c2a7:	e8 04 3f fe ff       	call   f01001b0 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c2ac:	e8 b1 07 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c2b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c2b4:	e8 cb 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c2b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011c2bc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c2c2:	83 ec 0c             	sub    $0xc,%esp
f011c2c5:	50                   	push   %eax
f011c2c6:	e8 47 bd fe ff       	call   f0108012 <kfree>
f011c2cb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2ce:	e8 b1 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c2d3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c2d6:	74 17                	je     f011c2ef <test_kmalloc_bestfit2+0x9c9>
f011c2d8:	83 ec 04             	sub    $0x4,%esp
f011c2db:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c2e0:	68 97 02 00 00       	push   $0x297
f011c2e5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c2ea:	e8 c1 3e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c2ef:	e8 6e 07 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c2f4:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c2f7:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c2fc:	74 17                	je     f011c315 <test_kmalloc_bestfit2+0x9ef>
f011c2fe:	83 ec 04             	sub    $0x4,%esp
f011c301:	68 a0 9d 13 f0       	push   $0xf0139da0
f011c306:	68 98 02 00 00       	push   $0x298
f011c30b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c310:	e8 9b 3e fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c315:	e8 48 07 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c31a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c31d:	e8 62 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c322:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011c325:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c32b:	83 ec 0c             	sub    $0xc,%esp
f011c32e:	50                   	push   %eax
f011c32f:	e8 de bc fe ff       	call   f0108012 <kfree>
f011c334:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c337:	e8 48 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c33c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c33f:	74 17                	je     f011c358 <test_kmalloc_bestfit2+0xa32>
f011c341:	83 ec 04             	sub    $0x4,%esp
f011c344:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c349:	68 9e 02 00 00       	push   $0x29e
f011c34e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c353:	e8 58 3e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c358:	e8 05 07 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c35d:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c360:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c365:	74 17                	je     f011c37e <test_kmalloc_bestfit2+0xa58>
f011c367:	83 ec 04             	sub    $0x4,%esp
f011c36a:	68 cc 9f 13 f0       	push   $0xf0139fcc
f011c36f:	68 9f 02 00 00       	push   $0x29f
f011c374:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c379:	e8 32 3e fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c37e:	e8 df 06 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c383:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c386:	e8 f9 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c38b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c38e:	83 ec 0c             	sub    $0xc,%esp
f011c391:	68 00 fc 1f 00       	push   $0x1ffc00
f011c396:	e8 5d bc fe ff       	call   f0107ff8 <kmalloc>
f011c39b:	83 c4 10             	add    $0x10,%esp
f011c39e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c3a4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c3aa:	89 c1                	mov    %eax,%ecx
f011c3ac:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c3b3:	10 00 00 
f011c3b6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c3bb:	0f b6 d0             	movzbl %al,%edx
f011c3be:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c3c4:	01 d0                	add    %edx,%eax
f011c3c6:	48                   	dec    %eax
f011c3c7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c3cd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c3d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3d8:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c3de:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c3e4:	29 d0                	sub    %edx,%eax
f011c3e6:	89 c3                	mov    %eax,%ebx
f011c3e8:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c3ef:	10 00 00 
f011c3f2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c3f7:	0f b6 c0             	movzbl %al,%eax
f011c3fa:	c1 e0 04             	shl    $0x4,%eax
f011c3fd:	89 c2                	mov    %eax,%edx
f011c3ff:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c405:	01 d0                	add    %edx,%eax
f011c407:	48                   	dec    %eax
f011c408:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c40e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c414:	ba 00 00 00 00       	mov    $0x0,%edx
f011c419:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c41f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c425:	29 d0                	sub    %edx,%eax
f011c427:	01 d8                	add    %ebx,%eax
f011c429:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c42e:	39 c1                	cmp    %eax,%ecx
f011c430:	74 17                	je     f011c449 <test_kmalloc_bestfit2+0xb23>
f011c432:	83 ec 04             	sub    $0x4,%esp
f011c435:	68 ec 9e 13 f0       	push   $0xf0139eec
f011c43a:	68 a5 02 00 00       	push   $0x2a5
f011c43f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c444:	e8 67 3d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c449:	e8 36 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c44e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c451:	74 17                	je     f011c46a <test_kmalloc_bestfit2+0xb44>
f011c453:	83 ec 04             	sub    $0x4,%esp
f011c456:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c45b:	68 a6 02 00 00       	push   $0x2a6
f011c460:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c465:	e8 46 3d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c46a:	e8 f3 05 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c46f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c472:	29 c2                	sub    %eax,%edx
f011c474:	89 d0                	mov    %edx,%eax
f011c476:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c47b:	74 17                	je     f011c494 <test_kmalloc_bestfit2+0xb6e>
f011c47d:	83 ec 04             	sub    $0x4,%esp
f011c480:	68 0a a0 13 f0       	push   $0xf013a00a
f011c485:	68 a7 02 00 00       	push   $0x2a7
f011c48a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c48f:	e8 1c 3d fe ff       	call   f01001b0 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c494:	e8 c9 05 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c499:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c49c:	e8 e3 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c4a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c4a4:	83 ec 0c             	sub    $0xc,%esp
f011c4a7:	68 00 18 00 00       	push   $0x1800
f011c4ac:	e8 47 bb fe ff       	call   f0107ff8 <kmalloc>
f011c4b1:	83 c4 10             	add    $0x10,%esp
f011c4b4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c4ba:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c4c0:	89 c1                	mov    %eax,%ecx
f011c4c2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c4c9:	10 00 00 
f011c4cc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c4d1:	0f b6 d0             	movzbl %al,%edx
f011c4d4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c4da:	01 d0                	add    %edx,%eax
f011c4dc:	48                   	dec    %eax
f011c4dd:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c4e3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c4e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4ee:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c4f4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c4fa:	29 d0                	sub    %edx,%eax
f011c4fc:	89 c3                	mov    %eax,%ebx
f011c4fe:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c505:	10 00 00 
f011c508:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c50d:	0f b6 c0             	movzbl %al,%eax
f011c510:	c1 e0 04             	shl    $0x4,%eax
f011c513:	89 c2                	mov    %eax,%edx
f011c515:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c51b:	01 d0                	add    %edx,%eax
f011c51d:	48                   	dec    %eax
f011c51e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c524:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c52a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c52f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c535:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c53b:	29 d0                	sub    %edx,%eax
f011c53d:	01 d8                	add    %ebx,%eax
f011c53f:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c544:	39 c1                	cmp    %eax,%ecx
f011c546:	74 17                	je     f011c55f <test_kmalloc_bestfit2+0xc39>
f011c548:	83 ec 04             	sub    $0x4,%esp
f011c54b:	68 ec 9e 13 f0       	push   $0xf0139eec
f011c550:	68 ad 02 00 00       	push   $0x2ad
f011c555:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c55a:	e8 51 3c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c55f:	e8 20 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c564:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c567:	74 17                	je     f011c580 <test_kmalloc_bestfit2+0xc5a>
f011c569:	83 ec 04             	sub    $0x4,%esp
f011c56c:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c571:	68 ae 02 00 00       	push   $0x2ae
f011c576:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c57b:	e8 30 3c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c580:	e8 dd 04 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c585:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c588:	29 c2                	sub    %eax,%edx
f011c58a:	89 d0                	mov    %edx,%eax
f011c58c:	83 f8 02             	cmp    $0x2,%eax
f011c58f:	74 17                	je     f011c5a8 <test_kmalloc_bestfit2+0xc82>
f011c591:	83 ec 04             	sub    $0x4,%esp
f011c594:	68 0a a0 13 f0       	push   $0xf013a00a
f011c599:	68 af 02 00 00       	push   $0x2af
f011c59e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c5a3:	e8 08 3c fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c5a8:	e8 b5 04 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c5ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c5b0:	e8 cf 80 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c5b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011c5b8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c5be:	83 ec 0c             	sub    $0xc,%esp
f011c5c1:	50                   	push   %eax
f011c5c2:	e8 4b ba fe ff       	call   f0108012 <kfree>
f011c5c7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5ca:	e8 b5 80 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c5cf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c5d2:	74 17                	je     f011c5eb <test_kmalloc_bestfit2+0xcc5>
f011c5d4:	83 ec 04             	sub    $0x4,%esp
f011c5d7:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c5dc:	68 b5 02 00 00       	push   $0x2b5
f011c5e1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c5e6:	e8 c5 3b fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c5eb:	e8 72 04 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c5f0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c5f3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c5f8:	74 17                	je     f011c611 <test_kmalloc_bestfit2+0xceb>
f011c5fa:	83 ec 04             	sub    $0x4,%esp
f011c5fd:	68 cc 9f 13 f0       	push   $0xf0139fcc
f011c602:	68 b6 02 00 00       	push   $0x2b6
f011c607:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c60c:	e8 9f 3b fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c611:	e8 4c 04 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c616:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c619:	e8 66 80 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c61e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c621:	83 ec 0c             	sub    $0xc,%esp
f011c624:	68 00 fc 2f 00       	push   $0x2ffc00
f011c629:	e8 ca b9 fe ff       	call   f0107ff8 <kmalloc>
f011c62e:	83 c4 10             	add    $0x10,%esp
f011c631:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c637:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c63d:	89 c1                	mov    %eax,%ecx
f011c63f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c646:	10 00 00 
f011c649:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c64e:	0f b6 d0             	movzbl %al,%edx
f011c651:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c657:	01 d0                	add    %edx,%eax
f011c659:	48                   	dec    %eax
f011c65a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c660:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c666:	ba 00 00 00 00       	mov    $0x0,%edx
f011c66b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c671:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c677:	29 d0                	sub    %edx,%eax
f011c679:	89 c3                	mov    %eax,%ebx
f011c67b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c682:	10 00 00 
f011c685:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c68a:	0f b6 c0             	movzbl %al,%eax
f011c68d:	c1 e0 04             	shl    $0x4,%eax
f011c690:	89 c2                	mov    %eax,%edx
f011c692:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c698:	01 d0                	add    %edx,%eax
f011c69a:	48                   	dec    %eax
f011c69b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c6a1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c6a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6ac:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c6b2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c6b8:	29 d0                	sub    %edx,%eax
f011c6ba:	01 d8                	add    %ebx,%eax
f011c6bc:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c6c1:	39 c1                	cmp    %eax,%ecx
f011c6c3:	74 17                	je     f011c6dc <test_kmalloc_bestfit2+0xdb6>
f011c6c5:	83 ec 04             	sub    $0x4,%esp
f011c6c8:	68 ec 9e 13 f0       	push   $0xf0139eec
f011c6cd:	68 bc 02 00 00       	push   $0x2bc
f011c6d2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c6d7:	e8 d4 3a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6dc:	e8 a3 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c6e1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c6e4:	74 17                	je     f011c6fd <test_kmalloc_bestfit2+0xdd7>
f011c6e6:	83 ec 04             	sub    $0x4,%esp
f011c6e9:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c6ee:	68 bd 02 00 00       	push   $0x2bd
f011c6f3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c6f8:	e8 b3 3a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c6fd:	e8 60 03 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c702:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c705:	29 c2                	sub    %eax,%edx
f011c707:	89 d0                	mov    %edx,%eax
f011c709:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c70e:	74 17                	je     f011c727 <test_kmalloc_bestfit2+0xe01>
f011c710:	83 ec 04             	sub    $0x4,%esp
f011c713:	68 cc 9f 13 f0       	push   $0xf0139fcc
f011c718:	68 be 02 00 00       	push   $0x2be
f011c71d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c722:	e8 89 3a fe ff       	call   f01001b0 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c727:	e8 36 03 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c72c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c72f:	e8 50 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c734:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c737:	83 ec 0c             	sub    $0xc,%esp
f011c73a:	68 00 fc 3f 00       	push   $0x3ffc00
f011c73f:	e8 b4 b8 fe ff       	call   f0107ff8 <kmalloc>
f011c744:	83 c4 10             	add    $0x10,%esp
f011c747:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c74d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c753:	89 c1                	mov    %eax,%ecx
f011c755:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c75c:	10 00 00 
f011c75f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c764:	0f b6 d0             	movzbl %al,%edx
f011c767:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c76d:	01 d0                	add    %edx,%eax
f011c76f:	48                   	dec    %eax
f011c770:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c776:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c77c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c781:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c787:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c78d:	29 d0                	sub    %edx,%eax
f011c78f:	89 c3                	mov    %eax,%ebx
f011c791:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c798:	10 00 00 
f011c79b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c7a0:	0f b6 c0             	movzbl %al,%eax
f011c7a3:	c1 e0 04             	shl    $0x4,%eax
f011c7a6:	89 c2                	mov    %eax,%edx
f011c7a8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c7ae:	01 d0                	add    %edx,%eax
f011c7b0:	48                   	dec    %eax
f011c7b1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c7b7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c7bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7c2:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c7c8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c7ce:	29 d0                	sub    %edx,%eax
f011c7d0:	01 d8                	add    %ebx,%eax
f011c7d2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c7d7:	39 c1                	cmp    %eax,%ecx
f011c7d9:	74 17                	je     f011c7f2 <test_kmalloc_bestfit2+0xecc>
f011c7db:	83 ec 04             	sub    $0x4,%esp
f011c7de:	68 ec 9e 13 f0       	push   $0xf0139eec
f011c7e3:	68 c4 02 00 00       	push   $0x2c4
f011c7e8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c7ed:	e8 be 39 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7f2:	e8 8d 7e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c7f7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c7fa:	74 17                	je     f011c813 <test_kmalloc_bestfit2+0xeed>
f011c7fc:	83 ec 04             	sub    $0x4,%esp
f011c7ff:	68 ec 9a 13 f0       	push   $0xf0139aec
f011c804:	68 c5 02 00 00       	push   $0x2c5
f011c809:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c80e:	e8 9d 39 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c813:	e8 4a 02 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c818:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c81b:	29 c2                	sub    %eax,%edx
f011c81d:	89 d0                	mov    %edx,%eax
f011c81f:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c824:	74 17                	je     f011c83d <test_kmalloc_bestfit2+0xf17>
f011c826:	83 ec 04             	sub    $0x4,%esp
f011c829:	68 cc 9f 13 f0       	push   $0xf0139fcc
f011c82e:	68 c6 02 00 00       	push   $0x2c6
f011c833:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c838:	e8 73 39 fe ff       	call   f01001b0 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c83d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c844:	10 00 00 
f011c847:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c84c:	0f b6 d0             	movzbl %al,%edx
f011c84f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c855:	01 d0                	add    %edx,%eax
f011c857:	48                   	dec    %eax
f011c858:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c85e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c864:	ba 00 00 00 00       	mov    $0x0,%edx
f011c869:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c86f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c875:	29 d0                	sub    %edx,%eax
f011c877:	89 c1                	mov    %eax,%ecx
f011c879:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c880:	10 00 00 
f011c883:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c888:	0f b6 c0             	movzbl %al,%eax
f011c88b:	c1 e0 04             	shl    $0x4,%eax
f011c88e:	89 c2                	mov    %eax,%edx
f011c890:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c896:	01 d0                	add    %edx,%eax
f011c898:	48                   	dec    %eax
f011c899:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c89f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c8a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8aa:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c8b0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c8b6:	29 d0                	sub    %edx,%eax
f011c8b8:	01 c8                	add    %ecx,%eax
f011c8ba:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c8bf:	29 c2                	sub    %eax,%edx
f011c8c1:	89 d0                	mov    %edx,%eax
f011c8c3:	83 ec 0c             	sub    $0xc,%esp
f011c8c6:	50                   	push   %eax
f011c8c7:	e8 2c b7 fe ff       	call   f0107ff8 <kmalloc>
f011c8cc:	83 c4 10             	add    $0x10,%esp
f011c8cf:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c8d5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c8db:	85 c0                	test   %eax,%eax
f011c8dd:	74 17                	je     f011c8f6 <test_kmalloc_bestfit2+0xfd0>
f011c8df:	83 ec 04             	sub    $0x4,%esp
f011c8e2:	68 1c a0 13 f0       	push   $0xf013a01c
f011c8e7:	68 ce 02 00 00       	push   $0x2ce
f011c8ec:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011c8f1:	e8 ba 38 fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c8f6:	83 ec 0c             	sub    $0xc,%esp
f011c8f9:	68 80 a0 13 f0       	push   $0xf013a080
f011c8fe:	e8 2e 45 fe ff       	call   f0100e31 <cprintf>
f011c903:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c906:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c90b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c90e:	5b                   	pop    %ebx
f011c90f:	5f                   	pop    %edi
f011c910:	5d                   	pop    %ebp
f011c911:	c3                   	ret    

f011c912 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c912:	55                   	push   %ebp
f011c913:	89 e5                	mov    %esp,%ebp
f011c915:	57                   	push   %edi
f011c916:	53                   	push   %ebx
f011c917:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011c91d:	83 ec 0c             	sub    $0xc,%esp
f011c920:	68 14 9a 13 f0       	push   $0xf0139a14
f011c925:	e8 07 45 fe ff       	call   f0100e31 <cprintf>
f011c92a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c92d:	83 ec 0c             	sub    $0xc,%esp
f011c930:	68 44 9a 13 f0       	push   $0xf0139a44
f011c935:	e8 f7 44 fe ff       	call   f0100e31 <cprintf>
f011c93a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c93d:	83 ec 0c             	sub    $0xc,%esp
f011c940:	68 14 9a 13 f0       	push   $0xf0139a14
f011c945:	e8 e7 44 fe ff       	call   f0100e31 <cprintf>
f011c94a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c94d:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011c953:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c958:	b8 00 00 00 00       	mov    $0x0,%eax
f011c95d:	89 d7                	mov    %edx,%edi
f011c95f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c961:	e8 fc 00 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011c966:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c969:	e8 16 7d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c96e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c971:	83 ec 0c             	sub    $0xc,%esp
f011c974:	68 00 fc 0f 00       	push   $0xffc00
f011c979:	e8 7a b6 fe ff       	call   f0107ff8 <kmalloc>
f011c97e:	83 c4 10             	add    $0x10,%esp
f011c981:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c987:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c98d:	89 c1                	mov    %eax,%ecx
f011c98f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c996:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c99b:	0f b6 d0             	movzbl %al,%edx
f011c99e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c9a1:	01 d0                	add    %edx,%eax
f011c9a3:	48                   	dec    %eax
f011c9a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c9a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c9aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9af:	f7 75 ec             	divl   -0x14(%ebp)
f011c9b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c9b5:	29 d0                	sub    %edx,%eax
f011c9b7:	89 c3                	mov    %eax,%ebx
f011c9b9:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c9c0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c9c5:	0f b6 c0             	movzbl %al,%eax
f011c9c8:	c1 e0 04             	shl    $0x4,%eax
f011c9cb:	89 c2                	mov    %eax,%edx
f011c9cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c9d0:	01 d0                	add    %edx,%eax
f011c9d2:	48                   	dec    %eax
f011c9d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c9d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c9d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9de:	f7 75 e4             	divl   -0x1c(%ebp)
f011c9e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c9e4:	29 d0                	sub    %edx,%eax
f011c9e6:	01 d8                	add    %ebx,%eax
f011c9e8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c9ed:	39 c1                	cmp    %eax,%ecx
f011c9ef:	74 17                	je     f011ca08 <test_kmalloc_firstfit1+0xf6>
f011c9f1:	83 ec 04             	sub    $0x4,%esp
f011c9f4:	68 ec 9e 13 f0       	push   $0xf0139eec
f011c9f9:	68 e6 02 00 00       	push   $0x2e6
f011c9fe:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ca03:	e8 a8 37 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca08:	e8 77 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ca0d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca10:	74 17                	je     f011ca29 <test_kmalloc_firstfit1+0x117>
f011ca12:	83 ec 04             	sub    $0x4,%esp
f011ca15:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ca1a:	68 e7 02 00 00       	push   $0x2e7
f011ca1f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ca24:	e8 87 37 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca29:	e8 34 00 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011ca2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca31:	29 c2                	sub    %eax,%edx
f011ca33:	89 d0                	mov    %edx,%eax
f011ca35:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca3a:	74 17                	je     f011ca53 <test_kmalloc_firstfit1+0x141>
f011ca3c:	83 ec 04             	sub    $0x4,%esp
f011ca3f:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011ca44:	68 e8 02 00 00       	push   $0x2e8
f011ca49:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ca4e:	e8 5d 37 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca53:	e8 0a 00 ff ff       	call   f010ca62 <sys_calculate_free_frames>
f011ca58:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca5b:	e8 24 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ca60:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011ca63:	83 ec 0c             	sub    $0xc,%esp
f011ca66:	68 00 fc 0f 00       	push   $0xffc00
f011ca6b:	e8 88 b5 fe ff       	call   f0107ff8 <kmalloc>
f011ca70:	83 c4 10             	add    $0x10,%esp
f011ca73:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011ca79:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ca7f:	89 c1                	mov    %eax,%ecx
f011ca81:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ca88:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ca8d:	0f b6 d0             	movzbl %al,%edx
f011ca90:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ca93:	01 d0                	add    %edx,%eax
f011ca95:	48                   	dec    %eax
f011ca96:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ca99:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ca9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011caa1:	f7 75 dc             	divl   -0x24(%ebp)
f011caa4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011caa7:	29 d0                	sub    %edx,%eax
f011caa9:	89 c3                	mov    %eax,%ebx
f011caab:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cab2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cab7:	0f b6 c0             	movzbl %al,%eax
f011caba:	c1 e0 04             	shl    $0x4,%eax
f011cabd:	89 c2                	mov    %eax,%edx
f011cabf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cac2:	01 d0                	add    %edx,%eax
f011cac4:	48                   	dec    %eax
f011cac5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cac8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cacb:	ba 00 00 00 00       	mov    $0x0,%edx
f011cad0:	f7 75 d4             	divl   -0x2c(%ebp)
f011cad3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cad6:	29 d0                	sub    %edx,%eax
f011cad8:	01 d8                	add    %ebx,%eax
f011cada:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cadf:	39 c1                	cmp    %eax,%ecx
f011cae1:	74 17                	je     f011cafa <test_kmalloc_firstfit1+0x1e8>
f011cae3:	83 ec 04             	sub    $0x4,%esp
f011cae6:	68 ec 9e 13 f0       	push   $0xf0139eec
f011caeb:	68 ee 02 00 00       	push   $0x2ee
f011caf0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011caf5:	e8 b6 36 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cafa:	e8 85 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011caff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb02:	74 17                	je     f011cb1b <test_kmalloc_firstfit1+0x209>
f011cb04:	83 ec 04             	sub    $0x4,%esp
f011cb07:	68 ec 9a 13 f0       	push   $0xf0139aec
f011cb0c:	68 ef 02 00 00       	push   $0x2ef
f011cb11:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cb16:	e8 95 36 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cb1b:	e8 42 ff fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cb20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb23:	29 c2                	sub    %eax,%edx
f011cb25:	89 d0                	mov    %edx,%eax
f011cb27:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb2c:	74 17                	je     f011cb45 <test_kmalloc_firstfit1+0x233>
f011cb2e:	83 ec 04             	sub    $0x4,%esp
f011cb31:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011cb36:	68 f0 02 00 00       	push   $0x2f0
f011cb3b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cb40:	e8 6b 36 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb45:	e8 18 ff fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cb4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb4d:	e8 32 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cb52:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011cb55:	83 ec 0c             	sub    $0xc,%esp
f011cb58:	68 00 fc 0f 00       	push   $0xffc00
f011cb5d:	e8 96 b4 fe ff       	call   f0107ff8 <kmalloc>
f011cb62:	83 c4 10             	add    $0x10,%esp
f011cb65:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cb6b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cb71:	89 c1                	mov    %eax,%ecx
f011cb73:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cb7a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cb7f:	0f b6 d0             	movzbl %al,%edx
f011cb82:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cb85:	01 d0                	add    %edx,%eax
f011cb87:	48                   	dec    %eax
f011cb88:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cb8b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cb8e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb93:	f7 75 cc             	divl   -0x34(%ebp)
f011cb96:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cb99:	29 d0                	sub    %edx,%eax
f011cb9b:	89 c3                	mov    %eax,%ebx
f011cb9d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cba4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cba9:	0f b6 c0             	movzbl %al,%eax
f011cbac:	c1 e0 04             	shl    $0x4,%eax
f011cbaf:	89 c2                	mov    %eax,%edx
f011cbb1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cbb4:	01 d0                	add    %edx,%eax
f011cbb6:	48                   	dec    %eax
f011cbb7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cbba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cbbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbc2:	f7 75 c4             	divl   -0x3c(%ebp)
f011cbc5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cbc8:	29 d0                	sub    %edx,%eax
f011cbca:	01 d8                	add    %ebx,%eax
f011cbcc:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cbd1:	39 c1                	cmp    %eax,%ecx
f011cbd3:	74 17                	je     f011cbec <test_kmalloc_firstfit1+0x2da>
f011cbd5:	83 ec 04             	sub    $0x4,%esp
f011cbd8:	68 ec 9e 13 f0       	push   $0xf0139eec
f011cbdd:	68 f6 02 00 00       	push   $0x2f6
f011cbe2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cbe7:	e8 c4 35 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbec:	e8 93 7a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cbf1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cbf4:	74 17                	je     f011cc0d <test_kmalloc_firstfit1+0x2fb>
f011cbf6:	83 ec 04             	sub    $0x4,%esp
f011cbf9:	68 ec 9a 13 f0       	push   $0xf0139aec
f011cbfe:	68 f7 02 00 00       	push   $0x2f7
f011cc03:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cc08:	e8 a3 35 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cc0d:	e8 50 fe fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cc12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc15:	29 c2                	sub    %eax,%edx
f011cc17:	89 d0                	mov    %edx,%eax
f011cc19:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cc1e:	74 17                	je     f011cc37 <test_kmalloc_firstfit1+0x325>
f011cc20:	83 ec 04             	sub    $0x4,%esp
f011cc23:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011cc28:	68 f8 02 00 00       	push   $0x2f8
f011cc2d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cc32:	e8 79 35 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cc37:	e8 26 fe fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cc3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc3f:	e8 40 7a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cc44:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011cc47:	83 ec 0c             	sub    $0xc,%esp
f011cc4a:	68 00 fc 0f 00       	push   $0xffc00
f011cc4f:	e8 a4 b3 fe ff       	call   f0107ff8 <kmalloc>
f011cc54:	83 c4 10             	add    $0x10,%esp
f011cc57:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011cc5d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cc63:	89 c1                	mov    %eax,%ecx
f011cc65:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cc6c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cc71:	0f b6 d0             	movzbl %al,%edx
f011cc74:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cc77:	01 d0                	add    %edx,%eax
f011cc79:	48                   	dec    %eax
f011cc7a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cc7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cc80:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc85:	f7 75 bc             	divl   -0x44(%ebp)
f011cc88:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cc8b:	29 d0                	sub    %edx,%eax
f011cc8d:	89 c3                	mov    %eax,%ebx
f011cc8f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cc96:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cc9b:	0f b6 c0             	movzbl %al,%eax
f011cc9e:	c1 e0 04             	shl    $0x4,%eax
f011cca1:	89 c2                	mov    %eax,%edx
f011cca3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cca6:	01 d0                	add    %edx,%eax
f011cca8:	48                   	dec    %eax
f011cca9:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ccac:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ccaf:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccb4:	f7 75 b4             	divl   -0x4c(%ebp)
f011ccb7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ccba:	29 d0                	sub    %edx,%eax
f011ccbc:	01 d8                	add    %ebx,%eax
f011ccbe:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011ccc3:	39 c1                	cmp    %eax,%ecx
f011ccc5:	74 17                	je     f011ccde <test_kmalloc_firstfit1+0x3cc>
f011ccc7:	83 ec 04             	sub    $0x4,%esp
f011ccca:	68 ec 9e 13 f0       	push   $0xf0139eec
f011cccf:	68 fe 02 00 00       	push   $0x2fe
f011ccd4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ccd9:	e8 d2 34 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ccde:	e8 a1 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cce3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cce6:	74 17                	je     f011ccff <test_kmalloc_firstfit1+0x3ed>
f011cce8:	83 ec 04             	sub    $0x4,%esp
f011cceb:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ccf0:	68 ff 02 00 00       	push   $0x2ff
f011ccf5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ccfa:	e8 b1 34 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ccff:	e8 5e fd fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cd04:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd07:	29 c2                	sub    %eax,%edx
f011cd09:	89 d0                	mov    %edx,%eax
f011cd0b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cd10:	74 17                	je     f011cd29 <test_kmalloc_firstfit1+0x417>
f011cd12:	83 ec 04             	sub    $0x4,%esp
f011cd15:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011cd1a:	68 00 03 00 00       	push   $0x300
f011cd1f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cd24:	e8 87 34 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd29:	e8 34 fd fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cd2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd31:	e8 4e 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cd36:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011cd39:	83 ec 0c             	sub    $0xc,%esp
f011cd3c:	68 00 fc 1f 00       	push   $0x1ffc00
f011cd41:	e8 b2 b2 fe ff       	call   f0107ff8 <kmalloc>
f011cd46:	83 c4 10             	add    $0x10,%esp
f011cd49:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cd4f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cd55:	89 c1                	mov    %eax,%ecx
f011cd57:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cd5e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cd63:	0f b6 d0             	movzbl %al,%edx
f011cd66:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cd69:	01 d0                	add    %edx,%eax
f011cd6b:	48                   	dec    %eax
f011cd6c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cd6f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cd72:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd77:	f7 75 ac             	divl   -0x54(%ebp)
f011cd7a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cd7d:	29 d0                	sub    %edx,%eax
f011cd7f:	89 c3                	mov    %eax,%ebx
f011cd81:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cd88:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cd8d:	0f b6 c0             	movzbl %al,%eax
f011cd90:	c1 e0 04             	shl    $0x4,%eax
f011cd93:	89 c2                	mov    %eax,%edx
f011cd95:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cd98:	01 d0                	add    %edx,%eax
f011cd9a:	48                   	dec    %eax
f011cd9b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cd9e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cda1:	ba 00 00 00 00       	mov    $0x0,%edx
f011cda6:	f7 75 a4             	divl   -0x5c(%ebp)
f011cda9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cdac:	29 d0                	sub    %edx,%eax
f011cdae:	01 d8                	add    %ebx,%eax
f011cdb0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cdb5:	39 c1                	cmp    %eax,%ecx
f011cdb7:	74 17                	je     f011cdd0 <test_kmalloc_firstfit1+0x4be>
f011cdb9:	83 ec 04             	sub    $0x4,%esp
f011cdbc:	68 ec 9e 13 f0       	push   $0xf0139eec
f011cdc1:	68 06 03 00 00       	push   $0x306
f011cdc6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cdcb:	e8 e0 33 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cdd0:	e8 af 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cdd5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cdd8:	74 17                	je     f011cdf1 <test_kmalloc_firstfit1+0x4df>
f011cdda:	83 ec 04             	sub    $0x4,%esp
f011cddd:	68 ec 9a 13 f0       	push   $0xf0139aec
f011cde2:	68 07 03 00 00       	push   $0x307
f011cde7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cdec:	e8 bf 33 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cdf1:	e8 6c fc fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cdf6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cdf9:	29 c2                	sub    %eax,%edx
f011cdfb:	89 d0                	mov    %edx,%eax
f011cdfd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ce02:	74 17                	je     f011ce1b <test_kmalloc_firstfit1+0x509>
f011ce04:	83 ec 04             	sub    $0x4,%esp
f011ce07:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011ce0c:	68 08 03 00 00       	push   $0x308
f011ce11:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ce16:	e8 95 33 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ce1b:	e8 42 fc fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ce20:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce23:	e8 5c 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ce28:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011ce2b:	83 ec 0c             	sub    $0xc,%esp
f011ce2e:	68 00 fc 1f 00       	push   $0x1ffc00
f011ce33:	e8 c0 b1 fe ff       	call   f0107ff8 <kmalloc>
f011ce38:	83 c4 10             	add    $0x10,%esp
f011ce3b:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011ce41:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ce47:	89 c1                	mov    %eax,%ecx
f011ce49:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ce50:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ce55:	0f b6 d0             	movzbl %al,%edx
f011ce58:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ce5b:	01 d0                	add    %edx,%eax
f011ce5d:	48                   	dec    %eax
f011ce5e:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ce61:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ce64:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce69:	f7 75 9c             	divl   -0x64(%ebp)
f011ce6c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ce6f:	29 d0                	sub    %edx,%eax
f011ce71:	89 c3                	mov    %eax,%ebx
f011ce73:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ce7a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ce7f:	0f b6 c0             	movzbl %al,%eax
f011ce82:	c1 e0 04             	shl    $0x4,%eax
f011ce85:	89 c2                	mov    %eax,%edx
f011ce87:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ce8a:	01 d0                	add    %edx,%eax
f011ce8c:	48                   	dec    %eax
f011ce8d:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ce90:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ce93:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce98:	f7 75 94             	divl   -0x6c(%ebp)
f011ce9b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ce9e:	29 d0                	sub    %edx,%eax
f011cea0:	01 d8                	add    %ebx,%eax
f011cea2:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011cea7:	39 c1                	cmp    %eax,%ecx
f011cea9:	74 17                	je     f011cec2 <test_kmalloc_firstfit1+0x5b0>
f011ceab:	83 ec 04             	sub    $0x4,%esp
f011ceae:	68 ec 9e 13 f0       	push   $0xf0139eec
f011ceb3:	68 0e 03 00 00       	push   $0x30e
f011ceb8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cebd:	e8 ee 32 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cec2:	e8 bd 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cec7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ceca:	74 17                	je     f011cee3 <test_kmalloc_firstfit1+0x5d1>
f011cecc:	83 ec 04             	sub    $0x4,%esp
f011cecf:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ced4:	68 0f 03 00 00       	push   $0x30f
f011ced9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cede:	e8 cd 32 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cee3:	e8 7a fb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cee8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ceeb:	29 c2                	sub    %eax,%edx
f011ceed:	89 d0                	mov    %edx,%eax
f011ceef:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cef4:	74 17                	je     f011cf0d <test_kmalloc_firstfit1+0x5fb>
f011cef6:	83 ec 04             	sub    $0x4,%esp
f011cef9:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011cefe:	68 10 03 00 00       	push   $0x310
f011cf03:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cf08:	e8 a3 32 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cf0d:	e8 50 fb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cf12:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf15:	e8 6a 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011cf1d:	83 ec 0c             	sub    $0xc,%esp
f011cf20:	68 00 fc 2f 00       	push   $0x2ffc00
f011cf25:	e8 ce b0 fe ff       	call   f0107ff8 <kmalloc>
f011cf2a:	83 c4 10             	add    $0x10,%esp
f011cf2d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cf33:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cf39:	89 c1                	mov    %eax,%ecx
f011cf3b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011cf42:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cf47:	0f b6 d0             	movzbl %al,%edx
f011cf4a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011cf4d:	01 d0                	add    %edx,%eax
f011cf4f:	48                   	dec    %eax
f011cf50:	89 45 88             	mov    %eax,-0x78(%ebp)
f011cf53:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cf56:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf5b:	f7 75 8c             	divl   -0x74(%ebp)
f011cf5e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cf61:	29 d0                	sub    %edx,%eax
f011cf63:	89 c3                	mov    %eax,%ebx
f011cf65:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011cf6c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cf71:	0f b6 c0             	movzbl %al,%eax
f011cf74:	c1 e0 04             	shl    $0x4,%eax
f011cf77:	89 c2                	mov    %eax,%edx
f011cf79:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011cf7c:	01 d0                	add    %edx,%eax
f011cf7e:	48                   	dec    %eax
f011cf7f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011cf82:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cf85:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf8a:	f7 75 84             	divl   -0x7c(%ebp)
f011cf8d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cf90:	29 d0                	sub    %edx,%eax
f011cf92:	01 d8                	add    %ebx,%eax
f011cf94:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cf99:	39 c1                	cmp    %eax,%ecx
f011cf9b:	74 17                	je     f011cfb4 <test_kmalloc_firstfit1+0x6a2>
f011cf9d:	83 ec 04             	sub    $0x4,%esp
f011cfa0:	68 ec 9e 13 f0       	push   $0xf0139eec
f011cfa5:	68 16 03 00 00       	push   $0x316
f011cfaa:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cfaf:	e8 fc 31 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfb4:	e8 cb 76 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cfb9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfbc:	74 17                	je     f011cfd5 <test_kmalloc_firstfit1+0x6c3>
f011cfbe:	83 ec 04             	sub    $0x4,%esp
f011cfc1:	68 ec 9a 13 f0       	push   $0xf0139aec
f011cfc6:	68 17 03 00 00       	push   $0x317
f011cfcb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cfd0:	e8 db 31 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cfd5:	e8 88 fa fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011cfda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfdd:	29 c2                	sub    %eax,%edx
f011cfdf:	89 d0                	mov    %edx,%eax
f011cfe1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cfe6:	74 17                	je     f011cfff <test_kmalloc_firstfit1+0x6ed>
f011cfe8:	83 ec 04             	sub    $0x4,%esp
f011cfeb:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011cff0:	68 18 03 00 00       	push   $0x318
f011cff5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011cffa:	e8 b1 31 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cfff:	e8 5e fa fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d004:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d007:	e8 78 76 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d00c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d00f:	83 ec 0c             	sub    $0xc,%esp
f011d012:	68 00 fc 2f 00       	push   $0x2ffc00
f011d017:	e8 dc af fe ff       	call   f0107ff8 <kmalloc>
f011d01c:	83 c4 10             	add    $0x10,%esp
f011d01f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d025:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d02b:	89 c1                	mov    %eax,%ecx
f011d02d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d034:	10 00 00 
f011d037:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d03c:	0f b6 d0             	movzbl %al,%edx
f011d03f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d045:	01 d0                	add    %edx,%eax
f011d047:	48                   	dec    %eax
f011d048:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d04e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d054:	ba 00 00 00 00       	mov    $0x0,%edx
f011d059:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d05f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d065:	29 d0                	sub    %edx,%eax
f011d067:	89 c3                	mov    %eax,%ebx
f011d069:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d070:	10 00 00 
f011d073:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d078:	0f b6 c0             	movzbl %al,%eax
f011d07b:	c1 e0 04             	shl    $0x4,%eax
f011d07e:	89 c2                	mov    %eax,%edx
f011d080:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d086:	01 d0                	add    %edx,%eax
f011d088:	48                   	dec    %eax
f011d089:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d08f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d095:	ba 00 00 00 00       	mov    $0x0,%edx
f011d09a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d0a0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d0a6:	29 d0                	sub    %edx,%eax
f011d0a8:	01 d8                	add    %ebx,%eax
f011d0aa:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d0af:	39 c1                	cmp    %eax,%ecx
f011d0b1:	74 17                	je     f011d0ca <test_kmalloc_firstfit1+0x7b8>
f011d0b3:	83 ec 04             	sub    $0x4,%esp
f011d0b6:	68 ec 9e 13 f0       	push   $0xf0139eec
f011d0bb:	68 1e 03 00 00       	push   $0x31e
f011d0c0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d0c5:	e8 e6 30 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0ca:	e8 b5 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d0cf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0d2:	74 17                	je     f011d0eb <test_kmalloc_firstfit1+0x7d9>
f011d0d4:	83 ec 04             	sub    $0x4,%esp
f011d0d7:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d0dc:	68 1f 03 00 00       	push   $0x31f
f011d0e1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d0e6:	e8 c5 30 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d0eb:	e8 72 f9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d0f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0f3:	29 c2                	sub    %eax,%edx
f011d0f5:	89 d0                	mov    %edx,%eax
f011d0f7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d0fc:	74 17                	je     f011d115 <test_kmalloc_firstfit1+0x803>
f011d0fe:	83 ec 04             	sub    $0x4,%esp
f011d101:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011d106:	68 20 03 00 00       	push   $0x320
f011d10b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d110:	e8 9b 30 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d115:	e8 48 f9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d11a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d11d:	e8 62 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d122:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d125:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d12b:	83 ec 0c             	sub    $0xc,%esp
f011d12e:	50                   	push   %eax
f011d12f:	e8 de ae fe ff       	call   f0108012 <kfree>
f011d134:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d137:	e8 48 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d13c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d13f:	74 17                	je     f011d158 <test_kmalloc_firstfit1+0x846>
f011d141:	83 ec 04             	sub    $0x4,%esp
f011d144:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d149:	68 29 03 00 00       	push   $0x329
f011d14e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d153:	e8 58 30 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d158:	e8 05 f9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d15d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d160:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d165:	74 17                	je     f011d17e <test_kmalloc_firstfit1+0x86c>
f011d167:	83 ec 04             	sub    $0x4,%esp
f011d16a:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011d16f:	68 2a 03 00 00       	push   $0x32a
f011d174:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d179:	e8 32 30 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d17e:	e8 df f8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d183:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d186:	e8 f9 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d18b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d18e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d194:	83 ec 0c             	sub    $0xc,%esp
f011d197:	50                   	push   %eax
f011d198:	e8 75 ae fe ff       	call   f0108012 <kfree>
f011d19d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1a0:	e8 df 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d1a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1a8:	74 17                	je     f011d1c1 <test_kmalloc_firstfit1+0x8af>
f011d1aa:	83 ec 04             	sub    $0x4,%esp
f011d1ad:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d1b2:	68 30 03 00 00       	push   $0x330
f011d1b7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d1bc:	e8 ef 2f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d1c1:	e8 9c f8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d1c6:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d1c9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d1ce:	74 17                	je     f011d1e7 <test_kmalloc_firstfit1+0x8d5>
f011d1d0:	83 ec 04             	sub    $0x4,%esp
f011d1d3:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011d1d8:	68 31 03 00 00       	push   $0x331
f011d1dd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d1e2:	e8 c9 2f fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d1e7:	e8 76 f8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d1ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1ef:	e8 90 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d1f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d1f7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d1fd:	83 ec 0c             	sub    $0xc,%esp
f011d200:	50                   	push   %eax
f011d201:	e8 0c ae fe ff       	call   f0108012 <kfree>
f011d206:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d209:	e8 76 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d20e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d211:	74 17                	je     f011d22a <test_kmalloc_firstfit1+0x918>
f011d213:	83 ec 04             	sub    $0x4,%esp
f011d216:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d21b:	68 37 03 00 00       	push   $0x337
f011d220:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d225:	e8 86 2f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d22a:	e8 33 f8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d22f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d232:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d237:	74 17                	je     f011d250 <test_kmalloc_firstfit1+0x93e>
f011d239:	83 ec 04             	sub    $0x4,%esp
f011d23c:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011d241:	68 38 03 00 00       	push   $0x338
f011d246:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d24b:	e8 60 2f fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d250:	e8 0d f8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d255:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d258:	e8 27 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d25d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d260:	83 ec 0c             	sub    $0xc,%esp
f011d263:	68 00 fc 07 00       	push   $0x7fc00
f011d268:	e8 8b ad fe ff       	call   f0107ff8 <kmalloc>
f011d26d:	83 c4 10             	add    $0x10,%esp
f011d270:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d276:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d27c:	89 c1                	mov    %eax,%ecx
f011d27e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d285:	10 00 00 
f011d288:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d28d:	0f b6 d0             	movzbl %al,%edx
f011d290:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d296:	01 d0                	add    %edx,%eax
f011d298:	48                   	dec    %eax
f011d299:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d29f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d2a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2aa:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d2b0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d2b6:	29 d0                	sub    %edx,%eax
f011d2b8:	89 c3                	mov    %eax,%ebx
f011d2ba:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d2c1:	10 00 00 
f011d2c4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d2c9:	0f b6 c0             	movzbl %al,%eax
f011d2cc:	c1 e0 04             	shl    $0x4,%eax
f011d2cf:	89 c2                	mov    %eax,%edx
f011d2d1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d2d7:	01 d0                	add    %edx,%eax
f011d2d9:	48                   	dec    %eax
f011d2da:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d2e0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d2e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2eb:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d2f1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d2f7:	29 d0                	sub    %edx,%eax
f011d2f9:	01 d8                	add    %ebx,%eax
f011d2fb:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d300:	39 c1                	cmp    %eax,%ecx
f011d302:	74 17                	je     f011d31b <test_kmalloc_firstfit1+0xa09>
f011d304:	83 ec 04             	sub    $0x4,%esp
f011d307:	68 ec 9e 13 f0       	push   $0xf0139eec
f011d30c:	68 41 03 00 00       	push   $0x341
f011d311:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d316:	e8 95 2e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d31b:	e8 64 73 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d320:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d323:	74 17                	je     f011d33c <test_kmalloc_firstfit1+0xa2a>
f011d325:	83 ec 04             	sub    $0x4,%esp
f011d328:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d32d:	68 42 03 00 00       	push   $0x342
f011d332:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d337:	e8 74 2e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d33c:	e8 21 f7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d341:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d344:	29 c2                	sub    %eax,%edx
f011d346:	89 d0                	mov    %edx,%eax
f011d348:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d34d:	74 17                	je     f011d366 <test_kmalloc_firstfit1+0xa54>
f011d34f:	83 ec 04             	sub    $0x4,%esp
f011d352:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011d357:	68 43 03 00 00       	push   $0x343
f011d35c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d361:	e8 4a 2e fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d366:	e8 f7 f6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d36b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d36e:	e8 11 73 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d373:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d376:	83 ec 0c             	sub    $0xc,%esp
f011d379:	68 00 fc 0f 00       	push   $0xffc00
f011d37e:	e8 75 ac fe ff       	call   f0107ff8 <kmalloc>
f011d383:	83 c4 10             	add    $0x10,%esp
f011d386:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d38c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d392:	89 c1                	mov    %eax,%ecx
f011d394:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d39b:	10 00 00 
f011d39e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d3a3:	0f b6 d0             	movzbl %al,%edx
f011d3a6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d3ac:	01 d0                	add    %edx,%eax
f011d3ae:	48                   	dec    %eax
f011d3af:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d3b5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d3bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3c0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d3c6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d3cc:	29 d0                	sub    %edx,%eax
f011d3ce:	89 c3                	mov    %eax,%ebx
f011d3d0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d3d7:	10 00 00 
f011d3da:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d3df:	0f b6 c0             	movzbl %al,%eax
f011d3e2:	c1 e0 04             	shl    $0x4,%eax
f011d3e5:	89 c2                	mov    %eax,%edx
f011d3e7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d3ed:	01 d0                	add    %edx,%eax
f011d3ef:	48                   	dec    %eax
f011d3f0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d3f6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d3fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011d401:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d407:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d40d:	29 d0                	sub    %edx,%eax
f011d40f:	01 d8                	add    %ebx,%eax
f011d411:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d416:	39 c1                	cmp    %eax,%ecx
f011d418:	74 17                	je     f011d431 <test_kmalloc_firstfit1+0xb1f>
f011d41a:	83 ec 04             	sub    $0x4,%esp
f011d41d:	68 ec 9e 13 f0       	push   $0xf0139eec
f011d422:	68 49 03 00 00       	push   $0x349
f011d427:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d42c:	e8 7f 2d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d431:	e8 4e 72 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d436:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d439:	74 17                	je     f011d452 <test_kmalloc_firstfit1+0xb40>
f011d43b:	83 ec 04             	sub    $0x4,%esp
f011d43e:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d443:	68 4a 03 00 00       	push   $0x34a
f011d448:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d44d:	e8 5e 2d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d452:	e8 0b f6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d457:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d45a:	29 c2                	sub    %eax,%edx
f011d45c:	89 d0                	mov    %edx,%eax
f011d45e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d463:	74 17                	je     f011d47c <test_kmalloc_firstfit1+0xb6a>
f011d465:	83 ec 04             	sub    $0x4,%esp
f011d468:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011d46d:	68 4b 03 00 00       	push   $0x34b
f011d472:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d477:	e8 34 2d fe ff       	call   f01001b0 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d47c:	e8 e1 f5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d481:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d484:	e8 fb 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d489:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d48c:	83 ec 0c             	sub    $0xc,%esp
f011d48f:	68 00 fc 03 00       	push   $0x3fc00
f011d494:	e8 5f ab fe ff       	call   f0107ff8 <kmalloc>
f011d499:	83 c4 10             	add    $0x10,%esp
f011d49c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d4a2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d4a8:	89 c1                	mov    %eax,%ecx
f011d4aa:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d4b1:	10 00 00 
f011d4b4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d4b9:	0f b6 d0             	movzbl %al,%edx
f011d4bc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d4c2:	01 d0                	add    %edx,%eax
f011d4c4:	48                   	dec    %eax
f011d4c5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d4cb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d4d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4d6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d4dc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d4e2:	29 d0                	sub    %edx,%eax
f011d4e4:	89 c3                	mov    %eax,%ebx
f011d4e6:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d4ed:	10 00 00 
f011d4f0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d4f5:	0f b6 c0             	movzbl %al,%eax
f011d4f8:	c1 e0 04             	shl    $0x4,%eax
f011d4fb:	89 c2                	mov    %eax,%edx
f011d4fd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d503:	01 d0                	add    %edx,%eax
f011d505:	48                   	dec    %eax
f011d506:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d50c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d512:	ba 00 00 00 00       	mov    $0x0,%edx
f011d517:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d51d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d523:	29 d0                	sub    %edx,%eax
f011d525:	01 d8                	add    %ebx,%eax
f011d527:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d52c:	39 c1                	cmp    %eax,%ecx
f011d52e:	74 17                	je     f011d547 <test_kmalloc_firstfit1+0xc35>
f011d530:	83 ec 04             	sub    $0x4,%esp
f011d533:	68 ec 9e 13 f0       	push   $0xf0139eec
f011d538:	68 52 03 00 00       	push   $0x352
f011d53d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d542:	e8 69 2c fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d547:	e8 38 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d54c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d54f:	74 17                	je     f011d568 <test_kmalloc_firstfit1+0xc56>
f011d551:	83 ec 04             	sub    $0x4,%esp
f011d554:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d559:	68 53 03 00 00       	push   $0x353
f011d55e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d563:	e8 48 2c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d568:	e8 f5 f4 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d56d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d570:	29 c2                	sub    %eax,%edx
f011d572:	89 d0                	mov    %edx,%eax
f011d574:	83 f8 40             	cmp    $0x40,%eax
f011d577:	74 17                	je     f011d590 <test_kmalloc_firstfit1+0xc7e>
f011d579:	83 ec 04             	sub    $0x4,%esp
f011d57c:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011d581:	68 54 03 00 00       	push   $0x354
f011d586:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d58b:	e8 20 2c fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d590:	e8 cd f4 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d595:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d598:	e8 e7 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d59d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d5a0:	83 ec 0c             	sub    $0xc,%esp
f011d5a3:	68 00 00 20 00       	push   $0x200000
f011d5a8:	e8 4b aa fe ff       	call   f0107ff8 <kmalloc>
f011d5ad:	83 c4 10             	add    $0x10,%esp
f011d5b0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d5b6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d5bc:	89 c1                	mov    %eax,%ecx
f011d5be:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d5c5:	10 00 00 
f011d5c8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d5cd:	0f b6 d0             	movzbl %al,%edx
f011d5d0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d5d6:	01 d0                	add    %edx,%eax
f011d5d8:	48                   	dec    %eax
f011d5d9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d5df:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d5e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5ea:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d5f0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d5f6:	29 d0                	sub    %edx,%eax
f011d5f8:	89 c3                	mov    %eax,%ebx
f011d5fa:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d601:	10 00 00 
f011d604:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d609:	0f b6 c0             	movzbl %al,%eax
f011d60c:	c1 e0 04             	shl    $0x4,%eax
f011d60f:	89 c2                	mov    %eax,%edx
f011d611:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d617:	01 d0                	add    %edx,%eax
f011d619:	48                   	dec    %eax
f011d61a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d620:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d626:	ba 00 00 00 00       	mov    $0x0,%edx
f011d62b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d631:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d637:	29 d0                	sub    %edx,%eax
f011d639:	01 d8                	add    %ebx,%eax
f011d63b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d640:	39 c1                	cmp    %eax,%ecx
f011d642:	74 17                	je     f011d65b <test_kmalloc_firstfit1+0xd49>
f011d644:	83 ec 04             	sub    $0x4,%esp
f011d647:	68 ec 9e 13 f0       	push   $0xf0139eec
f011d64c:	68 5a 03 00 00       	push   $0x35a
f011d651:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d656:	e8 55 2b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d65b:	e8 02 f4 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d660:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d663:	29 c2                	sub    %eax,%edx
f011d665:	89 d0                	mov    %edx,%eax
f011d667:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d66c:	74 17                	je     f011d685 <test_kmalloc_firstfit1+0xd73>
f011d66e:	83 ec 04             	sub    $0x4,%esp
f011d671:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011d676:	68 5b 03 00 00       	push   $0x35b
f011d67b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d680:	e8 2b 2b fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d685:	e8 fa 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d68a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d68d:	74 17                	je     f011d6a6 <test_kmalloc_firstfit1+0xd94>
f011d68f:	83 ec 04             	sub    $0x4,%esp
f011d692:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d697:	68 5c 03 00 00       	push   $0x35c
f011d69c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d6a1:	e8 0a 2b fe ff       	call   f01001b0 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d6a6:	e8 b7 f3 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d6ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6ae:	e8 d1 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d6b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d6b6:	83 ec 0c             	sub    $0xc,%esp
f011d6b9:	68 00 fc 3f 00       	push   $0x3ffc00
f011d6be:	e8 35 a9 fe ff       	call   f0107ff8 <kmalloc>
f011d6c3:	83 c4 10             	add    $0x10,%esp
f011d6c6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d6cc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d6d2:	89 c1                	mov    %eax,%ecx
f011d6d4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d6db:	10 00 00 
f011d6de:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d6e3:	0f b6 d0             	movzbl %al,%edx
f011d6e6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d6ec:	01 d0                	add    %edx,%eax
f011d6ee:	48                   	dec    %eax
f011d6ef:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d6f5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d6fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d700:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d706:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d70c:	29 d0                	sub    %edx,%eax
f011d70e:	89 c3                	mov    %eax,%ebx
f011d710:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d717:	10 00 00 
f011d71a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d71f:	0f b6 c0             	movzbl %al,%eax
f011d722:	c1 e0 04             	shl    $0x4,%eax
f011d725:	89 c2                	mov    %eax,%edx
f011d727:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d72d:	01 d0                	add    %edx,%eax
f011d72f:	48                   	dec    %eax
f011d730:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d736:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d73c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d741:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d747:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d74d:	29 d0                	sub    %edx,%eax
f011d74f:	01 d8                	add    %ebx,%eax
f011d751:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d756:	39 c1                	cmp    %eax,%ecx
f011d758:	74 17                	je     f011d771 <test_kmalloc_firstfit1+0xe5f>
f011d75a:	83 ec 04             	sub    $0x4,%esp
f011d75d:	68 ec 9e 13 f0       	push   $0xf0139eec
f011d762:	68 63 03 00 00       	push   $0x363
f011d767:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d76c:	e8 3f 2a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d771:	e8 0e 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d776:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d779:	74 17                	je     f011d792 <test_kmalloc_firstfit1+0xe80>
f011d77b:	83 ec 04             	sub    $0x4,%esp
f011d77e:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d783:	68 64 03 00 00       	push   $0x364
f011d788:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d78d:	e8 1e 2a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d792:	e8 cb f2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d797:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d79a:	29 c2                	sub    %eax,%edx
f011d79c:	89 d0                	mov    %edx,%eax
f011d79e:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d7a3:	74 17                	je     f011d7bc <test_kmalloc_firstfit1+0xeaa>
f011d7a5:	83 ec 04             	sub    $0x4,%esp
f011d7a8:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011d7ad:	68 65 03 00 00       	push   $0x365
f011d7b2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d7b7:	e8 f4 29 fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d7bc:	e8 a1 f2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d7c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7c4:	e8 bb 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d7c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d7cc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d7d2:	83 ec 0c             	sub    $0xc,%esp
f011d7d5:	50                   	push   %eax
f011d7d6:	e8 37 a8 fe ff       	call   f0108012 <kfree>
f011d7db:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7de:	e8 a1 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d7e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7e6:	74 17                	je     f011d7ff <test_kmalloc_firstfit1+0xeed>
f011d7e8:	83 ec 04             	sub    $0x4,%esp
f011d7eb:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d7f0:	68 6e 03 00 00       	push   $0x36e
f011d7f5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d7fa:	e8 b1 29 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d7ff:	e8 5e f2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d804:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d807:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d80c:	74 17                	je     f011d825 <test_kmalloc_firstfit1+0xf13>
f011d80e:	83 ec 04             	sub    $0x4,%esp
f011d811:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011d816:	68 6f 03 00 00       	push   $0x36f
f011d81b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d820:	e8 8b 29 fe ff       	call   f01001b0 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d825:	e8 38 f2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d82a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d82d:	e8 52 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d832:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d835:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d83b:	83 ec 0c             	sub    $0xc,%esp
f011d83e:	50                   	push   %eax
f011d83f:	e8 ce a7 fe ff       	call   f0108012 <kfree>
f011d844:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d847:	e8 38 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d84c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d84f:	74 17                	je     f011d868 <test_kmalloc_firstfit1+0xf56>
f011d851:	83 ec 04             	sub    $0x4,%esp
f011d854:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d859:	68 75 03 00 00       	push   $0x375
f011d85e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d863:	e8 48 29 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d868:	e8 f5 f1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d86d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d870:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d875:	74 17                	je     f011d88e <test_kmalloc_firstfit1+0xf7c>
f011d877:	83 ec 04             	sub    $0x4,%esp
f011d87a:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011d87f:	68 76 03 00 00       	push   $0x376
f011d884:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d889:	e8 22 29 fe ff       	call   f01001b0 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d88e:	e8 cf f1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d893:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d896:	e8 e9 6d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d89b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d89e:	83 ec 0c             	sub    $0xc,%esp
f011d8a1:	68 00 00 10 00       	push   $0x100000
f011d8a6:	e8 4d a7 fe ff       	call   f0107ff8 <kmalloc>
f011d8ab:	83 c4 10             	add    $0x10,%esp
f011d8ae:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d8b4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d8ba:	89 c1                	mov    %eax,%ecx
f011d8bc:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d8c3:	10 00 00 
f011d8c6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d8cb:	0f b6 d0             	movzbl %al,%edx
f011d8ce:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d8d4:	01 d0                	add    %edx,%eax
f011d8d6:	48                   	dec    %eax
f011d8d7:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d8dd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d8e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8e8:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d8ee:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d8f4:	29 d0                	sub    %edx,%eax
f011d8f6:	89 c3                	mov    %eax,%ebx
f011d8f8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d8ff:	10 00 00 
f011d902:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d907:	0f b6 c0             	movzbl %al,%eax
f011d90a:	c1 e0 04             	shl    $0x4,%eax
f011d90d:	89 c2                	mov    %eax,%edx
f011d90f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d915:	01 d0                	add    %edx,%eax
f011d917:	48                   	dec    %eax
f011d918:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d91e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d924:	ba 00 00 00 00       	mov    $0x0,%edx
f011d929:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d92f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d935:	29 d0                	sub    %edx,%eax
f011d937:	01 d8                	add    %ebx,%eax
f011d939:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d93e:	39 c1                	cmp    %eax,%ecx
f011d940:	74 17                	je     f011d959 <test_kmalloc_firstfit1+0x1047>
f011d942:	83 ec 04             	sub    $0x4,%esp
f011d945:	68 ec 9e 13 f0       	push   $0xf0139eec
f011d94a:	68 80 03 00 00       	push   $0x380
f011d94f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d954:	e8 57 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d959:	e8 26 6d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d95e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d961:	74 17                	je     f011d97a <test_kmalloc_firstfit1+0x1068>
f011d963:	83 ec 04             	sub    $0x4,%esp
f011d966:	68 ec 9a 13 f0       	push   $0xf0139aec
f011d96b:	68 81 03 00 00       	push   $0x381
f011d970:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d975:	e8 36 28 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d97a:	e8 e3 f0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011d97f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d982:	29 c2                	sub    %eax,%edx
f011d984:	89 d0                	mov    %edx,%eax
f011d986:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d98b:	74 17                	je     f011d9a4 <test_kmalloc_firstfit1+0x1092>
f011d98d:	83 ec 04             	sub    $0x4,%esp
f011d990:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011d995:	68 82 03 00 00       	push   $0x382
f011d99a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011d99f:	e8 0c 28 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d9a4:	83 ec 0c             	sub    $0xc,%esp
f011d9a7:	68 c8 a0 13 f0       	push   $0xf013a0c8
f011d9ac:	e8 80 34 fe ff       	call   f0100e31 <cprintf>
f011d9b1:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d9b4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d9b9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d9bc:	5b                   	pop    %ebx
f011d9bd:	5f                   	pop    %edi
f011d9be:	5d                   	pop    %ebp
f011d9bf:	c3                   	ret    

f011d9c0 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d9c0:	55                   	push   %ebp
f011d9c1:	89 e5                	mov    %esp,%ebp
f011d9c3:	57                   	push   %edi
f011d9c4:	53                   	push   %ebx
f011d9c5:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011d9cb:	83 ec 0c             	sub    $0xc,%esp
f011d9ce:	68 14 9a 13 f0       	push   $0xf0139a14
f011d9d3:	e8 59 34 fe ff       	call   f0100e31 <cprintf>
f011d9d8:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d9db:	83 ec 0c             	sub    $0xc,%esp
f011d9de:	68 44 9a 13 f0       	push   $0xf0139a44
f011d9e3:	e8 49 34 fe ff       	call   f0100e31 <cprintf>
f011d9e8:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d9eb:	83 ec 0c             	sub    $0xc,%esp
f011d9ee:	68 14 9a 13 f0       	push   $0xf0139a14
f011d9f3:	e8 39 34 fe ff       	call   f0100e31 <cprintf>
f011d9f8:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d9fb:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f011da01:	b9 14 00 00 00       	mov    $0x14,%ecx
f011da06:	b8 00 00 00 00       	mov    $0x0,%eax
f011da0b:	89 d7                	mov    %edx,%edi
f011da0d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011da0f:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011da16:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011da1b:	0f b6 d0             	movzbl %al,%edx
f011da1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011da21:	01 d0                	add    %edx,%eax
f011da23:	48                   	dec    %eax
f011da24:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011da27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011da2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011da2f:	f7 75 f4             	divl   -0xc(%ebp)
f011da32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011da35:	29 d0                	sub    %edx,%eax
f011da37:	89 c1                	mov    %eax,%ecx
f011da39:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011da40:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011da45:	0f b6 c0             	movzbl %al,%eax
f011da48:	c1 e0 04             	shl    $0x4,%eax
f011da4b:	89 c2                	mov    %eax,%edx
f011da4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011da50:	01 d0                	add    %edx,%eax
f011da52:	48                   	dec    %eax
f011da53:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011da56:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011da59:	ba 00 00 00 00       	mov    $0x0,%edx
f011da5e:	f7 75 ec             	divl   -0x14(%ebp)
f011da61:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011da64:	29 d0                	sub    %edx,%eax
f011da66:	01 c8                	add    %ecx,%eax
f011da68:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011da6d:	29 c2                	sub    %eax,%edx
f011da6f:	89 d0                	mov    %edx,%eax
f011da71:	83 ec 0c             	sub    $0xc,%esp
f011da74:	50                   	push   %eax
f011da75:	e8 7e a5 fe ff       	call   f0107ff8 <kmalloc>
f011da7a:	83 c4 10             	add    $0x10,%esp
f011da7d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011da83:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011da89:	85 c0                	test   %eax,%eax
f011da8b:	74 17                	je     f011daa4 <test_kmalloc_firstfit2+0xe4>
f011da8d:	83 ec 04             	sub    $0x4,%esp
f011da90:	68 14 a1 13 f0       	push   $0xf013a114
f011da95:	68 97 03 00 00       	push   $0x397
f011da9a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011da9f:	e8 0c 27 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011daa4:	e8 b9 ef fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011daa9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011daac:	e8 d3 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dab1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011dab4:	83 ec 0c             	sub    $0xc,%esp
f011dab7:	68 00 fc 1f 00       	push   $0x1ffc00
f011dabc:	e8 37 a5 fe ff       	call   f0107ff8 <kmalloc>
f011dac1:	83 c4 10             	add    $0x10,%esp
f011dac4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011daca:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dad0:	89 c1                	mov    %eax,%ecx
f011dad2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011dad9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dade:	0f b6 d0             	movzbl %al,%edx
f011dae1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011dae4:	01 d0                	add    %edx,%eax
f011dae6:	48                   	dec    %eax
f011dae7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011daea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011daed:	ba 00 00 00 00       	mov    $0x0,%edx
f011daf2:	f7 75 dc             	divl   -0x24(%ebp)
f011daf5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011daf8:	29 d0                	sub    %edx,%eax
f011dafa:	89 c3                	mov    %eax,%ebx
f011dafc:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011db03:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011db08:	0f b6 c0             	movzbl %al,%eax
f011db0b:	c1 e0 04             	shl    $0x4,%eax
f011db0e:	89 c2                	mov    %eax,%edx
f011db10:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011db13:	01 d0                	add    %edx,%eax
f011db15:	48                   	dec    %eax
f011db16:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011db19:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011db1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011db21:	f7 75 d4             	divl   -0x2c(%ebp)
f011db24:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011db27:	29 d0                	sub    %edx,%eax
f011db29:	01 d8                	add    %ebx,%eax
f011db2b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011db30:	39 c1                	cmp    %eax,%ecx
f011db32:	74 17                	je     f011db4b <test_kmalloc_firstfit2+0x18b>
f011db34:	83 ec 04             	sub    $0x4,%esp
f011db37:	68 ec 9e 13 f0       	push   $0xf0139eec
f011db3c:	68 a1 03 00 00       	push   $0x3a1
f011db41:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011db46:	e8 65 26 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db4b:	e8 34 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011db50:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011db53:	74 17                	je     f011db6c <test_kmalloc_firstfit2+0x1ac>
f011db55:	83 ec 04             	sub    $0x4,%esp
f011db58:	68 ec 9a 13 f0       	push   $0xf0139aec
f011db5d:	68 a2 03 00 00       	push   $0x3a2
f011db62:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011db67:	e8 44 26 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011db6c:	e8 f1 ee fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011db71:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011db74:	29 c2                	sub    %eax,%edx
f011db76:	89 d0                	mov    %edx,%eax
f011db78:	3d 00 02 00 00       	cmp    $0x200,%eax
f011db7d:	74 17                	je     f011db96 <test_kmalloc_firstfit2+0x1d6>
f011db7f:	83 ec 04             	sub    $0x4,%esp
f011db82:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011db87:	68 a3 03 00 00       	push   $0x3a3
f011db8c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011db91:	e8 1a 26 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011db96:	e8 c7 ee fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011db9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db9e:	e8 e1 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dba3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011dba6:	83 ec 0c             	sub    $0xc,%esp
f011dba9:	68 00 fc 1f 00       	push   $0x1ffc00
f011dbae:	e8 45 a4 fe ff       	call   f0107ff8 <kmalloc>
f011dbb3:	83 c4 10             	add    $0x10,%esp
f011dbb6:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011dbbc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011dbc2:	89 c1                	mov    %eax,%ecx
f011dbc4:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011dbcb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dbd0:	0f b6 d0             	movzbl %al,%edx
f011dbd3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011dbd6:	01 d0                	add    %edx,%eax
f011dbd8:	48                   	dec    %eax
f011dbd9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011dbdc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dbdf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbe4:	f7 75 cc             	divl   -0x34(%ebp)
f011dbe7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dbea:	29 d0                	sub    %edx,%eax
f011dbec:	89 c3                	mov    %eax,%ebx
f011dbee:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011dbf5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dbfa:	0f b6 c0             	movzbl %al,%eax
f011dbfd:	c1 e0 04             	shl    $0x4,%eax
f011dc00:	89 c2                	mov    %eax,%edx
f011dc02:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011dc05:	01 d0                	add    %edx,%eax
f011dc07:	48                   	dec    %eax
f011dc08:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011dc0b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dc0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc13:	f7 75 c4             	divl   -0x3c(%ebp)
f011dc16:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dc19:	29 d0                	sub    %edx,%eax
f011dc1b:	01 d8                	add    %ebx,%eax
f011dc1d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011dc22:	39 c1                	cmp    %eax,%ecx
f011dc24:	74 17                	je     f011dc3d <test_kmalloc_firstfit2+0x27d>
f011dc26:	83 ec 04             	sub    $0x4,%esp
f011dc29:	68 ec 9e 13 f0       	push   $0xf0139eec
f011dc2e:	68 a9 03 00 00       	push   $0x3a9
f011dc33:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011dc38:	e8 73 25 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc3d:	e8 42 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc42:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dc45:	74 17                	je     f011dc5e <test_kmalloc_firstfit2+0x29e>
f011dc47:	83 ec 04             	sub    $0x4,%esp
f011dc4a:	68 ec 9a 13 f0       	push   $0xf0139aec
f011dc4f:	68 aa 03 00 00       	push   $0x3aa
f011dc54:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011dc59:	e8 52 25 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dc5e:	e8 ff ed fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011dc63:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dc66:	29 c2                	sub    %eax,%edx
f011dc68:	89 d0                	mov    %edx,%eax
f011dc6a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dc6f:	74 17                	je     f011dc88 <test_kmalloc_firstfit2+0x2c8>
f011dc71:	83 ec 04             	sub    $0x4,%esp
f011dc74:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011dc79:	68 ab 03 00 00       	push   $0x3ab
f011dc7e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011dc83:	e8 28 25 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dc88:	e8 d5 ed fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011dc8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc90:	e8 ef 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc95:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011dc98:	83 ec 0c             	sub    $0xc,%esp
f011dc9b:	68 00 08 00 00       	push   $0x800
f011dca0:	e8 53 a3 fe ff       	call   f0107ff8 <kmalloc>
f011dca5:	83 c4 10             	add    $0x10,%esp
f011dca8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011dcae:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011dcb4:	89 c1                	mov    %eax,%ecx
f011dcb6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011dcbd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dcc2:	0f b6 d0             	movzbl %al,%edx
f011dcc5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011dcc8:	01 d0                	add    %edx,%eax
f011dcca:	48                   	dec    %eax
f011dccb:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011dcce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011dcd1:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcd6:	f7 75 bc             	divl   -0x44(%ebp)
f011dcd9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011dcdc:	29 d0                	sub    %edx,%eax
f011dcde:	89 c3                	mov    %eax,%ebx
f011dce0:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011dce7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dcec:	0f b6 c0             	movzbl %al,%eax
f011dcef:	c1 e0 04             	shl    $0x4,%eax
f011dcf2:	89 c2                	mov    %eax,%edx
f011dcf4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011dcf7:	01 d0                	add    %edx,%eax
f011dcf9:	48                   	dec    %eax
f011dcfa:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011dcfd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dd00:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd05:	f7 75 b4             	divl   -0x4c(%ebp)
f011dd08:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dd0b:	29 d0                	sub    %edx,%eax
f011dd0d:	01 d8                	add    %ebx,%eax
f011dd0f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011dd14:	39 c1                	cmp    %eax,%ecx
f011dd16:	73 17                	jae    f011dd2f <test_kmalloc_firstfit2+0x36f>
f011dd18:	83 ec 04             	sub    $0x4,%esp
f011dd1b:	68 ec 9e 13 f0       	push   $0xf0139eec
f011dd20:	68 b1 03 00 00       	push   $0x3b1
f011dd25:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011dd2a:	e8 81 24 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd2f:	e8 50 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dd34:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dd37:	74 17                	je     f011dd50 <test_kmalloc_firstfit2+0x390>
f011dd39:	83 ec 04             	sub    $0x4,%esp
f011dd3c:	68 ec 9a 13 f0       	push   $0xf0139aec
f011dd41:	68 b2 03 00 00       	push   $0x3b2
f011dd46:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011dd4b:	e8 60 24 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dd50:	e8 0d ed fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011dd55:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dd58:	29 c2                	sub    %eax,%edx
f011dd5a:	89 d0                	mov    %edx,%eax
f011dd5c:	83 f8 01             	cmp    $0x1,%eax
f011dd5f:	74 17                	je     f011dd78 <test_kmalloc_firstfit2+0x3b8>
f011dd61:	83 ec 04             	sub    $0x4,%esp
f011dd64:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011dd69:	68 b3 03 00 00       	push   $0x3b3
f011dd6e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011dd73:	e8 38 24 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dd78:	e8 e5 ec fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011dd7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd80:	e8 ff 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dd85:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011dd88:	83 ec 0c             	sub    $0xc,%esp
f011dd8b:	68 00 08 00 00       	push   $0x800
f011dd90:	e8 63 a2 fe ff       	call   f0107ff8 <kmalloc>
f011dd95:	83 c4 10             	add    $0x10,%esp
f011dd98:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011dd9e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011dda4:	89 c1                	mov    %eax,%ecx
f011dda6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ddad:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ddb2:	0f b6 d0             	movzbl %al,%edx
f011ddb5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ddb8:	01 d0                	add    %edx,%eax
f011ddba:	48                   	dec    %eax
f011ddbb:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ddbe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ddc1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddc6:	f7 75 ac             	divl   -0x54(%ebp)
f011ddc9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ddcc:	29 d0                	sub    %edx,%eax
f011ddce:	89 c3                	mov    %eax,%ebx
f011ddd0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ddd7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dddc:	0f b6 c0             	movzbl %al,%eax
f011dddf:	c1 e0 04             	shl    $0x4,%eax
f011dde2:	89 c2                	mov    %eax,%edx
f011dde4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dde7:	01 d0                	add    %edx,%eax
f011dde9:	48                   	dec    %eax
f011ddea:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011dded:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ddf0:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddf5:	f7 75 a4             	divl   -0x5c(%ebp)
f011ddf8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ddfb:	29 d0                	sub    %edx,%eax
f011ddfd:	01 d8                	add    %ebx,%eax
f011ddff:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011de04:	39 c1                	cmp    %eax,%ecx
f011de06:	74 17                	je     f011de1f <test_kmalloc_firstfit2+0x45f>
f011de08:	83 ec 04             	sub    $0x4,%esp
f011de0b:	68 ec 9e 13 f0       	push   $0xf0139eec
f011de10:	68 b9 03 00 00       	push   $0x3b9
f011de15:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011de1a:	e8 91 23 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de1f:	e8 60 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011de24:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011de27:	74 17                	je     f011de40 <test_kmalloc_firstfit2+0x480>
f011de29:	83 ec 04             	sub    $0x4,%esp
f011de2c:	68 ec 9a 13 f0       	push   $0xf0139aec
f011de31:	68 ba 03 00 00       	push   $0x3ba
f011de36:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011de3b:	e8 70 23 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011de40:	e8 1d ec fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011de45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011de48:	29 c2                	sub    %eax,%edx
f011de4a:	89 d0                	mov    %edx,%eax
f011de4c:	83 f8 01             	cmp    $0x1,%eax
f011de4f:	74 17                	je     f011de68 <test_kmalloc_firstfit2+0x4a8>
f011de51:	83 ec 04             	sub    $0x4,%esp
f011de54:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011de59:	68 bb 03 00 00       	push   $0x3bb
f011de5e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011de63:	e8 48 23 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011de68:	e8 f5 eb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011de6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de70:	e8 0f 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011de75:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011de78:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011de7e:	83 ec 0c             	sub    $0xc,%esp
f011de81:	50                   	push   %eax
f011de82:	e8 8b a1 fe ff       	call   f0108012 <kfree>
f011de87:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de8a:	e8 f5 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011de8f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011de92:	74 17                	je     f011deab <test_kmalloc_firstfit2+0x4eb>
f011de94:	83 ec 04             	sub    $0x4,%esp
f011de97:	68 ec 9a 13 f0       	push   $0xf0139aec
f011de9c:	68 c1 03 00 00       	push   $0x3c1
f011dea1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011dea6:	e8 05 23 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011deab:	e8 b2 eb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011deb0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011deb3:	83 f8 01             	cmp    $0x1,%eax
f011deb6:	74 17                	je     f011decf <test_kmalloc_firstfit2+0x50f>
f011deb8:	83 ec 04             	sub    $0x4,%esp
f011debb:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011dec0:	68 c2 03 00 00       	push   $0x3c2
f011dec5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011deca:	e8 e1 22 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011decf:	e8 8e eb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ded4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ded7:	e8 a8 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dedc:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011dedf:	83 ec 0c             	sub    $0xc,%esp
f011dee2:	68 00 1c 00 00       	push   $0x1c00
f011dee7:	e8 0c a1 fe ff       	call   f0107ff8 <kmalloc>
f011deec:	83 c4 10             	add    $0x10,%esp
f011deef:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011def5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011defb:	89 c1                	mov    %eax,%ecx
f011defd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011df04:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011df09:	0f b6 d0             	movzbl %al,%edx
f011df0c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011df0f:	01 d0                	add    %edx,%eax
f011df11:	48                   	dec    %eax
f011df12:	89 45 98             	mov    %eax,-0x68(%ebp)
f011df15:	8b 45 98             	mov    -0x68(%ebp),%eax
f011df18:	ba 00 00 00 00       	mov    $0x0,%edx
f011df1d:	f7 75 9c             	divl   -0x64(%ebp)
f011df20:	8b 45 98             	mov    -0x68(%ebp),%eax
f011df23:	29 d0                	sub    %edx,%eax
f011df25:	89 c3                	mov    %eax,%ebx
f011df27:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011df2e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011df33:	0f b6 c0             	movzbl %al,%eax
f011df36:	c1 e0 04             	shl    $0x4,%eax
f011df39:	89 c2                	mov    %eax,%edx
f011df3b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011df3e:	01 d0                	add    %edx,%eax
f011df40:	48                   	dec    %eax
f011df41:	89 45 90             	mov    %eax,-0x70(%ebp)
f011df44:	8b 45 90             	mov    -0x70(%ebp),%eax
f011df47:	ba 00 00 00 00       	mov    $0x0,%edx
f011df4c:	f7 75 94             	divl   -0x6c(%ebp)
f011df4f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011df52:	29 d0                	sub    %edx,%eax
f011df54:	01 d8                	add    %ebx,%eax
f011df56:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011df5b:	39 c1                	cmp    %eax,%ecx
f011df5d:	74 17                	je     f011df76 <test_kmalloc_firstfit2+0x5b6>
f011df5f:	83 ec 04             	sub    $0x4,%esp
f011df62:	68 ec 9e 13 f0       	push   $0xf0139eec
f011df67:	68 c8 03 00 00       	push   $0x3c8
f011df6c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011df71:	e8 3a 22 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df76:	e8 09 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011df7b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011df7e:	74 17                	je     f011df97 <test_kmalloc_firstfit2+0x5d7>
f011df80:	83 ec 04             	sub    $0x4,%esp
f011df83:	68 ec 9a 13 f0       	push   $0xf0139aec
f011df88:	68 c9 03 00 00       	push   $0x3c9
f011df8d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011df92:	e8 19 22 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011df97:	e8 c6 ea fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011df9c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011df9f:	29 c2                	sub    %eax,%edx
f011dfa1:	89 d0                	mov    %edx,%eax
f011dfa3:	83 f8 02             	cmp    $0x2,%eax
f011dfa6:	74 17                	je     f011dfbf <test_kmalloc_firstfit2+0x5ff>
f011dfa8:	83 ec 04             	sub    $0x4,%esp
f011dfab:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011dfb0:	68 ca 03 00 00       	push   $0x3ca
f011dfb5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011dfba:	e8 f1 21 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dfbf:	e8 9e ea fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011dfc4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfc7:	e8 b8 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dfcc:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011dfcf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dfd5:	83 ec 0c             	sub    $0xc,%esp
f011dfd8:	50                   	push   %eax
f011dfd9:	e8 34 a0 fe ff       	call   f0108012 <kfree>
f011dfde:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfe1:	e8 9e 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dfe6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dfe9:	74 17                	je     f011e002 <test_kmalloc_firstfit2+0x642>
f011dfeb:	83 ec 04             	sub    $0x4,%esp
f011dfee:	68 ec 9a 13 f0       	push   $0xf0139aec
f011dff3:	68 d0 03 00 00       	push   $0x3d0
f011dff8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011dffd:	e8 ae 21 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e002:	e8 5b ea fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e007:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e00a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e00f:	74 17                	je     f011e028 <test_kmalloc_firstfit2+0x668>
f011e011:	83 ec 04             	sub    $0x4,%esp
f011e014:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011e019:	68 d1 03 00 00       	push   $0x3d1
f011e01e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e023:	e8 88 21 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e028:	e8 35 ea fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e02d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e030:	e8 4f 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e035:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e038:	83 ec 0c             	sub    $0xc,%esp
f011e03b:	68 00 fc 2f 00       	push   $0x2ffc00
f011e040:	e8 b3 9f fe ff       	call   f0107ff8 <kmalloc>
f011e045:	83 c4 10             	add    $0x10,%esp
f011e048:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e04e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e054:	89 c1                	mov    %eax,%ecx
f011e056:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e05d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e062:	0f b6 d0             	movzbl %al,%edx
f011e065:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e068:	01 d0                	add    %edx,%eax
f011e06a:	48                   	dec    %eax
f011e06b:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e06e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e071:	ba 00 00 00 00       	mov    $0x0,%edx
f011e076:	f7 75 8c             	divl   -0x74(%ebp)
f011e079:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e07c:	29 d0                	sub    %edx,%eax
f011e07e:	89 c3                	mov    %eax,%ebx
f011e080:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e087:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e08c:	0f b6 c0             	movzbl %al,%eax
f011e08f:	c1 e0 04             	shl    $0x4,%eax
f011e092:	89 c2                	mov    %eax,%edx
f011e094:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e097:	01 d0                	add    %edx,%eax
f011e099:	48                   	dec    %eax
f011e09a:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e09d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e0a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0a5:	f7 75 84             	divl   -0x7c(%ebp)
f011e0a8:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e0ab:	29 d0                	sub    %edx,%eax
f011e0ad:	01 d8                	add    %ebx,%eax
f011e0af:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e0b4:	39 c1                	cmp    %eax,%ecx
f011e0b6:	74 17                	je     f011e0cf <test_kmalloc_firstfit2+0x70f>
f011e0b8:	83 ec 04             	sub    $0x4,%esp
f011e0bb:	68 ec 9e 13 f0       	push   $0xf0139eec
f011e0c0:	68 d7 03 00 00       	push   $0x3d7
f011e0c5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e0ca:	e8 e1 20 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0cf:	e8 b0 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e0d4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e0d7:	74 17                	je     f011e0f0 <test_kmalloc_firstfit2+0x730>
f011e0d9:	83 ec 04             	sub    $0x4,%esp
f011e0dc:	68 ec 9a 13 f0       	push   $0xf0139aec
f011e0e1:	68 d8 03 00 00       	push   $0x3d8
f011e0e6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e0eb:	e8 c0 20 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e0f0:	e8 6d e9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e0f5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e0f8:	29 c2                	sub    %eax,%edx
f011e0fa:	89 d0                	mov    %edx,%eax
f011e0fc:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e101:	74 17                	je     f011e11a <test_kmalloc_firstfit2+0x75a>
f011e103:	83 ec 04             	sub    $0x4,%esp
f011e106:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011e10b:	68 d9 03 00 00       	push   $0x3d9
f011e110:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e115:	e8 96 20 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e11a:	e8 43 e9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e11f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e122:	e8 5d 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e127:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e12a:	83 ec 0c             	sub    $0xc,%esp
f011e12d:	68 00 18 20 00       	push   $0x201800
f011e132:	e8 c1 9e fe ff       	call   f0107ff8 <kmalloc>
f011e137:	83 c4 10             	add    $0x10,%esp
f011e13a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e140:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e146:	89 c1                	mov    %eax,%ecx
f011e148:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e14f:	10 00 00 
f011e152:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e157:	0f b6 d0             	movzbl %al,%edx
f011e15a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e160:	01 d0                	add    %edx,%eax
f011e162:	48                   	dec    %eax
f011e163:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e169:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e16f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e174:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e17a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e180:	29 d0                	sub    %edx,%eax
f011e182:	89 c3                	mov    %eax,%ebx
f011e184:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e18b:	10 00 00 
f011e18e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e193:	0f b6 c0             	movzbl %al,%eax
f011e196:	c1 e0 04             	shl    $0x4,%eax
f011e199:	89 c2                	mov    %eax,%edx
f011e19b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e1a1:	01 d0                	add    %edx,%eax
f011e1a3:	48                   	dec    %eax
f011e1a4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e1aa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e1b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1b5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e1bb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e1c1:	29 d0                	sub    %edx,%eax
f011e1c3:	01 d8                	add    %ebx,%eax
f011e1c5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e1ca:	39 c1                	cmp    %eax,%ecx
f011e1cc:	74 17                	je     f011e1e5 <test_kmalloc_firstfit2+0x825>
f011e1ce:	83 ec 04             	sub    $0x4,%esp
f011e1d1:	68 ec 9e 13 f0       	push   $0xf0139eec
f011e1d6:	68 df 03 00 00       	push   $0x3df
f011e1db:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e1e0:	e8 cb 1f fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1e5:	e8 9a 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e1ea:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e1ed:	74 17                	je     f011e206 <test_kmalloc_firstfit2+0x846>
f011e1ef:	83 ec 04             	sub    $0x4,%esp
f011e1f2:	68 ec 9a 13 f0       	push   $0xf0139aec
f011e1f7:	68 e0 03 00 00       	push   $0x3e0
f011e1fc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e201:	e8 aa 1f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e206:	e8 57 e8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e20b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e20e:	29 c2                	sub    %eax,%edx
f011e210:	89 d0                	mov    %edx,%eax
f011e212:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e217:	74 17                	je     f011e230 <test_kmalloc_firstfit2+0x870>
f011e219:	83 ec 04             	sub    $0x4,%esp
f011e21c:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011e221:	68 e1 03 00 00       	push   $0x3e1
f011e226:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e22b:	e8 80 1f fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e230:	e8 2d e8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e235:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e238:	e8 47 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e23d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011e240:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e246:	83 ec 0c             	sub    $0xc,%esp
f011e249:	50                   	push   %eax
f011e24a:	e8 c3 9d fe ff       	call   f0108012 <kfree>
f011e24f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e252:	e8 2d 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e257:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e25a:	74 17                	je     f011e273 <test_kmalloc_firstfit2+0x8b3>
f011e25c:	83 ec 04             	sub    $0x4,%esp
f011e25f:	68 ec 9a 13 f0       	push   $0xf0139aec
f011e264:	68 e7 03 00 00       	push   $0x3e7
f011e269:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e26e:	e8 3d 1f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e273:	e8 ea e7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e278:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e27b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e280:	74 17                	je     f011e299 <test_kmalloc_firstfit2+0x8d9>
f011e282:	83 ec 04             	sub    $0x4,%esp
f011e285:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011e28a:	68 e8 03 00 00       	push   $0x3e8
f011e28f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e294:	e8 17 1f fe ff       	call   f01001b0 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e299:	e8 c4 e7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e29e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e2a1:	e8 de 63 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e2a6:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011e2a9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e2af:	83 ec 0c             	sub    $0xc,%esp
f011e2b2:	50                   	push   %eax
f011e2b3:	e8 5a 9d fe ff       	call   f0108012 <kfree>
f011e2b8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e2bb:	e8 a2 e7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e2c0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e2c3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e2c8:	74 17                	je     f011e2e1 <test_kmalloc_firstfit2+0x921>
f011e2ca:	83 ec 04             	sub    $0x4,%esp
f011e2cd:	68 2f 9f 13 f0       	push   $0xf0139f2f
f011e2d2:	68 ee 03 00 00       	push   $0x3ee
f011e2d7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e2dc:	e8 cf 1e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e2e1:	e8 9e 63 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e2e6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e2e9:	74 17                	je     f011e302 <test_kmalloc_firstfit2+0x942>
f011e2eb:	83 ec 04             	sub    $0x4,%esp
f011e2ee:	68 ec 9a 13 f0       	push   $0xf0139aec
f011e2f3:	68 ef 03 00 00       	push   $0x3ef
f011e2f8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e2fd:	e8 ae 1e fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e302:	e8 5b e7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e307:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e30a:	e8 75 63 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e30f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e312:	83 ec 0c             	sub    $0xc,%esp
f011e315:	68 00 fc 4f 00       	push   $0x4ffc00
f011e31a:	e8 d9 9c fe ff       	call   f0107ff8 <kmalloc>
f011e31f:	83 c4 10             	add    $0x10,%esp
f011e322:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e328:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e32e:	89 c1                	mov    %eax,%ecx
f011e330:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e337:	10 00 00 
f011e33a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e33f:	0f b6 d0             	movzbl %al,%edx
f011e342:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e348:	01 d0                	add    %edx,%eax
f011e34a:	48                   	dec    %eax
f011e34b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e351:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e357:	ba 00 00 00 00       	mov    $0x0,%edx
f011e35c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e362:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e368:	29 d0                	sub    %edx,%eax
f011e36a:	89 c3                	mov    %eax,%ebx
f011e36c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e373:	10 00 00 
f011e376:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e37b:	0f b6 c0             	movzbl %al,%eax
f011e37e:	c1 e0 04             	shl    $0x4,%eax
f011e381:	89 c2                	mov    %eax,%edx
f011e383:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e389:	01 d0                	add    %edx,%eax
f011e38b:	48                   	dec    %eax
f011e38c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e392:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e398:	ba 00 00 00 00       	mov    $0x0,%edx
f011e39d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e3a3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e3a9:	29 d0                	sub    %edx,%eax
f011e3ab:	01 d8                	add    %ebx,%eax
f011e3ad:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e3b2:	39 c1                	cmp    %eax,%ecx
f011e3b4:	74 17                	je     f011e3cd <test_kmalloc_firstfit2+0xa0d>
f011e3b6:	83 ec 04             	sub    $0x4,%esp
f011e3b9:	68 ec 9e 13 f0       	push   $0xf0139eec
f011e3be:	68 f5 03 00 00       	push   $0x3f5
f011e3c3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e3c8:	e8 e3 1d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3cd:	e8 b2 62 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e3d2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e3d5:	74 17                	je     f011e3ee <test_kmalloc_firstfit2+0xa2e>
f011e3d7:	83 ec 04             	sub    $0x4,%esp
f011e3da:	68 ec 9a 13 f0       	push   $0xf0139aec
f011e3df:	68 f6 03 00 00       	push   $0x3f6
f011e3e4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e3e9:	e8 c2 1d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e3ee:	e8 6f e6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e3f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e3f6:	29 c2                	sub    %eax,%edx
f011e3f8:	89 d0                	mov    %edx,%eax
f011e3fa:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e3ff:	74 17                	je     f011e418 <test_kmalloc_firstfit2+0xa58>
f011e401:	83 ec 04             	sub    $0x4,%esp
f011e404:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011e409:	68 f7 03 00 00       	push   $0x3f7
f011e40e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e413:	e8 98 1d fe ff       	call   f01001b0 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e418:	e8 45 e6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e41d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e420:	e8 5f 62 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e425:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e428:	83 ec 0c             	sub    $0xc,%esp
f011e42b:	68 00 fc 2f 00       	push   $0x2ffc00
f011e430:	e8 c3 9b fe ff       	call   f0107ff8 <kmalloc>
f011e435:	83 c4 10             	add    $0x10,%esp
f011e438:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e43e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e444:	89 c1                	mov    %eax,%ecx
f011e446:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e44d:	10 00 00 
f011e450:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e455:	0f b6 d0             	movzbl %al,%edx
f011e458:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e45e:	01 d0                	add    %edx,%eax
f011e460:	48                   	dec    %eax
f011e461:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e467:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e46d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e472:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e478:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e47e:	29 d0                	sub    %edx,%eax
f011e480:	89 c3                	mov    %eax,%ebx
f011e482:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e489:	10 00 00 
f011e48c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e491:	0f b6 c0             	movzbl %al,%eax
f011e494:	c1 e0 04             	shl    $0x4,%eax
f011e497:	89 c2                	mov    %eax,%edx
f011e499:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e49f:	01 d0                	add    %edx,%eax
f011e4a1:	48                   	dec    %eax
f011e4a2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e4a8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e4ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4b3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e4b9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e4bf:	29 d0                	sub    %edx,%eax
f011e4c1:	01 d8                	add    %ebx,%eax
f011e4c3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e4c8:	39 c1                	cmp    %eax,%ecx
f011e4ca:	74 17                	je     f011e4e3 <test_kmalloc_firstfit2+0xb23>
f011e4cc:	83 ec 04             	sub    $0x4,%esp
f011e4cf:	68 ec 9e 13 f0       	push   $0xf0139eec
f011e4d4:	68 05 04 00 00       	push   $0x405
f011e4d9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e4de:	e8 cd 1c fe ff       	call   f01001b0 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e4e3:	e8 9c 61 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e4e8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e4eb:	74 17                	je     f011e504 <test_kmalloc_firstfit2+0xb44>
f011e4ed:	83 ec 04             	sub    $0x4,%esp
f011e4f0:	68 ec 9a 13 f0       	push   $0xf0139aec
f011e4f5:	68 06 04 00 00       	push   $0x406
f011e4fa:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e4ff:	e8 ac 1c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e504:	e8 59 e5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e509:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e50c:	29 c2                	sub    %eax,%edx
f011e50e:	89 d0                	mov    %edx,%eax
f011e510:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e515:	74 17                	je     f011e52e <test_kmalloc_firstfit2+0xb6e>
f011e517:	83 ec 04             	sub    $0x4,%esp
f011e51a:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011e51f:	68 07 04 00 00       	push   $0x407
f011e524:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e529:	e8 82 1c fe ff       	call   f01001b0 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e52e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e535:	10 00 00 
f011e538:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e53d:	0f b6 d0             	movzbl %al,%edx
f011e540:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e546:	01 d0                	add    %edx,%eax
f011e548:	48                   	dec    %eax
f011e549:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e54f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e555:	ba 00 00 00 00       	mov    $0x0,%edx
f011e55a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e560:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e566:	29 d0                	sub    %edx,%eax
f011e568:	89 c1                	mov    %eax,%ecx
f011e56a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e571:	10 00 00 
f011e574:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e579:	0f b6 c0             	movzbl %al,%eax
f011e57c:	c1 e0 04             	shl    $0x4,%eax
f011e57f:	89 c2                	mov    %eax,%edx
f011e581:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e587:	01 d0                	add    %edx,%eax
f011e589:	48                   	dec    %eax
f011e58a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e590:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e596:	ba 00 00 00 00       	mov    $0x0,%edx
f011e59b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e5a1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e5a7:	29 d0                	sub    %edx,%eax
f011e5a9:	01 c8                	add    %ecx,%eax
f011e5ab:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e5b0:	29 c2                	sub    %eax,%edx
f011e5b2:	89 d0                	mov    %edx,%eax
f011e5b4:	83 ec 0c             	sub    $0xc,%esp
f011e5b7:	50                   	push   %eax
f011e5b8:	e8 3b 9a fe ff       	call   f0107ff8 <kmalloc>
f011e5bd:	83 c4 10             	add    $0x10,%esp
f011e5c0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e5c6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e5cc:	85 c0                	test   %eax,%eax
f011e5ce:	74 17                	je     f011e5e7 <test_kmalloc_firstfit2+0xc27>
f011e5d0:	83 ec 04             	sub    $0x4,%esp
f011e5d3:	68 1c a0 13 f0       	push   $0xf013a01c
f011e5d8:	68 0d 04 00 00       	push   $0x40d
f011e5dd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011e5e2:	e8 c9 1b fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e5e7:	83 ec 0c             	sub    $0xc,%esp
f011e5ea:	68 5c a1 13 f0       	push   $0xf013a15c
f011e5ef:	e8 3d 28 fe ff       	call   f0100e31 <cprintf>
f011e5f4:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e5f7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e5fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e5ff:	5b                   	pop    %ebx
f011e600:	5f                   	pop    %edi
f011e601:	5d                   	pop    %ebp
f011e602:	c3                   	ret    

f011e603 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e603:	55                   	push   %ebp
f011e604:	89 e5                	mov    %esp,%ebp
f011e606:	57                   	push   %edi
f011e607:	53                   	push   %ebx
f011e608:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f011e60e:	83 ec 0c             	sub    $0xc,%esp
f011e611:	68 14 9a 13 f0       	push   $0xf0139a14
f011e616:	e8 16 28 fe ff       	call   f0100e31 <cprintf>
f011e61b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e61e:	83 ec 0c             	sub    $0xc,%esp
f011e621:	68 44 9a 13 f0       	push   $0xf0139a44
f011e626:	e8 06 28 fe ff       	call   f0100e31 <cprintf>
f011e62b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e62e:	83 ec 0c             	sub    $0xc,%esp
f011e631:	68 14 9a 13 f0       	push   $0xf0139a14
f011e636:	e8 f6 27 fe ff       	call   f0100e31 <cprintf>
f011e63b:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e63e:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f011e644:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e649:	b8 00 00 00 00       	mov    $0x0,%eax
f011e64e:	89 d7                	mov    %edx,%edi
f011e650:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e652:	e8 0b e4 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011e657:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e65a:	e8 25 60 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e65f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e662:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e669:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e670:	eb 1f                	jmp    f011e691 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e672:	83 ec 0c             	sub    $0xc,%esp
f011e675:	68 00 00 20 00       	push   $0x200000
f011e67a:	e8 79 99 fe ff       	call   f0107ff8 <kmalloc>
f011e67f:	83 c4 10             	add    $0x10,%esp
f011e682:	89 c2                	mov    %eax,%edx
f011e684:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e687:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e68e:	ff 45 f4             	incl   -0xc(%ebp)
f011e691:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e695:	7e db                	jle    f011e672 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e697:	83 ec 0c             	sub    $0xc,%esp
f011e69a:	68 00 b0 1f 00       	push   $0x1fb000
f011e69f:	e8 54 99 fe ff       	call   f0107ff8 <kmalloc>
f011e6a4:	83 c4 10             	add    $0x10,%esp
f011e6a7:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e6ad:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e6b3:	89 c1                	mov    %eax,%ecx
f011e6b5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e6bc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e6c1:	0f b6 d0             	movzbl %al,%edx
f011e6c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e6c7:	01 d0                	add    %edx,%eax
f011e6c9:	48                   	dec    %eax
f011e6ca:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e6cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e6d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6d5:	f7 75 e4             	divl   -0x1c(%ebp)
f011e6d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e6db:	29 d0                	sub    %edx,%eax
f011e6dd:	89 c3                	mov    %eax,%ebx
f011e6df:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e6e6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e6eb:	0f b6 c0             	movzbl %al,%eax
f011e6ee:	c1 e0 04             	shl    $0x4,%eax
f011e6f1:	89 c2                	mov    %eax,%edx
f011e6f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e6f6:	01 d0                	add    %edx,%eax
f011e6f8:	48                   	dec    %eax
f011e6f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e6fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e6ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011e704:	f7 75 dc             	divl   -0x24(%ebp)
f011e707:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e70a:	29 d0                	sub    %edx,%eax
f011e70c:	01 d8                	add    %ebx,%eax
f011e70e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e713:	39 c1                	cmp    %eax,%ecx
f011e715:	0f 85 34 03 00 00    	jne    f011ea4f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e71b:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e721:	89 c1                	mov    %eax,%ecx
f011e723:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e72a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e72f:	0f b6 d0             	movzbl %al,%edx
f011e732:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e735:	01 d0                	add    %edx,%eax
f011e737:	48                   	dec    %eax
f011e738:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e73b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e73e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e743:	f7 75 d4             	divl   -0x2c(%ebp)
f011e746:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e749:	29 d0                	sub    %edx,%eax
f011e74b:	89 c3                	mov    %eax,%ebx
f011e74d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e754:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e759:	0f b6 c0             	movzbl %al,%eax
f011e75c:	c1 e0 04             	shl    $0x4,%eax
f011e75f:	89 c2                	mov    %eax,%edx
f011e761:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e764:	01 d0                	add    %edx,%eax
f011e766:	48                   	dec    %eax
f011e767:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e76a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e76d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e772:	f7 75 cc             	divl   -0x34(%ebp)
f011e775:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e778:	29 d0                	sub    %edx,%eax
f011e77a:	01 d8                	add    %ebx,%eax
f011e77c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e781:	39 c1                	cmp    %eax,%ecx
f011e783:	0f 85 c6 02 00 00    	jne    f011ea4f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e789:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011e78f:	89 c1                	mov    %eax,%ecx
f011e791:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e798:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e79d:	0f b6 d0             	movzbl %al,%edx
f011e7a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e7a3:	01 d0                	add    %edx,%eax
f011e7a5:	48                   	dec    %eax
f011e7a6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e7a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e7ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7b1:	f7 75 c4             	divl   -0x3c(%ebp)
f011e7b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e7b7:	29 d0                	sub    %edx,%eax
f011e7b9:	89 c3                	mov    %eax,%ebx
f011e7bb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e7c2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e7c7:	0f b6 c0             	movzbl %al,%eax
f011e7ca:	c1 e0 04             	shl    $0x4,%eax
f011e7cd:	89 c2                	mov    %eax,%edx
f011e7cf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e7d2:	01 d0                	add    %edx,%eax
f011e7d4:	48                   	dec    %eax
f011e7d5:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e7d8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e7db:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7e0:	f7 75 bc             	divl   -0x44(%ebp)
f011e7e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e7e6:	29 d0                	sub    %edx,%eax
f011e7e8:	01 d8                	add    %ebx,%eax
f011e7ea:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e7ef:	39 c1                	cmp    %eax,%ecx
f011e7f1:	0f 85 58 02 00 00    	jne    f011ea4f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e7f7:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e7fd:	89 c1                	mov    %eax,%ecx
f011e7ff:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e806:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e80b:	0f b6 d0             	movzbl %al,%edx
f011e80e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e811:	01 d0                	add    %edx,%eax
f011e813:	48                   	dec    %eax
f011e814:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e817:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e81a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e81f:	f7 75 b4             	divl   -0x4c(%ebp)
f011e822:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e825:	29 d0                	sub    %edx,%eax
f011e827:	89 c3                	mov    %eax,%ebx
f011e829:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e830:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e835:	0f b6 c0             	movzbl %al,%eax
f011e838:	c1 e0 04             	shl    $0x4,%eax
f011e83b:	89 c2                	mov    %eax,%edx
f011e83d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e840:	01 d0                	add    %edx,%eax
f011e842:	48                   	dec    %eax
f011e843:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e846:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e849:	ba 00 00 00 00       	mov    $0x0,%edx
f011e84e:	f7 75 ac             	divl   -0x54(%ebp)
f011e851:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e854:	29 d0                	sub    %edx,%eax
f011e856:	01 d8                	add    %ebx,%eax
f011e858:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e85d:	39 c1                	cmp    %eax,%ecx
f011e85f:	0f 85 ea 01 00 00    	jne    f011ea4f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e865:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f011e86b:	89 c1                	mov    %eax,%ecx
f011e86d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e874:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e879:	0f b6 d0             	movzbl %al,%edx
f011e87c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e87f:	01 d0                	add    %edx,%eax
f011e881:	48                   	dec    %eax
f011e882:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e885:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e888:	ba 00 00 00 00       	mov    $0x0,%edx
f011e88d:	f7 75 a4             	divl   -0x5c(%ebp)
f011e890:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e893:	29 d0                	sub    %edx,%eax
f011e895:	89 c3                	mov    %eax,%ebx
f011e897:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e89e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e8a3:	0f b6 c0             	movzbl %al,%eax
f011e8a6:	c1 e0 04             	shl    $0x4,%eax
f011e8a9:	89 c2                	mov    %eax,%edx
f011e8ab:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e8ae:	01 d0                	add    %edx,%eax
f011e8b0:	48                   	dec    %eax
f011e8b1:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e8b4:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e8b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8bc:	f7 75 9c             	divl   -0x64(%ebp)
f011e8bf:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e8c2:	29 d0                	sub    %edx,%eax
f011e8c4:	01 d8                	add    %ebx,%eax
f011e8c6:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e8cb:	39 c1                	cmp    %eax,%ecx
f011e8cd:	0f 85 7c 01 00 00    	jne    f011ea4f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e8d3:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011e8d9:	89 c1                	mov    %eax,%ecx
f011e8db:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e8e2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e8e7:	0f b6 d0             	movzbl %al,%edx
f011e8ea:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e8ed:	01 d0                	add    %edx,%eax
f011e8ef:	48                   	dec    %eax
f011e8f0:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e8f3:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e8f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8fb:	f7 75 94             	divl   -0x6c(%ebp)
f011e8fe:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e901:	29 d0                	sub    %edx,%eax
f011e903:	89 c3                	mov    %eax,%ebx
f011e905:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e90c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e911:	0f b6 c0             	movzbl %al,%eax
f011e914:	c1 e0 04             	shl    $0x4,%eax
f011e917:	89 c2                	mov    %eax,%edx
f011e919:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e91c:	01 d0                	add    %edx,%eax
f011e91e:	48                   	dec    %eax
f011e91f:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e922:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e925:	ba 00 00 00 00       	mov    $0x0,%edx
f011e92a:	f7 75 8c             	divl   -0x74(%ebp)
f011e92d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e930:	29 d0                	sub    %edx,%eax
f011e932:	01 d8                	add    %ebx,%eax
f011e934:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e939:	39 c1                	cmp    %eax,%ecx
f011e93b:	0f 85 0e 01 00 00    	jne    f011ea4f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e941:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f011e947:	89 c1                	mov    %eax,%ecx
f011e949:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e950:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e955:	0f b6 d0             	movzbl %al,%edx
f011e958:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e95b:	01 d0                	add    %edx,%eax
f011e95d:	48                   	dec    %eax
f011e95e:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e961:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e964:	ba 00 00 00 00       	mov    $0x0,%edx
f011e969:	f7 75 84             	divl   -0x7c(%ebp)
f011e96c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e96f:	29 d0                	sub    %edx,%eax
f011e971:	89 c3                	mov    %eax,%ebx
f011e973:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e97a:	10 00 00 
f011e97d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e982:	0f b6 c0             	movzbl %al,%eax
f011e985:	c1 e0 04             	shl    $0x4,%eax
f011e988:	89 c2                	mov    %eax,%edx
f011e98a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e990:	01 d0                	add    %edx,%eax
f011e992:	48                   	dec    %eax
f011e993:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e999:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e99f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9a4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e9aa:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e9b0:	29 d0                	sub    %edx,%eax
f011e9b2:	01 d8                	add    %ebx,%eax
f011e9b4:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e9b9:	39 c1                	cmp    %eax,%ecx
f011e9bb:	0f 85 8e 00 00 00    	jne    f011ea4f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e9c1:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011e9c7:	89 c1                	mov    %eax,%ecx
f011e9c9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e9d0:	10 00 00 
f011e9d3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e9d8:	0f b6 d0             	movzbl %al,%edx
f011e9db:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e9e1:	01 d0                	add    %edx,%eax
f011e9e3:	48                   	dec    %eax
f011e9e4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e9ea:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e9f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9f5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e9fb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ea01:	29 d0                	sub    %edx,%eax
f011ea03:	89 c3                	mov    %eax,%ebx
f011ea05:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ea0c:	10 00 00 
f011ea0f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ea14:	0f b6 c0             	movzbl %al,%eax
f011ea17:	c1 e0 04             	shl    $0x4,%eax
f011ea1a:	89 c2                	mov    %eax,%edx
f011ea1c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ea22:	01 d0                	add    %edx,%eax
f011ea24:	48                   	dec    %eax
f011ea25:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ea2b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ea31:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea36:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ea3c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ea42:	29 d0                	sub    %edx,%eax
f011ea44:	01 d8                	add    %ebx,%eax
f011ea46:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011ea4b:	39 c1                	cmp    %eax,%ecx
f011ea4d:	74 17                	je     f011ea66 <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011ea4f:	83 ec 04             	sub    $0x4,%esp
f011ea52:	68 a8 a1 13 f0       	push   $0xf013a1a8
f011ea57:	68 31 04 00 00       	push   $0x431
f011ea5c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ea61:	e8 4a 17 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea66:	e8 19 5c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ea6b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea6e:	74 17                	je     f011ea87 <test_kmalloc_worstfit+0x484>
f011ea70:	83 ec 04             	sub    $0x4,%esp
f011ea73:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ea78:	68 33 04 00 00       	push   $0x433
f011ea7d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ea82:	e8 29 17 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011ea87:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea8a:	e8 d3 df fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ea8f:	29 c3                	sub    %eax,%ebx
f011ea91:	89 d8                	mov    %ebx,%eax
f011ea93:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011ea98:	74 17                	je     f011eab1 <test_kmalloc_worstfit+0x4ae>
f011ea9a:	83 ec 04             	sub    $0x4,%esp
f011ea9d:	68 8f 9d 13 f0       	push   $0xf0139d8f
f011eaa2:	68 34 04 00 00       	push   $0x434
f011eaa7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011eaac:	e8 ff 16 fe ff       	call   f01001b0 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011eab1:	e8 ac df fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011eab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011eab9:	e8 c6 5b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011eabe:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011eac1:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011eac7:	83 ec 0c             	sub    $0xc,%esp
f011eaca:	50                   	push   %eax
f011eacb:	e8 42 95 fe ff       	call   f0108012 <kfree>
f011ead0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011ead3:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011ead9:	83 ec 0c             	sub    $0xc,%esp
f011eadc:	50                   	push   %eax
f011eadd:	e8 30 95 fe ff       	call   f0108012 <kfree>
f011eae2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011eae5:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011eaeb:	83 ec 0c             	sub    $0xc,%esp
f011eaee:	50                   	push   %eax
f011eaef:	e8 1e 95 fe ff       	call   f0108012 <kfree>
f011eaf4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011eaf7:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011eafd:	83 ec 0c             	sub    $0xc,%esp
f011eb00:	50                   	push   %eax
f011eb01:	e8 0c 95 fe ff       	call   f0108012 <kfree>
f011eb06:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011eb09:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f011eb0f:	83 ec 0c             	sub    $0xc,%esp
f011eb12:	50                   	push   %eax
f011eb13:	e8 fa 94 fe ff       	call   f0108012 <kfree>
f011eb18:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011eb1b:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f011eb21:	83 ec 0c             	sub    $0xc,%esp
f011eb24:	50                   	push   %eax
f011eb25:	e8 e8 94 fe ff       	call   f0108012 <kfree>
f011eb2a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011eb2d:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f011eb33:	83 ec 0c             	sub    $0xc,%esp
f011eb36:	50                   	push   %eax
f011eb37:	e8 d6 94 fe ff       	call   f0108012 <kfree>
f011eb3c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011eb3f:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f011eb45:	83 ec 0c             	sub    $0xc,%esp
f011eb48:	50                   	push   %eax
f011eb49:	e8 c4 94 fe ff       	call   f0108012 <kfree>
f011eb4e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011eb51:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011eb57:	83 ec 0c             	sub    $0xc,%esp
f011eb5a:	50                   	push   %eax
f011eb5b:	e8 b2 94 fe ff       	call   f0108012 <kfree>
f011eb60:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011eb63:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f011eb69:	83 ec 0c             	sub    $0xc,%esp
f011eb6c:	50                   	push   %eax
f011eb6d:	e8 a0 94 fe ff       	call   f0108012 <kfree>
f011eb72:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011eb75:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011eb7b:	83 ec 0c             	sub    $0xc,%esp
f011eb7e:	50                   	push   %eax
f011eb7f:	e8 8e 94 fe ff       	call   f0108012 <kfree>
f011eb84:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011eb87:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011eb8d:	83 ec 0c             	sub    $0xc,%esp
f011eb90:	50                   	push   %eax
f011eb91:	e8 7c 94 fe ff       	call   f0108012 <kfree>
f011eb96:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011eb99:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011eb9f:	83 ec 0c             	sub    $0xc,%esp
f011eba2:	50                   	push   %eax
f011eba3:	e8 6a 94 fe ff       	call   f0108012 <kfree>
f011eba8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011ebab:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011ebb1:	83 ec 0c             	sub    $0xc,%esp
f011ebb4:	50                   	push   %eax
f011ebb5:	e8 58 94 fe ff       	call   f0108012 <kfree>
f011ebba:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011ebbd:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011ebc3:	83 ec 0c             	sub    $0xc,%esp
f011ebc6:	50                   	push   %eax
f011ebc7:	e8 46 94 fe ff       	call   f0108012 <kfree>
f011ebcc:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebcf:	e8 b0 5a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ebd4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ebd7:	74 17                	je     f011ebf0 <test_kmalloc_worstfit+0x5ed>
f011ebd9:	83 ec 04             	sub    $0x4,%esp
f011ebdc:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ebe1:	68 4a 04 00 00       	push   $0x44a
f011ebe6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ebeb:	e8 c0 15 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011ebf0:	e8 6d de fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ebf5:	89 c2                	mov    %eax,%edx
f011ebf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ebfa:	29 c2                	sub    %eax,%edx
f011ebfc:	89 d0                	mov    %edx,%eax
f011ebfe:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011ec03:	74 17                	je     f011ec1c <test_kmalloc_worstfit+0x619>
f011ec05:	83 ec 04             	sub    $0x4,%esp
f011ec08:	68 a0 9d 13 f0       	push   $0xf0139da0
f011ec0d:	68 4b 04 00 00       	push   $0x44b
f011ec12:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ec17:	e8 94 15 fe ff       	call   f01001b0 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011ec1c:	e8 41 de fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ec21:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec24:	e8 5b 5a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ec29:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011ec2c:	83 ec 0c             	sub    $0xc,%esp
f011ec2f:	68 00 00 10 00       	push   $0x100000
f011ec34:	e8 bf 93 fe ff       	call   f0107ff8 <kmalloc>
f011ec39:	83 c4 10             	add    $0x10,%esp
f011ec3c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011ec42:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011ec49:	10 00 00 
f011ec4c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ec51:	0f b6 d0             	movzbl %al,%edx
f011ec54:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ec5a:	01 d0                	add    %edx,%eax
f011ec5c:	48                   	dec    %eax
f011ec5d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011ec63:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ec69:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec6e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011ec74:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ec7a:	29 d0                	sub    %edx,%eax
f011ec7c:	89 c1                	mov    %eax,%ecx
f011ec7e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011ec85:	10 00 00 
f011ec88:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ec8d:	0f b6 c0             	movzbl %al,%eax
f011ec90:	c1 e0 04             	shl    $0x4,%eax
f011ec93:	89 c2                	mov    %eax,%edx
f011ec95:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ec9b:	01 d0                	add    %edx,%eax
f011ec9d:	48                   	dec    %eax
f011ec9e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011eca4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ecaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecaf:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011ecb5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ecbb:	29 d0                	sub    %edx,%eax
f011ecbd:	01 c8                	add    %ecx,%eax
f011ecbf:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ecc5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eccb:	39 c2                	cmp    %eax,%edx
f011eccd:	74 17                	je     f011ece6 <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011eccf:	83 ec 04             	sub    $0x4,%esp
f011ecd2:	68 ec a1 13 f0       	push   $0xf013a1ec
f011ecd7:	68 52 04 00 00       	push   $0x452
f011ecdc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ece1:	e8 ca 14 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ece6:	e8 99 59 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011eceb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ecee:	74 17                	je     f011ed07 <test_kmalloc_worstfit+0x704>
f011ecf0:	83 ec 04             	sub    $0x4,%esp
f011ecf3:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ecf8:	68 53 04 00 00       	push   $0x453
f011ecfd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ed02:	e8 a9 14 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ed07:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed0a:	e8 53 dd fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ed0f:	29 c3                	sub    %eax,%ebx
f011ed11:	89 d8                	mov    %ebx,%eax
f011ed13:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ed18:	74 17                	je     f011ed31 <test_kmalloc_worstfit+0x72e>
f011ed1a:	83 ec 04             	sub    $0x4,%esp
f011ed1d:	68 0a a0 13 f0       	push   $0xf013a00a
f011ed22:	68 54 04 00 00       	push   $0x454
f011ed27:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ed2c:	e8 7f 14 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ed31:	ff 45 e8             	incl   -0x18(%ebp)
f011ed34:	83 ec 08             	sub    $0x8,%esp
f011ed37:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed3a:	68 0c a2 13 f0       	push   $0xf013a20c
f011ed3f:	e8 ed 20 fe ff       	call   f0100e31 <cprintf>
f011ed44:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ed47:	e8 16 dd fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ed4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ed4f:	e8 30 59 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ed54:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011ed57:	83 ec 0c             	sub    $0xc,%esp
f011ed5a:	68 00 00 40 00       	push   $0x400000
f011ed5f:	e8 94 92 fe ff       	call   f0107ff8 <kmalloc>
f011ed64:	83 c4 10             	add    $0x10,%esp
f011ed67:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011ed6d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011ed74:	10 00 00 
f011ed77:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ed7c:	0f b6 d0             	movzbl %al,%edx
f011ed7f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ed85:	01 d0                	add    %edx,%eax
f011ed87:	48                   	dec    %eax
f011ed88:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011ed8e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ed94:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed99:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011ed9f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eda5:	29 d0                	sub    %edx,%eax
f011eda7:	89 c1                	mov    %eax,%ecx
f011eda9:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011edb0:	10 00 00 
f011edb3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011edb8:	0f b6 c0             	movzbl %al,%eax
f011edbb:	c1 e0 04             	shl    $0x4,%eax
f011edbe:	89 c2                	mov    %eax,%edx
f011edc0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011edc6:	01 d0                	add    %edx,%eax
f011edc8:	48                   	dec    %eax
f011edc9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011edcf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011edd5:	ba 00 00 00 00       	mov    $0x0,%edx
f011edda:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011ede0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ede6:	29 d0                	sub    %edx,%eax
f011ede8:	01 c8                	add    %ecx,%eax
f011edea:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011edf0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011edf6:	39 c2                	cmp    %eax,%edx
f011edf8:	74 17                	je     f011ee11 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011edfa:	83 ec 04             	sub    $0x4,%esp
f011edfd:	68 ec a1 13 f0       	push   $0xf013a1ec
f011ee02:	68 5b 04 00 00       	push   $0x45b
f011ee07:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ee0c:	e8 9f 13 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee11:	e8 6e 58 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ee16:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee19:	74 17                	je     f011ee32 <test_kmalloc_worstfit+0x82f>
f011ee1b:	83 ec 04             	sub    $0x4,%esp
f011ee1e:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ee23:	68 5c 04 00 00       	push   $0x45c
f011ee28:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ee2d:	e8 7e 13 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ee32:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ee35:	e8 28 dc fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ee3a:	29 c3                	sub    %eax,%ebx
f011ee3c:	89 d8                	mov    %ebx,%eax
f011ee3e:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ee43:	74 17                	je     f011ee5c <test_kmalloc_worstfit+0x859>
f011ee45:	83 ec 04             	sub    $0x4,%esp
f011ee48:	68 0a a0 13 f0       	push   $0xf013a00a
f011ee4d:	68 5d 04 00 00       	push   $0x45d
f011ee52:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ee57:	e8 54 13 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ee5c:	ff 45 e8             	incl   -0x18(%ebp)
f011ee5f:	83 ec 08             	sub    $0x8,%esp
f011ee62:	ff 75 e8             	pushl  -0x18(%ebp)
f011ee65:	68 0c a2 13 f0       	push   $0xf013a20c
f011ee6a:	e8 c2 1f fe ff       	call   f0100e31 <cprintf>
f011ee6f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ee72:	e8 eb db fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ee77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ee7a:	e8 05 58 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ee7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011ee82:	83 ec 0c             	sub    $0xc,%esp
f011ee85:	68 00 00 60 00       	push   $0x600000
f011ee8a:	e8 69 91 fe ff       	call   f0107ff8 <kmalloc>
f011ee8f:	83 c4 10             	add    $0x10,%esp
f011ee92:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ee98:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011ee9f:	10 00 00 
f011eea2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011eea7:	0f b6 d0             	movzbl %al,%edx
f011eeaa:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011eeb0:	01 d0                	add    %edx,%eax
f011eeb2:	48                   	dec    %eax
f011eeb3:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011eeb9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011eebf:	ba 00 00 00 00       	mov    $0x0,%edx
f011eec4:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011eeca:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011eed0:	29 d0                	sub    %edx,%eax
f011eed2:	89 c1                	mov    %eax,%ecx
f011eed4:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011eedb:	10 00 00 
f011eede:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011eee3:	0f b6 c0             	movzbl %al,%eax
f011eee6:	c1 e0 04             	shl    $0x4,%eax
f011eee9:	89 c2                	mov    %eax,%edx
f011eeeb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011eef1:	01 d0                	add    %edx,%eax
f011eef3:	48                   	dec    %eax
f011eef4:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011eefa:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ef00:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef05:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011ef0b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ef11:	29 d0                	sub    %edx,%eax
f011ef13:	01 c8                	add    %ecx,%eax
f011ef15:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ef1b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ef21:	39 c2                	cmp    %eax,%edx
f011ef23:	74 17                	je     f011ef3c <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f011ef25:	83 ec 04             	sub    $0x4,%esp
f011ef28:	68 ec a1 13 f0       	push   $0xf013a1ec
f011ef2d:	68 64 04 00 00       	push   $0x464
f011ef32:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ef37:	e8 74 12 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ef3c:	e8 43 57 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ef41:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ef44:	74 17                	je     f011ef5d <test_kmalloc_worstfit+0x95a>
f011ef46:	83 ec 04             	sub    $0x4,%esp
f011ef49:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ef4e:	68 65 04 00 00       	push   $0x465
f011ef53:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ef58:	e8 53 12 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ef5d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ef60:	e8 fd da fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ef65:	29 c3                	sub    %eax,%ebx
f011ef67:	89 d8                	mov    %ebx,%eax
f011ef69:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ef6e:	74 17                	je     f011ef87 <test_kmalloc_worstfit+0x984>
f011ef70:	83 ec 04             	sub    $0x4,%esp
f011ef73:	68 0a a0 13 f0       	push   $0xf013a00a
f011ef78:	68 66 04 00 00       	push   $0x466
f011ef7d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ef82:	e8 29 12 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ef87:	ff 45 e8             	incl   -0x18(%ebp)
f011ef8a:	83 ec 08             	sub    $0x8,%esp
f011ef8d:	ff 75 e8             	pushl  -0x18(%ebp)
f011ef90:	68 0c a2 13 f0       	push   $0xf013a20c
f011ef95:	e8 97 1e fe ff       	call   f0100e31 <cprintf>
f011ef9a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef9d:	e8 c0 da fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011efa2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011efa5:	e8 da 56 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011efaa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011efad:	83 ec 0c             	sub    $0xc,%esp
f011efb0:	68 00 00 50 00       	push   $0x500000
f011efb5:	e8 3e 90 fe ff       	call   f0107ff8 <kmalloc>
f011efba:	83 c4 10             	add    $0x10,%esp
f011efbd:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011efc3:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011efca:	10 00 00 
f011efcd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011efd2:	0f b6 d0             	movzbl %al,%edx
f011efd5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011efdb:	01 d0                	add    %edx,%eax
f011efdd:	48                   	dec    %eax
f011efde:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011efe4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011efea:	ba 00 00 00 00       	mov    $0x0,%edx
f011efef:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011eff5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011effb:	29 d0                	sub    %edx,%eax
f011effd:	89 c1                	mov    %eax,%ecx
f011efff:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011f006:	10 00 00 
f011f009:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f00e:	0f b6 c0             	movzbl %al,%eax
f011f011:	c1 e0 04             	shl    $0x4,%eax
f011f014:	89 c2                	mov    %eax,%edx
f011f016:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f01c:	01 d0                	add    %edx,%eax
f011f01e:	48                   	dec    %eax
f011f01f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011f025:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f02b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f030:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011f036:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f03c:	29 d0                	sub    %edx,%eax
f011f03e:	01 c8                	add    %ecx,%eax
f011f040:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f046:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f04c:	39 c2                	cmp    %eax,%edx
f011f04e:	74 17                	je     f011f067 <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f011f050:	83 ec 04             	sub    $0x4,%esp
f011f053:	68 ec a1 13 f0       	push   $0xf013a1ec
f011f058:	68 6d 04 00 00       	push   $0x46d
f011f05d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f062:	e8 49 11 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f067:	e8 18 56 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f06c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f06f:	74 17                	je     f011f088 <test_kmalloc_worstfit+0xa85>
f011f071:	83 ec 04             	sub    $0x4,%esp
f011f074:	68 ec 9a 13 f0       	push   $0xf0139aec
f011f079:	68 6e 04 00 00       	push   $0x46e
f011f07e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f083:	e8 28 11 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f088:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f08b:	e8 d2 d9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f090:	29 c3                	sub    %eax,%ebx
f011f092:	89 d8                	mov    %ebx,%eax
f011f094:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f099:	74 17                	je     f011f0b2 <test_kmalloc_worstfit+0xaaf>
f011f09b:	83 ec 04             	sub    $0x4,%esp
f011f09e:	68 0a a0 13 f0       	push   $0xf013a00a
f011f0a3:	68 6f 04 00 00       	push   $0x46f
f011f0a8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f0ad:	e8 fe 10 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f0b2:	ff 45 e8             	incl   -0x18(%ebp)
f011f0b5:	83 ec 08             	sub    $0x8,%esp
f011f0b8:	ff 75 e8             	pushl  -0x18(%ebp)
f011f0bb:	68 0c a2 13 f0       	push   $0xf013a20c
f011f0c0:	e8 6c 1d fe ff       	call   f0100e31 <cprintf>
f011f0c5:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f0c8:	e8 95 d9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f0cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f0d0:	e8 af 55 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f0d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f0d8:	83 ec 0c             	sub    $0xc,%esp
f011f0db:	68 00 00 40 00       	push   $0x400000
f011f0e0:	e8 13 8f fe ff       	call   f0107ff8 <kmalloc>
f011f0e5:	83 c4 10             	add    $0x10,%esp
f011f0e8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f0ee:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f0f5:	10 00 00 
f011f0f8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f0fd:	0f b6 d0             	movzbl %al,%edx
f011f100:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f106:	01 d0                	add    %edx,%eax
f011f108:	48                   	dec    %eax
f011f109:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f10f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f115:	ba 00 00 00 00       	mov    $0x0,%edx
f011f11a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f120:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f126:	29 d0                	sub    %edx,%eax
f011f128:	89 c1                	mov    %eax,%ecx
f011f12a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f131:	10 00 00 
f011f134:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f139:	0f b6 c0             	movzbl %al,%eax
f011f13c:	c1 e0 04             	shl    $0x4,%eax
f011f13f:	89 c2                	mov    %eax,%edx
f011f141:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f147:	01 d0                	add    %edx,%eax
f011f149:	48                   	dec    %eax
f011f14a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f150:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f156:	ba 00 00 00 00       	mov    $0x0,%edx
f011f15b:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f161:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f167:	29 d0                	sub    %edx,%eax
f011f169:	01 c8                	add    %ecx,%eax
f011f16b:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f171:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f177:	39 c2                	cmp    %eax,%edx
f011f179:	74 17                	je     f011f192 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011f17b:	83 ec 04             	sub    $0x4,%esp
f011f17e:	68 ec a1 13 f0       	push   $0xf013a1ec
f011f183:	68 76 04 00 00       	push   $0x476
f011f188:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f18d:	e8 1e 10 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f192:	e8 ed 54 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f197:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f19a:	74 17                	je     f011f1b3 <test_kmalloc_worstfit+0xbb0>
f011f19c:	83 ec 04             	sub    $0x4,%esp
f011f19f:	68 ec 9a 13 f0       	push   $0xf0139aec
f011f1a4:	68 77 04 00 00       	push   $0x477
f011f1a9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f1ae:	e8 fd 0f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f1b3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f1b6:	e8 a7 d8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f1bb:	29 c3                	sub    %eax,%ebx
f011f1bd:	89 d8                	mov    %ebx,%eax
f011f1bf:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f1c4:	74 17                	je     f011f1dd <test_kmalloc_worstfit+0xbda>
f011f1c6:	83 ec 04             	sub    $0x4,%esp
f011f1c9:	68 0a a0 13 f0       	push   $0xf013a00a
f011f1ce:	68 78 04 00 00       	push   $0x478
f011f1d3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f1d8:	e8 d3 0f fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f1dd:	ff 45 e8             	incl   -0x18(%ebp)
f011f1e0:	83 ec 08             	sub    $0x8,%esp
f011f1e3:	ff 75 e8             	pushl  -0x18(%ebp)
f011f1e6:	68 0c a2 13 f0       	push   $0xf013a20c
f011f1eb:	e8 41 1c fe ff       	call   f0100e31 <cprintf>
f011f1f0:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f1f3:	e8 6a d8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f1f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1fb:	e8 84 54 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f200:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f203:	83 ec 0c             	sub    $0xc,%esp
f011f206:	68 00 00 20 00       	push   $0x200000
f011f20b:	e8 e8 8d fe ff       	call   f0107ff8 <kmalloc>
f011f210:	83 c4 10             	add    $0x10,%esp
f011f213:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f219:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f220:	10 00 00 
f011f223:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f228:	0f b6 d0             	movzbl %al,%edx
f011f22b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f231:	01 d0                	add    %edx,%eax
f011f233:	48                   	dec    %eax
f011f234:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f23a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f240:	ba 00 00 00 00       	mov    $0x0,%edx
f011f245:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f24b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f251:	29 d0                	sub    %edx,%eax
f011f253:	89 c1                	mov    %eax,%ecx
f011f255:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f25c:	10 00 00 
f011f25f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f264:	0f b6 c0             	movzbl %al,%eax
f011f267:	c1 e0 04             	shl    $0x4,%eax
f011f26a:	89 c2                	mov    %eax,%edx
f011f26c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f272:	01 d0                	add    %edx,%eax
f011f274:	48                   	dec    %eax
f011f275:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f27b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f281:	ba 00 00 00 00       	mov    $0x0,%edx
f011f286:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f28c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f292:	29 d0                	sub    %edx,%eax
f011f294:	01 c8                	add    %ecx,%eax
f011f296:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f29c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f2a2:	39 c2                	cmp    %eax,%edx
f011f2a4:	74 17                	je     f011f2bd <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f011f2a6:	83 ec 04             	sub    $0x4,%esp
f011f2a9:	68 ec a1 13 f0       	push   $0xf013a1ec
f011f2ae:	68 7f 04 00 00       	push   $0x47f
f011f2b3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f2b8:	e8 f3 0e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2bd:	e8 c2 53 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f2c2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f2c5:	74 17                	je     f011f2de <test_kmalloc_worstfit+0xcdb>
f011f2c7:	83 ec 04             	sub    $0x4,%esp
f011f2ca:	68 ec 9a 13 f0       	push   $0xf0139aec
f011f2cf:	68 80 04 00 00       	push   $0x480
f011f2d4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f2d9:	e8 d2 0e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f2de:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f2e1:	e8 7c d7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f2e6:	29 c3                	sub    %eax,%ebx
f011f2e8:	89 d8                	mov    %ebx,%eax
f011f2ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f2ef:	74 17                	je     f011f308 <test_kmalloc_worstfit+0xd05>
f011f2f1:	83 ec 04             	sub    $0x4,%esp
f011f2f4:	68 0a a0 13 f0       	push   $0xf013a00a
f011f2f9:	68 81 04 00 00       	push   $0x481
f011f2fe:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f303:	e8 a8 0e fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f308:	ff 45 e8             	incl   -0x18(%ebp)
f011f30b:	83 ec 08             	sub    $0x8,%esp
f011f30e:	ff 75 e8             	pushl  -0x18(%ebp)
f011f311:	68 0c a2 13 f0       	push   $0xf013a20c
f011f316:	e8 16 1b fe ff       	call   f0100e31 <cprintf>
f011f31b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f31e:	e8 3f d7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f323:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f326:	e8 59 53 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f32b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f32e:	83 ec 0c             	sub    $0xc,%esp
f011f331:	68 00 00 18 00       	push   $0x180000
f011f336:	e8 bd 8c fe ff       	call   f0107ff8 <kmalloc>
f011f33b:	83 c4 10             	add    $0x10,%esp
f011f33e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f344:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f34b:	10 00 00 
f011f34e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f353:	0f b6 d0             	movzbl %al,%edx
f011f356:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f35c:	01 d0                	add    %edx,%eax
f011f35e:	48                   	dec    %eax
f011f35f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f365:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f36b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f370:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f376:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f37c:	29 d0                	sub    %edx,%eax
f011f37e:	89 c1                	mov    %eax,%ecx
f011f380:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f387:	10 00 00 
f011f38a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f38f:	0f b6 c0             	movzbl %al,%eax
f011f392:	c1 e0 04             	shl    $0x4,%eax
f011f395:	89 c2                	mov    %eax,%edx
f011f397:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f39d:	01 d0                	add    %edx,%eax
f011f39f:	48                   	dec    %eax
f011f3a0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f3a6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f3ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3b1:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f3b7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f3bd:	29 d0                	sub    %edx,%eax
f011f3bf:	01 c8                	add    %ecx,%eax
f011f3c1:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f3c7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f3cd:	39 c2                	cmp    %eax,%edx
f011f3cf:	74 17                	je     f011f3e8 <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f011f3d1:	83 ec 04             	sub    $0x4,%esp
f011f3d4:	68 ec a1 13 f0       	push   $0xf013a1ec
f011f3d9:	68 88 04 00 00       	push   $0x488
f011f3de:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f3e3:	e8 c8 0d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3e8:	e8 97 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f3ed:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f3f0:	74 17                	je     f011f409 <test_kmalloc_worstfit+0xe06>
f011f3f2:	83 ec 04             	sub    $0x4,%esp
f011f3f5:	68 ec 9a 13 f0       	push   $0xf0139aec
f011f3fa:	68 89 04 00 00       	push   $0x489
f011f3ff:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f404:	e8 a7 0d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f409:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f40c:	e8 51 d6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f411:	29 c3                	sub    %eax,%ebx
f011f413:	89 d8                	mov    %ebx,%eax
f011f415:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f41a:	74 17                	je     f011f433 <test_kmalloc_worstfit+0xe30>
f011f41c:	83 ec 04             	sub    $0x4,%esp
f011f41f:	68 0a a0 13 f0       	push   $0xf013a00a
f011f424:	68 8a 04 00 00       	push   $0x48a
f011f429:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f42e:	e8 7d 0d fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f433:	ff 45 e8             	incl   -0x18(%ebp)
f011f436:	83 ec 08             	sub    $0x8,%esp
f011f439:	ff 75 e8             	pushl  -0x18(%ebp)
f011f43c:	68 0c a2 13 f0       	push   $0xf013a20c
f011f441:	e8 eb 19 fe ff       	call   f0100e31 <cprintf>
f011f446:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f449:	e8 14 d6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f44e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f451:	e8 2e 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f456:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f459:	83 ec 0c             	sub    $0xc,%esp
f011f45c:	68 00 00 08 00       	push   $0x80000
f011f461:	e8 92 8b fe ff       	call   f0107ff8 <kmalloc>
f011f466:	83 c4 10             	add    $0x10,%esp
f011f469:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f46f:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f476:	10 00 00 
f011f479:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f47e:	0f b6 d0             	movzbl %al,%edx
f011f481:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f487:	01 d0                	add    %edx,%eax
f011f489:	48                   	dec    %eax
f011f48a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f490:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f496:	ba 00 00 00 00       	mov    $0x0,%edx
f011f49b:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f4a1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f4a7:	29 d0                	sub    %edx,%eax
f011f4a9:	89 c1                	mov    %eax,%ecx
f011f4ab:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f4b2:	10 00 00 
f011f4b5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f4ba:	0f b6 c0             	movzbl %al,%eax
f011f4bd:	c1 e0 04             	shl    $0x4,%eax
f011f4c0:	89 c2                	mov    %eax,%edx
f011f4c2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f4c8:	01 d0                	add    %edx,%eax
f011f4ca:	48                   	dec    %eax
f011f4cb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f4d1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f4d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4dc:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f4e2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f4e8:	29 d0                	sub    %edx,%eax
f011f4ea:	01 c8                	add    %ecx,%eax
f011f4ec:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f4f2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f4f8:	39 c2                	cmp    %eax,%edx
f011f4fa:	74 17                	je     f011f513 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f011f4fc:	83 ec 04             	sub    $0x4,%esp
f011f4ff:	68 ec a1 13 f0       	push   $0xf013a1ec
f011f504:	68 91 04 00 00       	push   $0x491
f011f509:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f50e:	e8 9d 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f513:	e8 6c 51 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f518:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f51b:	74 17                	je     f011f534 <test_kmalloc_worstfit+0xf31>
f011f51d:	83 ec 04             	sub    $0x4,%esp
f011f520:	68 ec 9a 13 f0       	push   $0xf0139aec
f011f525:	68 92 04 00 00       	push   $0x492
f011f52a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f52f:	e8 7c 0c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f534:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f537:	e8 26 d5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f53c:	29 c3                	sub    %eax,%ebx
f011f53e:	89 d8                	mov    %ebx,%eax
f011f540:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f545:	74 17                	je     f011f55e <test_kmalloc_worstfit+0xf5b>
f011f547:	83 ec 04             	sub    $0x4,%esp
f011f54a:	68 0a a0 13 f0       	push   $0xf013a00a
f011f54f:	68 93 04 00 00       	push   $0x493
f011f554:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f559:	e8 52 0c fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f55e:	ff 45 e8             	incl   -0x18(%ebp)
f011f561:	83 ec 08             	sub    $0x8,%esp
f011f564:	ff 75 e8             	pushl  -0x18(%ebp)
f011f567:	68 0c a2 13 f0       	push   $0xf013a20c
f011f56c:	e8 c0 18 fe ff       	call   f0100e31 <cprintf>
f011f571:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f574:	e8 e9 d4 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f579:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f57c:	e8 03 51 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f581:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f584:	83 ec 0c             	sub    $0xc,%esp
f011f587:	68 00 04 00 00       	push   $0x400
f011f58c:	e8 67 8a fe ff       	call   f0107ff8 <kmalloc>
f011f591:	83 c4 10             	add    $0x10,%esp
f011f594:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f59a:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f5a1:	10 00 00 
f011f5a4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f5a9:	0f b6 d0             	movzbl %al,%edx
f011f5ac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f5b2:	01 d0                	add    %edx,%eax
f011f5b4:	48                   	dec    %eax
f011f5b5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f5bb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f5c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5c6:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f5cc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f5d2:	29 d0                	sub    %edx,%eax
f011f5d4:	89 c1                	mov    %eax,%ecx
f011f5d6:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f5dd:	10 00 00 
f011f5e0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f5e5:	0f b6 c0             	movzbl %al,%eax
f011f5e8:	c1 e0 04             	shl    $0x4,%eax
f011f5eb:	89 c2                	mov    %eax,%edx
f011f5ed:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f5f3:	01 d0                	add    %edx,%eax
f011f5f5:	48                   	dec    %eax
f011f5f6:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f5fc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f602:	ba 00 00 00 00       	mov    $0x0,%edx
f011f607:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f60d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f613:	29 d0                	sub    %edx,%eax
f011f615:	01 c8                	add    %ecx,%eax
f011f617:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f61d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f623:	39 c2                	cmp    %eax,%edx
f011f625:	74 17                	je     f011f63e <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f011f627:	83 ec 04             	sub    $0x4,%esp
f011f62a:	68 ec a1 13 f0       	push   $0xf013a1ec
f011f62f:	68 9a 04 00 00       	push   $0x49a
f011f634:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f639:	e8 72 0b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f63e:	e8 41 50 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f643:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f646:	74 17                	je     f011f65f <test_kmalloc_worstfit+0x105c>
f011f648:	83 ec 04             	sub    $0x4,%esp
f011f64b:	68 ec 9a 13 f0       	push   $0xf0139aec
f011f650:	68 9b 04 00 00       	push   $0x49b
f011f655:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f65a:	e8 51 0b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f65f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f662:	e8 fb d3 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f667:	29 c3                	sub    %eax,%ebx
f011f669:	89 d8                	mov    %ebx,%eax
f011f66b:	83 f8 01             	cmp    $0x1,%eax
f011f66e:	74 17                	je     f011f687 <test_kmalloc_worstfit+0x1084>
f011f670:	83 ec 04             	sub    $0x4,%esp
f011f673:	68 0a a0 13 f0       	push   $0xf013a00a
f011f678:	68 9c 04 00 00       	push   $0x49c
f011f67d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f682:	e8 29 0b fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f687:	ff 45 e8             	incl   -0x18(%ebp)
f011f68a:	83 ec 08             	sub    $0x8,%esp
f011f68d:	ff 75 e8             	pushl  -0x18(%ebp)
f011f690:	68 0c a2 13 f0       	push   $0xf013a20c
f011f695:	e8 97 17 fe ff       	call   f0100e31 <cprintf>
f011f69a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f69d:	e8 c0 d3 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f6a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f6a5:	e8 da 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f6aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f6ad:	83 ec 0c             	sub    $0xc,%esp
f011f6b0:	68 00 f0 1f 00       	push   $0x1ff000
f011f6b5:	e8 3e 89 fe ff       	call   f0107ff8 <kmalloc>
f011f6ba:	83 c4 10             	add    $0x10,%esp
f011f6bd:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f6c3:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f6ca:	10 00 00 
f011f6cd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f6d2:	0f b6 d0             	movzbl %al,%edx
f011f6d5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f6db:	01 d0                	add    %edx,%eax
f011f6dd:	48                   	dec    %eax
f011f6de:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f6e4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f6ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6ef:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f6f5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f6fb:	29 d0                	sub    %edx,%eax
f011f6fd:	89 c1                	mov    %eax,%ecx
f011f6ff:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f706:	10 00 00 
f011f709:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f70e:	0f b6 c0             	movzbl %al,%eax
f011f711:	c1 e0 04             	shl    $0x4,%eax
f011f714:	89 c2                	mov    %eax,%edx
f011f716:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f71c:	01 d0                	add    %edx,%eax
f011f71e:	48                   	dec    %eax
f011f71f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f725:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f72b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f730:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f736:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f73c:	29 d0                	sub    %edx,%eax
f011f73e:	01 c8                	add    %ecx,%eax
f011f740:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f746:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f74c:	39 c2                	cmp    %eax,%edx
f011f74e:	74 17                	je     f011f767 <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f011f750:	83 ec 04             	sub    $0x4,%esp
f011f753:	68 ec a1 13 f0       	push   $0xf013a1ec
f011f758:	68 a3 04 00 00       	push   $0x4a3
f011f75d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f762:	e8 49 0a fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f767:	e8 18 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f76c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f76f:	74 17                	je     f011f788 <test_kmalloc_worstfit+0x1185>
f011f771:	83 ec 04             	sub    $0x4,%esp
f011f774:	68 ec 9a 13 f0       	push   $0xf0139aec
f011f779:	68 a4 04 00 00       	push   $0x4a4
f011f77e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f783:	e8 28 0a fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f788:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f78b:	e8 d2 d2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f790:	29 c3                	sub    %eax,%ebx
f011f792:	89 d8                	mov    %ebx,%eax
f011f794:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f799:	74 17                	je     f011f7b2 <test_kmalloc_worstfit+0x11af>
f011f79b:	83 ec 04             	sub    $0x4,%esp
f011f79e:	68 0a a0 13 f0       	push   $0xf013a00a
f011f7a3:	68 a5 04 00 00       	push   $0x4a5
f011f7a8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f7ad:	e8 fe 09 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f7b2:	ff 45 e8             	incl   -0x18(%ebp)
f011f7b5:	83 ec 08             	sub    $0x8,%esp
f011f7b8:	ff 75 e8             	pushl  -0x18(%ebp)
f011f7bb:	68 0c a2 13 f0       	push   $0xf013a20c
f011f7c0:	e8 6c 16 fe ff       	call   f0100e31 <cprintf>
f011f7c5:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f7c8:	e8 95 d2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f7cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f7d0:	e8 af 4e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f7d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f7d8:	83 ec 0c             	sub    $0xc,%esp
f011f7db:	68 00 00 40 00       	push   $0x400000
f011f7e0:	e8 13 88 fe ff       	call   f0107ff8 <kmalloc>
f011f7e5:	83 c4 10             	add    $0x10,%esp
f011f7e8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f011f7ee:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f7f4:	85 c0                	test   %eax,%eax
f011f7f6:	74 17                	je     f011f80f <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011f7f8:	83 ec 04             	sub    $0x4,%esp
f011f7fb:	68 ec a1 13 f0       	push   $0xf013a1ec
f011f800:	68 ad 04 00 00       	push   $0x4ad
f011f805:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f80a:	e8 a1 09 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f80f:	e8 70 4e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f814:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f817:	74 17                	je     f011f830 <test_kmalloc_worstfit+0x122d>
f011f819:	83 ec 04             	sub    $0x4,%esp
f011f81c:	68 ec 9a 13 f0       	push   $0xf0139aec
f011f821:	68 ae 04 00 00       	push   $0x4ae
f011f826:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f82b:	e8 80 09 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f830:	e8 2d d2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f835:	89 c2                	mov    %eax,%edx
f011f837:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f83a:	39 c2                	cmp    %eax,%edx
f011f83c:	74 17                	je     f011f855 <test_kmalloc_worstfit+0x1252>
f011f83e:	83 ec 04             	sub    $0x4,%esp
f011f841:	68 0a a0 13 f0       	push   $0xf013a00a
f011f846:	68 af 04 00 00       	push   $0x4af
f011f84b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f850:	e8 5b 09 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f855:	ff 45 e8             	incl   -0x18(%ebp)
f011f858:	83 ec 08             	sub    $0x8,%esp
f011f85b:	ff 75 e8             	pushl  -0x18(%ebp)
f011f85e:	68 0c a2 13 f0       	push   $0xf013a20c
f011f863:	e8 c9 15 fe ff       	call   f0100e31 <cprintf>
f011f868:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f86b:	83 ec 0c             	sub    $0xc,%esp
f011f86e:	68 20 a2 13 f0       	push   $0xf013a220
f011f873:	e8 b9 15 fe ff       	call   f0100e31 <cprintf>
f011f878:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f87b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f880:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f883:	5b                   	pop    %ebx
f011f884:	5f                   	pop    %edi
f011f885:	5d                   	pop    %ebp
f011f886:	c3                   	ret    

f011f887 <test_kfree>:

int test_kfree()
{
f011f887:	55                   	push   %ebp
f011f888:	89 e5                	mov    %esp,%ebp
f011f88a:	57                   	push   %edi
f011f88b:	53                   	push   %ebx
f011f88c:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f011f892:	83 ec 0c             	sub    $0xc,%esp
f011f895:	68 14 9a 13 f0       	push   $0xf0139a14
f011f89a:	e8 92 15 fe ff       	call   f0100e31 <cprintf>
f011f89f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f8a2:	83 ec 0c             	sub    $0xc,%esp
f011f8a5:	68 44 9a 13 f0       	push   $0xf0139a44
f011f8aa:	e8 82 15 fe ff       	call   f0100e31 <cprintf>
f011f8af:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f8b2:	83 ec 0c             	sub    $0xc,%esp
f011f8b5:	68 14 9a 13 f0       	push   $0xf0139a14
f011f8ba:	e8 72 15 fe ff       	call   f0100e31 <cprintf>
f011f8bf:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f8c2:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f8c6:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f8ca:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f8d0:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f8d6:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f8dd:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f8e4:	e8 79 d1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f8e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f8ec:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011f8f2:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f8f7:	b8 00 00 00 00       	mov    $0x0,%eax
f011f8fc:	89 d7                	mov    %edx,%edi
f011f8fe:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f900:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011f906:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f90b:	b8 00 00 00 00       	mov    $0x0,%eax
f011f910:	89 d7                	mov    %edx,%edi
f011f912:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f914:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011f91a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f91f:	b8 00 00 00 00       	mov    $0x0,%eax
f011f924:	89 d7                	mov    %edx,%edi
f011f926:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f928:	e8 35 d1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f92d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f930:	e8 4f 4d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f935:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f938:	83 ec 0c             	sub    $0xc,%esp
f011f93b:	68 00 fc 1f 00       	push   $0x1ffc00
f011f940:	e8 b3 86 fe ff       	call   f0107ff8 <kmalloc>
f011f945:	83 c4 10             	add    $0x10,%esp
f011f948:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f94e:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011f954:	89 c1                	mov    %eax,%ecx
f011f956:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f95d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f962:	0f b6 d0             	movzbl %al,%edx
f011f965:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f968:	01 d0                	add    %edx,%eax
f011f96a:	48                   	dec    %eax
f011f96b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f96e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f971:	ba 00 00 00 00       	mov    $0x0,%edx
f011f976:	f7 75 c8             	divl   -0x38(%ebp)
f011f979:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f97c:	29 d0                	sub    %edx,%eax
f011f97e:	89 c3                	mov    %eax,%ebx
f011f980:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f987:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f98c:	0f b6 c0             	movzbl %al,%eax
f011f98f:	c1 e0 04             	shl    $0x4,%eax
f011f992:	89 c2                	mov    %eax,%edx
f011f994:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f997:	01 d0                	add    %edx,%eax
f011f999:	48                   	dec    %eax
f011f99a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f99d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f9a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9a5:	f7 75 c0             	divl   -0x40(%ebp)
f011f9a8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f9ab:	29 d0                	sub    %edx,%eax
f011f9ad:	01 d8                	add    %ebx,%eax
f011f9af:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f9b4:	39 c1                	cmp    %eax,%ecx
f011f9b6:	74 17                	je     f011f9cf <test_kfree+0x148>
f011f9b8:	83 ec 04             	sub    $0x4,%esp
f011f9bb:	68 b8 9b 13 f0       	push   $0xf0139bb8
f011f9c0:	68 d7 04 00 00       	push   $0x4d7
f011f9c5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f9ca:	e8 e1 07 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f9cf:	e8 b0 4c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f9d4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f9d7:	74 17                	je     f011f9f0 <test_kfree+0x169>
f011f9d9:	83 ec 04             	sub    $0x4,%esp
f011f9dc:	68 ec 9a 13 f0       	push   $0xf0139aec
f011f9e1:	68 d8 04 00 00       	push   $0x4d8
f011f9e6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011f9eb:	e8 c0 07 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f9f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f9f3:	e8 6a d0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011f9f8:	29 c3                	sub    %eax,%ebx
f011f9fa:	89 d8                	mov    %ebx,%eax
f011f9fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fa01:	74 17                	je     f011fa1a <test_kfree+0x193>
f011fa03:	83 ec 04             	sub    $0x4,%esp
f011fa06:	68 54 9b 13 f0       	push   $0xf0139b54
f011fa0b:	68 d9 04 00 00       	push   $0x4d9
f011fa10:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fa15:	e8 96 07 fe ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011fa1a:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011fa21:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fa24:	e8 39 d0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011fa29:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fa2c:	e8 53 4c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fa31:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011fa34:	83 ec 0c             	sub    $0xc,%esp
f011fa37:	68 00 fc 1f 00       	push   $0x1ffc00
f011fa3c:	e8 b7 85 fe ff       	call   f0107ff8 <kmalloc>
f011fa41:	83 c4 10             	add    $0x10,%esp
f011fa44:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fa4a:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011fa50:	89 c1                	mov    %eax,%ecx
f011fa52:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011fa59:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fa5e:	0f b6 d0             	movzbl %al,%edx
f011fa61:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011fa64:	01 d0                	add    %edx,%eax
f011fa66:	48                   	dec    %eax
f011fa67:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011fa6a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fa6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa72:	f7 75 b8             	divl   -0x48(%ebp)
f011fa75:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fa78:	29 d0                	sub    %edx,%eax
f011fa7a:	89 c3                	mov    %eax,%ebx
f011fa7c:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011fa83:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fa88:	0f b6 c0             	movzbl %al,%eax
f011fa8b:	c1 e0 04             	shl    $0x4,%eax
f011fa8e:	89 c2                	mov    %eax,%edx
f011fa90:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011fa93:	01 d0                	add    %edx,%eax
f011fa95:	48                   	dec    %eax
f011fa96:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011fa99:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fa9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011faa1:	f7 75 b0             	divl   -0x50(%ebp)
f011faa4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011faa7:	29 d0                	sub    %edx,%eax
f011faa9:	01 d8                	add    %ebx,%eax
f011faab:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011fab0:	39 c1                	cmp    %eax,%ecx
f011fab2:	74 17                	je     f011facb <test_kfree+0x244>
f011fab4:	83 ec 04             	sub    $0x4,%esp
f011fab7:	68 b8 9b 13 f0       	push   $0xf0139bb8
f011fabc:	68 e0 04 00 00       	push   $0x4e0
f011fac1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fac6:	e8 e5 06 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011facb:	e8 b4 4b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fad0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fad3:	74 17                	je     f011faec <test_kfree+0x265>
f011fad5:	83 ec 04             	sub    $0x4,%esp
f011fad8:	68 ec 9a 13 f0       	push   $0xf0139aec
f011fadd:	68 e1 04 00 00       	push   $0x4e1
f011fae2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fae7:	e8 c4 06 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011faec:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011faef:	e8 6e cf fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011faf4:	29 c3                	sub    %eax,%ebx
f011faf6:	89 d8                	mov    %ebx,%eax
f011faf8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fafd:	74 17                	je     f011fb16 <test_kfree+0x28f>
f011faff:	83 ec 04             	sub    $0x4,%esp
f011fb02:	68 54 9b 13 f0       	push   $0xf0139b54
f011fb07:	68 e2 04 00 00       	push   $0x4e2
f011fb0c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fb11:	e8 9a 06 fe ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011fb16:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011fb1d:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fb20:	e8 3d cf fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011fb25:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fb28:	e8 57 4b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fb2d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011fb30:	83 ec 0c             	sub    $0xc,%esp
f011fb33:	68 00 08 00 00       	push   $0x800
f011fb38:	e8 bb 84 fe ff       	call   f0107ff8 <kmalloc>
f011fb3d:	83 c4 10             	add    $0x10,%esp
f011fb40:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb46:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011fb4c:	89 c1                	mov    %eax,%ecx
f011fb4e:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011fb55:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fb5a:	0f b6 d0             	movzbl %al,%edx
f011fb5d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011fb60:	01 d0                	add    %edx,%eax
f011fb62:	48                   	dec    %eax
f011fb63:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011fb66:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fb69:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb6e:	f7 75 a8             	divl   -0x58(%ebp)
f011fb71:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fb74:	29 d0                	sub    %edx,%eax
f011fb76:	89 c3                	mov    %eax,%ebx
f011fb78:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011fb7f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fb84:	0f b6 c0             	movzbl %al,%eax
f011fb87:	c1 e0 04             	shl    $0x4,%eax
f011fb8a:	89 c2                	mov    %eax,%edx
f011fb8c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011fb8f:	01 d0                	add    %edx,%eax
f011fb91:	48                   	dec    %eax
f011fb92:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011fb95:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fb98:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb9d:	f7 75 a0             	divl   -0x60(%ebp)
f011fba0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fba3:	29 d0                	sub    %edx,%eax
f011fba5:	01 d8                	add    %ebx,%eax
f011fba7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011fbac:	39 c1                	cmp    %eax,%ecx
f011fbae:	74 17                	je     f011fbc7 <test_kfree+0x340>
f011fbb0:	83 ec 04             	sub    $0x4,%esp
f011fbb3:	68 b8 9b 13 f0       	push   $0xf0139bb8
f011fbb8:	68 e9 04 00 00       	push   $0x4e9
f011fbbd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fbc2:	e8 e9 05 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fbc7:	e8 b8 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fbcc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fbcf:	74 17                	je     f011fbe8 <test_kfree+0x361>
f011fbd1:	83 ec 04             	sub    $0x4,%esp
f011fbd4:	68 ec 9a 13 f0       	push   $0xf0139aec
f011fbd9:	68 ea 04 00 00       	push   $0x4ea
f011fbde:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fbe3:	e8 c8 05 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fbe8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fbeb:	e8 72 ce fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011fbf0:	29 c3                	sub    %eax,%ebx
f011fbf2:	89 d8                	mov    %ebx,%eax
f011fbf4:	83 f8 01             	cmp    $0x1,%eax
f011fbf7:	74 17                	je     f011fc10 <test_kfree+0x389>
f011fbf9:	83 ec 04             	sub    $0x4,%esp
f011fbfc:	68 54 9b 13 f0       	push   $0xf0139b54
f011fc01:	68 eb 04 00 00       	push   $0x4eb
f011fc06:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fc0b:	e8 a0 05 fe ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011fc10:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011fc17:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011fc1a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011fc20:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011fc23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fc2a:	eb 0e                	jmp    f011fc3a <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f011fc2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fc2f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fc32:	01 d0                	add    %edx,%eax
f011fc34:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011fc37:	ff 45 f4             	incl   -0xc(%ebp)
f011fc3a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011fc40:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc43:	7f e7                	jg     f011fc2c <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fc45:	e8 18 ce fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011fc4a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc4d:	e8 32 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fc52:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011fc55:	83 ec 0c             	sub    $0xc,%esp
f011fc58:	68 00 08 00 00       	push   $0x800
f011fc5d:	e8 96 83 fe ff       	call   f0107ff8 <kmalloc>
f011fc62:	83 c4 10             	add    $0x10,%esp
f011fc65:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc6b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fc71:	89 c1                	mov    %eax,%ecx
f011fc73:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011fc7a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fc7f:	0f b6 d0             	movzbl %al,%edx
f011fc82:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fc85:	01 d0                	add    %edx,%eax
f011fc87:	48                   	dec    %eax
f011fc88:	89 45 90             	mov    %eax,-0x70(%ebp)
f011fc8b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fc8e:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc93:	f7 75 94             	divl   -0x6c(%ebp)
f011fc96:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fc99:	29 d0                	sub    %edx,%eax
f011fc9b:	89 c3                	mov    %eax,%ebx
f011fc9d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011fca4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fca9:	0f b6 c0             	movzbl %al,%eax
f011fcac:	c1 e0 04             	shl    $0x4,%eax
f011fcaf:	89 c2                	mov    %eax,%edx
f011fcb1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fcb4:	01 d0                	add    %edx,%eax
f011fcb6:	48                   	dec    %eax
f011fcb7:	89 45 88             	mov    %eax,-0x78(%ebp)
f011fcba:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fcbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcc2:	f7 75 8c             	divl   -0x74(%ebp)
f011fcc5:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fcc8:	29 d0                	sub    %edx,%eax
f011fcca:	01 d8                	add    %ebx,%eax
f011fccc:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fcd1:	39 c1                	cmp    %eax,%ecx
f011fcd3:	74 17                	je     f011fcec <test_kfree+0x465>
f011fcd5:	83 ec 04             	sub    $0x4,%esp
f011fcd8:	68 b8 9b 13 f0       	push   $0xf0139bb8
f011fcdd:	68 f7 04 00 00       	push   $0x4f7
f011fce2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fce7:	e8 c4 04 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fcec:	e8 93 49 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fcf1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fcf4:	74 17                	je     f011fd0d <test_kfree+0x486>
f011fcf6:	83 ec 04             	sub    $0x4,%esp
f011fcf9:	68 ec 9a 13 f0       	push   $0xf0139aec
f011fcfe:	68 f8 04 00 00       	push   $0x4f8
f011fd03:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fd08:	e8 a3 04 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd0d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd10:	e8 4d cd fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011fd15:	29 c3                	sub    %eax,%ebx
f011fd17:	89 d8                	mov    %ebx,%eax
f011fd19:	83 f8 01             	cmp    $0x1,%eax
f011fd1c:	74 17                	je     f011fd35 <test_kfree+0x4ae>
f011fd1e:	83 ec 04             	sub    $0x4,%esp
f011fd21:	68 54 9b 13 f0       	push   $0xf0139b54
f011fd26:	68 f9 04 00 00       	push   $0x4f9
f011fd2b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fd30:	e8 7b 04 fe ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fd35:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f011fd3c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fd3f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fd45:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fd48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd4f:	eb 0e                	jmp    f011fd5f <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f011fd51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fd54:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fd57:	01 d0                	add    %edx,%eax
f011fd59:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fd5c:	ff 45 f4             	incl   -0xc(%ebp)
f011fd5f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fd65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd68:	7f e7                	jg     f011fd51 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fd6a:	e8 f3 cc fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011fd6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd72:	e8 0d 49 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fd77:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011fd7a:	83 ec 0c             	sub    $0xc,%esp
f011fd7d:	68 00 1c 00 00       	push   $0x1c00
f011fd82:	e8 71 82 fe ff       	call   f0107ff8 <kmalloc>
f011fd87:	83 c4 10             	add    $0x10,%esp
f011fd8a:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fd90:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fd96:	89 c1                	mov    %eax,%ecx
f011fd98:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011fd9f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fda4:	0f b6 d0             	movzbl %al,%edx
f011fda7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fdaa:	01 d0                	add    %edx,%eax
f011fdac:	48                   	dec    %eax
f011fdad:	89 45 80             	mov    %eax,-0x80(%ebp)
f011fdb0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fdb3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdb8:	f7 75 84             	divl   -0x7c(%ebp)
f011fdbb:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fdbe:	29 d0                	sub    %edx,%eax
f011fdc0:	89 c3                	mov    %eax,%ebx
f011fdc2:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fdc9:	10 00 00 
f011fdcc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fdd1:	0f b6 c0             	movzbl %al,%eax
f011fdd4:	c1 e0 04             	shl    $0x4,%eax
f011fdd7:	89 c2                	mov    %eax,%edx
f011fdd9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fddf:	01 d0                	add    %edx,%eax
f011fde1:	48                   	dec    %eax
f011fde2:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fde8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fdee:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdf3:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fdf9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fdff:	29 d0                	sub    %edx,%eax
f011fe01:	01 d8                	add    %ebx,%eax
f011fe03:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fe08:	39 c1                	cmp    %eax,%ecx
f011fe0a:	74 17                	je     f011fe23 <test_kfree+0x59c>
f011fe0c:	83 ec 04             	sub    $0x4,%esp
f011fe0f:	68 b8 9b 13 f0       	push   $0xf0139bb8
f011fe14:	68 05 05 00 00       	push   $0x505
f011fe19:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fe1e:	e8 8d 03 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe23:	e8 5c 48 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fe28:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fe2b:	74 17                	je     f011fe44 <test_kfree+0x5bd>
f011fe2d:	83 ec 04             	sub    $0x4,%esp
f011fe30:	68 ec 9a 13 f0       	push   $0xf0139aec
f011fe35:	68 06 05 00 00       	push   $0x506
f011fe3a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fe3f:	e8 6c 03 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fe44:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fe47:	e8 16 cc fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011fe4c:	29 c3                	sub    %eax,%ebx
f011fe4e:	89 d8                	mov    %ebx,%eax
f011fe50:	83 f8 02             	cmp    $0x2,%eax
f011fe53:	74 17                	je     f011fe6c <test_kfree+0x5e5>
f011fe55:	83 ec 04             	sub    $0x4,%esp
f011fe58:	68 54 9b 13 f0       	push   $0xf0139b54
f011fe5d:	68 07 05 00 00       	push   $0x507
f011fe62:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011fe67:	e8 44 03 fe ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011fe6c:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f011fe73:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011fe76:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fe7c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fe7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fe86:	eb 0e                	jmp    f011fe96 <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f011fe88:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fe8b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fe8e:	01 d0                	add    %edx,%eax
f011fe90:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fe93:	ff 45 f4             	incl   -0xc(%ebp)
f011fe96:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fe9c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fe9f:	7f e7                	jg     f011fe88 <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011fea1:	e8 bc cb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011fea6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fea9:	e8 d6 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011feae:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011feb1:	83 ec 0c             	sub    $0xc,%esp
f011feb4:	68 00 fc 2f 00       	push   $0x2ffc00
f011feb9:	e8 3a 81 fe ff       	call   f0107ff8 <kmalloc>
f011febe:	83 c4 10             	add    $0x10,%esp
f011fec1:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fec7:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fecd:	89 c1                	mov    %eax,%ecx
f011fecf:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fed6:	10 00 00 
f011fed9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fede:	0f b6 d0             	movzbl %al,%edx
f011fee1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fee7:	01 d0                	add    %edx,%eax
f011fee9:	48                   	dec    %eax
f011feea:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fef0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fef6:	ba 00 00 00 00       	mov    $0x0,%edx
f011fefb:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ff01:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ff07:	29 d0                	sub    %edx,%eax
f011ff09:	89 c3                	mov    %eax,%ebx
f011ff0b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ff12:	10 00 00 
f011ff15:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ff1a:	0f b6 c0             	movzbl %al,%eax
f011ff1d:	c1 e0 04             	shl    $0x4,%eax
f011ff20:	89 c2                	mov    %eax,%edx
f011ff22:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ff28:	01 d0                	add    %edx,%eax
f011ff2a:	48                   	dec    %eax
f011ff2b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ff31:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ff37:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff3c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ff42:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ff48:	29 d0                	sub    %edx,%eax
f011ff4a:	01 d8                	add    %ebx,%eax
f011ff4c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011ff51:	39 c1                	cmp    %eax,%ecx
f011ff53:	74 17                	je     f011ff6c <test_kfree+0x6e5>
f011ff55:	83 ec 04             	sub    $0x4,%esp
f011ff58:	68 b8 9b 13 f0       	push   $0xf0139bb8
f011ff5d:	68 13 05 00 00       	push   $0x513
f011ff62:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ff67:	e8 44 02 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff6c:	e8 13 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ff71:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ff74:	74 17                	je     f011ff8d <test_kfree+0x706>
f011ff76:	83 ec 04             	sub    $0x4,%esp
f011ff79:	68 ec 9a 13 f0       	push   $0xf0139aec
f011ff7e:	68 14 05 00 00       	push   $0x514
f011ff83:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ff88:	e8 23 02 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ff8d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff90:	e8 cd ca fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011ff95:	29 c3                	sub    %eax,%ebx
f011ff97:	89 d8                	mov    %ebx,%eax
f011ff99:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ff9e:	74 17                	je     f011ffb7 <test_kfree+0x730>
f011ffa0:	83 ec 04             	sub    $0x4,%esp
f011ffa3:	68 54 9b 13 f0       	push   $0xf0139b54
f011ffa8:	68 15 05 00 00       	push   $0x515
f011ffad:	68 d2 9a 13 f0       	push   $0xf0139ad2
f011ffb2:	e8 f9 01 fe ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011ffb7:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f011ffbe:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011ffc1:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011ffc7:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011ffca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ffd1:	eb 0e                	jmp    f011ffe1 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f011ffd3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ffd6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ffd9:	01 d0                	add    %edx,%eax
f011ffdb:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011ffde:	ff 45 f4             	incl   -0xc(%ebp)
f011ffe1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ffe7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ffea:	7f e7                	jg     f011ffd3 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ffec:	e8 71 ca fe ff       	call   f010ca62 <sys_calculate_free_frames>
f011fff1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fff4:	e8 8b 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fff9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011fffc:	83 ec 0c             	sub    $0xc,%esp
f011ffff:	68 00 fc 5f 00       	push   $0x5ffc00
f0120004:	e8 ef 7f fe ff       	call   f0107ff8 <kmalloc>
f0120009:	83 c4 10             	add    $0x10,%esp
f012000c:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120012:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0120018:	89 c1                	mov    %eax,%ecx
f012001a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0120021:	10 00 00 
f0120024:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120029:	0f b6 d0             	movzbl %al,%edx
f012002c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120032:	01 d0                	add    %edx,%eax
f0120034:	48                   	dec    %eax
f0120035:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012003b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120041:	ba 00 00 00 00       	mov    $0x0,%edx
f0120046:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012004c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120052:	29 d0                	sub    %edx,%eax
f0120054:	89 c3                	mov    %eax,%ebx
f0120056:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012005d:	10 00 00 
f0120060:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120065:	0f b6 c0             	movzbl %al,%eax
f0120068:	c1 e0 04             	shl    $0x4,%eax
f012006b:	89 c2                	mov    %eax,%edx
f012006d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0120073:	01 d0                	add    %edx,%eax
f0120075:	48                   	dec    %eax
f0120076:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012007c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120082:	ba 00 00 00 00       	mov    $0x0,%edx
f0120087:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012008d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120093:	29 d0                	sub    %edx,%eax
f0120095:	01 d8                	add    %ebx,%eax
f0120097:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012009c:	39 c1                	cmp    %eax,%ecx
f012009e:	74 17                	je     f01200b7 <test_kfree+0x830>
f01200a0:	83 ec 04             	sub    $0x4,%esp
f01200a3:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01200a8:	68 21 05 00 00       	push   $0x521
f01200ad:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01200b2:	e8 f9 00 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200b7:	e8 c8 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01200bc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01200bf:	74 17                	je     f01200d8 <test_kfree+0x851>
f01200c1:	83 ec 04             	sub    $0x4,%esp
f01200c4:	68 ec 9a 13 f0       	push   $0xf0139aec
f01200c9:	68 22 05 00 00       	push   $0x522
f01200ce:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01200d3:	e8 d8 00 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01200d8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01200db:	e8 82 c9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01200e0:	29 c3                	sub    %eax,%ebx
f01200e2:	89 d8                	mov    %ebx,%eax
f01200e4:	3d 00 06 00 00       	cmp    $0x600,%eax
f01200e9:	74 17                	je     f0120102 <test_kfree+0x87b>
f01200eb:	83 ec 04             	sub    $0x4,%esp
f01200ee:	68 54 9b 13 f0       	push   $0xf0139b54
f01200f3:	68 23 05 00 00       	push   $0x523
f01200f8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01200fd:	e8 ae 00 fe ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120102:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0120109:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012010c:	e8 51 c9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120111:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120114:	e8 6b 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120119:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012011c:	83 ec 0c             	sub    $0xc,%esp
f012011f:	68 00 38 00 00       	push   $0x3800
f0120124:	e8 cf 7e fe ff       	call   f0107ff8 <kmalloc>
f0120129:	83 c4 10             	add    $0x10,%esp
f012012c:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120132:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120138:	89 c1                	mov    %eax,%ecx
f012013a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0120141:	10 00 00 
f0120144:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120149:	0f b6 d0             	movzbl %al,%edx
f012014c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120152:	01 d0                	add    %edx,%eax
f0120154:	48                   	dec    %eax
f0120155:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012015b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120161:	ba 00 00 00 00       	mov    $0x0,%edx
f0120166:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012016c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120172:	29 d0                	sub    %edx,%eax
f0120174:	89 c3                	mov    %eax,%ebx
f0120176:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012017d:	10 00 00 
f0120180:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120185:	0f b6 c0             	movzbl %al,%eax
f0120188:	c1 e0 04             	shl    $0x4,%eax
f012018b:	89 c2                	mov    %eax,%edx
f012018d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120193:	01 d0                	add    %edx,%eax
f0120195:	48                   	dec    %eax
f0120196:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012019c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01201a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01201a7:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01201ad:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01201b3:	29 d0                	sub    %edx,%eax
f01201b5:	01 d8                	add    %ebx,%eax
f01201b7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01201bc:	39 c1                	cmp    %eax,%ecx
f01201be:	74 17                	je     f01201d7 <test_kfree+0x950>
f01201c0:	83 ec 04             	sub    $0x4,%esp
f01201c3:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01201c8:	68 2a 05 00 00       	push   $0x52a
f01201cd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01201d2:	e8 d9 ff fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201d7:	e8 a8 44 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01201dc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01201df:	74 17                	je     f01201f8 <test_kfree+0x971>
f01201e1:	83 ec 04             	sub    $0x4,%esp
f01201e4:	68 ec 9a 13 f0       	push   $0xf0139aec
f01201e9:	68 2b 05 00 00       	push   $0x52b
f01201ee:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01201f3:	e8 b8 ff fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01201f8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01201fb:	e8 62 c8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120200:	29 c3                	sub    %eax,%ebx
f0120202:	89 d8                	mov    %ebx,%eax
f0120204:	83 f8 04             	cmp    $0x4,%eax
f0120207:	74 17                	je     f0120220 <test_kfree+0x999>
f0120209:	83 ec 04             	sub    $0x4,%esp
f012020c:	68 54 9b 13 f0       	push   $0xf0139b54
f0120211:	68 2c 05 00 00       	push   $0x52c
f0120216:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012021b:	e8 90 ff fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120220:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0120227:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012022a:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120230:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120233:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012023a:	eb 0e                	jmp    f012024a <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f012023c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012023f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120242:	01 d0                	add    %edx,%eax
f0120244:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120247:	ff 45 f4             	incl   -0xc(%ebp)
f012024a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120250:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120253:	7f e7                	jg     f012023c <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120255:	e8 08 c8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012025a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120260:	e8 1f 44 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120265:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f012026b:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0120271:	83 ec 0c             	sub    $0xc,%esp
f0120274:	50                   	push   %eax
f0120275:	e8 98 7d fe ff       	call   f0108012 <kfree>
f012027a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012027d:	e8 02 44 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120282:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120288:	74 17                	je     f01202a1 <test_kfree+0xa1a>
f012028a:	83 ec 04             	sub    $0x4,%esp
f012028d:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120292:	68 3b 05 00 00       	push   $0x53b
f0120297:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012029c:	e8 0f ff fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01202a1:	e8 bc c7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01202a6:	89 c2                	mov    %eax,%edx
f01202a8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01202ae:	29 c2                	sub    %eax,%edx
f01202b0:	89 d0                	mov    %edx,%eax
f01202b2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01202b7:	74 17                	je     f01202d0 <test_kfree+0xa49>
f01202b9:	83 ec 04             	sub    $0x4,%esp
f01202bc:	68 5c a2 13 f0       	push   $0xf013a25c
f01202c1:	68 3c 05 00 00       	push   $0x53c
f01202c6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01202cb:	e8 e0 fe fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01202d0:	e8 8d c7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01202d5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01202db:	e8 a4 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01202e0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f01202e6:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01202ec:	83 ec 0c             	sub    $0xc,%esp
f01202ef:	50                   	push   %eax
f01202f0:	e8 1d 7d fe ff       	call   f0108012 <kfree>
f01202f5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01202f8:	e8 87 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01202fd:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120303:	74 17                	je     f012031c <test_kfree+0xa95>
f0120305:	83 ec 04             	sub    $0x4,%esp
f0120308:	68 ec 9a 13 f0       	push   $0xf0139aec
f012030d:	68 42 05 00 00       	push   $0x542
f0120312:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120317:	e8 94 fe fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012031c:	e8 41 c7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120321:	89 c2                	mov    %eax,%edx
f0120323:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120329:	29 c2                	sub    %eax,%edx
f012032b:	89 d0                	mov    %edx,%eax
f012032d:	83 f8 01             	cmp    $0x1,%eax
f0120330:	74 17                	je     f0120349 <test_kfree+0xac2>
f0120332:	83 ec 04             	sub    $0x4,%esp
f0120335:	68 5c a2 13 f0       	push   $0xf013a25c
f012033a:	68 43 05 00 00       	push   $0x543
f012033f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120344:	e8 67 fe fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120349:	e8 14 c7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012034e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120354:	e8 2b 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120359:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f012035f:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0120365:	83 ec 0c             	sub    $0xc,%esp
f0120368:	50                   	push   %eax
f0120369:	e8 a4 7c fe ff       	call   f0108012 <kfree>
f012036e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120371:	e8 0e 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120376:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012037c:	74 17                	je     f0120395 <test_kfree+0xb0e>
f012037e:	83 ec 04             	sub    $0x4,%esp
f0120381:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120386:	68 49 05 00 00       	push   $0x549
f012038b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120390:	e8 1b fe fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120395:	e8 c8 c6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012039a:	89 c2                	mov    %eax,%edx
f012039c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01203a2:	29 c2                	sub    %eax,%edx
f01203a4:	89 d0                	mov    %edx,%eax
f01203a6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01203ab:	74 17                	je     f01203c4 <test_kfree+0xb3d>
f01203ad:	83 ec 04             	sub    $0x4,%esp
f01203b0:	68 5c a2 13 f0       	push   $0xf013a25c
f01203b5:	68 4a 05 00 00       	push   $0x54a
f01203ba:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01203bf:	e8 ec fd fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01203c4:	e8 99 c6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01203c9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01203cf:	e8 b0 42 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01203d4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01203da:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01203e0:	83 ec 0c             	sub    $0xc,%esp
f01203e3:	50                   	push   %eax
f01203e4:	e8 29 7c fe ff       	call   f0108012 <kfree>
f01203e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203ec:	e8 93 42 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01203f1:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01203f7:	74 17                	je     f0120410 <test_kfree+0xb89>
f01203f9:	83 ec 04             	sub    $0x4,%esp
f01203fc:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120401:	68 50 05 00 00       	push   $0x550
f0120406:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012040b:	e8 a0 fd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120410:	e8 4d c6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120415:	89 c2                	mov    %eax,%edx
f0120417:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012041d:	29 c2                	sub    %eax,%edx
f012041f:	89 d0                	mov    %edx,%eax
f0120421:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120426:	74 17                	je     f012043f <test_kfree+0xbb8>
f0120428:	83 ec 04             	sub    $0x4,%esp
f012042b:	68 5c a2 13 f0       	push   $0xf013a25c
f0120430:	68 51 05 00 00       	push   $0x551
f0120435:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012043a:	e8 71 fd fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012043f:	83 ec 0c             	sub    $0xc,%esp
f0120442:	68 94 a2 13 f0       	push   $0xf013a294
f0120447:	e8 e5 09 fe ff       	call   f0100e31 <cprintf>
f012044c:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012044f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120455:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120458:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012045f:	eb 1e                	jmp    f012047f <test_kfree+0xbf8>
		{
			sums[3] += ptr[i] ;
f0120461:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0120467:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012046a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012046d:	01 c8                	add    %ecx,%eax
f012046f:	8a 00                	mov    (%eax),%al
f0120471:	0f be c0             	movsbl %al,%eax
f0120474:	01 d0                	add    %edx,%eax
f0120476:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012047c:	ff 45 f4             	incl   -0xc(%ebp)
f012047f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120485:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120488:	7f d7                	jg     f0120461 <test_kfree+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012048a:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0120490:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120496:	89 c1                	mov    %eax,%ecx
f0120498:	01 c9                	add    %ecx,%ecx
f012049a:	01 c8                	add    %ecx,%eax
f012049c:	39 c2                	cmp    %eax,%edx
f012049e:	74 17                	je     f01204b7 <test_kfree+0xc30>
f01204a0:	83 ec 04             	sub    $0x4,%esp
f01204a3:	68 b8 a2 13 f0       	push   $0xf013a2b8
f01204a8:	68 5e 05 00 00       	push   $0x55e
f01204ad:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01204b2:	e8 f9 fc fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01204b7:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01204bd:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01204c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01204c7:	eb 1e                	jmp    f01204e7 <test_kfree+0xc60>
		{
			sums[4] += ptr[i] ;
f01204c9:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01204cf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01204d2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01204d5:	01 c8                	add    %ecx,%eax
f01204d7:	8a 00                	mov    (%eax),%al
f01204d9:	0f be c0             	movsbl %al,%eax
f01204dc:	01 d0                	add    %edx,%eax
f01204de:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01204e4:	ff 45 f4             	incl   -0xc(%ebp)
f01204e7:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01204ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01204f0:	7f d7                	jg     f01204c9 <test_kfree+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01204f2:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01204f8:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01204fe:	c1 e2 02             	shl    $0x2,%edx
f0120501:	39 d0                	cmp    %edx,%eax
f0120503:	74 17                	je     f012051c <test_kfree+0xc95>
f0120505:	83 ec 04             	sub    $0x4,%esp
f0120508:	68 b8 a2 13 f0       	push   $0xf013a2b8
f012050d:	68 66 05 00 00       	push   $0x566
f0120512:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120517:	e8 94 fc fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012051c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120522:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120525:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012052c:	eb 1e                	jmp    f012054c <test_kfree+0xcc5>
		{
			sums[5] += ptr[i] ;
f012052e:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0120534:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120537:	8b 45 98             	mov    -0x68(%ebp),%eax
f012053a:	01 c8                	add    %ecx,%eax
f012053c:	8a 00                	mov    (%eax),%al
f012053e:	0f be c0             	movsbl %al,%eax
f0120541:	01 d0                	add    %edx,%eax
f0120543:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120549:	ff 45 f4             	incl   -0xc(%ebp)
f012054c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120552:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120555:	7f d7                	jg     f012052e <test_kfree+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0120557:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f012055d:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0120563:	89 d0                	mov    %edx,%eax
f0120565:	c1 e0 02             	shl    $0x2,%eax
f0120568:	01 d0                	add    %edx,%eax
f012056a:	39 c1                	cmp    %eax,%ecx
f012056c:	74 17                	je     f0120585 <test_kfree+0xcfe>
f012056e:	83 ec 04             	sub    $0x4,%esp
f0120571:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0120576:	68 6e 05 00 00       	push   $0x56e
f012057b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120580:	e8 2b fc fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120585:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012058b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012058e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120595:	eb 1e                	jmp    f01205b5 <test_kfree+0xd2e>
		{
			sums[7] += ptr[i] ;
f0120597:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f012059d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01205a0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01205a3:	01 c8                	add    %ecx,%eax
f01205a5:	8a 00                	mov    (%eax),%al
f01205a7:	0f be c0             	movsbl %al,%eax
f01205aa:	01 d0                	add    %edx,%eax
f01205ac:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01205b2:	ff 45 f4             	incl   -0xc(%ebp)
f01205b5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01205bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205be:	7f d7                	jg     f0120597 <test_kfree+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01205c0:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01205c6:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01205cc:	89 d0                	mov    %edx,%eax
f01205ce:	01 c0                	add    %eax,%eax
f01205d0:	01 d0                	add    %edx,%eax
f01205d2:	01 c0                	add    %eax,%eax
f01205d4:	01 d0                	add    %edx,%eax
f01205d6:	39 c1                	cmp    %eax,%ecx
f01205d8:	74 17                	je     f01205f1 <test_kfree+0xd6a>
f01205da:	83 ec 04             	sub    $0x4,%esp
f01205dd:	68 b8 a2 13 f0       	push   $0xf013a2b8
f01205e2:	68 76 05 00 00       	push   $0x576
f01205e7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01205ec:	e8 bf fb fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f01205f1:	83 ec 0c             	sub    $0xc,%esp
f01205f4:	68 eb a2 13 f0       	push   $0xf013a2eb
f01205f9:	e8 33 08 fe ff       	call   f0100e31 <cprintf>
f01205fe:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120601:	e8 5c c4 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120606:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120609:	e8 76 40 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012060e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120611:	83 ec 0c             	sub    $0xc,%esp
f0120614:	68 00 50 00 00       	push   $0x5000
f0120619:	e8 da 79 fe ff       	call   f0107ff8 <kmalloc>
f012061e:	83 c4 10             	add    $0x10,%esp
f0120621:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120627:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012062d:	89 c1                	mov    %eax,%ecx
f012062f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120636:	10 00 00 
f0120639:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012063e:	0f b6 d0             	movzbl %al,%edx
f0120641:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120647:	01 d0                	add    %edx,%eax
f0120649:	48                   	dec    %eax
f012064a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120650:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120656:	ba 00 00 00 00       	mov    $0x0,%edx
f012065b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120661:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120667:	29 d0                	sub    %edx,%eax
f0120669:	89 c3                	mov    %eax,%ebx
f012066b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120672:	10 00 00 
f0120675:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012067a:	0f b6 c0             	movzbl %al,%eax
f012067d:	c1 e0 04             	shl    $0x4,%eax
f0120680:	89 c2                	mov    %eax,%edx
f0120682:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120688:	01 d0                	add    %edx,%eax
f012068a:	48                   	dec    %eax
f012068b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120691:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120697:	ba 00 00 00 00       	mov    $0x0,%edx
f012069c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01206a2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01206a8:	29 d0                	sub    %edx,%eax
f01206aa:	01 d8                	add    %ebx,%eax
f01206ac:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01206b1:	39 c1                	cmp    %eax,%ecx
f01206b3:	74 17                	je     f01206cc <test_kfree+0xe45>
f01206b5:	83 ec 04             	sub    $0x4,%esp
f01206b8:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01206bd:	68 80 05 00 00       	push   $0x580
f01206c2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01206c7:	e8 e4 fa fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01206cc:	e8 b3 3f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01206d1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01206d4:	74 17                	je     f01206ed <test_kfree+0xe66>
f01206d6:	83 ec 04             	sub    $0x4,%esp
f01206d9:	68 ec 9a 13 f0       	push   $0xf0139aec
f01206de:	68 81 05 00 00       	push   $0x581
f01206e3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01206e8:	e8 c3 fa fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01206ed:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01206f0:	e8 6d c3 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01206f5:	29 c3                	sub    %eax,%ebx
f01206f7:	89 d8                	mov    %ebx,%eax
f01206f9:	83 f8 05             	cmp    $0x5,%eax
f01206fc:	74 17                	je     f0120715 <test_kfree+0xe8e>
f01206fe:	83 ec 04             	sub    $0x4,%esp
f0120701:	68 54 9b 13 f0       	push   $0xf0139b54
f0120706:	68 82 05 00 00       	push   $0x582
f012070b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120710:	e8 9b fa fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120715:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f012071c:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012071f:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120725:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0120728:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012072f:	eb 0e                	jmp    f012073f <test_kfree+0xeb8>
		{
			ptr[i] = 8 ;
f0120731:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120734:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120737:	01 d0                	add    %edx,%eax
f0120739:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012073c:	ff 45 f4             	incl   -0xc(%ebp)
f012073f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120745:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120748:	7f e7                	jg     f0120731 <test_kfree+0xeaa>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012074a:	e8 13 c3 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012074f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120752:	e8 2d 3f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120757:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012075a:	83 ec 0c             	sub    $0xc,%esp
f012075d:	68 00 00 10 00       	push   $0x100000
f0120762:	e8 91 78 fe ff       	call   f0107ff8 <kmalloc>
f0120767:	83 c4 10             	add    $0x10,%esp
f012076a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120770:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120776:	89 c1                	mov    %eax,%ecx
f0120778:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012077f:	10 00 00 
f0120782:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120787:	0f b6 d0             	movzbl %al,%edx
f012078a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120790:	01 d0                	add    %edx,%eax
f0120792:	48                   	dec    %eax
f0120793:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120799:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012079f:	ba 00 00 00 00       	mov    $0x0,%edx
f01207a4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01207aa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01207b0:	29 d0                	sub    %edx,%eax
f01207b2:	89 c3                	mov    %eax,%ebx
f01207b4:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01207bb:	10 00 00 
f01207be:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01207c3:	0f b6 c0             	movzbl %al,%eax
f01207c6:	c1 e0 04             	shl    $0x4,%eax
f01207c9:	89 c2                	mov    %eax,%edx
f01207cb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01207d1:	01 d0                	add    %edx,%eax
f01207d3:	48                   	dec    %eax
f01207d4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01207da:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01207e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01207e5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01207eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01207f1:	29 d0                	sub    %edx,%eax
f01207f3:	01 d8                	add    %ebx,%eax
f01207f5:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01207fa:	39 c1                	cmp    %eax,%ecx
f01207fc:	74 17                	je     f0120815 <test_kfree+0xf8e>
f01207fe:	83 ec 04             	sub    $0x4,%esp
f0120801:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0120806:	68 8e 05 00 00       	push   $0x58e
f012080b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120810:	e8 9b f9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120815:	e8 6a 3e fe ff       	call   f0104684 <pf_calculate_free_frames>
f012081a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012081d:	74 17                	je     f0120836 <test_kfree+0xfaf>
f012081f:	83 ec 04             	sub    $0x4,%esp
f0120822:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120827:	68 8f 05 00 00       	push   $0x58f
f012082c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120831:	e8 7a f9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120836:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120839:	e8 24 c2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012083e:	29 c3                	sub    %eax,%ebx
f0120840:	89 d8                	mov    %ebx,%eax
f0120842:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120847:	74 17                	je     f0120860 <test_kfree+0xfd9>
f0120849:	83 ec 04             	sub    $0x4,%esp
f012084c:	68 54 9b 13 f0       	push   $0xf0139b54
f0120851:	68 90 05 00 00       	push   $0x590
f0120856:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012085b:	e8 50 f9 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120860:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0120867:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012086a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120870:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120873:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012087a:	eb 0e                	jmp    f012088a <test_kfree+0x1003>
		{
			ptr[i] = 9 ;
f012087c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012087f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120882:	01 d0                	add    %edx,%eax
f0120884:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120887:	ff 45 f4             	incl   -0xc(%ebp)
f012088a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120890:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120893:	7f e7                	jg     f012087c <test_kfree+0xff5>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120895:	e8 16 7e ff ff       	call   f01186b0 <isKHeapPlacementStrategyNEXTFIT>
f012089a:	84 c0                	test   %al,%al
f012089c:	0f 84 9e 05 00 00    	je     f0120e40 <test_kfree+0x15b9>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01208a2:	e8 bb c1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01208a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01208aa:	e8 d5 3d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01208af:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01208b2:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01208b9:	10 00 00 
f01208bc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01208c1:	0f b6 d0             	movzbl %al,%edx
f01208c4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01208ca:	01 d0                	add    %edx,%eax
f01208cc:	48                   	dec    %eax
f01208cd:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01208d3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01208d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01208de:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01208e4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01208ea:	29 d0                	sub    %edx,%eax
f01208ec:	89 c1                	mov    %eax,%ecx
f01208ee:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01208f5:	10 00 00 
f01208f8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01208fd:	0f b6 c0             	movzbl %al,%eax
f0120900:	c1 e0 04             	shl    $0x4,%eax
f0120903:	89 c2                	mov    %eax,%edx
f0120905:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012090b:	01 d0                	add    %edx,%eax
f012090d:	48                   	dec    %eax
f012090e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120914:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012091a:	ba 00 00 00 00       	mov    $0x0,%edx
f012091f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120925:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012092b:	29 d0                	sub    %edx,%eax
f012092d:	01 c8                	add    %ecx,%eax
f012092f:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120934:	29 c2                	sub    %eax,%edx
f0120936:	89 d0                	mov    %edx,%eax
f0120938:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f012093e:	83 ec 0c             	sub    $0xc,%esp
f0120941:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
f0120947:	e8 ac 76 fe ff       	call   f0107ff8 <kmalloc>
f012094c:	83 c4 10             	add    $0x10,%esp
f012094f:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120955:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012095b:	89 c1                	mov    %eax,%ecx
f012095d:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0120964:	10 00 00 
f0120967:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012096c:	0f b6 d0             	movzbl %al,%edx
f012096f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120975:	01 d0                	add    %edx,%eax
f0120977:	48                   	dec    %eax
f0120978:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012097e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120984:	ba 00 00 00 00       	mov    $0x0,%edx
f0120989:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012098f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120995:	29 d0                	sub    %edx,%eax
f0120997:	89 c3                	mov    %eax,%ebx
f0120999:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01209a0:	10 00 00 
f01209a3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01209a8:	0f b6 c0             	movzbl %al,%eax
f01209ab:	c1 e0 04             	shl    $0x4,%eax
f01209ae:	89 c2                	mov    %eax,%edx
f01209b0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01209b6:	01 d0                	add    %edx,%eax
f01209b8:	48                   	dec    %eax
f01209b9:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01209bf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01209c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01209ca:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01209d0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01209d6:	29 d0                	sub    %edx,%eax
f01209d8:	01 d8                	add    %ebx,%eax
f01209da:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01209df:	39 c1                	cmp    %eax,%ecx
f01209e1:	74 17                	je     f01209fa <test_kfree+0x1173>
f01209e3:	83 ec 04             	sub    $0x4,%esp
f01209e6:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01209eb:	68 9f 05 00 00       	push   $0x59f
f01209f0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01209f5:	e8 b6 f7 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209fa:	e8 85 3c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01209ff:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a02:	74 17                	je     f0120a1b <test_kfree+0x1194>
f0120a04:	83 ec 04             	sub    $0x4,%esp
f0120a07:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120a0c:	68 a0 05 00 00       	push   $0x5a0
f0120a11:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120a16:	e8 95 f7 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a1b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120a1e:	e8 3f c0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120a23:	29 c3                	sub    %eax,%ebx
f0120a25:	89 da                	mov    %ebx,%edx
f0120a27:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120a2d:	c1 e8 0c             	shr    $0xc,%eax
f0120a30:	39 c2                	cmp    %eax,%edx
f0120a32:	74 17                	je     f0120a4b <test_kfree+0x11c4>
f0120a34:	83 ec 04             	sub    $0x4,%esp
f0120a37:	68 54 9b 13 f0       	push   $0xf0139b54
f0120a3c:	68 a1 05 00 00       	push   $0x5a1
f0120a41:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120a46:	e8 65 f7 fd ff       	call   f01001b0 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120a4b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120a51:	48                   	dec    %eax
f0120a52:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			ptr = (char*)ptr_allocations[10];
f0120a58:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120a5e:	89 45 98             	mov    %eax,-0x68(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120a61:	e8 fc bf fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120a66:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a69:	e8 16 3c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120a6e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120a71:	83 ec 0c             	sub    $0xc,%esp
f0120a74:	68 00 00 30 00       	push   $0x300000
f0120a79:	e8 7a 75 fe ff       	call   f0107ff8 <kmalloc>
f0120a7e:	83 c4 10             	add    $0x10,%esp
f0120a81:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a87:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120a8d:	89 c1                	mov    %eax,%ecx
f0120a8f:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0120a96:	10 00 00 
f0120a99:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120a9e:	0f b6 d0             	movzbl %al,%edx
f0120aa1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120aa7:	01 d0                	add    %edx,%eax
f0120aa9:	48                   	dec    %eax
f0120aaa:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0120ab0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120ab6:	ba 00 00 00 00       	mov    $0x0,%edx
f0120abb:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0120ac1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120ac7:	29 d0                	sub    %edx,%eax
f0120ac9:	89 c3                	mov    %eax,%ebx
f0120acb:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0120ad2:	10 00 00 
f0120ad5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120ada:	0f b6 c0             	movzbl %al,%eax
f0120add:	c1 e0 04             	shl    $0x4,%eax
f0120ae0:	89 c2                	mov    %eax,%edx
f0120ae2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120ae8:	01 d0                	add    %edx,%eax
f0120aea:	48                   	dec    %eax
f0120aeb:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0120af1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120af7:	ba 00 00 00 00       	mov    $0x0,%edx
f0120afc:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0120b02:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120b08:	29 d0                	sub    %edx,%eax
f0120b0a:	01 d8                	add    %ebx,%eax
f0120b0c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120b11:	39 c1                	cmp    %eax,%ecx
f0120b13:	74 17                	je     f0120b2c <test_kfree+0x12a5>
f0120b15:	83 ec 04             	sub    $0x4,%esp
f0120b18:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0120b1d:	68 ae 05 00 00       	push   $0x5ae
f0120b22:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120b27:	e8 84 f6 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b2c:	e8 53 3b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120b31:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b34:	74 17                	je     f0120b4d <test_kfree+0x12c6>
f0120b36:	83 ec 04             	sub    $0x4,%esp
f0120b39:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120b3e:	68 af 05 00 00       	push   $0x5af
f0120b43:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120b48:	e8 63 f6 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b4d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b50:	e8 0d bf fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120b55:	29 c3                	sub    %eax,%ebx
f0120b57:	89 d8                	mov    %ebx,%eax
f0120b59:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120b5e:	74 17                	je     f0120b77 <test_kfree+0x12f0>
f0120b60:	83 ec 04             	sub    $0x4,%esp
f0120b63:	68 54 9b 13 f0       	push   $0xf0139b54
f0120b68:	68 b0 05 00 00       	push   $0x5b0
f0120b6d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120b72:	e8 39 f6 fd ff       	call   f01001b0 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120b77:	c7 85 94 fe ff ff ff 	movl   $0x2fffff,-0x16c(%ebp)
f0120b7e:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120b81:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120b87:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120b8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b91:	eb 0e                	jmp    f0120ba1 <test_kfree+0x131a>
			{
				ptr[i] = 8 ;
f0120b93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b96:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120b99:	01 d0                	add    %edx,%eax
f0120b9b:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120b9e:	ff 45 f4             	incl   -0xc(%ebp)
f0120ba1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120ba7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120baa:	7f e7                	jg     f0120b93 <test_kfree+0x130c>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120bac:	e8 b1 be fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120bb1:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120bb4:	e8 cb 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120bb9:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120bbc:	83 ec 0c             	sub    $0xc,%esp
f0120bbf:	68 00 08 00 00       	push   $0x800
f0120bc4:	e8 2f 74 fe ff       	call   f0107ff8 <kmalloc>
f0120bc9:	83 c4 10             	add    $0x10,%esp
f0120bcc:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120bd2:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120bd8:	89 c1                	mov    %eax,%ecx
f0120bda:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0120be1:	10 00 00 
f0120be4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120be9:	0f b6 d0             	movzbl %al,%edx
f0120bec:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120bf2:	01 d0                	add    %edx,%eax
f0120bf4:	48                   	dec    %eax
f0120bf5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0120bfb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120c01:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c06:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0120c0c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120c12:	29 d0                	sub    %edx,%eax
f0120c14:	89 c3                	mov    %eax,%ebx
f0120c16:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0120c1d:	10 00 00 
f0120c20:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120c25:	0f b6 c0             	movzbl %al,%eax
f0120c28:	c1 e0 04             	shl    $0x4,%eax
f0120c2b:	89 c2                	mov    %eax,%edx
f0120c2d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120c33:	01 d0                	add    %edx,%eax
f0120c35:	48                   	dec    %eax
f0120c36:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0120c3c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120c42:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c47:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0120c4d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120c53:	29 d0                	sub    %edx,%eax
f0120c55:	01 d8                	add    %ebx,%eax
f0120c57:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120c5c:	39 c1                	cmp    %eax,%ecx
f0120c5e:	74 17                	je     f0120c77 <test_kfree+0x13f0>
f0120c60:	83 ec 04             	sub    $0x4,%esp
f0120c63:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0120c68:	68 bc 05 00 00       	push   $0x5bc
f0120c6d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120c72:	e8 39 f5 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c77:	e8 08 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120c7c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c7f:	74 17                	je     f0120c98 <test_kfree+0x1411>
f0120c81:	83 ec 04             	sub    $0x4,%esp
f0120c84:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120c89:	68 bd 05 00 00       	push   $0x5bd
f0120c8e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120c93:	e8 18 f5 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120c98:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120c9b:	e8 c2 bd fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120ca0:	29 c3                	sub    %eax,%ebx
f0120ca2:	89 d8                	mov    %ebx,%eax
f0120ca4:	83 f8 01             	cmp    $0x1,%eax
f0120ca7:	74 17                	je     f0120cc0 <test_kfree+0x1439>
f0120ca9:	83 ec 04             	sub    $0x4,%esp
f0120cac:	68 54 9b 13 f0       	push   $0xf0139b54
f0120cb1:	68 be 05 00 00       	push   $0x5be
f0120cb6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120cbb:	e8 f0 f4 fd ff       	call   f01001b0 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120cc0:	c7 85 98 fe ff ff ff 	movl   $0x7ff,-0x168(%ebp)
f0120cc7:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120cca:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120cd0:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120cd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120cda:	eb 0e                	jmp    f0120cea <test_kfree+0x1463>
			{
				ptr[i] = 9 ;
f0120cdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120cdf:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120ce2:	01 d0                	add    %edx,%eax
f0120ce4:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120ce7:	ff 45 f4             	incl   -0xc(%ebp)
f0120cea:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120cf0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120cf3:	7f e7                	jg     f0120cdc <test_kfree+0x1455>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120cf5:	e8 68 bd fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120cfa:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120cfd:	e8 82 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120d02:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120d05:	83 ec 0c             	sub    $0xc,%esp
f0120d08:	68 00 00 10 00       	push   $0x100000
f0120d0d:	e8 e6 72 fe ff       	call   f0107ff8 <kmalloc>
f0120d12:	83 c4 10             	add    $0x10,%esp
f0120d15:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120d1b:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120d21:	89 c1                	mov    %eax,%ecx
f0120d23:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0120d2a:	10 00 00 
f0120d2d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120d32:	0f b6 d0             	movzbl %al,%edx
f0120d35:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120d3b:	01 d0                	add    %edx,%eax
f0120d3d:	48                   	dec    %eax
f0120d3e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0120d44:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120d4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d4f:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0120d55:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120d5b:	29 d0                	sub    %edx,%eax
f0120d5d:	89 c3                	mov    %eax,%ebx
f0120d5f:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0120d66:	10 00 00 
f0120d69:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120d6e:	0f b6 c0             	movzbl %al,%eax
f0120d71:	c1 e0 04             	shl    $0x4,%eax
f0120d74:	89 c2                	mov    %eax,%edx
f0120d76:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120d7c:	01 d0                	add    %edx,%eax
f0120d7e:	48                   	dec    %eax
f0120d7f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0120d85:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120d8b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d90:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0120d96:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120d9c:	29 d0                	sub    %edx,%eax
f0120d9e:	01 d8                	add    %ebx,%eax
f0120da0:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120da5:	39 c1                	cmp    %eax,%ecx
f0120da7:	74 17                	je     f0120dc0 <test_kfree+0x1539>
f0120da9:	83 ec 04             	sub    $0x4,%esp
f0120dac:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0120db1:	68 ca 05 00 00       	push   $0x5ca
f0120db6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120dbb:	e8 f0 f3 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dc0:	e8 bf 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120dc5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120dc8:	74 17                	je     f0120de1 <test_kfree+0x155a>
f0120dca:	83 ec 04             	sub    $0x4,%esp
f0120dcd:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120dd2:	68 cb 05 00 00       	push   $0x5cb
f0120dd7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120ddc:	e8 cf f3 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120de1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120de4:	e8 79 bc fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120de9:	29 c3                	sub    %eax,%ebx
f0120deb:	89 d8                	mov    %ebx,%eax
f0120ded:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120df2:	74 17                	je     f0120e0b <test_kfree+0x1584>
f0120df4:	83 ec 04             	sub    $0x4,%esp
f0120df7:	68 54 9b 13 f0       	push   $0xf0139b54
f0120dfc:	68 cc 05 00 00       	push   $0x5cc
f0120e01:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120e06:	e8 a5 f3 fd ff       	call   f01001b0 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120e0b:	c7 85 9c fe ff ff ff 	movl   $0xfffff,-0x164(%ebp)
f0120e12:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120e15:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120e1b:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120e1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e25:	eb 0e                	jmp    f0120e35 <test_kfree+0x15ae>
			{
				ptr[i] = 10 ;
f0120e27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120e2a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120e2d:	01 d0                	add    %edx,%eax
f0120e2f:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120e32:	ff 45 f4             	incl   -0xc(%ebp)
f0120e35:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120e3b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120e3e:	7f e7                	jg     f0120e27 <test_kfree+0x15a0>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120e40:	83 ec 0c             	sub    $0xc,%esp
f0120e43:	68 f2 a2 13 f0       	push   $0xf013a2f2
f0120e48:	e8 e4 ff fd ff       	call   f0100e31 <cprintf>
f0120e4d:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120e50:	e8 0d bc fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120e55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e58:	e8 27 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e5d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120e60:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120e66:	83 ec 0c             	sub    $0xc,%esp
f0120e69:	50                   	push   %eax
f0120e6a:	e8 a3 71 fe ff       	call   f0108012 <kfree>
f0120e6f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e72:	e8 0d 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e77:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e7a:	74 17                	je     f0120e93 <test_kfree+0x160c>
f0120e7c:	83 ec 04             	sub    $0x4,%esp
f0120e7f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120e84:	68 dd 05 00 00       	push   $0x5dd
f0120e89:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120e8e:	e8 1d f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e93:	e8 ca bb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120e98:	89 c2                	mov    %eax,%edx
f0120e9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e9d:	29 c2                	sub    %eax,%edx
f0120e9f:	89 d0                	mov    %edx,%eax
f0120ea1:	83 f8 02             	cmp    $0x2,%eax
f0120ea4:	74 17                	je     f0120ebd <test_kfree+0x1636>
f0120ea6:	83 ec 04             	sub    $0x4,%esp
f0120ea9:	68 5c a2 13 f0       	push   $0xf013a25c
f0120eae:	68 de 05 00 00       	push   $0x5de
f0120eb3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120eb8:	e8 f3 f2 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120ebd:	e8 a0 bb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120ec2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ec5:	e8 ba 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120eca:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120ecd:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120ed3:	83 ec 0c             	sub    $0xc,%esp
f0120ed6:	50                   	push   %eax
f0120ed7:	e8 36 71 fe ff       	call   f0108012 <kfree>
f0120edc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120edf:	e8 a0 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120ee4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ee7:	74 17                	je     f0120f00 <test_kfree+0x1679>
f0120ee9:	83 ec 04             	sub    $0x4,%esp
f0120eec:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120ef1:	68 e4 05 00 00       	push   $0x5e4
f0120ef6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120efb:	e8 b0 f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f00:	e8 5d bb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120f05:	89 c2                	mov    %eax,%edx
f0120f07:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f0a:	29 c2                	sub    %eax,%edx
f0120f0c:	89 d0                	mov    %edx,%eax
f0120f0e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120f13:	74 17                	je     f0120f2c <test_kfree+0x16a5>
f0120f15:	83 ec 04             	sub    $0x4,%esp
f0120f18:	68 5c a2 13 f0       	push   $0xf013a25c
f0120f1d:	68 e5 05 00 00       	push   $0x5e5
f0120f22:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120f27:	e8 84 f2 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120f2c:	e8 31 bb fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120f31:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f34:	e8 4b 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f39:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120f3c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120f42:	83 ec 0c             	sub    $0xc,%esp
f0120f45:	50                   	push   %eax
f0120f46:	e8 c7 70 fe ff       	call   f0108012 <kfree>
f0120f4b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f4e:	e8 31 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f53:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f56:	74 17                	je     f0120f6f <test_kfree+0x16e8>
f0120f58:	83 ec 04             	sub    $0x4,%esp
f0120f5b:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120f60:	68 eb 05 00 00       	push   $0x5eb
f0120f65:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120f6a:	e8 41 f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f6f:	e8 ee ba fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120f74:	89 c2                	mov    %eax,%edx
f0120f76:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f79:	29 c2                	sub    %eax,%edx
f0120f7b:	89 d0                	mov    %edx,%eax
f0120f7d:	83 f8 01             	cmp    $0x1,%eax
f0120f80:	74 17                	je     f0120f99 <test_kfree+0x1712>
f0120f82:	83 ec 04             	sub    $0x4,%esp
f0120f85:	68 5c a2 13 f0       	push   $0xf013a25c
f0120f8a:	68 ec 05 00 00       	push   $0x5ec
f0120f8f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120f94:	e8 17 f2 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120f99:	e8 c4 ba fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120f9e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120fa1:	e8 de 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120fa6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0120fa9:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120faf:	83 ec 0c             	sub    $0xc,%esp
f0120fb2:	50                   	push   %eax
f0120fb3:	e8 5a 70 fe ff       	call   f0108012 <kfree>
f0120fb8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120fbb:	e8 c4 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120fc0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120fc3:	74 17                	je     f0120fdc <test_kfree+0x1755>
f0120fc5:	83 ec 04             	sub    $0x4,%esp
f0120fc8:	68 ec 9a 13 f0       	push   $0xf0139aec
f0120fcd:	68 f2 05 00 00       	push   $0x5f2
f0120fd2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0120fd7:	e8 d4 f1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fdc:	e8 81 ba fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0120fe1:	89 c2                	mov    %eax,%edx
f0120fe3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fe6:	29 c2                	sub    %eax,%edx
f0120fe8:	89 d0                	mov    %edx,%eax
f0120fea:	83 f8 04             	cmp    $0x4,%eax
f0120fed:	74 17                	je     f0121006 <test_kfree+0x177f>
f0120fef:	83 ec 04             	sub    $0x4,%esp
f0120ff2:	68 5c a2 13 f0       	push   $0xf013a25c
f0120ff7:	68 f3 05 00 00       	push   $0x5f3
f0120ffc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121001:	e8 aa f1 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121006:	e8 57 ba fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012100b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012100e:	e8 71 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121013:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121016:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012101c:	83 ec 0c             	sub    $0xc,%esp
f012101f:	50                   	push   %eax
f0121020:	e8 ed 6f fe ff       	call   f0108012 <kfree>
f0121025:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121028:	e8 57 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012102d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121030:	74 17                	je     f0121049 <test_kfree+0x17c2>
f0121032:	83 ec 04             	sub    $0x4,%esp
f0121035:	68 ec 9a 13 f0       	push   $0xf0139aec
f012103a:	68 f9 05 00 00       	push   $0x5f9
f012103f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121044:	e8 67 f1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121049:	e8 14 ba fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012104e:	89 c2                	mov    %eax,%edx
f0121050:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121053:	29 c2                	sub    %eax,%edx
f0121055:	89 d0                	mov    %edx,%eax
f0121057:	83 f8 05             	cmp    $0x5,%eax
f012105a:	74 17                	je     f0121073 <test_kfree+0x17ec>
f012105c:	83 ec 04             	sub    $0x4,%esp
f012105f:	68 5c a2 13 f0       	push   $0xf013a25c
f0121064:	68 fa 05 00 00       	push   $0x5fa
f0121069:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012106e:	e8 3d f1 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121073:	e8 ea b9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121078:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012107b:	e8 04 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121080:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121083:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0121089:	83 ec 0c             	sub    $0xc,%esp
f012108c:	50                   	push   %eax
f012108d:	e8 80 6f fe ff       	call   f0108012 <kfree>
f0121092:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121095:	e8 ea 35 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012109a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012109d:	74 17                	je     f01210b6 <test_kfree+0x182f>
f012109f:	83 ec 04             	sub    $0x4,%esp
f01210a2:	68 ec 9a 13 f0       	push   $0xf0139aec
f01210a7:	68 00 06 00 00       	push   $0x600
f01210ac:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01210b1:	e8 fa f0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01210b6:	e8 a7 b9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01210bb:	89 c2                	mov    %eax,%edx
f01210bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01210c0:	29 c2                	sub    %eax,%edx
f01210c2:	89 d0                	mov    %edx,%eax
f01210c4:	3d 00 01 00 00       	cmp    $0x100,%eax
f01210c9:	74 17                	je     f01210e2 <test_kfree+0x185b>
f01210cb:	83 ec 04             	sub    $0x4,%esp
f01210ce:	68 5c a2 13 f0       	push   $0xf013a25c
f01210d3:	68 01 06 00 00       	push   $0x601
f01210d8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01210dd:	e8 ce f0 fd ff       	call   f01001b0 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f01210e2:	e8 c9 75 ff ff       	call   f01186b0 <isKHeapPlacementStrategyNEXTFIT>
f01210e7:	84 c0                	test   %al,%al
f01210e9:	0f 84 4a 02 00 00    	je     f0121339 <test_kfree+0x1ab2>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01210ef:	e8 6e b9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01210f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01210f7:	e8 88 35 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01210fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f01210ff:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0121105:	83 ec 0c             	sub    $0xc,%esp
f0121108:	50                   	push   %eax
f0121109:	e8 04 6f fe ff       	call   f0108012 <kfree>
f012110e:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121111:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0121118:	10 00 00 
f012111b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121120:	0f b6 d0             	movzbl %al,%edx
f0121123:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121129:	01 d0                	add    %edx,%eax
f012112b:	48                   	dec    %eax
f012112c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0121132:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121138:	ba 00 00 00 00       	mov    $0x0,%edx
f012113d:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0121143:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121149:	29 d0                	sub    %edx,%eax
f012114b:	89 c1                	mov    %eax,%ecx
f012114d:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0121154:	10 00 00 
f0121157:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012115c:	0f b6 c0             	movzbl %al,%eax
f012115f:	c1 e0 04             	shl    $0x4,%eax
f0121162:	89 c2                	mov    %eax,%edx
f0121164:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012116a:	01 d0                	add    %edx,%eax
f012116c:	48                   	dec    %eax
f012116d:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0121173:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0121179:	ba 00 00 00 00       	mov    $0x0,%edx
f012117e:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0121184:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012118a:	29 d0                	sub    %edx,%eax
f012118c:	01 c8                	add    %ecx,%eax
f012118e:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121193:	29 c2                	sub    %eax,%edx
f0121195:	89 d0                	mov    %edx,%eax
f0121197:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012119d:	e8 e2 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01211a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211a5:	74 17                	je     f01211be <test_kfree+0x1937>
f01211a7:	83 ec 04             	sub    $0x4,%esp
f01211aa:	68 ec 9a 13 f0       	push   $0xf0139aec
f01211af:	68 0b 06 00 00       	push   $0x60b
f01211b4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01211b9:	e8 f2 ef fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f01211be:	e8 9f b8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01211c3:	89 c2                	mov    %eax,%edx
f01211c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211c8:	29 c2                	sub    %eax,%edx
f01211ca:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01211d0:	c1 e8 0c             	shr    $0xc,%eax
f01211d3:	39 c2                	cmp    %eax,%edx
f01211d5:	74 17                	je     f01211ee <test_kfree+0x1967>
f01211d7:	83 ec 04             	sub    $0x4,%esp
f01211da:	68 5c a2 13 f0       	push   $0xf013a25c
f01211df:	68 0c 06 00 00       	push   $0x60c
f01211e4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01211e9:	e8 c2 ef fd ff       	call   f01001b0 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f01211ee:	e8 6f b8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01211f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01211f6:	e8 89 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01211fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01211fe:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0121204:	83 ec 0c             	sub    $0xc,%esp
f0121207:	50                   	push   %eax
f0121208:	e8 05 6e fe ff       	call   f0108012 <kfree>
f012120d:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121210:	e8 6f 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121215:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121218:	74 17                	je     f0121231 <test_kfree+0x19aa>
f012121a:	83 ec 04             	sub    $0x4,%esp
f012121d:	68 ec 9a 13 f0       	push   $0xf0139aec
f0121222:	68 12 06 00 00       	push   $0x612
f0121227:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012122c:	e8 7f ef fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121231:	e8 2c b8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121236:	89 c2                	mov    %eax,%edx
f0121238:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012123b:	29 c2                	sub    %eax,%edx
f012123d:	89 d0                	mov    %edx,%eax
f012123f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121244:	74 17                	je     f012125d <test_kfree+0x19d6>
f0121246:	83 ec 04             	sub    $0x4,%esp
f0121249:	68 5c a2 13 f0       	push   $0xf013a25c
f012124e:	68 13 06 00 00       	push   $0x613
f0121253:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121258:	e8 53 ef fd ff       	call   f01001b0 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f012125d:	e8 00 b8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121262:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121265:	e8 1a 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012126a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f012126d:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0121273:	83 ec 0c             	sub    $0xc,%esp
f0121276:	50                   	push   %eax
f0121277:	e8 96 6d fe ff       	call   f0108012 <kfree>
f012127c:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012127f:	e8 00 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121284:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121287:	74 17                	je     f01212a0 <test_kfree+0x1a19>
f0121289:	83 ec 04             	sub    $0x4,%esp
f012128c:	68 ec 9a 13 f0       	push   $0xf0139aec
f0121291:	68 19 06 00 00       	push   $0x619
f0121296:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012129b:	e8 10 ef fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01212a0:	e8 bd b7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01212a5:	89 c2                	mov    %eax,%edx
f01212a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212aa:	29 c2                	sub    %eax,%edx
f01212ac:	89 d0                	mov    %edx,%eax
f01212ae:	83 f8 01             	cmp    $0x1,%eax
f01212b1:	74 17                	je     f01212ca <test_kfree+0x1a43>
f01212b3:	83 ec 04             	sub    $0x4,%esp
f01212b6:	68 5c a2 13 f0       	push   $0xf013a25c
f01212bb:	68 1a 06 00 00       	push   $0x61a
f01212c0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01212c5:	e8 e6 ee fd ff       	call   f01001b0 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f01212ca:	e8 93 b7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01212cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01212d2:	e8 ad 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01212d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f01212da:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01212e0:	83 ec 0c             	sub    $0xc,%esp
f01212e3:	50                   	push   %eax
f01212e4:	e8 29 6d fe ff       	call   f0108012 <kfree>
f01212e9:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212ec:	e8 93 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01212f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212f4:	74 17                	je     f012130d <test_kfree+0x1a86>
f01212f6:	83 ec 04             	sub    $0x4,%esp
f01212f9:	68 ec 9a 13 f0       	push   $0xf0139aec
f01212fe:	68 20 06 00 00       	push   $0x620
f0121303:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121308:	e8 a3 ee fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012130d:	e8 50 b7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121312:	89 c2                	mov    %eax,%edx
f0121314:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121317:	29 c2                	sub    %eax,%edx
f0121319:	89 d0                	mov    %edx,%eax
f012131b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121320:	74 17                	je     f0121339 <test_kfree+0x1ab2>
f0121322:	83 ec 04             	sub    $0x4,%esp
f0121325:	68 5c a2 13 f0       	push   $0xf013a25c
f012132a:	68 21 06 00 00       	push   $0x621
f012132f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121334:	e8 77 ee fd ff       	call   f01001b0 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121339:	e8 24 b7 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012133e:	89 c2                	mov    %eax,%edx
f0121340:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121343:	39 c2                	cmp    %eax,%edx
f0121345:	74 17                	je     f012135e <test_kfree+0x1ad7>
f0121347:	83 ec 04             	sub    $0x4,%esp
f012134a:	68 fc a2 13 f0       	push   $0xf013a2fc
f012134f:	68 24 06 00 00       	push   $0x624
f0121354:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121359:	e8 52 ee fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f012135e:	83 ec 0c             	sub    $0xc,%esp
f0121361:	68 30 a3 13 f0       	push   $0xf013a330
f0121366:	e8 c6 fa fd ff       	call   f0100e31 <cprintf>
f012136b:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012136e:	83 ec 0c             	sub    $0xc,%esp
f0121371:	6a 03                	push   $0x3
f0121373:	e8 85 bb fe ff       	call   f010cefd <sys_bypassPageFault>
f0121378:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012137b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121382:	e9 82 00 00 00       	jmp    f0121409 <test_kfree+0x1b82>
		{
			ptr = (char *) ptr_allocations[i];
f0121387:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012138a:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0121391:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0121394:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121397:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012139a:	e8 4c bb fe ff       	call   f010ceeb <sys_rcr2>
f012139f:	89 c2                	mov    %eax,%edx
f01213a1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01213a4:	39 c2                	cmp    %eax,%edx
f01213a6:	74 17                	je     f01213bf <test_kfree+0x1b38>
f01213a8:	83 ec 04             	sub    $0x4,%esp
f01213ab:	68 38 a3 13 f0       	push   $0xf013a338
f01213b0:	68 33 06 00 00       	push   $0x633
f01213b5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01213ba:	e8 f1 ed fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f01213bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01213c2:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01213c9:	89 c2                	mov    %eax,%edx
f01213cb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01213ce:	01 d0                	add    %edx,%eax
f01213d0:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01213d3:	e8 13 bb fe ff       	call   f010ceeb <sys_rcr2>
f01213d8:	89 c2                	mov    %eax,%edx
f01213da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01213dd:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01213e4:	89 c1                	mov    %eax,%ecx
f01213e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01213e9:	01 c8                	add    %ecx,%eax
f01213eb:	39 c2                	cmp    %eax,%edx
f01213ed:	74 17                	je     f0121406 <test_kfree+0x1b7f>
f01213ef:	83 ec 04             	sub    $0x4,%esp
f01213f2:	68 38 a3 13 f0       	push   $0xf013a338
f01213f7:	68 35 06 00 00       	push   $0x635
f01213fc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121401:	e8 aa ed fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121406:	ff 45 f4             	incl   -0xc(%ebp)
f0121409:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012140d:	0f 8e 74 ff ff ff    	jle    f0121387 <test_kfree+0x1b00>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121413:	83 ec 0c             	sub    $0xc,%esp
f0121416:	6a 00                	push   $0x0
f0121418:	e8 e0 ba fe ff       	call   f010cefd <sys_bypassPageFault>
f012141d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121420:	83 ec 0c             	sub    $0xc,%esp
f0121423:	68 7d a3 13 f0       	push   $0xf013a37d
f0121428:	e8 04 fa fd ff       	call   f0100e31 <cprintf>
f012142d:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121430:	e8 2d b6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121435:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121438:	e8 47 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012143d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121440:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121446:	83 ec 0c             	sub    $0xc,%esp
f0121449:	50                   	push   %eax
f012144a:	e8 c3 6b fe ff       	call   f0108012 <kfree>
f012144f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121452:	e8 2d 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121457:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012145a:	74 17                	je     f0121473 <test_kfree+0x1bec>
f012145c:	83 ec 04             	sub    $0x4,%esp
f012145f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0121464:	68 43 06 00 00       	push   $0x643
f0121469:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012146e:	e8 3d ed fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121473:	e8 ea b5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121478:	89 c2                	mov    %eax,%edx
f012147a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012147d:	39 c2                	cmp    %eax,%edx
f012147f:	74 17                	je     f0121498 <test_kfree+0x1c11>
f0121481:	83 ec 04             	sub    $0x4,%esp
f0121484:	68 84 a3 13 f0       	push   $0xf013a384
f0121489:	68 44 06 00 00       	push   $0x644
f012148e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121493:	e8 18 ed fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121498:	e8 c5 b5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012149d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01214a0:	e8 df 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01214a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01214a8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01214ae:	83 ec 0c             	sub    $0xc,%esp
f01214b1:	50                   	push   %eax
f01214b2:	e8 5b 6b fe ff       	call   f0108012 <kfree>
f01214b7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214ba:	e8 c5 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01214bf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214c2:	74 17                	je     f01214db <test_kfree+0x1c54>
f01214c4:	83 ec 04             	sub    $0x4,%esp
f01214c7:	68 ec 9a 13 f0       	push   $0xf0139aec
f01214cc:	68 4a 06 00 00       	push   $0x64a
f01214d1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01214d6:	e8 d5 ec fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01214db:	e8 82 b5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01214e0:	89 c2                	mov    %eax,%edx
f01214e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01214e5:	39 c2                	cmp    %eax,%edx
f01214e7:	74 17                	je     f0121500 <test_kfree+0x1c79>
f01214e9:	83 ec 04             	sub    $0x4,%esp
f01214ec:	68 84 a3 13 f0       	push   $0xf013a384
f01214f1:	68 4b 06 00 00       	push   $0x64b
f01214f6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01214fb:	e8 b0 ec fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121500:	e8 5d b5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121505:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121508:	e8 77 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012150d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121510:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0121516:	83 ec 0c             	sub    $0xc,%esp
f0121519:	50                   	push   %eax
f012151a:	e8 f3 6a fe ff       	call   f0108012 <kfree>
f012151f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121522:	e8 5d 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121527:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012152a:	74 17                	je     f0121543 <test_kfree+0x1cbc>
f012152c:	83 ec 04             	sub    $0x4,%esp
f012152f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0121534:	68 51 06 00 00       	push   $0x651
f0121539:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012153e:	e8 6d ec fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121543:	e8 1a b5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121548:	89 c2                	mov    %eax,%edx
f012154a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012154d:	39 c2                	cmp    %eax,%edx
f012154f:	74 17                	je     f0121568 <test_kfree+0x1ce1>
f0121551:	83 ec 04             	sub    $0x4,%esp
f0121554:	68 84 a3 13 f0       	push   $0xf013a384
f0121559:	68 52 06 00 00       	push   $0x652
f012155e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121563:	e8 48 ec fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121568:	e8 f5 b4 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012156d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121570:	e8 0f 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121575:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121578:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012157e:	83 ec 0c             	sub    $0xc,%esp
f0121581:	50                   	push   %eax
f0121582:	e8 8b 6a fe ff       	call   f0108012 <kfree>
f0121587:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012158a:	e8 f5 30 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012158f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121592:	74 17                	je     f01215ab <test_kfree+0x1d24>
f0121594:	83 ec 04             	sub    $0x4,%esp
f0121597:	68 ec 9a 13 f0       	push   $0xf0139aec
f012159c:	68 58 06 00 00       	push   $0x658
f01215a1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01215a6:	e8 05 ec fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01215ab:	e8 b2 b4 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01215b0:	89 c2                	mov    %eax,%edx
f01215b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01215b5:	39 c2                	cmp    %eax,%edx
f01215b7:	74 17                	je     f01215d0 <test_kfree+0x1d49>
f01215b9:	83 ec 04             	sub    $0x4,%esp
f01215bc:	68 84 a3 13 f0       	push   $0xf013a384
f01215c1:	68 59 06 00 00       	push   $0x659
f01215c6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01215cb:	e8 e0 eb fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f01215d0:	83 ec 0c             	sub    $0xc,%esp
f01215d3:	68 cb a3 13 f0       	push   $0xf013a3cb
f01215d8:	e8 54 f8 fd ff       	call   f0100e31 <cprintf>
f01215dd:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01215e0:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01215e7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01215ee:	eb 48                	jmp    f0121638 <test_kfree+0x1db1>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01215f0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01215f3:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01215f8:	83 ec 04             	sub    $0x4,%esp
f01215fb:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0121601:	51                   	push   %ecx
f0121602:	52                   	push   %edx
f0121603:	50                   	push   %eax
f0121604:	e8 de 5e fe ff       	call   f01074e7 <get_page_table>
f0121609:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012160c:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0121612:	85 c0                	test   %eax,%eax
f0121614:	75 17                	jne    f012162d <test_kfree+0x1da6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121616:	83 ec 04             	sub    $0x4,%esp
f0121619:	68 d4 a3 13 f0       	push   $0xf013a3d4
f012161e:	68 67 06 00 00       	push   $0x667
f0121623:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121628:	e8 83 eb fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012162d:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121634:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121638:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012163c:	78 b2                	js     f01215f0 <test_kfree+0x1d69>
f012163e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121642:	7f 09                	jg     f012164d <test_kfree+0x1dc6>
f0121644:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012164b:	76 a3                	jbe    f01215f0 <test_kfree+0x1d69>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012164d:	83 ec 0c             	sub    $0xc,%esp
f0121650:	68 b6 9c 13 f0       	push   $0xf0139cb6
f0121655:	e8 d7 f7 fd ff       	call   f0100e31 <cprintf>
f012165a:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012165d:	83 ec 0c             	sub    $0xc,%esp
f0121660:	68 3c a4 13 f0       	push   $0xf013a43c
f0121665:	e8 c7 f7 fd ff       	call   f0100e31 <cprintf>
f012166a:	83 c4 10             	add    $0x10,%esp

	return 1;
f012166d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121672:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121675:	5b                   	pop    %ebx
f0121676:	5f                   	pop    %edi
f0121677:	5d                   	pop    %ebp
f0121678:	c3                   	ret    

f0121679 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121679:	55                   	push   %ebp
f012167a:	89 e5                	mov    %esp,%ebp
f012167c:	57                   	push   %edi
f012167d:	53                   	push   %ebx
f012167e:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	cprintf("==============================================\n");
f0121684:	83 ec 0c             	sub    $0xc,%esp
f0121687:	68 14 9a 13 f0       	push   $0xf0139a14
f012168c:	e8 a0 f7 fd ff       	call   f0100e31 <cprintf>
f0121691:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121694:	83 ec 0c             	sub    $0xc,%esp
f0121697:	68 44 9a 13 f0       	push   $0xf0139a44
f012169c:	e8 90 f7 fd ff       	call   f0100e31 <cprintf>
f01216a1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01216a4:	83 ec 0c             	sub    $0xc,%esp
f01216a7:	68 14 9a 13 f0       	push   $0xf0139a14
f01216ac:	e8 80 f7 fd ff       	call   f0100e31 <cprintf>
f01216b1:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01216b4:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01216b8:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01216bc:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01216c2:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01216c8:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01216cf:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01216d6:	e8 87 b3 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01216db:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01216de:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f01216e4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01216e9:	b8 00 00 00 00       	mov    $0x0,%eax
f01216ee:	89 d7                	mov    %edx,%edi
f01216f0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01216f2:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f01216f8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01216fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0121702:	89 d7                	mov    %edx,%edi
f0121704:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121706:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f012170c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121711:	b8 00 00 00 00       	mov    $0x0,%eax
f0121716:	89 d7                	mov    %edx,%edi
f0121718:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012171a:	e8 43 b3 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012171f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121722:	e8 5d 2f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121727:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012172a:	83 ec 0c             	sub    $0xc,%esp
f012172d:	68 00 fc 1f 00       	push   $0x1ffc00
f0121732:	e8 c1 68 fe ff       	call   f0107ff8 <kmalloc>
f0121737:	83 c4 10             	add    $0x10,%esp
f012173a:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121740:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121746:	89 c1                	mov    %eax,%ecx
f0121748:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012174f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121754:	0f b6 d0             	movzbl %al,%edx
f0121757:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012175a:	01 d0                	add    %edx,%eax
f012175c:	48                   	dec    %eax
f012175d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121760:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121763:	ba 00 00 00 00       	mov    $0x0,%edx
f0121768:	f7 75 c8             	divl   -0x38(%ebp)
f012176b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012176e:	29 d0                	sub    %edx,%eax
f0121770:	89 c3                	mov    %eax,%ebx
f0121772:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121779:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012177e:	0f b6 c0             	movzbl %al,%eax
f0121781:	c1 e0 04             	shl    $0x4,%eax
f0121784:	89 c2                	mov    %eax,%edx
f0121786:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121789:	01 d0                	add    %edx,%eax
f012178b:	48                   	dec    %eax
f012178c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f012178f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121792:	ba 00 00 00 00       	mov    $0x0,%edx
f0121797:	f7 75 c0             	divl   -0x40(%ebp)
f012179a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012179d:	29 d0                	sub    %edx,%eax
f012179f:	01 d8                	add    %ebx,%eax
f01217a1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01217a6:	39 c1                	cmp    %eax,%ecx
f01217a8:	74 17                	je     f01217c1 <test_kfree_bestfirstfit+0x148>
f01217aa:	83 ec 04             	sub    $0x4,%esp
f01217ad:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01217b2:	68 95 06 00 00       	push   $0x695
f01217b7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01217bc:	e8 ef e9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217c1:	e8 be 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01217c6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217c9:	74 17                	je     f01217e2 <test_kfree_bestfirstfit+0x169>
f01217cb:	83 ec 04             	sub    $0x4,%esp
f01217ce:	68 ec 9a 13 f0       	push   $0xf0139aec
f01217d3:	68 96 06 00 00       	push   $0x696
f01217d8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01217dd:	e8 ce e9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01217e2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01217e5:	e8 78 b2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01217ea:	29 c3                	sub    %eax,%ebx
f01217ec:	89 d8                	mov    %ebx,%eax
f01217ee:	3d 00 02 00 00       	cmp    $0x200,%eax
f01217f3:	74 17                	je     f012180c <test_kfree_bestfirstfit+0x193>
f01217f5:	83 ec 04             	sub    $0x4,%esp
f01217f8:	68 54 9b 13 f0       	push   $0xf0139b54
f01217fd:	68 97 06 00 00       	push   $0x697
f0121802:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121807:	e8 a4 e9 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012180c:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0121813:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121816:	e8 47 b2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012181b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012181e:	e8 61 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121823:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121826:	83 ec 0c             	sub    $0xc,%esp
f0121829:	68 00 fc 1f 00       	push   $0x1ffc00
f012182e:	e8 c5 67 fe ff       	call   f0107ff8 <kmalloc>
f0121833:	83 c4 10             	add    $0x10,%esp
f0121836:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012183c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121842:	89 c1                	mov    %eax,%ecx
f0121844:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012184b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121850:	0f b6 d0             	movzbl %al,%edx
f0121853:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121856:	01 d0                	add    %edx,%eax
f0121858:	48                   	dec    %eax
f0121859:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012185c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012185f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121864:	f7 75 b8             	divl   -0x48(%ebp)
f0121867:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012186a:	29 d0                	sub    %edx,%eax
f012186c:	89 c3                	mov    %eax,%ebx
f012186e:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121875:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012187a:	0f b6 c0             	movzbl %al,%eax
f012187d:	c1 e0 04             	shl    $0x4,%eax
f0121880:	89 c2                	mov    %eax,%edx
f0121882:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121885:	01 d0                	add    %edx,%eax
f0121887:	48                   	dec    %eax
f0121888:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012188b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012188e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121893:	f7 75 b0             	divl   -0x50(%ebp)
f0121896:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121899:	29 d0                	sub    %edx,%eax
f012189b:	01 d8                	add    %ebx,%eax
f012189d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01218a2:	39 c1                	cmp    %eax,%ecx
f01218a4:	74 17                	je     f01218bd <test_kfree_bestfirstfit+0x244>
f01218a6:	83 ec 04             	sub    $0x4,%esp
f01218a9:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01218ae:	68 9e 06 00 00       	push   $0x69e
f01218b3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01218b8:	e8 f3 e8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218bd:	e8 c2 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01218c2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218c5:	74 17                	je     f01218de <test_kfree_bestfirstfit+0x265>
f01218c7:	83 ec 04             	sub    $0x4,%esp
f01218ca:	68 ec 9a 13 f0       	push   $0xf0139aec
f01218cf:	68 9f 06 00 00       	push   $0x69f
f01218d4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01218d9:	e8 d2 e8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01218de:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01218e1:	e8 7c b1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01218e6:	29 c3                	sub    %eax,%ebx
f01218e8:	89 d8                	mov    %ebx,%eax
f01218ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f01218ef:	74 17                	je     f0121908 <test_kfree_bestfirstfit+0x28f>
f01218f1:	83 ec 04             	sub    $0x4,%esp
f01218f4:	68 54 9b 13 f0       	push   $0xf0139b54
f01218f9:	68 a0 06 00 00       	push   $0x6a0
f01218fe:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121903:	e8 a8 e8 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121908:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f012190f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121912:	e8 4b b1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121917:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012191a:	e8 65 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f012191f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121922:	83 ec 0c             	sub    $0xc,%esp
f0121925:	68 00 08 00 00       	push   $0x800
f012192a:	e8 c9 66 fe ff       	call   f0107ff8 <kmalloc>
f012192f:	83 c4 10             	add    $0x10,%esp
f0121932:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121938:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012193e:	89 c1                	mov    %eax,%ecx
f0121940:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0121947:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012194c:	0f b6 d0             	movzbl %al,%edx
f012194f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0121952:	01 d0                	add    %edx,%eax
f0121954:	48                   	dec    %eax
f0121955:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0121958:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012195b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121960:	f7 75 a8             	divl   -0x58(%ebp)
f0121963:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121966:	29 d0                	sub    %edx,%eax
f0121968:	89 c3                	mov    %eax,%ebx
f012196a:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121971:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121976:	0f b6 c0             	movzbl %al,%eax
f0121979:	c1 e0 04             	shl    $0x4,%eax
f012197c:	89 c2                	mov    %eax,%edx
f012197e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121981:	01 d0                	add    %edx,%eax
f0121983:	48                   	dec    %eax
f0121984:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121987:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012198a:	ba 00 00 00 00       	mov    $0x0,%edx
f012198f:	f7 75 a0             	divl   -0x60(%ebp)
f0121992:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121995:	29 d0                	sub    %edx,%eax
f0121997:	01 d8                	add    %ebx,%eax
f0121999:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012199e:	39 c1                	cmp    %eax,%ecx
f01219a0:	74 17                	je     f01219b9 <test_kfree_bestfirstfit+0x340>
f01219a2:	83 ec 04             	sub    $0x4,%esp
f01219a5:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01219aa:	68 a7 06 00 00       	push   $0x6a7
f01219af:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01219b4:	e8 f7 e7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219b9:	e8 c6 2c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01219be:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219c1:	74 17                	je     f01219da <test_kfree_bestfirstfit+0x361>
f01219c3:	83 ec 04             	sub    $0x4,%esp
f01219c6:	68 ec 9a 13 f0       	push   $0xf0139aec
f01219cb:	68 a8 06 00 00       	push   $0x6a8
f01219d0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01219d5:	e8 d6 e7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01219da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01219dd:	e8 80 b0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01219e2:	29 c3                	sub    %eax,%ebx
f01219e4:	89 d8                	mov    %ebx,%eax
f01219e6:	83 f8 01             	cmp    $0x1,%eax
f01219e9:	74 17                	je     f0121a02 <test_kfree_bestfirstfit+0x389>
f01219eb:	83 ec 04             	sub    $0x4,%esp
f01219ee:	68 54 9b 13 f0       	push   $0xf0139b54
f01219f3:	68 a9 06 00 00       	push   $0x6a9
f01219f8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01219fd:	e8 ae e7 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121a02:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0121a09:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121a0c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121a12:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121a15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121a1c:	eb 0e                	jmp    f0121a2c <test_kfree_bestfirstfit+0x3b3>
		{
			ptr[i] = 2 ;
f0121a1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121a21:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121a24:	01 d0                	add    %edx,%eax
f0121a26:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0121a29:	ff 45 f4             	incl   -0xc(%ebp)
f0121a2c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121a32:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121a35:	7f e7                	jg     f0121a1e <test_kfree_bestfirstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121a37:	e8 26 b0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121a3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121a3f:	e8 40 2c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121a44:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0121a47:	83 ec 0c             	sub    $0xc,%esp
f0121a4a:	68 00 08 00 00       	push   $0x800
f0121a4f:	e8 a4 65 fe ff       	call   f0107ff8 <kmalloc>
f0121a54:	83 c4 10             	add    $0x10,%esp
f0121a57:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a5d:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121a63:	89 c1                	mov    %eax,%ecx
f0121a65:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0121a6c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121a71:	0f b6 d0             	movzbl %al,%edx
f0121a74:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121a77:	01 d0                	add    %edx,%eax
f0121a79:	48                   	dec    %eax
f0121a7a:	89 45 90             	mov    %eax,-0x70(%ebp)
f0121a7d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121a80:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a85:	f7 75 94             	divl   -0x6c(%ebp)
f0121a88:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121a8b:	29 d0                	sub    %edx,%eax
f0121a8d:	89 c3                	mov    %eax,%ebx
f0121a8f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0121a96:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121a9b:	0f b6 c0             	movzbl %al,%eax
f0121a9e:	c1 e0 04             	shl    $0x4,%eax
f0121aa1:	89 c2                	mov    %eax,%edx
f0121aa3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121aa6:	01 d0                	add    %edx,%eax
f0121aa8:	48                   	dec    %eax
f0121aa9:	89 45 88             	mov    %eax,-0x78(%ebp)
f0121aac:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121aaf:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ab4:	f7 75 8c             	divl   -0x74(%ebp)
f0121ab7:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121aba:	29 d0                	sub    %edx,%eax
f0121abc:	01 d8                	add    %ebx,%eax
f0121abe:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121ac3:	39 c1                	cmp    %eax,%ecx
f0121ac5:	74 17                	je     f0121ade <test_kfree_bestfirstfit+0x465>
f0121ac7:	83 ec 04             	sub    $0x4,%esp
f0121aca:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0121acf:	68 b5 06 00 00       	push   $0x6b5
f0121ad4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121ad9:	e8 d2 e6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ade:	e8 a1 2b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121ae3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ae6:	74 17                	je     f0121aff <test_kfree_bestfirstfit+0x486>
f0121ae8:	83 ec 04             	sub    $0x4,%esp
f0121aeb:	68 ec 9a 13 f0       	push   $0xf0139aec
f0121af0:	68 b6 06 00 00       	push   $0x6b6
f0121af5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121afa:	e8 b1 e6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121aff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b02:	e8 5b af fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121b07:	29 c3                	sub    %eax,%ebx
f0121b09:	89 d8                	mov    %ebx,%eax
f0121b0b:	83 f8 01             	cmp    $0x1,%eax
f0121b0e:	74 17                	je     f0121b27 <test_kfree_bestfirstfit+0x4ae>
f0121b10:	83 ec 04             	sub    $0x4,%esp
f0121b13:	68 54 9b 13 f0       	push   $0xf0139b54
f0121b18:	68 b7 06 00 00       	push   $0x6b7
f0121b1d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121b22:	e8 89 e6 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121b27:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0121b2e:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121b31:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121b37:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121b3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b41:	eb 0e                	jmp    f0121b51 <test_kfree_bestfirstfit+0x4d8>
		{
			ptr[i] = 3 ;
f0121b43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121b46:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121b49:	01 d0                	add    %edx,%eax
f0121b4b:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121b4e:	ff 45 f4             	incl   -0xc(%ebp)
f0121b51:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121b57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121b5a:	7f e7                	jg     f0121b43 <test_kfree_bestfirstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121b5c:	e8 01 af fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121b61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b64:	e8 1b 2b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121b69:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121b6c:	83 ec 0c             	sub    $0xc,%esp
f0121b6f:	68 00 1c 00 00       	push   $0x1c00
f0121b74:	e8 7f 64 fe ff       	call   f0107ff8 <kmalloc>
f0121b79:	83 c4 10             	add    $0x10,%esp
f0121b7c:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121b82:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121b88:	89 c1                	mov    %eax,%ecx
f0121b8a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0121b91:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121b96:	0f b6 d0             	movzbl %al,%edx
f0121b99:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121b9c:	01 d0                	add    %edx,%eax
f0121b9e:	48                   	dec    %eax
f0121b9f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0121ba2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ba5:	ba 00 00 00 00       	mov    $0x0,%edx
f0121baa:	f7 75 84             	divl   -0x7c(%ebp)
f0121bad:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121bb0:	29 d0                	sub    %edx,%eax
f0121bb2:	89 c3                	mov    %eax,%ebx
f0121bb4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121bbb:	10 00 00 
f0121bbe:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121bc3:	0f b6 c0             	movzbl %al,%eax
f0121bc6:	c1 e0 04             	shl    $0x4,%eax
f0121bc9:	89 c2                	mov    %eax,%edx
f0121bcb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121bd1:	01 d0                	add    %edx,%eax
f0121bd3:	48                   	dec    %eax
f0121bd4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121bda:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121be0:	ba 00 00 00 00       	mov    $0x0,%edx
f0121be5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121beb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121bf1:	29 d0                	sub    %edx,%eax
f0121bf3:	01 d8                	add    %ebx,%eax
f0121bf5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121bfa:	39 c1                	cmp    %eax,%ecx
f0121bfc:	74 17                	je     f0121c15 <test_kfree_bestfirstfit+0x59c>
f0121bfe:	83 ec 04             	sub    $0x4,%esp
f0121c01:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0121c06:	68 c3 06 00 00       	push   $0x6c3
f0121c0b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121c10:	e8 9b e5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c15:	e8 6a 2a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121c1a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c1d:	74 17                	je     f0121c36 <test_kfree_bestfirstfit+0x5bd>
f0121c1f:	83 ec 04             	sub    $0x4,%esp
f0121c22:	68 ec 9a 13 f0       	push   $0xf0139aec
f0121c27:	68 c4 06 00 00       	push   $0x6c4
f0121c2c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121c31:	e8 7a e5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121c36:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121c39:	e8 24 ae fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121c3e:	29 c3                	sub    %eax,%ebx
f0121c40:	89 d8                	mov    %ebx,%eax
f0121c42:	83 f8 02             	cmp    $0x2,%eax
f0121c45:	74 17                	je     f0121c5e <test_kfree_bestfirstfit+0x5e5>
f0121c47:	83 ec 04             	sub    $0x4,%esp
f0121c4a:	68 54 9b 13 f0       	push   $0xf0139b54
f0121c4f:	68 c5 06 00 00       	push   $0x6c5
f0121c54:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121c59:	e8 52 e5 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0121c5e:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0121c65:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0121c68:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121c6e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121c71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121c78:	eb 0e                	jmp    f0121c88 <test_kfree_bestfirstfit+0x60f>
		{
			ptr[i] = 4 ;
f0121c7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121c7d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121c80:	01 d0                	add    %edx,%eax
f0121c82:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121c85:	ff 45 f4             	incl   -0xc(%ebp)
f0121c88:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121c8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121c91:	7f e7                	jg     f0121c7a <test_kfree_bestfirstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121c93:	e8 ca ad fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121c98:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c9b:	e8 e4 29 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121ca0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121ca3:	83 ec 0c             	sub    $0xc,%esp
f0121ca6:	68 00 fc 2f 00       	push   $0x2ffc00
f0121cab:	e8 48 63 fe ff       	call   f0107ff8 <kmalloc>
f0121cb0:	83 c4 10             	add    $0x10,%esp
f0121cb3:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121cb9:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121cbf:	89 c1                	mov    %eax,%ecx
f0121cc1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121cc8:	10 00 00 
f0121ccb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121cd0:	0f b6 d0             	movzbl %al,%edx
f0121cd3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121cd9:	01 d0                	add    %edx,%eax
f0121cdb:	48                   	dec    %eax
f0121cdc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121ce2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121ce8:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ced:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121cf3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121cf9:	29 d0                	sub    %edx,%eax
f0121cfb:	89 c3                	mov    %eax,%ebx
f0121cfd:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121d04:	10 00 00 
f0121d07:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121d0c:	0f b6 c0             	movzbl %al,%eax
f0121d0f:	c1 e0 04             	shl    $0x4,%eax
f0121d12:	89 c2                	mov    %eax,%edx
f0121d14:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121d1a:	01 d0                	add    %edx,%eax
f0121d1c:	48                   	dec    %eax
f0121d1d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121d23:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121d29:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d2e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121d34:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121d3a:	29 d0                	sub    %edx,%eax
f0121d3c:	01 d8                	add    %ebx,%eax
f0121d3e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121d43:	39 c1                	cmp    %eax,%ecx
f0121d45:	74 17                	je     f0121d5e <test_kfree_bestfirstfit+0x6e5>
f0121d47:	83 ec 04             	sub    $0x4,%esp
f0121d4a:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0121d4f:	68 d1 06 00 00       	push   $0x6d1
f0121d54:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121d59:	e8 52 e4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d5e:	e8 21 29 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121d63:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d66:	74 17                	je     f0121d7f <test_kfree_bestfirstfit+0x706>
f0121d68:	83 ec 04             	sub    $0x4,%esp
f0121d6b:	68 ec 9a 13 f0       	push   $0xf0139aec
f0121d70:	68 d2 06 00 00       	push   $0x6d2
f0121d75:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121d7a:	e8 31 e4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d7f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d82:	e8 db ac fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121d87:	29 c3                	sub    %eax,%ebx
f0121d89:	89 d8                	mov    %ebx,%eax
f0121d8b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121d90:	74 17                	je     f0121da9 <test_kfree_bestfirstfit+0x730>
f0121d92:	83 ec 04             	sub    $0x4,%esp
f0121d95:	68 54 9b 13 f0       	push   $0xf0139b54
f0121d9a:	68 d3 06 00 00       	push   $0x6d3
f0121d9f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121da4:	e8 07 e4 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121da9:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0121db0:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121db3:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121db9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121dbc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121dc3:	eb 0e                	jmp    f0121dd3 <test_kfree_bestfirstfit+0x75a>
		{
			ptr[i] = 5 ;
f0121dc5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121dc8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121dcb:	01 d0                	add    %edx,%eax
f0121dcd:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121dd0:	ff 45 f4             	incl   -0xc(%ebp)
f0121dd3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121dd9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ddc:	7f e7                	jg     f0121dc5 <test_kfree_bestfirstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121dde:	e8 7f ac fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121de3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121de6:	e8 99 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121deb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121dee:	83 ec 0c             	sub    $0xc,%esp
f0121df1:	68 00 fc 5f 00       	push   $0x5ffc00
f0121df6:	e8 fd 61 fe ff       	call   f0107ff8 <kmalloc>
f0121dfb:	83 c4 10             	add    $0x10,%esp
f0121dfe:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121e04:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121e0a:	89 c1                	mov    %eax,%ecx
f0121e0c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121e13:	10 00 00 
f0121e16:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121e1b:	0f b6 d0             	movzbl %al,%edx
f0121e1e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121e24:	01 d0                	add    %edx,%eax
f0121e26:	48                   	dec    %eax
f0121e27:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121e2d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121e33:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e38:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121e3e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121e44:	29 d0                	sub    %edx,%eax
f0121e46:	89 c3                	mov    %eax,%ebx
f0121e48:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121e4f:	10 00 00 
f0121e52:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121e57:	0f b6 c0             	movzbl %al,%eax
f0121e5a:	c1 e0 04             	shl    $0x4,%eax
f0121e5d:	89 c2                	mov    %eax,%edx
f0121e5f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121e65:	01 d0                	add    %edx,%eax
f0121e67:	48                   	dec    %eax
f0121e68:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121e6e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121e74:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e79:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121e7f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121e85:	29 d0                	sub    %edx,%eax
f0121e87:	01 d8                	add    %ebx,%eax
f0121e89:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121e8e:	39 c1                	cmp    %eax,%ecx
f0121e90:	74 17                	je     f0121ea9 <test_kfree_bestfirstfit+0x830>
f0121e92:	83 ec 04             	sub    $0x4,%esp
f0121e95:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0121e9a:	68 df 06 00 00       	push   $0x6df
f0121e9f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121ea4:	e8 07 e3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ea9:	e8 d6 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121eae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121eb1:	74 17                	je     f0121eca <test_kfree_bestfirstfit+0x851>
f0121eb3:	83 ec 04             	sub    $0x4,%esp
f0121eb6:	68 ec 9a 13 f0       	push   $0xf0139aec
f0121ebb:	68 e0 06 00 00       	push   $0x6e0
f0121ec0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121ec5:	e8 e6 e2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121eca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ecd:	e8 90 ab fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121ed2:	29 c3                	sub    %eax,%ebx
f0121ed4:	89 d8                	mov    %ebx,%eax
f0121ed6:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121edb:	74 17                	je     f0121ef4 <test_kfree_bestfirstfit+0x87b>
f0121edd:	83 ec 04             	sub    $0x4,%esp
f0121ee0:	68 54 9b 13 f0       	push   $0xf0139b54
f0121ee5:	68 e1 06 00 00       	push   $0x6e1
f0121eea:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121eef:	e8 bc e2 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0121ef4:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0121efb:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121efe:	e8 5f ab fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121f03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f06:	e8 79 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121f0b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121f0e:	83 ec 0c             	sub    $0xc,%esp
f0121f11:	68 00 38 00 00       	push   $0x3800
f0121f16:	e8 dd 60 fe ff       	call   f0107ff8 <kmalloc>
f0121f1b:	83 c4 10             	add    $0x10,%esp
f0121f1e:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f24:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121f2a:	89 c1                	mov    %eax,%ecx
f0121f2c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121f33:	10 00 00 
f0121f36:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121f3b:	0f b6 d0             	movzbl %al,%edx
f0121f3e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121f44:	01 d0                	add    %edx,%eax
f0121f46:	48                   	dec    %eax
f0121f47:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121f4d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121f53:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f58:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121f5e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121f64:	29 d0                	sub    %edx,%eax
f0121f66:	89 c3                	mov    %eax,%ebx
f0121f68:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121f6f:	10 00 00 
f0121f72:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121f77:	0f b6 c0             	movzbl %al,%eax
f0121f7a:	c1 e0 04             	shl    $0x4,%eax
f0121f7d:	89 c2                	mov    %eax,%edx
f0121f7f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121f85:	01 d0                	add    %edx,%eax
f0121f87:	48                   	dec    %eax
f0121f88:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121f8e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121f94:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f99:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121f9f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121fa5:	29 d0                	sub    %edx,%eax
f0121fa7:	01 d8                	add    %ebx,%eax
f0121fa9:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121fae:	39 c1                	cmp    %eax,%ecx
f0121fb0:	74 17                	je     f0121fc9 <test_kfree_bestfirstfit+0x950>
f0121fb2:	83 ec 04             	sub    $0x4,%esp
f0121fb5:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0121fba:	68 e8 06 00 00       	push   $0x6e8
f0121fbf:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121fc4:	e8 e7 e1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fc9:	e8 b6 26 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121fce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121fd1:	74 17                	je     f0121fea <test_kfree_bestfirstfit+0x971>
f0121fd3:	83 ec 04             	sub    $0x4,%esp
f0121fd6:	68 ec 9a 13 f0       	push   $0xf0139aec
f0121fdb:	68 e9 06 00 00       	push   $0x6e9
f0121fe0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0121fe5:	e8 c6 e1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121fea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121fed:	e8 70 aa fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0121ff2:	29 c3                	sub    %eax,%ebx
f0121ff4:	89 d8                	mov    %ebx,%eax
f0121ff6:	83 f8 04             	cmp    $0x4,%eax
f0121ff9:	74 17                	je     f0122012 <test_kfree_bestfirstfit+0x999>
f0121ffb:	83 ec 04             	sub    $0x4,%esp
f0121ffe:	68 54 9b 13 f0       	push   $0xf0139b54
f0122003:	68 ea 06 00 00       	push   $0x6ea
f0122008:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012200d:	e8 9e e1 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122012:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0122019:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012201c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122022:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122025:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012202c:	eb 0e                	jmp    f012203c <test_kfree_bestfirstfit+0x9c3>
		{
			ptr[i] = 7 ;
f012202e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122031:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122034:	01 d0                	add    %edx,%eax
f0122036:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122039:	ff 45 f4             	incl   -0xc(%ebp)
f012203c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122042:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122045:	7f e7                	jg     f012202e <test_kfree_bestfirstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122047:	e8 16 aa fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012204c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122052:	e8 2d 26 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122057:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f012205d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122063:	83 ec 0c             	sub    $0xc,%esp
f0122066:	50                   	push   %eax
f0122067:	e8 a6 5f fe ff       	call   f0108012 <kfree>
f012206c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012206f:	e8 10 26 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122074:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012207a:	74 17                	je     f0122093 <test_kfree_bestfirstfit+0xa1a>
f012207c:	83 ec 04             	sub    $0x4,%esp
f012207f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122084:	68 f9 06 00 00       	push   $0x6f9
f0122089:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012208e:	e8 1d e1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122093:	e8 ca a9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122098:	89 c2                	mov    %eax,%edx
f012209a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01220a0:	29 c2                	sub    %eax,%edx
f01220a2:	89 d0                	mov    %edx,%eax
f01220a4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01220a9:	74 17                	je     f01220c2 <test_kfree_bestfirstfit+0xa49>
f01220ab:	83 ec 04             	sub    $0x4,%esp
f01220ae:	68 5c a2 13 f0       	push   $0xf013a25c
f01220b3:	68 fa 06 00 00       	push   $0x6fa
f01220b8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01220bd:	e8 ee e0 fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01220c2:	e8 9b a9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01220c7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220cd:	e8 b2 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01220d2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f01220d8:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01220de:	83 ec 0c             	sub    $0xc,%esp
f01220e1:	50                   	push   %eax
f01220e2:	e8 2b 5f fe ff       	call   f0108012 <kfree>
f01220e7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220ea:	e8 95 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01220ef:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01220f5:	74 17                	je     f012210e <test_kfree_bestfirstfit+0xa95>
f01220f7:	83 ec 04             	sub    $0x4,%esp
f01220fa:	68 ec 9a 13 f0       	push   $0xf0139aec
f01220ff:	68 00 07 00 00       	push   $0x700
f0122104:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122109:	e8 a2 e0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012210e:	e8 4f a9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122113:	89 c2                	mov    %eax,%edx
f0122115:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012211b:	29 c2                	sub    %eax,%edx
f012211d:	89 d0                	mov    %edx,%eax
f012211f:	83 f8 01             	cmp    $0x1,%eax
f0122122:	74 17                	je     f012213b <test_kfree_bestfirstfit+0xac2>
f0122124:	83 ec 04             	sub    $0x4,%esp
f0122127:	68 5c a2 13 f0       	push   $0xf013a25c
f012212c:	68 01 07 00 00       	push   $0x701
f0122131:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122136:	e8 75 e0 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012213b:	e8 22 a9 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122140:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122146:	e8 39 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012214b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0122151:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0122157:	83 ec 0c             	sub    $0xc,%esp
f012215a:	50                   	push   %eax
f012215b:	e8 b2 5e fe ff       	call   f0108012 <kfree>
f0122160:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122163:	e8 1c 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122168:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012216e:	74 17                	je     f0122187 <test_kfree_bestfirstfit+0xb0e>
f0122170:	83 ec 04             	sub    $0x4,%esp
f0122173:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122178:	68 07 07 00 00       	push   $0x707
f012217d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122182:	e8 29 e0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122187:	e8 d6 a8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012218c:	89 c2                	mov    %eax,%edx
f012218e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122194:	29 c2                	sub    %eax,%edx
f0122196:	89 d0                	mov    %edx,%eax
f0122198:	3d 00 02 00 00       	cmp    $0x200,%eax
f012219d:	74 17                	je     f01221b6 <test_kfree_bestfirstfit+0xb3d>
f012219f:	83 ec 04             	sub    $0x4,%esp
f01221a2:	68 5c a2 13 f0       	push   $0xf013a25c
f01221a7:	68 08 07 00 00       	push   $0x708
f01221ac:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01221b1:	e8 fa df fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01221b6:	e8 a7 a8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01221bb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221c1:	e8 be 24 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01221c6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01221cc:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01221d2:	83 ec 0c             	sub    $0xc,%esp
f01221d5:	50                   	push   %eax
f01221d6:	e8 37 5e fe ff       	call   f0108012 <kfree>
f01221db:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01221de:	e8 a1 24 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01221e3:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01221e9:	74 17                	je     f0122202 <test_kfree_bestfirstfit+0xb89>
f01221eb:	83 ec 04             	sub    $0x4,%esp
f01221ee:	68 ec 9a 13 f0       	push   $0xf0139aec
f01221f3:	68 0e 07 00 00       	push   $0x70e
f01221f8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01221fd:	e8 ae df fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122202:	e8 5b a8 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122207:	89 c2                	mov    %eax,%edx
f0122209:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012220f:	29 c2                	sub    %eax,%edx
f0122211:	89 d0                	mov    %edx,%eax
f0122213:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122218:	74 17                	je     f0122231 <test_kfree_bestfirstfit+0xbb8>
f012221a:	83 ec 04             	sub    $0x4,%esp
f012221d:	68 5c a2 13 f0       	push   $0xf013a25c
f0122222:	68 0f 07 00 00       	push   $0x70f
f0122227:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012222c:	e8 7f df fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122231:	83 ec 0c             	sub    $0xc,%esp
f0122234:	68 94 a2 13 f0       	push   $0xf013a294
f0122239:	e8 f3 eb fd ff       	call   f0100e31 <cprintf>
f012223e:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122241:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0122247:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012224a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122251:	eb 1e                	jmp    f0122271 <test_kfree_bestfirstfit+0xbf8>
		{
			sums[3] += ptr[i] ;
f0122253:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122259:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012225c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012225f:	01 c8                	add    %ecx,%eax
f0122261:	8a 00                	mov    (%eax),%al
f0122263:	0f be c0             	movsbl %al,%eax
f0122266:	01 d0                	add    %edx,%eax
f0122268:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012226e:	ff 45 f4             	incl   -0xc(%ebp)
f0122271:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122277:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012227a:	7f d7                	jg     f0122253 <test_kfree_bestfirstfit+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012227c:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122282:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122288:	89 c1                	mov    %eax,%ecx
f012228a:	01 c9                	add    %ecx,%ecx
f012228c:	01 c8                	add    %ecx,%eax
f012228e:	39 c2                	cmp    %eax,%edx
f0122290:	74 17                	je     f01222a9 <test_kfree_bestfirstfit+0xc30>
f0122292:	83 ec 04             	sub    $0x4,%esp
f0122295:	68 b8 a2 13 f0       	push   $0xf013a2b8
f012229a:	68 1c 07 00 00       	push   $0x71c
f012229f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01222a4:	e8 07 df fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01222a9:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01222af:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01222b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01222b9:	eb 1e                	jmp    f01222d9 <test_kfree_bestfirstfit+0xc60>
		{
			sums[4] += ptr[i] ;
f01222bb:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f01222c1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01222c4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01222c7:	01 c8                	add    %ecx,%eax
f01222c9:	8a 00                	mov    (%eax),%al
f01222cb:	0f be c0             	movsbl %al,%eax
f01222ce:	01 d0                	add    %edx,%eax
f01222d0:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01222d6:	ff 45 f4             	incl   -0xc(%ebp)
f01222d9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01222df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01222e2:	7f d7                	jg     f01222bb <test_kfree_bestfirstfit+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01222e4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01222ea:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f01222f0:	c1 e2 02             	shl    $0x2,%edx
f01222f3:	39 d0                	cmp    %edx,%eax
f01222f5:	74 17                	je     f012230e <test_kfree_bestfirstfit+0xc95>
f01222f7:	83 ec 04             	sub    $0x4,%esp
f01222fa:	68 b8 a2 13 f0       	push   $0xf013a2b8
f01222ff:	68 24 07 00 00       	push   $0x724
f0122304:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122309:	e8 a2 de fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012230e:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122314:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122317:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012231e:	eb 1e                	jmp    f012233e <test_kfree_bestfirstfit+0xcc5>
		{
			sums[5] += ptr[i] ;
f0122320:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0122326:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122329:	8b 45 98             	mov    -0x68(%ebp),%eax
f012232c:	01 c8                	add    %ecx,%eax
f012232e:	8a 00                	mov    (%eax),%al
f0122330:	0f be c0             	movsbl %al,%eax
f0122333:	01 d0                	add    %edx,%eax
f0122335:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012233b:	ff 45 f4             	incl   -0xc(%ebp)
f012233e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122344:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122347:	7f d7                	jg     f0122320 <test_kfree_bestfirstfit+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122349:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f012234f:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0122355:	89 d0                	mov    %edx,%eax
f0122357:	c1 e0 02             	shl    $0x2,%eax
f012235a:	01 d0                	add    %edx,%eax
f012235c:	39 c1                	cmp    %eax,%ecx
f012235e:	74 17                	je     f0122377 <test_kfree_bestfirstfit+0xcfe>
f0122360:	83 ec 04             	sub    $0x4,%esp
f0122363:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0122368:	68 2c 07 00 00       	push   $0x72c
f012236d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122372:	e8 39 de fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122377:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012237d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122380:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122387:	eb 1e                	jmp    f01223a7 <test_kfree_bestfirstfit+0xd2e>
		{
			sums[7] += ptr[i] ;
f0122389:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f012238f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122392:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122395:	01 c8                	add    %ecx,%eax
f0122397:	8a 00                	mov    (%eax),%al
f0122399:	0f be c0             	movsbl %al,%eax
f012239c:	01 d0                	add    %edx,%eax
f012239e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01223a4:	ff 45 f4             	incl   -0xc(%ebp)
f01223a7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01223ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01223b0:	7f d7                	jg     f0122389 <test_kfree_bestfirstfit+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01223b2:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f01223b8:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f01223be:	89 d0                	mov    %edx,%eax
f01223c0:	01 c0                	add    %eax,%eax
f01223c2:	01 d0                	add    %edx,%eax
f01223c4:	01 c0                	add    %eax,%eax
f01223c6:	01 d0                	add    %edx,%eax
f01223c8:	39 c1                	cmp    %eax,%ecx
f01223ca:	74 17                	je     f01223e3 <test_kfree_bestfirstfit+0xd6a>
f01223cc:	83 ec 04             	sub    $0x4,%esp
f01223cf:	68 b8 a2 13 f0       	push   $0xf013a2b8
f01223d4:	68 34 07 00 00       	push   $0x734
f01223d9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01223de:	e8 cd dd fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f01223e3:	83 ec 0c             	sub    $0xc,%esp
f01223e6:	68 eb a2 13 f0       	push   $0xf013a2eb
f01223eb:	e8 41 ea fd ff       	call   f0100e31 <cprintf>
f01223f0:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01223f3:	e8 6a a6 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01223f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223fb:	e8 84 22 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122400:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122403:	83 ec 0c             	sub    $0xc,%esp
f0122406:	68 00 00 30 00       	push   $0x300000
f012240b:	e8 e8 5b fe ff       	call   f0107ff8 <kmalloc>
f0122410:	83 c4 10             	add    $0x10,%esp
f0122413:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122419:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012241f:	89 c1                	mov    %eax,%ecx
f0122421:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122428:	10 00 00 
f012242b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122430:	0f b6 d0             	movzbl %al,%edx
f0122433:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122439:	01 d0                	add    %edx,%eax
f012243b:	48                   	dec    %eax
f012243c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122442:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122448:	ba 00 00 00 00       	mov    $0x0,%edx
f012244d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122453:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122459:	29 d0                	sub    %edx,%eax
f012245b:	89 c3                	mov    %eax,%ebx
f012245d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122464:	10 00 00 
f0122467:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012246c:	0f b6 c0             	movzbl %al,%eax
f012246f:	c1 e0 04             	shl    $0x4,%eax
f0122472:	89 c2                	mov    %eax,%edx
f0122474:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012247a:	01 d0                	add    %edx,%eax
f012247c:	48                   	dec    %eax
f012247d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122483:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122489:	ba 00 00 00 00       	mov    $0x0,%edx
f012248e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122494:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012249a:	29 d0                	sub    %edx,%eax
f012249c:	01 d8                	add    %ebx,%eax
f012249e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01224a3:	39 c1                	cmp    %eax,%ecx
f01224a5:	74 17                	je     f01224be <test_kfree_bestfirstfit+0xe45>
f01224a7:	83 ec 04             	sub    $0x4,%esp
f01224aa:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01224af:	68 3f 07 00 00       	push   $0x73f
f01224b4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01224b9:	e8 f2 dc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224be:	e8 c1 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01224c3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01224c6:	74 17                	je     f01224df <test_kfree_bestfirstfit+0xe66>
f01224c8:	83 ec 04             	sub    $0x4,%esp
f01224cb:	68 ec 9a 13 f0       	push   $0xf0139aec
f01224d0:	68 40 07 00 00       	push   $0x740
f01224d5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01224da:	e8 d1 dc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01224df:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01224e2:	e8 7b a5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01224e7:	29 c3                	sub    %eax,%ebx
f01224e9:	89 d8                	mov    %ebx,%eax
f01224eb:	3d 00 03 00 00       	cmp    $0x300,%eax
f01224f0:	74 17                	je     f0122509 <test_kfree_bestfirstfit+0xe90>
f01224f2:	83 ec 04             	sub    $0x4,%esp
f01224f5:	68 54 9b 13 f0       	push   $0xf0139b54
f01224fa:	68 41 07 00 00       	push   $0x741
f01224ff:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122504:	e8 a7 dc fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122509:	c7 85 e0 fe ff ff ff 	movl   $0x2fffff,-0x120(%ebp)
f0122510:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122513:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122519:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012251c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122523:	eb 0e                	jmp    f0122533 <test_kfree_bestfirstfit+0xeba>
		{
			ptr[i] = 8 ;
f0122525:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122528:	8b 45 98             	mov    -0x68(%ebp),%eax
f012252b:	01 d0                	add    %edx,%eax
f012252d:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122530:	ff 45 f4             	incl   -0xc(%ebp)
f0122533:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122539:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012253c:	7f e7                	jg     f0122525 <test_kfree_bestfirstfit+0xeac>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012253e:	e8 1f a5 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122543:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122546:	e8 39 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012254b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f012254e:	83 ec 0c             	sub    $0xc,%esp
f0122551:	68 00 08 00 00       	push   $0x800
f0122556:	e8 9d 5a fe ff       	call   f0107ff8 <kmalloc>
f012255b:	83 c4 10             	add    $0x10,%esp
f012255e:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122564:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012256a:	89 c1                	mov    %eax,%ecx
f012256c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122573:	10 00 00 
f0122576:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012257b:	0f b6 d0             	movzbl %al,%edx
f012257e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122584:	01 d0                	add    %edx,%eax
f0122586:	48                   	dec    %eax
f0122587:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012258d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122593:	ba 00 00 00 00       	mov    $0x0,%edx
f0122598:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012259e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01225a4:	29 d0                	sub    %edx,%eax
f01225a6:	89 c3                	mov    %eax,%ebx
f01225a8:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01225af:	10 00 00 
f01225b2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01225b7:	0f b6 c0             	movzbl %al,%eax
f01225ba:	c1 e0 04             	shl    $0x4,%eax
f01225bd:	89 c2                	mov    %eax,%edx
f01225bf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01225c5:	01 d0                	add    %edx,%eax
f01225c7:	48                   	dec    %eax
f01225c8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01225ce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01225d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01225d9:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01225df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01225e5:	29 d0                	sub    %edx,%eax
f01225e7:	01 d8                	add    %ebx,%eax
f01225e9:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01225ee:	39 c1                	cmp    %eax,%ecx
f01225f0:	74 17                	je     f0122609 <test_kfree_bestfirstfit+0xf90>
f01225f2:	83 ec 04             	sub    $0x4,%esp
f01225f5:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01225fa:	68 4d 07 00 00       	push   $0x74d
f01225ff:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122604:	e8 a7 db fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122609:	e8 76 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012260e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122611:	74 17                	je     f012262a <test_kfree_bestfirstfit+0xfb1>
f0122613:	83 ec 04             	sub    $0x4,%esp
f0122616:	68 ec 9a 13 f0       	push   $0xf0139aec
f012261b:	68 4e 07 00 00       	push   $0x74e
f0122620:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122625:	e8 86 db fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012262a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012262d:	e8 30 a4 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122632:	29 c3                	sub    %eax,%ebx
f0122634:	89 d8                	mov    %ebx,%eax
f0122636:	83 f8 01             	cmp    $0x1,%eax
f0122639:	74 17                	je     f0122652 <test_kfree_bestfirstfit+0xfd9>
f012263b:	83 ec 04             	sub    $0x4,%esp
f012263e:	68 54 9b 13 f0       	push   $0xf0139b54
f0122643:	68 4f 07 00 00       	push   $0x74f
f0122648:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012264d:	e8 5e db fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122652:	c7 85 e4 fe ff ff ff 	movl   $0x7ff,-0x11c(%ebp)
f0122659:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f012265c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122662:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122665:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012266c:	eb 0e                	jmp    f012267c <test_kfree_bestfirstfit+0x1003>
		{
			ptr[i] = 9 ;
f012266e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122671:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122674:	01 d0                	add    %edx,%eax
f0122676:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0122679:	ff 45 f4             	incl   -0xc(%ebp)
f012267c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122682:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122685:	7f e7                	jg     f012266e <test_kfree_bestfirstfit+0xff5>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122687:	e8 d6 a3 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012268c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012268f:	e8 f0 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122694:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122697:	83 ec 0c             	sub    $0xc,%esp
f012269a:	68 00 00 10 00       	push   $0x100000
f012269f:	e8 54 59 fe ff       	call   f0107ff8 <kmalloc>
f01226a4:	83 c4 10             	add    $0x10,%esp
f01226a7:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01226ad:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01226b3:	89 c1                	mov    %eax,%ecx
f01226b5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01226bc:	10 00 00 
f01226bf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01226c4:	0f b6 d0             	movzbl %al,%edx
f01226c7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01226cd:	01 d0                	add    %edx,%eax
f01226cf:	48                   	dec    %eax
f01226d0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01226d6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01226dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01226e1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01226e7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01226ed:	29 d0                	sub    %edx,%eax
f01226ef:	89 c3                	mov    %eax,%ebx
f01226f1:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01226f8:	10 00 00 
f01226fb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122700:	0f b6 c0             	movzbl %al,%eax
f0122703:	c1 e0 04             	shl    $0x4,%eax
f0122706:	89 c2                	mov    %eax,%edx
f0122708:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012270e:	01 d0                	add    %edx,%eax
f0122710:	48                   	dec    %eax
f0122711:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122717:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012271d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122722:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122728:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012272e:	29 d0                	sub    %edx,%eax
f0122730:	01 d8                	add    %ebx,%eax
f0122732:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122737:	39 c1                	cmp    %eax,%ecx
f0122739:	74 17                	je     f0122752 <test_kfree_bestfirstfit+0x10d9>
f012273b:	83 ec 04             	sub    $0x4,%esp
f012273e:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0122743:	68 5b 07 00 00       	push   $0x75b
f0122748:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012274d:	e8 5e da fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122752:	e8 2d 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122757:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012275a:	74 17                	je     f0122773 <test_kfree_bestfirstfit+0x10fa>
f012275c:	83 ec 04             	sub    $0x4,%esp
f012275f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122764:	68 5c 07 00 00       	push   $0x75c
f0122769:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012276e:	e8 3d da fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122773:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122776:	e8 e7 a2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012277b:	29 c3                	sub    %eax,%ebx
f012277d:	89 d8                	mov    %ebx,%eax
f012277f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122784:	74 17                	je     f012279d <test_kfree_bestfirstfit+0x1124>
f0122786:	83 ec 04             	sub    $0x4,%esp
f0122789:	68 54 9b 13 f0       	push   $0xf0139b54
f012278e:	68 5d 07 00 00       	push   $0x75d
f0122793:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122798:	e8 13 da fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f012279d:	c7 85 e8 fe ff ff ff 	movl   $0xfffff,-0x118(%ebp)
f01227a4:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f01227a7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01227ad:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f01227b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01227b7:	eb 0e                	jmp    f01227c7 <test_kfree_bestfirstfit+0x114e>
		{
			ptr[i] = 10 ;
f01227b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01227bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01227bf:	01 d0                	add    %edx,%eax
f01227c1:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01227c4:	ff 45 f4             	incl   -0xc(%ebp)
f01227c7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01227cd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01227d0:	7f e7                	jg     f01227b9 <test_kfree_bestfirstfit+0x1140>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f01227d2:	83 ec 0c             	sub    $0xc,%esp
f01227d5:	68 f2 a2 13 f0       	push   $0xf013a2f2
f01227da:	e8 52 e6 fd ff       	call   f0100e31 <cprintf>
f01227df:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01227e2:	e8 7b a2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01227e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227ea:	e8 95 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01227ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01227f2:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01227f8:	83 ec 0c             	sub    $0xc,%esp
f01227fb:	50                   	push   %eax
f01227fc:	e8 11 58 fe ff       	call   f0108012 <kfree>
f0122801:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122804:	e8 7b 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122809:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012280c:	74 17                	je     f0122825 <test_kfree_bestfirstfit+0x11ac>
f012280e:	83 ec 04             	sub    $0x4,%esp
f0122811:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122816:	68 6d 07 00 00       	push   $0x76d
f012281b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122820:	e8 8b d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122825:	e8 38 a2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012282a:	89 c2                	mov    %eax,%edx
f012282c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012282f:	29 c2                	sub    %eax,%edx
f0122831:	89 d0                	mov    %edx,%eax
f0122833:	83 f8 02             	cmp    $0x2,%eax
f0122836:	74 17                	je     f012284f <test_kfree_bestfirstfit+0x11d6>
f0122838:	83 ec 04             	sub    $0x4,%esp
f012283b:	68 5c a2 13 f0       	push   $0xf013a25c
f0122840:	68 6e 07 00 00       	push   $0x76e
f0122845:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012284a:	e8 61 d9 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012284f:	e8 0e a2 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122854:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122857:	e8 28 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f012285c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f012285f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122865:	83 ec 0c             	sub    $0xc,%esp
f0122868:	50                   	push   %eax
f0122869:	e8 a4 57 fe ff       	call   f0108012 <kfree>
f012286e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122871:	e8 0e 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122876:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122879:	74 17                	je     f0122892 <test_kfree_bestfirstfit+0x1219>
f012287b:	83 ec 04             	sub    $0x4,%esp
f012287e:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122883:	68 74 07 00 00       	push   $0x774
f0122888:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012288d:	e8 1e d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122892:	e8 cb a1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122897:	89 c2                	mov    %eax,%edx
f0122899:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012289c:	29 c2                	sub    %eax,%edx
f012289e:	89 d0                	mov    %edx,%eax
f01228a0:	3d 00 03 00 00       	cmp    $0x300,%eax
f01228a5:	74 17                	je     f01228be <test_kfree_bestfirstfit+0x1245>
f01228a7:	83 ec 04             	sub    $0x4,%esp
f01228aa:	68 5c a2 13 f0       	push   $0xf013a25c
f01228af:	68 75 07 00 00       	push   $0x775
f01228b4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01228b9:	e8 f2 d8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01228be:	e8 9f a1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01228c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228c6:	e8 b9 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01228cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01228ce:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01228d4:	83 ec 0c             	sub    $0xc,%esp
f01228d7:	50                   	push   %eax
f01228d8:	e8 35 57 fe ff       	call   f0108012 <kfree>
f01228dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228e0:	e8 9f 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01228e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228e8:	74 17                	je     f0122901 <test_kfree_bestfirstfit+0x1288>
f01228ea:	83 ec 04             	sub    $0x4,%esp
f01228ed:	68 ec 9a 13 f0       	push   $0xf0139aec
f01228f2:	68 7b 07 00 00       	push   $0x77b
f01228f7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01228fc:	e8 af d8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122901:	e8 5c a1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122906:	89 c2                	mov    %eax,%edx
f0122908:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012290b:	29 c2                	sub    %eax,%edx
f012290d:	89 d0                	mov    %edx,%eax
f012290f:	83 f8 01             	cmp    $0x1,%eax
f0122912:	74 17                	je     f012292b <test_kfree_bestfirstfit+0x12b2>
f0122914:	83 ec 04             	sub    $0x4,%esp
f0122917:	68 5c a2 13 f0       	push   $0xf013a25c
f012291c:	68 7c 07 00 00       	push   $0x77c
f0122921:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122926:	e8 85 d8 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012292b:	e8 32 a1 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122930:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122933:	e8 4c 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122938:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012293b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122941:	83 ec 0c             	sub    $0xc,%esp
f0122944:	50                   	push   %eax
f0122945:	e8 c8 56 fe ff       	call   f0108012 <kfree>
f012294a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012294d:	e8 32 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122952:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122955:	74 17                	je     f012296e <test_kfree_bestfirstfit+0x12f5>
f0122957:	83 ec 04             	sub    $0x4,%esp
f012295a:	68 ec 9a 13 f0       	push   $0xf0139aec
f012295f:	68 82 07 00 00       	push   $0x782
f0122964:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122969:	e8 42 d8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f012296e:	e8 ef a0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122973:	89 c2                	mov    %eax,%edx
f0122975:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122978:	29 c2                	sub    %eax,%edx
f012297a:	89 d0                	mov    %edx,%eax
f012297c:	83 f8 04             	cmp    $0x4,%eax
f012297f:	74 17                	je     f0122998 <test_kfree_bestfirstfit+0x131f>
f0122981:	83 ec 04             	sub    $0x4,%esp
f0122984:	68 5c a2 13 f0       	push   $0xf013a25c
f0122989:	68 83 07 00 00       	push   $0x783
f012298e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122993:	e8 18 d8 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122998:	e8 c5 a0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012299d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229a0:	e8 df 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01229a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01229a8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01229ae:	83 ec 0c             	sub    $0xc,%esp
f01229b1:	50                   	push   %eax
f01229b2:	e8 5b 56 fe ff       	call   f0108012 <kfree>
f01229b7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229ba:	e8 c5 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01229bf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229c2:	74 17                	je     f01229db <test_kfree_bestfirstfit+0x1362>
f01229c4:	83 ec 04             	sub    $0x4,%esp
f01229c7:	68 ec 9a 13 f0       	push   $0xf0139aec
f01229cc:	68 89 07 00 00       	push   $0x789
f01229d1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01229d6:	e8 d5 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01229db:	e8 82 a0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01229e0:	89 c2                	mov    %eax,%edx
f01229e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01229e5:	29 c2                	sub    %eax,%edx
f01229e7:	89 d0                	mov    %edx,%eax
f01229e9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01229ee:	74 17                	je     f0122a07 <test_kfree_bestfirstfit+0x138e>
f01229f0:	83 ec 04             	sub    $0x4,%esp
f01229f3:	68 5c a2 13 f0       	push   $0xf013a25c
f01229f8:	68 8a 07 00 00       	push   $0x78a
f01229fd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122a02:	e8 a9 d7 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a07:	e8 56 a0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122a0c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a0f:	e8 70 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a14:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122a17:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122a1d:	83 ec 0c             	sub    $0xc,%esp
f0122a20:	50                   	push   %eax
f0122a21:	e8 ec 55 fe ff       	call   f0108012 <kfree>
f0122a26:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a29:	e8 56 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a2e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a31:	74 17                	je     f0122a4a <test_kfree_bestfirstfit+0x13d1>
f0122a33:	83 ec 04             	sub    $0x4,%esp
f0122a36:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122a3b:	68 90 07 00 00       	push   $0x790
f0122a40:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122a45:	e8 66 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122a4a:	e8 13 a0 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122a4f:	89 c2                	mov    %eax,%edx
f0122a51:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a54:	29 c2                	sub    %eax,%edx
f0122a56:	89 d0                	mov    %edx,%eax
f0122a58:	83 f8 01             	cmp    $0x1,%eax
f0122a5b:	74 17                	je     f0122a74 <test_kfree_bestfirstfit+0x13fb>
f0122a5d:	83 ec 04             	sub    $0x4,%esp
f0122a60:	68 5c a2 13 f0       	push   $0xf013a25c
f0122a65:	68 91 07 00 00       	push   $0x791
f0122a6a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122a6f:	e8 3c d7 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a74:	e8 e9 9f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122a79:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a7c:	e8 03 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a81:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122a84:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122a8a:	83 ec 0c             	sub    $0xc,%esp
f0122a8d:	50                   	push   %eax
f0122a8e:	e8 7f 55 fe ff       	call   f0108012 <kfree>
f0122a93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a96:	e8 e9 1b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a9b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a9e:	74 17                	je     f0122ab7 <test_kfree_bestfirstfit+0x143e>
f0122aa0:	83 ec 04             	sub    $0x4,%esp
f0122aa3:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122aa8:	68 97 07 00 00       	push   $0x797
f0122aad:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122ab2:	e8 f9 d6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122ab7:	e8 a6 9f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122abc:	89 c2                	mov    %eax,%edx
f0122abe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122ac1:	29 c2                	sub    %eax,%edx
f0122ac3:	89 d0                	mov    %edx,%eax
f0122ac5:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122aca:	74 17                	je     f0122ae3 <test_kfree_bestfirstfit+0x146a>
f0122acc:	83 ec 04             	sub    $0x4,%esp
f0122acf:	68 5c a2 13 f0       	push   $0xf013a25c
f0122ad4:	68 98 07 00 00       	push   $0x798
f0122ad9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122ade:	e8 cd d6 fd ff       	call   f01001b0 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122ae3:	e8 7a 9f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122ae8:	89 c2                	mov    %eax,%edx
f0122aea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122aed:	39 c2                	cmp    %eax,%edx
f0122aef:	74 17                	je     f0122b08 <test_kfree_bestfirstfit+0x148f>
f0122af1:	83 ec 04             	sub    $0x4,%esp
f0122af4:	68 fc a2 13 f0       	push   $0xf013a2fc
f0122af9:	68 9a 07 00 00       	push   $0x79a
f0122afe:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122b03:	e8 a8 d6 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f0122b08:	83 ec 0c             	sub    $0xc,%esp
f0122b0b:	68 30 a3 13 f0       	push   $0xf013a330
f0122b10:	e8 1c e3 fd ff       	call   f0100e31 <cprintf>
f0122b15:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0122b18:	83 ec 0c             	sub    $0xc,%esp
f0122b1b:	6a 03                	push   $0x3
f0122b1d:	e8 db a3 fe ff       	call   f010cefd <sys_bypassPageFault>
f0122b22:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122b25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b2c:	e9 82 00 00 00       	jmp    f0122bb3 <test_kfree_bestfirstfit+0x153a>
		{
			ptr = (char *) ptr_allocations[i];
f0122b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b34:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f0122b3b:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0122b3e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122b41:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122b44:	e8 a2 a3 fe ff       	call   f010ceeb <sys_rcr2>
f0122b49:	89 c2                	mov    %eax,%edx
f0122b4b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122b4e:	39 c2                	cmp    %eax,%edx
f0122b50:	74 17                	je     f0122b69 <test_kfree_bestfirstfit+0x14f0>
f0122b52:	83 ec 04             	sub    $0x4,%esp
f0122b55:	68 38 a3 13 f0       	push   $0xf013a338
f0122b5a:	68 a9 07 00 00       	push   $0x7a9
f0122b5f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122b64:	e8 47 d6 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0122b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b6c:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122b73:	89 c2                	mov    %eax,%edx
f0122b75:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122b78:	01 d0                	add    %edx,%eax
f0122b7a:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122b7d:	e8 69 a3 fe ff       	call   f010ceeb <sys_rcr2>
f0122b82:	89 c2                	mov    %eax,%edx
f0122b84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b87:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122b8e:	89 c1                	mov    %eax,%ecx
f0122b90:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122b93:	01 c8                	add    %ecx,%eax
f0122b95:	39 c2                	cmp    %eax,%edx
f0122b97:	74 17                	je     f0122bb0 <test_kfree_bestfirstfit+0x1537>
f0122b99:	83 ec 04             	sub    $0x4,%esp
f0122b9c:	68 38 a3 13 f0       	push   $0xf013a338
f0122ba1:	68 ab 07 00 00       	push   $0x7ab
f0122ba6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122bab:	e8 00 d6 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122bb0:	ff 45 f4             	incl   -0xc(%ebp)
f0122bb3:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122bb7:	0f 8e 74 ff ff ff    	jle    f0122b31 <test_kfree_bestfirstfit+0x14b8>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122bbd:	83 ec 0c             	sub    $0xc,%esp
f0122bc0:	6a 00                	push   $0x0
f0122bc2:	e8 36 a3 fe ff       	call   f010cefd <sys_bypassPageFault>
f0122bc7:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122bca:	83 ec 0c             	sub    $0xc,%esp
f0122bcd:	68 7d a3 13 f0       	push   $0xf013a37d
f0122bd2:	e8 5a e2 fd ff       	call   f0100e31 <cprintf>
f0122bd7:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122bda:	e8 83 9e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122bdf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122be2:	e8 9d 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122be7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122bea:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122bf0:	83 ec 0c             	sub    $0xc,%esp
f0122bf3:	50                   	push   %eax
f0122bf4:	e8 19 54 fe ff       	call   f0108012 <kfree>
f0122bf9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122bfc:	e8 83 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c01:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c04:	74 17                	je     f0122c1d <test_kfree_bestfirstfit+0x15a4>
f0122c06:	83 ec 04             	sub    $0x4,%esp
f0122c09:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122c0e:	68 b9 07 00 00       	push   $0x7b9
f0122c13:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122c18:	e8 93 d5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122c1d:	e8 40 9e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122c22:	89 c2                	mov    %eax,%edx
f0122c24:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c27:	39 c2                	cmp    %eax,%edx
f0122c29:	74 17                	je     f0122c42 <test_kfree_bestfirstfit+0x15c9>
f0122c2b:	83 ec 04             	sub    $0x4,%esp
f0122c2e:	68 84 a3 13 f0       	push   $0xf013a384
f0122c33:	68 ba 07 00 00       	push   $0x7ba
f0122c38:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122c3d:	e8 6e d5 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122c42:	e8 1b 9e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122c47:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c4a:	e8 35 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c4f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122c52:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122c58:	83 ec 0c             	sub    $0xc,%esp
f0122c5b:	50                   	push   %eax
f0122c5c:	e8 b1 53 fe ff       	call   f0108012 <kfree>
f0122c61:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c64:	e8 1b 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c69:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c6c:	74 17                	je     f0122c85 <test_kfree_bestfirstfit+0x160c>
f0122c6e:	83 ec 04             	sub    $0x4,%esp
f0122c71:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122c76:	68 c0 07 00 00       	push   $0x7c0
f0122c7b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122c80:	e8 2b d5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122c85:	e8 d8 9d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122c8a:	89 c2                	mov    %eax,%edx
f0122c8c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c8f:	39 c2                	cmp    %eax,%edx
f0122c91:	74 17                	je     f0122caa <test_kfree_bestfirstfit+0x1631>
f0122c93:	83 ec 04             	sub    $0x4,%esp
f0122c96:	68 84 a3 13 f0       	push   $0xf013a384
f0122c9b:	68 c1 07 00 00       	push   $0x7c1
f0122ca0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122ca5:	e8 06 d5 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122caa:	e8 b3 9d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122caf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cb2:	e8 cd 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122cb7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122cba:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122cc0:	83 ec 0c             	sub    $0xc,%esp
f0122cc3:	50                   	push   %eax
f0122cc4:	e8 49 53 fe ff       	call   f0108012 <kfree>
f0122cc9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ccc:	e8 b3 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122cd1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122cd4:	74 17                	je     f0122ced <test_kfree_bestfirstfit+0x1674>
f0122cd6:	83 ec 04             	sub    $0x4,%esp
f0122cd9:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122cde:	68 c7 07 00 00       	push   $0x7c7
f0122ce3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122ce8:	e8 c3 d4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122ced:	e8 70 9d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122cf2:	89 c2                	mov    %eax,%edx
f0122cf4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122cf7:	39 c2                	cmp    %eax,%edx
f0122cf9:	74 17                	je     f0122d12 <test_kfree_bestfirstfit+0x1699>
f0122cfb:	83 ec 04             	sub    $0x4,%esp
f0122cfe:	68 84 a3 13 f0       	push   $0xf013a384
f0122d03:	68 c8 07 00 00       	push   $0x7c8
f0122d08:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122d0d:	e8 9e d4 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d12:	e8 4b 9d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122d17:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d1a:	e8 65 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122d1f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122d22:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122d28:	83 ec 0c             	sub    $0xc,%esp
f0122d2b:	50                   	push   %eax
f0122d2c:	e8 e1 52 fe ff       	call   f0108012 <kfree>
f0122d31:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d34:	e8 4b 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122d39:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d3c:	74 17                	je     f0122d55 <test_kfree_bestfirstfit+0x16dc>
f0122d3e:	83 ec 04             	sub    $0x4,%esp
f0122d41:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122d46:	68 ce 07 00 00       	push   $0x7ce
f0122d4b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122d50:	e8 5b d4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122d55:	e8 08 9d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122d5a:	89 c2                	mov    %eax,%edx
f0122d5c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122d5f:	39 c2                	cmp    %eax,%edx
f0122d61:	74 17                	je     f0122d7a <test_kfree_bestfirstfit+0x1701>
f0122d63:	83 ec 04             	sub    $0x4,%esp
f0122d66:	68 84 a3 13 f0       	push   $0xf013a384
f0122d6b:	68 cf 07 00 00       	push   $0x7cf
f0122d70:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122d75:	e8 36 d4 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0122d7a:	83 ec 0c             	sub    $0xc,%esp
f0122d7d:	68 cb a3 13 f0       	push   $0xf013a3cb
f0122d82:	e8 aa e0 fd ff       	call   f0100e31 <cprintf>
f0122d87:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122d8a:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122d91:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122d98:	eb 48                	jmp    f0122de2 <test_kfree_bestfirstfit+0x1769>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122d9a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122d9d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0122da2:	83 ec 04             	sub    $0x4,%esp
f0122da5:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0122dab:	51                   	push   %ecx
f0122dac:	52                   	push   %edx
f0122dad:	50                   	push   %eax
f0122dae:	e8 34 47 fe ff       	call   f01074e7 <get_page_table>
f0122db3:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122db6:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0122dbc:	85 c0                	test   %eax,%eax
f0122dbe:	75 17                	jne    f0122dd7 <test_kfree_bestfirstfit+0x175e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122dc0:	83 ec 04             	sub    $0x4,%esp
f0122dc3:	68 d4 a3 13 f0       	push   $0xf013a3d4
f0122dc8:	68 dd 07 00 00       	push   $0x7dd
f0122dcd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122dd2:	e8 d9 d3 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122dd7:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122dde:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122de2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122de6:	78 b2                	js     f0122d9a <test_kfree_bestfirstfit+0x1721>
f0122de8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122dec:	7f 09                	jg     f0122df7 <test_kfree_bestfirstfit+0x177e>
f0122dee:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122df5:	76 a3                	jbe    f0122d9a <test_kfree_bestfirstfit+0x1721>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0122df7:	83 ec 0c             	sub    $0xc,%esp
f0122dfa:	68 b6 9c 13 f0       	push   $0xf0139cb6
f0122dff:	e8 2d e0 fd ff       	call   f0100e31 <cprintf>
f0122e04:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122e07:	83 ec 0c             	sub    $0xc,%esp
f0122e0a:	68 3c a4 13 f0       	push   $0xf013a43c
f0122e0f:	e8 1d e0 fd ff       	call   f0100e31 <cprintf>
f0122e14:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122e17:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0122e1c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122e1f:	5b                   	pop    %ebx
f0122e20:	5f                   	pop    %edi
f0122e21:	5d                   	pop    %ebp
f0122e22:	c3                   	ret    

f0122e23 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122e23:	55                   	push   %ebp
f0122e24:	89 e5                	mov    %esp,%ebp
f0122e26:	57                   	push   %edi
f0122e27:	56                   	push   %esi
f0122e28:	53                   	push   %ebx
f0122e29:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f0122e2f:	83 ec 0c             	sub    $0xc,%esp
f0122e32:	68 14 9a 13 f0       	push   $0xf0139a14
f0122e37:	e8 f5 df fd ff       	call   f0100e31 <cprintf>
f0122e3c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122e3f:	83 ec 0c             	sub    $0xc,%esp
f0122e42:	68 44 9a 13 f0       	push   $0xf0139a44
f0122e47:	e8 e5 df fd ff       	call   f0100e31 <cprintf>
f0122e4c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122e4f:	83 ec 0c             	sub    $0xc,%esp
f0122e52:	68 14 9a 13 f0       	push   $0xf0139a14
f0122e57:	e8 d5 df fd ff       	call   f0100e31 <cprintf>
f0122e5c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122e5f:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122e63:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122e67:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122e6d:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122e73:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122e7a:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122e81:	e8 dc 9b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122e86:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122e89:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0122e8f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122e94:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e99:	89 d7                	mov    %edx,%edi
f0122e9b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122e9d:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0122ea3:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122ea8:	b8 00 00 00 00       	mov    $0x0,%eax
f0122ead:	89 d7                	mov    %edx,%edi
f0122eaf:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122eb1:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0122eb7:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122ebc:	b8 00 00 00 00       	mov    $0x0,%eax
f0122ec1:	89 d7                	mov    %edx,%edi
f0122ec3:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ec5:	e8 98 9b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122eca:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ecd:	e8 b2 17 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122ed2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122ed5:	83 ec 0c             	sub    $0xc,%esp
f0122ed8:	68 00 fc 1f 00       	push   $0x1ffc00
f0122edd:	e8 16 51 fe ff       	call   f0107ff8 <kmalloc>
f0122ee2:	83 c4 10             	add    $0x10,%esp
f0122ee5:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122eeb:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0122ef1:	89 c1                	mov    %eax,%ecx
f0122ef3:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122efa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122eff:	0f b6 d0             	movzbl %al,%edx
f0122f02:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122f05:	01 d0                	add    %edx,%eax
f0122f07:	48                   	dec    %eax
f0122f08:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122f0b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122f0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f13:	f7 75 a0             	divl   -0x60(%ebp)
f0122f16:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122f19:	29 d0                	sub    %edx,%eax
f0122f1b:	89 c3                	mov    %eax,%ebx
f0122f1d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122f24:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122f29:	0f b6 c0             	movzbl %al,%eax
f0122f2c:	c1 e0 04             	shl    $0x4,%eax
f0122f2f:	89 c2                	mov    %eax,%edx
f0122f31:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122f34:	01 d0                	add    %edx,%eax
f0122f36:	48                   	dec    %eax
f0122f37:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122f3a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122f3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f42:	f7 75 98             	divl   -0x68(%ebp)
f0122f45:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122f48:	29 d0                	sub    %edx,%eax
f0122f4a:	01 d8                	add    %ebx,%eax
f0122f4c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122f51:	39 c1                	cmp    %eax,%ecx
f0122f53:	74 17                	je     f0122f6c <test_kheap_phys_addr+0x149>
f0122f55:	83 ec 04             	sub    $0x4,%esp
f0122f58:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0122f5d:	68 0a 08 00 00       	push   $0x80a
f0122f62:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122f67:	e8 44 d2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f6c:	e8 13 17 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122f71:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122f74:	74 17                	je     f0122f8d <test_kheap_phys_addr+0x16a>
f0122f76:	83 ec 04             	sub    $0x4,%esp
f0122f79:	68 ec 9a 13 f0       	push   $0xf0139aec
f0122f7e:	68 0b 08 00 00       	push   $0x80b
f0122f83:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122f88:	e8 23 d2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f8d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122f90:	e8 cd 9a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122f95:	29 c3                	sub    %eax,%ebx
f0122f97:	89 d8                	mov    %ebx,%eax
f0122f99:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122f9e:	74 17                	je     f0122fb7 <test_kheap_phys_addr+0x194>
f0122fa0:	83 ec 04             	sub    $0x4,%esp
f0122fa3:	68 54 9b 13 f0       	push   $0xf0139b54
f0122fa8:	68 0c 08 00 00       	push   $0x80c
f0122fad:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0122fb2:	e8 f9 d1 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122fb7:	e8 a6 9a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0122fbc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fbf:	e8 c0 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122fc4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122fc7:	83 ec 0c             	sub    $0xc,%esp
f0122fca:	68 00 fc 1f 00       	push   $0x1ffc00
f0122fcf:	e8 24 50 fe ff       	call   f0107ff8 <kmalloc>
f0122fd4:	83 c4 10             	add    $0x10,%esp
f0122fd7:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122fdd:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0122fe3:	89 c1                	mov    %eax,%ecx
f0122fe5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122fec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122ff1:	0f b6 d0             	movzbl %al,%edx
f0122ff4:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122ff7:	01 d0                	add    %edx,%eax
f0122ff9:	48                   	dec    %eax
f0122ffa:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122ffd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123000:	ba 00 00 00 00       	mov    $0x0,%edx
f0123005:	f7 75 90             	divl   -0x70(%ebp)
f0123008:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012300b:	29 d0                	sub    %edx,%eax
f012300d:	89 c3                	mov    %eax,%ebx
f012300f:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123016:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012301b:	0f b6 c0             	movzbl %al,%eax
f012301e:	c1 e0 04             	shl    $0x4,%eax
f0123021:	89 c2                	mov    %eax,%edx
f0123023:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123026:	01 d0                	add    %edx,%eax
f0123028:	48                   	dec    %eax
f0123029:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012302c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012302f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123034:	f7 75 88             	divl   -0x78(%ebp)
f0123037:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012303a:	29 d0                	sub    %edx,%eax
f012303c:	01 d8                	add    %ebx,%eax
f012303e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123043:	39 c1                	cmp    %eax,%ecx
f0123045:	74 17                	je     f012305e <test_kheap_phys_addr+0x23b>
f0123047:	83 ec 04             	sub    $0x4,%esp
f012304a:	68 b8 9b 13 f0       	push   $0xf0139bb8
f012304f:	68 12 08 00 00       	push   $0x812
f0123054:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123059:	e8 52 d1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012305e:	e8 21 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123063:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123066:	74 17                	je     f012307f <test_kheap_phys_addr+0x25c>
f0123068:	83 ec 04             	sub    $0x4,%esp
f012306b:	68 ec 9a 13 f0       	push   $0xf0139aec
f0123070:	68 13 08 00 00       	push   $0x813
f0123075:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012307a:	e8 31 d1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012307f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123082:	e8 db 99 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0123087:	29 c3                	sub    %eax,%ebx
f0123089:	89 d8                	mov    %ebx,%eax
f012308b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123090:	74 17                	je     f01230a9 <test_kheap_phys_addr+0x286>
f0123092:	83 ec 04             	sub    $0x4,%esp
f0123095:	68 54 9b 13 f0       	push   $0xf0139b54
f012309a:	68 14 08 00 00       	push   $0x814
f012309f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01230a4:	e8 07 d1 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01230a9:	e8 b4 99 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01230ae:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230b1:	e8 ce 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01230b6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01230b9:	83 ec 0c             	sub    $0xc,%esp
f01230bc:	68 00 08 00 00       	push   $0x800
f01230c1:	e8 32 4f fe ff       	call   f0107ff8 <kmalloc>
f01230c6:	83 c4 10             	add    $0x10,%esp
f01230c9:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01230cf:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f01230d5:	89 c1                	mov    %eax,%ecx
f01230d7:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01230de:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01230e3:	0f b6 d0             	movzbl %al,%edx
f01230e6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01230e9:	01 d0                	add    %edx,%eax
f01230eb:	48                   	dec    %eax
f01230ec:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01230f2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01230f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01230fd:	f7 75 80             	divl   -0x80(%ebp)
f0123100:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123106:	29 d0                	sub    %edx,%eax
f0123108:	89 c3                	mov    %eax,%ebx
f012310a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123111:	10 00 00 
f0123114:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123119:	0f b6 c0             	movzbl %al,%eax
f012311c:	c1 e0 04             	shl    $0x4,%eax
f012311f:	89 c2                	mov    %eax,%edx
f0123121:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123127:	01 d0                	add    %edx,%eax
f0123129:	48                   	dec    %eax
f012312a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123130:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123136:	ba 00 00 00 00       	mov    $0x0,%edx
f012313b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123141:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123147:	29 d0                	sub    %edx,%eax
f0123149:	01 d8                	add    %ebx,%eax
f012314b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123150:	39 c1                	cmp    %eax,%ecx
f0123152:	74 17                	je     f012316b <test_kheap_phys_addr+0x348>
f0123154:	83 ec 04             	sub    $0x4,%esp
f0123157:	68 b8 9b 13 f0       	push   $0xf0139bb8
f012315c:	68 1a 08 00 00       	push   $0x81a
f0123161:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123166:	e8 45 d0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012316b:	e8 14 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123170:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123173:	74 17                	je     f012318c <test_kheap_phys_addr+0x369>
f0123175:	83 ec 04             	sub    $0x4,%esp
f0123178:	68 ec 9a 13 f0       	push   $0xf0139aec
f012317d:	68 1b 08 00 00       	push   $0x81b
f0123182:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123187:	e8 24 d0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012318c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012318f:	e8 ce 98 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0123194:	29 c3                	sub    %eax,%ebx
f0123196:	89 d8                	mov    %ebx,%eax
f0123198:	83 f8 01             	cmp    $0x1,%eax
f012319b:	74 17                	je     f01231b4 <test_kheap_phys_addr+0x391>
f012319d:	83 ec 04             	sub    $0x4,%esp
f01231a0:	68 54 9b 13 f0       	push   $0xf0139b54
f01231a5:	68 1c 08 00 00       	push   $0x81c
f01231aa:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01231af:	e8 fc cf fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01231b4:	e8 a9 98 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01231b9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01231bc:	e8 c3 14 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01231c1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01231c4:	83 ec 0c             	sub    $0xc,%esp
f01231c7:	68 00 08 00 00       	push   $0x800
f01231cc:	e8 27 4e fe ff       	call   f0107ff8 <kmalloc>
f01231d1:	83 c4 10             	add    $0x10,%esp
f01231d4:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01231da:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f01231e0:	89 c1                	mov    %eax,%ecx
f01231e2:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01231e9:	10 00 00 
f01231ec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01231f1:	0f b6 d0             	movzbl %al,%edx
f01231f4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01231fa:	01 d0                	add    %edx,%eax
f01231fc:	48                   	dec    %eax
f01231fd:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0123203:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123209:	ba 00 00 00 00       	mov    $0x0,%edx
f012320e:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0123214:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012321a:	29 d0                	sub    %edx,%eax
f012321c:	89 c3                	mov    %eax,%ebx
f012321e:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123225:	10 00 00 
f0123228:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012322d:	0f b6 c0             	movzbl %al,%eax
f0123230:	c1 e0 04             	shl    $0x4,%eax
f0123233:	89 c2                	mov    %eax,%edx
f0123235:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012323b:	01 d0                	add    %edx,%eax
f012323d:	48                   	dec    %eax
f012323e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123244:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012324a:	ba 00 00 00 00       	mov    $0x0,%edx
f012324f:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123255:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012325b:	29 d0                	sub    %edx,%eax
f012325d:	01 d8                	add    %ebx,%eax
f012325f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123264:	39 c1                	cmp    %eax,%ecx
f0123266:	74 17                	je     f012327f <test_kheap_phys_addr+0x45c>
f0123268:	83 ec 04             	sub    $0x4,%esp
f012326b:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0123270:	68 22 08 00 00       	push   $0x822
f0123275:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012327a:	e8 31 cf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012327f:	e8 00 14 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123284:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123287:	74 17                	je     f01232a0 <test_kheap_phys_addr+0x47d>
f0123289:	83 ec 04             	sub    $0x4,%esp
f012328c:	68 ec 9a 13 f0       	push   $0xf0139aec
f0123291:	68 23 08 00 00       	push   $0x823
f0123296:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012329b:	e8 10 cf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01232a0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01232a3:	e8 ba 97 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01232a8:	29 c3                	sub    %eax,%ebx
f01232aa:	89 d8                	mov    %ebx,%eax
f01232ac:	83 f8 01             	cmp    $0x1,%eax
f01232af:	74 17                	je     f01232c8 <test_kheap_phys_addr+0x4a5>
f01232b1:	83 ec 04             	sub    $0x4,%esp
f01232b4:	68 54 9b 13 f0       	push   $0xf0139b54
f01232b9:	68 24 08 00 00       	push   $0x824
f01232be:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01232c3:	e8 e8 ce fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01232c8:	e8 95 97 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01232cd:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01232d0:	e8 af 13 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01232d5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01232d8:	83 ec 0c             	sub    $0xc,%esp
f01232db:	68 00 1c 00 00       	push   $0x1c00
f01232e0:	e8 13 4d fe ff       	call   f0107ff8 <kmalloc>
f01232e5:	83 c4 10             	add    $0x10,%esp
f01232e8:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01232ee:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f01232f4:	89 c1                	mov    %eax,%ecx
f01232f6:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01232fd:	10 00 00 
f0123300:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123305:	0f b6 d0             	movzbl %al,%edx
f0123308:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012330e:	01 d0                	add    %edx,%eax
f0123310:	48                   	dec    %eax
f0123311:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123317:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012331d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123322:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123328:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012332e:	29 d0                	sub    %edx,%eax
f0123330:	89 c3                	mov    %eax,%ebx
f0123332:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0123339:	10 00 00 
f012333c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123341:	0f b6 c0             	movzbl %al,%eax
f0123344:	c1 e0 04             	shl    $0x4,%eax
f0123347:	89 c2                	mov    %eax,%edx
f0123349:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012334f:	01 d0                	add    %edx,%eax
f0123351:	48                   	dec    %eax
f0123352:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123358:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012335e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123363:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123369:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012336f:	29 d0                	sub    %edx,%eax
f0123371:	01 d8                	add    %ebx,%eax
f0123373:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123378:	39 c1                	cmp    %eax,%ecx
f012337a:	74 17                	je     f0123393 <test_kheap_phys_addr+0x570>
f012337c:	83 ec 04             	sub    $0x4,%esp
f012337f:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0123384:	68 2a 08 00 00       	push   $0x82a
f0123389:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012338e:	e8 1d ce fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123393:	e8 ec 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123398:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012339b:	74 17                	je     f01233b4 <test_kheap_phys_addr+0x591>
f012339d:	83 ec 04             	sub    $0x4,%esp
f01233a0:	68 ec 9a 13 f0       	push   $0xf0139aec
f01233a5:	68 2b 08 00 00       	push   $0x82b
f01233aa:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01233af:	e8 fc cd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01233b4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01233b7:	e8 a6 96 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01233bc:	29 c3                	sub    %eax,%ebx
f01233be:	89 d8                	mov    %ebx,%eax
f01233c0:	83 f8 02             	cmp    $0x2,%eax
f01233c3:	74 17                	je     f01233dc <test_kheap_phys_addr+0x5b9>
f01233c5:	83 ec 04             	sub    $0x4,%esp
f01233c8:	68 54 9b 13 f0       	push   $0xf0139b54
f01233cd:	68 2c 08 00 00       	push   $0x82c
f01233d2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01233d7:	e8 d4 cd fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01233dc:	e8 81 96 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01233e1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233e4:	e8 9b 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01233e9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01233ec:	83 ec 0c             	sub    $0xc,%esp
f01233ef:	68 00 fc 2f 00       	push   $0x2ffc00
f01233f4:	e8 ff 4b fe ff       	call   f0107ff8 <kmalloc>
f01233f9:	83 c4 10             	add    $0x10,%esp
f01233fc:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123402:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0123408:	89 c1                	mov    %eax,%ecx
f012340a:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123411:	10 00 00 
f0123414:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123419:	0f b6 d0             	movzbl %al,%edx
f012341c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123422:	01 d0                	add    %edx,%eax
f0123424:	48                   	dec    %eax
f0123425:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012342b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123431:	ba 00 00 00 00       	mov    $0x0,%edx
f0123436:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012343c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123442:	29 d0                	sub    %edx,%eax
f0123444:	89 c3                	mov    %eax,%ebx
f0123446:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012344d:	10 00 00 
f0123450:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123455:	0f b6 c0             	movzbl %al,%eax
f0123458:	c1 e0 04             	shl    $0x4,%eax
f012345b:	89 c2                	mov    %eax,%edx
f012345d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123463:	01 d0                	add    %edx,%eax
f0123465:	48                   	dec    %eax
f0123466:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012346c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123472:	ba 00 00 00 00       	mov    $0x0,%edx
f0123477:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012347d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123483:	29 d0                	sub    %edx,%eax
f0123485:	01 d8                	add    %ebx,%eax
f0123487:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012348c:	39 c1                	cmp    %eax,%ecx
f012348e:	74 17                	je     f01234a7 <test_kheap_phys_addr+0x684>
f0123490:	83 ec 04             	sub    $0x4,%esp
f0123493:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0123498:	68 32 08 00 00       	push   $0x832
f012349d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01234a2:	e8 09 cd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234a7:	e8 d8 11 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01234ac:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01234af:	74 17                	je     f01234c8 <test_kheap_phys_addr+0x6a5>
f01234b1:	83 ec 04             	sub    $0x4,%esp
f01234b4:	68 ec 9a 13 f0       	push   $0xf0139aec
f01234b9:	68 33 08 00 00       	push   $0x833
f01234be:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01234c3:	e8 e8 cc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01234c8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01234cb:	e8 92 95 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01234d0:	29 c3                	sub    %eax,%ebx
f01234d2:	89 d8                	mov    %ebx,%eax
f01234d4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01234d9:	74 17                	je     f01234f2 <test_kheap_phys_addr+0x6cf>
f01234db:	83 ec 04             	sub    $0x4,%esp
f01234de:	68 54 9b 13 f0       	push   $0xf0139b54
f01234e3:	68 34 08 00 00       	push   $0x834
f01234e8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01234ed:	e8 be cc fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01234f2:	e8 6b 95 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01234f7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234fa:	e8 85 11 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01234ff:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123502:	83 ec 0c             	sub    $0xc,%esp
f0123505:	68 00 fc 5f 00       	push   $0x5ffc00
f012350a:	e8 e9 4a fe ff       	call   f0107ff8 <kmalloc>
f012350f:	83 c4 10             	add    $0x10,%esp
f0123512:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123518:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012351e:	89 c1                	mov    %eax,%ecx
f0123520:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123527:	10 00 00 
f012352a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012352f:	0f b6 d0             	movzbl %al,%edx
f0123532:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123538:	01 d0                	add    %edx,%eax
f012353a:	48                   	dec    %eax
f012353b:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123541:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123547:	ba 00 00 00 00       	mov    $0x0,%edx
f012354c:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123552:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123558:	29 d0                	sub    %edx,%eax
f012355a:	89 c3                	mov    %eax,%ebx
f012355c:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123563:	10 00 00 
f0123566:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012356b:	0f b6 c0             	movzbl %al,%eax
f012356e:	c1 e0 04             	shl    $0x4,%eax
f0123571:	89 c2                	mov    %eax,%edx
f0123573:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0123579:	01 d0                	add    %edx,%eax
f012357b:	48                   	dec    %eax
f012357c:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123582:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123588:	ba 00 00 00 00       	mov    $0x0,%edx
f012358d:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123593:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123599:	29 d0                	sub    %edx,%eax
f012359b:	01 d8                	add    %ebx,%eax
f012359d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01235a2:	39 c1                	cmp    %eax,%ecx
f01235a4:	74 17                	je     f01235bd <test_kheap_phys_addr+0x79a>
f01235a6:	83 ec 04             	sub    $0x4,%esp
f01235a9:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01235ae:	68 3a 08 00 00       	push   $0x83a
f01235b3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01235b8:	e8 f3 cb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01235bd:	e8 c2 10 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01235c2:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01235c5:	74 17                	je     f01235de <test_kheap_phys_addr+0x7bb>
f01235c7:	83 ec 04             	sub    $0x4,%esp
f01235ca:	68 ec 9a 13 f0       	push   $0xf0139aec
f01235cf:	68 3b 08 00 00       	push   $0x83b
f01235d4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01235d9:	e8 d2 cb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01235de:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01235e1:	e8 7c 94 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01235e6:	29 c3                	sub    %eax,%ebx
f01235e8:	89 d8                	mov    %ebx,%eax
f01235ea:	3d 00 06 00 00       	cmp    $0x600,%eax
f01235ef:	74 17                	je     f0123608 <test_kheap_phys_addr+0x7e5>
f01235f1:	83 ec 04             	sub    $0x4,%esp
f01235f4:	68 54 9b 13 f0       	push   $0xf0139b54
f01235f9:	68 3c 08 00 00       	push   $0x83c
f01235fe:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123603:	e8 a8 cb fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123608:	e8 55 94 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012360d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123610:	e8 6f 10 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123615:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123618:	83 ec 0c             	sub    $0xc,%esp
f012361b:	68 00 38 00 00       	push   $0x3800
f0123620:	e8 d3 49 fe ff       	call   f0107ff8 <kmalloc>
f0123625:	83 c4 10             	add    $0x10,%esp
f0123628:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012362e:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123634:	89 c1                	mov    %eax,%ecx
f0123636:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012363d:	10 00 00 
f0123640:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123645:	0f b6 d0             	movzbl %al,%edx
f0123648:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012364e:	01 d0                	add    %edx,%eax
f0123650:	48                   	dec    %eax
f0123651:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123657:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012365d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123662:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123668:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012366e:	29 d0                	sub    %edx,%eax
f0123670:	89 c3                	mov    %eax,%ebx
f0123672:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123679:	10 00 00 
f012367c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123681:	0f b6 c0             	movzbl %al,%eax
f0123684:	c1 e0 04             	shl    $0x4,%eax
f0123687:	89 c2                	mov    %eax,%edx
f0123689:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012368f:	01 d0                	add    %edx,%eax
f0123691:	48                   	dec    %eax
f0123692:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123698:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012369e:	ba 00 00 00 00       	mov    $0x0,%edx
f01236a3:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01236a9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01236af:	29 d0                	sub    %edx,%eax
f01236b1:	01 d8                	add    %ebx,%eax
f01236b3:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01236b8:	39 c1                	cmp    %eax,%ecx
f01236ba:	74 17                	je     f01236d3 <test_kheap_phys_addr+0x8b0>
f01236bc:	83 ec 04             	sub    $0x4,%esp
f01236bf:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01236c4:	68 42 08 00 00       	push   $0x842
f01236c9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01236ce:	e8 dd ca fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01236d3:	e8 ac 0f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01236d8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01236db:	74 17                	je     f01236f4 <test_kheap_phys_addr+0x8d1>
f01236dd:	83 ec 04             	sub    $0x4,%esp
f01236e0:	68 ec 9a 13 f0       	push   $0xf0139aec
f01236e5:	68 43 08 00 00       	push   $0x843
f01236ea:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01236ef:	e8 bc ca fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01236f4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01236f7:	e8 66 93 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01236fc:	29 c3                	sub    %eax,%ebx
f01236fe:	89 d8                	mov    %ebx,%eax
f0123700:	83 f8 04             	cmp    $0x4,%eax
f0123703:	74 17                	je     f012371c <test_kheap_phys_addr+0x8f9>
f0123705:	83 ec 04             	sub    $0x4,%esp
f0123708:	68 54 9b 13 f0       	push   $0xf0139b54
f012370d:	68 44 08 00 00       	push   $0x844
f0123712:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123717:	e8 94 ca fd ff       	call   f01001b0 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f012371c:	89 e0                	mov    %esp,%eax
f012371e:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123720:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123727:	10 00 00 
f012372a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012372f:	0f b6 d0             	movzbl %al,%edx
f0123732:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123738:	01 d0                	add    %edx,%eax
f012373a:	48                   	dec    %eax
f012373b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123741:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123747:	ba 00 00 00 00       	mov    $0x0,%edx
f012374c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123752:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123758:	29 d0                	sub    %edx,%eax
f012375a:	89 c1                	mov    %eax,%ecx
f012375c:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123763:	10 00 00 
f0123766:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012376b:	0f b6 c0             	movzbl %al,%eax
f012376e:	c1 e0 04             	shl    $0x4,%eax
f0123771:	89 c2                	mov    %eax,%edx
f0123773:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123779:	01 d0                	add    %edx,%eax
f012377b:	48                   	dec    %eax
f012377c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123782:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123788:	ba 00 00 00 00       	mov    $0x0,%edx
f012378d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123793:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123799:	29 d0                	sub    %edx,%eax
f012379b:	01 c8                	add    %ecx,%eax
f012379d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01237a2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01237a8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01237af:	10 00 00 
f01237b2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01237b7:	0f b6 d0             	movzbl %al,%edx
f01237ba:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01237c0:	01 d0                	add    %edx,%eax
f01237c2:	48                   	dec    %eax
f01237c3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01237c9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01237cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01237d4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01237da:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01237e0:	29 d0                	sub    %edx,%eax
f01237e2:	89 c1                	mov    %eax,%ecx
f01237e4:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01237eb:	10 00 00 
f01237ee:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01237f3:	0f b6 c0             	movzbl %al,%eax
f01237f6:	c1 e0 04             	shl    $0x4,%eax
f01237f9:	89 c2                	mov    %eax,%edx
f01237fb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123801:	01 d0                	add    %edx,%eax
f0123803:	48                   	dec    %eax
f0123804:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012380a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123810:	ba 00 00 00 00       	mov    $0x0,%edx
f0123815:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012381b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123821:	29 d0                	sub    %edx,%eax
f0123823:	01 c8                	add    %ecx,%eax
f0123825:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012382a:	c1 e8 0c             	shr    $0xc,%eax
f012382d:	89 c2                	mov    %eax,%edx
f012382f:	4a                   	dec    %edx
f0123830:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f0123836:	c1 e0 02             	shl    $0x2,%eax
f0123839:	8d 50 03             	lea    0x3(%eax),%edx
f012383c:	b8 10 00 00 00       	mov    $0x10,%eax
f0123841:	48                   	dec    %eax
f0123842:	01 d0                	add    %edx,%eax
f0123844:	bf 10 00 00 00       	mov    $0x10,%edi
f0123849:	ba 00 00 00 00       	mov    $0x0,%edx
f012384e:	f7 f7                	div    %edi
f0123850:	6b c0 10             	imul   $0x10,%eax,%eax
f0123853:	29 c4                	sub    %eax,%esp
f0123855:	89 e0                	mov    %esp,%eax
f0123857:	83 c0 03             	add    $0x3,%eax
f012385a:	c1 e8 02             	shr    $0x2,%eax
f012385d:	c1 e0 02             	shl    $0x2,%eax
f0123860:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f0123866:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012386d:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123874:	eb 29                	jmp    f012389f <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123876:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123879:	8d 43 01             	lea    0x1(%ebx),%eax
f012387c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012387f:	83 ec 0c             	sub    $0xc,%esp
f0123882:	ff 75 e0             	pushl  -0x20(%ebp)
f0123885:	e8 bc 47 fe ff       	call   f0108046 <kheap_physical_address>
f012388a:	83 c4 10             	add    $0x10,%esp
f012388d:	89 c2                	mov    %eax,%edx
f012388f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123895:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123898:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f012389f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01238a2:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f01238a8:	72 cc                	jb     f0123876 <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01238aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01238ad:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f01238b3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01238ba:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01238c1:	e9 ab 00 00 00       	jmp    f0123971 <test_kheap_phys_addr+0xb4e>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01238c6:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01238cb:	83 ec 04             	sub    $0x4,%esp
f01238ce:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f01238d4:	52                   	push   %edx
f01238d5:	ff 75 e0             	pushl  -0x20(%ebp)
f01238d8:	50                   	push   %eax
f01238d9:	e8 09 3c fe ff       	call   f01074e7 <get_page_table>
f01238de:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01238e1:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01238e7:	85 c0                	test   %eax,%eax
f01238e9:	75 17                	jne    f0123902 <test_kheap_phys_addr+0xadf>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01238eb:	83 ec 04             	sub    $0x4,%esp
f01238ee:	68 74 a4 13 f0       	push   $0xf013a474
f01238f3:	68 59 08 00 00       	push   $0x859
f01238f8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01238fd:	e8 ae c8 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123902:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123905:	c1 e8 0c             	shr    $0xc,%eax
f0123908:	25 ff 03 00 00       	and    $0x3ff,%eax
f012390d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123910:	eb 4b                	jmp    f012395d <test_kheap_phys_addr+0xb3a>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123912:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0123918:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012391b:	c1 e2 02             	shl    $0x2,%edx
f012391e:	01 d0                	add    %edx,%eax
f0123920:	8b 00                	mov    (%eax),%eax
f0123922:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123927:	89 c1                	mov    %eax,%ecx
f0123929:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012392f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123932:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123935:	39 c1                	cmp    %eax,%ecx
f0123937:	74 17                	je     f0123950 <test_kheap_phys_addr+0xb2d>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123939:	83 ec 04             	sub    $0x4,%esp
f012393c:	68 cd a4 13 f0       	push   $0xf013a4cd
f0123941:	68 60 08 00 00       	push   $0x860
f0123946:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012394b:	e8 60 c8 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0123950:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123957:	ff 45 dc             	incl   -0x24(%ebp)
f012395a:	ff 45 e4             	incl   -0x1c(%ebp)
f012395d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123960:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0123966:	7d 09                	jge    f0123971 <test_kheap_phys_addr+0xb4e>
f0123968:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f012396f:	7e a1                	jle    f0123912 <test_kheap_phys_addr+0xaef>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123971:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123974:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f012397a:	0f 82 46 ff ff ff    	jb     f01238c6 <test_kheap_phys_addr+0xaa3>
f0123980:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123982:	83 ec 0c             	sub    $0xc,%esp
f0123985:	68 ec a4 13 f0       	push   $0xf013a4ec
f012398a:	e8 a2 d4 fd ff       	call   f0100e31 <cprintf>
f012398f:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123992:	e8 cb 90 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0123997:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012399d:	e8 e2 0c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01239a2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f01239a8:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f01239ae:	83 ec 0c             	sub    $0xc,%esp
f01239b1:	50                   	push   %eax
f01239b2:	e8 5b 46 fe ff       	call   f0108012 <kfree>
f01239b7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01239ba:	e8 c5 0c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01239bf:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01239c5:	74 17                	je     f01239de <test_kheap_phys_addr+0xbbb>
f01239c7:	83 ec 04             	sub    $0x4,%esp
f01239ca:	68 ec 9a 13 f0       	push   $0xf0139aec
f01239cf:	68 6e 08 00 00       	push   $0x86e
f01239d4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01239d9:	e8 d2 c7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01239de:	e8 7f 90 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01239e3:	89 c2                	mov    %eax,%edx
f01239e5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01239eb:	29 c2                	sub    %eax,%edx
f01239ed:	89 d0                	mov    %edx,%eax
f01239ef:	3d 00 02 00 00       	cmp    $0x200,%eax
f01239f4:	74 17                	je     f0123a0d <test_kheap_phys_addr+0xbea>
f01239f6:	83 ec 04             	sub    $0x4,%esp
f01239f9:	68 5c a2 13 f0       	push   $0xf013a25c
f01239fe:	68 6f 08 00 00       	push   $0x86f
f0123a03:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123a08:	e8 a3 c7 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a0d:	e8 50 90 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0123a12:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a18:	e8 67 0c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123a1d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0123a23:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0123a29:	83 ec 0c             	sub    $0xc,%esp
f0123a2c:	50                   	push   %eax
f0123a2d:	e8 e0 45 fe ff       	call   f0108012 <kfree>
f0123a32:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a35:	e8 4a 0c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123a3a:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123a40:	74 17                	je     f0123a59 <test_kheap_phys_addr+0xc36>
f0123a42:	83 ec 04             	sub    $0x4,%esp
f0123a45:	68 ec 9a 13 f0       	push   $0xf0139aec
f0123a4a:	68 75 08 00 00       	push   $0x875
f0123a4f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123a54:	e8 57 c7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0123a59:	e8 04 90 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0123a5e:	89 c2                	mov    %eax,%edx
f0123a60:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123a66:	29 c2                	sub    %eax,%edx
f0123a68:	89 d0                	mov    %edx,%eax
f0123a6a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123a6f:	74 17                	je     f0123a88 <test_kheap_phys_addr+0xc65>
f0123a71:	83 ec 04             	sub    $0x4,%esp
f0123a74:	68 5c a2 13 f0       	push   $0xf013a25c
f0123a79:	68 76 08 00 00       	push   $0x876
f0123a7e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123a83:	e8 28 c7 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a88:	e8 d5 8f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0123a8d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a93:	e8 ec 0b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123a98:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0123a9e:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123aa4:	83 ec 0c             	sub    $0xc,%esp
f0123aa7:	50                   	push   %eax
f0123aa8:	e8 65 45 fe ff       	call   f0108012 <kfree>
f0123aad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ab0:	e8 cf 0b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123ab5:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123abb:	74 17                	je     f0123ad4 <test_kheap_phys_addr+0xcb1>
f0123abd:	83 ec 04             	sub    $0x4,%esp
f0123ac0:	68 ec 9a 13 f0       	push   $0xf0139aec
f0123ac5:	68 7c 08 00 00       	push   $0x87c
f0123aca:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123acf:	e8 dc c6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123ad4:	e8 89 8f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0123ad9:	89 c2                	mov    %eax,%edx
f0123adb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123ae1:	29 c2                	sub    %eax,%edx
f0123ae3:	89 d0                	mov    %edx,%eax
f0123ae5:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123aea:	74 17                	je     f0123b03 <test_kheap_phys_addr+0xce0>
f0123aec:	83 ec 04             	sub    $0x4,%esp
f0123aef:	68 5c a2 13 f0       	push   $0xf013a25c
f0123af4:	68 7d 08 00 00       	push   $0x87d
f0123af9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123afe:	e8 ad c6 fd ff       	call   f01001b0 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123b03:	89 e0                	mov    %esp,%eax
f0123b05:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123b07:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123b0e:	10 00 00 
f0123b11:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123b16:	0f b6 d0             	movzbl %al,%edx
f0123b19:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123b1f:	01 d0                	add    %edx,%eax
f0123b21:	48                   	dec    %eax
f0123b22:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123b28:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123b2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b33:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123b39:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123b3f:	29 d0                	sub    %edx,%eax
f0123b41:	89 c1                	mov    %eax,%ecx
f0123b43:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123b4a:	10 00 00 
f0123b4d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123b52:	0f b6 c0             	movzbl %al,%eax
f0123b55:	c1 e0 04             	shl    $0x4,%eax
f0123b58:	89 c2                	mov    %eax,%edx
f0123b5a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123b60:	01 d0                	add    %edx,%eax
f0123b62:	48                   	dec    %eax
f0123b63:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123b69:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123b6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b74:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123b7a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123b80:	29 d0                	sub    %edx,%eax
f0123b82:	01 c8                	add    %ecx,%eax
f0123b84:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123b89:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123b8f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123b96:	10 00 00 
f0123b99:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123b9e:	0f b6 d0             	movzbl %al,%edx
f0123ba1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123ba7:	01 d0                	add    %edx,%eax
f0123ba9:	48                   	dec    %eax
f0123baa:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123bb0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123bb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bbb:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123bc1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123bc7:	29 d0                	sub    %edx,%eax
f0123bc9:	89 c1                	mov    %eax,%ecx
f0123bcb:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123bd2:	10 00 00 
f0123bd5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123bda:	0f b6 c0             	movzbl %al,%eax
f0123bdd:	c1 e0 04             	shl    $0x4,%eax
f0123be0:	89 c2                	mov    %eax,%edx
f0123be2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123be8:	01 d0                	add    %edx,%eax
f0123bea:	48                   	dec    %eax
f0123beb:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123bf1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123bf7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bfc:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123c02:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123c08:	29 d0                	sub    %edx,%eax
f0123c0a:	01 c8                	add    %ecx,%eax
f0123c0c:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123c11:	c1 e8 0c             	shr    $0xc,%eax
f0123c14:	89 c2                	mov    %eax,%edx
f0123c16:	4a                   	dec    %edx
f0123c17:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0123c1d:	c1 e0 02             	shl    $0x2,%eax
f0123c20:	8d 50 03             	lea    0x3(%eax),%edx
f0123c23:	b8 10 00 00 00       	mov    $0x10,%eax
f0123c28:	48                   	dec    %eax
f0123c29:	01 d0                	add    %edx,%eax
f0123c2b:	bf 10 00 00 00       	mov    $0x10,%edi
f0123c30:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c35:	f7 f7                	div    %edi
f0123c37:	6b c0 10             	imul   $0x10,%eax,%eax
f0123c3a:	29 c4                	sub    %eax,%esp
f0123c3c:	89 e0                	mov    %esp,%eax
f0123c3e:	83 c0 03             	add    $0x3,%eax
f0123c41:	c1 e8 02             	shr    $0x2,%eax
f0123c44:	c1 e0 02             	shl    $0x2,%eax
f0123c47:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f0123c4d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123c54:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0123c5b:	eb 29                	jmp    f0123c86 <test_kheap_phys_addr+0xe63>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123c5d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123c60:	8d 43 01             	lea    0x1(%ebx),%eax
f0123c63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123c66:	83 ec 0c             	sub    $0xc,%esp
f0123c69:	ff 75 d8             	pushl  -0x28(%ebp)
f0123c6c:	e8 d5 43 fe ff       	call   f0108046 <kheap_physical_address>
f0123c71:	83 c4 10             	add    $0x10,%esp
f0123c74:	89 c2                	mov    %eax,%edx
f0123c76:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123c7c:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123c7f:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0123c86:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123c89:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123c8f:	72 cc                	jb     f0123c5d <test_kheap_phys_addr+0xe3a>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123c91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c94:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f0123c9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123ca1:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0123ca8:	e9 ab 00 00 00       	jmp    f0123d58 <test_kheap_phys_addr+0xf35>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123cad:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0123cb2:	83 ec 04             	sub    $0x4,%esp
f0123cb5:	8d 95 a4 fd ff ff    	lea    -0x25c(%ebp),%edx
f0123cbb:	52                   	push   %edx
f0123cbc:	ff 75 d8             	pushl  -0x28(%ebp)
f0123cbf:	50                   	push   %eax
f0123cc0:	e8 22 38 fe ff       	call   f01074e7 <get_page_table>
f0123cc5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123cc8:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123cce:	85 c0                	test   %eax,%eax
f0123cd0:	75 17                	jne    f0123ce9 <test_kheap_phys_addr+0xec6>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123cd2:	83 ec 04             	sub    $0x4,%esp
f0123cd5:	68 74 a4 13 f0       	push   $0xf013a474
f0123cda:	68 93 08 00 00       	push   $0x893
f0123cdf:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123ce4:	e8 c7 c4 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123ce9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123cec:	c1 e8 0c             	shr    $0xc,%eax
f0123cef:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123cf4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123cf7:	eb 4b                	jmp    f0123d44 <test_kheap_phys_addr+0xf21>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123cf9:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123cff:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123d02:	c1 e2 02             	shl    $0x2,%edx
f0123d05:	01 d0                	add    %edx,%eax
f0123d07:	8b 00                	mov    (%eax),%eax
f0123d09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123d0e:	89 c1                	mov    %eax,%ecx
f0123d10:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123d16:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123d19:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123d1c:	39 c1                	cmp    %eax,%ecx
f0123d1e:	74 17                	je     f0123d37 <test_kheap_phys_addr+0xf14>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123d20:	83 ec 04             	sub    $0x4,%esp
f0123d23:	68 cd a4 13 f0       	push   $0xf013a4cd
f0123d28:	68 9a 08 00 00       	push   $0x89a
f0123d2d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123d32:	e8 79 c4 fd ff       	call   f01001b0 <_panic>
				}
				va += PAGE_SIZE;
f0123d37:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123d3e:	ff 45 d4             	incl   -0x2c(%ebp)
f0123d41:	ff 45 e4             	incl   -0x1c(%ebp)
f0123d44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123d47:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0123d4d:	7d 09                	jge    f0123d58 <test_kheap_phys_addr+0xf35>
f0123d4f:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0123d56:	7e a1                	jle    f0123cf9 <test_kheap_phys_addr+0xed6>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123d58:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123d5b:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123d61:	0f 82 46 ff ff ff    	jb     f0123cad <test_kheap_phys_addr+0xe8a>
f0123d67:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0123d69:	83 ec 0c             	sub    $0xc,%esp
f0123d6c:	68 5d 9c 13 f0       	push   $0xf0139c5d
f0123d71:	e8 bb d0 fd ff       	call   f0100e31 <cprintf>
f0123d76:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0123d79:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0123d80:	10 00 00 
f0123d83:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123d88:	0f b6 d0             	movzbl %al,%edx
f0123d8b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123d91:	01 d0                	add    %edx,%eax
f0123d93:	48                   	dec    %eax
f0123d94:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0123d9a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123da0:	ba 00 00 00 00       	mov    $0x0,%edx
f0123da5:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0123dab:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123db1:	29 d0                	sub    %edx,%eax
f0123db3:	89 c1                	mov    %eax,%ecx
f0123db5:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0123dbc:	10 00 00 
f0123dbf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123dc4:	0f b6 c0             	movzbl %al,%eax
f0123dc7:	c1 e0 04             	shl    $0x4,%eax
f0123dca:	89 c2                	mov    %eax,%edx
f0123dcc:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123dd2:	01 d0                	add    %edx,%eax
f0123dd4:	48                   	dec    %eax
f0123dd5:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0123ddb:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123de1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123de6:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0123dec:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123df2:	29 d0                	sub    %edx,%eax
f0123df4:	01 c8                	add    %ecx,%eax
f0123df6:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0123dfb:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123e01:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123e08:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123e0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0123e11:	eb 0a                	jmp    f0123e1d <test_kheap_phys_addr+0xffa>
		{
			i++;
f0123e13:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123e16:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0123e1d:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0123e24:	76 ed                	jbe    f0123e13 <test_kheap_phys_addr+0xff0>
		{
			i++;
		}
		int ii = i ;
f0123e26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123e29:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0123e2f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123e36:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123e3c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0123e3f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0123e46:	e9 cc 00 00 00       	jmp    f0123f17 <test_kheap_phys_addr+0x10f4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0123e4b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123e4e:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0123e53:	83 ec 04             	sub    $0x4,%esp
f0123e56:	8d 8d a0 fd ff ff    	lea    -0x260(%ebp),%ecx
f0123e5c:	51                   	push   %ecx
f0123e5d:	52                   	push   %edx
f0123e5e:	50                   	push   %eax
f0123e5f:	e8 83 36 fe ff       	call   f01074e7 <get_page_table>
f0123e64:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123e67:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123e6d:	85 c0                	test   %eax,%eax
f0123e6f:	75 17                	jne    f0123e88 <test_kheap_phys_addr+0x1065>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123e71:	83 ec 04             	sub    $0x4,%esp
f0123e74:	68 74 a4 13 f0       	push   $0xf013a474
f0123e79:	68 b6 08 00 00       	push   $0x8b6
f0123e7e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123e83:	e8 28 c3 fd ff       	call   f01001b0 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123e88:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123e8f:	eb 67                	jmp    f0123ef8 <test_kheap_phys_addr+0x10d5>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123e91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123e94:	c1 e0 0c             	shl    $0xc,%eax
f0123e97:	89 c2                	mov    %eax,%edx
f0123e99:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123e9f:	01 d0                	add    %edx,%eax
f0123ea1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0123ea7:	83 ec 0c             	sub    $0xc,%esp
f0123eaa:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0123eb0:	e8 91 41 fe ff       	call   f0108046 <kheap_physical_address>
f0123eb5:	83 c4 10             	add    $0x10,%esp
f0123eb8:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0123ebe:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123ec4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0123ec7:	c1 e2 02             	shl    $0x2,%edx
f0123eca:	01 d0                	add    %edx,%eax
f0123ecc:	8b 00                	mov    (%eax),%eax
f0123ece:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123ed3:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123ed9:	74 17                	je     f0123ef2 <test_kheap_phys_addr+0x10cf>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123edb:	83 ec 04             	sub    $0x4,%esp
f0123ede:	68 cd a4 13 f0       	push   $0xf013a4cd
f0123ee3:	68 c0 08 00 00       	push   $0x8c0
f0123ee8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0123eed:	e8 be c2 fd ff       	call   f01001b0 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123ef2:	ff 45 cc             	incl   -0x34(%ebp)
f0123ef5:	ff 45 e4             	incl   -0x1c(%ebp)
f0123ef8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123efb:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0123f01:	7d 09                	jge    f0123f0c <test_kheap_phys_addr+0x10e9>
f0123f03:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0123f0a:	7e 85                	jle    f0123e91 <test_kheap_phys_addr+0x106e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123f0c:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0123f13:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0123f17:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123f1b:	0f 88 2a ff ff ff    	js     f0123e4b <test_kheap_phys_addr+0x1028>
f0123f21:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123f25:	7f 0d                	jg     f0123f34 <test_kheap_phys_addr+0x1111>
f0123f27:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0123f2e:	0f 86 17 ff ff ff    	jbe    f0123e4b <test_kheap_phys_addr+0x1028>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0123f34:	83 ec 0c             	sub    $0xc,%esp
f0123f37:	68 b6 9c 13 f0       	push   $0xf0139cb6
f0123f3c:	e8 f0 ce fd ff       	call   f0100e31 <cprintf>
f0123f41:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0123f44:	83 ec 0c             	sub    $0xc,%esp
f0123f47:	68 20 a5 13 f0       	push   $0xf013a520
f0123f4c:	e8 e0 ce fd ff       	call   f0100e31 <cprintf>
f0123f51:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123f54:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123f59:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0123f5c:	5b                   	pop    %ebx
f0123f5d:	5e                   	pop    %esi
f0123f5e:	5f                   	pop    %edi
f0123f5f:	5d                   	pop    %ebp
f0123f60:	c3                   	ret    

f0123f61 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123f61:	55                   	push   %ebp
f0123f62:	89 e5                	mov    %esp,%ebp
f0123f64:	57                   	push   %edi
f0123f65:	56                   	push   %esi
f0123f66:	53                   	push   %ebx
f0123f67:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0123f6d:	89 e0                	mov    %esp,%eax
f0123f6f:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123f71:	83 ec 0c             	sub    $0xc,%esp
f0123f74:	68 14 9a 13 f0       	push   $0xf0139a14
f0123f79:	e8 b3 ce fd ff       	call   f0100e31 <cprintf>
f0123f7e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123f81:	83 ec 0c             	sub    $0xc,%esp
f0123f84:	68 44 9a 13 f0       	push   $0xf0139a44
f0123f89:	e8 a3 ce fd ff       	call   f0100e31 <cprintf>
f0123f8e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123f91:	83 ec 0c             	sub    $0xc,%esp
f0123f94:	68 14 9a 13 f0       	push   $0xf0139a14
f0123f99:	e8 93 ce fd ff       	call   f0100e31 <cprintf>
f0123f9e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123fa1:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0123fa5:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0123fa9:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0123faf:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0123fb5:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123fbc:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123fc3:	e8 9a 8a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0123fc8:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123fcb:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0123fd1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123fd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0123fdb:	89 d7                	mov    %edx,%edi
f0123fdd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123fdf:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0123fe5:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123fea:	b8 00 00 00 00       	mov    $0x0,%eax
f0123fef:	89 d7                	mov    %edx,%edi
f0123ff1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123ff3:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f0123ff9:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123ffe:	b8 00 00 00 00       	mov    $0x0,%eax
f0124003:	89 d7                	mov    %edx,%edi
f0124005:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124007:	e8 56 8a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012400c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012400f:	e8 70 06 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124014:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124017:	83 ec 0c             	sub    $0xc,%esp
f012401a:	68 00 fc 1f 00       	push   $0x1ffc00
f012401f:	e8 d4 3f fe ff       	call   f0107ff8 <kmalloc>
f0124024:	83 c4 10             	add    $0x10,%esp
f0124027:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012402d:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0124033:	89 c1                	mov    %eax,%ecx
f0124035:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012403c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124041:	0f b6 d0             	movzbl %al,%edx
f0124044:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124047:	01 d0                	add    %edx,%eax
f0124049:	48                   	dec    %eax
f012404a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012404d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124050:	ba 00 00 00 00       	mov    $0x0,%edx
f0124055:	f7 75 b4             	divl   -0x4c(%ebp)
f0124058:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012405b:	29 d0                	sub    %edx,%eax
f012405d:	89 c3                	mov    %eax,%ebx
f012405f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124066:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012406b:	0f b6 c0             	movzbl %al,%eax
f012406e:	c1 e0 04             	shl    $0x4,%eax
f0124071:	89 c2                	mov    %eax,%edx
f0124073:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124076:	01 d0                	add    %edx,%eax
f0124078:	48                   	dec    %eax
f0124079:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012407c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012407f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124084:	f7 75 ac             	divl   -0x54(%ebp)
f0124087:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012408a:	29 d0                	sub    %edx,%eax
f012408c:	01 d8                	add    %ebx,%eax
f012408e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124093:	39 c1                	cmp    %eax,%ecx
f0124095:	74 17                	je     f01240ae <test_kheap_virt_addr+0x14d>
f0124097:	83 ec 04             	sub    $0x4,%esp
f012409a:	68 b8 9b 13 f0       	push   $0xf0139bb8
f012409f:	68 ed 08 00 00       	push   $0x8ed
f01240a4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01240a9:	e8 02 c1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01240ae:	e8 d1 05 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01240b3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01240b6:	74 17                	je     f01240cf <test_kheap_virt_addr+0x16e>
f01240b8:	83 ec 04             	sub    $0x4,%esp
f01240bb:	68 ec 9a 13 f0       	push   $0xf0139aec
f01240c0:	68 ee 08 00 00       	push   $0x8ee
f01240c5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01240ca:	e8 e1 c0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01240cf:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01240d2:	e8 8b 89 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01240d7:	29 c3                	sub    %eax,%ebx
f01240d9:	89 d8                	mov    %ebx,%eax
f01240db:	3d 00 02 00 00       	cmp    $0x200,%eax
f01240e0:	74 17                	je     f01240f9 <test_kheap_virt_addr+0x198>
f01240e2:	83 ec 04             	sub    $0x4,%esp
f01240e5:	68 54 9b 13 f0       	push   $0xf0139b54
f01240ea:	68 ef 08 00 00       	push   $0x8ef
f01240ef:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01240f4:	e8 b7 c0 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01240f9:	e8 64 89 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01240fe:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124101:	e8 7e 05 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124106:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124109:	83 ec 0c             	sub    $0xc,%esp
f012410c:	68 00 fc 1f 00       	push   $0x1ffc00
f0124111:	e8 e2 3e fe ff       	call   f0107ff8 <kmalloc>
f0124116:	83 c4 10             	add    $0x10,%esp
f0124119:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012411f:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0124125:	89 c1                	mov    %eax,%ecx
f0124127:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012412e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124133:	0f b6 d0             	movzbl %al,%edx
f0124136:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124139:	01 d0                	add    %edx,%eax
f012413b:	48                   	dec    %eax
f012413c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012413f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124142:	ba 00 00 00 00       	mov    $0x0,%edx
f0124147:	f7 75 a4             	divl   -0x5c(%ebp)
f012414a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012414d:	29 d0                	sub    %edx,%eax
f012414f:	89 c3                	mov    %eax,%ebx
f0124151:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124158:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012415d:	0f b6 c0             	movzbl %al,%eax
f0124160:	c1 e0 04             	shl    $0x4,%eax
f0124163:	89 c2                	mov    %eax,%edx
f0124165:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124168:	01 d0                	add    %edx,%eax
f012416a:	48                   	dec    %eax
f012416b:	89 45 98             	mov    %eax,-0x68(%ebp)
f012416e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124171:	ba 00 00 00 00       	mov    $0x0,%edx
f0124176:	f7 75 9c             	divl   -0x64(%ebp)
f0124179:	8b 45 98             	mov    -0x68(%ebp),%eax
f012417c:	29 d0                	sub    %edx,%eax
f012417e:	01 d8                	add    %ebx,%eax
f0124180:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124185:	39 c1                	cmp    %eax,%ecx
f0124187:	74 17                	je     f01241a0 <test_kheap_virt_addr+0x23f>
f0124189:	83 ec 04             	sub    $0x4,%esp
f012418c:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0124191:	68 f5 08 00 00       	push   $0x8f5
f0124196:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012419b:	e8 10 c0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241a0:	e8 df 04 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01241a5:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01241a8:	74 17                	je     f01241c1 <test_kheap_virt_addr+0x260>
f01241aa:	83 ec 04             	sub    $0x4,%esp
f01241ad:	68 ec 9a 13 f0       	push   $0xf0139aec
f01241b2:	68 f6 08 00 00       	push   $0x8f6
f01241b7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01241bc:	e8 ef bf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01241c1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01241c4:	e8 99 88 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01241c9:	29 c3                	sub    %eax,%ebx
f01241cb:	89 d8                	mov    %ebx,%eax
f01241cd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01241d2:	74 17                	je     f01241eb <test_kheap_virt_addr+0x28a>
f01241d4:	83 ec 04             	sub    $0x4,%esp
f01241d7:	68 54 9b 13 f0       	push   $0xf0139b54
f01241dc:	68 f7 08 00 00       	push   $0x8f7
f01241e1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01241e6:	e8 c5 bf fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01241eb:	e8 72 88 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01241f0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241f3:	e8 8c 04 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01241f8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01241fb:	83 ec 0c             	sub    $0xc,%esp
f01241fe:	68 00 08 00 00       	push   $0x800
f0124203:	e8 f0 3d fe ff       	call   f0107ff8 <kmalloc>
f0124208:	83 c4 10             	add    $0x10,%esp
f012420b:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124211:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0124217:	89 c1                	mov    %eax,%ecx
f0124219:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124220:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124225:	0f b6 d0             	movzbl %al,%edx
f0124228:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012422b:	01 d0                	add    %edx,%eax
f012422d:	48                   	dec    %eax
f012422e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124231:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124234:	ba 00 00 00 00       	mov    $0x0,%edx
f0124239:	f7 75 94             	divl   -0x6c(%ebp)
f012423c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012423f:	29 d0                	sub    %edx,%eax
f0124241:	89 c3                	mov    %eax,%ebx
f0124243:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012424a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012424f:	0f b6 c0             	movzbl %al,%eax
f0124252:	c1 e0 04             	shl    $0x4,%eax
f0124255:	89 c2                	mov    %eax,%edx
f0124257:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012425a:	01 d0                	add    %edx,%eax
f012425c:	48                   	dec    %eax
f012425d:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124260:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124263:	ba 00 00 00 00       	mov    $0x0,%edx
f0124268:	f7 75 8c             	divl   -0x74(%ebp)
f012426b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012426e:	29 d0                	sub    %edx,%eax
f0124270:	01 d8                	add    %ebx,%eax
f0124272:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124277:	39 c1                	cmp    %eax,%ecx
f0124279:	74 17                	je     f0124292 <test_kheap_virt_addr+0x331>
f012427b:	83 ec 04             	sub    $0x4,%esp
f012427e:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0124283:	68 fd 08 00 00       	push   $0x8fd
f0124288:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012428d:	e8 1e bf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124292:	e8 ed 03 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124297:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012429a:	74 17                	je     f01242b3 <test_kheap_virt_addr+0x352>
f012429c:	83 ec 04             	sub    $0x4,%esp
f012429f:	68 ec 9a 13 f0       	push   $0xf0139aec
f01242a4:	68 fe 08 00 00       	push   $0x8fe
f01242a9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01242ae:	e8 fd be fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01242b3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01242b6:	e8 a7 87 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01242bb:	29 c3                	sub    %eax,%ebx
f01242bd:	89 d8                	mov    %ebx,%eax
f01242bf:	83 f8 01             	cmp    $0x1,%eax
f01242c2:	74 17                	je     f01242db <test_kheap_virt_addr+0x37a>
f01242c4:	83 ec 04             	sub    $0x4,%esp
f01242c7:	68 54 9b 13 f0       	push   $0xf0139b54
f01242cc:	68 ff 08 00 00       	push   $0x8ff
f01242d1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01242d6:	e8 d5 be fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01242db:	e8 82 87 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01242e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242e3:	e8 9c 03 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01242e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01242eb:	83 ec 0c             	sub    $0xc,%esp
f01242ee:	68 00 08 00 00       	push   $0x800
f01242f3:	e8 00 3d fe ff       	call   f0107ff8 <kmalloc>
f01242f8:	83 c4 10             	add    $0x10,%esp
f01242fb:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124301:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0124307:	89 c1                	mov    %eax,%ecx
f0124309:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124310:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124315:	0f b6 d0             	movzbl %al,%edx
f0124318:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012431b:	01 d0                	add    %edx,%eax
f012431d:	48                   	dec    %eax
f012431e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124321:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124324:	ba 00 00 00 00       	mov    $0x0,%edx
f0124329:	f7 75 84             	divl   -0x7c(%ebp)
f012432c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012432f:	29 d0                	sub    %edx,%eax
f0124331:	89 c3                	mov    %eax,%ebx
f0124333:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012433a:	10 00 00 
f012433d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124342:	0f b6 c0             	movzbl %al,%eax
f0124345:	c1 e0 04             	shl    $0x4,%eax
f0124348:	89 c2                	mov    %eax,%edx
f012434a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124350:	01 d0                	add    %edx,%eax
f0124352:	48                   	dec    %eax
f0124353:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0124359:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012435f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124364:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012436a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124370:	29 d0                	sub    %edx,%eax
f0124372:	01 d8                	add    %ebx,%eax
f0124374:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124379:	39 c1                	cmp    %eax,%ecx
f012437b:	74 17                	je     f0124394 <test_kheap_virt_addr+0x433>
f012437d:	83 ec 04             	sub    $0x4,%esp
f0124380:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0124385:	68 05 09 00 00       	push   $0x905
f012438a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012438f:	e8 1c be fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124394:	e8 eb 02 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124399:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012439c:	74 17                	je     f01243b5 <test_kheap_virt_addr+0x454>
f012439e:	83 ec 04             	sub    $0x4,%esp
f01243a1:	68 ec 9a 13 f0       	push   $0xf0139aec
f01243a6:	68 06 09 00 00       	push   $0x906
f01243ab:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01243b0:	e8 fb bd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01243b5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01243b8:	e8 a5 86 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01243bd:	29 c3                	sub    %eax,%ebx
f01243bf:	89 d8                	mov    %ebx,%eax
f01243c1:	83 f8 01             	cmp    $0x1,%eax
f01243c4:	74 17                	je     f01243dd <test_kheap_virt_addr+0x47c>
f01243c6:	83 ec 04             	sub    $0x4,%esp
f01243c9:	68 54 9b 13 f0       	push   $0xf0139b54
f01243ce:	68 07 09 00 00       	push   $0x907
f01243d3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01243d8:	e8 d3 bd fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01243dd:	e8 80 86 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01243e2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01243e5:	e8 9a 02 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01243ea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01243ed:	83 ec 0c             	sub    $0xc,%esp
f01243f0:	68 00 1c 00 00       	push   $0x1c00
f01243f5:	e8 fe 3b fe ff       	call   f0107ff8 <kmalloc>
f01243fa:	83 c4 10             	add    $0x10,%esp
f01243fd:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124403:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0124409:	89 c1                	mov    %eax,%ecx
f012440b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124412:	10 00 00 
f0124415:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012441a:	0f b6 d0             	movzbl %al,%edx
f012441d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124423:	01 d0                	add    %edx,%eax
f0124425:	48                   	dec    %eax
f0124426:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012442c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124432:	ba 00 00 00 00       	mov    $0x0,%edx
f0124437:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012443d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124443:	29 d0                	sub    %edx,%eax
f0124445:	89 c3                	mov    %eax,%ebx
f0124447:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012444e:	10 00 00 
f0124451:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124456:	0f b6 c0             	movzbl %al,%eax
f0124459:	c1 e0 04             	shl    $0x4,%eax
f012445c:	89 c2                	mov    %eax,%edx
f012445e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124464:	01 d0                	add    %edx,%eax
f0124466:	48                   	dec    %eax
f0124467:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012446d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124473:	ba 00 00 00 00       	mov    $0x0,%edx
f0124478:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012447e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124484:	29 d0                	sub    %edx,%eax
f0124486:	01 d8                	add    %ebx,%eax
f0124488:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012448d:	39 c1                	cmp    %eax,%ecx
f012448f:	74 17                	je     f01244a8 <test_kheap_virt_addr+0x547>
f0124491:	83 ec 04             	sub    $0x4,%esp
f0124494:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0124499:	68 0d 09 00 00       	push   $0x90d
f012449e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01244a3:	e8 08 bd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01244a8:	e8 d7 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01244ad:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01244b0:	74 17                	je     f01244c9 <test_kheap_virt_addr+0x568>
f01244b2:	83 ec 04             	sub    $0x4,%esp
f01244b5:	68 ec 9a 13 f0       	push   $0xf0139aec
f01244ba:	68 0e 09 00 00       	push   $0x90e
f01244bf:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01244c4:	e8 e7 bc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01244c9:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01244cc:	e8 91 85 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01244d1:	29 c3                	sub    %eax,%ebx
f01244d3:	89 d8                	mov    %ebx,%eax
f01244d5:	83 f8 02             	cmp    $0x2,%eax
f01244d8:	74 17                	je     f01244f1 <test_kheap_virt_addr+0x590>
f01244da:	83 ec 04             	sub    $0x4,%esp
f01244dd:	68 54 9b 13 f0       	push   $0xf0139b54
f01244e2:	68 0f 09 00 00       	push   $0x90f
f01244e7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01244ec:	e8 bf bc fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01244f1:	e8 6c 85 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01244f6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01244f9:	e8 86 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01244fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124501:	83 ec 0c             	sub    $0xc,%esp
f0124504:	68 00 fc 2f 00       	push   $0x2ffc00
f0124509:	e8 ea 3a fe ff       	call   f0107ff8 <kmalloc>
f012450e:	83 c4 10             	add    $0x10,%esp
f0124511:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124517:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012451d:	89 c1                	mov    %eax,%ecx
f012451f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124526:	10 00 00 
f0124529:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012452e:	0f b6 d0             	movzbl %al,%edx
f0124531:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124537:	01 d0                	add    %edx,%eax
f0124539:	48                   	dec    %eax
f012453a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124540:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124546:	ba 00 00 00 00       	mov    $0x0,%edx
f012454b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124551:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124557:	29 d0                	sub    %edx,%eax
f0124559:	89 c3                	mov    %eax,%ebx
f012455b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124562:	10 00 00 
f0124565:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012456a:	0f b6 c0             	movzbl %al,%eax
f012456d:	c1 e0 04             	shl    $0x4,%eax
f0124570:	89 c2                	mov    %eax,%edx
f0124572:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124578:	01 d0                	add    %edx,%eax
f012457a:	48                   	dec    %eax
f012457b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124581:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124587:	ba 00 00 00 00       	mov    $0x0,%edx
f012458c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124592:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124598:	29 d0                	sub    %edx,%eax
f012459a:	01 d8                	add    %ebx,%eax
f012459c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01245a1:	39 c1                	cmp    %eax,%ecx
f01245a3:	74 17                	je     f01245bc <test_kheap_virt_addr+0x65b>
f01245a5:	83 ec 04             	sub    $0x4,%esp
f01245a8:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01245ad:	68 15 09 00 00       	push   $0x915
f01245b2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01245b7:	e8 f4 bb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01245bc:	e8 c3 00 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01245c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01245c4:	74 17                	je     f01245dd <test_kheap_virt_addr+0x67c>
f01245c6:	83 ec 04             	sub    $0x4,%esp
f01245c9:	68 ec 9a 13 f0       	push   $0xf0139aec
f01245ce:	68 16 09 00 00       	push   $0x916
f01245d3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01245d8:	e8 d3 bb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01245dd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01245e0:	e8 7d 84 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01245e5:	29 c3                	sub    %eax,%ebx
f01245e7:	89 d8                	mov    %ebx,%eax
f01245e9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01245ee:	74 17                	je     f0124607 <test_kheap_virt_addr+0x6a6>
f01245f0:	83 ec 04             	sub    $0x4,%esp
f01245f3:	68 54 9b 13 f0       	push   $0xf0139b54
f01245f8:	68 17 09 00 00       	push   $0x917
f01245fd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124602:	e8 a9 bb fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124607:	e8 56 84 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012460c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012460f:	e8 70 00 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124614:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124617:	83 ec 0c             	sub    $0xc,%esp
f012461a:	68 00 fc 5f 00       	push   $0x5ffc00
f012461f:	e8 d4 39 fe ff       	call   f0107ff8 <kmalloc>
f0124624:	83 c4 10             	add    $0x10,%esp
f0124627:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012462d:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124633:	89 c1                	mov    %eax,%ecx
f0124635:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012463c:	10 00 00 
f012463f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124644:	0f b6 d0             	movzbl %al,%edx
f0124647:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012464d:	01 d0                	add    %edx,%eax
f012464f:	48                   	dec    %eax
f0124650:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124656:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012465c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124661:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124667:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012466d:	29 d0                	sub    %edx,%eax
f012466f:	89 c3                	mov    %eax,%ebx
f0124671:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124678:	10 00 00 
f012467b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124680:	0f b6 c0             	movzbl %al,%eax
f0124683:	c1 e0 04             	shl    $0x4,%eax
f0124686:	89 c2                	mov    %eax,%edx
f0124688:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012468e:	01 d0                	add    %edx,%eax
f0124690:	48                   	dec    %eax
f0124691:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124697:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012469d:	ba 00 00 00 00       	mov    $0x0,%edx
f01246a2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01246a8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01246ae:	29 d0                	sub    %edx,%eax
f01246b0:	01 d8                	add    %ebx,%eax
f01246b2:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01246b7:	39 c1                	cmp    %eax,%ecx
f01246b9:	74 17                	je     f01246d2 <test_kheap_virt_addr+0x771>
f01246bb:	83 ec 04             	sub    $0x4,%esp
f01246be:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01246c3:	68 1d 09 00 00       	push   $0x91d
f01246c8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01246cd:	e8 de ba fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01246d2:	e8 ad ff fd ff       	call   f0104684 <pf_calculate_free_frames>
f01246d7:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01246da:	74 17                	je     f01246f3 <test_kheap_virt_addr+0x792>
f01246dc:	83 ec 04             	sub    $0x4,%esp
f01246df:	68 ec 9a 13 f0       	push   $0xf0139aec
f01246e4:	68 1e 09 00 00       	push   $0x91e
f01246e9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01246ee:	e8 bd ba fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01246f3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01246f6:	e8 67 83 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01246fb:	29 c3                	sub    %eax,%ebx
f01246fd:	89 d8                	mov    %ebx,%eax
f01246ff:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124704:	74 17                	je     f012471d <test_kheap_virt_addr+0x7bc>
f0124706:	83 ec 04             	sub    $0x4,%esp
f0124709:	68 54 9b 13 f0       	push   $0xf0139b54
f012470e:	68 1f 09 00 00       	push   $0x91f
f0124713:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124718:	e8 93 ba fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012471d:	e8 40 83 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0124722:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124725:	e8 5a ff fd ff       	call   f0104684 <pf_calculate_free_frames>
f012472a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012472d:	83 ec 0c             	sub    $0xc,%esp
f0124730:	68 00 38 00 00       	push   $0x3800
f0124735:	e8 be 38 fe ff       	call   f0107ff8 <kmalloc>
f012473a:	83 c4 10             	add    $0x10,%esp
f012473d:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124743:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0124749:	89 c1                	mov    %eax,%ecx
f012474b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124752:	10 00 00 
f0124755:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012475a:	0f b6 d0             	movzbl %al,%edx
f012475d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124763:	01 d0                	add    %edx,%eax
f0124765:	48                   	dec    %eax
f0124766:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012476c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124772:	ba 00 00 00 00       	mov    $0x0,%edx
f0124777:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012477d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124783:	29 d0                	sub    %edx,%eax
f0124785:	89 c3                	mov    %eax,%ebx
f0124787:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012478e:	10 00 00 
f0124791:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124796:	0f b6 c0             	movzbl %al,%eax
f0124799:	c1 e0 04             	shl    $0x4,%eax
f012479c:	89 c2                	mov    %eax,%edx
f012479e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01247a4:	01 d0                	add    %edx,%eax
f01247a6:	48                   	dec    %eax
f01247a7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01247ad:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01247b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01247b8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01247be:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01247c4:	29 d0                	sub    %edx,%eax
f01247c6:	01 d8                	add    %ebx,%eax
f01247c8:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01247cd:	39 c1                	cmp    %eax,%ecx
f01247cf:	74 17                	je     f01247e8 <test_kheap_virt_addr+0x887>
f01247d1:	83 ec 04             	sub    $0x4,%esp
f01247d4:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01247d9:	68 25 09 00 00       	push   $0x925
f01247de:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01247e3:	e8 c8 b9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01247e8:	e8 97 fe fd ff       	call   f0104684 <pf_calculate_free_frames>
f01247ed:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01247f0:	74 17                	je     f0124809 <test_kheap_virt_addr+0x8a8>
f01247f2:	83 ec 04             	sub    $0x4,%esp
f01247f5:	68 ec 9a 13 f0       	push   $0xf0139aec
f01247fa:	68 26 09 00 00       	push   $0x926
f01247ff:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124804:	e8 a7 b9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124809:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012480c:	e8 51 82 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0124811:	29 c3                	sub    %eax,%ebx
f0124813:	89 d8                	mov    %ebx,%eax
f0124815:	83 f8 04             	cmp    $0x4,%eax
f0124818:	74 17                	je     f0124831 <test_kheap_virt_addr+0x8d0>
f012481a:	83 ec 04             	sub    $0x4,%esp
f012481d:	68 54 9b 13 f0       	push   $0xf0139b54
f0124822:	68 27 09 00 00       	push   $0x927
f0124827:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012482c:	e8 7f b9 fd ff       	call   f01001b0 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124831:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124838:	10 00 00 
f012483b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124840:	0f b6 d0             	movzbl %al,%edx
f0124843:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124849:	01 d0                	add    %edx,%eax
f012484b:	48                   	dec    %eax
f012484c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124852:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124858:	ba 00 00 00 00       	mov    $0x0,%edx
f012485d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124863:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124869:	29 d0                	sub    %edx,%eax
f012486b:	89 c1                	mov    %eax,%ecx
f012486d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124874:	10 00 00 
f0124877:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012487c:	0f b6 c0             	movzbl %al,%eax
f012487f:	c1 e0 04             	shl    $0x4,%eax
f0124882:	89 c2                	mov    %eax,%edx
f0124884:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012488a:	01 d0                	add    %edx,%eax
f012488c:	48                   	dec    %eax
f012488d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124893:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124899:	ba 00 00 00 00       	mov    $0x0,%edx
f012489e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01248a4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01248aa:	29 d0                	sub    %edx,%eax
f01248ac:	01 c8                	add    %ecx,%eax
f01248ae:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01248b3:	c1 e8 0c             	shr    $0xc,%eax
f01248b6:	89 c2                	mov    %eax,%edx
f01248b8:	4a                   	dec    %edx
f01248b9:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f01248bf:	c1 e0 02             	shl    $0x2,%eax
f01248c2:	8d 50 03             	lea    0x3(%eax),%edx
f01248c5:	b8 10 00 00 00       	mov    $0x10,%eax
f01248ca:	48                   	dec    %eax
f01248cb:	01 d0                	add    %edx,%eax
f01248cd:	bf 10 00 00 00       	mov    $0x10,%edi
f01248d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01248d7:	f7 f7                	div    %edi
f01248d9:	6b c0 10             	imul   $0x10,%eax,%eax
f01248dc:	29 c4                	sub    %eax,%esp
f01248de:	89 e0                	mov    %esp,%eax
f01248e0:	83 c0 03             	add    $0x3,%eax
f01248e3:	c1 e8 02             	shr    $0x2,%eax
f01248e6:	c1 e0 02             	shl    $0x2,%eax
f01248e9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f01248ef:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01248f6:	10 00 00 
f01248f9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01248fe:	0f b6 d0             	movzbl %al,%edx
f0124901:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124907:	01 d0                	add    %edx,%eax
f0124909:	48                   	dec    %eax
f012490a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124910:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124916:	ba 00 00 00 00       	mov    $0x0,%edx
f012491b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124921:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124927:	29 d0                	sub    %edx,%eax
f0124929:	89 c1                	mov    %eax,%ecx
f012492b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124932:	10 00 00 
f0124935:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012493a:	0f b6 c0             	movzbl %al,%eax
f012493d:	c1 e0 04             	shl    $0x4,%eax
f0124940:	89 c2                	mov    %eax,%edx
f0124942:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124948:	01 d0                	add    %edx,%eax
f012494a:	48                   	dec    %eax
f012494b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124951:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124957:	ba 00 00 00 00       	mov    $0x0,%edx
f012495c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124962:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124968:	29 d0                	sub    %edx,%eax
f012496a:	01 c8                	add    %ecx,%eax
f012496c:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124971:	c1 e8 0c             	shr    $0xc,%eax
f0124974:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012497a:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124981:	10 00 00 
f0124984:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124989:	0f b6 d0             	movzbl %al,%edx
f012498c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124992:	01 d0                	add    %edx,%eax
f0124994:	48                   	dec    %eax
f0124995:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012499b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01249a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01249a6:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01249ac:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01249b2:	29 d0                	sub    %edx,%eax
f01249b4:	89 c1                	mov    %eax,%ecx
f01249b6:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01249bd:	10 00 00 
f01249c0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01249c5:	0f b6 c0             	movzbl %al,%eax
f01249c8:	c1 e0 04             	shl    $0x4,%eax
f01249cb:	89 c2                	mov    %eax,%edx
f01249cd:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01249d3:	01 d0                	add    %edx,%eax
f01249d5:	48                   	dec    %eax
f01249d6:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01249dc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01249e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01249e7:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01249ed:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01249f3:	29 d0                	sub    %edx,%eax
f01249f5:	01 c8                	add    %ecx,%eax
f01249f7:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01249fc:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0124a02:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124a09:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0124a10:	e9 21 01 00 00       	jmp    f0124b36 <test_kheap_virt_addr+0xbd5>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124a15:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0124a1a:	83 ec 04             	sub    $0x4,%esp
f0124a1d:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0124a23:	52                   	push   %edx
f0124a24:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124a27:	50                   	push   %eax
f0124a28:	e8 ba 2a fe ff       	call   f01074e7 <get_page_table>
f0124a2d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124a30:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0124a36:	85 c0                	test   %eax,%eax
f0124a38:	75 17                	jne    f0124a51 <test_kheap_virt_addr+0xaf0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124a3a:	83 ec 04             	sub    $0x4,%esp
f0124a3d:	68 74 a4 13 f0       	push   $0xf013a474
f0124a42:	68 38 09 00 00       	push   $0x938
f0124a47:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124a4c:	e8 5f b7 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124a51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124a54:	c1 e8 0c             	shr    $0xc,%eax
f0124a57:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124a5c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124a5f:	e9 ba 00 00 00       	jmp    f0124b1e <test_kheap_virt_addr+0xbbd>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0124a64:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0124a6a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124a6d:	c1 e2 02             	shl    $0x2,%edx
f0124a70:	01 d0                	add    %edx,%eax
f0124a72:	8b 00                	mov    (%eax),%eax
f0124a74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124a79:	89 c1                	mov    %eax,%ecx
f0124a7b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124a81:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124a84:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124a87:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124a8d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124a90:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124a93:	83 ec 0c             	sub    $0xc,%esp
f0124a96:	50                   	push   %eax
f0124a97:	e8 90 35 fe ff       	call   f010802c <kheap_virtual_address>
f0124a9c:	83 c4 10             	add    $0x10,%esp
f0124a9f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0124aa5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124aab:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0124aae:	74 61                	je     f0124b11 <test_kheap_virt_addr+0xbb0>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0124ab0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124ab6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124ab9:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124abc:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f0124ac2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0124ac5:	c1 e1 02             	shl    $0x2,%ecx
f0124ac8:	01 ca                	add    %ecx,%edx
f0124aca:	8b 12                	mov    (%edx),%edx
f0124acc:	89 d1                	mov    %edx,%ecx
f0124ace:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0124ad4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124ad7:	c1 e2 0c             	shl    $0xc,%edx
f0124ada:	89 d3                	mov    %edx,%ebx
f0124adc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124adf:	01 da                	add    %ebx,%edx
f0124ae1:	83 ec 0c             	sub    $0xc,%esp
f0124ae4:	50                   	push   %eax
f0124ae5:	51                   	push   %ecx
f0124ae6:	52                   	push   %edx
f0124ae7:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
f0124aed:	68 68 a5 13 f0       	push   $0xf013a568
f0124af2:	e8 3a c3 fd ff       	call   f0100e31 <cprintf>
f0124af7:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0124afa:	83 ec 04             	sub    $0x4,%esp
f0124afd:	68 ab a5 13 f0       	push   $0xf013a5ab
f0124b02:	68 42 09 00 00       	push   $0x942
f0124b07:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124b0c:	e8 9f b6 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0124b11:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124b18:	ff 45 dc             	incl   -0x24(%ebp)
f0124b1b:	ff 45 e0             	incl   -0x20(%ebp)
f0124b1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124b21:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f0124b27:	7d 0d                	jge    f0124b36 <test_kheap_virt_addr+0xbd5>
f0124b29:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124b30:	0f 8e 2e ff ff ff    	jle    f0124a64 <test_kheap_virt_addr+0xb03>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124b36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124b39:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f0124b3f:	0f 82 d0 fe ff ff    	jb     f0124a15 <test_kheap_virt_addr+0xab4>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0124b45:	83 ec 0c             	sub    $0xc,%esp
f0124b48:	68 c8 a5 13 f0       	push   $0xf013a5c8
f0124b4d:	e8 df c2 fd ff       	call   f0100e31 <cprintf>
f0124b52:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124b55:	e8 08 7f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0124b5a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124b60:	e8 1f fb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124b65:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0124b6b:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0124b71:	83 ec 0c             	sub    $0xc,%esp
f0124b74:	50                   	push   %eax
f0124b75:	e8 98 34 fe ff       	call   f0108012 <kfree>
f0124b7a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b7d:	e8 02 fb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124b82:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124b88:	74 17                	je     f0124ba1 <test_kheap_virt_addr+0xc40>
f0124b8a:	83 ec 04             	sub    $0x4,%esp
f0124b8d:	68 ec 9a 13 f0       	push   $0xf0139aec
f0124b92:	68 50 09 00 00       	push   $0x950
f0124b97:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124b9c:	e8 0f b6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124ba1:	e8 bc 7e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0124ba6:	89 c2                	mov    %eax,%edx
f0124ba8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124bae:	29 c2                	sub    %eax,%edx
f0124bb0:	89 d0                	mov    %edx,%eax
f0124bb2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124bb7:	74 17                	je     f0124bd0 <test_kheap_virt_addr+0xc6f>
f0124bb9:	83 ec 04             	sub    $0x4,%esp
f0124bbc:	68 5c a2 13 f0       	push   $0xf013a25c
f0124bc1:	68 51 09 00 00       	push   $0x951
f0124bc6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124bcb:	e8 e0 b5 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124bd0:	e8 8d 7e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0124bd5:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124bdb:	e8 a4 fa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124be0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0124be6:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0124bec:	83 ec 0c             	sub    $0xc,%esp
f0124bef:	50                   	push   %eax
f0124bf0:	e8 1d 34 fe ff       	call   f0108012 <kfree>
f0124bf5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124bf8:	e8 87 fa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124bfd:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124c03:	74 17                	je     f0124c1c <test_kheap_virt_addr+0xcbb>
f0124c05:	83 ec 04             	sub    $0x4,%esp
f0124c08:	68 ec 9a 13 f0       	push   $0xf0139aec
f0124c0d:	68 57 09 00 00       	push   $0x957
f0124c12:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124c17:	e8 94 b5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124c1c:	e8 41 7e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0124c21:	89 c2                	mov    %eax,%edx
f0124c23:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124c29:	29 c2                	sub    %eax,%edx
f0124c2b:	89 d0                	mov    %edx,%eax
f0124c2d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124c32:	74 17                	je     f0124c4b <test_kheap_virt_addr+0xcea>
f0124c34:	83 ec 04             	sub    $0x4,%esp
f0124c37:	68 5c a2 13 f0       	push   $0xf013a25c
f0124c3c:	68 58 09 00 00       	push   $0x958
f0124c41:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124c46:	e8 65 b5 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124c4b:	e8 12 7e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0124c50:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124c56:	e8 29 fa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124c5b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0124c61:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124c67:	83 ec 0c             	sub    $0xc,%esp
f0124c6a:	50                   	push   %eax
f0124c6b:	e8 a2 33 fe ff       	call   f0108012 <kfree>
f0124c70:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c73:	e8 0c fa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124c78:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124c7e:	74 17                	je     f0124c97 <test_kheap_virt_addr+0xd36>
f0124c80:	83 ec 04             	sub    $0x4,%esp
f0124c83:	68 ec 9a 13 f0       	push   $0xf0139aec
f0124c88:	68 5e 09 00 00       	push   $0x95e
f0124c8d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124c92:	e8 19 b5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124c97:	e8 c6 7d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0124c9c:	89 c2                	mov    %eax,%edx
f0124c9e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124ca4:	29 c2                	sub    %eax,%edx
f0124ca6:	89 d0                	mov    %edx,%eax
f0124ca8:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124cad:	74 17                	je     f0124cc6 <test_kheap_virt_addr+0xd65>
f0124caf:	83 ec 04             	sub    $0x4,%esp
f0124cb2:	68 5c a2 13 f0       	push   $0xf013a25c
f0124cb7:	68 5f 09 00 00       	push   $0x95f
f0124cbc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124cc1:	e8 ea b4 fd ff       	call   f01001b0 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124cc6:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124ccd:	10 00 00 
f0124cd0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124cd5:	0f b6 d0             	movzbl %al,%edx
f0124cd8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124cde:	01 d0                	add    %edx,%eax
f0124ce0:	48                   	dec    %eax
f0124ce1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124ce7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124ced:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cf2:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124cf8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124cfe:	29 d0                	sub    %edx,%eax
f0124d00:	89 c1                	mov    %eax,%ecx
f0124d02:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124d09:	10 00 00 
f0124d0c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124d11:	0f b6 c0             	movzbl %al,%eax
f0124d14:	c1 e0 04             	shl    $0x4,%eax
f0124d17:	89 c2                	mov    %eax,%edx
f0124d19:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124d1f:	01 d0                	add    %edx,%eax
f0124d21:	48                   	dec    %eax
f0124d22:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124d28:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124d2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d33:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124d39:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124d3f:	29 d0                	sub    %edx,%eax
f0124d41:	01 c8                	add    %ecx,%eax
f0124d43:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124d48:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0124d4e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0124d55:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0124d5c:	10 00 00 
f0124d5f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124d64:	0f b6 d0             	movzbl %al,%edx
f0124d67:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124d6d:	01 d0                	add    %edx,%eax
f0124d6f:	48                   	dec    %eax
f0124d70:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0124d76:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124d7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d81:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0124d87:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124d8d:	29 d0                	sub    %edx,%eax
f0124d8f:	89 c1                	mov    %eax,%ecx
f0124d91:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124d98:	10 00 00 
f0124d9b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124da0:	0f b6 c0             	movzbl %al,%eax
f0124da3:	c1 e0 04             	shl    $0x4,%eax
f0124da6:	89 c2                	mov    %eax,%edx
f0124da8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124dae:	01 d0                	add    %edx,%eax
f0124db0:	48                   	dec    %eax
f0124db1:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124db7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124dbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dc2:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124dc8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124dce:	29 d0                	sub    %edx,%eax
f0124dd0:	01 c8                	add    %ecx,%eax
f0124dd2:	05 00 40 00 00       	add    $0x4000,%eax
f0124dd7:	c1 e8 0c             	shr    $0xc,%eax
f0124dda:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124de0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124de6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124de9:	eb 41                	jmp    f0124e2c <test_kheap_virt_addr+0xecb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124deb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124df1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124df4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124df7:	83 ec 0c             	sub    $0xc,%esp
f0124dfa:	50                   	push   %eax
f0124dfb:	e8 2c 32 fe ff       	call   f010802c <kheap_virtual_address>
f0124e00:	83 c4 10             	add    $0x10,%esp
f0124e03:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f0124e09:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0124e10:	74 17                	je     f0124e29 <test_kheap_virt_addr+0xec8>
			{
				panic("Wrong kheap_virtual_address");
f0124e12:	83 ec 04             	sub    $0x4,%esp
f0124e15:	68 ab a5 13 f0       	push   $0xf013a5ab
f0124e1a:	68 70 09 00 00       	push   $0x970
f0124e1f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124e24:	e8 87 b3 fd ff       	call   f01001b0 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124e29:	ff 45 d8             	incl   -0x28(%ebp)
f0124e2c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124e32:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0124e38:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124e3b:	39 c2                	cmp    %eax,%edx
f0124e3d:	77 ac                	ja     f0124deb <test_kheap_virt_addr+0xe8a>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124e3f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124e45:	05 00 04 00 00       	add    $0x400,%eax
f0124e4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124e4d:	eb 4b                	jmp    f0124e9a <test_kheap_virt_addr+0xf39>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124e4f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124e55:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124e58:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124e5b:	83 ec 0c             	sub    $0xc,%esp
f0124e5e:	50                   	push   %eax
f0124e5f:	e8 c8 31 fe ff       	call   f010802c <kheap_virtual_address>
f0124e64:	83 c4 10             	add    $0x10,%esp
f0124e67:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124e6d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124e70:	c1 e0 0c             	shl    $0xc,%eax
f0124e73:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124e78:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0124e7e:	74 17                	je     f0124e97 <test_kheap_virt_addr+0xf36>
			{
				panic("Wrong kheap_virtual_address");
f0124e80:	83 ec 04             	sub    $0x4,%esp
f0124e83:	68 ab a5 13 f0       	push   $0xf013a5ab
f0124e88:	68 7a 09 00 00       	push   $0x97a
f0124e8d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124e92:	e8 19 b3 fd ff       	call   f01001b0 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124e97:	ff 45 d8             	incl   -0x28(%ebp)
f0124e9a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124ea0:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0124ea6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124ea9:	39 c2                	cmp    %eax,%edx
f0124eab:	77 a2                	ja     f0124e4f <test_kheap_virt_addr+0xeee>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124ead:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124eb3:	05 04 07 00 00       	add    $0x704,%eax
f0124eb8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124ebb:	eb 41                	jmp    f0124efe <test_kheap_virt_addr+0xf9d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124ebd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124ec3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124ec6:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124ec9:	83 ec 0c             	sub    $0xc,%esp
f0124ecc:	50                   	push   %eax
f0124ecd:	e8 5a 31 fe ff       	call   f010802c <kheap_virtual_address>
f0124ed2:	83 c4 10             	add    $0x10,%esp
f0124ed5:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0124edb:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0124ee2:	74 17                	je     f0124efb <test_kheap_virt_addr+0xf9a>
			{
				panic("Wrong kheap_virtual_address");
f0124ee4:	83 ec 04             	sub    $0x4,%esp
f0124ee7:	68 ab a5 13 f0       	push   $0xf013a5ab
f0124eec:	68 83 09 00 00       	push   $0x983
f0124ef1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124ef6:	e8 b5 b2 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124efb:	ff 45 d8             	incl   -0x28(%ebp)
f0124efe:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124f04:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0124f0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124f0d:	39 c2                	cmp    %eax,%edx
f0124f0f:	77 ac                	ja     f0124ebd <test_kheap_virt_addr+0xf5c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124f11:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124f17:	05 04 0d 00 00       	add    $0xd04,%eax
f0124f1c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124f1f:	eb 4b                	jmp    f0124f6c <test_kheap_virt_addr+0x100b>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124f21:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124f27:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124f2a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124f2d:	83 ec 0c             	sub    $0xc,%esp
f0124f30:	50                   	push   %eax
f0124f31:	e8 f6 30 fe ff       	call   f010802c <kheap_virtual_address>
f0124f36:	83 c4 10             	add    $0x10,%esp
f0124f39:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124f3f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124f42:	c1 e0 0c             	shl    $0xc,%eax
f0124f45:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124f4a:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0124f50:	74 17                	je     f0124f69 <test_kheap_virt_addr+0x1008>
			{
				panic("Wrong kheap_virtual_address");
f0124f52:	83 ec 04             	sub    $0x4,%esp
f0124f55:	68 ab a5 13 f0       	push   $0xf013a5ab
f0124f5a:	68 8c 09 00 00       	push   $0x98c
f0124f5f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124f64:	e8 47 b2 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124f69:	ff 45 d8             	incl   -0x28(%ebp)
f0124f6c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124f72:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0124f78:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124f7b:	39 c2                	cmp    %eax,%edx
f0124f7d:	77 a2                	ja     f0124f21 <test_kheap_virt_addr+0xfc0>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0124f7f:	83 ec 0c             	sub    $0xc,%esp
f0124f82:	68 5d 9c 13 f0       	push   $0xf0139c5d
f0124f87:	e8 a5 be fd ff       	call   f0100e31 <cprintf>
f0124f8c:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124f8f:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0124f96:	eb 54                	jmp    f0124fec <test_kheap_virt_addr+0x108b>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0124f98:	83 ec 0c             	sub    $0xc,%esp
f0124f9b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124f9e:	e8 89 30 fe ff       	call   f010802c <kheap_virtual_address>
f0124fa3:	83 c4 10             	add    $0x10,%esp
f0124fa6:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0124fac:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0124fb3:	74 30                	je     f0124fe5 <test_kheap_virt_addr+0x1084>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0124fb5:	83 ec 04             	sub    $0x4,%esp
f0124fb8:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0124fbe:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124fc1:	68 f9 a5 13 f0       	push   $0xf013a5f9
f0124fc6:	e8 66 be fd ff       	call   f0100e31 <cprintf>
f0124fcb:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0124fce:	83 ec 04             	sub    $0x4,%esp
f0124fd1:	68 ab a5 13 f0       	push   $0xf013a5ab
f0124fd6:	68 9c 09 00 00       	push   $0x99c
f0124fdb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0124fe0:	e8 cb b1 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124fe5:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0124fec:	b8 8c e5 2d 00       	mov    $0x2de58c,%eax
f0124ff1:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0124ff4:	72 a2                	jb     f0124f98 <test_kheap_virt_addr+0x1037>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124ff6:	83 ec 0c             	sub    $0xc,%esp
f0124ff9:	68 b6 9c 13 f0       	push   $0xf0139cb6
f0124ffe:	e8 2e be fd ff       	call   f0100e31 <cprintf>
f0125003:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125006:	83 ec 0c             	sub    $0xc,%esp
f0125009:	68 18 a6 13 f0       	push   $0xf013a618
f012500e:	e8 1e be fd ff       	call   f0100e31 <cprintf>
f0125013:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125016:	b8 01 00 00 00       	mov    $0x1,%eax
f012501b:	89 f4                	mov    %esi,%esp

}
f012501d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125020:	5b                   	pop    %ebx
f0125021:	5e                   	pop    %esi
f0125022:	5f                   	pop    %edi
f0125023:	5d                   	pop    %ebp
f0125024:	c3                   	ret    

f0125025 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125025:	55                   	push   %ebp
f0125026:	89 e5                	mov    %esp,%ebp
f0125028:	57                   	push   %edi
f0125029:	56                   	push   %esi
f012502a:	53                   	push   %ebx
f012502b:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f0125031:	a0 3d eb 18 f0       	mov    0xf018eb3d,%al
f0125036:	84 c0                	test   %al,%al
f0125038:	74 56                	je     f0125090 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f012503a:	c6 05 3d eb 18 f0 00 	movb   $0x0,0xf018eb3d
		initFreeFrames = sys_calculate_free_frames() ;
f0125041:	e8 1c 7a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125046:	a3 88 e5 2d f0       	mov    %eax,0xf02de588
		initFreeDiskFrames = pf_calculate_free_frames() ;
f012504b:	e8 34 f6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125050:	a3 84 e5 2d f0       	mov    %eax,0xf02de584
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125055:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f012505b:	bb 75 a7 13 f0       	mov    $0xf013a775,%ebx
f0125060:	ba 11 00 00 00       	mov    $0x11,%edx
f0125065:	89 c7                	mov    %eax,%edi
f0125067:	89 de                	mov    %ebx,%esi
f0125069:	89 d1                	mov    %edx,%ecx
f012506b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f012506d:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0125073:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125078:	b0 00                	mov    $0x0,%al
f012507a:	89 d7                	mov    %edx,%edi
f012507c:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f012507e:	83 ec 0c             	sub    $0xc,%esp
f0125081:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0125087:	50                   	push   %eax
f0125088:	e8 36 cb fd ff       	call   f0101bc3 <execute_command>
f012508d:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0125090:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0125097:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012509e:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f01250a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01250a6:	eb 2b                	jmp    f01250d3 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f01250a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01250ab:	83 c0 5c             	add    $0x5c,%eax
f01250ae:	83 ec 08             	sub    $0x8,%esp
f01250b1:	68 5f a6 13 f0       	push   $0xf013a65f
f01250b6:	50                   	push   %eax
f01250b7:	e8 ec a0 00 00       	call   f012f1a8 <strcmp>
f01250bc:	83 c4 10             	add    $0x10,%esp
f01250bf:	85 c0                	test   %eax,%eax
f01250c1:	75 08                	jne    f01250cb <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f01250c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01250c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f01250c9:	eb 2f                	jmp    f01250fa <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01250cb:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f01250d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01250d3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01250d7:	74 08                	je     f01250e1 <test_three_creation_functions+0xbc>
f01250d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01250dc:	8b 40 44             	mov    0x44(%eax),%eax
f01250df:	eb 05                	jmp    f01250e6 <test_three_creation_functions+0xc1>
f01250e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01250e6:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f01250eb:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f01250f0:	85 c0                	test   %eax,%eax
f01250f2:	75 b4                	jne    f01250a8 <test_three_creation_functions+0x83>
f01250f4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01250f8:	75 ae                	jne    f01250a8 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f01250fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01250fd:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f0125103:	85 c0                	test   %eax,%eax
f0125105:	74 17                	je     f012511e <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125107:	83 ec 04             	sub    $0x4,%esp
f012510a:	68 68 a6 13 f0       	push   $0xf013a668
f012510f:	68 c6 09 00 00       	push   $0x9c6
f0125114:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125119:	e8 92 b0 fd ff       	call   f01001b0 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f012511e:	83 ec 0c             	sub    $0xc,%esp
f0125121:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125124:	e8 c8 31 fe ff       	call   f01082f1 <env_page_ws_get_size>
f0125129:	83 c4 10             	add    $0x10,%esp
f012512c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f012512f:	e8 2e 79 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125134:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125137:	e8 48 f5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012513c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012513f:	a1 84 e5 2d f0       	mov    0xf02de584,%eax
f0125144:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0125147:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012514a:	74 17                	je     f0125163 <test_three_creation_functions+0x13e>
f012514c:	83 ec 04             	sub    $0x4,%esp
f012514f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0125154:	68 cc 09 00 00       	push   $0x9cc
f0125159:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012515e:	e8 4d b0 fd ff       	call   f01001b0 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125163:	a1 88 e5 2d f0       	mov    0xf02de588,%eax
f0125168:	2b 45 d8             	sub    -0x28(%ebp),%eax
f012516b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012516e:	83 c2 15             	add    $0x15,%edx
f0125171:	39 d0                	cmp    %edx,%eax
f0125173:	74 17                	je     f012518c <test_three_creation_functions+0x167>
f0125175:	83 ec 04             	sub    $0x4,%esp
f0125178:	68 54 9b 13 f0       	push   $0xf0139b54
f012517d:	68 ce 09 00 00       	push   $0x9ce
f0125182:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125187:	e8 24 b0 fd ff       	call   f01001b0 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f012518c:	83 ec 0c             	sub    $0xc,%esp
f012518f:	68 00 10 00 00       	push   $0x1000
f0125194:	e8 5f 2e fe ff       	call   f0107ff8 <kmalloc>
f0125199:	83 c4 10             	add    $0x10,%esp
f012519c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f012519f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01251a6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01251ab:	0f b6 d0             	movzbl %al,%edx
f01251ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01251b1:	01 d0                	add    %edx,%eax
f01251b3:	48                   	dec    %eax
f01251b4:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01251b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01251ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01251bf:	f7 75 cc             	divl   -0x34(%ebp)
f01251c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01251c5:	29 d0                	sub    %edx,%eax
f01251c7:	89 c1                	mov    %eax,%ecx
f01251c9:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01251d0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01251d5:	0f b6 c0             	movzbl %al,%eax
f01251d8:	c1 e0 04             	shl    $0x4,%eax
f01251db:	89 c2                	mov    %eax,%edx
f01251dd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01251e0:	01 d0                	add    %edx,%eax
f01251e2:	48                   	dec    %eax
f01251e3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01251e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01251e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01251ee:	f7 75 c4             	divl   -0x3c(%ebp)
f01251f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01251f4:	29 d0                	sub    %edx,%eax
f01251f6:	01 c8                	add    %ecx,%eax
f01251f8:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f01251fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125201:	39 c2                	cmp    %eax,%edx
f0125203:	74 17                	je     f012521c <test_three_creation_functions+0x1f7>
f0125205:	83 ec 04             	sub    $0x4,%esp
f0125208:	68 b8 a6 13 f0       	push   $0xf013a6b8
f012520d:	68 d2 09 00 00       	push   $0x9d2
f0125212:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125217:	e8 94 af fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f012521c:	83 ec 0c             	sub    $0xc,%esp
f012521f:	68 28 a7 13 f0       	push   $0xf013a728
f0125224:	e8 08 bc fd ff       	call   f0100e31 <cprintf>
f0125229:	83 c4 10             	add    $0x10,%esp

	return 1;
f012522c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0125231:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125234:	5b                   	pop    %ebx
f0125235:	5e                   	pop    %esi
f0125236:	5f                   	pop    %edi
f0125237:	5d                   	pop    %ebp
f0125238:	c3                   	ret    

f0125239 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0125239:	55                   	push   %ebp
f012523a:	89 e5                	mov    %esp,%ebp
f012523c:	57                   	push   %edi
f012523d:	53                   	push   %ebx
f012523e:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	char minByte = 1<<7;
f0125244:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0125248:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f012524c:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0125252:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0125258:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012525f:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125266:	e8 f7 77 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012526b:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012526e:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0125274:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125279:	b8 00 00 00 00       	mov    $0x0,%eax
f012527e:	89 d7                	mov    %edx,%edi
f0125280:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125282:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0125288:	b9 14 00 00 00       	mov    $0x14,%ecx
f012528d:	b8 00 00 00 00       	mov    $0x0,%eax
f0125292:	89 d7                	mov    %edx,%edi
f0125294:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125296:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f012529c:	b9 14 00 00 00       	mov    $0x14,%ecx
f01252a1:	b8 00 00 00 00       	mov    $0x0,%eax
f01252a6:	89 d7                	mov    %edx,%edi
f01252a8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01252aa:	e8 b3 77 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01252af:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01252b2:	e8 cd f3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01252b7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01252ba:	83 ec 0c             	sub    $0xc,%esp
f01252bd:	68 00 fc 1f 00       	push   $0x1ffc00
f01252c2:	e8 31 2d fe ff       	call   f0107ff8 <kmalloc>
f01252c7:	83 c4 10             	add    $0x10,%esp
f01252ca:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01252d0:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01252d6:	89 c1                	mov    %eax,%ecx
f01252d8:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01252df:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01252e4:	0f b6 d0             	movzbl %al,%edx
f01252e7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01252ea:	01 d0                	add    %edx,%eax
f01252ec:	48                   	dec    %eax
f01252ed:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01252f0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01252f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01252f8:	f7 75 c8             	divl   -0x38(%ebp)
f01252fb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01252fe:	29 d0                	sub    %edx,%eax
f0125300:	89 c3                	mov    %eax,%ebx
f0125302:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0125309:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012530e:	0f b6 c0             	movzbl %al,%eax
f0125311:	c1 e0 04             	shl    $0x4,%eax
f0125314:	89 c2                	mov    %eax,%edx
f0125316:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125319:	01 d0                	add    %edx,%eax
f012531b:	48                   	dec    %eax
f012531c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f012531f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125322:	ba 00 00 00 00       	mov    $0x0,%edx
f0125327:	f7 75 c0             	divl   -0x40(%ebp)
f012532a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012532d:	29 d0                	sub    %edx,%eax
f012532f:	01 d8                	add    %ebx,%eax
f0125331:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125336:	39 c1                	cmp    %eax,%ecx
f0125338:	74 17                	je     f0125351 <test_kfreeall+0x118>
f012533a:	83 ec 04             	sub    $0x4,%esp
f012533d:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0125342:	68 f9 09 00 00       	push   $0x9f9
f0125347:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012534c:	e8 5f ae fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125351:	e8 2e f3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125356:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125359:	74 17                	je     f0125372 <test_kfreeall+0x139>
f012535b:	83 ec 04             	sub    $0x4,%esp
f012535e:	68 ec 9a 13 f0       	push   $0xf0139aec
f0125363:	68 fa 09 00 00       	push   $0x9fa
f0125368:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012536d:	e8 3e ae fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125372:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125375:	e8 e8 76 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012537a:	29 c3                	sub    %eax,%ebx
f012537c:	89 d8                	mov    %ebx,%eax
f012537e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125383:	74 17                	je     f012539c <test_kfreeall+0x163>
f0125385:	83 ec 04             	sub    $0x4,%esp
f0125388:	68 54 9b 13 f0       	push   $0xf0139b54
f012538d:	68 fb 09 00 00       	push   $0x9fb
f0125392:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125397:	e8 14 ae fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012539c:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01253a3:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01253a6:	e8 b7 76 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01253ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01253ae:	e8 d1 f2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01253b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01253b6:	83 ec 0c             	sub    $0xc,%esp
f01253b9:	68 00 fc 1f 00       	push   $0x1ffc00
f01253be:	e8 35 2c fe ff       	call   f0107ff8 <kmalloc>
f01253c3:	83 c4 10             	add    $0x10,%esp
f01253c6:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01253cc:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01253d2:	89 c1                	mov    %eax,%ecx
f01253d4:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01253db:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01253e0:	0f b6 d0             	movzbl %al,%edx
f01253e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01253e6:	01 d0                	add    %edx,%eax
f01253e8:	48                   	dec    %eax
f01253e9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01253ec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01253ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01253f4:	f7 75 b8             	divl   -0x48(%ebp)
f01253f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01253fa:	29 d0                	sub    %edx,%eax
f01253fc:	89 c3                	mov    %eax,%ebx
f01253fe:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0125405:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012540a:	0f b6 c0             	movzbl %al,%eax
f012540d:	c1 e0 04             	shl    $0x4,%eax
f0125410:	89 c2                	mov    %eax,%edx
f0125412:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125415:	01 d0                	add    %edx,%eax
f0125417:	48                   	dec    %eax
f0125418:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012541b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012541e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125423:	f7 75 b0             	divl   -0x50(%ebp)
f0125426:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125429:	29 d0                	sub    %edx,%eax
f012542b:	01 d8                	add    %ebx,%eax
f012542d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125432:	39 c1                	cmp    %eax,%ecx
f0125434:	74 17                	je     f012544d <test_kfreeall+0x214>
f0125436:	83 ec 04             	sub    $0x4,%esp
f0125439:	68 b8 9b 13 f0       	push   $0xf0139bb8
f012543e:	68 02 0a 00 00       	push   $0xa02
f0125443:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125448:	e8 63 ad fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012544d:	e8 32 f2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125452:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125455:	74 17                	je     f012546e <test_kfreeall+0x235>
f0125457:	83 ec 04             	sub    $0x4,%esp
f012545a:	68 ec 9a 13 f0       	push   $0xf0139aec
f012545f:	68 03 0a 00 00       	push   $0xa03
f0125464:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125469:	e8 42 ad fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012546e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125471:	e8 ec 75 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125476:	29 c3                	sub    %eax,%ebx
f0125478:	89 d8                	mov    %ebx,%eax
f012547a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012547f:	74 17                	je     f0125498 <test_kfreeall+0x25f>
f0125481:	83 ec 04             	sub    $0x4,%esp
f0125484:	68 54 9b 13 f0       	push   $0xf0139b54
f0125489:	68 04 0a 00 00       	push   $0xa04
f012548e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125493:	e8 18 ad fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0125498:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f012549f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01254a2:	e8 bb 75 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01254a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01254aa:	e8 d5 f1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01254af:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01254b2:	83 ec 0c             	sub    $0xc,%esp
f01254b5:	68 00 08 00 00       	push   $0x800
f01254ba:	e8 39 2b fe ff       	call   f0107ff8 <kmalloc>
f01254bf:	83 c4 10             	add    $0x10,%esp
f01254c2:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01254c8:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01254ce:	89 c1                	mov    %eax,%ecx
f01254d0:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01254d7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01254dc:	0f b6 d0             	movzbl %al,%edx
f01254df:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01254e2:	01 d0                	add    %edx,%eax
f01254e4:	48                   	dec    %eax
f01254e5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01254e8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01254eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01254f0:	f7 75 a8             	divl   -0x58(%ebp)
f01254f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01254f6:	29 d0                	sub    %edx,%eax
f01254f8:	89 c3                	mov    %eax,%ebx
f01254fa:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0125501:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125506:	0f b6 c0             	movzbl %al,%eax
f0125509:	c1 e0 04             	shl    $0x4,%eax
f012550c:	89 c2                	mov    %eax,%edx
f012550e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125511:	01 d0                	add    %edx,%eax
f0125513:	48                   	dec    %eax
f0125514:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0125517:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012551a:	ba 00 00 00 00       	mov    $0x0,%edx
f012551f:	f7 75 a0             	divl   -0x60(%ebp)
f0125522:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125525:	29 d0                	sub    %edx,%eax
f0125527:	01 d8                	add    %ebx,%eax
f0125529:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012552e:	39 c1                	cmp    %eax,%ecx
f0125530:	74 17                	je     f0125549 <test_kfreeall+0x310>
f0125532:	83 ec 04             	sub    $0x4,%esp
f0125535:	68 b8 9b 13 f0       	push   $0xf0139bb8
f012553a:	68 0b 0a 00 00       	push   $0xa0b
f012553f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125544:	e8 67 ac fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125549:	e8 36 f1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012554e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125551:	74 17                	je     f012556a <test_kfreeall+0x331>
f0125553:	83 ec 04             	sub    $0x4,%esp
f0125556:	68 ec 9a 13 f0       	push   $0xf0139aec
f012555b:	68 0c 0a 00 00       	push   $0xa0c
f0125560:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125565:	e8 46 ac fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012556a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012556d:	e8 f0 74 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125572:	29 c3                	sub    %eax,%ebx
f0125574:	89 d8                	mov    %ebx,%eax
f0125576:	83 f8 01             	cmp    $0x1,%eax
f0125579:	74 17                	je     f0125592 <test_kfreeall+0x359>
f012557b:	83 ec 04             	sub    $0x4,%esp
f012557e:	68 54 9b 13 f0       	push   $0xf0139b54
f0125583:	68 0d 0a 00 00       	push   $0xa0d
f0125588:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012558d:	e8 1e ac fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0125592:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0125599:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012559c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01255a2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01255a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01255ac:	eb 0e                	jmp    f01255bc <test_kfreeall+0x383>
		{
			ptr[i] = 2 ;
f01255ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01255b1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01255b4:	01 d0                	add    %edx,%eax
f01255b6:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01255b9:	ff 45 f4             	incl   -0xc(%ebp)
f01255bc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01255c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01255c5:	7f e7                	jg     f01255ae <test_kfreeall+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01255c7:	e8 96 74 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01255cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01255cf:	e8 b0 f0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01255d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01255d7:	83 ec 0c             	sub    $0xc,%esp
f01255da:	68 00 08 00 00       	push   $0x800
f01255df:	e8 14 2a fe ff       	call   f0107ff8 <kmalloc>
f01255e4:	83 c4 10             	add    $0x10,%esp
f01255e7:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01255ed:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01255f3:	89 c1                	mov    %eax,%ecx
f01255f5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01255fc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125601:	0f b6 d0             	movzbl %al,%edx
f0125604:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125607:	01 d0                	add    %edx,%eax
f0125609:	48                   	dec    %eax
f012560a:	89 45 90             	mov    %eax,-0x70(%ebp)
f012560d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125610:	ba 00 00 00 00       	mov    $0x0,%edx
f0125615:	f7 75 94             	divl   -0x6c(%ebp)
f0125618:	8b 45 90             	mov    -0x70(%ebp),%eax
f012561b:	29 d0                	sub    %edx,%eax
f012561d:	89 c3                	mov    %eax,%ebx
f012561f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0125626:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012562b:	0f b6 c0             	movzbl %al,%eax
f012562e:	c1 e0 04             	shl    $0x4,%eax
f0125631:	89 c2                	mov    %eax,%edx
f0125633:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125636:	01 d0                	add    %edx,%eax
f0125638:	48                   	dec    %eax
f0125639:	89 45 88             	mov    %eax,-0x78(%ebp)
f012563c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012563f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125644:	f7 75 8c             	divl   -0x74(%ebp)
f0125647:	8b 45 88             	mov    -0x78(%ebp),%eax
f012564a:	29 d0                	sub    %edx,%eax
f012564c:	01 d8                	add    %ebx,%eax
f012564e:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125653:	39 c1                	cmp    %eax,%ecx
f0125655:	74 17                	je     f012566e <test_kfreeall+0x435>
f0125657:	83 ec 04             	sub    $0x4,%esp
f012565a:	68 b8 9b 13 f0       	push   $0xf0139bb8
f012565f:	68 19 0a 00 00       	push   $0xa19
f0125664:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125669:	e8 42 ab fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012566e:	e8 11 f0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125673:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125676:	74 17                	je     f012568f <test_kfreeall+0x456>
f0125678:	83 ec 04             	sub    $0x4,%esp
f012567b:	68 ec 9a 13 f0       	push   $0xf0139aec
f0125680:	68 1a 0a 00 00       	push   $0xa1a
f0125685:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012568a:	e8 21 ab fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012568f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125692:	e8 cb 73 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125697:	29 c3                	sub    %eax,%ebx
f0125699:	89 d8                	mov    %ebx,%eax
f012569b:	83 f8 01             	cmp    $0x1,%eax
f012569e:	74 17                	je     f01256b7 <test_kfreeall+0x47e>
f01256a0:	83 ec 04             	sub    $0x4,%esp
f01256a3:	68 54 9b 13 f0       	push   $0xf0139b54
f01256a8:	68 1b 0a 00 00       	push   $0xa1b
f01256ad:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01256b2:	e8 f9 aa fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01256b7:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f01256be:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01256c1:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01256c7:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01256ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01256d1:	eb 0e                	jmp    f01256e1 <test_kfreeall+0x4a8>
		{
			ptr[i] = 3 ;
f01256d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01256d6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01256d9:	01 d0                	add    %edx,%eax
f01256db:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01256de:	ff 45 f4             	incl   -0xc(%ebp)
f01256e1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01256e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01256ea:	7f e7                	jg     f01256d3 <test_kfreeall+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01256ec:	e8 71 73 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01256f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256f4:	e8 8b ef fd ff       	call   f0104684 <pf_calculate_free_frames>
f01256f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01256fc:	83 ec 0c             	sub    $0xc,%esp
f01256ff:	68 00 1c 00 00       	push   $0x1c00
f0125704:	e8 ef 28 fe ff       	call   f0107ff8 <kmalloc>
f0125709:	83 c4 10             	add    $0x10,%esp
f012570c:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125712:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125718:	89 c1                	mov    %eax,%ecx
f012571a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125721:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125726:	0f b6 d0             	movzbl %al,%edx
f0125729:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012572c:	01 d0                	add    %edx,%eax
f012572e:	48                   	dec    %eax
f012572f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125732:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125735:	ba 00 00 00 00       	mov    $0x0,%edx
f012573a:	f7 75 84             	divl   -0x7c(%ebp)
f012573d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125740:	29 d0                	sub    %edx,%eax
f0125742:	89 c3                	mov    %eax,%ebx
f0125744:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012574b:	10 00 00 
f012574e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125753:	0f b6 c0             	movzbl %al,%eax
f0125756:	c1 e0 04             	shl    $0x4,%eax
f0125759:	89 c2                	mov    %eax,%edx
f012575b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125761:	01 d0                	add    %edx,%eax
f0125763:	48                   	dec    %eax
f0125764:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012576a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125770:	ba 00 00 00 00       	mov    $0x0,%edx
f0125775:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012577b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125781:	29 d0                	sub    %edx,%eax
f0125783:	01 d8                	add    %ebx,%eax
f0125785:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012578a:	39 c1                	cmp    %eax,%ecx
f012578c:	74 17                	je     f01257a5 <test_kfreeall+0x56c>
f012578e:	83 ec 04             	sub    $0x4,%esp
f0125791:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0125796:	68 27 0a 00 00       	push   $0xa27
f012579b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01257a0:	e8 0b aa fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01257a5:	e8 da ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f01257aa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01257ad:	74 17                	je     f01257c6 <test_kfreeall+0x58d>
f01257af:	83 ec 04             	sub    $0x4,%esp
f01257b2:	68 ec 9a 13 f0       	push   $0xf0139aec
f01257b7:	68 28 0a 00 00       	push   $0xa28
f01257bc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01257c1:	e8 ea a9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01257c6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01257c9:	e8 94 72 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01257ce:	29 c3                	sub    %eax,%ebx
f01257d0:	89 d8                	mov    %ebx,%eax
f01257d2:	83 f8 02             	cmp    $0x2,%eax
f01257d5:	74 17                	je     f01257ee <test_kfreeall+0x5b5>
f01257d7:	83 ec 04             	sub    $0x4,%esp
f01257da:	68 54 9b 13 f0       	push   $0xf0139b54
f01257df:	68 29 0a 00 00       	push   $0xa29
f01257e4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01257e9:	e8 c2 a9 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01257ee:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f01257f5:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01257f8:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01257fe:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125801:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125808:	eb 0e                	jmp    f0125818 <test_kfreeall+0x5df>
		{
			ptr[i] = 4 ;
f012580a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012580d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125810:	01 d0                	add    %edx,%eax
f0125812:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125815:	ff 45 f4             	incl   -0xc(%ebp)
f0125818:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012581e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125821:	7f e7                	jg     f012580a <test_kfreeall+0x5d1>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125823:	e8 3a 72 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125828:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012582b:	e8 54 ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125830:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125833:	83 ec 0c             	sub    $0xc,%esp
f0125836:	68 00 fc 2f 00       	push   $0x2ffc00
f012583b:	e8 b8 27 fe ff       	call   f0107ff8 <kmalloc>
f0125840:	83 c4 10             	add    $0x10,%esp
f0125843:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125849:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012584f:	89 c1                	mov    %eax,%ecx
f0125851:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125858:	10 00 00 
f012585b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125860:	0f b6 d0             	movzbl %al,%edx
f0125863:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125869:	01 d0                	add    %edx,%eax
f012586b:	48                   	dec    %eax
f012586c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125872:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125878:	ba 00 00 00 00       	mov    $0x0,%edx
f012587d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125883:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125889:	29 d0                	sub    %edx,%eax
f012588b:	89 c3                	mov    %eax,%ebx
f012588d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125894:	10 00 00 
f0125897:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012589c:	0f b6 c0             	movzbl %al,%eax
f012589f:	c1 e0 04             	shl    $0x4,%eax
f01258a2:	89 c2                	mov    %eax,%edx
f01258a4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01258aa:	01 d0                	add    %edx,%eax
f01258ac:	48                   	dec    %eax
f01258ad:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01258b3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01258b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01258be:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01258c4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01258ca:	29 d0                	sub    %edx,%eax
f01258cc:	01 d8                	add    %ebx,%eax
f01258ce:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01258d3:	39 c1                	cmp    %eax,%ecx
f01258d5:	74 17                	je     f01258ee <test_kfreeall+0x6b5>
f01258d7:	83 ec 04             	sub    $0x4,%esp
f01258da:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01258df:	68 35 0a 00 00       	push   $0xa35
f01258e4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01258e9:	e8 c2 a8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01258ee:	e8 91 ed fd ff       	call   f0104684 <pf_calculate_free_frames>
f01258f3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01258f6:	74 17                	je     f012590f <test_kfreeall+0x6d6>
f01258f8:	83 ec 04             	sub    $0x4,%esp
f01258fb:	68 ec 9a 13 f0       	push   $0xf0139aec
f0125900:	68 36 0a 00 00       	push   $0xa36
f0125905:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012590a:	e8 a1 a8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012590f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125912:	e8 4b 71 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125917:	29 c3                	sub    %eax,%ebx
f0125919:	89 d8                	mov    %ebx,%eax
f012591b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125920:	74 17                	je     f0125939 <test_kfreeall+0x700>
f0125922:	83 ec 04             	sub    $0x4,%esp
f0125925:	68 54 9b 13 f0       	push   $0xf0139b54
f012592a:	68 37 0a 00 00       	push   $0xa37
f012592f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125934:	e8 77 a8 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0125939:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0125940:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0125943:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125949:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012594c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125953:	eb 0e                	jmp    f0125963 <test_kfreeall+0x72a>
		{
			ptr[i] = 5 ;
f0125955:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125958:	8b 45 98             	mov    -0x68(%ebp),%eax
f012595b:	01 d0                	add    %edx,%eax
f012595d:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125960:	ff 45 f4             	incl   -0xc(%ebp)
f0125963:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125969:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012596c:	7f e7                	jg     f0125955 <test_kfreeall+0x71c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012596e:	e8 ef 70 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125973:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125976:	e8 09 ed fd ff       	call   f0104684 <pf_calculate_free_frames>
f012597b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012597e:	83 ec 0c             	sub    $0xc,%esp
f0125981:	68 00 fc 5f 00       	push   $0x5ffc00
f0125986:	e8 6d 26 fe ff       	call   f0107ff8 <kmalloc>
f012598b:	83 c4 10             	add    $0x10,%esp
f012598e:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125994:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012599a:	89 c1                	mov    %eax,%ecx
f012599c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01259a3:	10 00 00 
f01259a6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01259ab:	0f b6 d0             	movzbl %al,%edx
f01259ae:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01259b4:	01 d0                	add    %edx,%eax
f01259b6:	48                   	dec    %eax
f01259b7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01259bd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01259c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01259c8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01259ce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01259d4:	29 d0                	sub    %edx,%eax
f01259d6:	89 c3                	mov    %eax,%ebx
f01259d8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01259df:	10 00 00 
f01259e2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01259e7:	0f b6 c0             	movzbl %al,%eax
f01259ea:	c1 e0 04             	shl    $0x4,%eax
f01259ed:	89 c2                	mov    %eax,%edx
f01259ef:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01259f5:	01 d0                	add    %edx,%eax
f01259f7:	48                   	dec    %eax
f01259f8:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01259fe:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125a04:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a09:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125a0f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125a15:	29 d0                	sub    %edx,%eax
f0125a17:	01 d8                	add    %ebx,%eax
f0125a19:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125a1e:	39 c1                	cmp    %eax,%ecx
f0125a20:	74 17                	je     f0125a39 <test_kfreeall+0x800>
f0125a22:	83 ec 04             	sub    $0x4,%esp
f0125a25:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0125a2a:	68 43 0a 00 00       	push   $0xa43
f0125a2f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125a34:	e8 77 a7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a39:	e8 46 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125a3e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125a41:	74 17                	je     f0125a5a <test_kfreeall+0x821>
f0125a43:	83 ec 04             	sub    $0x4,%esp
f0125a46:	68 ec 9a 13 f0       	push   $0xf0139aec
f0125a4b:	68 44 0a 00 00       	push   $0xa44
f0125a50:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125a55:	e8 56 a7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125a5a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125a5d:	e8 00 70 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125a62:	29 c3                	sub    %eax,%ebx
f0125a64:	89 d8                	mov    %ebx,%eax
f0125a66:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125a6b:	74 17                	je     f0125a84 <test_kfreeall+0x84b>
f0125a6d:	83 ec 04             	sub    $0x4,%esp
f0125a70:	68 54 9b 13 f0       	push   $0xf0139b54
f0125a75:	68 45 0a 00 00       	push   $0xa45
f0125a7a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125a7f:	e8 2c a7 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0125a84:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0125a8b:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125a8e:	e8 cf 6f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125a93:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a96:	e8 e9 eb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125a9b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125a9e:	83 ec 0c             	sub    $0xc,%esp
f0125aa1:	68 00 38 00 00       	push   $0x3800
f0125aa6:	e8 4d 25 fe ff       	call   f0107ff8 <kmalloc>
f0125aab:	83 c4 10             	add    $0x10,%esp
f0125aae:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125ab4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125aba:	89 c1                	mov    %eax,%ecx
f0125abc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125ac3:	10 00 00 
f0125ac6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125acb:	0f b6 d0             	movzbl %al,%edx
f0125ace:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125ad4:	01 d0                	add    %edx,%eax
f0125ad6:	48                   	dec    %eax
f0125ad7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125add:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125ae3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ae8:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125aee:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125af4:	29 d0                	sub    %edx,%eax
f0125af6:	89 c3                	mov    %eax,%ebx
f0125af8:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125aff:	10 00 00 
f0125b02:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125b07:	0f b6 c0             	movzbl %al,%eax
f0125b0a:	c1 e0 04             	shl    $0x4,%eax
f0125b0d:	89 c2                	mov    %eax,%edx
f0125b0f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125b15:	01 d0                	add    %edx,%eax
f0125b17:	48                   	dec    %eax
f0125b18:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125b1e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125b24:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b29:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125b2f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125b35:	29 d0                	sub    %edx,%eax
f0125b37:	01 d8                	add    %ebx,%eax
f0125b39:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125b3e:	39 c1                	cmp    %eax,%ecx
f0125b40:	74 17                	je     f0125b59 <test_kfreeall+0x920>
f0125b42:	83 ec 04             	sub    $0x4,%esp
f0125b45:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0125b4a:	68 4c 0a 00 00       	push   $0xa4c
f0125b4f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125b54:	e8 57 a6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b59:	e8 26 eb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125b5e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125b61:	74 17                	je     f0125b7a <test_kfreeall+0x941>
f0125b63:	83 ec 04             	sub    $0x4,%esp
f0125b66:	68 ec 9a 13 f0       	push   $0xf0139aec
f0125b6b:	68 4d 0a 00 00       	push   $0xa4d
f0125b70:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125b75:	e8 36 a6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b7a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125b7d:	e8 e0 6e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125b82:	29 c3                	sub    %eax,%ebx
f0125b84:	89 d8                	mov    %ebx,%eax
f0125b86:	83 f8 04             	cmp    $0x4,%eax
f0125b89:	74 17                	je     f0125ba2 <test_kfreeall+0x969>
f0125b8b:	83 ec 04             	sub    $0x4,%esp
f0125b8e:	68 54 9b 13 f0       	push   $0xf0139b54
f0125b93:	68 4e 0a 00 00       	push   $0xa4e
f0125b98:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125b9d:	e8 0e a6 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0125ba2:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0125ba9:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0125bac:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125bb2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125bb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125bbc:	eb 0e                	jmp    f0125bcc <test_kfreeall+0x993>
		{
			ptr[i] = 7 ;
f0125bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125bc1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125bc4:	01 d0                	add    %edx,%eax
f0125bc6:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125bc9:	ff 45 f4             	incl   -0xc(%ebp)
f0125bcc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125bd2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125bd5:	7f e7                	jg     f0125bbe <test_kfreeall+0x985>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125bd7:	e8 86 6e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125bdc:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125be2:	e8 9d ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125be7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0125bed:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125bf3:	83 ec 0c             	sub    $0xc,%esp
f0125bf6:	50                   	push   %eax
f0125bf7:	e8 16 24 fe ff       	call   f0108012 <kfree>
f0125bfc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125bff:	e8 80 ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125c04:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125c0a:	74 17                	je     f0125c23 <test_kfreeall+0x9ea>
f0125c0c:	83 ec 04             	sub    $0x4,%esp
f0125c0f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0125c14:	68 5d 0a 00 00       	push   $0xa5d
f0125c19:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125c1e:	e8 8d a5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125c23:	e8 3a 6e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125c28:	89 c2                	mov    %eax,%edx
f0125c2a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125c30:	29 c2                	sub    %eax,%edx
f0125c32:	89 d0                	mov    %edx,%eax
f0125c34:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125c39:	74 17                	je     f0125c52 <test_kfreeall+0xa19>
f0125c3b:	83 ec 04             	sub    $0x4,%esp
f0125c3e:	68 5c a2 13 f0       	push   $0xf013a25c
f0125c43:	68 5e 0a 00 00       	push   $0xa5e
f0125c48:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125c4d:	e8 5e a5 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125c52:	e8 0b 6e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125c57:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125c5d:	e8 22 ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125c62:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0125c68:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125c6e:	83 ec 0c             	sub    $0xc,%esp
f0125c71:	50                   	push   %eax
f0125c72:	e8 9b 23 fe ff       	call   f0108012 <kfree>
f0125c77:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c7a:	e8 05 ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125c7f:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125c85:	74 17                	je     f0125c9e <test_kfreeall+0xa65>
f0125c87:	83 ec 04             	sub    $0x4,%esp
f0125c8a:	68 ec 9a 13 f0       	push   $0xf0139aec
f0125c8f:	68 64 0a 00 00       	push   $0xa64
f0125c94:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125c99:	e8 12 a5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125c9e:	e8 bf 6d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125ca3:	89 c2                	mov    %eax,%edx
f0125ca5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125cab:	29 c2                	sub    %eax,%edx
f0125cad:	89 d0                	mov    %edx,%eax
f0125caf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125cb4:	74 17                	je     f0125ccd <test_kfreeall+0xa94>
f0125cb6:	83 ec 04             	sub    $0x4,%esp
f0125cb9:	68 5c a2 13 f0       	push   $0xf013a25c
f0125cbe:	68 65 0a 00 00       	push   $0xa65
f0125cc3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125cc8:	e8 e3 a4 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125ccd:	e8 90 6d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125cd2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125cd8:	e8 a7 e9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125cdd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0125ce3:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125ce9:	83 ec 0c             	sub    $0xc,%esp
f0125cec:	50                   	push   %eax
f0125ced:	e8 20 23 fe ff       	call   f0108012 <kfree>
f0125cf2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125cf5:	e8 8a e9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125cfa:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125d00:	74 17                	je     f0125d19 <test_kfreeall+0xae0>
f0125d02:	83 ec 04             	sub    $0x4,%esp
f0125d05:	68 ec 9a 13 f0       	push   $0xf0139aec
f0125d0a:	68 6b 0a 00 00       	push   $0xa6b
f0125d0f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125d14:	e8 97 a4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125d19:	e8 44 6d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125d1e:	89 c2                	mov    %eax,%edx
f0125d20:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125d26:	29 c2                	sub    %eax,%edx
f0125d28:	89 d0                	mov    %edx,%eax
f0125d2a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125d2f:	74 17                	je     f0125d48 <test_kfreeall+0xb0f>
f0125d31:	83 ec 04             	sub    $0x4,%esp
f0125d34:	68 5c a2 13 f0       	push   $0xf013a25c
f0125d39:	68 6c 0a 00 00       	push   $0xa6c
f0125d3e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125d43:	e8 68 a4 fd ff       	call   f01001b0 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0125d48:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125d4e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125d51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125d58:	eb 1e                	jmp    f0125d78 <test_kfreeall+0xb3f>
		{
			sums[2] += ptr[i] ;
f0125d5a:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125d60:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125d63:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125d66:	01 c8                	add    %ecx,%eax
f0125d68:	8a 00                	mov    (%eax),%al
f0125d6a:	0f be c0             	movsbl %al,%eax
f0125d6d:	01 d0                	add    %edx,%eax
f0125d6f:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125d75:	ff 45 f4             	incl   -0xc(%ebp)
f0125d78:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125d7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125d81:	7f d7                	jg     f0125d5a <test_kfreeall+0xb21>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0125d83:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125d89:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125d8f:	01 c0                	add    %eax,%eax
f0125d91:	39 c2                	cmp    %eax,%edx
f0125d93:	74 17                	je     f0125dac <test_kfreeall+0xb73>
f0125d95:	83 ec 04             	sub    $0x4,%esp
f0125d98:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0125d9d:	68 78 0a 00 00       	push   $0xa78
f0125da2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125da7:	e8 04 a4 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0125dac:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125db2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125db5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125dbc:	eb 1e                	jmp    f0125ddc <test_kfreeall+0xba3>
		{
			sums[3] += ptr[i] ;
f0125dbe:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125dc4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125dc7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125dca:	01 c8                	add    %ecx,%eax
f0125dcc:	8a 00                	mov    (%eax),%al
f0125dce:	0f be c0             	movsbl %al,%eax
f0125dd1:	01 d0                	add    %edx,%eax
f0125dd3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125dd9:	ff 45 f4             	incl   -0xc(%ebp)
f0125ddc:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125de2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125de5:	7f d7                	jg     f0125dbe <test_kfreeall+0xb85>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0125de7:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125ded:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125df3:	89 c1                	mov    %eax,%ecx
f0125df5:	01 c9                	add    %ecx,%ecx
f0125df7:	01 c8                	add    %ecx,%eax
f0125df9:	39 c2                	cmp    %eax,%edx
f0125dfb:	74 17                	je     f0125e14 <test_kfreeall+0xbdb>
f0125dfd:	83 ec 04             	sub    $0x4,%esp
f0125e00:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0125e05:	68 80 0a 00 00       	push   $0xa80
f0125e0a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125e0f:	e8 9c a3 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0125e14:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125e1a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125e1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125e24:	eb 1e                	jmp    f0125e44 <test_kfreeall+0xc0b>
		{
			sums[4] += ptr[i] ;
f0125e26:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0125e2c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125e2f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125e32:	01 c8                	add    %ecx,%eax
f0125e34:	8a 00                	mov    (%eax),%al
f0125e36:	0f be c0             	movsbl %al,%eax
f0125e39:	01 d0                	add    %edx,%eax
f0125e3b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125e41:	ff 45 f4             	incl   -0xc(%ebp)
f0125e44:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125e4a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125e4d:	7f d7                	jg     f0125e26 <test_kfreeall+0xbed>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0125e4f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125e55:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0125e5b:	c1 e2 02             	shl    $0x2,%edx
f0125e5e:	39 d0                	cmp    %edx,%eax
f0125e60:	74 17                	je     f0125e79 <test_kfreeall+0xc40>
f0125e62:	83 ec 04             	sub    $0x4,%esp
f0125e65:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0125e6a:	68 88 0a 00 00       	push   $0xa88
f0125e6f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125e74:	e8 37 a3 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0125e79:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125e7f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125e82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125e89:	eb 1e                	jmp    f0125ea9 <test_kfreeall+0xc70>
		{
			sums[5] += ptr[i] ;
f0125e8b:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0125e91:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125e94:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125e97:	01 c8                	add    %ecx,%eax
f0125e99:	8a 00                	mov    (%eax),%al
f0125e9b:	0f be c0             	movsbl %al,%eax
f0125e9e:	01 d0                	add    %edx,%eax
f0125ea0:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125ea6:	ff 45 f4             	incl   -0xc(%ebp)
f0125ea9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125eaf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125eb2:	7f d7                	jg     f0125e8b <test_kfreeall+0xc52>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0125eb4:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0125eba:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0125ec0:	89 d0                	mov    %edx,%eax
f0125ec2:	c1 e0 02             	shl    $0x2,%eax
f0125ec5:	01 d0                	add    %edx,%eax
f0125ec7:	39 c1                	cmp    %eax,%ecx
f0125ec9:	74 17                	je     f0125ee2 <test_kfreeall+0xca9>
f0125ecb:	83 ec 04             	sub    $0x4,%esp
f0125ece:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0125ed3:	68 90 0a 00 00       	push   $0xa90
f0125ed8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125edd:	e8 ce a2 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0125ee2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125ee8:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125eeb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125ef2:	eb 1e                	jmp    f0125f12 <test_kfreeall+0xcd9>
		{
			sums[7] += ptr[i] ;
f0125ef4:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0125efa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125efd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125f00:	01 c8                	add    %ecx,%eax
f0125f02:	8a 00                	mov    (%eax),%al
f0125f04:	0f be c0             	movsbl %al,%eax
f0125f07:	01 d0                	add    %edx,%eax
f0125f09:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125f0f:	ff 45 f4             	incl   -0xc(%ebp)
f0125f12:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125f18:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125f1b:	7f d7                	jg     f0125ef4 <test_kfreeall+0xcbb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0125f1d:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0125f23:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0125f29:	89 d0                	mov    %edx,%eax
f0125f2b:	01 c0                	add    %eax,%eax
f0125f2d:	01 d0                	add    %edx,%eax
f0125f2f:	01 c0                	add    %eax,%eax
f0125f31:	01 d0                	add    %edx,%eax
f0125f33:	39 c1                	cmp    %eax,%ecx
f0125f35:	74 17                	je     f0125f4e <test_kfreeall+0xd15>
f0125f37:	83 ec 04             	sub    $0x4,%esp
f0125f3a:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0125f3f:	68 98 0a 00 00       	push   $0xa98
f0125f44:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0125f49:	e8 62 a2 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f4e:	e8 0f 6b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0125f53:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f56:	e8 29 e7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125f5b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0125f5e:	83 ec 0c             	sub    $0xc,%esp
f0125f61:	68 00 50 00 00       	push   $0x5000
f0125f66:	e8 8d 20 fe ff       	call   f0107ff8 <kmalloc>
f0125f6b:	83 c4 10             	add    $0x10,%esp
f0125f6e:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125f74:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125f7a:	89 c1                	mov    %eax,%ecx
f0125f7c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125f83:	10 00 00 
f0125f86:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125f8b:	0f b6 d0             	movzbl %al,%edx
f0125f8e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125f94:	01 d0                	add    %edx,%eax
f0125f96:	48                   	dec    %eax
f0125f97:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125f9d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125fa3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fa8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125fae:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125fb4:	29 d0                	sub    %edx,%eax
f0125fb6:	89 c3                	mov    %eax,%ebx
f0125fb8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125fbf:	10 00 00 
f0125fc2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125fc7:	0f b6 c0             	movzbl %al,%eax
f0125fca:	c1 e0 04             	shl    $0x4,%eax
f0125fcd:	89 c2                	mov    %eax,%edx
f0125fcf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125fd5:	01 d0                	add    %edx,%eax
f0125fd7:	48                   	dec    %eax
f0125fd8:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125fde:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125fe4:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fe9:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125fef:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125ff5:	29 d0                	sub    %edx,%eax
f0125ff7:	01 d8                	add    %ebx,%eax
f0125ff9:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125ffe:	39 c1                	cmp    %eax,%ecx
f0126000:	74 17                	je     f0126019 <test_kfreeall+0xde0>
f0126002:	83 ec 04             	sub    $0x4,%esp
f0126005:	68 b8 9b 13 f0       	push   $0xf0139bb8
f012600a:	68 a1 0a 00 00       	push   $0xaa1
f012600f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126014:	e8 97 a1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126019:	e8 66 e6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012601e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126021:	74 17                	je     f012603a <test_kfreeall+0xe01>
f0126023:	83 ec 04             	sub    $0x4,%esp
f0126026:	68 ec 9a 13 f0       	push   $0xf0139aec
f012602b:	68 a2 0a 00 00       	push   $0xaa2
f0126030:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126035:	e8 76 a1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012603a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012603d:	e8 20 6a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126042:	29 c3                	sub    %eax,%ebx
f0126044:	89 d8                	mov    %ebx,%eax
f0126046:	83 f8 05             	cmp    $0x5,%eax
f0126049:	74 17                	je     f0126062 <test_kfreeall+0xe29>
f012604b:	83 ec 04             	sub    $0x4,%esp
f012604e:	68 54 9b 13 f0       	push   $0xf0139b54
f0126053:	68 a3 0a 00 00       	push   $0xaa3
f0126058:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012605d:	e8 4e a1 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0126062:	c7 85 e0 fe ff ff ff 	movl   $0x4fff,-0x120(%ebp)
f0126069:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012606c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126072:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0126075:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012607c:	eb 0e                	jmp    f012608c <test_kfreeall+0xe53>
		{
			ptr[i] = 8 ;
f012607e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126081:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126084:	01 d0                	add    %edx,%eax
f0126086:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0126089:	ff 45 f4             	incl   -0xc(%ebp)
f012608c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126092:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126095:	7f e7                	jg     f012607e <test_kfreeall+0xe45>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126097:	e8 c6 69 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012609c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012609f:	e8 e0 e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01260a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01260a7:	83 ec 0c             	sub    $0xc,%esp
f01260aa:	68 00 00 10 00       	push   $0x100000
f01260af:	e8 44 1f fe ff       	call   f0107ff8 <kmalloc>
f01260b4:	83 c4 10             	add    $0x10,%esp
f01260b7:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01260bd:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01260c3:	89 c1                	mov    %eax,%ecx
f01260c5:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01260cc:	10 00 00 
f01260cf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01260d4:	0f b6 d0             	movzbl %al,%edx
f01260d7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01260dd:	01 d0                	add    %edx,%eax
f01260df:	48                   	dec    %eax
f01260e0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01260e6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01260ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01260f1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01260f7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01260fd:	29 d0                	sub    %edx,%eax
f01260ff:	89 c3                	mov    %eax,%ebx
f0126101:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0126108:	10 00 00 
f012610b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126110:	0f b6 c0             	movzbl %al,%eax
f0126113:	c1 e0 04             	shl    $0x4,%eax
f0126116:	89 c2                	mov    %eax,%edx
f0126118:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012611e:	01 d0                	add    %edx,%eax
f0126120:	48                   	dec    %eax
f0126121:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0126127:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012612d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126132:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0126138:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012613e:	29 d0                	sub    %edx,%eax
f0126140:	01 d8                	add    %ebx,%eax
f0126142:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0126147:	39 c1                	cmp    %eax,%ecx
f0126149:	74 17                	je     f0126162 <test_kfreeall+0xf29>
f012614b:	83 ec 04             	sub    $0x4,%esp
f012614e:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0126153:	68 af 0a 00 00       	push   $0xaaf
f0126158:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012615d:	e8 4e a0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126162:	e8 1d e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126167:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012616a:	74 17                	je     f0126183 <test_kfreeall+0xf4a>
f012616c:	83 ec 04             	sub    $0x4,%esp
f012616f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0126174:	68 b0 0a 00 00       	push   $0xab0
f0126179:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012617e:	e8 2d a0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126183:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126186:	e8 d7 68 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012618b:	29 c3                	sub    %eax,%ebx
f012618d:	89 d8                	mov    %ebx,%eax
f012618f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126194:	74 17                	je     f01261ad <test_kfreeall+0xf74>
f0126196:	83 ec 04             	sub    $0x4,%esp
f0126199:	68 54 9b 13 f0       	push   $0xf0139b54
f012619e:	68 b1 0a 00 00       	push   $0xab1
f01261a3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01261a8:	e8 03 a0 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01261ad:	c7 85 e4 fe ff ff ff 	movl   $0xfffff,-0x11c(%ebp)
f01261b4:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01261b7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01261bd:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01261c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01261c7:	eb 0e                	jmp    f01261d7 <test_kfreeall+0xf9e>
		{
			ptr[i] = 9 ;
f01261c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01261cc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01261cf:	01 d0                	add    %edx,%eax
f01261d1:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01261d4:	ff 45 f4             	incl   -0xc(%ebp)
f01261d7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01261dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01261e0:	7f e7                	jg     f01261c9 <test_kfreeall+0xf90>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f01261e2:	e8 7b 68 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01261e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261ea:	e8 95 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01261ef:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f01261f2:	e8 69 1e fe ff       	call   f0108060 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261f7:	e8 88 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01261fc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01261ff:	74 17                	je     f0126218 <test_kfreeall+0xfdf>
f0126201:	83 ec 04             	sub    $0x4,%esp
f0126204:	68 ec 9a 13 f0       	push   $0xf0139aec
f0126209:	68 c1 0a 00 00       	push   $0xac1
f012620e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126213:	e8 98 9f fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0126218:	e8 45 68 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012621d:	89 c2                	mov    %eax,%edx
f012621f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126222:	89 d1                	mov    %edx,%ecx
f0126224:	29 c1                	sub    %eax,%ecx
f0126226:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012622d:	10 00 00 
f0126230:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126235:	0f b6 d0             	movzbl %al,%edx
f0126238:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012623e:	01 d0                	add    %edx,%eax
f0126240:	48                   	dec    %eax
f0126241:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126247:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012624d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126252:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126258:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012625e:	29 d0                	sub    %edx,%eax
f0126260:	89 c3                	mov    %eax,%ebx
f0126262:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0126269:	10 00 00 
f012626c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126271:	0f b6 c0             	movzbl %al,%eax
f0126274:	c1 e0 04             	shl    $0x4,%eax
f0126277:	89 c2                	mov    %eax,%edx
f0126279:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012627f:	01 d0                	add    %edx,%eax
f0126281:	48                   	dec    %eax
f0126282:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126288:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012628e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126293:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126299:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012629f:	29 d0                	sub    %edx,%eax
f01262a1:	01 d8                	add    %ebx,%eax
f01262a3:	05 00 40 00 00       	add    $0x4000,%eax
f01262a8:	c1 e8 0c             	shr    $0xc,%eax
f01262ab:	05 0d 04 00 00       	add    $0x40d,%eax
f01262b0:	39 c1                	cmp    %eax,%ecx
f01262b2:	74 17                	je     f01262cb <test_kfreeall+0x1092>
f01262b4:	83 ec 04             	sub    $0x4,%esp
f01262b7:	68 5c a2 13 f0       	push   $0xf013a25c
f01262bc:	68 c2 0a 00 00       	push   $0xac2
f01262c1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01262c6:	e8 e5 9e fd ff       	call   f01001b0 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01262cb:	83 ec 0c             	sub    $0xc,%esp
f01262ce:	6a 03                	push   $0x3
f01262d0:	e8 28 6c fe ff       	call   f010cefd <sys_bypassPageFault>
f01262d5:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01262d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01262df:	e9 82 00 00 00       	jmp    f0126366 <test_kfreeall+0x112d>
		{
			ptr = (char *) ptr_allocations[i];
f01262e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01262e7:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f01262ee:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01262f1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01262f4:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01262f7:	e8 ef 6b fe ff       	call   f010ceeb <sys_rcr2>
f01262fc:	89 c2                	mov    %eax,%edx
f01262fe:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126301:	39 c2                	cmp    %eax,%edx
f0126303:	74 17                	je     f012631c <test_kfreeall+0x10e3>
f0126305:	83 ec 04             	sub    $0x4,%esp
f0126308:	68 38 a3 13 f0       	push   $0xf013a338
f012630d:	68 d0 0a 00 00       	push   $0xad0
f0126312:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126317:	e8 94 9e fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f012631c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012631f:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0126326:	89 c2                	mov    %eax,%edx
f0126328:	8b 45 98             	mov    -0x68(%ebp),%eax
f012632b:	01 d0                	add    %edx,%eax
f012632d:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126330:	e8 b6 6b fe ff       	call   f010ceeb <sys_rcr2>
f0126335:	89 c2                	mov    %eax,%edx
f0126337:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012633a:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0126341:	89 c1                	mov    %eax,%ecx
f0126343:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126346:	01 c8                	add    %ecx,%eax
f0126348:	39 c2                	cmp    %eax,%edx
f012634a:	74 17                	je     f0126363 <test_kfreeall+0x112a>
f012634c:	83 ec 04             	sub    $0x4,%esp
f012634f:	68 38 a3 13 f0       	push   $0xf013a338
f0126354:	68 d2 0a 00 00       	push   $0xad2
f0126359:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012635e:	e8 4d 9e fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0126363:	ff 45 f4             	incl   -0xc(%ebp)
f0126366:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012636a:	0f 8e 74 ff ff ff    	jle    f01262e4 <test_kfreeall+0x10ab>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0126370:	83 ec 0c             	sub    $0xc,%esp
f0126373:	6a 00                	push   $0x0
f0126375:	e8 83 6b fe ff       	call   f010cefd <sys_bypassPageFault>
f012637a:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012637d:	e8 e0 66 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126382:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126385:	e8 fa e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012638a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f012638d:	83 ec 0c             	sub    $0xc,%esp
f0126390:	68 00 00 40 00       	push   $0x400000
f0126395:	e8 5e 1c fe ff       	call   f0107ff8 <kmalloc>
f012639a:	83 c4 10             	add    $0x10,%esp
f012639d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01263a3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01263a9:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f01263ae:	74 17                	je     f01263c7 <test_kfreeall+0x118e>
f01263b0:	83 ec 04             	sub    $0x4,%esp
f01263b3:	68 dc a7 13 f0       	push   $0xf013a7dc
f01263b8:	68 de 0a 00 00       	push   $0xade
f01263bd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01263c2:	e8 e9 9d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01263c7:	e8 b8 e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01263cc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01263cf:	74 17                	je     f01263e8 <test_kfreeall+0x11af>
f01263d1:	83 ec 04             	sub    $0x4,%esp
f01263d4:	68 ec 9a 13 f0       	push   $0xf0139aec
f01263d9:	68 df 0a 00 00       	push   $0xadf
f01263de:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01263e3:	e8 c8 9d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01263e8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01263eb:	e8 72 66 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01263f0:	29 c3                	sub    %eax,%ebx
f01263f2:	89 d8                	mov    %ebx,%eax
f01263f4:	3d 00 04 00 00       	cmp    $0x400,%eax
f01263f9:	74 17                	je     f0126412 <test_kfreeall+0x11d9>
f01263fb:	83 ec 04             	sub    $0x4,%esp
f01263fe:	68 54 9b 13 f0       	push   $0xf0139b54
f0126403:	68 e0 0a 00 00       	push   $0xae0
f0126408:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012640d:	e8 9e 9d fd ff       	call   f01001b0 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126412:	e8 4b 66 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126417:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012641a:	e8 65 e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012641f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0126422:	83 ec 0c             	sub    $0xc,%esp
f0126425:	68 00 30 00 00       	push   $0x3000
f012642a:	e8 c9 1b fe ff       	call   f0107ff8 <kmalloc>
f012642f:	83 c4 10             	add    $0x10,%esp
f0126432:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126438:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012643e:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0126443:	74 17                	je     f012645c <test_kfreeall+0x1223>
f0126445:	83 ec 04             	sub    $0x4,%esp
f0126448:	68 dc a7 13 f0       	push   $0xf013a7dc
f012644d:	68 e6 0a 00 00       	push   $0xae6
f0126452:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126457:	e8 54 9d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012645c:	e8 23 e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126461:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126464:	74 17                	je     f012647d <test_kfreeall+0x1244>
f0126466:	83 ec 04             	sub    $0x4,%esp
f0126469:	68 ec 9a 13 f0       	push   $0xf0139aec
f012646e:	68 e7 0a 00 00       	push   $0xae7
f0126473:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126478:	e8 33 9d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f012647d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126480:	e8 dd 65 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126485:	29 c3                	sub    %eax,%ebx
f0126487:	89 d8                	mov    %ebx,%eax
f0126489:	83 f8 03             	cmp    $0x3,%eax
f012648c:	74 17                	je     f01264a5 <test_kfreeall+0x126c>
f012648e:	83 ec 04             	sub    $0x4,%esp
f0126491:	68 54 9b 13 f0       	push   $0xf0139b54
f0126496:	68 e8 0a 00 00       	push   $0xae8
f012649b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01264a0:	e8 0b 9d fd ff       	call   f01001b0 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01264a5:	e8 b8 65 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01264aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264ad:	e8 d2 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01264b2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f01264b5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01264bb:	83 ec 0c             	sub    $0xc,%esp
f01264be:	50                   	push   %eax
f01264bf:	e8 4e 1b fe ff       	call   f0108012 <kfree>
f01264c4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01264c7:	e8 b8 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01264cc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01264cf:	74 17                	je     f01264e8 <test_kfreeall+0x12af>
f01264d1:	83 ec 04             	sub    $0x4,%esp
f01264d4:	68 ec 9a 13 f0       	push   $0xf0139aec
f01264d9:	68 f2 0a 00 00       	push   $0xaf2
f01264de:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01264e3:	e8 c8 9c fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01264e8:	e8 75 65 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01264ed:	89 c2                	mov    %eax,%edx
f01264ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01264f2:	29 c2                	sub    %eax,%edx
f01264f4:	89 d0                	mov    %edx,%eax
f01264f6:	83 f8 03             	cmp    $0x3,%eax
f01264f9:	74 17                	je     f0126512 <test_kfreeall+0x12d9>
f01264fb:	83 ec 04             	sub    $0x4,%esp
f01264fe:	68 84 a3 13 f0       	push   $0xf013a384
f0126503:	68 f3 0a 00 00       	push   $0xaf3
f0126508:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012650d:	e8 9e 9c fd ff       	call   f01001b0 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126512:	e8 4b 65 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126517:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012651a:	e8 65 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012651f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0126522:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126528:	83 ec 0c             	sub    $0xc,%esp
f012652b:	50                   	push   %eax
f012652c:	e8 e1 1a fe ff       	call   f0108012 <kfree>
f0126531:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126534:	e8 4b e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126539:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012653c:	74 17                	je     f0126555 <test_kfreeall+0x131c>
f012653e:	83 ec 04             	sub    $0x4,%esp
f0126541:	68 ec 9a 13 f0       	push   $0xf0139aec
f0126546:	68 fc 0a 00 00       	push   $0xafc
f012654b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126550:	e8 5b 9c fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126555:	e8 08 65 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012655a:	89 c2                	mov    %eax,%edx
f012655c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012655f:	39 c2                	cmp    %eax,%edx
f0126561:	74 17                	je     f012657a <test_kfreeall+0x1341>
f0126563:	83 ec 04             	sub    $0x4,%esp
f0126566:	68 84 a3 13 f0       	push   $0xf013a384
f012656b:	68 fd 0a 00 00       	push   $0xafd
f0126570:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126575:	e8 36 9c fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012657a:	e8 e3 64 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012657f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126582:	e8 fd e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126587:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012658a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126590:	83 ec 0c             	sub    $0xc,%esp
f0126593:	50                   	push   %eax
f0126594:	e8 79 1a fe ff       	call   f0108012 <kfree>
f0126599:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012659c:	e8 e3 e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01265a1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01265a4:	74 17                	je     f01265bd <test_kfreeall+0x1384>
f01265a6:	83 ec 04             	sub    $0x4,%esp
f01265a9:	68 ec 9a 13 f0       	push   $0xf0139aec
f01265ae:	68 03 0b 00 00       	push   $0xb03
f01265b3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01265b8:	e8 f3 9b fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01265bd:	e8 a0 64 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01265c2:	89 c2                	mov    %eax,%edx
f01265c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01265c7:	39 c2                	cmp    %eax,%edx
f01265c9:	74 17                	je     f01265e2 <test_kfreeall+0x13a9>
f01265cb:	83 ec 04             	sub    $0x4,%esp
f01265ce:	68 84 a3 13 f0       	push   $0xf013a384
f01265d3:	68 04 0b 00 00       	push   $0xb04
f01265d8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01265dd:	e8 ce 9b fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01265e2:	e8 7b 64 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01265e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265ea:	e8 95 e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01265ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01265f2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01265f8:	83 ec 0c             	sub    $0xc,%esp
f01265fb:	50                   	push   %eax
f01265fc:	e8 11 1a fe ff       	call   f0108012 <kfree>
f0126601:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126604:	e8 7b e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126609:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012660c:	74 17                	je     f0126625 <test_kfreeall+0x13ec>
f012660e:	83 ec 04             	sub    $0x4,%esp
f0126611:	68 ec 9a 13 f0       	push   $0xf0139aec
f0126616:	68 0a 0b 00 00       	push   $0xb0a
f012661b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126620:	e8 8b 9b fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126625:	e8 38 64 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012662a:	89 c2                	mov    %eax,%edx
f012662c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012662f:	39 c2                	cmp    %eax,%edx
f0126631:	74 17                	je     f012664a <test_kfreeall+0x1411>
f0126633:	83 ec 04             	sub    $0x4,%esp
f0126636:	68 84 a3 13 f0       	push   $0xf013a384
f012663b:	68 0b 0b 00 00       	push   $0xb0b
f0126640:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126645:	e8 66 9b fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012664a:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0126651:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0126658:	eb 48                	jmp    f01266a2 <test_kfreeall+0x1469>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012665a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012665d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0126662:	83 ec 04             	sub    $0x4,%esp
f0126665:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f012666b:	51                   	push   %ecx
f012666c:	52                   	push   %edx
f012666d:	50                   	push   %eax
f012666e:	e8 74 0e fe ff       	call   f01074e7 <get_page_table>
f0126673:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0126676:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012667c:	85 c0                	test   %eax,%eax
f012667e:	75 17                	jne    f0126697 <test_kfreeall+0x145e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0126680:	83 ec 04             	sub    $0x4,%esp
f0126683:	68 d4 a3 13 f0       	push   $0xf013a3d4
f0126688:	68 18 0b 00 00       	push   $0xb18
f012668d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126692:	e8 19 9b fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126697:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f012669e:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01266a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01266a6:	78 b2                	js     f012665a <test_kfreeall+0x1421>
f01266a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01266ac:	7f 09                	jg     f01266b7 <test_kfreeall+0x147e>
f01266ae:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01266b5:	76 a3                	jbe    f012665a <test_kfreeall+0x1421>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01266b7:	83 ec 0c             	sub    $0xc,%esp
f01266ba:	68 30 a8 13 f0       	push   $0xf013a830
f01266bf:	e8 6d a7 fd ff       	call   f0100e31 <cprintf>
f01266c4:	83 c4 10             	add    $0x10,%esp

	return 1;
f01266c7:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01266cc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01266cf:	5b                   	pop    %ebx
f01266d0:	5f                   	pop    %edi
f01266d1:	5d                   	pop    %ebp
f01266d2:	c3                   	ret    

f01266d3 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f01266d3:	55                   	push   %ebp
f01266d4:	89 e5                	mov    %esp,%ebp
f01266d6:	57                   	push   %edi
f01266d7:	53                   	push   %ebx
f01266d8:	81 ec 50 01 00 00    	sub    $0x150,%esp
	char minByte = 1<<7;
f01266de:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01266e2:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01266e6:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01266ec:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01266f2:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01266f9:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126700:	e8 5d 63 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126705:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126708:	8d 95 fc fe ff ff    	lea    -0x104(%ebp),%edx
f012670e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126713:	b8 00 00 00 00       	mov    $0x0,%eax
f0126718:	89 d7                	mov    %edx,%edi
f012671a:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012671c:	8d 95 ac fe ff ff    	lea    -0x154(%ebp),%edx
f0126722:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126727:	b8 00 00 00 00       	mov    $0x0,%eax
f012672c:	89 d7                	mov    %edx,%edi
f012672e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126730:	e8 2d 63 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126735:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126738:	e8 47 df fd ff       	call   f0104684 <pf_calculate_free_frames>
f012673d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126740:	83 ec 0c             	sub    $0xc,%esp
f0126743:	68 00 fc 1f 00       	push   $0x1ffc00
f0126748:	e8 ab 18 fe ff       	call   f0107ff8 <kmalloc>
f012674d:	83 c4 10             	add    $0x10,%esp
f0126750:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126756:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012675c:	89 c1                	mov    %eax,%ecx
f012675e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0126765:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012676a:	0f b6 d0             	movzbl %al,%edx
f012676d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126770:	01 d0                	add    %edx,%eax
f0126772:	48                   	dec    %eax
f0126773:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0126776:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126779:	ba 00 00 00 00       	mov    $0x0,%edx
f012677e:	f7 75 d4             	divl   -0x2c(%ebp)
f0126781:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126784:	29 d0                	sub    %edx,%eax
f0126786:	89 c3                	mov    %eax,%ebx
f0126788:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012678f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126794:	0f b6 c0             	movzbl %al,%eax
f0126797:	c1 e0 04             	shl    $0x4,%eax
f012679a:	89 c2                	mov    %eax,%edx
f012679c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012679f:	01 d0                	add    %edx,%eax
f01267a1:	48                   	dec    %eax
f01267a2:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01267a5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01267a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01267ad:	f7 75 cc             	divl   -0x34(%ebp)
f01267b0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01267b3:	29 d0                	sub    %edx,%eax
f01267b5:	01 d8                	add    %ebx,%eax
f01267b7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01267bc:	39 c1                	cmp    %eax,%ecx
f01267be:	74 17                	je     f01267d7 <test_kexpand+0x104>
f01267c0:	83 ec 04             	sub    $0x4,%esp
f01267c3:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01267c8:	68 43 0b 00 00       	push   $0xb43
f01267cd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01267d2:	e8 d9 99 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01267d7:	e8 a8 de fd ff       	call   f0104684 <pf_calculate_free_frames>
f01267dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01267df:	74 17                	je     f01267f8 <test_kexpand+0x125>
f01267e1:	83 ec 04             	sub    $0x4,%esp
f01267e4:	68 ec 9a 13 f0       	push   $0xf0139aec
f01267e9:	68 44 0b 00 00       	push   $0xb44
f01267ee:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01267f3:	e8 b8 99 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01267f8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01267fb:	e8 62 62 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126800:	29 c3                	sub    %eax,%ebx
f0126802:	89 d8                	mov    %ebx,%eax
f0126804:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126809:	74 17                	je     f0126822 <test_kexpand+0x14f>
f012680b:	83 ec 04             	sub    $0x4,%esp
f012680e:	68 54 9b 13 f0       	push   $0xf0139b54
f0126813:	68 45 0b 00 00       	push   $0xb45
f0126818:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012681d:	e8 8e 99 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126822:	c7 85 fc fe ff ff ff 	movl   $0x1ffbff,-0x104(%ebp)
f0126829:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012682c:	e8 31 62 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126831:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126834:	e8 4b de fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126839:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012683c:	83 ec 0c             	sub    $0xc,%esp
f012683f:	68 00 fc 1f 00       	push   $0x1ffc00
f0126844:	e8 af 17 fe ff       	call   f0107ff8 <kmalloc>
f0126849:	83 c4 10             	add    $0x10,%esp
f012684c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126852:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0126858:	89 c1                	mov    %eax,%ecx
f012685a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126861:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126866:	0f b6 d0             	movzbl %al,%edx
f0126869:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012686c:	01 d0                	add    %edx,%eax
f012686e:	48                   	dec    %eax
f012686f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126872:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126875:	ba 00 00 00 00       	mov    $0x0,%edx
f012687a:	f7 75 c4             	divl   -0x3c(%ebp)
f012687d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126880:	29 d0                	sub    %edx,%eax
f0126882:	89 c3                	mov    %eax,%ebx
f0126884:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012688b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126890:	0f b6 c0             	movzbl %al,%eax
f0126893:	c1 e0 04             	shl    $0x4,%eax
f0126896:	89 c2                	mov    %eax,%edx
f0126898:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012689b:	01 d0                	add    %edx,%eax
f012689d:	48                   	dec    %eax
f012689e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01268a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01268a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01268a9:	f7 75 bc             	divl   -0x44(%ebp)
f01268ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01268af:	29 d0                	sub    %edx,%eax
f01268b1:	01 d8                	add    %ebx,%eax
f01268b3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01268b8:	39 c1                	cmp    %eax,%ecx
f01268ba:	74 17                	je     f01268d3 <test_kexpand+0x200>
f01268bc:	83 ec 04             	sub    $0x4,%esp
f01268bf:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01268c4:	68 4c 0b 00 00       	push   $0xb4c
f01268c9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01268ce:	e8 dd 98 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01268d3:	e8 ac dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01268d8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01268db:	74 17                	je     f01268f4 <test_kexpand+0x221>
f01268dd:	83 ec 04             	sub    $0x4,%esp
f01268e0:	68 ec 9a 13 f0       	push   $0xf0139aec
f01268e5:	68 4d 0b 00 00       	push   $0xb4d
f01268ea:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01268ef:	e8 bc 98 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01268f4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01268f7:	e8 66 61 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01268fc:	29 c3                	sub    %eax,%ebx
f01268fe:	89 d8                	mov    %ebx,%eax
f0126900:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126905:	74 17                	je     f012691e <test_kexpand+0x24b>
f0126907:	83 ec 04             	sub    $0x4,%esp
f012690a:	68 54 9b 13 f0       	push   $0xf0139b54
f012690f:	68 4e 0b 00 00       	push   $0xb4e
f0126914:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126919:	e8 92 98 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012691e:	c7 85 00 ff ff ff ff 	movl   $0x1ffbff,-0x100(%ebp)
f0126925:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126928:	e8 35 61 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012692d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126930:	e8 4f dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126935:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126938:	83 ec 0c             	sub    $0xc,%esp
f012693b:	68 00 08 00 00       	push   $0x800
f0126940:	e8 b3 16 fe ff       	call   f0107ff8 <kmalloc>
f0126945:	83 c4 10             	add    $0x10,%esp
f0126948:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012694e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0126954:	89 c1                	mov    %eax,%ecx
f0126956:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012695d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126962:	0f b6 d0             	movzbl %al,%edx
f0126965:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126968:	01 d0                	add    %edx,%eax
f012696a:	48                   	dec    %eax
f012696b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012696e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126971:	ba 00 00 00 00       	mov    $0x0,%edx
f0126976:	f7 75 b4             	divl   -0x4c(%ebp)
f0126979:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012697c:	29 d0                	sub    %edx,%eax
f012697e:	89 c3                	mov    %eax,%ebx
f0126980:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0126987:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012698c:	0f b6 c0             	movzbl %al,%eax
f012698f:	c1 e0 04             	shl    $0x4,%eax
f0126992:	89 c2                	mov    %eax,%edx
f0126994:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126997:	01 d0                	add    %edx,%eax
f0126999:	48                   	dec    %eax
f012699a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012699d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01269a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01269a5:	f7 75 ac             	divl   -0x54(%ebp)
f01269a8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01269ab:	29 d0                	sub    %edx,%eax
f01269ad:	01 d8                	add    %ebx,%eax
f01269af:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01269b4:	39 c1                	cmp    %eax,%ecx
f01269b6:	74 17                	je     f01269cf <test_kexpand+0x2fc>
f01269b8:	83 ec 04             	sub    $0x4,%esp
f01269bb:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01269c0:	68 55 0b 00 00       	push   $0xb55
f01269c5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01269ca:	e8 e1 97 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01269cf:	e8 b0 dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01269d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01269d7:	74 17                	je     f01269f0 <test_kexpand+0x31d>
f01269d9:	83 ec 04             	sub    $0x4,%esp
f01269dc:	68 ec 9a 13 f0       	push   $0xf0139aec
f01269e1:	68 56 0b 00 00       	push   $0xb56
f01269e6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01269eb:	e8 c0 97 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01269f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01269f3:	e8 6a 60 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01269f8:	29 c3                	sub    %eax,%ebx
f01269fa:	89 d8                	mov    %ebx,%eax
f01269fc:	83 f8 01             	cmp    $0x1,%eax
f01269ff:	74 17                	je     f0126a18 <test_kexpand+0x345>
f0126a01:	83 ec 04             	sub    $0x4,%esp
f0126a04:	68 54 9b 13 f0       	push   $0xf0139b54
f0126a09:	68 57 0b 00 00       	push   $0xb57
f0126a0e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126a13:	e8 98 97 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126a18:	c7 85 04 ff ff ff ff 	movl   $0x7ff,-0xfc(%ebp)
f0126a1f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126a22:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0126a28:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126a2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126a32:	eb 0e                	jmp    f0126a42 <test_kexpand+0x36f>
		{
			ptr[i] = 2 ;
f0126a34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126a37:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126a3a:	01 d0                	add    %edx,%eax
f0126a3c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126a3f:	ff 45 f4             	incl   -0xc(%ebp)
f0126a42:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126a48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126a4b:	7f e7                	jg     f0126a34 <test_kexpand+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126a4d:	e8 10 60 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126a52:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a55:	e8 2a dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126a5a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126a5d:	83 ec 0c             	sub    $0xc,%esp
f0126a60:	68 00 08 00 00       	push   $0x800
f0126a65:	e8 8e 15 fe ff       	call   f0107ff8 <kmalloc>
f0126a6a:	83 c4 10             	add    $0x10,%esp
f0126a6d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126a73:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126a79:	89 c1                	mov    %eax,%ecx
f0126a7b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126a82:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126a87:	0f b6 d0             	movzbl %al,%edx
f0126a8a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126a8d:	01 d0                	add    %edx,%eax
f0126a8f:	48                   	dec    %eax
f0126a90:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126a96:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a9b:	f7 75 a0             	divl   -0x60(%ebp)
f0126a9e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126aa1:	29 d0                	sub    %edx,%eax
f0126aa3:	89 c3                	mov    %eax,%ebx
f0126aa5:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126aac:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126ab1:	0f b6 c0             	movzbl %al,%eax
f0126ab4:	c1 e0 04             	shl    $0x4,%eax
f0126ab7:	89 c2                	mov    %eax,%edx
f0126ab9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126abc:	01 d0                	add    %edx,%eax
f0126abe:	48                   	dec    %eax
f0126abf:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126ac2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126ac5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126aca:	f7 75 98             	divl   -0x68(%ebp)
f0126acd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126ad0:	29 d0                	sub    %edx,%eax
f0126ad2:	01 d8                	add    %ebx,%eax
f0126ad4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126ad9:	39 c1                	cmp    %eax,%ecx
f0126adb:	74 17                	je     f0126af4 <test_kexpand+0x421>
f0126add:	83 ec 04             	sub    $0x4,%esp
f0126ae0:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0126ae5:	68 63 0b 00 00       	push   $0xb63
f0126aea:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126aef:	e8 bc 96 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126af4:	e8 8b db fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126af9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126afc:	74 17                	je     f0126b15 <test_kexpand+0x442>
f0126afe:	83 ec 04             	sub    $0x4,%esp
f0126b01:	68 ec 9a 13 f0       	push   $0xf0139aec
f0126b06:	68 64 0b 00 00       	push   $0xb64
f0126b0b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126b10:	e8 9b 96 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b15:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126b18:	e8 45 5f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126b1d:	29 c3                	sub    %eax,%ebx
f0126b1f:	89 d8                	mov    %ebx,%eax
f0126b21:	83 f8 01             	cmp    $0x1,%eax
f0126b24:	74 17                	je     f0126b3d <test_kexpand+0x46a>
f0126b26:	83 ec 04             	sub    $0x4,%esp
f0126b29:	68 54 9b 13 f0       	push   $0xf0139b54
f0126b2e:	68 65 0b 00 00       	push   $0xb65
f0126b33:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126b38:	e8 73 96 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126b3d:	c7 85 08 ff ff ff ff 	movl   $0x7ff,-0xf8(%ebp)
f0126b44:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126b47:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126b4d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126b50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126b57:	eb 0e                	jmp    f0126b67 <test_kexpand+0x494>
		{
			ptr[i] = 3 ;
f0126b59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126b5c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126b5f:	01 d0                	add    %edx,%eax
f0126b61:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126b64:	ff 45 f4             	incl   -0xc(%ebp)
f0126b67:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126b6d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b70:	7f e7                	jg     f0126b59 <test_kexpand+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126b72:	e8 eb 5e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126b77:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b7a:	e8 05 db fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126b7f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126b82:	83 ec 0c             	sub    $0xc,%esp
f0126b85:	68 00 1c 00 00       	push   $0x1c00
f0126b8a:	e8 69 14 fe ff       	call   f0107ff8 <kmalloc>
f0126b8f:	83 c4 10             	add    $0x10,%esp
f0126b92:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126b98:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126b9e:	89 c1                	mov    %eax,%ecx
f0126ba0:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126ba7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126bac:	0f b6 d0             	movzbl %al,%edx
f0126baf:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126bb2:	01 d0                	add    %edx,%eax
f0126bb4:	48                   	dec    %eax
f0126bb5:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126bb8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126bbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bc0:	f7 75 90             	divl   -0x70(%ebp)
f0126bc3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126bc6:	29 d0                	sub    %edx,%eax
f0126bc8:	89 c3                	mov    %eax,%ebx
f0126bca:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126bd1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126bd6:	0f b6 c0             	movzbl %al,%eax
f0126bd9:	c1 e0 04             	shl    $0x4,%eax
f0126bdc:	89 c2                	mov    %eax,%edx
f0126bde:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126be1:	01 d0                	add    %edx,%eax
f0126be3:	48                   	dec    %eax
f0126be4:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126be7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126bea:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bef:	f7 75 88             	divl   -0x78(%ebp)
f0126bf2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126bf5:	29 d0                	sub    %edx,%eax
f0126bf7:	01 d8                	add    %ebx,%eax
f0126bf9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126bfe:	39 c1                	cmp    %eax,%ecx
f0126c00:	74 17                	je     f0126c19 <test_kexpand+0x546>
f0126c02:	83 ec 04             	sub    $0x4,%esp
f0126c05:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0126c0a:	68 71 0b 00 00       	push   $0xb71
f0126c0f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126c14:	e8 97 95 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c19:	e8 66 da fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126c1e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126c21:	74 17                	je     f0126c3a <test_kexpand+0x567>
f0126c23:	83 ec 04             	sub    $0x4,%esp
f0126c26:	68 ec 9a 13 f0       	push   $0xf0139aec
f0126c2b:	68 72 0b 00 00       	push   $0xb72
f0126c30:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126c35:	e8 76 95 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c3a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126c3d:	e8 20 5e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126c42:	29 c3                	sub    %eax,%ebx
f0126c44:	89 d8                	mov    %ebx,%eax
f0126c46:	83 f8 02             	cmp    $0x2,%eax
f0126c49:	74 17                	je     f0126c62 <test_kexpand+0x58f>
f0126c4b:	83 ec 04             	sub    $0x4,%esp
f0126c4e:	68 54 9b 13 f0       	push   $0xf0139b54
f0126c53:	68 73 0b 00 00       	push   $0xb73
f0126c58:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126c5d:	e8 4e 95 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126c62:	c7 85 0c ff ff ff ff 	movl   $0x1bff,-0xf4(%ebp)
f0126c69:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126c6c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126c72:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126c75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c7c:	eb 0e                	jmp    f0126c8c <test_kexpand+0x5b9>
		{
			ptr[i] = 4 ;
f0126c7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126c81:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126c84:	01 d0                	add    %edx,%eax
f0126c86:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126c89:	ff 45 f4             	incl   -0xc(%ebp)
f0126c8c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126c92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c95:	7f e7                	jg     f0126c7e <test_kexpand+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126c97:	e8 c6 5d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126c9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c9f:	e8 e0 d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ca4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126ca7:	83 ec 0c             	sub    $0xc,%esp
f0126caa:	68 00 fc 2f 00       	push   $0x2ffc00
f0126caf:	e8 44 13 fe ff       	call   f0107ff8 <kmalloc>
f0126cb4:	83 c4 10             	add    $0x10,%esp
f0126cb7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126cbd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126cc3:	89 c1                	mov    %eax,%ecx
f0126cc5:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0126ccc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126cd1:	0f b6 d0             	movzbl %al,%edx
f0126cd4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cd7:	01 d0                	add    %edx,%eax
f0126cd9:	48                   	dec    %eax
f0126cda:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0126ce0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126ce6:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ceb:	f7 75 80             	divl   -0x80(%ebp)
f0126cee:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126cf4:	29 d0                	sub    %edx,%eax
f0126cf6:	89 c3                	mov    %eax,%ebx
f0126cf8:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0126cff:	10 00 00 
f0126d02:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126d07:	0f b6 c0             	movzbl %al,%eax
f0126d0a:	c1 e0 04             	shl    $0x4,%eax
f0126d0d:	89 c2                	mov    %eax,%edx
f0126d0f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126d15:	01 d0                	add    %edx,%eax
f0126d17:	48                   	dec    %eax
f0126d18:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0126d1e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126d24:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d29:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0126d2f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126d35:	29 d0                	sub    %edx,%eax
f0126d37:	01 d8                	add    %ebx,%eax
f0126d39:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126d3e:	39 c1                	cmp    %eax,%ecx
f0126d40:	74 17                	je     f0126d59 <test_kexpand+0x686>
f0126d42:	83 ec 04             	sub    $0x4,%esp
f0126d45:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0126d4a:	68 7f 0b 00 00       	push   $0xb7f
f0126d4f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126d54:	e8 57 94 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d59:	e8 26 d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126d5e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126d61:	74 17                	je     f0126d7a <test_kexpand+0x6a7>
f0126d63:	83 ec 04             	sub    $0x4,%esp
f0126d66:	68 ec 9a 13 f0       	push   $0xf0139aec
f0126d6b:	68 80 0b 00 00       	push   $0xb80
f0126d70:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126d75:	e8 36 94 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126d7a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126d7d:	e8 e0 5c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126d82:	29 c3                	sub    %eax,%ebx
f0126d84:	89 d8                	mov    %ebx,%eax
f0126d86:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126d8b:	74 17                	je     f0126da4 <test_kexpand+0x6d1>
f0126d8d:	83 ec 04             	sub    $0x4,%esp
f0126d90:	68 54 9b 13 f0       	push   $0xf0139b54
f0126d95:	68 81 0b 00 00       	push   $0xb81
f0126d9a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126d9f:	e8 0c 94 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126da4:	c7 85 10 ff ff ff ff 	movl   $0x2ffbff,-0xf0(%ebp)
f0126dab:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126dae:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126db4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126db7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126dbe:	eb 0e                	jmp    f0126dce <test_kexpand+0x6fb>
		{
			ptr[i] = 5 ;
f0126dc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126dc3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126dc6:	01 d0                	add    %edx,%eax
f0126dc8:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126dcb:	ff 45 f4             	incl   -0xc(%ebp)
f0126dce:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126dd4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126dd7:	7f e7                	jg     f0126dc0 <test_kexpand+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126dd9:	e8 84 5c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126dde:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126de1:	e8 9e d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126de6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0126de9:	83 ec 0c             	sub    $0xc,%esp
f0126dec:	68 00 00 60 00       	push   $0x600000
f0126df1:	e8 02 12 fe ff       	call   f0107ff8 <kmalloc>
f0126df6:	83 c4 10             	add    $0x10,%esp
f0126df9:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126dff:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126e05:	89 c1                	mov    %eax,%ecx
f0126e07:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0126e0e:	10 00 00 
f0126e11:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126e16:	0f b6 d0             	movzbl %al,%edx
f0126e19:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126e1f:	01 d0                	add    %edx,%eax
f0126e21:	48                   	dec    %eax
f0126e22:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0126e28:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126e2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e33:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0126e39:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126e3f:	29 d0                	sub    %edx,%eax
f0126e41:	89 c3                	mov    %eax,%ebx
f0126e43:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0126e4a:	10 00 00 
f0126e4d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126e52:	0f b6 c0             	movzbl %al,%eax
f0126e55:	c1 e0 04             	shl    $0x4,%eax
f0126e58:	89 c2                	mov    %eax,%edx
f0126e5a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126e60:	01 d0                	add    %edx,%eax
f0126e62:	48                   	dec    %eax
f0126e63:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0126e69:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126e6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e74:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0126e7a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126e80:	29 d0                	sub    %edx,%eax
f0126e82:	01 d8                	add    %ebx,%eax
f0126e84:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126e89:	39 c1                	cmp    %eax,%ecx
f0126e8b:	74 17                	je     f0126ea4 <test_kexpand+0x7d1>
f0126e8d:	83 ec 04             	sub    $0x4,%esp
f0126e90:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0126e95:	68 8d 0b 00 00       	push   $0xb8d
f0126e9a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126e9f:	e8 0c 93 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ea4:	e8 db d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ea9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126eac:	74 17                	je     f0126ec5 <test_kexpand+0x7f2>
f0126eae:	83 ec 04             	sub    $0x4,%esp
f0126eb1:	68 ec 9a 13 f0       	push   $0xf0139aec
f0126eb6:	68 8e 0b 00 00       	push   $0xb8e
f0126ebb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126ec0:	e8 eb 92 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ec5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126ec8:	e8 95 5b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126ecd:	29 c3                	sub    %eax,%ebx
f0126ecf:	89 d8                	mov    %ebx,%eax
f0126ed1:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126ed6:	74 17                	je     f0126eef <test_kexpand+0x81c>
f0126ed8:	83 ec 04             	sub    $0x4,%esp
f0126edb:	68 54 9b 13 f0       	push   $0xf0139b54
f0126ee0:	68 8f 0b 00 00       	push   $0xb8f
f0126ee5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126eea:	e8 c1 92 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0126eef:	c7 85 14 ff ff ff ff 	movl   $0x17ffff,-0xec(%ebp)
f0126ef6:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0126ef9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126eff:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0126f05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f0c:	eb 1a                	jmp    f0126f28 <test_kexpand+0x855>
		{
			arr[i] = i ;
f0126f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126f11:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126f18:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126f1e:	01 c2                	add    %eax,%edx
f0126f20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126f23:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0126f25:	ff 45 f4             	incl   -0xc(%ebp)
f0126f28:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126f2e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126f31:	7d db                	jge    f0126f0e <test_kexpand+0x83b>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0126f33:	c7 85 5c ff ff ff ff 	movl   $0x1bffff,-0xa4(%ebp)
f0126f3a:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0126f3d:	e8 20 5b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126f42:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f45:	e8 3a d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f4a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0126f4d:	83 ec 0c             	sub    $0xc,%esp
f0126f50:	68 00 00 70 00       	push   $0x700000
f0126f55:	e8 3a 11 fe ff       	call   f0108094 <kexpand>
f0126f5a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126f5d:	e8 22 d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f62:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f65:	74 19                	je     f0126f80 <test_kexpand+0x8ad>
f0126f67:	68 6c a8 13 f0       	push   $0xf013a86c
f0126f6c:	68 9d a8 13 f0       	push   $0xf013a89d
f0126f71:	68 a0 0b 00 00       	push   $0xba0
f0126f76:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126f7b:	e8 30 92 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0126f80:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126f83:	e8 da 5a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0126f88:	29 c3                	sub    %eax,%ebx
f0126f8a:	89 d8                	mov    %ebx,%eax
f0126f8c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126f91:	74 19                	je     f0126fac <test_kexpand+0x8d9>
f0126f93:	68 b4 a8 13 f0       	push   $0xf013a8b4
f0126f98:	68 9d a8 13 f0       	push   $0xf013a89d
f0126f9d:	68 a1 0b 00 00       	push   $0xba1
f0126fa2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0126fa7:	e8 04 92 fd ff       	call   f01001b0 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126fac:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126fb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0126fb5:	eb 1a                	jmp    f0126fd1 <test_kexpand+0x8fe>
		{
			arr[i] = i ;
f0126fb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126fba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126fc1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126fc7:	01 c2                	add    %eax,%edx
f0126fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126fcc:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126fce:	ff 45 f4             	incl   -0xc(%ebp)
f0126fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126fd4:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126fda:	7c db                	jl     f0126fb7 <test_kexpand+0x8e4>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126fdc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126fe3:	eb 37                	jmp    f012701c <test_kexpand+0x949>
		{
			assert(arr[i] ==i);
f0126fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126fe8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126fef:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126ff5:	01 d0                	add    %edx,%eax
f0126ff7:	8b 10                	mov    (%eax),%edx
f0126ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126ffc:	39 c2                	cmp    %eax,%edx
f0126ffe:	74 19                	je     f0127019 <test_kexpand+0x946>
f0127000:	68 e4 a8 13 f0       	push   $0xf013a8e4
f0127005:	68 9d a8 13 f0       	push   $0xf013a89d
f012700a:	68 ad 0b 00 00       	push   $0xbad
f012700f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127014:	e8 97 91 fd ff       	call   f01001b0 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127019:	ff 45 f4             	incl   -0xc(%ebp)
f012701c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012701f:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0127025:	7c be                	jl     f0126fe5 <test_kexpand+0x912>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127027:	e8 36 5a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012702c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012702f:	e8 50 d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127034:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0127037:	83 ec 0c             	sub    $0xc,%esp
f012703a:	68 00 00 a0 00       	push   $0xa00000
f012703f:	e8 50 10 fe ff       	call   f0108094 <kexpand>
f0127044:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127047:	e8 38 d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012704c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012704f:	74 19                	je     f012706a <test_kexpand+0x997>
f0127051:	68 6c a8 13 f0       	push   $0xf013a86c
f0127056:	68 9d a8 13 f0       	push   $0xf013a89d
f012705b:	68 b8 0b 00 00       	push   $0xbb8
f0127060:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127065:	e8 46 91 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f012706a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012706d:	e8 f0 59 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127072:	29 c3                	sub    %eax,%ebx
f0127074:	89 d8                	mov    %ebx,%eax
f0127076:	3d 00 03 00 00       	cmp    $0x300,%eax
f012707b:	74 19                	je     f0127096 <test_kexpand+0x9c3>
f012707d:	68 f0 a8 13 f0       	push   $0xf013a8f0
f0127082:	68 9d a8 13 f0       	push   $0xf013a89d
f0127087:	68 b9 0b 00 00       	push   $0xbb9
f012708c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127091:	e8 1a 91 fd ff       	call   f01001b0 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127096:	e8 c7 59 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012709b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012709e:	e8 e1 d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01270a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01270a6:	83 ec 0c             	sub    $0xc,%esp
f01270a9:	68 00 00 40 00       	push   $0x400000
f01270ae:	e8 45 0f fe ff       	call   f0107ff8 <kmalloc>
f01270b3:	83 c4 10             	add    $0x10,%esp
f01270b6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f01270bc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01270c2:	89 c1                	mov    %eax,%ecx
f01270c4:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01270cb:	10 00 00 
f01270ce:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01270d3:	0f b6 d0             	movzbl %al,%edx
f01270d6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01270dc:	01 d0                	add    %edx,%eax
f01270de:	48                   	dec    %eax
f01270df:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01270e5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01270eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01270f0:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01270f6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01270fc:	29 d0                	sub    %edx,%eax
f01270fe:	89 c3                	mov    %eax,%ebx
f0127100:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127107:	10 00 00 
f012710a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012710f:	0f b6 c0             	movzbl %al,%eax
f0127112:	c1 e0 04             	shl    $0x4,%eax
f0127115:	89 c2                	mov    %eax,%edx
f0127117:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012711d:	01 d0                	add    %edx,%eax
f012711f:	48                   	dec    %eax
f0127120:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127126:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012712c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127131:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127137:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012713d:	29 d0                	sub    %edx,%eax
f012713f:	01 d8                	add    %ebx,%eax
f0127141:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0127146:	39 c1                	cmp    %eax,%ecx
f0127148:	74 17                	je     f0127161 <test_kexpand+0xa8e>
f012714a:	83 ec 04             	sub    $0x4,%esp
f012714d:	68 20 a9 13 f0       	push   $0xf013a920
f0127152:	68 c4 0b 00 00       	push   $0xbc4
f0127157:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012715c:	e8 4f 90 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127161:	e8 1e d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127166:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127169:	74 17                	je     f0127182 <test_kexpand+0xaaf>
f012716b:	83 ec 04             	sub    $0x4,%esp
f012716e:	68 ec 9a 13 f0       	push   $0xf0139aec
f0127173:	68 c5 0b 00 00       	push   $0xbc5
f0127178:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012717d:	e8 2e 90 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127182:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127185:	e8 d8 58 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012718a:	29 c3                	sub    %eax,%ebx
f012718c:	89 d8                	mov    %ebx,%eax
f012718e:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127193:	74 17                	je     f01271ac <test_kexpand+0xad9>
f0127195:	83 ec 04             	sub    $0x4,%esp
f0127198:	68 54 9b 13 f0       	push   $0xf0139b54
f012719d:	68 c6 0b 00 00       	push   $0xbc6
f01271a2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01271a7:	e8 04 90 fd ff       	call   f01001b0 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f01271ac:	e8 b1 58 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01271b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271b4:	e8 cb d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01271b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f01271bc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01271c2:	83 ec 0c             	sub    $0xc,%esp
f01271c5:	50                   	push   %eax
f01271c6:	e8 47 0e fe ff       	call   f0108012 <kfree>
f01271cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271ce:	e8 b1 d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01271d3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01271d6:	74 17                	je     f01271ef <test_kexpand+0xb1c>
f01271d8:	83 ec 04             	sub    $0x4,%esp
f01271db:	68 ec 9a 13 f0       	push   $0xf0139aec
f01271e0:	68 cf 0b 00 00       	push   $0xbcf
f01271e5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01271ea:	e8 c1 8f fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01271ef:	e8 6e 58 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01271f4:	89 c2                	mov    %eax,%edx
f01271f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01271f9:	29 c2                	sub    %eax,%edx
f01271fb:	89 d0                	mov    %edx,%eax
f01271fd:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0127202:	74 17                	je     f012721b <test_kexpand+0xb48>
f0127204:	83 ec 04             	sub    $0x4,%esp
f0127207:	68 84 a3 13 f0       	push   $0xf013a384
f012720c:	68 d0 0b 00 00       	push   $0xbd0
f0127211:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127216:	e8 95 8f fd ff       	call   f01001b0 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012721b:	e8 42 58 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127220:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127223:	e8 5c d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127228:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f012722b:	83 ec 0c             	sub    $0xc,%esp
f012722e:	68 00 50 40 00       	push   $0x405000
f0127233:	e8 5c 0e fe ff       	call   f0108094 <kexpand>
f0127238:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012723b:	e8 44 d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127240:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127243:	74 19                	je     f012725e <test_kexpand+0xb8b>
f0127245:	68 6c a8 13 f0       	push   $0xf013a86c
f012724a:	68 9d a8 13 f0       	push   $0xf013a89d
f012724f:	68 da 0b 00 00       	push   $0xbda
f0127254:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127259:	e8 52 8f fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f012725e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127261:	e8 fc 57 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127266:	29 c3                	sub    %eax,%ebx
f0127268:	89 d8                	mov    %ebx,%eax
f012726a:	83 f8 05             	cmp    $0x5,%eax
f012726d:	74 19                	je     f0127288 <test_kexpand+0xbb5>
f012726f:	68 48 a9 13 f0       	push   $0xf013a948
f0127274:	68 9d a8 13 f0       	push   $0xf013a89d
f0127279:	68 db 0b 00 00       	push   $0xbdb
f012727e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127283:	e8 28 8f fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127288:	83 ec 0c             	sub    $0xc,%esp
f012728b:	68 30 a8 13 f0       	push   $0xf013a830
f0127290:	e8 9c 9b fd ff       	call   f0100e31 <cprintf>
f0127295:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127298:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012729d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01272a0:	5b                   	pop    %ebx
f01272a1:	5f                   	pop    %edi
f01272a2:	5d                   	pop    %ebp
f01272a3:	c3                   	ret    

f01272a4 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f01272a4:	55                   	push   %ebp
f01272a5:	89 e5                	mov    %esp,%ebp
f01272a7:	57                   	push   %edi
f01272a8:	53                   	push   %ebx
f01272a9:	81 ec 60 01 00 00    	sub    $0x160,%esp
	char minByte = 1<<7;
f01272af:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01272b3:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01272b7:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01272bd:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01272c3:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01272ca:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01272d1:	e8 8c 57 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01272d6:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01272d9:	8d 95 ec fe ff ff    	lea    -0x114(%ebp),%edx
f01272df:	b9 14 00 00 00       	mov    $0x14,%ecx
f01272e4:	b8 00 00 00 00       	mov    $0x0,%eax
f01272e9:	89 d7                	mov    %edx,%edi
f01272eb:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01272ed:	8d 95 9c fe ff ff    	lea    -0x164(%ebp),%edx
f01272f3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01272f8:	b8 00 00 00 00       	mov    $0x0,%eax
f01272fd:	89 d7                	mov    %edx,%edi
f01272ff:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127301:	e8 5c 57 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127306:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127309:	e8 76 d3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012730e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127311:	83 ec 0c             	sub    $0xc,%esp
f0127314:	68 00 fc 1f 00       	push   $0x1ffc00
f0127319:	e8 da 0c fe ff       	call   f0107ff8 <kmalloc>
f012731e:	83 c4 10             	add    $0x10,%esp
f0127321:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127327:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012732d:	89 c1                	mov    %eax,%ecx
f012732f:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127336:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012733b:	0f b6 d0             	movzbl %al,%edx
f012733e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127341:	01 d0                	add    %edx,%eax
f0127343:	48                   	dec    %eax
f0127344:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127347:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012734a:	ba 00 00 00 00       	mov    $0x0,%edx
f012734f:	f7 75 d4             	divl   -0x2c(%ebp)
f0127352:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127355:	29 d0                	sub    %edx,%eax
f0127357:	89 c3                	mov    %eax,%ebx
f0127359:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127360:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127365:	0f b6 c0             	movzbl %al,%eax
f0127368:	c1 e0 04             	shl    $0x4,%eax
f012736b:	89 c2                	mov    %eax,%edx
f012736d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127370:	01 d0                	add    %edx,%eax
f0127372:	48                   	dec    %eax
f0127373:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127376:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127379:	ba 00 00 00 00       	mov    $0x0,%edx
f012737e:	f7 75 cc             	divl   -0x34(%ebp)
f0127381:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127384:	29 d0                	sub    %edx,%eax
f0127386:	01 d8                	add    %ebx,%eax
f0127388:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012738d:	39 c1                	cmp    %eax,%ecx
f012738f:	74 17                	je     f01273a8 <test_kshrink+0x104>
f0127391:	83 ec 04             	sub    $0x4,%esp
f0127394:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0127399:	68 01 0c 00 00       	push   $0xc01
f012739e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01273a3:	e8 08 8e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273a8:	e8 d7 d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01273ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01273b0:	74 17                	je     f01273c9 <test_kshrink+0x125>
f01273b2:	83 ec 04             	sub    $0x4,%esp
f01273b5:	68 ec 9a 13 f0       	push   $0xf0139aec
f01273ba:	68 02 0c 00 00       	push   $0xc02
f01273bf:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01273c4:	e8 e7 8d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273c9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01273cc:	e8 91 56 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01273d1:	29 c3                	sub    %eax,%ebx
f01273d3:	89 d8                	mov    %ebx,%eax
f01273d5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01273da:	74 17                	je     f01273f3 <test_kshrink+0x14f>
f01273dc:	83 ec 04             	sub    $0x4,%esp
f01273df:	68 54 9b 13 f0       	push   $0xf0139b54
f01273e4:	68 03 0c 00 00       	push   $0xc03
f01273e9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01273ee:	e8 bd 8d fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01273f3:	c7 85 ec fe ff ff ff 	movl   $0x1ffbff,-0x114(%ebp)
f01273fa:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01273fd:	e8 60 56 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127402:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127405:	e8 7a d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012740a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012740d:	83 ec 0c             	sub    $0xc,%esp
f0127410:	68 00 fc 1f 00       	push   $0x1ffc00
f0127415:	e8 de 0b fe ff       	call   f0107ff8 <kmalloc>
f012741a:	83 c4 10             	add    $0x10,%esp
f012741d:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127423:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0127429:	89 c1                	mov    %eax,%ecx
f012742b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127432:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127437:	0f b6 d0             	movzbl %al,%edx
f012743a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012743d:	01 d0                	add    %edx,%eax
f012743f:	48                   	dec    %eax
f0127440:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127443:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127446:	ba 00 00 00 00       	mov    $0x0,%edx
f012744b:	f7 75 c4             	divl   -0x3c(%ebp)
f012744e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127451:	29 d0                	sub    %edx,%eax
f0127453:	89 c3                	mov    %eax,%ebx
f0127455:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012745c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127461:	0f b6 c0             	movzbl %al,%eax
f0127464:	c1 e0 04             	shl    $0x4,%eax
f0127467:	89 c2                	mov    %eax,%edx
f0127469:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012746c:	01 d0                	add    %edx,%eax
f012746e:	48                   	dec    %eax
f012746f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127472:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127475:	ba 00 00 00 00       	mov    $0x0,%edx
f012747a:	f7 75 bc             	divl   -0x44(%ebp)
f012747d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127480:	29 d0                	sub    %edx,%eax
f0127482:	01 d8                	add    %ebx,%eax
f0127484:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127489:	39 c1                	cmp    %eax,%ecx
f012748b:	74 17                	je     f01274a4 <test_kshrink+0x200>
f012748d:	83 ec 04             	sub    $0x4,%esp
f0127490:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0127495:	68 0a 0c 00 00       	push   $0xc0a
f012749a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012749f:	e8 0c 8d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01274a4:	e8 db d1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01274a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01274ac:	74 17                	je     f01274c5 <test_kshrink+0x221>
f01274ae:	83 ec 04             	sub    $0x4,%esp
f01274b1:	68 ec 9a 13 f0       	push   $0xf0139aec
f01274b6:	68 0b 0c 00 00       	push   $0xc0b
f01274bb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01274c0:	e8 eb 8c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01274c5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01274c8:	e8 95 55 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01274cd:	29 c3                	sub    %eax,%ebx
f01274cf:	89 d8                	mov    %ebx,%eax
f01274d1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01274d6:	74 17                	je     f01274ef <test_kshrink+0x24b>
f01274d8:	83 ec 04             	sub    $0x4,%esp
f01274db:	68 54 9b 13 f0       	push   $0xf0139b54
f01274e0:	68 0c 0c 00 00       	push   $0xc0c
f01274e5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01274ea:	e8 c1 8c fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01274ef:	c7 85 f0 fe ff ff ff 	movl   $0x1ffbff,-0x110(%ebp)
f01274f6:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01274f9:	e8 64 55 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01274fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127501:	e8 7e d1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127506:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127509:	83 ec 0c             	sub    $0xc,%esp
f012750c:	68 00 08 00 00       	push   $0x800
f0127511:	e8 e2 0a fe ff       	call   f0107ff8 <kmalloc>
f0127516:	83 c4 10             	add    $0x10,%esp
f0127519:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012751f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0127525:	89 c1                	mov    %eax,%ecx
f0127527:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012752e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127533:	0f b6 d0             	movzbl %al,%edx
f0127536:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127539:	01 d0                	add    %edx,%eax
f012753b:	48                   	dec    %eax
f012753c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012753f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127542:	ba 00 00 00 00       	mov    $0x0,%edx
f0127547:	f7 75 b4             	divl   -0x4c(%ebp)
f012754a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012754d:	29 d0                	sub    %edx,%eax
f012754f:	89 c3                	mov    %eax,%ebx
f0127551:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127558:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012755d:	0f b6 c0             	movzbl %al,%eax
f0127560:	c1 e0 04             	shl    $0x4,%eax
f0127563:	89 c2                	mov    %eax,%edx
f0127565:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127568:	01 d0                	add    %edx,%eax
f012756a:	48                   	dec    %eax
f012756b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012756e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127571:	ba 00 00 00 00       	mov    $0x0,%edx
f0127576:	f7 75 ac             	divl   -0x54(%ebp)
f0127579:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012757c:	29 d0                	sub    %edx,%eax
f012757e:	01 d8                	add    %ebx,%eax
f0127580:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127585:	39 c1                	cmp    %eax,%ecx
f0127587:	74 17                	je     f01275a0 <test_kshrink+0x2fc>
f0127589:	83 ec 04             	sub    $0x4,%esp
f012758c:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0127591:	68 13 0c 00 00       	push   $0xc13
f0127596:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012759b:	e8 10 8c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01275a0:	e8 df d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01275a5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01275a8:	74 17                	je     f01275c1 <test_kshrink+0x31d>
f01275aa:	83 ec 04             	sub    $0x4,%esp
f01275ad:	68 ec 9a 13 f0       	push   $0xf0139aec
f01275b2:	68 14 0c 00 00       	push   $0xc14
f01275b7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01275bc:	e8 ef 8b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01275c1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01275c4:	e8 99 54 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01275c9:	29 c3                	sub    %eax,%ebx
f01275cb:	89 d8                	mov    %ebx,%eax
f01275cd:	83 f8 01             	cmp    $0x1,%eax
f01275d0:	74 17                	je     f01275e9 <test_kshrink+0x345>
f01275d2:	83 ec 04             	sub    $0x4,%esp
f01275d5:	68 54 9b 13 f0       	push   $0xf0139b54
f01275da:	68 15 0c 00 00       	push   $0xc15
f01275df:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01275e4:	e8 c7 8b fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01275e9:	c7 85 f4 fe ff ff ff 	movl   $0x7ff,-0x10c(%ebp)
f01275f0:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01275f3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01275f9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01275fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127603:	eb 0e                	jmp    f0127613 <test_kshrink+0x36f>
		{
			ptr[i] = 2 ;
f0127605:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127608:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012760b:	01 d0                	add    %edx,%eax
f012760d:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127610:	ff 45 f4             	incl   -0xc(%ebp)
f0127613:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127619:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012761c:	7f e7                	jg     f0127605 <test_kshrink+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012761e:	e8 3f 54 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127623:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127626:	e8 59 d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012762b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012762e:	83 ec 0c             	sub    $0xc,%esp
f0127631:	68 00 08 00 00       	push   $0x800
f0127636:	e8 bd 09 fe ff       	call   f0107ff8 <kmalloc>
f012763b:	83 c4 10             	add    $0x10,%esp
f012763e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127644:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012764a:	89 c1                	mov    %eax,%ecx
f012764c:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0127653:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127658:	0f b6 d0             	movzbl %al,%edx
f012765b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012765e:	01 d0                	add    %edx,%eax
f0127660:	48                   	dec    %eax
f0127661:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0127664:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127667:	ba 00 00 00 00       	mov    $0x0,%edx
f012766c:	f7 75 a0             	divl   -0x60(%ebp)
f012766f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127672:	29 d0                	sub    %edx,%eax
f0127674:	89 c3                	mov    %eax,%ebx
f0127676:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012767d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127682:	0f b6 c0             	movzbl %al,%eax
f0127685:	c1 e0 04             	shl    $0x4,%eax
f0127688:	89 c2                	mov    %eax,%edx
f012768a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012768d:	01 d0                	add    %edx,%eax
f012768f:	48                   	dec    %eax
f0127690:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0127693:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127696:	ba 00 00 00 00       	mov    $0x0,%edx
f012769b:	f7 75 98             	divl   -0x68(%ebp)
f012769e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01276a1:	29 d0                	sub    %edx,%eax
f01276a3:	01 d8                	add    %ebx,%eax
f01276a5:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01276aa:	39 c1                	cmp    %eax,%ecx
f01276ac:	74 17                	je     f01276c5 <test_kshrink+0x421>
f01276ae:	83 ec 04             	sub    $0x4,%esp
f01276b1:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01276b6:	68 21 0c 00 00       	push   $0xc21
f01276bb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01276c0:	e8 eb 8a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276c5:	e8 ba cf fd ff       	call   f0104684 <pf_calculate_free_frames>
f01276ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276cd:	74 17                	je     f01276e6 <test_kshrink+0x442>
f01276cf:	83 ec 04             	sub    $0x4,%esp
f01276d2:	68 ec 9a 13 f0       	push   $0xf0139aec
f01276d7:	68 22 0c 00 00       	push   $0xc22
f01276dc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01276e1:	e8 ca 8a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276e6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276e9:	e8 74 53 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01276ee:	29 c3                	sub    %eax,%ebx
f01276f0:	89 d8                	mov    %ebx,%eax
f01276f2:	83 f8 01             	cmp    $0x1,%eax
f01276f5:	74 17                	je     f012770e <test_kshrink+0x46a>
f01276f7:	83 ec 04             	sub    $0x4,%esp
f01276fa:	68 54 9b 13 f0       	push   $0xf0139b54
f01276ff:	68 23 0c 00 00       	push   $0xc23
f0127704:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127709:	e8 a2 8a fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012770e:	c7 85 f8 fe ff ff ff 	movl   $0x7ff,-0x108(%ebp)
f0127715:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127718:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012771e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127721:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127728:	eb 0e                	jmp    f0127738 <test_kshrink+0x494>
		{
			ptr[i] = 3 ;
f012772a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012772d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127730:	01 d0                	add    %edx,%eax
f0127732:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127735:	ff 45 f4             	incl   -0xc(%ebp)
f0127738:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012773e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127741:	7f e7                	jg     f012772a <test_kshrink+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127743:	e8 1a 53 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127748:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012774b:	e8 34 cf fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127750:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127753:	83 ec 0c             	sub    $0xc,%esp
f0127756:	68 00 1c 00 00       	push   $0x1c00
f012775b:	e8 98 08 fe ff       	call   f0107ff8 <kmalloc>
f0127760:	83 c4 10             	add    $0x10,%esp
f0127763:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127769:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012776f:	89 c1                	mov    %eax,%ecx
f0127771:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0127778:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012777d:	0f b6 d0             	movzbl %al,%edx
f0127780:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127783:	01 d0                	add    %edx,%eax
f0127785:	48                   	dec    %eax
f0127786:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0127789:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012778c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127791:	f7 75 90             	divl   -0x70(%ebp)
f0127794:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127797:	29 d0                	sub    %edx,%eax
f0127799:	89 c3                	mov    %eax,%ebx
f012779b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01277a2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01277a7:	0f b6 c0             	movzbl %al,%eax
f01277aa:	c1 e0 04             	shl    $0x4,%eax
f01277ad:	89 c2                	mov    %eax,%edx
f01277af:	8b 45 88             	mov    -0x78(%ebp),%eax
f01277b2:	01 d0                	add    %edx,%eax
f01277b4:	48                   	dec    %eax
f01277b5:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01277b8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01277bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01277c0:	f7 75 88             	divl   -0x78(%ebp)
f01277c3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01277c6:	29 d0                	sub    %edx,%eax
f01277c8:	01 d8                	add    %ebx,%eax
f01277ca:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01277cf:	39 c1                	cmp    %eax,%ecx
f01277d1:	74 17                	je     f01277ea <test_kshrink+0x546>
f01277d3:	83 ec 04             	sub    $0x4,%esp
f01277d6:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01277db:	68 2f 0c 00 00       	push   $0xc2f
f01277e0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01277e5:	e8 c6 89 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01277ea:	e8 95 ce fd ff       	call   f0104684 <pf_calculate_free_frames>
f01277ef:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01277f2:	74 17                	je     f012780b <test_kshrink+0x567>
f01277f4:	83 ec 04             	sub    $0x4,%esp
f01277f7:	68 ec 9a 13 f0       	push   $0xf0139aec
f01277fc:	68 30 0c 00 00       	push   $0xc30
f0127801:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127806:	e8 a5 89 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012780b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012780e:	e8 4f 52 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127813:	29 c3                	sub    %eax,%ebx
f0127815:	89 d8                	mov    %ebx,%eax
f0127817:	83 f8 02             	cmp    $0x2,%eax
f012781a:	74 17                	je     f0127833 <test_kshrink+0x58f>
f012781c:	83 ec 04             	sub    $0x4,%esp
f012781f:	68 54 9b 13 f0       	push   $0xf0139b54
f0127824:	68 31 0c 00 00       	push   $0xc31
f0127829:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012782e:	e8 7d 89 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127833:	c7 85 fc fe ff ff ff 	movl   $0x1bff,-0x104(%ebp)
f012783a:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012783d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127843:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012784d:	eb 0e                	jmp    f012785d <test_kshrink+0x5b9>
		{
			ptr[i] = 4 ;
f012784f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127852:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127855:	01 d0                	add    %edx,%eax
f0127857:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012785a:	ff 45 f4             	incl   -0xc(%ebp)
f012785d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127863:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127866:	7f e7                	jg     f012784f <test_kshrink+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127868:	e8 f5 51 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012786d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127870:	e8 0f ce fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127875:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127878:	83 ec 0c             	sub    $0xc,%esp
f012787b:	68 00 fc 2f 00       	push   $0x2ffc00
f0127880:	e8 73 07 fe ff       	call   f0107ff8 <kmalloc>
f0127885:	83 c4 10             	add    $0x10,%esp
f0127888:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012788e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127894:	89 c1                	mov    %eax,%ecx
f0127896:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012789d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01278a2:	0f b6 d0             	movzbl %al,%edx
f01278a5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01278a8:	01 d0                	add    %edx,%eax
f01278aa:	48                   	dec    %eax
f01278ab:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01278b1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01278b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01278bc:	f7 75 80             	divl   -0x80(%ebp)
f01278bf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01278c5:	29 d0                	sub    %edx,%eax
f01278c7:	89 c3                	mov    %eax,%ebx
f01278c9:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01278d0:	10 00 00 
f01278d3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01278d8:	0f b6 c0             	movzbl %al,%eax
f01278db:	c1 e0 04             	shl    $0x4,%eax
f01278de:	89 c2                	mov    %eax,%edx
f01278e0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01278e6:	01 d0                	add    %edx,%eax
f01278e8:	48                   	dec    %eax
f01278e9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01278ef:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01278f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01278fa:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127900:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127906:	29 d0                	sub    %edx,%eax
f0127908:	01 d8                	add    %ebx,%eax
f012790a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012790f:	39 c1                	cmp    %eax,%ecx
f0127911:	74 17                	je     f012792a <test_kshrink+0x686>
f0127913:	83 ec 04             	sub    $0x4,%esp
f0127916:	68 b8 9b 13 f0       	push   $0xf0139bb8
f012791b:	68 3d 0c 00 00       	push   $0xc3d
f0127920:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127925:	e8 86 88 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012792a:	e8 55 cd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012792f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127932:	74 17                	je     f012794b <test_kshrink+0x6a7>
f0127934:	83 ec 04             	sub    $0x4,%esp
f0127937:	68 ec 9a 13 f0       	push   $0xf0139aec
f012793c:	68 3e 0c 00 00       	push   $0xc3e
f0127941:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127946:	e8 65 88 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012794b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012794e:	e8 0f 51 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127953:	29 c3                	sub    %eax,%ebx
f0127955:	89 d8                	mov    %ebx,%eax
f0127957:	3d 00 03 00 00       	cmp    $0x300,%eax
f012795c:	74 17                	je     f0127975 <test_kshrink+0x6d1>
f012795e:	83 ec 04             	sub    $0x4,%esp
f0127961:	68 54 9b 13 f0       	push   $0xf0139b54
f0127966:	68 3f 0c 00 00       	push   $0xc3f
f012796b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127970:	e8 3b 88 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127975:	c7 85 00 ff ff ff ff 	movl   $0x2ffbff,-0x100(%ebp)
f012797c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012797f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127985:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127988:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012798f:	eb 0e                	jmp    f012799f <test_kshrink+0x6fb>
		{
			ptr[i] = 5 ;
f0127991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127994:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127997:	01 d0                	add    %edx,%eax
f0127999:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012799c:	ff 45 f4             	incl   -0xc(%ebp)
f012799f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01279a5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01279a8:	7f e7                	jg     f0127991 <test_kshrink+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01279aa:	e8 b3 50 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01279af:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279b2:	e8 cd cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01279b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01279ba:	83 ec 0c             	sub    $0xc,%esp
f01279bd:	68 00 00 60 00       	push   $0x600000
f01279c2:	e8 31 06 fe ff       	call   f0107ff8 <kmalloc>
f01279c7:	83 c4 10             	add    $0x10,%esp
f01279ca:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01279d0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01279d6:	89 c1                	mov    %eax,%ecx
f01279d8:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01279df:	10 00 00 
f01279e2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01279e7:	0f b6 d0             	movzbl %al,%edx
f01279ea:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01279f0:	01 d0                	add    %edx,%eax
f01279f2:	48                   	dec    %eax
f01279f3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01279f9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01279ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a04:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127a0a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127a10:	29 d0                	sub    %edx,%eax
f0127a12:	89 c3                	mov    %eax,%ebx
f0127a14:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127a1b:	10 00 00 
f0127a1e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127a23:	0f b6 c0             	movzbl %al,%eax
f0127a26:	c1 e0 04             	shl    $0x4,%eax
f0127a29:	89 c2                	mov    %eax,%edx
f0127a2b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127a31:	01 d0                	add    %edx,%eax
f0127a33:	48                   	dec    %eax
f0127a34:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127a3a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127a40:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a45:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127a4b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127a51:	29 d0                	sub    %edx,%eax
f0127a53:	01 d8                	add    %ebx,%eax
f0127a55:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127a5a:	39 c1                	cmp    %eax,%ecx
f0127a5c:	74 17                	je     f0127a75 <test_kshrink+0x7d1>
f0127a5e:	83 ec 04             	sub    $0x4,%esp
f0127a61:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0127a66:	68 4b 0c 00 00       	push   $0xc4b
f0127a6b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127a70:	e8 3b 87 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a75:	e8 0a cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127a7a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127a7d:	74 17                	je     f0127a96 <test_kshrink+0x7f2>
f0127a7f:	83 ec 04             	sub    $0x4,%esp
f0127a82:	68 ec 9a 13 f0       	push   $0xf0139aec
f0127a87:	68 4c 0c 00 00       	push   $0xc4c
f0127a8c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127a91:	e8 1a 87 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127a96:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127a99:	e8 c4 4f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127a9e:	29 c3                	sub    %eax,%ebx
f0127aa0:	89 d8                	mov    %ebx,%eax
f0127aa2:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127aa7:	74 17                	je     f0127ac0 <test_kshrink+0x81c>
f0127aa9:	83 ec 04             	sub    $0x4,%esp
f0127aac:	68 54 9b 13 f0       	push   $0xf0139b54
f0127ab1:	68 4d 0c 00 00       	push   $0xc4d
f0127ab6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127abb:	e8 f0 86 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127ac0:	c7 85 04 ff ff ff ff 	movl   $0x17ffff,-0xfc(%ebp)
f0127ac7:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127aca:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127ad0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127ad6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127add:	eb 1a                	jmp    f0127af9 <test_kshrink+0x855>
		{
			arr[i] = i ;
f0127adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127ae2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127ae9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127aef:	01 c2                	add    %eax,%edx
f0127af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127af4:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127af6:	ff 45 f4             	incl   -0xc(%ebp)
f0127af9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127aff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b02:	7d db                	jge    f0127adf <test_kshrink+0x83b>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127b04:	e8 59 4f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127b09:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b0c:	e8 73 cb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127b11:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0127b14:	83 ec 0c             	sub    $0xc,%esp
f0127b17:	68 00 00 50 00       	push   $0x500000
f0127b1c:	e8 59 05 fe ff       	call   f010807a <kshrink>
f0127b21:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127b24:	e8 5b cb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127b29:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b2c:	74 19                	je     f0127b47 <test_kshrink+0x8a3>
f0127b2e:	68 6c a8 13 f0       	push   $0xf013a86c
f0127b33:	68 9d a8 13 f0       	push   $0xf013a89d
f0127b38:	68 5d 0c 00 00       	push   $0xc5d
f0127b3d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127b42:	e8 69 86 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0127b47:	e8 16 4f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127b4c:	89 c2                	mov    %eax,%edx
f0127b4e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127b51:	29 c2                	sub    %eax,%edx
f0127b53:	89 d0                	mov    %edx,%eax
f0127b55:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127b5a:	74 19                	je     f0127b75 <test_kshrink+0x8d1>
f0127b5c:	68 78 a9 13 f0       	push   $0xf013a978
f0127b61:	68 9d a8 13 f0       	push   $0xf013a89d
f0127b66:	68 5e 0c 00 00       	push   $0xc5e
f0127b6b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127b70:	e8 3b 86 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0127b75:	c7 85 5c ff ff ff ff 	movl   $0x13ffff,-0xa4(%ebp)
f0127b7c:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127b7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b86:	eb 37                	jmp    f0127bbf <test_kshrink+0x91b>
		{
			assert(arr[i] == i);
f0127b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127b8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127b92:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127b98:	01 d0                	add    %edx,%eax
f0127b9a:	8b 10                	mov    (%eax),%edx
f0127b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127b9f:	39 c2                	cmp    %eax,%edx
f0127ba1:	74 19                	je     f0127bbc <test_kshrink+0x918>
f0127ba3:	68 a8 a9 13 f0       	push   $0xf013a9a8
f0127ba8:	68 9d a8 13 f0       	push   $0xf013a89d
f0127bad:	68 66 0c 00 00       	push   $0xc66
f0127bb2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127bb7:	e8 f4 85 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127bbc:	ff 45 f4             	incl   -0xc(%ebp)
f0127bbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127bc2:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0127bc8:	7e be                	jle    f0127b88 <test_kshrink+0x8e4>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127bca:	83 ec 0c             	sub    $0xc,%esp
f0127bcd:	6a 03                	push   $0x3
f0127bcf:	e8 29 53 fe ff       	call   f010cefd <sys_bypassPageFault>
f0127bd4:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0127bd7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127bdd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr[5*Mega] = 10;
f0127be0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127be3:	05 00 00 50 00       	add    $0x500000,%eax
f0127be8:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0127beb:	e8 fb 52 fe ff       	call   f010ceeb <sys_rcr2>
f0127bf0:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127bf3:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0127bf9:	39 d0                	cmp    %edx,%eax
f0127bfb:	74 19                	je     f0127c16 <test_kshrink+0x972>
f0127bfd:	68 b4 a9 13 f0       	push   $0xf013a9b4
f0127c02:	68 9d a8 13 f0       	push   $0xf013a89d
f0127c07:	68 6f 0c 00 00       	push   $0xc6f
f0127c0c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127c11:	e8 9a 85 fd ff       	call   f01001b0 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0127c16:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127c19:	05 00 10 50 00       	add    $0x501000,%eax
f0127c1e:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0127c21:	e8 c5 52 fe ff       	call   f010ceeb <sys_rcr2>
f0127c26:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127c29:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0127c2f:	39 d0                	cmp    %edx,%eax
f0127c31:	74 19                	je     f0127c4c <test_kshrink+0x9a8>
f0127c33:	68 dc a9 13 f0       	push   $0xf013a9dc
f0127c38:	68 9d a8 13 f0       	push   $0xf013a89d
f0127c3d:	68 72 0c 00 00       	push   $0xc72
f0127c42:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127c47:	e8 64 85 fd ff       	call   f01001b0 <_panic>

		ptr[6*Mega - kilo] = 10;
f0127c4c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127c4f:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0127c54:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0127c57:	e8 8f 52 fe ff       	call   f010ceeb <sys_rcr2>
f0127c5c:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127c5f:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0127c65:	39 d0                	cmp    %edx,%eax
f0127c67:	74 19                	je     f0127c82 <test_kshrink+0x9de>
f0127c69:	68 08 aa 13 f0       	push   $0xf013aa08
f0127c6e:	68 9d a8 13 f0       	push   $0xf013a89d
f0127c73:	68 75 0c 00 00       	push   $0xc75
f0127c78:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127c7d:	e8 2e 85 fd ff       	call   f01001b0 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127c82:	83 ec 0c             	sub    $0xc,%esp
f0127c85:	6a 00                	push   $0x0
f0127c87:	e8 71 52 fe ff       	call   f010cefd <sys_bypassPageFault>
f0127c8c:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127c8f:	e8 ce 4d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127c94:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c97:	e8 e8 c9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c9c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0127c9f:	83 ec 0c             	sub    $0xc,%esp
f0127ca2:	68 00 00 20 00       	push   $0x200000
f0127ca7:	e8 ce 03 fe ff       	call   f010807a <kshrink>
f0127cac:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127caf:	e8 d0 c9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127cb4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127cb7:	74 19                	je     f0127cd2 <test_kshrink+0xa2e>
f0127cb9:	68 6c a8 13 f0       	push   $0xf013a86c
f0127cbe:	68 9d a8 13 f0       	push   $0xf013a89d
f0127cc3:	68 82 0c 00 00       	push   $0xc82
f0127cc8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127ccd:	e8 de 84 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0127cd2:	e8 8b 4d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127cd7:	89 c2                	mov    %eax,%edx
f0127cd9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127cdc:	29 c2                	sub    %eax,%edx
f0127cde:	89 d0                	mov    %edx,%eax
f0127ce0:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127ce5:	74 19                	je     f0127d00 <test_kshrink+0xa5c>
f0127ce7:	68 34 aa 13 f0       	push   $0xf013aa34
f0127cec:	68 9d a8 13 f0       	push   $0xf013a89d
f0127cf1:	68 83 0c 00 00       	push   $0xc83
f0127cf6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127cfb:	e8 b0 84 fd ff       	call   f01001b0 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d00:	e8 5d 4d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127d05:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d08:	e8 77 c9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127d0d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127d10:	83 ec 0c             	sub    $0xc,%esp
f0127d13:	68 00 00 40 00       	push   $0x400000
f0127d18:	e8 db 02 fe ff       	call   f0107ff8 <kmalloc>
f0127d1d:	83 c4 10             	add    $0x10,%esp
f0127d20:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0127d26:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127d2d:	10 00 00 
f0127d30:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127d35:	0f b6 d0             	movzbl %al,%edx
f0127d38:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127d3e:	01 d0                	add    %edx,%eax
f0127d40:	48                   	dec    %eax
f0127d41:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127d47:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127d4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d52:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127d58:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127d5e:	29 d0                	sub    %edx,%eax
f0127d60:	89 c1                	mov    %eax,%ecx
f0127d62:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127d69:	10 00 00 
f0127d6c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127d71:	0f b6 c0             	movzbl %al,%eax
f0127d74:	c1 e0 04             	shl    $0x4,%eax
f0127d77:	89 c2                	mov    %eax,%edx
f0127d79:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127d7f:	01 d0                	add    %edx,%eax
f0127d81:	48                   	dec    %eax
f0127d82:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127d88:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127d8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d93:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127d99:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127d9f:	29 d0                	sub    %edx,%eax
f0127da1:	01 c8                	add    %ecx,%eax
f0127da3:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0127da9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127daf:	83 ec 04             	sub    $0x4,%esp
f0127db2:	52                   	push   %edx
f0127db3:	50                   	push   %eax
f0127db4:	68 64 aa 13 f0       	push   $0xf013aa64
f0127db9:	e8 73 90 fd ff       	call   f0100e31 <cprintf>
f0127dbe:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0127dc1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127dc7:	89 c1                	mov    %eax,%ecx
f0127dc9:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127dd0:	10 00 00 
f0127dd3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127dd8:	0f b6 d0             	movzbl %al,%edx
f0127ddb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127de1:	01 d0                	add    %edx,%eax
f0127de3:	48                   	dec    %eax
f0127de4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127dea:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127df0:	ba 00 00 00 00       	mov    $0x0,%edx
f0127df5:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127dfb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127e01:	29 d0                	sub    %edx,%eax
f0127e03:	89 c3                	mov    %eax,%ebx
f0127e05:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127e0c:	10 00 00 
f0127e0f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127e14:	0f b6 c0             	movzbl %al,%eax
f0127e17:	c1 e0 04             	shl    $0x4,%eax
f0127e1a:	89 c2                	mov    %eax,%edx
f0127e1c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127e22:	01 d0                	add    %edx,%eax
f0127e24:	48                   	dec    %eax
f0127e25:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127e2b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127e31:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e36:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127e3c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127e42:	29 d0                	sub    %edx,%eax
f0127e44:	01 d8                	add    %ebx,%eax
f0127e46:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0127e4b:	39 c1                	cmp    %eax,%ecx
f0127e4d:	74 17                	je     f0127e66 <test_kshrink+0xbc2>
f0127e4f:	83 ec 04             	sub    $0x4,%esp
f0127e52:	68 80 aa 13 f0       	push   $0xf013aa80
f0127e57:	68 8e 0c 00 00       	push   $0xc8e
f0127e5c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127e61:	e8 4a 83 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e66:	e8 19 c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127e6b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127e6e:	74 17                	je     f0127e87 <test_kshrink+0xbe3>
f0127e70:	83 ec 04             	sub    $0x4,%esp
f0127e73:	68 ec 9a 13 f0       	push   $0xf0139aec
f0127e78:	68 8f 0c 00 00       	push   $0xc8f
f0127e7d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127e82:	e8 29 83 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e87:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127e8a:	e8 d3 4b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127e8f:	29 c3                	sub    %eax,%ebx
f0127e91:	89 d8                	mov    %ebx,%eax
f0127e93:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127e98:	74 17                	je     f0127eb1 <test_kshrink+0xc0d>
f0127e9a:	83 ec 04             	sub    $0x4,%esp
f0127e9d:	68 54 9b 13 f0       	push   $0xf0139b54
f0127ea2:	68 90 0c 00 00       	push   $0xc90
f0127ea7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127eac:	e8 ff 82 fd ff       	call   f01001b0 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0127eb1:	e8 ac 4b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127eb6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127eb9:	e8 c6 c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127ec1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127ec7:	83 ec 0c             	sub    $0xc,%esp
f0127eca:	50                   	push   %eax
f0127ecb:	e8 42 01 fe ff       	call   f0108012 <kfree>
f0127ed0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ed3:	e8 ac c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127ed8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127edb:	74 17                	je     f0127ef4 <test_kshrink+0xc50>
f0127edd:	83 ec 04             	sub    $0x4,%esp
f0127ee0:	68 ec 9a 13 f0       	push   $0xf0139aec
f0127ee5:	68 9a 0c 00 00       	push   $0xc9a
f0127eea:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127eef:	e8 bc 82 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127ef4:	e8 69 4b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127ef9:	89 c2                	mov    %eax,%edx
f0127efb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127efe:	29 c2                	sub    %eax,%edx
f0127f00:	89 d0                	mov    %edx,%eax
f0127f02:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127f07:	74 17                	je     f0127f20 <test_kshrink+0xc7c>
f0127f09:	83 ec 04             	sub    $0x4,%esp
f0127f0c:	68 84 a3 13 f0       	push   $0xf013a384
f0127f11:	68 9b 0c 00 00       	push   $0xc9b
f0127f16:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127f1b:	e8 90 82 fd ff       	call   f01001b0 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127f20:	e8 3d 4b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127f25:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f28:	e8 57 c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127f2d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0127f30:	83 ec 0c             	sub    $0xc,%esp
f0127f33:	68 00 b0 3f 00       	push   $0x3fb000
f0127f38:	e8 3d 01 fe ff       	call   f010807a <kshrink>
f0127f3d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127f40:	e8 3f c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127f45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f48:	74 19                	je     f0127f63 <test_kshrink+0xcbf>
f0127f4a:	68 6c a8 13 f0       	push   $0xf013a86c
f0127f4f:	68 9d a8 13 f0       	push   $0xf013a89d
f0127f54:	68 a5 0c 00 00       	push   $0xca5
f0127f59:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127f5e:	e8 4d 82 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0127f63:	e8 fa 4a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127f68:	89 c2                	mov    %eax,%edx
f0127f6a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127f6d:	29 c2                	sub    %eax,%edx
f0127f6f:	89 d0                	mov    %edx,%eax
f0127f71:	83 f8 05             	cmp    $0x5,%eax
f0127f74:	74 19                	je     f0127f8f <test_kshrink+0xceb>
f0127f76:	68 d4 aa 13 f0       	push   $0xf013aad4
f0127f7b:	68 9d a8 13 f0       	push   $0xf013a89d
f0127f80:	68 a6 0c 00 00       	push   $0xca6
f0127f85:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0127f8a:	e8 21 82 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127f8f:	83 ec 0c             	sub    $0xc,%esp
f0127f92:	68 30 a8 13 f0       	push   $0xf013a830
f0127f97:	e8 95 8e fd ff       	call   f0100e31 <cprintf>
f0127f9c:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127f9f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127fa4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127fa7:	5b                   	pop    %ebx
f0127fa8:	5f                   	pop    %edi
f0127fa9:	5d                   	pop    %ebp
f0127faa:	c3                   	ret    

f0127fab <test_kfreelast>:


int test_kfreelast()
{
f0127fab:	55                   	push   %ebp
f0127fac:	89 e5                	mov    %esp,%ebp
f0127fae:	57                   	push   %edi
f0127faf:	53                   	push   %ebx
f0127fb0:	81 ec 20 02 00 00    	sub    $0x220,%esp
	char minByte = 1<<7;
f0127fb6:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0127fba:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0127fbe:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0127fc4:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0127fca:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127fd1:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127fd8:	e8 85 4a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0127fdd:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127fe0:	8d 95 84 fe ff ff    	lea    -0x17c(%ebp),%edx
f0127fe6:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127feb:	b8 00 00 00 00       	mov    $0x0,%eax
f0127ff0:	89 d7                	mov    %edx,%edi
f0127ff2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0127ff4:	8d 95 34 fe ff ff    	lea    -0x1cc(%ebp),%edx
f0127ffa:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127fff:	b8 00 00 00 00       	mov    $0x0,%eax
f0128004:	89 d7                	mov    %edx,%edi
f0128006:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0128008:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f012800e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128013:	b8 00 00 00 00       	mov    $0x0,%eax
f0128018:	89 d7                	mov    %edx,%edi
f012801a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012801c:	e8 41 4a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128021:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128024:	e8 5b c6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128029:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012802c:	83 ec 0c             	sub    $0xc,%esp
f012802f:	68 00 fc 1f 00       	push   $0x1ffc00
f0128034:	e8 bf ff fd ff       	call   f0107ff8 <kmalloc>
f0128039:	83 c4 10             	add    $0x10,%esp
f012803c:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128042:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0128048:	89 c1                	mov    %eax,%ecx
f012804a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128051:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128056:	0f b6 d0             	movzbl %al,%edx
f0128059:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012805c:	01 d0                	add    %edx,%eax
f012805e:	48                   	dec    %eax
f012805f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128062:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128065:	ba 00 00 00 00       	mov    $0x0,%edx
f012806a:	f7 75 cc             	divl   -0x34(%ebp)
f012806d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128070:	29 d0                	sub    %edx,%eax
f0128072:	89 c3                	mov    %eax,%ebx
f0128074:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012807b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128080:	0f b6 c0             	movzbl %al,%eax
f0128083:	c1 e0 04             	shl    $0x4,%eax
f0128086:	89 c2                	mov    %eax,%edx
f0128088:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012808b:	01 d0                	add    %edx,%eax
f012808d:	48                   	dec    %eax
f012808e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128091:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128094:	ba 00 00 00 00       	mov    $0x0,%edx
f0128099:	f7 75 c4             	divl   -0x3c(%ebp)
f012809c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012809f:	29 d0                	sub    %edx,%eax
f01280a1:	01 d8                	add    %ebx,%eax
f01280a3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01280a8:	39 c1                	cmp    %eax,%ecx
f01280aa:	74 17                	je     f01280c3 <test_kfreelast+0x118>
f01280ac:	83 ec 04             	sub    $0x4,%esp
f01280af:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01280b4:	68 ca 0c 00 00       	push   $0xcca
f01280b9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01280be:	e8 ed 80 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280c3:	e8 bc c5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01280c8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01280cb:	74 17                	je     f01280e4 <test_kfreelast+0x139>
f01280cd:	83 ec 04             	sub    $0x4,%esp
f01280d0:	68 ec 9a 13 f0       	push   $0xf0139aec
f01280d5:	68 cb 0c 00 00       	push   $0xccb
f01280da:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01280df:	e8 cc 80 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01280e4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01280e7:	e8 76 49 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01280ec:	29 c3                	sub    %eax,%ebx
f01280ee:	89 d8                	mov    %ebx,%eax
f01280f0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01280f5:	74 17                	je     f012810e <test_kfreelast+0x163>
f01280f7:	83 ec 04             	sub    $0x4,%esp
f01280fa:	68 54 9b 13 f0       	push   $0xf0139b54
f01280ff:	68 cc 0c 00 00       	push   $0xccc
f0128104:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128109:	e8 a2 80 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012810e:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f0128115:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128118:	e8 45 49 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012811d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128120:	e8 5f c5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128125:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128128:	83 ec 0c             	sub    $0xc,%esp
f012812b:	68 00 fc 1f 00       	push   $0x1ffc00
f0128130:	e8 c3 fe fd ff       	call   f0107ff8 <kmalloc>
f0128135:	83 c4 10             	add    $0x10,%esp
f0128138:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012813e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0128144:	89 c1                	mov    %eax,%ecx
f0128146:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012814d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128152:	0f b6 d0             	movzbl %al,%edx
f0128155:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128158:	01 d0                	add    %edx,%eax
f012815a:	48                   	dec    %eax
f012815b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012815e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128161:	ba 00 00 00 00       	mov    $0x0,%edx
f0128166:	f7 75 bc             	divl   -0x44(%ebp)
f0128169:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012816c:	29 d0                	sub    %edx,%eax
f012816e:	89 c3                	mov    %eax,%ebx
f0128170:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128177:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012817c:	0f b6 c0             	movzbl %al,%eax
f012817f:	c1 e0 04             	shl    $0x4,%eax
f0128182:	89 c2                	mov    %eax,%edx
f0128184:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128187:	01 d0                	add    %edx,%eax
f0128189:	48                   	dec    %eax
f012818a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012818d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128190:	ba 00 00 00 00       	mov    $0x0,%edx
f0128195:	f7 75 b4             	divl   -0x4c(%ebp)
f0128198:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012819b:	29 d0                	sub    %edx,%eax
f012819d:	01 d8                	add    %ebx,%eax
f012819f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01281a4:	39 c1                	cmp    %eax,%ecx
f01281a6:	74 17                	je     f01281bf <test_kfreelast+0x214>
f01281a8:	83 ec 04             	sub    $0x4,%esp
f01281ab:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01281b0:	68 d3 0c 00 00       	push   $0xcd3
f01281b5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01281ba:	e8 f1 7f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01281bf:	e8 c0 c4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01281c4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01281c7:	74 17                	je     f01281e0 <test_kfreelast+0x235>
f01281c9:	83 ec 04             	sub    $0x4,%esp
f01281cc:	68 ec 9a 13 f0       	push   $0xf0139aec
f01281d1:	68 d4 0c 00 00       	push   $0xcd4
f01281d6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01281db:	e8 d0 7f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01281e0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01281e3:	e8 7a 48 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01281e8:	29 c3                	sub    %eax,%ebx
f01281ea:	89 d8                	mov    %ebx,%eax
f01281ec:	3d 00 02 00 00       	cmp    $0x200,%eax
f01281f1:	74 17                	je     f012820a <test_kfreelast+0x25f>
f01281f3:	83 ec 04             	sub    $0x4,%esp
f01281f6:	68 54 9b 13 f0       	push   $0xf0139b54
f01281fb:	68 d5 0c 00 00       	push   $0xcd5
f0128200:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128205:	e8 a6 7f fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012820a:	c7 85 88 fe ff ff ff 	movl   $0x1ffbff,-0x178(%ebp)
f0128211:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128214:	e8 49 48 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128219:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012821c:	e8 63 c4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128221:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128224:	83 ec 0c             	sub    $0xc,%esp
f0128227:	68 00 08 00 00       	push   $0x800
f012822c:	e8 c7 fd fd ff       	call   f0107ff8 <kmalloc>
f0128231:	83 c4 10             	add    $0x10,%esp
f0128234:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012823a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128240:	89 c1                	mov    %eax,%ecx
f0128242:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128249:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012824e:	0f b6 d0             	movzbl %al,%edx
f0128251:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128254:	01 d0                	add    %edx,%eax
f0128256:	48                   	dec    %eax
f0128257:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012825a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012825d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128262:	f7 75 ac             	divl   -0x54(%ebp)
f0128265:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128268:	29 d0                	sub    %edx,%eax
f012826a:	89 c3                	mov    %eax,%ebx
f012826c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128273:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128278:	0f b6 c0             	movzbl %al,%eax
f012827b:	c1 e0 04             	shl    $0x4,%eax
f012827e:	89 c2                	mov    %eax,%edx
f0128280:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128283:	01 d0                	add    %edx,%eax
f0128285:	48                   	dec    %eax
f0128286:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128289:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012828c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128291:	f7 75 a4             	divl   -0x5c(%ebp)
f0128294:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128297:	29 d0                	sub    %edx,%eax
f0128299:	01 d8                	add    %ebx,%eax
f012829b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01282a0:	39 c1                	cmp    %eax,%ecx
f01282a2:	74 17                	je     f01282bb <test_kfreelast+0x310>
f01282a4:	83 ec 04             	sub    $0x4,%esp
f01282a7:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01282ac:	68 dc 0c 00 00       	push   $0xcdc
f01282b1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01282b6:	e8 f5 7e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282bb:	e8 c4 c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01282c0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01282c3:	74 17                	je     f01282dc <test_kfreelast+0x331>
f01282c5:	83 ec 04             	sub    $0x4,%esp
f01282c8:	68 ec 9a 13 f0       	push   $0xf0139aec
f01282cd:	68 dd 0c 00 00       	push   $0xcdd
f01282d2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01282d7:	e8 d4 7e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01282dc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01282df:	e8 7e 47 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01282e4:	29 c3                	sub    %eax,%ebx
f01282e6:	89 d8                	mov    %ebx,%eax
f01282e8:	83 f8 01             	cmp    $0x1,%eax
f01282eb:	74 17                	je     f0128304 <test_kfreelast+0x359>
f01282ed:	83 ec 04             	sub    $0x4,%esp
f01282f0:	68 54 9b 13 f0       	push   $0xf0139b54
f01282f5:	68 de 0c 00 00       	push   $0xcde
f01282fa:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01282ff:	e8 ac 7e fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128304:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f012830b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012830e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128314:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128317:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012831e:	eb 0e                	jmp    f012832e <test_kfreelast+0x383>
		{
			ptr[i] = 2 ;
f0128320:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128323:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128326:	01 d0                	add    %edx,%eax
f0128328:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012832b:	ff 45 f4             	incl   -0xc(%ebp)
f012832e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128334:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128337:	7f e7                	jg     f0128320 <test_kfreelast+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128339:	e8 24 47 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012833e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128341:	e8 3e c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128346:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128349:	83 ec 0c             	sub    $0xc,%esp
f012834c:	68 00 08 00 00       	push   $0x800
f0128351:	e8 a2 fc fd ff       	call   f0107ff8 <kmalloc>
f0128356:	83 c4 10             	add    $0x10,%esp
f0128359:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012835f:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0128365:	89 c1                	mov    %eax,%ecx
f0128367:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012836e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128373:	0f b6 d0             	movzbl %al,%edx
f0128376:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128379:	01 d0                	add    %edx,%eax
f012837b:	48                   	dec    %eax
f012837c:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012837f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128382:	ba 00 00 00 00       	mov    $0x0,%edx
f0128387:	f7 75 98             	divl   -0x68(%ebp)
f012838a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012838d:	29 d0                	sub    %edx,%eax
f012838f:	89 c3                	mov    %eax,%ebx
f0128391:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0128398:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012839d:	0f b6 c0             	movzbl %al,%eax
f01283a0:	c1 e0 04             	shl    $0x4,%eax
f01283a3:	89 c2                	mov    %eax,%edx
f01283a5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01283a8:	01 d0                	add    %edx,%eax
f01283aa:	48                   	dec    %eax
f01283ab:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01283ae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01283b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01283b6:	f7 75 90             	divl   -0x70(%ebp)
f01283b9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01283bc:	29 d0                	sub    %edx,%eax
f01283be:	01 d8                	add    %ebx,%eax
f01283c0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01283c5:	39 c1                	cmp    %eax,%ecx
f01283c7:	74 17                	je     f01283e0 <test_kfreelast+0x435>
f01283c9:	83 ec 04             	sub    $0x4,%esp
f01283cc:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01283d1:	68 ea 0c 00 00       	push   $0xcea
f01283d6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01283db:	e8 d0 7d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01283e0:	e8 9f c2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01283e5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01283e8:	74 17                	je     f0128401 <test_kfreelast+0x456>
f01283ea:	83 ec 04             	sub    $0x4,%esp
f01283ed:	68 ec 9a 13 f0       	push   $0xf0139aec
f01283f2:	68 eb 0c 00 00       	push   $0xceb
f01283f7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01283fc:	e8 af 7d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128401:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128404:	e8 59 46 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128409:	29 c3                	sub    %eax,%ebx
f012840b:	89 d8                	mov    %ebx,%eax
f012840d:	83 f8 01             	cmp    $0x1,%eax
f0128410:	74 17                	je     f0128429 <test_kfreelast+0x47e>
f0128412:	83 ec 04             	sub    $0x4,%esp
f0128415:	68 54 9b 13 f0       	push   $0xf0139b54
f012841a:	68 ec 0c 00 00       	push   $0xcec
f012841f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128424:	e8 87 7d fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128429:	c7 85 90 fe ff ff ff 	movl   $0x7ff,-0x170(%ebp)
f0128430:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128433:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0128439:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012843c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128443:	eb 0e                	jmp    f0128453 <test_kfreelast+0x4a8>
		{
			ptr[i] = 3 ;
f0128445:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128448:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012844b:	01 d0                	add    %edx,%eax
f012844d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128450:	ff 45 f4             	incl   -0xc(%ebp)
f0128453:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128459:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012845c:	7f e7                	jg     f0128445 <test_kfreelast+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012845e:	e8 ff 45 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128463:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128466:	e8 19 c2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012846b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012846e:	83 ec 0c             	sub    $0xc,%esp
f0128471:	68 00 1c 00 00       	push   $0x1c00
f0128476:	e8 7d fb fd ff       	call   f0107ff8 <kmalloc>
f012847b:	83 c4 10             	add    $0x10,%esp
f012847e:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128484:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012848a:	89 c1                	mov    %eax,%ecx
f012848c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128493:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128498:	0f b6 d0             	movzbl %al,%edx
f012849b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012849e:	01 d0                	add    %edx,%eax
f01284a0:	48                   	dec    %eax
f01284a1:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01284a4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01284a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01284ac:	f7 75 88             	divl   -0x78(%ebp)
f01284af:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01284b2:	29 d0                	sub    %edx,%eax
f01284b4:	89 c3                	mov    %eax,%ebx
f01284b6:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01284bd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01284c2:	0f b6 c0             	movzbl %al,%eax
f01284c5:	c1 e0 04             	shl    $0x4,%eax
f01284c8:	89 c2                	mov    %eax,%edx
f01284ca:	8b 45 80             	mov    -0x80(%ebp),%eax
f01284cd:	01 d0                	add    %edx,%eax
f01284cf:	48                   	dec    %eax
f01284d0:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01284d6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01284dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01284e1:	f7 75 80             	divl   -0x80(%ebp)
f01284e4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01284ea:	29 d0                	sub    %edx,%eax
f01284ec:	01 d8                	add    %ebx,%eax
f01284ee:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01284f3:	39 c1                	cmp    %eax,%ecx
f01284f5:	74 17                	je     f012850e <test_kfreelast+0x563>
f01284f7:	83 ec 04             	sub    $0x4,%esp
f01284fa:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01284ff:	68 f8 0c 00 00       	push   $0xcf8
f0128504:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128509:	e8 a2 7c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012850e:	e8 71 c1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128513:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128516:	74 17                	je     f012852f <test_kfreelast+0x584>
f0128518:	83 ec 04             	sub    $0x4,%esp
f012851b:	68 ec 9a 13 f0       	push   $0xf0139aec
f0128520:	68 f9 0c 00 00       	push   $0xcf9
f0128525:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012852a:	e8 81 7c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012852f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128532:	e8 2b 45 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128537:	29 c3                	sub    %eax,%ebx
f0128539:	89 d8                	mov    %ebx,%eax
f012853b:	83 f8 02             	cmp    $0x2,%eax
f012853e:	74 17                	je     f0128557 <test_kfreelast+0x5ac>
f0128540:	83 ec 04             	sub    $0x4,%esp
f0128543:	68 54 9b 13 f0       	push   $0xf0139b54
f0128548:	68 fa 0c 00 00       	push   $0xcfa
f012854d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128552:	e8 59 7c fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128557:	c7 85 94 fe ff ff ff 	movl   $0x1bff,-0x16c(%ebp)
f012855e:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128561:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128567:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012856a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128571:	eb 0e                	jmp    f0128581 <test_kfreelast+0x5d6>
		{
			ptr[i] = 4 ;
f0128573:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128576:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128579:	01 d0                	add    %edx,%eax
f012857b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012857e:	ff 45 f4             	incl   -0xc(%ebp)
f0128581:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128587:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012858a:	7f e7                	jg     f0128573 <test_kfreelast+0x5c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012858c:	e8 d1 44 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128591:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128594:	e8 eb c0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128599:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012859c:	83 ec 0c             	sub    $0xc,%esp
f012859f:	68 00 fc 2f 00       	push   $0x2ffc00
f01285a4:	e8 4f fa fd ff       	call   f0107ff8 <kmalloc>
f01285a9:	83 c4 10             	add    $0x10,%esp
f01285ac:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01285b2:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01285b8:	89 c1                	mov    %eax,%ecx
f01285ba:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01285c1:	10 00 00 
f01285c4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01285c9:	0f b6 d0             	movzbl %al,%edx
f01285cc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01285d2:	01 d0                	add    %edx,%eax
f01285d4:	48                   	dec    %eax
f01285d5:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01285db:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01285e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01285e6:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01285ec:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01285f2:	29 d0                	sub    %edx,%eax
f01285f4:	89 c3                	mov    %eax,%ebx
f01285f6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01285fd:	10 00 00 
f0128600:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128605:	0f b6 c0             	movzbl %al,%eax
f0128608:	c1 e0 04             	shl    $0x4,%eax
f012860b:	89 c2                	mov    %eax,%edx
f012860d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128613:	01 d0                	add    %edx,%eax
f0128615:	48                   	dec    %eax
f0128616:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012861c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128622:	ba 00 00 00 00       	mov    $0x0,%edx
f0128627:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012862d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128633:	29 d0                	sub    %edx,%eax
f0128635:	01 d8                	add    %ebx,%eax
f0128637:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012863c:	39 c1                	cmp    %eax,%ecx
f012863e:	74 17                	je     f0128657 <test_kfreelast+0x6ac>
f0128640:	83 ec 04             	sub    $0x4,%esp
f0128643:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0128648:	68 06 0d 00 00       	push   $0xd06
f012864d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128652:	e8 59 7b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128657:	e8 28 c0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012865c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012865f:	74 17                	je     f0128678 <test_kfreelast+0x6cd>
f0128661:	83 ec 04             	sub    $0x4,%esp
f0128664:	68 ec 9a 13 f0       	push   $0xf0139aec
f0128669:	68 07 0d 00 00       	push   $0xd07
f012866e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128673:	e8 38 7b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128678:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012867b:	e8 e2 43 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128680:	29 c3                	sub    %eax,%ebx
f0128682:	89 d8                	mov    %ebx,%eax
f0128684:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128689:	74 17                	je     f01286a2 <test_kfreelast+0x6f7>
f012868b:	83 ec 04             	sub    $0x4,%esp
f012868e:	68 54 9b 13 f0       	push   $0xf0139b54
f0128693:	68 08 0d 00 00       	push   $0xd08
f0128698:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012869d:	e8 0e 7b fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01286a2:	c7 85 98 fe ff ff ff 	movl   $0x2ffbff,-0x168(%ebp)
f01286a9:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01286ac:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01286b2:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01286b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01286bc:	eb 0e                	jmp    f01286cc <test_kfreelast+0x721>
		{
			ptr[i] = 5 ;
f01286be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01286c1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01286c4:	01 d0                	add    %edx,%eax
f01286c6:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01286c9:	ff 45 f4             	incl   -0xc(%ebp)
f01286cc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01286d2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01286d5:	7f e7                	jg     f01286be <test_kfreelast+0x713>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01286d7:	e8 86 43 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01286dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286df:	e8 a0 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f01286e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01286e7:	83 ec 0c             	sub    $0xc,%esp
f01286ea:	68 00 fc 5f 00       	push   $0x5ffc00
f01286ef:	e8 04 f9 fd ff       	call   f0107ff8 <kmalloc>
f01286f4:	83 c4 10             	add    $0x10,%esp
f01286f7:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286fd:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128703:	89 c1                	mov    %eax,%ecx
f0128705:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012870c:	10 00 00 
f012870f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128714:	0f b6 d0             	movzbl %al,%edx
f0128717:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012871d:	01 d0                	add    %edx,%eax
f012871f:	48                   	dec    %eax
f0128720:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128726:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012872c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128731:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128737:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012873d:	29 d0                	sub    %edx,%eax
f012873f:	89 c3                	mov    %eax,%ebx
f0128741:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128748:	10 00 00 
f012874b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128750:	0f b6 c0             	movzbl %al,%eax
f0128753:	c1 e0 04             	shl    $0x4,%eax
f0128756:	89 c2                	mov    %eax,%edx
f0128758:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012875e:	01 d0                	add    %edx,%eax
f0128760:	48                   	dec    %eax
f0128761:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128767:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012876d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128772:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128778:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012877e:	29 d0                	sub    %edx,%eax
f0128780:	01 d8                	add    %ebx,%eax
f0128782:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128787:	39 c1                	cmp    %eax,%ecx
f0128789:	74 17                	je     f01287a2 <test_kfreelast+0x7f7>
f012878b:	83 ec 04             	sub    $0x4,%esp
f012878e:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0128793:	68 14 0d 00 00       	push   $0xd14
f0128798:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012879d:	e8 0e 7a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287a2:	e8 dd be fd ff       	call   f0104684 <pf_calculate_free_frames>
f01287a7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01287aa:	74 17                	je     f01287c3 <test_kfreelast+0x818>
f01287ac:	83 ec 04             	sub    $0x4,%esp
f01287af:	68 ec 9a 13 f0       	push   $0xf0139aec
f01287b4:	68 15 0d 00 00       	push   $0xd15
f01287b9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01287be:	e8 ed 79 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01287c3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01287c6:	e8 97 42 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01287cb:	29 c3                	sub    %eax,%ebx
f01287cd:	89 d8                	mov    %ebx,%eax
f01287cf:	3d 00 06 00 00       	cmp    $0x600,%eax
f01287d4:	74 17                	je     f01287ed <test_kfreelast+0x842>
f01287d6:	83 ec 04             	sub    $0x4,%esp
f01287d9:	68 54 9b 13 f0       	push   $0xf0139b54
f01287de:	68 16 0d 00 00       	push   $0xd16
f01287e3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01287e8:	e8 c3 79 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01287ed:	c7 85 9c fe ff ff ff 	movl   $0x5ffbff,-0x164(%ebp)
f01287f4:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01287f7:	e8 66 42 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01287fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287ff:	e8 80 be fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128804:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0128807:	83 ec 0c             	sub    $0xc,%esp
f012880a:	68 00 38 00 00       	push   $0x3800
f012880f:	e8 e4 f7 fd ff       	call   f0107ff8 <kmalloc>
f0128814:	83 c4 10             	add    $0x10,%esp
f0128817:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012881d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128823:	89 c1                	mov    %eax,%ecx
f0128825:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012882c:	10 00 00 
f012882f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128834:	0f b6 d0             	movzbl %al,%edx
f0128837:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012883d:	01 d0                	add    %edx,%eax
f012883f:	48                   	dec    %eax
f0128840:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128846:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012884c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128851:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128857:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012885d:	29 d0                	sub    %edx,%eax
f012885f:	89 c3                	mov    %eax,%ebx
f0128861:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128868:	10 00 00 
f012886b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128870:	0f b6 c0             	movzbl %al,%eax
f0128873:	c1 e0 04             	shl    $0x4,%eax
f0128876:	89 c2                	mov    %eax,%edx
f0128878:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012887e:	01 d0                	add    %edx,%eax
f0128880:	48                   	dec    %eax
f0128881:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128887:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012888d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128892:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128898:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012889e:	29 d0                	sub    %edx,%eax
f01288a0:	01 d8                	add    %ebx,%eax
f01288a2:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01288a7:	39 c1                	cmp    %eax,%ecx
f01288a9:	74 17                	je     f01288c2 <test_kfreelast+0x917>
f01288ab:	83 ec 04             	sub    $0x4,%esp
f01288ae:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01288b3:	68 1d 0d 00 00       	push   $0xd1d
f01288b8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01288bd:	e8 ee 78 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288c2:	e8 bd bd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01288c7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01288ca:	74 17                	je     f01288e3 <test_kfreelast+0x938>
f01288cc:	83 ec 04             	sub    $0x4,%esp
f01288cf:	68 ec 9a 13 f0       	push   $0xf0139aec
f01288d4:	68 1e 0d 00 00       	push   $0xd1e
f01288d9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01288de:	e8 cd 78 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01288e3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01288e6:	e8 77 41 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01288eb:	29 c3                	sub    %eax,%ebx
f01288ed:	89 d8                	mov    %ebx,%eax
f01288ef:	83 f8 04             	cmp    $0x4,%eax
f01288f2:	74 17                	je     f012890b <test_kfreelast+0x960>
f01288f4:	83 ec 04             	sub    $0x4,%esp
f01288f7:	68 54 9b 13 f0       	push   $0xf0139b54
f01288fc:	68 1f 0d 00 00       	push   $0xd1f
f0128901:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128906:	e8 a5 78 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012890b:	c7 85 a0 fe ff ff ff 	movl   $0x37ff,-0x160(%ebp)
f0128912:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0128915:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012891b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012891e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128925:	eb 0e                	jmp    f0128935 <test_kfreelast+0x98a>
		{
			ptr[i] = 7 ;
f0128927:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012892a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012892d:	01 d0                	add    %edx,%eax
f012892f:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0128932:	ff 45 f4             	incl   -0xc(%ebp)
f0128935:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012893b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012893e:	7f e7                	jg     f0128927 <test_kfreelast+0x97c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0128940:	e8 1d 41 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128945:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012894b:	e8 34 bd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128950:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[0]);
f0128956:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012895c:	83 ec 0c             	sub    $0xc,%esp
f012895f:	50                   	push   %eax
f0128960:	e8 ad f6 fd ff       	call   f0108012 <kfree>
f0128965:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128968:	e8 17 bd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012896d:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128973:	74 17                	je     f012898c <test_kfreelast+0x9e1>
f0128975:	83 ec 04             	sub    $0x4,%esp
f0128978:	68 ec 9a 13 f0       	push   $0xf0139aec
f012897d:	68 2e 0d 00 00       	push   $0xd2e
f0128982:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128987:	e8 24 78 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012898c:	e8 d1 40 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128991:	89 c2                	mov    %eax,%edx
f0128993:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128999:	29 c2                	sub    %eax,%edx
f012899b:	89 d0                	mov    %edx,%eax
f012899d:	3d 00 02 00 00       	cmp    $0x200,%eax
f01289a2:	74 17                	je     f01289bb <test_kfreelast+0xa10>
f01289a4:	83 ec 04             	sub    $0x4,%esp
f01289a7:	68 5c a2 13 f0       	push   $0xf013a25c
f01289ac:	68 2f 0d 00 00       	push   $0xd2f
f01289b1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01289b6:	e8 f5 77 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01289bb:	e8 a2 40 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01289c0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289c6:	e8 b9 bc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01289cb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[1]);
f01289d1:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01289d7:	83 ec 0c             	sub    $0xc,%esp
f01289da:	50                   	push   %eax
f01289db:	e8 32 f6 fd ff       	call   f0108012 <kfree>
f01289e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01289e3:	e8 9c bc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01289e8:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f01289ee:	74 17                	je     f0128a07 <test_kfreelast+0xa5c>
f01289f0:	83 ec 04             	sub    $0x4,%esp
f01289f3:	68 ec 9a 13 f0       	push   $0xf0139aec
f01289f8:	68 35 0d 00 00       	push   $0xd35
f01289fd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128a02:	e8 a9 77 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0128a07:	e8 56 40 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128a0c:	89 c2                	mov    %eax,%edx
f0128a0e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128a14:	29 c2                	sub    %eax,%edx
f0128a16:	89 d0                	mov    %edx,%eax
f0128a18:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128a1d:	74 17                	je     f0128a36 <test_kfreelast+0xa8b>
f0128a1f:	83 ec 04             	sub    $0x4,%esp
f0128a22:	68 5c a2 13 f0       	push   $0xf013a25c
f0128a27:	68 36 0d 00 00       	push   $0xd36
f0128a2c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128a31:	e8 7a 77 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128a36:	e8 27 40 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128a3b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a41:	e8 3e bc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128a46:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[6]);
f0128a4c:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128a52:	83 ec 0c             	sub    $0xc,%esp
f0128a55:	50                   	push   %eax
f0128a56:	e8 b7 f5 fd ff       	call   f0108012 <kfree>
f0128a5b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a5e:	e8 21 bc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128a63:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128a69:	74 17                	je     f0128a82 <test_kfreelast+0xad7>
f0128a6b:	83 ec 04             	sub    $0x4,%esp
f0128a6e:	68 ec 9a 13 f0       	push   $0xf0139aec
f0128a73:	68 3c 0d 00 00       	push   $0xd3c
f0128a78:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128a7d:	e8 2e 77 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0128a82:	e8 db 3f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128a87:	89 c2                	mov    %eax,%edx
f0128a89:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128a8f:	29 c2                	sub    %eax,%edx
f0128a91:	89 d0                	mov    %edx,%eax
f0128a93:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128a98:	74 17                	je     f0128ab1 <test_kfreelast+0xb06>
f0128a9a:	83 ec 04             	sub    $0x4,%esp
f0128a9d:	68 5c a2 13 f0       	push   $0xf013a25c
f0128aa2:	68 3d 0d 00 00       	push   $0xd3d
f0128aa7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128aac:	e8 ff 76 fd ff       	call   f01001b0 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0128ab1:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128ab7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128aba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ac1:	eb 1e                	jmp    f0128ae1 <test_kfreelast+0xb36>
		{
			sums[2] += ptr[i] ;
f0128ac3:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128ac9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128acc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128acf:	01 c8                	add    %ecx,%eax
f0128ad1:	8a 00                	mov    (%eax),%al
f0128ad3:	0f be c0             	movsbl %al,%eax
f0128ad6:	01 d0                	add    %edx,%eax
f0128ad8:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128ade:	ff 45 f4             	incl   -0xc(%ebp)
f0128ae1:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128ae7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128aea:	7f d7                	jg     f0128ac3 <test_kfreelast+0xb18>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0128aec:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128af2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128af8:	01 c0                	add    %eax,%eax
f0128afa:	39 c2                	cmp    %eax,%edx
f0128afc:	74 17                	je     f0128b15 <test_kfreelast+0xb6a>
f0128afe:	83 ec 04             	sub    $0x4,%esp
f0128b01:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0128b06:	68 48 0d 00 00       	push   $0xd48
f0128b0b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128b10:	e8 9b 76 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0128b15:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0128b1b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128b1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b25:	eb 1e                	jmp    f0128b45 <test_kfreelast+0xb9a>
		{
			sums[3] += ptr[i] ;
f0128b27:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0128b2d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128b30:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128b33:	01 c8                	add    %ecx,%eax
f0128b35:	8a 00                	mov    (%eax),%al
f0128b37:	0f be c0             	movsbl %al,%eax
f0128b3a:	01 d0                	add    %edx,%eax
f0128b3c:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128b42:	ff 45 f4             	incl   -0xc(%ebp)
f0128b45:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128b4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128b4e:	7f d7                	jg     f0128b27 <test_kfreelast+0xb7c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0128b50:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0128b56:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128b5c:	89 c1                	mov    %eax,%ecx
f0128b5e:	01 c9                	add    %ecx,%ecx
f0128b60:	01 c8                	add    %ecx,%eax
f0128b62:	39 c2                	cmp    %eax,%edx
f0128b64:	74 17                	je     f0128b7d <test_kfreelast+0xbd2>
f0128b66:	83 ec 04             	sub    $0x4,%esp
f0128b69:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0128b6e:	68 50 0d 00 00       	push   $0xd50
f0128b73:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128b78:	e8 33 76 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0128b7d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128b83:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128b86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b8d:	eb 1e                	jmp    f0128bad <test_kfreelast+0xc02>
		{
			sums[4] += ptr[i] ;
f0128b8f:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f0128b95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128b98:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128b9b:	01 c8                	add    %ecx,%eax
f0128b9d:	8a 00                	mov    (%eax),%al
f0128b9f:	0f be c0             	movsbl %al,%eax
f0128ba2:	01 d0                	add    %edx,%eax
f0128ba4:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128baa:	ff 45 f4             	incl   -0xc(%ebp)
f0128bad:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128bb3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128bb6:	7f d7                	jg     f0128b8f <test_kfreelast+0xbe4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0128bb8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0128bbe:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0128bc4:	c1 e2 02             	shl    $0x2,%edx
f0128bc7:	39 d0                	cmp    %edx,%eax
f0128bc9:	74 17                	je     f0128be2 <test_kfreelast+0xc37>
f0128bcb:	83 ec 04             	sub    $0x4,%esp
f0128bce:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0128bd3:	68 58 0d 00 00       	push   $0xd58
f0128bd8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128bdd:	e8 ce 75 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0128be2:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128be8:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128beb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128bf2:	eb 1e                	jmp    f0128c12 <test_kfreelast+0xc67>
		{
			sums[5] += ptr[i] ;
f0128bf4:	8b 95 48 fe ff ff    	mov    -0x1b8(%ebp),%edx
f0128bfa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128bfd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128c00:	01 c8                	add    %ecx,%eax
f0128c02:	8a 00                	mov    (%eax),%al
f0128c04:	0f be c0             	movsbl %al,%eax
f0128c07:	01 d0                	add    %edx,%eax
f0128c09:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128c0f:	ff 45 f4             	incl   -0xc(%ebp)
f0128c12:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0128c18:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c1b:	7f d7                	jg     f0128bf4 <test_kfreelast+0xc49>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0128c1d:	8b 8d 48 fe ff ff    	mov    -0x1b8(%ebp),%ecx
f0128c23:	8b 95 98 fe ff ff    	mov    -0x168(%ebp),%edx
f0128c29:	89 d0                	mov    %edx,%eax
f0128c2b:	c1 e0 02             	shl    $0x2,%eax
f0128c2e:	01 d0                	add    %edx,%eax
f0128c30:	39 c1                	cmp    %eax,%ecx
f0128c32:	74 17                	je     f0128c4b <test_kfreelast+0xca0>
f0128c34:	83 ec 04             	sub    $0x4,%esp
f0128c37:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0128c3c:	68 60 0d 00 00       	push   $0xd60
f0128c41:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128c46:	e8 65 75 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0128c4b:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128c51:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128c54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c5b:	eb 1e                	jmp    f0128c7b <test_kfreelast+0xcd0>
		{
			sums[7] += ptr[i] ;
f0128c5d:	8b 95 50 fe ff ff    	mov    -0x1b0(%ebp),%edx
f0128c63:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128c66:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128c69:	01 c8                	add    %ecx,%eax
f0128c6b:	8a 00                	mov    (%eax),%al
f0128c6d:	0f be c0             	movsbl %al,%eax
f0128c70:	01 d0                	add    %edx,%eax
f0128c72:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0128c78:	ff 45 f4             	incl   -0xc(%ebp)
f0128c7b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0128c81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c84:	7f d7                	jg     f0128c5d <test_kfreelast+0xcb2>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0128c86:	8b 8d 50 fe ff ff    	mov    -0x1b0(%ebp),%ecx
f0128c8c:	8b 95 a0 fe ff ff    	mov    -0x160(%ebp),%edx
f0128c92:	89 d0                	mov    %edx,%eax
f0128c94:	01 c0                	add    %eax,%eax
f0128c96:	01 d0                	add    %edx,%eax
f0128c98:	01 c0                	add    %eax,%eax
f0128c9a:	01 d0                	add    %edx,%eax
f0128c9c:	39 c1                	cmp    %eax,%ecx
f0128c9e:	74 17                	je     f0128cb7 <test_kfreelast+0xd0c>
f0128ca0:	83 ec 04             	sub    $0x4,%esp
f0128ca3:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0128ca8:	68 68 0d 00 00       	push   $0xd68
f0128cad:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128cb2:	e8 f9 74 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0128cb7:	e8 a6 3d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128cbc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cbf:	e8 c0 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128cc4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0128cc7:	83 ec 0c             	sub    $0xc,%esp
f0128cca:	68 00 50 00 00       	push   $0x5000
f0128ccf:	e8 24 f3 fd ff       	call   f0107ff8 <kmalloc>
f0128cd4:	83 c4 10             	add    $0x10,%esp
f0128cd7:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128cdd:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128ce3:	89 c1                	mov    %eax,%ecx
f0128ce5:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128cec:	10 00 00 
f0128cef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128cf4:	0f b6 d0             	movzbl %al,%edx
f0128cf7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128cfd:	01 d0                	add    %edx,%eax
f0128cff:	48                   	dec    %eax
f0128d00:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128d06:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128d0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d11:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128d17:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128d1d:	29 d0                	sub    %edx,%eax
f0128d1f:	89 c3                	mov    %eax,%ebx
f0128d21:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128d28:	10 00 00 
f0128d2b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128d30:	0f b6 c0             	movzbl %al,%eax
f0128d33:	c1 e0 04             	shl    $0x4,%eax
f0128d36:	89 c2                	mov    %eax,%edx
f0128d38:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128d3e:	01 d0                	add    %edx,%eax
f0128d40:	48                   	dec    %eax
f0128d41:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128d47:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128d4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d52:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128d58:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128d5e:	29 d0                	sub    %edx,%eax
f0128d60:	01 d8                	add    %ebx,%eax
f0128d62:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0128d67:	39 c1                	cmp    %eax,%ecx
f0128d69:	74 17                	je     f0128d82 <test_kfreelast+0xdd7>
f0128d6b:	83 ec 04             	sub    $0x4,%esp
f0128d6e:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0128d73:	68 71 0d 00 00       	push   $0xd71
f0128d78:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128d7d:	e8 2e 74 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d82:	e8 fd b8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128d87:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128d8a:	74 17                	je     f0128da3 <test_kfreelast+0xdf8>
f0128d8c:	83 ec 04             	sub    $0x4,%esp
f0128d8f:	68 ec 9a 13 f0       	push   $0xf0139aec
f0128d94:	68 72 0d 00 00       	push   $0xd72
f0128d99:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128d9e:	e8 0d 74 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128da3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128da6:	e8 b7 3c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128dab:	29 c3                	sub    %eax,%ebx
f0128dad:	89 d8                	mov    %ebx,%eax
f0128daf:	83 f8 05             	cmp    $0x5,%eax
f0128db2:	74 17                	je     f0128dcb <test_kfreelast+0xe20>
f0128db4:	83 ec 04             	sub    $0x4,%esp
f0128db7:	68 54 9b 13 f0       	push   $0xf0139b54
f0128dbc:	68 73 0d 00 00       	push   $0xd73
f0128dc1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128dc6:	e8 e5 73 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0128dcb:	c7 85 a4 fe ff ff ff 	movl   $0x4fff,-0x15c(%ebp)
f0128dd2:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0128dd5:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128ddb:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0128dde:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128de5:	eb 0e                	jmp    f0128df5 <test_kfreelast+0xe4a>
		{
			ptr[i] = 8 ;
f0128de7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128dea:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128ded:	01 d0                	add    %edx,%eax
f0128def:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0128df2:	ff 45 f4             	incl   -0xc(%ebp)
f0128df5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0128dfb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128dfe:	7f e7                	jg     f0128de7 <test_kfreelast+0xe3c>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128e00:	e8 5d 3c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128e05:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e08:	e8 77 b8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128e0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0128e10:	83 ec 0c             	sub    $0xc,%esp
f0128e13:	68 00 00 10 00       	push   $0x100000
f0128e18:	e8 db f1 fd ff       	call   f0107ff8 <kmalloc>
f0128e1d:	83 c4 10             	add    $0x10,%esp
f0128e20:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128e26:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128e2c:	89 c1                	mov    %eax,%ecx
f0128e2e:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128e35:	10 00 00 
f0128e38:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128e3d:	0f b6 d0             	movzbl %al,%edx
f0128e40:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128e46:	01 d0                	add    %edx,%eax
f0128e48:	48                   	dec    %eax
f0128e49:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128e4f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128e55:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e5a:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128e60:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128e66:	29 d0                	sub    %edx,%eax
f0128e68:	89 c3                	mov    %eax,%ebx
f0128e6a:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0128e71:	10 00 00 
f0128e74:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128e79:	0f b6 c0             	movzbl %al,%eax
f0128e7c:	c1 e0 04             	shl    $0x4,%eax
f0128e7f:	89 c2                	mov    %eax,%edx
f0128e81:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128e87:	01 d0                	add    %edx,%eax
f0128e89:	48                   	dec    %eax
f0128e8a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0128e90:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128e96:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e9b:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0128ea1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128ea7:	29 d0                	sub    %edx,%eax
f0128ea9:	01 d8                	add    %ebx,%eax
f0128eab:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128eb0:	39 c1                	cmp    %eax,%ecx
f0128eb2:	74 17                	je     f0128ecb <test_kfreelast+0xf20>
f0128eb4:	83 ec 04             	sub    $0x4,%esp
f0128eb7:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0128ebc:	68 7f 0d 00 00       	push   $0xd7f
f0128ec1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128ec6:	e8 e5 72 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ecb:	e8 b4 b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128ed0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128ed3:	74 17                	je     f0128eec <test_kfreelast+0xf41>
f0128ed5:	83 ec 04             	sub    $0x4,%esp
f0128ed8:	68 ec 9a 13 f0       	push   $0xf0139aec
f0128edd:	68 80 0d 00 00       	push   $0xd80
f0128ee2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128ee7:	e8 c4 72 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128eec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128eef:	e8 6e 3b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128ef4:	29 c3                	sub    %eax,%ebx
f0128ef6:	89 d8                	mov    %ebx,%eax
f0128ef8:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128efd:	74 17                	je     f0128f16 <test_kfreelast+0xf6b>
f0128eff:	83 ec 04             	sub    $0x4,%esp
f0128f02:	68 54 9b 13 f0       	push   $0xf0139b54
f0128f07:	68 81 0d 00 00       	push   $0xd81
f0128f0c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128f11:	e8 9a 72 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0128f16:	c7 85 a8 fe ff ff ff 	movl   $0xfffff,-0x158(%ebp)
f0128f1d:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0128f20:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128f26:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0128f29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f30:	eb 0e                	jmp    f0128f40 <test_kfreelast+0xf95>
		{
			ptr[i] = 9 ;
f0128f32:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128f35:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128f38:	01 d0                	add    %edx,%eax
f0128f3a:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0128f3d:	ff 45 f4             	incl   -0xc(%ebp)
f0128f40:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0128f46:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128f49:	7f e7                	jg     f0128f32 <test_kfreelast+0xf87>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0128f4b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128f52:	e8 0b 3b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128f57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f5a:	e8 25 b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128f5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0128f62:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128f68:	83 ec 0c             	sub    $0xc,%esp
f0128f6b:	50                   	push   %eax
f0128f6c:	e8 a1 f0 fd ff       	call   f0108012 <kfree>
f0128f71:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f74:	e8 0b b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128f79:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128f7c:	74 17                	je     f0128f95 <test_kfreelast+0xfea>
f0128f7e:	83 ec 04             	sub    $0x4,%esp
f0128f81:	68 ec 9a 13 f0       	push   $0xf0139aec
f0128f86:	68 91 0d 00 00       	push   $0xd91
f0128f8b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128f90:	e8 1b 72 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0128f95:	e8 c8 3a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128f9a:	89 c2                	mov    %eax,%edx
f0128f9c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128f9f:	29 c2                	sub    %eax,%edx
f0128fa1:	89 d0                	mov    %edx,%eax
f0128fa3:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128fa8:	74 17                	je     f0128fc1 <test_kfreelast+0x1016>
f0128faa:	83 ec 04             	sub    $0x4,%esp
f0128fad:	68 5c a2 13 f0       	push   $0xf013a25c
f0128fb2:	68 92 0d 00 00       	push   $0xd92
f0128fb7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0128fbc:	e8 ef 71 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0128fc1:	e8 9c 3a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0128fc6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128fc9:	e8 b6 b6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128fce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0128fd1:	83 ec 0c             	sub    $0xc,%esp
f0128fd4:	68 00 78 00 00       	push   $0x7800
f0128fd9:	e8 1a f0 fd ff       	call   f0107ff8 <kmalloc>
f0128fde:	83 c4 10             	add    $0x10,%esp
f0128fe1:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128fe7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128fed:	89 c1                	mov    %eax,%ecx
f0128fef:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128ff6:	10 00 00 
f0128ff9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128ffe:	0f b6 d0             	movzbl %al,%edx
f0129001:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129007:	01 d0                	add    %edx,%eax
f0129009:	48                   	dec    %eax
f012900a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129010:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129016:	ba 00 00 00 00       	mov    $0x0,%edx
f012901b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129021:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129027:	29 d0                	sub    %edx,%eax
f0129029:	89 c3                	mov    %eax,%ebx
f012902b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129032:	10 00 00 
f0129035:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012903a:	0f b6 c0             	movzbl %al,%eax
f012903d:	c1 e0 04             	shl    $0x4,%eax
f0129040:	89 c2                	mov    %eax,%edx
f0129042:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129048:	01 d0                	add    %edx,%eax
f012904a:	48                   	dec    %eax
f012904b:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129051:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129057:	ba 00 00 00 00       	mov    $0x0,%edx
f012905c:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129062:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129068:	29 d0                	sub    %edx,%eax
f012906a:	01 d8                	add    %ebx,%eax
f012906c:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129071:	39 c1                	cmp    %eax,%ecx
f0129073:	74 17                	je     f012908c <test_kfreelast+0x10e1>
f0129075:	83 ec 04             	sub    $0x4,%esp
f0129078:	68 b8 9b 13 f0       	push   $0xf0139bb8
f012907d:	68 9b 0d 00 00       	push   $0xd9b
f0129082:	68 d2 9a 13 f0       	push   $0xf0139ad2
f0129087:	e8 24 71 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012908c:	e8 f3 b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129091:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129094:	74 17                	je     f01290ad <test_kfreelast+0x1102>
f0129096:	83 ec 04             	sub    $0x4,%esp
f0129099:	68 ec 9a 13 f0       	push   $0xf0139aec
f012909e:	68 9c 0d 00 00       	push   $0xd9c
f01290a3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01290a8:	e8 03 71 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f01290ad:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01290b0:	e8 ad 39 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01290b5:	29 c3                	sub    %eax,%ebx
f01290b7:	89 d8                	mov    %ebx,%eax
f01290b9:	83 f8 08             	cmp    $0x8,%eax
f01290bc:	74 17                	je     f01290d5 <test_kfreelast+0x112a>
f01290be:	83 ec 04             	sub    $0x4,%esp
f01290c1:	68 54 9b 13 f0       	push   $0xf0139b54
f01290c6:	68 9d 0d 00 00       	push   $0xd9d
f01290cb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01290d0:	e8 db 70 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f01290d5:	c7 85 ac fe ff ff ff 	movl   $0x77ff,-0x154(%ebp)
f01290dc:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f01290df:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01290e5:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f01290e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01290ef:	eb 0e                	jmp    f01290ff <test_kfreelast+0x1154>
		{
			ptr[i] = 10 ;
f01290f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01290f4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01290f7:	01 d0                	add    %edx,%eax
f01290f9:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01290fc:	ff 45 f4             	incl   -0xc(%ebp)
f01290ff:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129105:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129108:	7f e7                	jg     f01290f1 <test_kfreelast+0x1146>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012910a:	e8 53 39 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012910f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129112:	e8 6d b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129117:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012911a:	83 ec 0c             	sub    $0xc,%esp
f012911d:	68 00 00 10 00       	push   $0x100000
f0129122:	e8 d1 ee fd ff       	call   f0107ff8 <kmalloc>
f0129127:	83 c4 10             	add    $0x10,%esp
f012912a:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129130:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0129136:	89 c1                	mov    %eax,%ecx
f0129138:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012913f:	10 00 00 
f0129142:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129147:	0f b6 d0             	movzbl %al,%edx
f012914a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129150:	01 d0                	add    %edx,%eax
f0129152:	48                   	dec    %eax
f0129153:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129159:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012915f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129164:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012916a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129170:	29 d0                	sub    %edx,%eax
f0129172:	89 c3                	mov    %eax,%ebx
f0129174:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f012917b:	10 00 00 
f012917e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129183:	0f b6 c0             	movzbl %al,%eax
f0129186:	c1 e0 04             	shl    $0x4,%eax
f0129189:	89 c2                	mov    %eax,%edx
f012918b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129191:	01 d0                	add    %edx,%eax
f0129193:	48                   	dec    %eax
f0129194:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012919a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01291a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01291a5:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01291ab:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01291b1:	29 d0                	sub    %edx,%eax
f01291b3:	01 d8                	add    %ebx,%eax
f01291b5:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f01291ba:	39 c1                	cmp    %eax,%ecx
f01291bc:	74 17                	je     f01291d5 <test_kfreelast+0x122a>
f01291be:	83 ec 04             	sub    $0x4,%esp
f01291c1:	68 b8 9b 13 f0       	push   $0xf0139bb8
f01291c6:	68 a9 0d 00 00       	push   $0xda9
f01291cb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01291d0:	e8 db 6f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01291d5:	e8 aa b4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01291da:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01291dd:	74 17                	je     f01291f6 <test_kfreelast+0x124b>
f01291df:	83 ec 04             	sub    $0x4,%esp
f01291e2:	68 ec 9a 13 f0       	push   $0xf0139aec
f01291e7:	68 aa 0d 00 00       	push   $0xdaa
f01291ec:	68 d2 9a 13 f0       	push   $0xf0139ad2
f01291f1:	e8 ba 6f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01291f6:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01291f9:	e8 64 38 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01291fe:	29 c3                	sub    %eax,%ebx
f0129200:	89 d8                	mov    %ebx,%eax
f0129202:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129207:	74 17                	je     f0129220 <test_kfreelast+0x1275>
f0129209:	83 ec 04             	sub    $0x4,%esp
f012920c:	68 54 9b 13 f0       	push   $0xf0139b54
f0129211:	68 ab 0d 00 00       	push   $0xdab
f0129216:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012921b:	e8 90 6f fd ff       	call   f01001b0 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0129220:	c7 85 b0 fe ff ff ff 	movl   $0xfffff,-0x150(%ebp)
f0129227:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012922a:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0129230:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0129233:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012923a:	eb 0e                	jmp    f012924a <test_kfreelast+0x129f>
		{
			ptr[i] = 11 ;
f012923c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012923f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129242:	01 d0                	add    %edx,%eax
f0129244:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0129247:	ff 45 f4             	incl   -0xc(%ebp)
f012924a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129250:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129253:	7f e7                	jg     f012923c <test_kfreelast+0x1291>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0129255:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0129259:	83 ec 08             	sub    $0x8,%esp
f012925c:	ff 75 f0             	pushl  -0x10(%ebp)
f012925f:	68 04 ab 13 f0       	push   $0xf013ab04
f0129264:	e8 c8 7b fd ff       	call   f0100e31 <cprintf>
f0129269:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012926c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129273:	e8 ea 37 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129278:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012927b:	e8 04 b4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129280:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0129283:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0129289:	83 ec 0c             	sub    $0xc,%esp
f012928c:	50                   	push   %eax
f012928d:	e8 80 ed fd ff       	call   f0108012 <kfree>
f0129292:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129295:	e8 ea b3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012929a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012929d:	74 1d                	je     f01292bc <test_kfreelast+0x1311>
f012929f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01292a3:	75 17                	jne    f01292bc <test_kfreelast+0x1311>
f01292a5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01292ac:	83 ec 0c             	sub    $0xc,%esp
f01292af:	68 2c ab 13 f0       	push   $0xf013ab2c
f01292b4:	e8 78 7b fd ff       	call   f0100e31 <cprintf>
f01292b9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01292bc:	e8 a1 37 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01292c1:	89 c2                	mov    %eax,%edx
f01292c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01292c6:	29 c2                	sub    %eax,%edx
f01292c8:	89 d0                	mov    %edx,%eax
f01292ca:	3d 00 01 00 00       	cmp    $0x100,%eax
f01292cf:	74 1d                	je     f01292ee <test_kfreelast+0x1343>
f01292d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01292d5:	75 17                	jne    f01292ee <test_kfreelast+0x1343>
f01292d7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01292de:	83 ec 0c             	sub    $0xc,%esp
f01292e1:	68 98 ab 13 f0       	push   $0xf013ab98
f01292e6:	e8 46 7b fd ff       	call   f0100e31 <cprintf>
f01292eb:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f01292ee:	e8 6f 37 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01292f3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292f6:	e8 89 b3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01292fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f01292fe:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0129304:	83 ec 0c             	sub    $0xc,%esp
f0129307:	50                   	push   %eax
f0129308:	e8 05 ed fd ff       	call   f0108012 <kfree>
f012930d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129310:	e8 6f b3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129315:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129318:	74 1d                	je     f0129337 <test_kfreelast+0x138c>
f012931a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012931e:	75 17                	jne    f0129337 <test_kfreelast+0x138c>
f0129320:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129327:	83 ec 0c             	sub    $0xc,%esp
f012932a:	68 2c ab 13 f0       	push   $0xf013ab2c
f012932f:	e8 fd 7a fd ff       	call   f0100e31 <cprintf>
f0129334:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129337:	e8 26 37 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012933c:	89 c2                	mov    %eax,%edx
f012933e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129341:	29 c2                	sub    %eax,%edx
f0129343:	89 d0                	mov    %edx,%eax
f0129345:	83 f8 08             	cmp    $0x8,%eax
f0129348:	74 1d                	je     f0129367 <test_kfreelast+0x13bc>
f012934a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012934e:	75 17                	jne    f0129367 <test_kfreelast+0x13bc>
f0129350:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129357:	83 ec 0c             	sub    $0xc,%esp
f012935a:	68 98 ab 13 f0       	push   $0xf013ab98
f012935f:	e8 cd 7a fd ff       	call   f0100e31 <cprintf>
f0129364:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129367:	e8 f6 36 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012936c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012936f:	e8 10 b3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129374:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f0129377:	83 ec 0c             	sub    $0xc,%esp
f012937a:	68 00 28 00 00       	push   $0x2800
f012937f:	e8 74 ec fd ff       	call   f0107ff8 <kmalloc>
f0129384:	83 c4 10             	add    $0x10,%esp
f0129387:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012938d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129393:	89 c1                	mov    %eax,%ecx
f0129395:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012939c:	10 00 00 
f012939f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01293a4:	0f b6 d0             	movzbl %al,%edx
f01293a7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01293ad:	01 d0                	add    %edx,%eax
f01293af:	48                   	dec    %eax
f01293b0:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01293b6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01293bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01293c1:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01293c7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01293cd:	29 d0                	sub    %edx,%eax
f01293cf:	89 c3                	mov    %eax,%ebx
f01293d1:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01293d8:	10 00 00 
f01293db:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01293e0:	0f b6 c0             	movzbl %al,%eax
f01293e3:	c1 e0 04             	shl    $0x4,%eax
f01293e6:	89 c2                	mov    %eax,%edx
f01293e8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01293ee:	01 d0                	add    %edx,%eax
f01293f0:	48                   	dec    %eax
f01293f1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01293f7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01293fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129402:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129408:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012940e:	29 d0                	sub    %edx,%eax
f0129410:	01 d8                	add    %ebx,%eax
f0129412:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129417:	39 c1                	cmp    %eax,%ecx
f0129419:	74 1d                	je     f0129438 <test_kfreelast+0x148d>
f012941b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012941f:	75 17                	jne    f0129438 <test_kfreelast+0x148d>
f0129421:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129428:	83 ec 0c             	sub    $0xc,%esp
f012942b:	68 d0 ab 13 f0       	push   $0xf013abd0
f0129430:	e8 fc 79 fd ff       	call   f0100e31 <cprintf>
f0129435:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129438:	e8 47 b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012943d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129440:	74 1d                	je     f012945f <test_kfreelast+0x14b4>
f0129442:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129446:	75 17                	jne    f012945f <test_kfreelast+0x14b4>
f0129448:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012944f:	83 ec 0c             	sub    $0xc,%esp
f0129452:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129457:	e8 d5 79 fd ff       	call   f0100e31 <cprintf>
f012945c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012945f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129462:	e8 fb 35 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129467:	29 c3                	sub    %eax,%ebx
f0129469:	89 d8                	mov    %ebx,%eax
f012946b:	83 f8 03             	cmp    $0x3,%eax
f012946e:	74 1d                	je     f012948d <test_kfreelast+0x14e2>
f0129470:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129474:	75 17                	jne    f012948d <test_kfreelast+0x14e2>
f0129476:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012947d:	83 ec 0c             	sub    $0xc,%esp
f0129480:	68 38 ac 13 f0       	push   $0xf013ac38
f0129485:	e8 a7 79 fd ff       	call   f0100e31 <cprintf>
f012948a:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012948d:	c7 85 b4 fe ff ff ff 	movl   $0x27ff,-0x14c(%ebp)
f0129494:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f0129497:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012949d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f01294a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01294a7:	eb 0e                	jmp    f01294b7 <test_kfreelast+0x150c>
		{
			ptr[i] = 12 ;
f01294a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01294ac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01294af:	01 d0                	add    %edx,%eax
f01294b1:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f01294b4:	ff 45 f4             	incl   -0xc(%ebp)
f01294b7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01294bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01294c0:	7f e7                	jg     f01294a9 <test_kfreelast+0x14fe>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01294c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01294c6:	75 17                	jne    f01294df <test_kfreelast+0x1534>
f01294c8:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f01294cc:	83 ec 08             	sub    $0x8,%esp
f01294cf:	ff 75 f0             	pushl  -0x10(%ebp)
f01294d2:	68 04 ab 13 f0       	push   $0xf013ab04
f01294d7:	e8 55 79 fd ff       	call   f0100e31 <cprintf>
f01294dc:	83 c4 10             	add    $0x10,%esp
f01294df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f01294e6:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01294ec:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f01294ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01294f6:	eb 1e                	jmp    f0129516 <test_kfreelast+0x156b>
		{
			sums[12] += ptr[i] ;
f01294f8:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f01294fe:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129501:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129504:	01 c8                	add    %ecx,%eax
f0129506:	8a 00                	mov    (%eax),%al
f0129508:	0f be c0             	movsbl %al,%eax
f012950b:	01 d0                	add    %edx,%eax
f012950d:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129513:	ff 45 f4             	incl   -0xc(%ebp)
f0129516:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012951c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012951f:	7f d7                	jg     f01294f8 <test_kfreelast+0x154d>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129521:	8b 8d 64 fe ff ff    	mov    -0x19c(%ebp),%ecx
f0129527:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f012952d:	89 d0                	mov    %edx,%eax
f012952f:	01 c0                	add    %eax,%eax
f0129531:	01 d0                	add    %edx,%eax
f0129533:	c1 e0 02             	shl    $0x2,%eax
f0129536:	39 c1                	cmp    %eax,%ecx
f0129538:	74 1d                	je     f0129557 <test_kfreelast+0x15ac>
f012953a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012953e:	75 17                	jne    f0129557 <test_kfreelast+0x15ac>
f0129540:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129547:	83 ec 0c             	sub    $0xc,%esp
f012954a:	68 7c ac 13 f0       	push   $0xf013ac7c
f012954f:	e8 dd 78 fd ff       	call   f0100e31 <cprintf>
f0129554:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129557:	83 ec 0c             	sub    $0xc,%esp
f012955a:	6a 03                	push   $0x3
f012955c:	e8 9c 39 fe ff       	call   f010cefd <sys_bypassPageFault>
f0129561:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f0129564:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012956a:	05 00 30 00 00       	add    $0x3000,%eax
f012956f:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f0129572:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129579:	eb 3c                	jmp    f01295b7 <test_kfreelast+0x160c>
		{
			ptr[i] = 10;
f012957b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012957e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129581:	01 d0                	add    %edx,%eax
f0129583:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129586:	e8 60 39 fe ff       	call   f010ceeb <sys_rcr2>
f012958b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012958e:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0129591:	01 ca                	add    %ecx,%edx
f0129593:	39 d0                	cmp    %edx,%eax
f0129595:	74 1d                	je     f01295b4 <test_kfreelast+0x1609>
f0129597:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012959b:	75 17                	jne    f01295b4 <test_kfreelast+0x1609>
f012959d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01295a4:	83 ec 0c             	sub    $0xc,%esp
f01295a7:	68 b0 ac 13 f0       	push   $0xf013acb0
f01295ac:	e8 80 78 fd ff       	call   f0100e31 <cprintf>
f01295b1:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f01295b4:	ff 45 f4             	incl   -0xc(%ebp)
f01295b7:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f01295be:	7e bb                	jle    f012957b <test_kfreelast+0x15d0>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01295c0:	83 ec 0c             	sub    $0xc,%esp
f01295c3:	6a 00                	push   $0x0
f01295c5:	e8 33 39 fe ff       	call   f010cefd <sys_bypassPageFault>
f01295ca:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01295cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295d1:	75 17                	jne    f01295ea <test_kfreelast+0x163f>
f01295d3:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f01295d7:	83 ec 08             	sub    $0x8,%esp
f01295da:	ff 75 f0             	pushl  -0x10(%ebp)
f01295dd:	68 04 ab 13 f0       	push   $0xf013ab04
f01295e2:	e8 4a 78 fd ff       	call   f0100e31 <cprintf>
f01295e7:	83 c4 10             	add    $0x10,%esp
f01295ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f01295f1:	e8 6c 34 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01295f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295f9:	e8 86 b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01295fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f0129601:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129607:	83 ec 0c             	sub    $0xc,%esp
f012960a:	50                   	push   %eax
f012960b:	e8 02 ea fd ff       	call   f0108012 <kfree>
f0129610:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129613:	e8 6c b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129618:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012961b:	74 1d                	je     f012963a <test_kfreelast+0x168f>
f012961d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129621:	75 17                	jne    f012963a <test_kfreelast+0x168f>
f0129623:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012962a:	83 ec 0c             	sub    $0xc,%esp
f012962d:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129632:	e8 fa 77 fd ff       	call   f0100e31 <cprintf>
f0129637:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012963a:	e8 23 34 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012963f:	89 c2                	mov    %eax,%edx
f0129641:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129644:	29 c2                	sub    %eax,%edx
f0129646:	89 d0                	mov    %edx,%eax
f0129648:	83 f8 03             	cmp    $0x3,%eax
f012964b:	74 1d                	je     f012966a <test_kfreelast+0x16bf>
f012964d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129651:	75 17                	jne    f012966a <test_kfreelast+0x16bf>
f0129653:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012965a:	83 ec 0c             	sub    $0xc,%esp
f012965d:	68 98 ab 13 f0       	push   $0xf013ab98
f0129662:	e8 ca 77 fd ff       	call   f0100e31 <cprintf>
f0129667:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012966a:	e8 f3 33 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012966f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129672:	e8 0d b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129677:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012967a:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0129680:	83 ec 0c             	sub    $0xc,%esp
f0129683:	50                   	push   %eax
f0129684:	e8 89 e9 fd ff       	call   f0108012 <kfree>
f0129689:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012968c:	e8 f3 af fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129691:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129694:	74 1d                	je     f01296b3 <test_kfreelast+0x1708>
f0129696:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012969a:	75 17                	jne    f01296b3 <test_kfreelast+0x1708>
f012969c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296a3:	83 ec 0c             	sub    $0xc,%esp
f01296a6:	68 2c ab 13 f0       	push   $0xf013ab2c
f01296ab:	e8 81 77 fd ff       	call   f0100e31 <cprintf>
f01296b0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01296b3:	e8 aa 33 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01296b8:	89 c2                	mov    %eax,%edx
f01296ba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01296bd:	29 c2                	sub    %eax,%edx
f01296bf:	89 d0                	mov    %edx,%eax
f01296c1:	83 f8 04             	cmp    $0x4,%eax
f01296c4:	74 1d                	je     f01296e3 <test_kfreelast+0x1738>
f01296c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296ca:	75 17                	jne    f01296e3 <test_kfreelast+0x1738>
f01296cc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296d3:	83 ec 0c             	sub    $0xc,%esp
f01296d6:	68 98 ab 13 f0       	push   $0xf013ab98
f01296db:	e8 51 77 fd ff       	call   f0100e31 <cprintf>
f01296e0:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01296e3:	e8 7a 33 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01296e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296eb:	e8 94 af fd ff       	call   f0104684 <pf_calculate_free_frames>
f01296f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f01296f3:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01296f9:	83 ec 0c             	sub    $0xc,%esp
f01296fc:	50                   	push   %eax
f01296fd:	e8 10 e9 fd ff       	call   f0108012 <kfree>
f0129702:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129705:	e8 7a af fd ff       	call   f0104684 <pf_calculate_free_frames>
f012970a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012970d:	74 1d                	je     f012972c <test_kfreelast+0x1781>
f012970f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129713:	75 17                	jne    f012972c <test_kfreelast+0x1781>
f0129715:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012971c:	83 ec 0c             	sub    $0xc,%esp
f012971f:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129724:	e8 08 77 fd ff       	call   f0100e31 <cprintf>
f0129729:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012972c:	e8 31 33 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129731:	89 c2                	mov    %eax,%edx
f0129733:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129736:	29 c2                	sub    %eax,%edx
f0129738:	89 d0                	mov    %edx,%eax
f012973a:	83 f8 05             	cmp    $0x5,%eax
f012973d:	74 1d                	je     f012975c <test_kfreelast+0x17b1>
f012973f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129743:	75 17                	jne    f012975c <test_kfreelast+0x17b1>
f0129745:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012974c:	83 ec 0c             	sub    $0xc,%esp
f012974f:	68 98 ab 13 f0       	push   $0xf013ab98
f0129754:	e8 d8 76 fd ff       	call   f0100e31 <cprintf>
f0129759:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012975c:	e8 01 33 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129761:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129764:	e8 1b af fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129769:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012976c:	83 ec 0c             	sub    $0xc,%esp
f012976f:	68 00 c8 00 00       	push   $0xc800
f0129774:	e8 7f e8 fd ff       	call   f0107ff8 <kmalloc>
f0129779:	83 c4 10             	add    $0x10,%esp
f012977c:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129782:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129788:	89 c1                	mov    %eax,%ecx
f012978a:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129791:	10 00 00 
f0129794:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129799:	0f b6 d0             	movzbl %al,%edx
f012979c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01297a2:	01 d0                	add    %edx,%eax
f01297a4:	48                   	dec    %eax
f01297a5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01297ab:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01297b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01297b6:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01297bc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01297c2:	29 d0                	sub    %edx,%eax
f01297c4:	89 c3                	mov    %eax,%ebx
f01297c6:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01297cd:	10 00 00 
f01297d0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01297d5:	0f b6 c0             	movzbl %al,%eax
f01297d8:	c1 e0 04             	shl    $0x4,%eax
f01297db:	89 c2                	mov    %eax,%edx
f01297dd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01297e3:	01 d0                	add    %edx,%eax
f01297e5:	48                   	dec    %eax
f01297e6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01297ec:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01297f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01297f7:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01297fd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129803:	29 d0                	sub    %edx,%eax
f0129805:	01 d8                	add    %ebx,%eax
f0129807:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012980c:	39 c1                	cmp    %eax,%ecx
f012980e:	74 1d                	je     f012982d <test_kfreelast+0x1882>
f0129810:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129814:	75 17                	jne    f012982d <test_kfreelast+0x1882>
f0129816:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012981d:	83 ec 0c             	sub    $0xc,%esp
f0129820:	68 d0 ab 13 f0       	push   $0xf013abd0
f0129825:	e8 07 76 fd ff       	call   f0100e31 <cprintf>
f012982a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012982d:	e8 52 ae fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129832:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129835:	74 1d                	je     f0129854 <test_kfreelast+0x18a9>
f0129837:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012983b:	75 17                	jne    f0129854 <test_kfreelast+0x18a9>
f012983d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129844:	83 ec 0c             	sub    $0xc,%esp
f0129847:	68 2c ab 13 f0       	push   $0xf013ab2c
f012984c:	e8 e0 75 fd ff       	call   f0100e31 <cprintf>
f0129851:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129854:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129857:	e8 06 32 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012985c:	29 c3                	sub    %eax,%ebx
f012985e:	89 d8                	mov    %ebx,%eax
f0129860:	83 f8 0d             	cmp    $0xd,%eax
f0129863:	74 1d                	je     f0129882 <test_kfreelast+0x18d7>
f0129865:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129869:	75 17                	jne    f0129882 <test_kfreelast+0x18d7>
f012986b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129872:	83 ec 0c             	sub    $0xc,%esp
f0129875:	68 38 ac 13 f0       	push   $0xf013ac38
f012987a:	e8 b2 75 fd ff       	call   f0100e31 <cprintf>
f012987f:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f0129882:	c7 85 b8 fe ff ff ff 	movl   $0xc7ff,-0x148(%ebp)
f0129889:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012988c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129892:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f0129895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012989c:	eb 0e                	jmp    f01298ac <test_kfreelast+0x1901>
		{
			ptr[i] = 13 ;
f012989e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01298a1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01298a4:	01 d0                	add    %edx,%eax
f01298a6:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f01298a9:	ff 45 f4             	incl   -0xc(%ebp)
f01298ac:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01298b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01298b5:	7f e7                	jg     f012989e <test_kfreelast+0x18f3>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01298b7:	e8 a6 31 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01298bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298bf:	e8 c0 ad fd ff       	call   f0104684 <pf_calculate_free_frames>
f01298c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f01298c7:	83 ec 0c             	sub    $0xc,%esp
f01298ca:	68 00 fc 2f 00       	push   $0x2ffc00
f01298cf:	e8 24 e7 fd ff       	call   f0107ff8 <kmalloc>
f01298d4:	83 c4 10             	add    $0x10,%esp
f01298d7:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01298dd:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01298e3:	89 c1                	mov    %eax,%ecx
f01298e5:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01298ec:	10 00 00 
f01298ef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01298f4:	0f b6 d0             	movzbl %al,%edx
f01298f7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01298fd:	01 d0                	add    %edx,%eax
f01298ff:	48                   	dec    %eax
f0129900:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0129906:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012990c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129911:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0129917:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012991d:	29 d0                	sub    %edx,%eax
f012991f:	89 c3                	mov    %eax,%ebx
f0129921:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0129928:	10 00 00 
f012992b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129930:	0f b6 c0             	movzbl %al,%eax
f0129933:	c1 e0 04             	shl    $0x4,%eax
f0129936:	89 c2                	mov    %eax,%edx
f0129938:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012993e:	01 d0                	add    %edx,%eax
f0129940:	48                   	dec    %eax
f0129941:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0129947:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012994d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129952:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0129958:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012995e:	29 d0                	sub    %edx,%eax
f0129960:	01 d8                	add    %ebx,%eax
f0129962:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f0129967:	39 c1                	cmp    %eax,%ecx
f0129969:	74 1d                	je     f0129988 <test_kfreelast+0x19dd>
f012996b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012996f:	75 17                	jne    f0129988 <test_kfreelast+0x19dd>
f0129971:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129978:	83 ec 0c             	sub    $0xc,%esp
f012997b:	68 d0 ab 13 f0       	push   $0xf013abd0
f0129980:	e8 ac 74 fd ff       	call   f0100e31 <cprintf>
f0129985:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129988:	e8 f7 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f012998d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129990:	74 1d                	je     f01299af <test_kfreelast+0x1a04>
f0129992:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129996:	75 17                	jne    f01299af <test_kfreelast+0x1a04>
f0129998:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012999f:	83 ec 0c             	sub    $0xc,%esp
f01299a2:	68 2c ab 13 f0       	push   $0xf013ab2c
f01299a7:	e8 85 74 fd ff       	call   f0100e31 <cprintf>
f01299ac:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01299af:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01299b2:	e8 ab 30 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f01299b7:	29 c3                	sub    %eax,%ebx
f01299b9:	89 d8                	mov    %ebx,%eax
f01299bb:	3d 00 03 00 00       	cmp    $0x300,%eax
f01299c0:	74 1d                	je     f01299df <test_kfreelast+0x1a34>
f01299c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299c6:	75 17                	jne    f01299df <test_kfreelast+0x1a34>
f01299c8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299cf:	83 ec 0c             	sub    $0xc,%esp
f01299d2:	68 38 ac 13 f0       	push   $0xf013ac38
f01299d7:	e8 55 74 fd ff       	call   f0100e31 <cprintf>
f01299dc:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f01299df:	c7 85 bc fe ff ff ff 	movl   $0x2ffbff,-0x144(%ebp)
f01299e6:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f01299e9:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01299ef:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f01299f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01299f9:	eb 0e                	jmp    f0129a09 <test_kfreelast+0x1a5e>
		{
			ptr[i] = 14 ;
f01299fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01299fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129a01:	01 d0                	add    %edx,%eax
f0129a03:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0129a06:	ff 45 f4             	incl   -0xc(%ebp)
f0129a09:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129a0f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129a12:	7f e7                	jg     f01299fb <test_kfreelast+0x1a50>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129a14:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a18:	75 17                	jne    f0129a31 <test_kfreelast+0x1a86>
f0129a1a:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f0129a1e:	83 ec 08             	sub    $0x8,%esp
f0129a21:	ff 75 f0             	pushl  -0x10(%ebp)
f0129a24:	68 04 ab 13 f0       	push   $0xf013ab04
f0129a29:	e8 03 74 fd ff       	call   f0100e31 <cprintf>
f0129a2e:	83 c4 10             	add    $0x10,%esp
f0129a31:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f0129a38:	e8 25 30 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129a3d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a40:	e8 3f ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129a45:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f0129a48:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129a4e:	83 ec 0c             	sub    $0xc,%esp
f0129a51:	50                   	push   %eax
f0129a52:	e8 bb e5 fd ff       	call   f0108012 <kfree>
f0129a57:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a5a:	e8 25 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129a5f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a62:	74 1d                	je     f0129a81 <test_kfreelast+0x1ad6>
f0129a64:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a68:	75 17                	jne    f0129a81 <test_kfreelast+0x1ad6>
f0129a6a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a71:	83 ec 0c             	sub    $0xc,%esp
f0129a74:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129a79:	e8 b3 73 fd ff       	call   f0100e31 <cprintf>
f0129a7e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129a81:	e8 dc 2f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129a86:	89 c2                	mov    %eax,%edx
f0129a88:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a8b:	29 c2                	sub    %eax,%edx
f0129a8d:	89 d0                	mov    %edx,%eax
f0129a8f:	83 f8 0d             	cmp    $0xd,%eax
f0129a92:	74 1d                	je     f0129ab1 <test_kfreelast+0x1b06>
f0129a94:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a98:	75 17                	jne    f0129ab1 <test_kfreelast+0x1b06>
f0129a9a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129aa1:	83 ec 0c             	sub    $0xc,%esp
f0129aa4:	68 98 ab 13 f0       	push   $0xf013ab98
f0129aa9:	e8 83 73 fd ff       	call   f0100e31 <cprintf>
f0129aae:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129ab1:	83 ec 0c             	sub    $0xc,%esp
f0129ab4:	6a 03                	push   $0x3
f0129ab6:	e8 42 34 fe ff       	call   f010cefd <sys_bypassPageFault>
f0129abb:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f0129abe:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129ac4:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f0129ac7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ace:	eb 3c                	jmp    f0129b0c <test_kfreelast+0x1b61>
		{
			ptr[i] = 10;
f0129ad0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129ad3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129ad6:	01 d0                	add    %edx,%eax
f0129ad8:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129adb:	e8 0b 34 fe ff       	call   f010ceeb <sys_rcr2>
f0129ae0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129ae3:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0129ae6:	01 ca                	add    %ecx,%edx
f0129ae8:	39 d0                	cmp    %edx,%eax
f0129aea:	74 1d                	je     f0129b09 <test_kfreelast+0x1b5e>
f0129aec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129af0:	75 17                	jne    f0129b09 <test_kfreelast+0x1b5e>
f0129af2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129af9:	83 ec 0c             	sub    $0xc,%esp
f0129afc:	68 b0 ac 13 f0       	push   $0xf013acb0
f0129b01:	e8 2b 73 fd ff       	call   f0100e31 <cprintf>
f0129b06:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f0129b09:	ff 45 f4             	incl   -0xc(%ebp)
f0129b0c:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f0129b13:	7e bb                	jle    f0129ad0 <test_kfreelast+0x1b25>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129b15:	83 ec 0c             	sub    $0xc,%esp
f0129b18:	6a 00                	push   $0x0
f0129b1a:	e8 de 33 fe ff       	call   f010cefd <sys_bypassPageFault>
f0129b1f:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f0129b22:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129b28:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129b2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b32:	eb 1e                	jmp    f0129b52 <test_kfreelast+0x1ba7>
		{
			sums[14] += ptr[i] ;
f0129b34:	8b 95 6c fe ff ff    	mov    -0x194(%ebp),%edx
f0129b3a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129b3d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129b40:	01 c8                	add    %ecx,%eax
f0129b42:	8a 00                	mov    (%eax),%al
f0129b44:	0f be c0             	movsbl %al,%eax
f0129b47:	01 d0                	add    %edx,%eax
f0129b49:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0129b4f:	ff 45 f4             	incl   -0xc(%ebp)
f0129b52:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129b58:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129b5b:	7f d7                	jg     f0129b34 <test_kfreelast+0x1b89>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129b5d:	8b 8d 6c fe ff ff    	mov    -0x194(%ebp),%ecx
f0129b63:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f0129b69:	89 d0                	mov    %edx,%eax
f0129b6b:	01 c0                	add    %eax,%eax
f0129b6d:	01 d0                	add    %edx,%eax
f0129b6f:	01 c0                	add    %eax,%eax
f0129b71:	01 d0                	add    %edx,%eax
f0129b73:	01 c0                	add    %eax,%eax
f0129b75:	39 c1                	cmp    %eax,%ecx
f0129b77:	74 1d                	je     f0129b96 <test_kfreelast+0x1beb>
f0129b79:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b7d:	75 17                	jne    f0129b96 <test_kfreelast+0x1beb>
f0129b7f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b86:	83 ec 0c             	sub    $0xc,%esp
f0129b89:	68 7c ac 13 f0       	push   $0xf013ac7c
f0129b8e:	e8 9e 72 fd ff       	call   f0100e31 <cprintf>
f0129b93:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129b96:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b9a:	75 17                	jne    f0129bb3 <test_kfreelast+0x1c08>
f0129b9c:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0129ba0:	83 ec 08             	sub    $0x8,%esp
f0129ba3:	ff 75 f0             	pushl  -0x10(%ebp)
f0129ba6:	68 04 ab 13 f0       	push   $0xf013ab04
f0129bab:	e8 81 72 fd ff       	call   f0100e31 <cprintf>
f0129bb0:	83 c4 10             	add    $0x10,%esp
f0129bb3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129bba:	e8 a3 2e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129bbf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129bc2:	e8 bd aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129bc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f0129bca:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0129bd0:	83 ec 0c             	sub    $0xc,%esp
f0129bd3:	50                   	push   %eax
f0129bd4:	e8 39 e4 fd ff       	call   f0108012 <kfree>
f0129bd9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129bdc:	e8 a3 aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129be1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129be4:	74 1d                	je     f0129c03 <test_kfreelast+0x1c58>
f0129be6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129bea:	75 17                	jne    f0129c03 <test_kfreelast+0x1c58>
f0129bec:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129bf3:	83 ec 0c             	sub    $0xc,%esp
f0129bf6:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129bfb:	e8 31 72 fd ff       	call   f0100e31 <cprintf>
f0129c00:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129c03:	e8 5a 2e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129c08:	89 c2                	mov    %eax,%edx
f0129c0a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129c0d:	29 c2                	sub    %eax,%edx
f0129c0f:	89 d0                	mov    %edx,%eax
f0129c11:	83 f8 02             	cmp    $0x2,%eax
f0129c14:	74 1d                	je     f0129c33 <test_kfreelast+0x1c88>
f0129c16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c1a:	75 17                	jne    f0129c33 <test_kfreelast+0x1c88>
f0129c1c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c23:	83 ec 0c             	sub    $0xc,%esp
f0129c26:	68 98 ab 13 f0       	push   $0xf013ab98
f0129c2b:	e8 01 72 fd ff       	call   f0100e31 <cprintf>
f0129c30:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c33:	e8 2a 2e fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129c38:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c3b:	e8 44 aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129c40:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f0129c43:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129c49:	83 ec 0c             	sub    $0xc,%esp
f0129c4c:	50                   	push   %eax
f0129c4d:	e8 c0 e3 fd ff       	call   f0108012 <kfree>
f0129c52:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129c55:	e8 2a aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129c5a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c5d:	74 1d                	je     f0129c7c <test_kfreelast+0x1cd1>
f0129c5f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c63:	75 17                	jne    f0129c7c <test_kfreelast+0x1cd1>
f0129c65:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c6c:	83 ec 0c             	sub    $0xc,%esp
f0129c6f:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129c74:	e8 b8 71 fd ff       	call   f0100e31 <cprintf>
f0129c79:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129c7c:	e8 e1 2d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129c81:	89 c2                	mov    %eax,%edx
f0129c83:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129c86:	29 c2                	sub    %eax,%edx
f0129c88:	89 d0                	mov    %edx,%eax
f0129c8a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129c8f:	74 1d                	je     f0129cae <test_kfreelast+0x1d03>
f0129c91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c95:	75 17                	jne    f0129cae <test_kfreelast+0x1d03>
f0129c97:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c9e:	83 ec 0c             	sub    $0xc,%esp
f0129ca1:	68 98 ab 13 f0       	push   $0xf013ab98
f0129ca6:	e8 86 71 fd ff       	call   f0100e31 <cprintf>
f0129cab:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129cae:	e8 af 2d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129cb3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cb6:	e8 c9 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129cbb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f0129cbe:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0129cc4:	83 ec 0c             	sub    $0xc,%esp
f0129cc7:	50                   	push   %eax
f0129cc8:	e8 45 e3 fd ff       	call   f0108012 <kfree>
f0129ccd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129cd0:	e8 af a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129cd5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129cd8:	74 1d                	je     f0129cf7 <test_kfreelast+0x1d4c>
f0129cda:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129cde:	75 17                	jne    f0129cf7 <test_kfreelast+0x1d4c>
f0129ce0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ce7:	83 ec 0c             	sub    $0xc,%esp
f0129cea:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129cef:	e8 3d 71 fd ff       	call   f0100e31 <cprintf>
f0129cf4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129cf7:	e8 66 2d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129cfc:	89 c2                	mov    %eax,%edx
f0129cfe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129d01:	29 c2                	sub    %eax,%edx
f0129d03:	89 d0                	mov    %edx,%eax
f0129d05:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129d0a:	74 1d                	je     f0129d29 <test_kfreelast+0x1d7e>
f0129d0c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d10:	75 17                	jne    f0129d29 <test_kfreelast+0x1d7e>
f0129d12:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d19:	83 ec 0c             	sub    $0xc,%esp
f0129d1c:	68 98 ab 13 f0       	push   $0xf013ab98
f0129d21:	e8 0b 71 fd ff       	call   f0100e31 <cprintf>
f0129d26:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129d29:	e8 34 2d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129d2e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d31:	e8 4e a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d36:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129d39:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129d3f:	83 ec 0c             	sub    $0xc,%esp
f0129d42:	50                   	push   %eax
f0129d43:	e8 ca e2 fd ff       	call   f0108012 <kfree>
f0129d48:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129d4b:	e8 34 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d50:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d53:	74 1d                	je     f0129d72 <test_kfreelast+0x1dc7>
f0129d55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d59:	75 17                	jne    f0129d72 <test_kfreelast+0x1dc7>
f0129d5b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d62:	83 ec 0c             	sub    $0xc,%esp
f0129d65:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129d6a:	e8 c2 70 fd ff       	call   f0100e31 <cprintf>
f0129d6f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129d72:	e8 eb 2c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129d77:	89 c2                	mov    %eax,%edx
f0129d79:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129d7c:	29 c2                	sub    %eax,%edx
f0129d7e:	89 d0                	mov    %edx,%eax
f0129d80:	83 f8 01             	cmp    $0x1,%eax
f0129d83:	74 1d                	je     f0129da2 <test_kfreelast+0x1df7>
f0129d85:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d89:	75 17                	jne    f0129da2 <test_kfreelast+0x1df7>
f0129d8b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d92:	83 ec 0c             	sub    $0xc,%esp
f0129d95:	68 98 ab 13 f0       	push   $0xf013ab98
f0129d9a:	e8 92 70 fd ff       	call   f0100e31 <cprintf>
f0129d9f:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129da2:	e8 bb 2c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129da7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129daa:	e8 d5 a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129daf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f0129db2:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0129db8:	83 ec 0c             	sub    $0xc,%esp
f0129dbb:	50                   	push   %eax
f0129dbc:	e8 51 e2 fd ff       	call   f0108012 <kfree>
f0129dc1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129dc4:	e8 bb a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129dc9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129dcc:	74 1d                	je     f0129deb <test_kfreelast+0x1e40>
f0129dce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129dd2:	75 17                	jne    f0129deb <test_kfreelast+0x1e40>
f0129dd4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ddb:	83 ec 0c             	sub    $0xc,%esp
f0129dde:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129de3:	e8 49 70 fd ff       	call   f0100e31 <cprintf>
f0129de8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129deb:	e8 72 2c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129df0:	89 c2                	mov    %eax,%edx
f0129df2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129df5:	29 c2                	sub    %eax,%edx
f0129df7:	89 d0                	mov    %edx,%eax
f0129df9:	83 f8 01             	cmp    $0x1,%eax
f0129dfc:	74 1d                	je     f0129e1b <test_kfreelast+0x1e70>
f0129dfe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e02:	75 17                	jne    f0129e1b <test_kfreelast+0x1e70>
f0129e04:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e0b:	83 ec 0c             	sub    $0xc,%esp
f0129e0e:	68 98 ab 13 f0       	push   $0xf013ab98
f0129e13:	e8 19 70 fd ff       	call   f0100e31 <cprintf>
f0129e18:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f0129e1b:	e8 42 2c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129e20:	89 c2                	mov    %eax,%edx
f0129e22:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0129e25:	39 c2                	cmp    %eax,%edx
f0129e27:	74 1d                	je     f0129e46 <test_kfreelast+0x1e9b>
f0129e29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e2d:	75 17                	jne    f0129e46 <test_kfreelast+0x1e9b>
f0129e2f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e36:	83 ec 0c             	sub    $0xc,%esp
f0129e39:	68 f8 ac 13 f0       	push   $0xf013acf8
f0129e3e:	e8 ee 6f fd ff       	call   f0100e31 <cprintf>
f0129e43:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129e46:	83 ec 0c             	sub    $0xc,%esp
f0129e49:	6a 03                	push   $0x3
f0129e4b:	e8 ad 30 fe ff       	call   f010cefd <sys_bypassPageFault>
f0129e50:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f0129e53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e5a:	e9 8e 00 00 00       	jmp    f0129eed <test_kfreelast+0x1f42>
		{
			ptr = (char *) ptr_allocations[i];
f0129e5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129e62:	8b 84 85 e4 fd ff ff 	mov    -0x21c(%ebp,%eax,4),%eax
f0129e69:	89 45 9c             	mov    %eax,-0x64(%ebp)
			ptr[0] = 10;
f0129e6c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129e6f:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129e72:	e8 74 30 fe ff       	call   f010ceeb <sys_rcr2>
f0129e77:	89 c2                	mov    %eax,%edx
f0129e79:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129e7c:	39 c2                	cmp    %eax,%edx
f0129e7e:	74 1d                	je     f0129e9d <test_kfreelast+0x1ef2>
f0129e80:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e84:	75 17                	jne    f0129e9d <test_kfreelast+0x1ef2>
f0129e86:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e8d:	83 ec 0c             	sub    $0xc,%esp
f0129e90:	68 b0 ac 13 f0       	push   $0xf013acb0
f0129e95:	e8 97 6f fd ff       	call   f0100e31 <cprintf>
f0129e9a:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f0129e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129ea0:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129ea7:	89 c2                	mov    %eax,%edx
f0129ea9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129eac:	01 d0                	add    %edx,%eax
f0129eae:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129eb1:	e8 35 30 fe ff       	call   f010ceeb <sys_rcr2>
f0129eb6:	89 c2                	mov    %eax,%edx
f0129eb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129ebb:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129ec2:	89 c1                	mov    %eax,%ecx
f0129ec4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129ec7:	01 c8                	add    %ecx,%eax
f0129ec9:	39 c2                	cmp    %eax,%edx
f0129ecb:	74 1d                	je     f0129eea <test_kfreelast+0x1f3f>
f0129ecd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ed1:	75 17                	jne    f0129eea <test_kfreelast+0x1f3f>
f0129ed3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129eda:	83 ec 0c             	sub    $0xc,%esp
f0129edd:	68 b0 ac 13 f0       	push   $0xf013acb0
f0129ee2:	e8 4a 6f fd ff       	call   f0100e31 <cprintf>
f0129ee7:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f0129eea:	ff 45 f4             	incl   -0xc(%ebp)
f0129eed:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f0129ef1:	0f 8e 68 ff ff ff    	jle    f0129e5f <test_kfreelast+0x1eb4>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129ef7:	83 ec 0c             	sub    $0xc,%esp
f0129efa:	6a 00                	push   $0x0
f0129efc:	e8 fc 2f fe ff       	call   f010cefd <sys_bypassPageFault>
f0129f01:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129f04:	e8 59 2b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129f09:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f0c:	e8 73 a7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129f11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f0129f14:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0129f1a:	83 ec 0c             	sub    $0xc,%esp
f0129f1d:	50                   	push   %eax
f0129f1e:	e8 ef e0 fd ff       	call   f0108012 <kfree>
f0129f23:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129f26:	e8 59 a7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129f2b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129f2e:	74 1d                	je     f0129f4d <test_kfreelast+0x1fa2>
f0129f30:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f34:	75 17                	jne    f0129f4d <test_kfreelast+0x1fa2>
f0129f36:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f3d:	83 ec 0c             	sub    $0xc,%esp
f0129f40:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129f45:	e8 e7 6e fd ff       	call   f0100e31 <cprintf>
f0129f4a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129f4d:	e8 10 2b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129f52:	89 c2                	mov    %eax,%edx
f0129f54:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129f57:	39 c2                	cmp    %eax,%edx
f0129f59:	74 1d                	je     f0129f78 <test_kfreelast+0x1fcd>
f0129f5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f5f:	75 17                	jne    f0129f78 <test_kfreelast+0x1fcd>
f0129f61:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f68:	83 ec 0c             	sub    $0xc,%esp
f0129f6b:	68 30 ad 13 f0       	push   $0xf013ad30
f0129f70:	e8 bc 6e fd ff       	call   f0100e31 <cprintf>
f0129f75:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f78:	e8 e5 2a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129f7d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f80:	e8 ff a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129f85:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129f88:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129f8e:	83 ec 0c             	sub    $0xc,%esp
f0129f91:	50                   	push   %eax
f0129f92:	e8 7b e0 fd ff       	call   f0108012 <kfree>
f0129f97:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129f9a:	e8 e5 a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129f9f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129fa2:	74 1d                	je     f0129fc1 <test_kfreelast+0x2016>
f0129fa4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129fa8:	75 17                	jne    f0129fc1 <test_kfreelast+0x2016>
f0129faa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129fb1:	83 ec 0c             	sub    $0xc,%esp
f0129fb4:	68 2c ab 13 f0       	push   $0xf013ab2c
f0129fb9:	e8 73 6e fd ff       	call   f0100e31 <cprintf>
f0129fbe:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129fc1:	e8 9c 2a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129fc6:	89 c2                	mov    %eax,%edx
f0129fc8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129fcb:	39 c2                	cmp    %eax,%edx
f0129fcd:	74 1d                	je     f0129fec <test_kfreelast+0x2041>
f0129fcf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129fd3:	75 17                	jne    f0129fec <test_kfreelast+0x2041>
f0129fd5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129fdc:	83 ec 0c             	sub    $0xc,%esp
f0129fdf:	68 30 ad 13 f0       	push   $0xf013ad30
f0129fe4:	e8 48 6e fd ff       	call   f0100e31 <cprintf>
f0129fe9:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129fec:	e8 71 2a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f0129ff1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ff4:	e8 8b a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129ff9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129ffc:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012a002:	83 ec 0c             	sub    $0xc,%esp
f012a005:	50                   	push   %eax
f012a006:	e8 07 e0 fd ff       	call   f0108012 <kfree>
f012a00b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a00e:	e8 71 a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a013:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a016:	74 1d                	je     f012a035 <test_kfreelast+0x208a>
f012a018:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a01c:	75 17                	jne    f012a035 <test_kfreelast+0x208a>
f012a01e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a025:	83 ec 0c             	sub    $0xc,%esp
f012a028:	68 2c ab 13 f0       	push   $0xf013ab2c
f012a02d:	e8 ff 6d fd ff       	call   f0100e31 <cprintf>
f012a032:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012a035:	e8 28 2a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a03a:	89 c2                	mov    %eax,%edx
f012a03c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a03f:	39 c2                	cmp    %eax,%edx
f012a041:	74 1d                	je     f012a060 <test_kfreelast+0x20b5>
f012a043:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a047:	75 17                	jne    f012a060 <test_kfreelast+0x20b5>
f012a049:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a050:	83 ec 0c             	sub    $0xc,%esp
f012a053:	68 30 ad 13 f0       	push   $0xf013ad30
f012a058:	e8 d4 6d fd ff       	call   f0100e31 <cprintf>
f012a05d:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a060:	e8 fd 29 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a065:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a068:	e8 17 a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a06d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a070:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012a076:	83 ec 0c             	sub    $0xc,%esp
f012a079:	50                   	push   %eax
f012a07a:	e8 93 df fd ff       	call   f0108012 <kfree>
f012a07f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a082:	e8 fd a5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a087:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a08a:	74 1d                	je     f012a0a9 <test_kfreelast+0x20fe>
f012a08c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a090:	75 17                	jne    f012a0a9 <test_kfreelast+0x20fe>
f012a092:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a099:	83 ec 0c             	sub    $0xc,%esp
f012a09c:	68 2c ab 13 f0       	push   $0xf013ab2c
f012a0a1:	e8 8b 6d fd ff       	call   f0100e31 <cprintf>
f012a0a6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012a0a9:	e8 b4 29 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a0ae:	89 c2                	mov    %eax,%edx
f012a0b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a0b3:	39 c2                	cmp    %eax,%edx
f012a0b5:	74 1d                	je     f012a0d4 <test_kfreelast+0x2129>
f012a0b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a0bb:	75 17                	jne    f012a0d4 <test_kfreelast+0x2129>
f012a0bd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a0c4:	83 ec 0c             	sub    $0xc,%esp
f012a0c7:	68 30 ad 13 f0       	push   $0xf013ad30
f012a0cc:	e8 60 6d fd ff       	call   f0100e31 <cprintf>
f012a0d1:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a0d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a0d8:	75 17                	jne    f012a0f1 <test_kfreelast+0x2146>
f012a0da:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012a0de:	83 ec 08             	sub    $0x8,%esp
f012a0e1:	ff 75 f0             	pushl  -0x10(%ebp)
f012a0e4:	68 04 ab 13 f0       	push   $0xf013ab04
f012a0e9:	e8 43 6d fd ff       	call   f0100e31 <cprintf>
f012a0ee:	83 c4 10             	add    $0x10,%esp
f012a0f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012a0f8:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012a0fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012a100:	5b                   	pop    %ebx
f012a101:	5f                   	pop    %edi
f012a102:	5d                   	pop    %ebp
f012a103:	c3                   	ret    

f012a104 <test_krealloc>:

int test_krealloc() {
f012a104:	55                   	push   %ebp
f012a105:	89 e5                	mov    %esp,%ebp
f012a107:	57                   	push   %edi
f012a108:	53                   	push   %ebx
f012a109:	81 ec 00 02 00 00    	sub    $0x200,%esp
	cprintf("==============================================\n");
f012a10f:	83 ec 0c             	sub    $0xc,%esp
f012a112:	68 14 9a 13 f0       	push   $0xf0139a14
f012a117:	e8 15 6d fd ff       	call   f0100e31 <cprintf>
f012a11c:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012a11f:	83 ec 0c             	sub    $0xc,%esp
f012a122:	68 44 9a 13 f0       	push   $0xf0139a44
f012a127:	e8 05 6d fd ff       	call   f0100e31 <cprintf>
f012a12c:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012a12f:	83 ec 0c             	sub    $0xc,%esp
f012a132:	68 14 9a 13 f0       	push   $0xf0139a14
f012a137:	e8 f5 6c fd ff       	call   f0100e31 <cprintf>
f012a13c:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012a13f:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012a143:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012a147:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012a14d:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012a153:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012a15a:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012a161:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f012a167:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a16c:	b8 00 00 00 00       	mov    $0x0,%eax
f012a171:	89 d7                	mov    %edx,%edi
f012a173:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012a175:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012a17c:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012a182:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a187:	b8 00 00 00 00       	mov    $0x0,%eax
f012a18c:	89 d7                	mov    %edx,%edi
f012a18e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012a190:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012a196:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a19b:	b8 00 00 00 00       	mov    $0x0,%eax
f012a1a0:	89 d7                	mov    %edx,%edi
f012a1a2:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a1a4:	e8 b9 28 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a1a9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012a1ac:	83 ec 08             	sub    $0x8,%esp
f012a1af:	68 00 fc 0f 00       	push   $0xffc00
f012a1b4:	6a 00                	push   $0x0
f012a1b6:	e8 f6 de fd ff       	call   f01080b1 <krealloc>
f012a1bb:	83 c4 10             	add    $0x10,%esp
f012a1be:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012a1c4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a1ca:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012a1cf:	77 17                	ja     f012a1e8 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a1d1:	83 ec 04             	sub    $0x4,%esp
f012a1d4:	68 78 ad 13 f0       	push   $0xf013ad78
f012a1d9:	68 e2 0e 00 00       	push   $0xee2
f012a1de:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a1e3:	e8 c8 5f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012a1e8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a1ee:	89 c1                	mov    %eax,%ecx
f012a1f0:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012a1f7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a1fc:	0f b6 d0             	movzbl %al,%edx
f012a1ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012a202:	01 d0                	add    %edx,%eax
f012a204:	48                   	dec    %eax
f012a205:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012a208:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a20b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a210:	f7 75 b4             	divl   -0x4c(%ebp)
f012a213:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a216:	29 d0                	sub    %edx,%eax
f012a218:	89 c3                	mov    %eax,%ebx
f012a21a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012a221:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a226:	0f b6 c0             	movzbl %al,%eax
f012a229:	c1 e0 04             	shl    $0x4,%eax
f012a22c:	89 c2                	mov    %eax,%edx
f012a22e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012a231:	01 d0                	add    %edx,%eax
f012a233:	48                   	dec    %eax
f012a234:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012a237:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a23a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a23f:	f7 75 ac             	divl   -0x54(%ebp)
f012a242:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a245:	29 d0                	sub    %edx,%eax
f012a247:	01 d8                	add    %ebx,%eax
f012a249:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012a24e:	39 c1                	cmp    %eax,%ecx
f012a250:	74 17                	je     f012a269 <test_krealloc+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012a252:	83 ec 04             	sub    $0x4,%esp
f012a255:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a25a:	68 e4 0e 00 00       	push   $0xee4
f012a25f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a264:	e8 47 5f fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a269:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a26c:	e8 f1 27 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a271:	29 c3                	sub    %eax,%ebx
f012a273:	89 d8                	mov    %ebx,%eax
f012a275:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a27a:	74 17                	je     f012a293 <test_krealloc+0x18f>
			panic("krealloc: Wrong allocation: ");
f012a27c:	83 ec 04             	sub    $0x4,%esp
f012a27f:	68 e6 ad 13 f0       	push   $0xf013ade6
f012a284:	68 e7 0e 00 00       	push   $0xee7
f012a289:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a28e:	e8 1d 5f fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a293:	c7 85 58 fe ff ff ff 	movl   $0xffbff,-0x1a8(%ebp)
f012a29a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a29d:	e8 c0 27 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a2a2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012a2a5:	83 ec 08             	sub    $0x8,%esp
f012a2a8:	68 00 fc 0f 00       	push   $0xffc00
f012a2ad:	6a 00                	push   $0x0
f012a2af:	e8 fd dd fd ff       	call   f01080b1 <krealloc>
f012a2b4:	83 c4 10             	add    $0x10,%esp
f012a2b7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012a2bd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a2c3:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012a2c8:	77 17                	ja     f012a2e1 <test_krealloc+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a2ca:	83 ec 04             	sub    $0x4,%esp
f012a2cd:	68 78 ad 13 f0       	push   $0xf013ad78
f012a2d2:	68 ef 0e 00 00       	push   $0xeef
f012a2d7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a2dc:	e8 cf 5e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012a2e1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a2e7:	89 c1                	mov    %eax,%ecx
f012a2e9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a2f0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a2f5:	0f b6 d0             	movzbl %al,%edx
f012a2f8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a2fb:	01 d0                	add    %edx,%eax
f012a2fd:	48                   	dec    %eax
f012a2fe:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a301:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a304:	ba 00 00 00 00       	mov    $0x0,%edx
f012a309:	f7 75 a4             	divl   -0x5c(%ebp)
f012a30c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a30f:	29 d0                	sub    %edx,%eax
f012a311:	89 c3                	mov    %eax,%ebx
f012a313:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a31a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a31f:	0f b6 c0             	movzbl %al,%eax
f012a322:	c1 e0 04             	shl    $0x4,%eax
f012a325:	89 c2                	mov    %eax,%edx
f012a327:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a32a:	01 d0                	add    %edx,%eax
f012a32c:	48                   	dec    %eax
f012a32d:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a330:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a333:	ba 00 00 00 00       	mov    $0x0,%edx
f012a338:	f7 75 9c             	divl   -0x64(%ebp)
f012a33b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a33e:	29 d0                	sub    %edx,%eax
f012a340:	01 d8                	add    %ebx,%eax
f012a342:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012a347:	39 c1                	cmp    %eax,%ecx
f012a349:	74 17                	je     f012a362 <test_krealloc+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012a34b:	83 ec 04             	sub    $0x4,%esp
f012a34e:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a353:	68 f1 0e 00 00       	push   $0xef1
f012a358:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a35d:	e8 4e 5e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a362:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a365:	e8 f8 26 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a36a:	29 c3                	sub    %eax,%ebx
f012a36c:	89 d8                	mov    %ebx,%eax
f012a36e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a373:	74 17                	je     f012a38c <test_krealloc+0x288>
			panic("krealloc: Wrong allocation: ");
f012a375:	83 ec 04             	sub    $0x4,%esp
f012a378:	68 e6 ad 13 f0       	push   $0xf013ade6
f012a37d:	68 f3 0e 00 00       	push   $0xef3
f012a382:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a387:	e8 24 5e fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a38c:	c7 85 5c fe ff ff ff 	movl   $0xffbff,-0x1a4(%ebp)
f012a393:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a396:	e8 c7 26 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a39b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012a39e:	83 ec 08             	sub    $0x8,%esp
f012a3a1:	68 00 fc 0f 00       	push   $0xffc00
f012a3a6:	6a 00                	push   $0x0
f012a3a8:	e8 04 dd fd ff       	call   f01080b1 <krealloc>
f012a3ad:	83 c4 10             	add    $0x10,%esp
f012a3b0:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012a3b6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a3bc:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012a3c1:	77 17                	ja     f012a3da <test_krealloc+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a3c3:	83 ec 04             	sub    $0x4,%esp
f012a3c6:	68 78 ad 13 f0       	push   $0xf013ad78
f012a3cb:	68 fb 0e 00 00       	push   $0xefb
f012a3d0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a3d5:	e8 d6 5d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012a3da:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a3e0:	89 c1                	mov    %eax,%ecx
f012a3e2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a3e9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a3ee:	0f b6 d0             	movzbl %al,%edx
f012a3f1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a3f4:	01 d0                	add    %edx,%eax
f012a3f6:	48                   	dec    %eax
f012a3f7:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a3fa:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a3fd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a402:	f7 75 94             	divl   -0x6c(%ebp)
f012a405:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a408:	29 d0                	sub    %edx,%eax
f012a40a:	89 c3                	mov    %eax,%ebx
f012a40c:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a413:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a418:	0f b6 c0             	movzbl %al,%eax
f012a41b:	c1 e0 04             	shl    $0x4,%eax
f012a41e:	89 c2                	mov    %eax,%edx
f012a420:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a423:	01 d0                	add    %edx,%eax
f012a425:	48                   	dec    %eax
f012a426:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a429:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a42c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a431:	f7 75 8c             	divl   -0x74(%ebp)
f012a434:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a437:	29 d0                	sub    %edx,%eax
f012a439:	01 d8                	add    %ebx,%eax
f012a43b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a440:	39 c1                	cmp    %eax,%ecx
f012a442:	74 17                	je     f012a45b <test_krealloc+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012a444:	83 ec 04             	sub    $0x4,%esp
f012a447:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a44c:	68 fd 0e 00 00       	push   $0xefd
f012a451:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a456:	e8 55 5d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a45b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a45e:	e8 ff 25 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a463:	29 c3                	sub    %eax,%ebx
f012a465:	89 d8                	mov    %ebx,%eax
f012a467:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a46c:	74 17                	je     f012a485 <test_krealloc+0x381>
			panic("krealloc: Wrong allocation: ");
f012a46e:	83 ec 04             	sub    $0x4,%esp
f012a471:	68 e6 ad 13 f0       	push   $0xf013ade6
f012a476:	68 ff 0e 00 00       	push   $0xeff
f012a47b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a480:	e8 2b 5d fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a485:	c7 85 60 fe ff ff ff 	movl   $0x3feff,-0x1a0(%ebp)
f012a48c:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a48f:	e8 ce 25 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a494:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012a497:	83 ec 08             	sub    $0x8,%esp
f012a49a:	68 00 fc 0f 00       	push   $0xffc00
f012a49f:	6a 00                	push   $0x0
f012a4a1:	e8 0b dc fd ff       	call   f01080b1 <krealloc>
f012a4a6:	83 c4 10             	add    $0x10,%esp
f012a4a9:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012a4af:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a4b5:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012a4ba:	77 17                	ja     f012a4d3 <test_krealloc+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a4bc:	83 ec 04             	sub    $0x4,%esp
f012a4bf:	68 78 ad 13 f0       	push   $0xf013ad78
f012a4c4:	68 06 0f 00 00       	push   $0xf06
f012a4c9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a4ce:	e8 dd 5c fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012a4d3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a4d9:	89 c1                	mov    %eax,%ecx
f012a4db:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012a4e2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a4e7:	0f b6 d0             	movzbl %al,%edx
f012a4ea:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4ed:	01 d0                	add    %edx,%eax
f012a4ef:	48                   	dec    %eax
f012a4f0:	89 45 80             	mov    %eax,-0x80(%ebp)
f012a4f3:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a4f6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4fb:	f7 75 84             	divl   -0x7c(%ebp)
f012a4fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a501:	29 d0                	sub    %edx,%eax
f012a503:	89 c3                	mov    %eax,%ebx
f012a505:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012a50c:	10 00 00 
f012a50f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a514:	0f b6 c0             	movzbl %al,%eax
f012a517:	c1 e0 04             	shl    $0x4,%eax
f012a51a:	89 c2                	mov    %eax,%edx
f012a51c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a522:	01 d0                	add    %edx,%eax
f012a524:	48                   	dec    %eax
f012a525:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012a52b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a531:	ba 00 00 00 00       	mov    $0x0,%edx
f012a536:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012a53c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a542:	29 d0                	sub    %edx,%eax
f012a544:	01 d8                	add    %ebx,%eax
f012a546:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012a54b:	39 c1                	cmp    %eax,%ecx
f012a54d:	74 17                	je     f012a566 <test_krealloc+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012a54f:	83 ec 04             	sub    $0x4,%esp
f012a552:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a557:	68 08 0f 00 00       	push   $0xf08
f012a55c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a561:	e8 4a 5c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a566:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a569:	e8 f4 24 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a56e:	29 c3                	sub    %eax,%ebx
f012a570:	89 d8                	mov    %ebx,%eax
f012a572:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a577:	74 17                	je     f012a590 <test_krealloc+0x48c>
			panic("krealloc: Wrong allocation: ");
f012a579:	83 ec 04             	sub    $0x4,%esp
f012a57c:	68 e6 ad 13 f0       	push   $0xf013ade6
f012a581:	68 0a 0f 00 00       	push   $0xf0a
f012a586:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a58b:	e8 20 5c fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a590:	c7 85 64 fe ff ff ff 	movl   $0x3feff,-0x19c(%ebp)
f012a597:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a59a:	e8 c3 24 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a59f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012a5a2:	83 ec 08             	sub    $0x8,%esp
f012a5a5:	68 00 fc 1f 00       	push   $0x1ffc00
f012a5aa:	6a 00                	push   $0x0
f012a5ac:	e8 00 db fd ff       	call   f01080b1 <krealloc>
f012a5b1:	83 c4 10             	add    $0x10,%esp
f012a5b4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012a5ba:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a5c0:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012a5c5:	77 17                	ja     f012a5de <test_krealloc+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a5c7:	83 ec 04             	sub    $0x4,%esp
f012a5ca:	68 78 ad 13 f0       	push   $0xf013ad78
f012a5cf:	68 11 0f 00 00       	push   $0xf11
f012a5d4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a5d9:	e8 d2 5b fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012a5de:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a5e4:	89 c1                	mov    %eax,%ecx
f012a5e6:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012a5ed:	10 00 00 
f012a5f0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a5f5:	0f b6 d0             	movzbl %al,%edx
f012a5f8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a5fe:	01 d0                	add    %edx,%eax
f012a600:	48                   	dec    %eax
f012a601:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012a607:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a60d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a612:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012a618:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a61e:	29 d0                	sub    %edx,%eax
f012a620:	89 c3                	mov    %eax,%ebx
f012a622:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012a629:	10 00 00 
f012a62c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a631:	0f b6 c0             	movzbl %al,%eax
f012a634:	c1 e0 04             	shl    $0x4,%eax
f012a637:	89 c2                	mov    %eax,%edx
f012a639:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a63f:	01 d0                	add    %edx,%eax
f012a641:	48                   	dec    %eax
f012a642:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012a648:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a64e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a653:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012a659:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a65f:	29 d0                	sub    %edx,%eax
f012a661:	01 d8                	add    %ebx,%eax
f012a663:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a668:	39 c1                	cmp    %eax,%ecx
f012a66a:	74 17                	je     f012a683 <test_krealloc+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012a66c:	83 ec 04             	sub    $0x4,%esp
f012a66f:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a674:	68 13 0f 00 00       	push   $0xf13
f012a679:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a67e:	e8 2d 5b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a683:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a686:	e8 d7 23 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a68b:	29 c3                	sub    %eax,%ebx
f012a68d:	89 d8                	mov    %ebx,%eax
f012a68f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a694:	74 17                	je     f012a6ad <test_krealloc+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012a696:	83 ec 04             	sub    $0x4,%esp
f012a699:	68 e6 ad 13 f0       	push   $0xf013ade6
f012a69e:	68 15 0f 00 00       	push   $0xf15
f012a6a3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a6a8:	e8 03 5b fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a6ad:	c7 85 68 fe ff ff ff 	movl   $0xffdff,-0x198(%ebp)
f012a6b4:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a6b7:	e8 a6 23 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a6bc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012a6bf:	83 ec 08             	sub    $0x8,%esp
f012a6c2:	68 00 fc 1f 00       	push   $0x1ffc00
f012a6c7:	6a 00                	push   $0x0
f012a6c9:	e8 e3 d9 fd ff       	call   f01080b1 <krealloc>
f012a6ce:	83 c4 10             	add    $0x10,%esp
f012a6d1:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012a6d7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a6dd:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012a6e2:	77 17                	ja     f012a6fb <test_krealloc+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a6e4:	83 ec 04             	sub    $0x4,%esp
f012a6e7:	68 78 ad 13 f0       	push   $0xf013ad78
f012a6ec:	68 1c 0f 00 00       	push   $0xf1c
f012a6f1:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a6f6:	e8 b5 5a fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012a6fb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a701:	89 c1                	mov    %eax,%ecx
f012a703:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012a70a:	10 00 00 
f012a70d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a712:	0f b6 d0             	movzbl %al,%edx
f012a715:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a71b:	01 d0                	add    %edx,%eax
f012a71d:	48                   	dec    %eax
f012a71e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012a724:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a72a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a72f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012a735:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a73b:	29 d0                	sub    %edx,%eax
f012a73d:	89 c3                	mov    %eax,%ebx
f012a73f:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012a746:	10 00 00 
f012a749:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a74e:	0f b6 c0             	movzbl %al,%eax
f012a751:	c1 e0 04             	shl    $0x4,%eax
f012a754:	89 c2                	mov    %eax,%edx
f012a756:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a75c:	01 d0                	add    %edx,%eax
f012a75e:	48                   	dec    %eax
f012a75f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012a765:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a76b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a770:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012a776:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a77c:	29 d0                	sub    %edx,%eax
f012a77e:	01 d8                	add    %ebx,%eax
f012a780:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012a785:	39 c1                	cmp    %eax,%ecx
f012a787:	74 17                	je     f012a7a0 <test_krealloc+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012a789:	83 ec 04             	sub    $0x4,%esp
f012a78c:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a791:	68 1e 0f 00 00       	push   $0xf1e
f012a796:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a79b:	e8 10 5a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a7a0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a7a3:	e8 ba 22 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a7a8:	29 c3                	sub    %eax,%ebx
f012a7aa:	89 d8                	mov    %ebx,%eax
f012a7ac:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a7b1:	74 17                	je     f012a7ca <test_krealloc+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012a7b3:	83 ec 04             	sub    $0x4,%esp
f012a7b6:	68 e6 ad 13 f0       	push   $0xf013ade6
f012a7bb:	68 20 0f 00 00       	push   $0xf20
f012a7c0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a7c5:	e8 e6 59 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a7ca:	c7 85 6c fe ff ff ff 	movl   $0xffdff,-0x194(%ebp)
f012a7d1:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a7d4:	e8 89 22 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a7d9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012a7dc:	83 ec 08             	sub    $0x8,%esp
f012a7df:	68 00 fc 2f 00       	push   $0x2ffc00
f012a7e4:	6a 00                	push   $0x0
f012a7e6:	e8 c6 d8 fd ff       	call   f01080b1 <krealloc>
f012a7eb:	83 c4 10             	add    $0x10,%esp
f012a7ee:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012a7f4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a7fa:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012a7ff:	77 17                	ja     f012a818 <test_krealloc+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a801:	83 ec 04             	sub    $0x4,%esp
f012a804:	68 78 ad 13 f0       	push   $0xf013ad78
f012a809:	68 27 0f 00 00       	push   $0xf27
f012a80e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a813:	e8 98 59 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012a818:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a81e:	89 c1                	mov    %eax,%ecx
f012a820:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012a827:	10 00 00 
f012a82a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a82f:	0f b6 d0             	movzbl %al,%edx
f012a832:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a838:	01 d0                	add    %edx,%eax
f012a83a:	48                   	dec    %eax
f012a83b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012a841:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a847:	ba 00 00 00 00       	mov    $0x0,%edx
f012a84c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012a852:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a858:	29 d0                	sub    %edx,%eax
f012a85a:	89 c3                	mov    %eax,%ebx
f012a85c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012a863:	10 00 00 
f012a866:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a86b:	0f b6 c0             	movzbl %al,%eax
f012a86e:	c1 e0 04             	shl    $0x4,%eax
f012a871:	89 c2                	mov    %eax,%edx
f012a873:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a879:	01 d0                	add    %edx,%eax
f012a87b:	48                   	dec    %eax
f012a87c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012a882:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a888:	ba 00 00 00 00       	mov    $0x0,%edx
f012a88d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012a893:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a899:	29 d0                	sub    %edx,%eax
f012a89b:	01 d8                	add    %ebx,%eax
f012a89d:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012a8a2:	39 c1                	cmp    %eax,%ecx
f012a8a4:	74 17                	je     f012a8bd <test_krealloc+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012a8a6:	83 ec 04             	sub    $0x4,%esp
f012a8a9:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a8ae:	68 29 0f 00 00       	push   $0xf29
f012a8b3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a8b8:	e8 f3 58 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a8bd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a8c0:	e8 9d 21 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a8c5:	29 c3                	sub    %eax,%ebx
f012a8c7:	89 d8                	mov    %ebx,%eax
f012a8c9:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a8ce:	74 17                	je     f012a8e7 <test_krealloc+0x7e3>
			panic("Wrong allocation: ");
f012a8d0:	83 ec 04             	sub    $0x4,%esp
f012a8d3:	68 1c 9f 13 f0       	push   $0xf0139f1c
f012a8d8:	68 2b 0f 00 00       	push   $0xf2b
f012a8dd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a8e2:	e8 c9 58 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a8e7:	c7 85 70 fe ff ff 7f 	movl   $0x5ff7f,-0x190(%ebp)
f012a8ee:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a8f1:	e8 6c 21 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a8f6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012a8f9:	83 ec 08             	sub    $0x8,%esp
f012a8fc:	68 00 fc 2f 00       	push   $0x2ffc00
f012a901:	6a 00                	push   $0x0
f012a903:	e8 a9 d7 fd ff       	call   f01080b1 <krealloc>
f012a908:	83 c4 10             	add    $0x10,%esp
f012a90b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012a911:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a917:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012a91c:	77 17                	ja     f012a935 <test_krealloc+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a91e:	83 ec 04             	sub    $0x4,%esp
f012a921:	68 78 ad 13 f0       	push   $0xf013ad78
f012a926:	68 32 0f 00 00       	push   $0xf32
f012a92b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a930:	e8 7b 58 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012a935:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a93b:	89 c1                	mov    %eax,%ecx
f012a93d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012a944:	10 00 00 
f012a947:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a94c:	0f b6 d0             	movzbl %al,%edx
f012a94f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a955:	01 d0                	add    %edx,%eax
f012a957:	48                   	dec    %eax
f012a958:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012a95e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a964:	ba 00 00 00 00       	mov    $0x0,%edx
f012a969:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012a96f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a975:	29 d0                	sub    %edx,%eax
f012a977:	89 c3                	mov    %eax,%ebx
f012a979:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012a980:	10 00 00 
f012a983:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a988:	0f b6 c0             	movzbl %al,%eax
f012a98b:	c1 e0 04             	shl    $0x4,%eax
f012a98e:	89 c2                	mov    %eax,%edx
f012a990:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a996:	01 d0                	add    %edx,%eax
f012a998:	48                   	dec    %eax
f012a999:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012a99f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a9a5:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9aa:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012a9b0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a9b6:	29 d0                	sub    %edx,%eax
f012a9b8:	01 d8                	add    %ebx,%eax
f012a9ba:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012a9bf:	39 c1                	cmp    %eax,%ecx
f012a9c1:	74 17                	je     f012a9da <test_krealloc+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012a9c3:	83 ec 04             	sub    $0x4,%esp
f012a9c6:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a9cb:	68 34 0f 00 00       	push   $0xf34
f012a9d0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a9d5:	e8 d6 57 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a9da:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a9dd:	e8 80 20 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012a9e2:	29 c3                	sub    %eax,%ebx
f012a9e4:	89 d8                	mov    %ebx,%eax
f012a9e6:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a9eb:	74 17                	je     f012aa04 <test_krealloc+0x900>
			panic("krealloc: Wrong allocation: ");
f012a9ed:	83 ec 04             	sub    $0x4,%esp
f012a9f0:	68 e6 ad 13 f0       	push   $0xf013ade6
f012a9f5:	68 36 0f 00 00       	push   $0xf36
f012a9fa:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012a9ff:	e8 ac 57 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012aa04:	c7 85 74 fe ff ff 7f 	movl   $0x5ff7f,-0x18c(%ebp)
f012aa0b:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012aa0e:	e8 4f 20 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012aa13:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012aa16:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012aa1d:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012aa20:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012aa26:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012aa2c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012aa32:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012aa35:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012aa37:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012aa3d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012aa43:	01 c2                	add    %eax,%edx
f012aa45:	8a 45 ce             	mov    -0x32(%ebp),%al
f012aa48:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012aa4a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012aa50:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012aa56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa5d:	eb 11                	jmp    f012aa70 <test_krealloc+0x96c>
			ptr[i] = 2;
f012aa5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aa62:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012aa68:	01 d0                	add    %edx,%eax
f012aa6a:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012aa6d:	ff 45 f4             	incl   -0xc(%ebp)
f012aa70:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012aa76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa79:	7d e4                	jge    f012aa5f <test_krealloc+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012aa7b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012aa81:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012aa87:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa8d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012aa93:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012aa99:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aaa0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aaa6:	01 d0                	add    %edx,%eax
f012aaa8:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012aaae:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012aab4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012aaba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012aac1:	eb 1b                	jmp    f012aade <test_krealloc+0x9da>
			intArr[i] = 4;
f012aac3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012aac6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aacd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aad3:	01 d0                	add    %edx,%eax
f012aad5:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012aadb:	ff 45 f0             	incl   -0x10(%ebp)
f012aade:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012aae4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012aae7:	7d da                	jge    f012aac3 <test_krealloc+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012aae9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012aaef:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012aaf5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012aafc:	eb 17                	jmp    f012ab15 <test_krealloc+0xa11>
			shortArr[i] = 5;
f012aafe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ab01:	01 c0                	add    %eax,%eax
f012ab03:	89 c2                	mov    %eax,%edx
f012ab05:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab0b:	01 d0                	add    %edx,%eax
f012ab0d:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ab12:	ff 45 ec             	incl   -0x14(%ebp)
f012ab15:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ab1b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012ab1e:	7d de                	jge    f012aafe <test_krealloc+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012ab20:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ab26:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012ab2c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab32:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012ab37:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ab3d:	01 c0                	add    %eax,%eax
f012ab3f:	89 c2                	mov    %eax,%edx
f012ab41:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab47:	01 d0                	add    %edx,%eax
f012ab49:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012ab4e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ab54:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ab5a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012ab61:	eb 49                	jmp    f012abac <test_krealloc+0xaa8>
			structArr[i].a = 7;
f012ab63:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ab66:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab6d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab73:	01 d0                	add    %edx,%eax
f012ab75:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012ab78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ab7b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab82:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab88:	01 d0                	add    %edx,%eax
f012ab8a:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012ab90:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ab93:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab9a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aba0:	01 d0                	add    %edx,%eax
f012aba2:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012aba9:	ff 45 e8             	incl   -0x18(%ebp)
f012abac:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012abb2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012abb5:	7d ac                	jge    f012ab63 <test_krealloc+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012abb7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012abbd:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012abc3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abc9:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012abcc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abd2:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012abd8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abde:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012abe5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012abeb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012abf2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abf8:	01 d0                	add    %edx,%eax
f012abfa:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012abfd:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac03:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac0a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac10:	01 d0                	add    %edx,%eax
f012ac12:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ac18:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac1e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac25:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac2b:	01 d0                	add    %edx,%eax
f012ac2d:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ac34:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ac3a:	8a 00                	mov    (%eax),%al
f012ac3c:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012ac3f:	75 17                	jne    f012ac58 <test_krealloc+0xb54>
f012ac41:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ac47:	89 c2                	mov    %eax,%edx
f012ac49:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ac4f:	01 d0                	add    %edx,%eax
f012ac51:	8a 00                	mov    (%eax),%al
f012ac53:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ac56:	74 17                	je     f012ac6f <test_krealloc+0xb6b>
			panic(
f012ac58:	83 ec 04             	sub    $0x4,%esp
f012ac5b:	68 04 ae 13 f0       	push   $0xf013ae04
f012ac60:	68 79 0f 00 00       	push   $0xf79
f012ac65:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ac6a:	e8 41 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ac6f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ac75:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ac7b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ac81:	8a 00                	mov    (%eax),%al
f012ac83:	3c 02                	cmp    $0x2,%al
f012ac85:	75 16                	jne    f012ac9d <test_krealloc+0xb99>
f012ac87:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ac8d:	89 c2                	mov    %eax,%edx
f012ac8f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ac95:	01 d0                	add    %edx,%eax
f012ac97:	8a 00                	mov    (%eax),%al
f012ac99:	3c 02                	cmp    $0x2,%al
f012ac9b:	74 20                	je     f012acbd <test_krealloc+0xbb9>
			panic(
f012ac9d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012aca3:	8a 00                	mov    (%eax),%al
f012aca5:	0f be c0             	movsbl %al,%eax
f012aca8:	50                   	push   %eax
f012aca9:	68 44 ae 13 f0       	push   $0xf013ae44
f012acae:	68 7f 0f 00 00       	push   $0xf7f
f012acb3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012acb8:	e8 f3 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012acbd:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012acc3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012acc9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012accf:	8b 00                	mov    (%eax),%eax
f012acd1:	83 f8 03             	cmp    $0x3,%eax
f012acd4:	75 1c                	jne    f012acf2 <test_krealloc+0xbee>
f012acd6:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012acdc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ace3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ace9:	01 d0                	add    %edx,%eax
f012aceb:	8b 00                	mov    (%eax),%eax
f012aced:	83 f8 03             	cmp    $0x3,%eax
f012acf0:	74 17                	je     f012ad09 <test_krealloc+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012acf2:	83 ec 04             	sub    $0x4,%esp
f012acf5:	68 90 ae 13 f0       	push   $0xf013ae90
f012acfa:	68 83 0f 00 00       	push   $0xf83
f012acff:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ad04:	e8 a7 54 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ad09:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ad0f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ad15:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ad1b:	8b 00                	mov    (%eax),%eax
f012ad1d:	83 f8 04             	cmp    $0x4,%eax
f012ad20:	75 1c                	jne    f012ad3e <test_krealloc+0xc3a>
f012ad22:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ad28:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ad2f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ad35:	01 d0                	add    %edx,%eax
f012ad37:	8b 00                	mov    (%eax),%eax
f012ad39:	83 f8 04             	cmp    $0x4,%eax
f012ad3c:	74 17                	je     f012ad55 <test_krealloc+0xc51>
			panic(
f012ad3e:	83 ec 04             	sub    $0x4,%esp
f012ad41:	68 04 ae 13 f0       	push   $0xf013ae04
f012ad46:	68 88 0f 00 00       	push   $0xf88
f012ad4b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ad50:	e8 5b 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012ad55:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ad5b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012ad61:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ad67:	66 8b 00             	mov    (%eax),%ax
f012ad6a:	66 83 f8 05          	cmp    $0x5,%ax
f012ad6e:	75 1b                	jne    f012ad8b <test_krealloc+0xc87>
f012ad70:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ad76:	01 c0                	add    %eax,%eax
f012ad78:	89 c2                	mov    %eax,%edx
f012ad7a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ad80:	01 d0                	add    %edx,%eax
f012ad82:	66 8b 00             	mov    (%eax),%ax
f012ad85:	66 83 f8 05          	cmp    $0x5,%ax
f012ad89:	74 17                	je     f012ada2 <test_krealloc+0xc9e>
			panic(
f012ad8b:	83 ec 04             	sub    $0x4,%esp
f012ad8e:	68 04 ae 13 f0       	push   $0xf013ae04
f012ad93:	68 8d 0f 00 00       	push   $0xf8d
f012ad98:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ad9d:	e8 0e 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012ada2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ada8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012adae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012adb4:	66 8b 00             	mov    (%eax),%ax
f012adb7:	66 83 f8 06          	cmp    $0x6,%ax
f012adbb:	75 1b                	jne    f012add8 <test_krealloc+0xcd4>
f012adbd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012adc3:	01 c0                	add    %eax,%eax
f012adc5:	89 c2                	mov    %eax,%edx
f012adc7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012adcd:	01 d0                	add    %edx,%eax
f012adcf:	66 8b 00             	mov    (%eax),%ax
f012add2:	66 83 f8 06          	cmp    $0x6,%ax
f012add6:	74 17                	je     f012adef <test_krealloc+0xceb>
			panic(
f012add8:	83 ec 04             	sub    $0x4,%esp
f012addb:	68 04 ae 13 f0       	push   $0xf013ae04
f012ade0:	68 92 0f 00 00       	push   $0xf92
f012ade5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012adea:	e8 c1 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012adef:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012adf5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012adfb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae01:	8a 00                	mov    (%eax),%al
f012ae03:	3c 07                	cmp    $0x7,%al
f012ae05:	75 1b                	jne    f012ae22 <test_krealloc+0xd1e>
f012ae07:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ae0d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ae14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae1a:	01 d0                	add    %edx,%eax
f012ae1c:	8a 00                	mov    (%eax),%al
f012ae1e:	3c 07                	cmp    $0x7,%al
f012ae20:	74 17                	je     f012ae39 <test_krealloc+0xd35>
			panic(
f012ae22:	83 ec 04             	sub    $0x4,%esp
f012ae25:	68 04 ae 13 f0       	push   $0xf013ae04
f012ae2a:	68 97 0f 00 00       	push   $0xf97
f012ae2f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ae34:	e8 77 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012ae39:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae3f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ae43:	66 83 f8 07          	cmp    $0x7,%ax
f012ae47:	75 1f                	jne    f012ae68 <test_krealloc+0xd64>
f012ae49:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ae4f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ae56:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae5c:	01 d0                	add    %edx,%eax
f012ae5e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ae62:	66 83 f8 07          	cmp    $0x7,%ax
f012ae66:	74 17                	je     f012ae7f <test_krealloc+0xd7b>
			panic(
f012ae68:	83 ec 04             	sub    $0x4,%esp
f012ae6b:	68 04 ae 13 f0       	push   $0xf013ae04
f012ae70:	68 9a 0f 00 00       	push   $0xf9a
f012ae75:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ae7a:	e8 31 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ae7f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae85:	8b 40 04             	mov    0x4(%eax),%eax
f012ae88:	83 f8 07             	cmp    $0x7,%eax
f012ae8b:	75 1d                	jne    f012aeaa <test_krealloc+0xda6>
f012ae8d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ae93:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ae9a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aea0:	01 d0                	add    %edx,%eax
f012aea2:	8b 40 04             	mov    0x4(%eax),%eax
f012aea5:	83 f8 07             	cmp    $0x7,%eax
f012aea8:	74 17                	je     f012aec1 <test_krealloc+0xdbd>
			panic(
f012aeaa:	83 ec 04             	sub    $0x4,%esp
f012aead:	68 04 ae 13 f0       	push   $0xf013ae04
f012aeb2:	68 9d 0f 00 00       	push   $0xf9d
f012aeb7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012aebc:	e8 ef 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012aec1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aec7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012aecd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aed3:	8a 00                	mov    (%eax),%al
f012aed5:	3c 08                	cmp    $0x8,%al
f012aed7:	75 1b                	jne    f012aef4 <test_krealloc+0xdf0>
f012aed9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012aedf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012aee6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aeec:	01 d0                	add    %edx,%eax
f012aeee:	8a 00                	mov    (%eax),%al
f012aef0:	3c 08                	cmp    $0x8,%al
f012aef2:	74 17                	je     f012af0b <test_krealloc+0xe07>
			panic(
f012aef4:	83 ec 04             	sub    $0x4,%esp
f012aef7:	68 04 ae 13 f0       	push   $0xf013ae04
f012aefc:	68 a2 0f 00 00       	push   $0xfa2
f012af01:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012af06:	e8 a5 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012af0b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012af11:	66 8b 40 02          	mov    0x2(%eax),%ax
f012af15:	66 83 f8 08          	cmp    $0x8,%ax
f012af19:	75 1f                	jne    f012af3a <test_krealloc+0xe36>
f012af1b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012af21:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012af28:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012af2e:	01 d0                	add    %edx,%eax
f012af30:	66 8b 40 02          	mov    0x2(%eax),%ax
f012af34:	66 83 f8 08          	cmp    $0x8,%ax
f012af38:	74 17                	je     f012af51 <test_krealloc+0xe4d>
			panic(
f012af3a:	83 ec 04             	sub    $0x4,%esp
f012af3d:	68 04 ae 13 f0       	push   $0xf013ae04
f012af42:	68 a5 0f 00 00       	push   $0xfa5
f012af47:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012af4c:	e8 5f 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012af51:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012af57:	8b 40 04             	mov    0x4(%eax),%eax
f012af5a:	83 f8 08             	cmp    $0x8,%eax
f012af5d:	75 1d                	jne    f012af7c <test_krealloc+0xe78>
f012af5f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012af65:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012af6c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012af72:	01 d0                	add    %edx,%eax
f012af74:	8b 40 04             	mov    0x4(%eax),%eax
f012af77:	83 f8 08             	cmp    $0x8,%eax
f012af7a:	74 17                	je     f012af93 <test_krealloc+0xe8f>
			panic(
f012af7c:	83 ec 04             	sub    $0x4,%esp
f012af7f:	68 04 ae 13 f0       	push   $0xf013ae04
f012af84:	68 a8 0f 00 00       	push   $0xfa8
f012af89:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012af8e:	e8 1d 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012af93:	e8 ca 1a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012af98:	89 c2                	mov    %eax,%edx
f012af9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012af9d:	39 c2                	cmp    %eax,%edx
f012af9f:	74 17                	je     f012afb8 <test_krealloc+0xeb4>
			panic(
f012afa1:	83 ec 04             	sub    $0x4,%esp
f012afa4:	68 c4 ae 13 f0       	push   $0xf013aec4
f012afa9:	68 ac 0f 00 00       	push   $0xfac
f012afae:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012afb3:	e8 f8 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012afb8:	83 ec 0c             	sub    $0xc,%esp
f012afbb:	68 10 af 13 f0       	push   $0xf013af10
f012afc0:	e8 6c 5e fd ff       	call   f0100e31 <cprintf>
f012afc5:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012afc8:	e8 95 1a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012afcd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012afd0:	e8 af 96 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012afd5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012afdb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012afe1:	83 ec 08             	sub    $0x8,%esp
f012afe4:	6a 00                	push   $0x0
f012afe6:	50                   	push   %eax
f012afe7:	e8 c5 d0 fd ff       	call   f01080b1 <krealloc>
f012afec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012afef:	e8 90 96 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012aff4:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012affa:	74 17                	je     f012b013 <test_krealloc+0xf0f>
			panic(
f012affc:	83 ec 04             	sub    $0x4,%esp
f012afff:	68 34 af 13 f0       	push   $0xf013af34
f012b004:	68 b9 0f 00 00       	push   $0xfb9
f012b009:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b00e:	e8 9d 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012b013:	e8 4a 1a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b018:	89 c2                	mov    %eax,%edx
f012b01a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b01d:	29 c2                	sub    %eax,%edx
f012b01f:	89 d0                	mov    %edx,%eax
f012b021:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b026:	74 17                	je     f012b03f <test_krealloc+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012b028:	83 ec 04             	sub    $0x4,%esp
f012b02b:	68 a8 af 13 f0       	push   $0xf013afa8
f012b030:	68 bb 0f 00 00       	push   $0xfbb
f012b035:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b03a:	e8 71 51 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012b03f:	e8 1e 1a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b044:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b047:	e8 38 96 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b04c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012b052:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b058:	83 ec 08             	sub    $0x8,%esp
f012b05b:	6a 00                	push   $0x0
f012b05d:	50                   	push   %eax
f012b05e:	e8 4e d0 fd ff       	call   f01080b1 <krealloc>
f012b063:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b066:	e8 19 96 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b06b:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b071:	74 17                	je     f012b08a <test_krealloc+0xf86>
			panic(
f012b073:	83 ec 04             	sub    $0x4,%esp
f012b076:	68 34 af 13 f0       	push   $0xf013af34
f012b07b:	68 c4 0f 00 00       	push   $0xfc4
f012b080:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b085:	e8 26 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012b08a:	e8 d3 19 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b08f:	89 c2                	mov    %eax,%edx
f012b091:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b094:	29 c2                	sub    %eax,%edx
f012b096:	89 d0                	mov    %edx,%eax
f012b098:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b09d:	74 17                	je     f012b0b6 <test_krealloc+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012b09f:	83 ec 04             	sub    $0x4,%esp
f012b0a2:	68 a8 af 13 f0       	push   $0xf013afa8
f012b0a7:	68 c6 0f 00 00       	push   $0xfc6
f012b0ac:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b0b1:	e8 fa 50 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012b0b6:	e8 a7 19 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b0bb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b0be:	e8 c1 95 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b0c3:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012b0c9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b0cf:	83 ec 08             	sub    $0x8,%esp
f012b0d2:	6a 00                	push   $0x0
f012b0d4:	50                   	push   %eax
f012b0d5:	e8 d7 cf fd ff       	call   f01080b1 <krealloc>
f012b0da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b0dd:	e8 a2 95 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b0e2:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b0e8:	74 17                	je     f012b101 <test_krealloc+0xffd>
			panic(
f012b0ea:	83 ec 04             	sub    $0x4,%esp
f012b0ed:	68 ec 9a 13 f0       	push   $0xf0139aec
f012b0f2:	68 ce 0f 00 00       	push   $0xfce
f012b0f7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b0fc:	e8 af 50 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012b101:	e8 5c 19 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b106:	89 c2                	mov    %eax,%edx
f012b108:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b10b:	29 c2                	sub    %eax,%edx
f012b10d:	89 d0                	mov    %edx,%eax
f012b10f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b114:	74 17                	je     f012b12d <test_krealloc+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012b116:	83 ec 04             	sub    $0x4,%esp
f012b119:	68 a8 af 13 f0       	push   $0xf013afa8
f012b11e:	68 d0 0f 00 00       	push   $0xfd0
f012b123:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b128:	e8 83 50 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012b12d:	e8 30 19 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b132:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b135:	e8 4a 95 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b13a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012b140:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b146:	83 ec 08             	sub    $0x8,%esp
f012b149:	6a 00                	push   $0x0
f012b14b:	50                   	push   %eax
f012b14c:	e8 60 cf fd ff       	call   f01080b1 <krealloc>
f012b151:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b154:	e8 2b 95 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b159:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b15f:	74 17                	je     f012b178 <test_krealloc+0x1074>
			panic(
f012b161:	83 ec 04             	sub    $0x4,%esp
f012b164:	68 34 af 13 f0       	push   $0xf013af34
f012b169:	68 d8 0f 00 00       	push   $0xfd8
f012b16e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b173:	e8 38 50 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012b178:	e8 e5 18 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b17d:	89 c2                	mov    %eax,%edx
f012b17f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b182:	29 c2                	sub    %eax,%edx
f012b184:	89 d0                	mov    %edx,%eax
f012b186:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b18b:	74 17                	je     f012b1a4 <test_krealloc+0x10a0>
			panic(
f012b18d:	83 ec 04             	sub    $0x4,%esp
f012b190:	68 dc af 13 f0       	push   $0xf013afdc
f012b195:	68 db 0f 00 00       	push   $0xfdb
f012b19a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b19f:	e8 0c 50 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b1a4:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012b1ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012b1b2:	eb 48                	jmp    f012b1fc <test_krealloc+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012b1b4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012b1b7:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012b1bc:	83 ec 04             	sub    $0x4,%esp
f012b1bf:	8d 8d 04 fe ff ff    	lea    -0x1fc(%ebp),%ecx
f012b1c5:	51                   	push   %ecx
f012b1c6:	52                   	push   %edx
f012b1c7:	50                   	push   %eax
f012b1c8:	e8 1a c3 fd ff       	call   f01074e7 <get_page_table>
f012b1cd:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012b1d0:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012b1d6:	85 c0                	test   %eax,%eax
f012b1d8:	75 17                	jne    f012b1f1 <test_krealloc+0x10ed>
					panic(
f012b1da:	83 ec 04             	sub    $0x4,%esp
f012b1dd:	68 d4 a3 13 f0       	push   $0xf013a3d4
f012b1e2:	68 e7 0f 00 00       	push   $0xfe7
f012b1e7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b1ec:	e8 bf 4f fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b1f1:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012b1f8:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012b1fc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012b200:	78 b2                	js     f012b1b4 <test_krealloc+0x10b0>
f012b202:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012b206:	7f 09                	jg     f012b211 <test_krealloc+0x110d>
f012b208:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012b20f:	76 a3                	jbe    f012b1b4 <test_krealloc+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012b211:	83 ec 0c             	sub    $0xc,%esp
f012b214:	68 1b b0 13 f0       	push   $0xf013b01b
f012b219:	e8 13 5c fd ff       	call   f0100e31 <cprintf>
f012b21e:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012b221:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b227:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b22d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b234:	eb 21                	jmp    f012b257 <test_krealloc+0x1153>
			sums[0] += ptr[i];
f012b236:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b23c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012b23f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b245:	01 c8                	add    %ecx,%eax
f012b247:	8a 00                	mov    (%eax),%al
f012b249:	0f be c0             	movsbl %al,%eax
f012b24c:	01 d0                	add    %edx,%eax
f012b24e:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b254:	ff 45 dc             	incl   -0x24(%ebp)
f012b257:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b25d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b260:	7d d4                	jge    f012b236 <test_krealloc+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b262:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b268:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b26e:	42                   	inc    %edx
f012b26f:	01 d2                	add    %edx,%edx
f012b271:	39 d0                	cmp    %edx,%eax
f012b273:	74 17                	je     f012b28c <test_krealloc+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012b275:	83 ec 04             	sub    $0x4,%esp
f012b278:	68 24 b0 13 f0       	push   $0xf013b024
f012b27d:	68 f9 0f 00 00       	push   $0xff9
f012b282:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b287:	e8 24 4f fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012b28c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b292:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b298:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b29f:	eb 25                	jmp    f012b2c6 <test_krealloc+0x11c2>
			sums[1] += intArr[i];
f012b2a1:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b2a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b2aa:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012b2b1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b2b7:	01 c8                	add    %ecx,%eax
f012b2b9:	8b 00                	mov    (%eax),%eax
f012b2bb:	01 d0                	add    %edx,%eax
f012b2bd:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b2c3:	ff 45 dc             	incl   -0x24(%ebp)
f012b2c6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b2cc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b2cf:	7d d0                	jge    f012b2a1 <test_krealloc+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012b2d1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012b2d7:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012b2dd:	42                   	inc    %edx
f012b2de:	c1 e2 02             	shl    $0x2,%edx
f012b2e1:	39 d0                	cmp    %edx,%eax
f012b2e3:	74 17                	je     f012b2fc <test_krealloc+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012b2e5:	83 ec 04             	sub    $0x4,%esp
f012b2e8:	68 24 b0 13 f0       	push   $0xf013b024
f012b2ed:	68 03 10 00 00       	push   $0x1003
f012b2f2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b2f7:	e8 b4 4e fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012b2fc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b302:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b308:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b30f:	eb 24                	jmp    f012b335 <test_krealloc+0x1231>
			sums[2] += shortArr[i];
f012b311:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b317:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b31a:	01 c0                	add    %eax,%eax
f012b31c:	89 c1                	mov    %eax,%ecx
f012b31e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b324:	01 c8                	add    %ecx,%eax
f012b326:	66 8b 00             	mov    (%eax),%ax
f012b329:	98                   	cwtl   
f012b32a:	01 d0                	add    %edx,%eax
f012b32c:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b332:	ff 45 dc             	incl   -0x24(%ebp)
f012b335:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b33b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b33e:	7d d1                	jge    f012b311 <test_krealloc+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012b340:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b346:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b34c:	8d 48 01             	lea    0x1(%eax),%ecx
f012b34f:	89 c8                	mov    %ecx,%eax
f012b351:	c1 e0 02             	shl    $0x2,%eax
f012b354:	01 c8                	add    %ecx,%eax
f012b356:	39 c2                	cmp    %eax,%edx
f012b358:	74 17                	je     f012b371 <test_krealloc+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012b35a:	83 ec 04             	sub    $0x4,%esp
f012b35d:	68 24 b0 13 f0       	push   $0xf013b024
f012b362:	68 0d 10 00 00       	push   $0x100d
f012b367:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b36c:	e8 3f 4e fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b371:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b377:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b37d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b384:	eb 70                	jmp    f012b3f6 <test_krealloc+0x12f2>
			sums[3] += structArr[i].a;
f012b386:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012b38c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b38f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b396:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b39c:	01 c8                	add    %ecx,%eax
f012b39e:	8a 00                	mov    (%eax),%al
f012b3a0:	0f be c0             	movsbl %al,%eax
f012b3a3:	01 d0                	add    %edx,%eax
f012b3a5:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
			sums[4] += structArr[i].b;
f012b3ab:	8b 95 18 fe ff ff    	mov    -0x1e8(%ebp),%edx
f012b3b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b3b4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b3bb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b3c1:	01 c8                	add    %ecx,%eax
f012b3c3:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b3c7:	98                   	cwtl   
f012b3c8:	01 d0                	add    %edx,%eax
f012b3ca:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			sums[5] += structArr[i].c;
f012b3d0:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012b3d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b3d9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b3e0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b3e6:	01 c8                	add    %ecx,%eax
f012b3e8:	8b 40 04             	mov    0x4(%eax),%eax
f012b3eb:	01 d0                	add    %edx,%eax
f012b3ed:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b3f3:	ff 45 dc             	incl   -0x24(%ebp)
f012b3f6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b3fc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b3ff:	7d 85                	jge    f012b386 <test_krealloc+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012b401:	8b 8d 14 fe ff ff    	mov    -0x1ec(%ebp),%ecx
f012b407:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b40d:	8d 50 01             	lea    0x1(%eax),%edx
f012b410:	89 d0                	mov    %edx,%eax
f012b412:	01 c0                	add    %eax,%eax
f012b414:	01 d0                	add    %edx,%eax
f012b416:	01 c0                	add    %eax,%eax
f012b418:	01 d0                	add    %edx,%eax
f012b41a:	39 c1                	cmp    %eax,%ecx
f012b41c:	75 3a                	jne    f012b458 <test_krealloc+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012b41e:	8b 8d 18 fe ff ff    	mov    -0x1e8(%ebp),%ecx
f012b424:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b42a:	8d 50 01             	lea    0x1(%eax),%edx
f012b42d:	89 d0                	mov    %edx,%eax
f012b42f:	01 c0                	add    %eax,%eax
f012b431:	01 d0                	add    %edx,%eax
f012b433:	01 c0                	add    %eax,%eax
f012b435:	01 d0                	add    %edx,%eax
f012b437:	39 c1                	cmp    %eax,%ecx
f012b439:	75 1d                	jne    f012b458 <test_krealloc+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012b43b:	8b 8d 1c fe ff ff    	mov    -0x1e4(%ebp),%ecx
f012b441:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b447:	8d 50 01             	lea    0x1(%eax),%edx
f012b44a:	89 d0                	mov    %edx,%eax
f012b44c:	01 c0                	add    %eax,%eax
f012b44e:	01 d0                	add    %edx,%eax
f012b450:	01 c0                	add    %eax,%eax
f012b452:	01 d0                	add    %edx,%eax
f012b454:	39 c1                	cmp    %eax,%ecx
f012b456:	74 17                	je     f012b46f <test_krealloc+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012b458:	83 ec 04             	sub    $0x4,%esp
f012b45b:	68 24 b0 13 f0       	push   $0xf013b024
f012b460:	68 1b 10 00 00       	push   $0x101b
f012b465:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b46a:	e8 41 4d fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012b46f:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012b476:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b479:	e8 e4 15 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b47e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012b481:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b487:	83 ec 08             	sub    $0x8,%esp
f012b48a:	68 00 3c 00 00       	push   $0x3c00
f012b48f:	50                   	push   %eax
f012b490:	e8 1c cc fd ff       	call   f01080b1 <krealloc>
f012b495:	83 c4 10             	add    $0x10,%esp
f012b498:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b49e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b4a4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b4a9:	77 17                	ja     f012b4c2 <test_krealloc+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b4ab:	83 ec 04             	sub    $0x4,%esp
f012b4ae:	68 78 ad 13 f0       	push   $0xf013ad78
f012b4b3:	68 27 10 00 00       	push   $0x1027
f012b4b8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b4bd:	e8 ee 4c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b4c2:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b4c8:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b4ce:	74 17                	je     f012b4e7 <test_krealloc+0x13e3>
			panic(
f012b4d0:	83 ec 04             	sub    $0x4,%esp
f012b4d3:	68 5c b0 13 f0       	push   $0xf013b05c
f012b4d8:	68 2a 10 00 00       	push   $0x102a
f012b4dd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b4e2:	e8 c9 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b4e7:	e8 76 15 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b4ec:	89 c2                	mov    %eax,%edx
f012b4ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b4f1:	39 c2                	cmp    %eax,%edx
f012b4f3:	74 17                	je     f012b50c <test_krealloc+0x1408>
			panic(
f012b4f5:	83 ec 04             	sub    $0x4,%esp
f012b4f8:	68 c8 b0 13 f0       	push   $0xf013b0c8
f012b4fd:	68 2d 10 00 00       	push   $0x102d
f012b502:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b507:	e8 a4 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b50c:	e8 51 15 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b511:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012b514:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b51a:	83 ec 08             	sub    $0x8,%esp
f012b51d:	68 00 fc 0f 00       	push   $0xffc00
f012b522:	50                   	push   %eax
f012b523:	e8 89 cb fd ff       	call   f01080b1 <krealloc>
f012b528:	83 c4 10             	add    $0x10,%esp
f012b52b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b531:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b537:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b53c:	77 17                	ja     f012b555 <test_krealloc+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b53e:	83 ec 04             	sub    $0x4,%esp
f012b541:	68 78 ad 13 f0       	push   $0xf013ad78
f012b546:	68 33 10 00 00       	push   $0x1033
f012b54b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b550:	e8 5b 4c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b555:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b55b:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b561:	74 17                	je     f012b57a <test_krealloc+0x1476>
			panic(
f012b563:	83 ec 04             	sub    $0x4,%esp
f012b566:	68 5c b0 13 f0       	push   $0xf013b05c
f012b56b:	68 36 10 00 00       	push   $0x1036
f012b570:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b575:	e8 36 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b57a:	e8 e3 14 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b57f:	89 c2                	mov    %eax,%edx
f012b581:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b584:	39 c2                	cmp    %eax,%edx
f012b586:	74 17                	je     f012b59f <test_krealloc+0x149b>
			panic(
f012b588:	83 ec 04             	sub    $0x4,%esp
f012b58b:	68 c8 b0 13 f0       	push   $0xf013b0c8
f012b590:	68 39 10 00 00       	push   $0x1039
f012b595:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b59a:	e8 11 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b59f:	e8 be 14 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b5a4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012b5a7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b5ad:	83 ec 08             	sub    $0x8,%esp
f012b5b0:	68 00 fc 0f 00       	push   $0xffc00
f012b5b5:	50                   	push   %eax
f012b5b6:	e8 f6 ca fd ff       	call   f01080b1 <krealloc>
f012b5bb:	83 c4 10             	add    $0x10,%esp
f012b5be:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b5c4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b5ca:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b5cf:	77 17                	ja     f012b5e8 <test_krealloc+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b5d1:	83 ec 04             	sub    $0x4,%esp
f012b5d4:	68 78 ad 13 f0       	push   $0xf013ad78
f012b5d9:	68 3f 10 00 00       	push   $0x103f
f012b5de:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b5e3:	e8 c8 4b fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b5e8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b5ee:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b5f4:	74 17                	je     f012b60d <test_krealloc+0x1509>
			panic(
f012b5f6:	83 ec 04             	sub    $0x4,%esp
f012b5f9:	68 5c b0 13 f0       	push   $0xf013b05c
f012b5fe:	68 42 10 00 00       	push   $0x1042
f012b603:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b608:	e8 a3 4b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b60d:	e8 50 14 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b612:	89 c2                	mov    %eax,%edx
f012b614:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b617:	39 c2                	cmp    %eax,%edx
f012b619:	74 17                	je     f012b632 <test_krealloc+0x152e>
			panic(
f012b61b:	83 ec 04             	sub    $0x4,%esp
f012b61e:	68 c8 b0 13 f0       	push   $0xf013b0c8
f012b623:	68 45 10 00 00       	push   $0x1045
f012b628:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b62d:	e8 7e 4b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b632:	e8 2b 14 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b637:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012b63a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b640:	83 ec 08             	sub    $0x8,%esp
f012b643:	68 00 fc 0f 00       	push   $0xffc00
f012b648:	50                   	push   %eax
f012b649:	e8 63 ca fd ff       	call   f01080b1 <krealloc>
f012b64e:	83 c4 10             	add    $0x10,%esp
f012b651:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b657:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b65d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b662:	77 17                	ja     f012b67b <test_krealloc+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b664:	83 ec 04             	sub    $0x4,%esp
f012b667:	68 78 ad 13 f0       	push   $0xf013ad78
f012b66c:	68 4d 10 00 00       	push   $0x104d
f012b671:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b676:	e8 35 4b fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012b67b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b681:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b687:	74 17                	je     f012b6a0 <test_krealloc+0x159c>
			panic(
f012b689:	83 ec 04             	sub    $0x4,%esp
f012b68c:	68 0c b1 13 f0       	push   $0xf013b10c
f012b691:	68 50 10 00 00       	push   $0x1050
f012b696:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b69b:	e8 10 4b fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b6a0:	e8 bd 13 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b6a5:	89 c2                	mov    %eax,%edx
f012b6a7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b6aa:	39 c2                	cmp    %eax,%edx
f012b6ac:	74 17                	je     f012b6c5 <test_krealloc+0x15c1>
			panic(
f012b6ae:	83 ec 04             	sub    $0x4,%esp
f012b6b1:	68 c8 b0 13 f0       	push   $0xf013b0c8
f012b6b6:	68 53 10 00 00       	push   $0x1053
f012b6bb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b6c0:	e8 eb 4a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012b6c5:	83 ec 0c             	sub    $0xc,%esp
f012b6c8:	68 eb a2 13 f0       	push   $0xf013a2eb
f012b6cd:	e8 5f 57 fd ff       	call   f0100e31 <cprintf>
f012b6d2:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012b6d5:	e8 88 13 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b6da:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012b6dd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b6e3:	83 ec 08             	sub    $0x8,%esp
f012b6e6:	68 00 18 10 00       	push   $0x101800
f012b6eb:	50                   	push   %eax
f012b6ec:	e8 c0 c9 fd ff       	call   f01080b1 <krealloc>
f012b6f1:	83 c4 10             	add    $0x10,%esp
f012b6f4:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b6f7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b6fa:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b6ff:	77 17                	ja     f012b718 <test_krealloc+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b701:	83 ec 04             	sub    $0x4,%esp
f012b704:	68 78 ad 13 f0       	push   $0xf013ad78
f012b709:	68 5c 10 00 00       	push   $0x105c
f012b70e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b713:	e8 98 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b718:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b71e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b721:	74 17                	je     f012b73a <test_krealloc+0x1636>
			panic(
f012b723:	83 ec 04             	sub    $0x4,%esp
f012b726:	68 6c b1 13 f0       	push   $0xf013b16c
f012b72b:	68 5f 10 00 00       	push   $0x105f
f012b730:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b735:	e8 76 4a fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012b73a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b73d:	e8 20 13 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b742:	29 c3                	sub    %eax,%ebx
f012b744:	89 d8                	mov    %ebx,%eax
f012b746:	83 f8 02             	cmp    $0x2,%eax
f012b749:	74 17                	je     f012b762 <test_krealloc+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b74b:	83 ec 04             	sub    $0x4,%esp
f012b74e:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012b753:	68 61 10 00 00       	push   $0x1061
f012b758:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b75d:	e8 4e 4a fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012b762:	e8 fb 12 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b767:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012b76a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b770:	83 ec 08             	sub    $0x8,%esp
f012b773:	68 00 fc 3f 00       	push   $0x3ffc00
f012b778:	50                   	push   %eax
f012b779:	e8 33 c9 fd ff       	call   f01080b1 <krealloc>
f012b77e:	83 c4 10             	add    $0x10,%esp
f012b781:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b784:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b787:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b78c:	77 17                	ja     f012b7a5 <test_krealloc+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b78e:	83 ec 04             	sub    $0x4,%esp
f012b791:	68 78 ad 13 f0       	push   $0xf013ad78
f012b796:	68 67 10 00 00       	push   $0x1067
f012b79b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b7a0:	e8 0b 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b7a5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b7ab:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b7ae:	74 17                	je     f012b7c7 <test_krealloc+0x16c3>
			panic(
f012b7b0:	83 ec 04             	sub    $0x4,%esp
f012b7b3:	68 6c b1 13 f0       	push   $0xf013b16c
f012b7b8:	68 6a 10 00 00       	push   $0x106a
f012b7bd:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b7c2:	e8 e9 49 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012b7c7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b7ca:	e8 93 12 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b7cf:	29 c3                	sub    %eax,%ebx
f012b7d1:	89 d8                	mov    %ebx,%eax
f012b7d3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b7d8:	74 17                	je     f012b7f1 <test_krealloc+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012b7da:	83 ec 04             	sub    $0x4,%esp
f012b7dd:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012b7e2:	68 6d 10 00 00       	push   $0x106d
f012b7e7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b7ec:	e8 bf 49 fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012b7f1:	83 ec 0c             	sub    $0xc,%esp
f012b7f4:	68 30 a3 13 f0       	push   $0xf013a330
f012b7f9:	e8 33 56 fd ff       	call   f0100e31 <cprintf>
f012b7fe:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012b801:	e8 5c 12 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b806:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012b809:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b80f:	83 ec 08             	sub    $0x8,%esp
f012b812:	68 00 fc 9f 00       	push   $0x9ffc00
f012b817:	50                   	push   %eax
f012b818:	e8 94 c8 fd ff       	call   f01080b1 <krealloc>
f012b81d:	83 c4 10             	add    $0x10,%esp
f012b820:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b823:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b826:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b82b:	77 17                	ja     f012b844 <test_krealloc+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b82d:	83 ec 04             	sub    $0x4,%esp
f012b830:	68 78 ad 13 f0       	push   $0xf013ad78
f012b835:	68 78 10 00 00       	push   $0x1078
f012b83a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b83f:	e8 6c 49 fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012b844:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b84b:	10 00 00 
f012b84e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b853:	0f b6 d0             	movzbl %al,%edx
f012b856:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b85c:	01 d0                	add    %edx,%eax
f012b85e:	48                   	dec    %eax
f012b85f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b865:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b86b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b870:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b876:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b87c:	29 d0                	sub    %edx,%eax
f012b87e:	89 c1                	mov    %eax,%ecx
f012b880:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b887:	10 00 00 
f012b88a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b88f:	0f b6 c0             	movzbl %al,%eax
f012b892:	c1 e0 04             	shl    $0x4,%eax
f012b895:	89 c2                	mov    %eax,%edx
f012b897:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b89d:	01 d0                	add    %edx,%eax
f012b89f:	48                   	dec    %eax
f012b8a0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b8a6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b8ac:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8b1:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b8b7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b8bd:	29 d0                	sub    %edx,%eax
f012b8bf:	01 c8                	add    %ecx,%eax
f012b8c1:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012b8c7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b8ca:	39 c2                	cmp    %eax,%edx
f012b8cc:	74 18                	je     f012b8e6 <test_krealloc+0x17e2>
			panic(
f012b8ce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b8d1:	50                   	push   %eax
f012b8d2:	68 1c b2 13 f0       	push   $0xf013b21c
f012b8d7:	68 7c 10 00 00       	push   $0x107c
f012b8dc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b8e1:	e8 ca 48 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012b8e6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b8ec:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b8ef:	75 17                	jne    f012b908 <test_krealloc+0x1804>
			panic(
f012b8f1:	83 ec 04             	sub    $0x4,%esp
f012b8f4:	68 60 b2 13 f0       	push   $0xf013b260
f012b8f9:	68 7f 10 00 00       	push   $0x107f
f012b8fe:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b903:	e8 a8 48 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012b908:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b90b:	e8 52 11 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b910:	29 c3                	sub    %eax,%ebx
f012b912:	89 d8                	mov    %ebx,%eax
f012b914:	3d 00 06 00 00       	cmp    $0x600,%eax
f012b919:	74 17                	je     f012b932 <test_krealloc+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b91b:	83 ec 04             	sub    $0x4,%esp
f012b91e:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012b923:	68 82 10 00 00       	push   $0x1082
f012b928:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b92d:	e8 7e 48 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012b932:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b935:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012b93b:	e8 22 11 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b940:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012b943:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b949:	83 ec 08             	sub    $0x8,%esp
f012b94c:	68 00 fc 5f 00       	push   $0x5ffc00
f012b951:	50                   	push   %eax
f012b952:	e8 5a c7 fd ff       	call   f01080b1 <krealloc>
f012b957:	83 c4 10             	add    $0x10,%esp
f012b95a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b95d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b960:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b965:	77 17                	ja     f012b97e <test_krealloc+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b967:	83 ec 04             	sub    $0x4,%esp
f012b96a:	68 78 ad 13 f0       	push   $0xf013ad78
f012b96f:	68 8b 10 00 00       	push   $0x108b
f012b974:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b979:	e8 32 48 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[6])
f012b97e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b984:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b987:	74 17                	je     f012b9a0 <test_krealloc+0x189c>
			panic(
f012b989:	83 ec 04             	sub    $0x4,%esp
f012b98c:	68 6c b1 13 f0       	push   $0xf013b16c
f012b991:	68 8e 10 00 00       	push   $0x108e
f012b996:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b99b:	e8 10 48 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012b9a0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b9a3:	e8 ba 10 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b9a8:	29 c3                	sub    %eax,%ebx
f012b9aa:	89 d8                	mov    %ebx,%eax
f012b9ac:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b9b1:	74 17                	je     f012b9ca <test_krealloc+0x18c6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b9b3:	83 ec 04             	sub    $0x4,%esp
f012b9b6:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012b9bb:	68 91 10 00 00       	push   $0x1091
f012b9c0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012b9c5:	e8 e6 47 fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012b9ca:	e8 93 10 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012b9cf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012b9d2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b9d8:	83 ec 08             	sub    $0x8,%esp
f012b9db:	68 00 fc 3f 01       	push   $0x13ffc00
f012b9e0:	50                   	push   %eax
f012b9e1:	e8 cb c6 fd ff       	call   f01080b1 <krealloc>
f012b9e6:	83 c4 10             	add    $0x10,%esp
f012b9e9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b9ec:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b9ef:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b9f4:	77 17                	ja     f012ba0d <test_krealloc+0x1909>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b9f6:	83 ec 04             	sub    $0x4,%esp
f012b9f9:	68 78 ad 13 f0       	push   $0xf013ad78
f012b9fe:	68 98 10 00 00       	push   $0x1098
f012ba03:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ba08:	e8 a3 47 fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012ba0d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ba13:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ba16:	75 17                	jne    f012ba2f <test_krealloc+0x192b>
			panic(
f012ba18:	83 ec 04             	sub    $0x4,%esp
f012ba1b:	68 60 b2 13 f0       	push   $0xf013b260
f012ba20:	68 9b 10 00 00       	push   $0x109b
f012ba25:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ba2a:	e8 81 47 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012ba2f:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012ba36:	10 00 00 
f012ba39:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012ba3e:	0f b6 d0             	movzbl %al,%edx
f012ba41:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012ba47:	01 d0                	add    %edx,%eax
f012ba49:	48                   	dec    %eax
f012ba4a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012ba50:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ba56:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba5b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012ba61:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ba67:	29 d0                	sub    %edx,%eax
f012ba69:	89 c1                	mov    %eax,%ecx
f012ba6b:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012ba72:	10 00 00 
f012ba75:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012ba7a:	0f b6 c0             	movzbl %al,%eax
f012ba7d:	c1 e0 04             	shl    $0x4,%eax
f012ba80:	89 c2                	mov    %eax,%edx
f012ba82:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ba88:	01 d0                	add    %edx,%eax
f012ba8a:	48                   	dec    %eax
f012ba8b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012ba91:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ba97:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba9c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012baa2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012baa8:	29 d0                	sub    %edx,%eax
f012baaa:	01 c8                	add    %ecx,%eax
f012baac:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012bab2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bab5:	39 c2                	cmp    %eax,%edx
f012bab7:	74 17                	je     f012bad0 <test_krealloc+0x19cc>
			panic("krealloc: Wrong start address for reallocated space");
f012bab9:	83 ec 04             	sub    $0x4,%esp
f012babc:	68 e4 b2 13 f0       	push   $0xf013b2e4
f012bac1:	68 9d 10 00 00       	push   $0x109d
f012bac6:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bacb:	e8 e0 46 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012bad0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bad3:	e8 8a 0f fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012bad8:	29 c3                	sub    %eax,%ebx
f012bada:	89 d8                	mov    %ebx,%eax
f012badc:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012bae1:	74 17                	je     f012bafa <test_krealloc+0x19f6>
			panic("krealloc: pages in memory are not loaded correctly");
f012bae3:	83 ec 04             	sub    $0x4,%esp
f012bae6:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012baeb:	68 a0 10 00 00       	push   $0x10a0
f012baf0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012baf5:	e8 b6 46 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012bafa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bafd:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012bb03:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012bb09:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012bb0f:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012bb16:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012bb19:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012bb20:	eb 21                	jmp    f012bb43 <test_krealloc+0x1a3f>
			sums[0] += ptr[i];
f012bb22:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012bb28:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012bb2b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012bb31:	01 c8                	add    %ecx,%eax
f012bb33:	8a 00                	mov    (%eax),%al
f012bb35:	0f be c0             	movsbl %al,%eax
f012bb38:	01 d0                	add    %edx,%eax
f012bb3a:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012bb40:	ff 45 d8             	incl   -0x28(%ebp)
f012bb43:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bb49:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012bb4c:	7d d4                	jge    f012bb22 <test_krealloc+0x1a1e>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012bb4e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012bb54:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012bb5a:	42                   	inc    %edx
f012bb5b:	01 d2                	add    %edx,%edx
f012bb5d:	39 d0                	cmp    %edx,%eax
f012bb5f:	74 17                	je     f012bb78 <test_krealloc+0x1a74>
			panic("krealloc: invalid read after re-allocations");
f012bb61:	83 ec 04             	sub    $0x4,%esp
f012bb64:	68 18 b3 13 f0       	push   $0xf013b318
f012bb69:	68 ae 10 00 00       	push   $0x10ae
f012bb6e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bb73:	e8 38 46 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012bb78:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bb7e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012bb84:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012bb8b:	00 00 00 
		sums[1] = 0;
f012bb8e:	c7 85 0c fe ff ff 00 	movl   $0x0,-0x1f4(%ebp)
f012bb95:	00 00 00 
		sums[2] = 0;
f012bb98:	c7 85 10 fe ff ff 00 	movl   $0x0,-0x1f0(%ebp)
f012bb9f:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012bba2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012bba9:	eb 70                	jmp    f012bc1b <test_krealloc+0x1b17>
			sums[0] += structArr[i].a;
f012bbab:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012bbb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bbb4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012bbbb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bbc1:	01 c8                	add    %ecx,%eax
f012bbc3:	8a 00                	mov    (%eax),%al
f012bbc5:	0f be c0             	movsbl %al,%eax
f012bbc8:	01 d0                	add    %edx,%eax
f012bbca:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[1] += structArr[i].b;
f012bbd0:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012bbd6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bbd9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012bbe0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bbe6:	01 c8                	add    %ecx,%eax
f012bbe8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bbec:	98                   	cwtl   
f012bbed:	01 d0                	add    %edx,%eax
f012bbef:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
			sums[2] += structArr[i].c;
f012bbf5:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012bbfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bbfe:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012bc05:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bc0b:	01 c8                	add    %ecx,%eax
f012bc0d:	8b 40 04             	mov    0x4(%eax),%eax
f012bc10:	01 d0                	add    %edx,%eax
f012bc12:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012bc18:	ff 45 d8             	incl   -0x28(%ebp)
f012bc1b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bc21:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012bc24:	7d 85                	jge    f012bbab <test_krealloc+0x1aa7>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012bc26:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012bc2c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bc32:	8d 50 01             	lea    0x1(%eax),%edx
f012bc35:	89 d0                	mov    %edx,%eax
f012bc37:	01 c0                	add    %eax,%eax
f012bc39:	01 d0                	add    %edx,%eax
f012bc3b:	01 c0                	add    %eax,%eax
f012bc3d:	01 d0                	add    %edx,%eax
f012bc3f:	39 c1                	cmp    %eax,%ecx
f012bc41:	75 3a                	jne    f012bc7d <test_krealloc+0x1b79>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012bc43:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012bc49:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bc4f:	8d 50 01             	lea    0x1(%eax),%edx
f012bc52:	89 d0                	mov    %edx,%eax
f012bc54:	01 c0                	add    %eax,%eax
f012bc56:	01 d0                	add    %edx,%eax
f012bc58:	01 c0                	add    %eax,%eax
f012bc5a:	01 d0                	add    %edx,%eax
f012bc5c:	39 c1                	cmp    %eax,%ecx
f012bc5e:	75 1d                	jne    f012bc7d <test_krealloc+0x1b79>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012bc60:	8b 8d 10 fe ff ff    	mov    -0x1f0(%ebp),%ecx
f012bc66:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bc6c:	8d 50 01             	lea    0x1(%eax),%edx
f012bc6f:	89 d0                	mov    %edx,%eax
f012bc71:	01 c0                	add    %eax,%eax
f012bc73:	01 d0                	add    %edx,%eax
f012bc75:	01 c0                	add    %eax,%eax
f012bc77:	01 d0                	add    %edx,%eax
f012bc79:	39 c1                	cmp    %eax,%ecx
f012bc7b:	74 17                	je     f012bc94 <test_krealloc+0x1b90>
			panic("krealloc: invalid read after re-allocations");
f012bc7d:	83 ec 04             	sub    $0x4,%esp
f012bc80:	68 18 b3 13 f0       	push   $0xf013b318
f012bc85:	68 c0 10 00 00       	push   $0x10c0
f012bc8a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bc8f:	e8 1c 45 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012bc94:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bc9a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012bca0:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012bca7:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012bcaa:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012bcb1:	eb 24                	jmp    f012bcd7 <test_krealloc+0x1bd3>
			sums[0] += shortArr[i];
f012bcb3:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012bcb9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bcbc:	01 c0                	add    %eax,%eax
f012bcbe:	89 c1                	mov    %eax,%ecx
f012bcc0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012bcc6:	01 c8                	add    %ecx,%eax
f012bcc8:	66 8b 00             	mov    (%eax),%ax
f012bccb:	98                   	cwtl   
f012bccc:	01 d0                	add    %edx,%eax
f012bcce:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012bcd4:	ff 45 d8             	incl   -0x28(%ebp)
f012bcd7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bcdd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012bce0:	7d d1                	jge    f012bcb3 <test_krealloc+0x1baf>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012bce2:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012bce8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bcee:	8d 48 01             	lea    0x1(%eax),%ecx
f012bcf1:	89 c8                	mov    %ecx,%eax
f012bcf3:	c1 e0 02             	shl    $0x2,%eax
f012bcf6:	01 c8                	add    %ecx,%eax
f012bcf8:	39 c2                	cmp    %eax,%edx
f012bcfa:	74 17                	je     f012bd13 <test_krealloc+0x1c0f>
			panic("krealloc: invalid read after re-allocations");
f012bcfc:	83 ec 04             	sub    $0x4,%esp
f012bcff:	68 18 b3 13 f0       	push   $0xf013b318
f012bd04:	68 ca 10 00 00       	push   $0x10ca
f012bd09:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bd0e:	e8 9d 44 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012bd13:	e8 4a 0d fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012bd18:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bd1b:	e8 64 89 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bd20:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012bd26:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bd2c:	83 ec 08             	sub    $0x8,%esp
f012bd2f:	6a 00                	push   $0x0
f012bd31:	50                   	push   %eax
f012bd32:	e8 7a c3 fd ff       	call   f01080b1 <krealloc>
f012bd37:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bd3a:	e8 45 89 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bd3f:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bd45:	74 17                	je     f012bd5e <test_krealloc+0x1c5a>
			panic(
f012bd47:	83 ec 04             	sub    $0x4,%esp
f012bd4a:	68 ec 9a 13 f0       	push   $0xf0139aec
f012bd4f:	68 d2 10 00 00       	push   $0x10d2
f012bd54:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bd59:	e8 52 44 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012bd5e:	e8 ff 0c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012bd63:	89 c2                	mov    %eax,%edx
f012bd65:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bd68:	29 c2                	sub    %eax,%edx
f012bd6a:	89 d0                	mov    %edx,%eax
f012bd6c:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012bd71:	74 17                	je     f012bd8a <test_krealloc+0x1c86>
			panic("krealloc: pages in memory are not freed correctly");
f012bd73:	83 ec 04             	sub    $0x4,%esp
f012bd76:	68 a8 af 13 f0       	push   $0xf013afa8
f012bd7b:	68 d4 10 00 00       	push   $0x10d4
f012bd80:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bd85:	e8 26 44 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012bd8a:	e8 d3 0c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012bd8f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bd92:	e8 ed 88 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bd97:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012bd9d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bda3:	83 ec 0c             	sub    $0xc,%esp
f012bda6:	50                   	push   %eax
f012bda7:	e8 66 c2 fd ff       	call   f0108012 <kfree>
f012bdac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bdaf:	e8 d0 88 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bdb4:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bdba:	74 17                	je     f012bdd3 <test_krealloc+0x1ccf>
			panic(
f012bdbc:	83 ec 04             	sub    $0x4,%esp
f012bdbf:	68 ec 9a 13 f0       	push   $0xf0139aec
f012bdc4:	68 dc 10 00 00       	push   $0x10dc
f012bdc9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bdce:	e8 dd 43 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012bdd3:	e8 8a 0c fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012bdd8:	89 c2                	mov    %eax,%edx
f012bdda:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bddd:	29 c2                	sub    %eax,%edx
f012bddf:	89 d0                	mov    %edx,%eax
f012bde1:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012bde6:	74 17                	je     f012bdff <test_krealloc+0x1cfb>
			panic("krealloc: pages in memory are not freed correctly");
f012bde8:	83 ec 04             	sub    $0x4,%esp
f012bdeb:	68 a8 af 13 f0       	push   $0xf013afa8
f012bdf0:	68 de 10 00 00       	push   $0x10de
f012bdf5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bdfa:	e8 b1 43 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bdff:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012be06:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012be0d:	eb 48                	jmp    f012be57 <test_krealloc+0x1d53>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012be0f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012be12:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012be17:	83 ec 04             	sub    $0x4,%esp
f012be1a:	8d 8d 00 fe ff ff    	lea    -0x200(%ebp),%ecx
f012be20:	51                   	push   %ecx
f012be21:	52                   	push   %edx
f012be22:	50                   	push   %eax
f012be23:	e8 bf b6 fd ff       	call   f01074e7 <get_page_table>
f012be28:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012be2b:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012be31:	85 c0                	test   %eax,%eax
f012be33:	75 17                	jne    f012be4c <test_krealloc+0x1d48>
					panic(
f012be35:	83 ec 04             	sub    $0x4,%esp
f012be38:	68 d4 a3 13 f0       	push   $0xf013a3d4
f012be3d:	68 eb 10 00 00       	push   $0x10eb
f012be42:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012be47:	e8 64 43 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012be4c:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012be53:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012be57:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012be5b:	78 b2                	js     f012be0f <test_krealloc+0x1d0b>
f012be5d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012be61:	7f 09                	jg     f012be6c <test_krealloc+0x1d68>
f012be63:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012be6a:	76 a3                	jbe    f012be0f <test_krealloc+0x1d0b>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012be6c:	83 ec 0c             	sub    $0xc,%esp
f012be6f:	68 b6 9c 13 f0       	push   $0xf0139cb6
f012be74:	e8 b8 4f fd ff       	call   f0100e31 <cprintf>
f012be79:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012be7c:	83 ec 0c             	sub    $0xc,%esp
f012be7f:	68 44 b3 13 f0       	push   $0xf013b344
f012be84:	e8 a8 4f fd ff       	call   f0100e31 <cprintf>
f012be89:	83 c4 10             	add    $0x10,%esp
	return 0;
f012be8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012be91:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012be94:	5b                   	pop    %ebx
f012be95:	5f                   	pop    %edi
f012be96:	5d                   	pop    %ebp
f012be97:	c3                   	ret    

f012be98 <test_krealloc_BF>:


int test_krealloc_BF() {
f012be98:	55                   	push   %ebp
f012be99:	89 e5                	mov    %esp,%ebp
f012be9b:	57                   	push   %edi
f012be9c:	53                   	push   %ebx
f012be9d:	81 ec 10 02 00 00    	sub    $0x210,%esp
	cprintf("==============================================\n");
f012bea3:	83 ec 0c             	sub    $0xc,%esp
f012bea6:	68 14 9a 13 f0       	push   $0xf0139a14
f012beab:	e8 81 4f fd ff       	call   f0100e31 <cprintf>
f012beb0:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012beb3:	83 ec 0c             	sub    $0xc,%esp
f012beb6:	68 44 9a 13 f0       	push   $0xf0139a44
f012bebb:	e8 71 4f fd ff       	call   f0100e31 <cprintf>
f012bec0:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012bec3:	83 ec 0c             	sub    $0xc,%esp
f012bec6:	68 14 9a 13 f0       	push   $0xf0139a14
f012becb:	e8 61 4f fd ff       	call   f0100e31 <cprintf>
f012bed0:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012bed3:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012bed7:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012bedb:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012bee1:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012bee7:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012beee:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012bef5:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f012befb:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bf00:	b8 00 00 00 00       	mov    $0x0,%eax
f012bf05:	89 d7                	mov    %edx,%edi
f012bf07:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012bf09:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012bf10:	8d 95 48 fe ff ff    	lea    -0x1b8(%ebp),%edx
f012bf16:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bf1b:	b8 00 00 00 00       	mov    $0x0,%eax
f012bf20:	89 d7                	mov    %edx,%edi
f012bf22:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012bf24:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f012bf2a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bf2f:	b8 00 00 00 00       	mov    $0x0,%eax
f012bf34:	89 d7                	mov    %edx,%edi
f012bf36:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bf38:	e8 25 0b fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012bf3d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012bf40:	83 ec 08             	sub    $0x8,%esp
f012bf43:	68 00 fc 0f 00       	push   $0xffc00
f012bf48:	6a 00                	push   $0x0
f012bf4a:	e8 62 c1 fd ff       	call   f01080b1 <krealloc>
f012bf4f:	83 c4 10             	add    $0x10,%esp
f012bf52:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012bf58:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bf5e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bf63:	77 17                	ja     f012bf7c <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf65:	83 ec 04             	sub    $0x4,%esp
f012bf68:	68 78 ad 13 f0       	push   $0xf013ad78
f012bf6d:	68 1a 11 00 00       	push   $0x111a
f012bf72:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bf77:	e8 34 42 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012bf7c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bf82:	89 c1                	mov    %eax,%ecx
f012bf84:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012bf8b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012bf90:	0f b6 d0             	movzbl %al,%edx
f012bf93:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012bf96:	01 d0                	add    %edx,%eax
f012bf98:	48                   	dec    %eax
f012bf99:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012bf9c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bf9f:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfa4:	f7 75 b4             	divl   -0x4c(%ebp)
f012bfa7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bfaa:	29 d0                	sub    %edx,%eax
f012bfac:	89 c3                	mov    %eax,%ebx
f012bfae:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012bfb5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012bfba:	0f b6 c0             	movzbl %al,%eax
f012bfbd:	c1 e0 04             	shl    $0x4,%eax
f012bfc0:	89 c2                	mov    %eax,%edx
f012bfc2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012bfc5:	01 d0                	add    %edx,%eax
f012bfc7:	48                   	dec    %eax
f012bfc8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012bfcb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bfce:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfd3:	f7 75 ac             	divl   -0x54(%ebp)
f012bfd6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bfd9:	29 d0                	sub    %edx,%eax
f012bfdb:	01 d8                	add    %ebx,%eax
f012bfdd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012bfe2:	39 c1                	cmp    %eax,%ecx
f012bfe4:	74 17                	je     f012bffd <test_krealloc_BF+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012bfe6:	83 ec 04             	sub    $0x4,%esp
f012bfe9:	68 b4 ad 13 f0       	push   $0xf013adb4
f012bfee:	68 1c 11 00 00       	push   $0x111c
f012bff3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012bff8:	e8 b3 41 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bffd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c000:	e8 5d 0a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c005:	29 c3                	sub    %eax,%ebx
f012c007:	89 d8                	mov    %ebx,%eax
f012c009:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c00e:	74 17                	je     f012c027 <test_krealloc_BF+0x18f>
			panic("krealloc: Wrong allocation: ");
f012c010:	83 ec 04             	sub    $0x4,%esp
f012c013:	68 e6 ad 13 f0       	push   $0xf013ade6
f012c018:	68 1f 11 00 00       	push   $0x111f
f012c01d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c022:	e8 89 41 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c027:	c7 85 48 fe ff ff ff 	movl   $0xffbff,-0x1b8(%ebp)
f012c02e:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c031:	e8 2c 0a fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c036:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c039:	83 ec 08             	sub    $0x8,%esp
f012c03c:	68 00 fc 0f 00       	push   $0xffc00
f012c041:	6a 00                	push   $0x0
f012c043:	e8 69 c0 fd ff       	call   f01080b1 <krealloc>
f012c048:	83 c4 10             	add    $0x10,%esp
f012c04b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c051:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c057:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c05c:	77 17                	ja     f012c075 <test_krealloc_BF+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c05e:	83 ec 04             	sub    $0x4,%esp
f012c061:	68 78 ad 13 f0       	push   $0xf013ad78
f012c066:	68 27 11 00 00       	push   $0x1127
f012c06b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c070:	e8 3b 41 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c075:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c07b:	89 c1                	mov    %eax,%ecx
f012c07d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c084:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c089:	0f b6 d0             	movzbl %al,%edx
f012c08c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c08f:	01 d0                	add    %edx,%eax
f012c091:	48                   	dec    %eax
f012c092:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c095:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c098:	ba 00 00 00 00       	mov    $0x0,%edx
f012c09d:	f7 75 a4             	divl   -0x5c(%ebp)
f012c0a0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c0a3:	29 d0                	sub    %edx,%eax
f012c0a5:	89 c3                	mov    %eax,%ebx
f012c0a7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c0ae:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c0b3:	0f b6 c0             	movzbl %al,%eax
f012c0b6:	c1 e0 04             	shl    $0x4,%eax
f012c0b9:	89 c2                	mov    %eax,%edx
f012c0bb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c0be:	01 d0                	add    %edx,%eax
f012c0c0:	48                   	dec    %eax
f012c0c1:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c0c4:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c0c7:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0cc:	f7 75 9c             	divl   -0x64(%ebp)
f012c0cf:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c0d2:	29 d0                	sub    %edx,%eax
f012c0d4:	01 d8                	add    %ebx,%eax
f012c0d6:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c0db:	39 c1                	cmp    %eax,%ecx
f012c0dd:	74 17                	je     f012c0f6 <test_krealloc_BF+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012c0df:	83 ec 04             	sub    $0x4,%esp
f012c0e2:	68 b4 ad 13 f0       	push   $0xf013adb4
f012c0e7:	68 29 11 00 00       	push   $0x1129
f012c0ec:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c0f1:	e8 ba 40 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c0f6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c0f9:	e8 64 09 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c0fe:	29 c3                	sub    %eax,%ebx
f012c100:	89 d8                	mov    %ebx,%eax
f012c102:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c107:	74 17                	je     f012c120 <test_krealloc_BF+0x288>
			panic("krealloc: Wrong allocation: ");
f012c109:	83 ec 04             	sub    $0x4,%esp
f012c10c:	68 e6 ad 13 f0       	push   $0xf013ade6
f012c111:	68 2b 11 00 00       	push   $0x112b
f012c116:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c11b:	e8 90 40 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c120:	c7 85 4c fe ff ff ff 	movl   $0xffbff,-0x1b4(%ebp)
f012c127:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c12a:	e8 33 09 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c12f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c132:	83 ec 08             	sub    $0x8,%esp
f012c135:	68 00 fc 0f 00       	push   $0xffc00
f012c13a:	6a 00                	push   $0x0
f012c13c:	e8 70 bf fd ff       	call   f01080b1 <krealloc>
f012c141:	83 c4 10             	add    $0x10,%esp
f012c144:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c14a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c150:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c155:	77 17                	ja     f012c16e <test_krealloc_BF+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c157:	83 ec 04             	sub    $0x4,%esp
f012c15a:	68 78 ad 13 f0       	push   $0xf013ad78
f012c15f:	68 33 11 00 00       	push   $0x1133
f012c164:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c169:	e8 42 40 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c16e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c174:	89 c1                	mov    %eax,%ecx
f012c176:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c17d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c182:	0f b6 d0             	movzbl %al,%edx
f012c185:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c188:	01 d0                	add    %edx,%eax
f012c18a:	48                   	dec    %eax
f012c18b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c18e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c191:	ba 00 00 00 00       	mov    $0x0,%edx
f012c196:	f7 75 94             	divl   -0x6c(%ebp)
f012c199:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c19c:	29 d0                	sub    %edx,%eax
f012c19e:	89 c3                	mov    %eax,%ebx
f012c1a0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c1a7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c1ac:	0f b6 c0             	movzbl %al,%eax
f012c1af:	c1 e0 04             	shl    $0x4,%eax
f012c1b2:	89 c2                	mov    %eax,%edx
f012c1b4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c1b7:	01 d0                	add    %edx,%eax
f012c1b9:	48                   	dec    %eax
f012c1ba:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c1bd:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c1c0:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1c5:	f7 75 8c             	divl   -0x74(%ebp)
f012c1c8:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c1cb:	29 d0                	sub    %edx,%eax
f012c1cd:	01 d8                	add    %ebx,%eax
f012c1cf:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c1d4:	39 c1                	cmp    %eax,%ecx
f012c1d6:	74 17                	je     f012c1ef <test_krealloc_BF+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012c1d8:	83 ec 04             	sub    $0x4,%esp
f012c1db:	68 b4 ad 13 f0       	push   $0xf013adb4
f012c1e0:	68 35 11 00 00       	push   $0x1135
f012c1e5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c1ea:	e8 c1 3f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c1ef:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c1f2:	e8 6b 08 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c1f7:	29 c3                	sub    %eax,%ebx
f012c1f9:	89 d8                	mov    %ebx,%eax
f012c1fb:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c200:	74 17                	je     f012c219 <test_krealloc_BF+0x381>
			panic("krealloc: Wrong allocation: ");
f012c202:	83 ec 04             	sub    $0x4,%esp
f012c205:	68 e6 ad 13 f0       	push   $0xf013ade6
f012c20a:	68 37 11 00 00       	push   $0x1137
f012c20f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c214:	e8 97 3f fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c219:	c7 85 50 fe ff ff ff 	movl   $0x3feff,-0x1b0(%ebp)
f012c220:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c223:	e8 3a 08 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c228:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c22b:	83 ec 08             	sub    $0x8,%esp
f012c22e:	68 00 fc 0f 00       	push   $0xffc00
f012c233:	6a 00                	push   $0x0
f012c235:	e8 77 be fd ff       	call   f01080b1 <krealloc>
f012c23a:	83 c4 10             	add    $0x10,%esp
f012c23d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c243:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c249:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c24e:	77 17                	ja     f012c267 <test_krealloc_BF+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c250:	83 ec 04             	sub    $0x4,%esp
f012c253:	68 78 ad 13 f0       	push   $0xf013ad78
f012c258:	68 3e 11 00 00       	push   $0x113e
f012c25d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c262:	e8 49 3f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c267:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c26d:	89 c1                	mov    %eax,%ecx
f012c26f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c276:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c27b:	0f b6 d0             	movzbl %al,%edx
f012c27e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c281:	01 d0                	add    %edx,%eax
f012c283:	48                   	dec    %eax
f012c284:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c287:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c28a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c28f:	f7 75 84             	divl   -0x7c(%ebp)
f012c292:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c295:	29 d0                	sub    %edx,%eax
f012c297:	89 c3                	mov    %eax,%ebx
f012c299:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c2a0:	10 00 00 
f012c2a3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c2a8:	0f b6 c0             	movzbl %al,%eax
f012c2ab:	c1 e0 04             	shl    $0x4,%eax
f012c2ae:	89 c2                	mov    %eax,%edx
f012c2b0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c2b6:	01 d0                	add    %edx,%eax
f012c2b8:	48                   	dec    %eax
f012c2b9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c2bf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c2c5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2ca:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c2d0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c2d6:	29 d0                	sub    %edx,%eax
f012c2d8:	01 d8                	add    %ebx,%eax
f012c2da:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c2df:	39 c1                	cmp    %eax,%ecx
f012c2e1:	74 17                	je     f012c2fa <test_krealloc_BF+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012c2e3:	83 ec 04             	sub    $0x4,%esp
f012c2e6:	68 b4 ad 13 f0       	push   $0xf013adb4
f012c2eb:	68 40 11 00 00       	push   $0x1140
f012c2f0:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c2f5:	e8 b6 3e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c2fa:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c2fd:	e8 60 07 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c302:	29 c3                	sub    %eax,%ebx
f012c304:	89 d8                	mov    %ebx,%eax
f012c306:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c30b:	74 17                	je     f012c324 <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong allocation: ");
f012c30d:	83 ec 04             	sub    $0x4,%esp
f012c310:	68 e6 ad 13 f0       	push   $0xf013ade6
f012c315:	68 42 11 00 00       	push   $0x1142
f012c31a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c31f:	e8 8c 3e fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c324:	c7 85 54 fe ff ff ff 	movl   $0x3feff,-0x1ac(%ebp)
f012c32b:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c32e:	e8 2f 07 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c333:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c336:	83 ec 08             	sub    $0x8,%esp
f012c339:	68 00 fc 1f 00       	push   $0x1ffc00
f012c33e:	6a 00                	push   $0x0
f012c340:	e8 6c bd fd ff       	call   f01080b1 <krealloc>
f012c345:	83 c4 10             	add    $0x10,%esp
f012c348:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c34e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c354:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c359:	77 17                	ja     f012c372 <test_krealloc_BF+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c35b:	83 ec 04             	sub    $0x4,%esp
f012c35e:	68 78 ad 13 f0       	push   $0xf013ad78
f012c363:	68 49 11 00 00       	push   $0x1149
f012c368:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c36d:	e8 3e 3e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c372:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c378:	89 c1                	mov    %eax,%ecx
f012c37a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c381:	10 00 00 
f012c384:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c389:	0f b6 d0             	movzbl %al,%edx
f012c38c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c392:	01 d0                	add    %edx,%eax
f012c394:	48                   	dec    %eax
f012c395:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c39b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c3a1:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3a6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c3ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c3b2:	29 d0                	sub    %edx,%eax
f012c3b4:	89 c3                	mov    %eax,%ebx
f012c3b6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c3bd:	10 00 00 
f012c3c0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c3c5:	0f b6 c0             	movzbl %al,%eax
f012c3c8:	c1 e0 04             	shl    $0x4,%eax
f012c3cb:	89 c2                	mov    %eax,%edx
f012c3cd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c3d3:	01 d0                	add    %edx,%eax
f012c3d5:	48                   	dec    %eax
f012c3d6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c3dc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c3e2:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3e7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c3ed:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c3f3:	29 d0                	sub    %edx,%eax
f012c3f5:	01 d8                	add    %ebx,%eax
f012c3f7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c3fc:	39 c1                	cmp    %eax,%ecx
f012c3fe:	74 17                	je     f012c417 <test_krealloc_BF+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012c400:	83 ec 04             	sub    $0x4,%esp
f012c403:	68 b4 ad 13 f0       	push   $0xf013adb4
f012c408:	68 4b 11 00 00       	push   $0x114b
f012c40d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c412:	e8 99 3d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c417:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c41a:	e8 43 06 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c41f:	29 c3                	sub    %eax,%ebx
f012c421:	89 d8                	mov    %ebx,%eax
f012c423:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c428:	74 17                	je     f012c441 <test_krealloc_BF+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012c42a:	83 ec 04             	sub    $0x4,%esp
f012c42d:	68 e6 ad 13 f0       	push   $0xf013ade6
f012c432:	68 4d 11 00 00       	push   $0x114d
f012c437:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c43c:	e8 6f 3d fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c441:	c7 85 58 fe ff ff ff 	movl   $0xffdff,-0x1a8(%ebp)
f012c448:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c44b:	e8 12 06 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c450:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c453:	83 ec 08             	sub    $0x8,%esp
f012c456:	68 00 fc 1f 00       	push   $0x1ffc00
f012c45b:	6a 00                	push   $0x0
f012c45d:	e8 4f bc fd ff       	call   f01080b1 <krealloc>
f012c462:	83 c4 10             	add    $0x10,%esp
f012c465:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c46b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c471:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c476:	77 17                	ja     f012c48f <test_krealloc_BF+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c478:	83 ec 04             	sub    $0x4,%esp
f012c47b:	68 78 ad 13 f0       	push   $0xf013ad78
f012c480:	68 54 11 00 00       	push   $0x1154
f012c485:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c48a:	e8 21 3d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c48f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c495:	89 c1                	mov    %eax,%ecx
f012c497:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c49e:	10 00 00 
f012c4a1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c4a6:	0f b6 d0             	movzbl %al,%edx
f012c4a9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c4af:	01 d0                	add    %edx,%eax
f012c4b1:	48                   	dec    %eax
f012c4b2:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c4b8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c4be:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4c3:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c4c9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c4cf:	29 d0                	sub    %edx,%eax
f012c4d1:	89 c3                	mov    %eax,%ebx
f012c4d3:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c4da:	10 00 00 
f012c4dd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c4e2:	0f b6 c0             	movzbl %al,%eax
f012c4e5:	c1 e0 04             	shl    $0x4,%eax
f012c4e8:	89 c2                	mov    %eax,%edx
f012c4ea:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c4f0:	01 d0                	add    %edx,%eax
f012c4f2:	48                   	dec    %eax
f012c4f3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c4f9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c4ff:	ba 00 00 00 00       	mov    $0x0,%edx
f012c504:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c50a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c510:	29 d0                	sub    %edx,%eax
f012c512:	01 d8                	add    %ebx,%eax
f012c514:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c519:	39 c1                	cmp    %eax,%ecx
f012c51b:	74 17                	je     f012c534 <test_krealloc_BF+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012c51d:	83 ec 04             	sub    $0x4,%esp
f012c520:	68 b4 ad 13 f0       	push   $0xf013adb4
f012c525:	68 56 11 00 00       	push   $0x1156
f012c52a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c52f:	e8 7c 3c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c534:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c537:	e8 26 05 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c53c:	29 c3                	sub    %eax,%ebx
f012c53e:	89 d8                	mov    %ebx,%eax
f012c540:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c545:	74 17                	je     f012c55e <test_krealloc_BF+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012c547:	83 ec 04             	sub    $0x4,%esp
f012c54a:	68 e6 ad 13 f0       	push   $0xf013ade6
f012c54f:	68 58 11 00 00       	push   $0x1158
f012c554:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c559:	e8 52 3c fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c55e:	c7 85 5c fe ff ff ff 	movl   $0xffdff,-0x1a4(%ebp)
f012c565:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c568:	e8 f5 04 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c56d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c570:	83 ec 08             	sub    $0x8,%esp
f012c573:	68 00 fc 2f 00       	push   $0x2ffc00
f012c578:	6a 00                	push   $0x0
f012c57a:	e8 32 bb fd ff       	call   f01080b1 <krealloc>
f012c57f:	83 c4 10             	add    $0x10,%esp
f012c582:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c588:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c58e:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c593:	77 17                	ja     f012c5ac <test_krealloc_BF+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c595:	83 ec 04             	sub    $0x4,%esp
f012c598:	68 78 ad 13 f0       	push   $0xf013ad78
f012c59d:	68 5f 11 00 00       	push   $0x115f
f012c5a2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c5a7:	e8 04 3c fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c5ac:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c5b2:	89 c1                	mov    %eax,%ecx
f012c5b4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c5bb:	10 00 00 
f012c5be:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c5c3:	0f b6 d0             	movzbl %al,%edx
f012c5c6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c5cc:	01 d0                	add    %edx,%eax
f012c5ce:	48                   	dec    %eax
f012c5cf:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c5d5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c5db:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5e0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c5e6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c5ec:	29 d0                	sub    %edx,%eax
f012c5ee:	89 c3                	mov    %eax,%ebx
f012c5f0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c5f7:	10 00 00 
f012c5fa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c5ff:	0f b6 c0             	movzbl %al,%eax
f012c602:	c1 e0 04             	shl    $0x4,%eax
f012c605:	89 c2                	mov    %eax,%edx
f012c607:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c60d:	01 d0                	add    %edx,%eax
f012c60f:	48                   	dec    %eax
f012c610:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c616:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c61c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c621:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c627:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c62d:	29 d0                	sub    %edx,%eax
f012c62f:	01 d8                	add    %ebx,%eax
f012c631:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c636:	39 c1                	cmp    %eax,%ecx
f012c638:	74 17                	je     f012c651 <test_krealloc_BF+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012c63a:	83 ec 04             	sub    $0x4,%esp
f012c63d:	68 b4 ad 13 f0       	push   $0xf013adb4
f012c642:	68 61 11 00 00       	push   $0x1161
f012c647:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c64c:	e8 5f 3b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c651:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c654:	e8 09 04 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c659:	29 c3                	sub    %eax,%ebx
f012c65b:	89 d8                	mov    %ebx,%eax
f012c65d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c662:	74 17                	je     f012c67b <test_krealloc_BF+0x7e3>
			panic("Wrong allocation: ");
f012c664:	83 ec 04             	sub    $0x4,%esp
f012c667:	68 1c 9f 13 f0       	push   $0xf0139f1c
f012c66c:	68 63 11 00 00       	push   $0x1163
f012c671:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c676:	e8 35 3b fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c67b:	c7 85 60 fe ff ff 7f 	movl   $0x5ff7f,-0x1a0(%ebp)
f012c682:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c685:	e8 d8 03 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c68a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c68d:	83 ec 08             	sub    $0x8,%esp
f012c690:	68 00 fc 2f 00       	push   $0x2ffc00
f012c695:	6a 00                	push   $0x0
f012c697:	e8 15 ba fd ff       	call   f01080b1 <krealloc>
f012c69c:	83 c4 10             	add    $0x10,%esp
f012c69f:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c6a5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c6ab:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c6b0:	77 17                	ja     f012c6c9 <test_krealloc_BF+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c6b2:	83 ec 04             	sub    $0x4,%esp
f012c6b5:	68 78 ad 13 f0       	push   $0xf013ad78
f012c6ba:	68 6a 11 00 00       	push   $0x116a
f012c6bf:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c6c4:	e8 e7 3a fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c6c9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c6cf:	89 c1                	mov    %eax,%ecx
f012c6d1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c6d8:	10 00 00 
f012c6db:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c6e0:	0f b6 d0             	movzbl %al,%edx
f012c6e3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c6e9:	01 d0                	add    %edx,%eax
f012c6eb:	48                   	dec    %eax
f012c6ec:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c6f2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c6f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6fd:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c703:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c709:	29 d0                	sub    %edx,%eax
f012c70b:	89 c3                	mov    %eax,%ebx
f012c70d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c714:	10 00 00 
f012c717:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c71c:	0f b6 c0             	movzbl %al,%eax
f012c71f:	c1 e0 04             	shl    $0x4,%eax
f012c722:	89 c2                	mov    %eax,%edx
f012c724:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c72a:	01 d0                	add    %edx,%eax
f012c72c:	48                   	dec    %eax
f012c72d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c733:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c739:	ba 00 00 00 00       	mov    $0x0,%edx
f012c73e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c744:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c74a:	29 d0                	sub    %edx,%eax
f012c74c:	01 d8                	add    %ebx,%eax
f012c74e:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c753:	39 c1                	cmp    %eax,%ecx
f012c755:	74 17                	je     f012c76e <test_krealloc_BF+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012c757:	83 ec 04             	sub    $0x4,%esp
f012c75a:	68 b4 ad 13 f0       	push   $0xf013adb4
f012c75f:	68 6c 11 00 00       	push   $0x116c
f012c764:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c769:	e8 42 3a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c76e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c771:	e8 ec 02 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c776:	29 c3                	sub    %eax,%ebx
f012c778:	89 d8                	mov    %ebx,%eax
f012c77a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c77f:	74 17                	je     f012c798 <test_krealloc_BF+0x900>
			panic("krealloc: Wrong allocation: ");
f012c781:	83 ec 04             	sub    $0x4,%esp
f012c784:	68 e6 ad 13 f0       	push   $0xf013ade6
f012c789:	68 6e 11 00 00       	push   $0x116e
f012c78e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c793:	e8 18 3a fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c798:	c7 85 64 fe ff ff 7f 	movl   $0x5ff7f,-0x19c(%ebp)
f012c79f:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c7a2:	e8 bb 02 fe ff       	call   f010ca62 <sys_calculate_free_frames>
f012c7a7:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c7aa:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012c7b1:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c7b4:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c7ba:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012c7c0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c7c6:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c7c9:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c7cb:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012c7d1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c7d7:	01 c2                	add    %eax,%edx
f012c7d9:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c7dc:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c7de:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c7e4:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c7ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c7f1:	eb 11                	jmp    f012c804 <test_krealloc_BF+0x96c>
			ptr[i] = 2;
f012c7f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c7f6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c7fc:	01 d0                	add    %edx,%eax
f012c7fe:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c801:	ff 45 f4             	incl   -0xc(%ebp)
f012c804:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c80a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c80d:	7d e4                	jge    f012c7f3 <test_krealloc_BF+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c80f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c815:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012c81b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c821:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c827:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c82d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c834:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c83a:	01 d0                	add    %edx,%eax
f012c83c:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c842:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c848:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c84e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c855:	eb 1b                	jmp    f012c872 <test_krealloc_BF+0x9da>
			intArr[i] = 4;
f012c857:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c85a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c861:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c867:	01 d0                	add    %edx,%eax
f012c869:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c86f:	ff 45 f0             	incl   -0x10(%ebp)
f012c872:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c878:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c87b:	7d da                	jge    f012c857 <test_krealloc_BF+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c87d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c883:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c889:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c890:	eb 17                	jmp    f012c8a9 <test_krealloc_BF+0xa11>
			shortArr[i] = 5;
f012c892:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c895:	01 c0                	add    %eax,%eax
f012c897:	89 c2                	mov    %eax,%edx
f012c899:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c89f:	01 d0                	add    %edx,%eax
f012c8a1:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c8a6:	ff 45 ec             	incl   -0x14(%ebp)
f012c8a9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c8af:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c8b2:	7d de                	jge    f012c892 <test_krealloc_BF+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c8b4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c8ba:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012c8c0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c8c6:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c8cb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c8d1:	01 c0                	add    %eax,%eax
f012c8d3:	89 c2                	mov    %eax,%edx
f012c8d5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c8db:	01 d0                	add    %edx,%eax
f012c8dd:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c8e2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c8e8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c8ee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c8f5:	eb 49                	jmp    f012c940 <test_krealloc_BF+0xaa8>
			structArr[i].a = 7;
f012c8f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c8fa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c901:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c907:	01 d0                	add    %edx,%eax
f012c909:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c90c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c90f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c916:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c91c:	01 d0                	add    %edx,%eax
f012c91e:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c924:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c927:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c92e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c934:	01 d0                	add    %edx,%eax
f012c936:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c93d:	ff 45 e8             	incl   -0x18(%ebp)
f012c940:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c946:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c949:	7d ac                	jge    f012c8f7 <test_krealloc_BF+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c94b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c951:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012c957:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c95d:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c960:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c966:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c96c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c972:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c979:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c97f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c986:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c98c:	01 d0                	add    %edx,%eax
f012c98e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c991:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c997:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c99e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9a4:	01 d0                	add    %edx,%eax
f012c9a6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c9ac:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c9b2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9b9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9bf:	01 d0                	add    %edx,%eax
f012c9c1:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c9c8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c9ce:	8a 00                	mov    (%eax),%al
f012c9d0:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c9d3:	75 17                	jne    f012c9ec <test_krealloc_BF+0xb54>
f012c9d5:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012c9db:	89 c2                	mov    %eax,%edx
f012c9dd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c9e3:	01 d0                	add    %edx,%eax
f012c9e5:	8a 00                	mov    (%eax),%al
f012c9e7:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c9ea:	74 17                	je     f012ca03 <test_krealloc_BF+0xb6b>
			panic(
f012c9ec:	83 ec 04             	sub    $0x4,%esp
f012c9ef:	68 04 ae 13 f0       	push   $0xf013ae04
f012c9f4:	68 b1 11 00 00       	push   $0x11b1
f012c9f9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012c9fe:	e8 ad 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ca03:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ca09:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ca0f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ca15:	8a 00                	mov    (%eax),%al
f012ca17:	3c 02                	cmp    $0x2,%al
f012ca19:	75 16                	jne    f012ca31 <test_krealloc_BF+0xb99>
f012ca1b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ca21:	89 c2                	mov    %eax,%edx
f012ca23:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ca29:	01 d0                	add    %edx,%eax
f012ca2b:	8a 00                	mov    (%eax),%al
f012ca2d:	3c 02                	cmp    $0x2,%al
f012ca2f:	74 20                	je     f012ca51 <test_krealloc_BF+0xbb9>
			panic(
f012ca31:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ca37:	8a 00                	mov    (%eax),%al
f012ca39:	0f be c0             	movsbl %al,%eax
f012ca3c:	50                   	push   %eax
f012ca3d:	68 44 ae 13 f0       	push   $0xf013ae44
f012ca42:	68 b7 11 00 00       	push   $0x11b7
f012ca47:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ca4c:	e8 5f 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ca51:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012ca57:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ca5d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ca63:	8b 00                	mov    (%eax),%eax
f012ca65:	83 f8 03             	cmp    $0x3,%eax
f012ca68:	75 1c                	jne    f012ca86 <test_krealloc_BF+0xbee>
f012ca6a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ca70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ca77:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ca7d:	01 d0                	add    %edx,%eax
f012ca7f:	8b 00                	mov    (%eax),%eax
f012ca81:	83 f8 03             	cmp    $0x3,%eax
f012ca84:	74 17                	je     f012ca9d <test_krealloc_BF+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012ca86:	83 ec 04             	sub    $0x4,%esp
f012ca89:	68 90 ae 13 f0       	push   $0xf013ae90
f012ca8e:	68 bb 11 00 00       	push   $0x11bb
f012ca93:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ca98:	e8 13 37 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ca9d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012caa3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012caa9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012caaf:	8b 00                	mov    (%eax),%eax
f012cab1:	83 f8 04             	cmp    $0x4,%eax
f012cab4:	75 1c                	jne    f012cad2 <test_krealloc_BF+0xc3a>
f012cab6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012cabc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cac3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cac9:	01 d0                	add    %edx,%eax
f012cacb:	8b 00                	mov    (%eax),%eax
f012cacd:	83 f8 04             	cmp    $0x4,%eax
f012cad0:	74 17                	je     f012cae9 <test_krealloc_BF+0xc51>
			panic(
f012cad2:	83 ec 04             	sub    $0x4,%esp
f012cad5:	68 04 ae 13 f0       	push   $0xf013ae04
f012cada:	68 c0 11 00 00       	push   $0x11c0
f012cadf:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cae4:	e8 c7 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012cae9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012caef:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012caf5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cafb:	66 8b 00             	mov    (%eax),%ax
f012cafe:	66 83 f8 05          	cmp    $0x5,%ax
f012cb02:	75 1b                	jne    f012cb1f <test_krealloc_BF+0xc87>
f012cb04:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cb0a:	01 c0                	add    %eax,%eax
f012cb0c:	89 c2                	mov    %eax,%edx
f012cb0e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cb14:	01 d0                	add    %edx,%eax
f012cb16:	66 8b 00             	mov    (%eax),%ax
f012cb19:	66 83 f8 05          	cmp    $0x5,%ax
f012cb1d:	74 17                	je     f012cb36 <test_krealloc_BF+0xc9e>
			panic(
f012cb1f:	83 ec 04             	sub    $0x4,%esp
f012cb22:	68 04 ae 13 f0       	push   $0xf013ae04
f012cb27:	68 c5 11 00 00       	push   $0x11c5
f012cb2c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cb31:	e8 7a 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012cb36:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cb3c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012cb42:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cb48:	66 8b 00             	mov    (%eax),%ax
f012cb4b:	66 83 f8 06          	cmp    $0x6,%ax
f012cb4f:	75 1b                	jne    f012cb6c <test_krealloc_BF+0xcd4>
f012cb51:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cb57:	01 c0                	add    %eax,%eax
f012cb59:	89 c2                	mov    %eax,%edx
f012cb5b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cb61:	01 d0                	add    %edx,%eax
f012cb63:	66 8b 00             	mov    (%eax),%ax
f012cb66:	66 83 f8 06          	cmp    $0x6,%ax
f012cb6a:	74 17                	je     f012cb83 <test_krealloc_BF+0xceb>
			panic(
f012cb6c:	83 ec 04             	sub    $0x4,%esp
f012cb6f:	68 04 ae 13 f0       	push   $0xf013ae04
f012cb74:	68 ca 11 00 00       	push   $0x11ca
f012cb79:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cb7e:	e8 2d 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012cb83:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012cb89:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012cb8f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb95:	8a 00                	mov    (%eax),%al
f012cb97:	3c 07                	cmp    $0x7,%al
f012cb99:	75 1b                	jne    f012cbb6 <test_krealloc_BF+0xd1e>
f012cb9b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cba1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cba8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cbae:	01 d0                	add    %edx,%eax
f012cbb0:	8a 00                	mov    (%eax),%al
f012cbb2:	3c 07                	cmp    $0x7,%al
f012cbb4:	74 17                	je     f012cbcd <test_krealloc_BF+0xd35>
			panic(
f012cbb6:	83 ec 04             	sub    $0x4,%esp
f012cbb9:	68 04 ae 13 f0       	push   $0xf013ae04
f012cbbe:	68 cf 11 00 00       	push   $0x11cf
f012cbc3:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cbc8:	e8 e3 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012cbcd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cbd3:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cbd7:	66 83 f8 07          	cmp    $0x7,%ax
f012cbdb:	75 1f                	jne    f012cbfc <test_krealloc_BF+0xd64>
f012cbdd:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cbe3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cbea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cbf0:	01 d0                	add    %edx,%eax
f012cbf2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cbf6:	66 83 f8 07          	cmp    $0x7,%ax
f012cbfa:	74 17                	je     f012cc13 <test_krealloc_BF+0xd7b>
			panic(
f012cbfc:	83 ec 04             	sub    $0x4,%esp
f012cbff:	68 04 ae 13 f0       	push   $0xf013ae04
f012cc04:	68 d2 11 00 00       	push   $0x11d2
f012cc09:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cc0e:	e8 9d 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012cc13:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc19:	8b 40 04             	mov    0x4(%eax),%eax
f012cc1c:	83 f8 07             	cmp    $0x7,%eax
f012cc1f:	75 1d                	jne    f012cc3e <test_krealloc_BF+0xda6>
f012cc21:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cc27:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc2e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc34:	01 d0                	add    %edx,%eax
f012cc36:	8b 40 04             	mov    0x4(%eax),%eax
f012cc39:	83 f8 07             	cmp    $0x7,%eax
f012cc3c:	74 17                	je     f012cc55 <test_krealloc_BF+0xdbd>
			panic(
f012cc3e:	83 ec 04             	sub    $0x4,%esp
f012cc41:	68 04 ae 13 f0       	push   $0xf013ae04
f012cc46:	68 d5 11 00 00       	push   $0x11d5
f012cc4b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cc50:	e8 5b 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012cc55:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012cc5b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012cc61:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc67:	8a 00                	mov    (%eax),%al
f012cc69:	3c 08                	cmp    $0x8,%al
f012cc6b:	75 1b                	jne    f012cc88 <test_krealloc_BF+0xdf0>
f012cc6d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cc73:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc7a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc80:	01 d0                	add    %edx,%eax
f012cc82:	8a 00                	mov    (%eax),%al
f012cc84:	3c 08                	cmp    $0x8,%al
f012cc86:	74 17                	je     f012cc9f <test_krealloc_BF+0xe07>
			panic(
f012cc88:	83 ec 04             	sub    $0x4,%esp
f012cc8b:	68 04 ae 13 f0       	push   $0xf013ae04
f012cc90:	68 da 11 00 00       	push   $0x11da
f012cc95:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cc9a:	e8 11 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012cc9f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cca5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cca9:	66 83 f8 08          	cmp    $0x8,%ax
f012ccad:	75 1f                	jne    f012ccce <test_krealloc_BF+0xe36>
f012ccaf:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ccb5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ccbc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ccc2:	01 d0                	add    %edx,%eax
f012ccc4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ccc8:	66 83 f8 08          	cmp    $0x8,%ax
f012cccc:	74 17                	je     f012cce5 <test_krealloc_BF+0xe4d>
			panic(
f012ccce:	83 ec 04             	sub    $0x4,%esp
f012ccd1:	68 04 ae 13 f0       	push   $0xf013ae04
f012ccd6:	68 dd 11 00 00       	push   $0x11dd
f012ccdb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cce0:	e8 cb 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012cce5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cceb:	8b 40 04             	mov    0x4(%eax),%eax
f012ccee:	83 f8 08             	cmp    $0x8,%eax
f012ccf1:	75 1d                	jne    f012cd10 <test_krealloc_BF+0xe78>
f012ccf3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ccf9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd00:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd06:	01 d0                	add    %edx,%eax
f012cd08:	8b 40 04             	mov    0x4(%eax),%eax
f012cd0b:	83 f8 08             	cmp    $0x8,%eax
f012cd0e:	74 17                	je     f012cd27 <test_krealloc_BF+0xe8f>
			panic(
f012cd10:	83 ec 04             	sub    $0x4,%esp
f012cd13:	68 04 ae 13 f0       	push   $0xf013ae04
f012cd18:	68 e0 11 00 00       	push   $0x11e0
f012cd1d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cd22:	e8 89 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012cd27:	e8 36 fd fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012cd2c:	89 c2                	mov    %eax,%edx
f012cd2e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd31:	39 c2                	cmp    %eax,%edx
f012cd33:	74 17                	je     f012cd4c <test_krealloc_BF+0xeb4>
			panic(
f012cd35:	83 ec 04             	sub    $0x4,%esp
f012cd38:	68 c4 ae 13 f0       	push   $0xf013aec4
f012cd3d:	68 e4 11 00 00       	push   $0x11e4
f012cd42:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cd47:	e8 64 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012cd4c:	83 ec 0c             	sub    $0xc,%esp
f012cd4f:	68 10 af 13 f0       	push   $0xf013af10
f012cd54:	e8 d8 40 fd ff       	call   f0100e31 <cprintf>
f012cd59:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012cd5c:	e8 01 fd fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012cd61:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cd64:	e8 1b 79 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cd69:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012cd6f:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012cd75:	83 ec 08             	sub    $0x8,%esp
f012cd78:	6a 00                	push   $0x0
f012cd7a:	50                   	push   %eax
f012cd7b:	e8 31 b3 fd ff       	call   f01080b1 <krealloc>
f012cd80:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cd83:	e8 fc 78 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cd88:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cd8e:	74 17                	je     f012cda7 <test_krealloc_BF+0xf0f>
			panic(
f012cd90:	83 ec 04             	sub    $0x4,%esp
f012cd93:	68 34 af 13 f0       	push   $0xf013af34
f012cd98:	68 f1 11 00 00       	push   $0x11f1
f012cd9d:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cda2:	e8 09 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cda7:	e8 b6 fc fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012cdac:	89 c2                	mov    %eax,%edx
f012cdae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cdb1:	29 c2                	sub    %eax,%edx
f012cdb3:	89 d0                	mov    %edx,%eax
f012cdb5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cdba:	74 17                	je     f012cdd3 <test_krealloc_BF+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012cdbc:	83 ec 04             	sub    $0x4,%esp
f012cdbf:	68 a8 af 13 f0       	push   $0xf013afa8
f012cdc4:	68 f3 11 00 00       	push   $0x11f3
f012cdc9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cdce:	e8 dd 33 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012cdd3:	e8 8a fc fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012cdd8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cddb:	e8 a4 78 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cde0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012cde6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012cdec:	83 ec 08             	sub    $0x8,%esp
f012cdef:	6a 00                	push   $0x0
f012cdf1:	50                   	push   %eax
f012cdf2:	e8 ba b2 fd ff       	call   f01080b1 <krealloc>
f012cdf7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cdfa:	e8 85 78 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cdff:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ce05:	74 17                	je     f012ce1e <test_krealloc_BF+0xf86>
			panic(
f012ce07:	83 ec 04             	sub    $0x4,%esp
f012ce0a:	68 34 af 13 f0       	push   $0xf013af34
f012ce0f:	68 fc 11 00 00       	push   $0x11fc
f012ce14:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ce19:	e8 92 33 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ce1e:	e8 3f fc fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012ce23:	89 c2                	mov    %eax,%edx
f012ce25:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce28:	29 c2                	sub    %eax,%edx
f012ce2a:	89 d0                	mov    %edx,%eax
f012ce2c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ce31:	74 17                	je     f012ce4a <test_krealloc_BF+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012ce33:	83 ec 04             	sub    $0x4,%esp
f012ce36:	68 a8 af 13 f0       	push   $0xf013afa8
f012ce3b:	68 fe 11 00 00       	push   $0x11fe
f012ce40:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ce45:	e8 66 33 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012ce4a:	e8 13 fc fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012ce4f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ce52:	e8 2d 78 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ce57:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012ce5d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ce63:	83 ec 08             	sub    $0x8,%esp
f012ce66:	6a 00                	push   $0x0
f012ce68:	50                   	push   %eax
f012ce69:	e8 43 b2 fd ff       	call   f01080b1 <krealloc>
f012ce6e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ce71:	e8 0e 78 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ce76:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ce7c:	74 17                	je     f012ce95 <test_krealloc_BF+0xffd>
			panic(
f012ce7e:	83 ec 04             	sub    $0x4,%esp
f012ce81:	68 ec 9a 13 f0       	push   $0xf0139aec
f012ce86:	68 06 12 00 00       	push   $0x1206
f012ce8b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012ce90:	e8 1b 33 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012ce95:	e8 c8 fb fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012ce9a:	89 c2                	mov    %eax,%edx
f012ce9c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce9f:	29 c2                	sub    %eax,%edx
f012cea1:	89 d0                	mov    %edx,%eax
f012cea3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cea8:	74 17                	je     f012cec1 <test_krealloc_BF+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012ceaa:	83 ec 04             	sub    $0x4,%esp
f012cead:	68 a8 af 13 f0       	push   $0xf013afa8
f012ceb2:	68 08 12 00 00       	push   $0x1208
f012ceb7:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cebc:	e8 ef 32 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012cec1:	e8 9c fb fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012cec6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cec9:	e8 b6 77 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cece:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ced4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ceda:	83 ec 08             	sub    $0x8,%esp
f012cedd:	6a 00                	push   $0x0
f012cedf:	50                   	push   %eax
f012cee0:	e8 cc b1 fd ff       	call   f01080b1 <krealloc>
f012cee5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cee8:	e8 97 77 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ceed:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cef3:	74 17                	je     f012cf0c <test_krealloc_BF+0x1074>
			panic(
f012cef5:	83 ec 04             	sub    $0x4,%esp
f012cef8:	68 34 af 13 f0       	push   $0xf013af34
f012cefd:	68 10 12 00 00       	push   $0x1210
f012cf02:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cf07:	e8 a4 32 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012cf0c:	e8 51 fb fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012cf11:	89 c2                	mov    %eax,%edx
f012cf13:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cf16:	29 c2                	sub    %eax,%edx
f012cf18:	89 d0                	mov    %edx,%eax
f012cf1a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cf1f:	74 17                	je     f012cf38 <test_krealloc_BF+0x10a0>
			panic(
f012cf21:	83 ec 04             	sub    $0x4,%esp
f012cf24:	68 dc af 13 f0       	push   $0xf013afdc
f012cf29:	68 13 12 00 00       	push   $0x1213
f012cf2e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cf33:	e8 78 32 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cf38:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012cf3f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012cf46:	eb 48                	jmp    f012cf90 <test_krealloc_BF+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012cf48:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012cf4b:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012cf50:	83 ec 04             	sub    $0x4,%esp
f012cf53:	8d 8d f4 fd ff ff    	lea    -0x20c(%ebp),%ecx
f012cf59:	51                   	push   %ecx
f012cf5a:	52                   	push   %edx
f012cf5b:	50                   	push   %eax
f012cf5c:	e8 86 a5 fd ff       	call   f01074e7 <get_page_table>
f012cf61:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012cf64:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012cf6a:	85 c0                	test   %eax,%eax
f012cf6c:	75 17                	jne    f012cf85 <test_krealloc_BF+0x10ed>
					panic(
f012cf6e:	83 ec 04             	sub    $0x4,%esp
f012cf71:	68 d4 a3 13 f0       	push   $0xf013a3d4
f012cf76:	68 1f 12 00 00       	push   $0x121f
f012cf7b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012cf80:	e8 2b 32 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cf85:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012cf8c:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012cf90:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cf94:	78 b2                	js     f012cf48 <test_krealloc_BF+0x10b0>
f012cf96:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cf9a:	7f 09                	jg     f012cfa5 <test_krealloc_BF+0x110d>
f012cf9c:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012cfa3:	76 a3                	jbe    f012cf48 <test_krealloc_BF+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012cfa5:	83 ec 0c             	sub    $0xc,%esp
f012cfa8:	68 1b b0 13 f0       	push   $0xf013b01b
f012cfad:	e8 7f 3e fd ff       	call   f0100e31 <cprintf>
f012cfb2:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012cfb5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cfbb:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cfc1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cfc8:	eb 21                	jmp    f012cfeb <test_krealloc_BF+0x1153>
			sums[0] += ptr[i];
f012cfca:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012cfd0:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012cfd3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cfd9:	01 c8                	add    %ecx,%eax
f012cfdb:	8a 00                	mov    (%eax),%al
f012cfdd:	0f be c0             	movsbl %al,%eax
f012cfe0:	01 d0                	add    %edx,%eax
f012cfe2:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cfe8:	ff 45 dc             	incl   -0x24(%ebp)
f012cfeb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012cff1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cff4:	7d d4                	jge    f012cfca <test_krealloc_BF+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cff6:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012cffc:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d002:	42                   	inc    %edx
f012d003:	01 d2                	add    %edx,%edx
f012d005:	39 d0                	cmp    %edx,%eax
f012d007:	74 17                	je     f012d020 <test_krealloc_BF+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012d009:	83 ec 04             	sub    $0x4,%esp
f012d00c:	68 24 b0 13 f0       	push   $0xf013b024
f012d011:	68 31 12 00 00       	push   $0x1231
f012d016:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d01b:	e8 90 31 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d020:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d026:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d02c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d033:	eb 25                	jmp    f012d05a <test_krealloc_BF+0x11c2>
			sums[1] += intArr[i];
f012d035:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012d03b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d03e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d045:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d04b:	01 c8                	add    %ecx,%eax
f012d04d:	8b 00                	mov    (%eax),%eax
f012d04f:	01 d0                	add    %edx,%eax
f012d051:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d057:	ff 45 dc             	incl   -0x24(%ebp)
f012d05a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d060:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d063:	7d d0                	jge    f012d035 <test_krealloc_BF+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d065:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012d06b:	8b 95 54 fe ff ff    	mov    -0x1ac(%ebp),%edx
f012d071:	42                   	inc    %edx
f012d072:	c1 e2 02             	shl    $0x2,%edx
f012d075:	39 d0                	cmp    %edx,%eax
f012d077:	74 17                	je     f012d090 <test_krealloc_BF+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012d079:	83 ec 04             	sub    $0x4,%esp
f012d07c:	68 24 b0 13 f0       	push   $0xf013b024
f012d081:	68 3b 12 00 00       	push   $0x123b
f012d086:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d08b:	e8 20 31 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d090:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d096:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d09c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d0a3:	eb 24                	jmp    f012d0c9 <test_krealloc_BF+0x1231>
			sums[2] += shortArr[i];
f012d0a5:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d0ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d0ae:	01 c0                	add    %eax,%eax
f012d0b0:	89 c1                	mov    %eax,%ecx
f012d0b2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d0b8:	01 c8                	add    %ecx,%eax
f012d0ba:	66 8b 00             	mov    (%eax),%ax
f012d0bd:	98                   	cwtl   
f012d0be:	01 d0                	add    %edx,%eax
f012d0c0:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d0c6:	ff 45 dc             	incl   -0x24(%ebp)
f012d0c9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d0cf:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d0d2:	7d d1                	jge    f012d0a5 <test_krealloc_BF+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d0d4:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d0da:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d0e0:	8d 48 01             	lea    0x1(%eax),%ecx
f012d0e3:	89 c8                	mov    %ecx,%eax
f012d0e5:	c1 e0 02             	shl    $0x2,%eax
f012d0e8:	01 c8                	add    %ecx,%eax
f012d0ea:	39 c2                	cmp    %eax,%edx
f012d0ec:	74 17                	je     f012d105 <test_krealloc_BF+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012d0ee:	83 ec 04             	sub    $0x4,%esp
f012d0f1:	68 24 b0 13 f0       	push   $0xf013b024
f012d0f6:	68 45 12 00 00       	push   $0x1245
f012d0fb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d100:	e8 ab 30 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d105:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d10b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d111:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d118:	eb 70                	jmp    f012d18a <test_krealloc_BF+0x12f2>
			sums[3] += structArr[i].a;
f012d11a:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012d120:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d123:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d12a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d130:	01 c8                	add    %ecx,%eax
f012d132:	8a 00                	mov    (%eax),%al
f012d134:	0f be c0             	movsbl %al,%eax
f012d137:	01 d0                	add    %edx,%eax
f012d139:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
			sums[4] += structArr[i].b;
f012d13f:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012d145:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d148:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d14f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d155:	01 c8                	add    %ecx,%eax
f012d157:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d15b:	98                   	cwtl   
f012d15c:	01 d0                	add    %edx,%eax
f012d15e:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[5] += structArr[i].c;
f012d164:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d16a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d16d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d174:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d17a:	01 c8                	add    %ecx,%eax
f012d17c:	8b 40 04             	mov    0x4(%eax),%eax
f012d17f:	01 d0                	add    %edx,%eax
f012d181:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d187:	ff 45 dc             	incl   -0x24(%ebp)
f012d18a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d190:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d193:	7d 85                	jge    f012d11a <test_krealloc_BF+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d195:	8b 8d 04 fe ff ff    	mov    -0x1fc(%ebp),%ecx
f012d19b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d1a1:	8d 50 01             	lea    0x1(%eax),%edx
f012d1a4:	89 d0                	mov    %edx,%eax
f012d1a6:	01 c0                	add    %eax,%eax
f012d1a8:	01 d0                	add    %edx,%eax
f012d1aa:	01 c0                	add    %eax,%eax
f012d1ac:	01 d0                	add    %edx,%eax
f012d1ae:	39 c1                	cmp    %eax,%ecx
f012d1b0:	75 3a                	jne    f012d1ec <test_krealloc_BF+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d1b2:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012d1b8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d1be:	8d 50 01             	lea    0x1(%eax),%edx
f012d1c1:	89 d0                	mov    %edx,%eax
f012d1c3:	01 c0                	add    %eax,%eax
f012d1c5:	01 d0                	add    %edx,%eax
f012d1c7:	01 c0                	add    %eax,%eax
f012d1c9:	01 d0                	add    %edx,%eax
f012d1cb:	39 c1                	cmp    %eax,%ecx
f012d1cd:	75 1d                	jne    f012d1ec <test_krealloc_BF+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d1cf:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012d1d5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d1db:	8d 50 01             	lea    0x1(%eax),%edx
f012d1de:	89 d0                	mov    %edx,%eax
f012d1e0:	01 c0                	add    %eax,%eax
f012d1e2:	01 d0                	add    %edx,%eax
f012d1e4:	01 c0                	add    %eax,%eax
f012d1e6:	01 d0                	add    %edx,%eax
f012d1e8:	39 c1                	cmp    %eax,%ecx
f012d1ea:	74 17                	je     f012d203 <test_krealloc_BF+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012d1ec:	83 ec 04             	sub    $0x4,%esp
f012d1ef:	68 24 b0 13 f0       	push   $0xf013b024
f012d1f4:	68 53 12 00 00       	push   $0x1253
f012d1f9:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d1fe:	e8 ad 2f fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d203:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012d20a:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d20d:	e8 50 f8 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d212:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d215:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d21b:	83 ec 08             	sub    $0x8,%esp
f012d21e:	68 00 3c 00 00       	push   $0x3c00
f012d223:	50                   	push   %eax
f012d224:	e8 88 ae fd ff       	call   f01080b1 <krealloc>
f012d229:	83 c4 10             	add    $0x10,%esp
f012d22c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d232:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d238:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d23d:	77 17                	ja     f012d256 <test_krealloc_BF+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d23f:	83 ec 04             	sub    $0x4,%esp
f012d242:	68 78 ad 13 f0       	push   $0xf013ad78
f012d247:	68 5f 12 00 00       	push   $0x125f
f012d24c:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d251:	e8 5a 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d256:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d25c:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d262:	74 17                	je     f012d27b <test_krealloc_BF+0x13e3>
			panic(
f012d264:	83 ec 04             	sub    $0x4,%esp
f012d267:	68 5c b0 13 f0       	push   $0xf013b05c
f012d26c:	68 62 12 00 00       	push   $0x1262
f012d271:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d276:	e8 35 2f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d27b:	e8 e2 f7 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d280:	89 c2                	mov    %eax,%edx
f012d282:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d285:	39 c2                	cmp    %eax,%edx
f012d287:	74 17                	je     f012d2a0 <test_krealloc_BF+0x1408>
			panic(
f012d289:	83 ec 04             	sub    $0x4,%esp
f012d28c:	68 c8 b0 13 f0       	push   $0xf013b0c8
f012d291:	68 65 12 00 00       	push   $0x1265
f012d296:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d29b:	e8 10 2f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d2a0:	e8 bd f7 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d2a5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d2a8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2ae:	83 ec 08             	sub    $0x8,%esp
f012d2b1:	68 00 fc 0f 00       	push   $0xffc00
f012d2b6:	50                   	push   %eax
f012d2b7:	e8 f5 ad fd ff       	call   f01080b1 <krealloc>
f012d2bc:	83 c4 10             	add    $0x10,%esp
f012d2bf:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d2c5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d2cb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d2d0:	77 17                	ja     f012d2e9 <test_krealloc_BF+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2d2:	83 ec 04             	sub    $0x4,%esp
f012d2d5:	68 78 ad 13 f0       	push   $0xf013ad78
f012d2da:	68 6b 12 00 00       	push   $0x126b
f012d2df:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d2e4:	e8 c7 2e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d2e9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2ef:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d2f5:	74 17                	je     f012d30e <test_krealloc_BF+0x1476>
			panic(
f012d2f7:	83 ec 04             	sub    $0x4,%esp
f012d2fa:	68 5c b0 13 f0       	push   $0xf013b05c
f012d2ff:	68 6e 12 00 00       	push   $0x126e
f012d304:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d309:	e8 a2 2e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d30e:	e8 4f f7 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d313:	89 c2                	mov    %eax,%edx
f012d315:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d318:	39 c2                	cmp    %eax,%edx
f012d31a:	74 17                	je     f012d333 <test_krealloc_BF+0x149b>
			panic(
f012d31c:	83 ec 04             	sub    $0x4,%esp
f012d31f:	68 c8 b0 13 f0       	push   $0xf013b0c8
f012d324:	68 71 12 00 00       	push   $0x1271
f012d329:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d32e:	e8 7d 2e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d333:	e8 2a f7 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d338:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d33b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d341:	83 ec 08             	sub    $0x8,%esp
f012d344:	68 00 fc 0f 00       	push   $0xffc00
f012d349:	50                   	push   %eax
f012d34a:	e8 62 ad fd ff       	call   f01080b1 <krealloc>
f012d34f:	83 c4 10             	add    $0x10,%esp
f012d352:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d358:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d35e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d363:	77 17                	ja     f012d37c <test_krealloc_BF+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d365:	83 ec 04             	sub    $0x4,%esp
f012d368:	68 78 ad 13 f0       	push   $0xf013ad78
f012d36d:	68 77 12 00 00       	push   $0x1277
f012d372:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d377:	e8 34 2e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d37c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d382:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d388:	74 17                	je     f012d3a1 <test_krealloc_BF+0x1509>
			panic(
f012d38a:	83 ec 04             	sub    $0x4,%esp
f012d38d:	68 5c b0 13 f0       	push   $0xf013b05c
f012d392:	68 7a 12 00 00       	push   $0x127a
f012d397:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d39c:	e8 0f 2e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d3a1:	e8 bc f6 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d3a6:	89 c2                	mov    %eax,%edx
f012d3a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d3ab:	39 c2                	cmp    %eax,%edx
f012d3ad:	74 17                	je     f012d3c6 <test_krealloc_BF+0x152e>
			panic(
f012d3af:	83 ec 04             	sub    $0x4,%esp
f012d3b2:	68 c8 b0 13 f0       	push   $0xf013b0c8
f012d3b7:	68 7d 12 00 00       	push   $0x127d
f012d3bc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d3c1:	e8 ea 2d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d3c6:	e8 97 f6 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d3cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d3ce:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d3d4:	83 ec 08             	sub    $0x8,%esp
f012d3d7:	68 00 fc 0f 00       	push   $0xffc00
f012d3dc:	50                   	push   %eax
f012d3dd:	e8 cf ac fd ff       	call   f01080b1 <krealloc>
f012d3e2:	83 c4 10             	add    $0x10,%esp
f012d3e5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d3eb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d3f1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d3f6:	77 17                	ja     f012d40f <test_krealloc_BF+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d3f8:	83 ec 04             	sub    $0x4,%esp
f012d3fb:	68 78 ad 13 f0       	push   $0xf013ad78
f012d400:	68 85 12 00 00       	push   $0x1285
f012d405:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d40a:	e8 a1 2d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012d40f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d415:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d41b:	74 17                	je     f012d434 <test_krealloc_BF+0x159c>
			panic(
f012d41d:	83 ec 04             	sub    $0x4,%esp
f012d420:	68 0c b1 13 f0       	push   $0xf013b10c
f012d425:	68 88 12 00 00       	push   $0x1288
f012d42a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d42f:	e8 7c 2d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d434:	e8 29 f6 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d439:	89 c2                	mov    %eax,%edx
f012d43b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d43e:	39 c2                	cmp    %eax,%edx
f012d440:	74 17                	je     f012d459 <test_krealloc_BF+0x15c1>
			panic(
f012d442:	83 ec 04             	sub    $0x4,%esp
f012d445:	68 c8 b0 13 f0       	push   $0xf013b0c8
f012d44a:	68 8b 12 00 00       	push   $0x128b
f012d44f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d454:	e8 57 2d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d459:	83 ec 0c             	sub    $0xc,%esp
f012d45c:	68 eb a2 13 f0       	push   $0xf013a2eb
f012d461:	e8 cb 39 fd ff       	call   f0100e31 <cprintf>
f012d466:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d469:	e8 f4 f5 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d46e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012d471:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d477:	83 ec 08             	sub    $0x8,%esp
f012d47a:	68 00 18 10 00       	push   $0x101800
f012d47f:	50                   	push   %eax
f012d480:	e8 2c ac fd ff       	call   f01080b1 <krealloc>
f012d485:	83 c4 10             	add    $0x10,%esp
f012d488:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d48b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d48e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d493:	77 17                	ja     f012d4ac <test_krealloc_BF+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d495:	83 ec 04             	sub    $0x4,%esp
f012d498:	68 78 ad 13 f0       	push   $0xf013ad78
f012d49d:	68 93 12 00 00       	push   $0x1293
f012d4a2:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d4a7:	e8 04 2d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d4ac:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d4b2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d4b5:	74 17                	je     f012d4ce <test_krealloc_BF+0x1636>
			panic(
f012d4b7:	83 ec 04             	sub    $0x4,%esp
f012d4ba:	68 6c b1 13 f0       	push   $0xf013b16c
f012d4bf:	68 96 12 00 00       	push   $0x1296
f012d4c4:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d4c9:	e8 e2 2c fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d4ce:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d4d1:	e8 8c f5 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d4d6:	29 c3                	sub    %eax,%ebx
f012d4d8:	89 d8                	mov    %ebx,%eax
f012d4da:	83 f8 02             	cmp    $0x2,%eax
f012d4dd:	74 17                	je     f012d4f6 <test_krealloc_BF+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d4df:	83 ec 04             	sub    $0x4,%esp
f012d4e2:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012d4e7:	68 98 12 00 00       	push   $0x1298
f012d4ec:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d4f1:	e8 ba 2c fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d4f6:	e8 67 f5 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d4fb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d4fe:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d504:	83 ec 08             	sub    $0x8,%esp
f012d507:	68 00 fc 3f 00       	push   $0x3ffc00
f012d50c:	50                   	push   %eax
f012d50d:	e8 9f ab fd ff       	call   f01080b1 <krealloc>
f012d512:	83 c4 10             	add    $0x10,%esp
f012d515:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d518:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d51b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d520:	77 17                	ja     f012d539 <test_krealloc_BF+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d522:	83 ec 04             	sub    $0x4,%esp
f012d525:	68 78 ad 13 f0       	push   $0xf013ad78
f012d52a:	68 9e 12 00 00       	push   $0x129e
f012d52f:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d534:	e8 77 2c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d539:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d53f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d542:	74 17                	je     f012d55b <test_krealloc_BF+0x16c3>
			panic(
f012d544:	83 ec 04             	sub    $0x4,%esp
f012d547:	68 6c b1 13 f0       	push   $0xf013b16c
f012d54c:	68 a1 12 00 00       	push   $0x12a1
f012d551:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d556:	e8 55 2c fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d55b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d55e:	e8 ff f4 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d563:	29 c3                	sub    %eax,%ebx
f012d565:	89 d8                	mov    %ebx,%eax
f012d567:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d56c:	74 17                	je     f012d585 <test_krealloc_BF+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012d56e:	83 ec 04             	sub    $0x4,%esp
f012d571:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012d576:	68 a4 12 00 00       	push   $0x12a4
f012d57b:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d580:	e8 2b 2c fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012d585:	83 ec 0c             	sub    $0xc,%esp
f012d588:	68 30 a3 13 f0       	push   $0xf013a330
f012d58d:	e8 9f 38 fd ff       	call   f0100e31 <cprintf>
f012d592:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d595:	e8 c8 f4 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d59a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d59d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d5a3:	83 ec 08             	sub    $0x8,%esp
f012d5a6:	68 00 fc 9f 00       	push   $0x9ffc00
f012d5ab:	50                   	push   %eax
f012d5ac:	e8 00 ab fd ff       	call   f01080b1 <krealloc>
f012d5b1:	83 c4 10             	add    $0x10,%esp
f012d5b4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d5b7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5ba:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d5bf:	77 17                	ja     f012d5d8 <test_krealloc_BF+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d5c1:	83 ec 04             	sub    $0x4,%esp
f012d5c4:	68 78 ad 13 f0       	push   $0xf013ad78
f012d5c9:	68 af 12 00 00       	push   $0x12af
f012d5ce:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d5d3:	e8 d8 2b fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012d5d8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d5df:	10 00 00 
f012d5e2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d5e7:	0f b6 d0             	movzbl %al,%edx
f012d5ea:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d5f0:	01 d0                	add    %edx,%eax
f012d5f2:	48                   	dec    %eax
f012d5f3:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d5f9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d5ff:	ba 00 00 00 00       	mov    $0x0,%edx
f012d604:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012d60a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d610:	29 d0                	sub    %edx,%eax
f012d612:	89 c1                	mov    %eax,%ecx
f012d614:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d61b:	10 00 00 
f012d61e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d623:	0f b6 c0             	movzbl %al,%eax
f012d626:	c1 e0 04             	shl    $0x4,%eax
f012d629:	89 c2                	mov    %eax,%edx
f012d62b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012d631:	01 d0                	add    %edx,%eax
f012d633:	48                   	dec    %eax
f012d634:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012d63a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d640:	ba 00 00 00 00       	mov    $0x0,%edx
f012d645:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012d64b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d651:	29 d0                	sub    %edx,%eax
f012d653:	01 c8                	add    %ecx,%eax
f012d655:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012d65b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d65e:	39 c2                	cmp    %eax,%edx
f012d660:	74 18                	je     f012d67a <test_krealloc_BF+0x17e2>
			panic(
f012d662:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d665:	50                   	push   %eax
f012d666:	68 1c b2 13 f0       	push   $0xf013b21c
f012d66b:	68 b3 12 00 00       	push   $0x12b3
f012d670:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d675:	e8 36 2b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d67a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d680:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d683:	75 17                	jne    f012d69c <test_krealloc_BF+0x1804>
			panic(
f012d685:	83 ec 04             	sub    $0x4,%esp
f012d688:	68 60 b2 13 f0       	push   $0xf013b260
f012d68d:	68 b6 12 00 00       	push   $0x12b6
f012d692:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d697:	e8 14 2b fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d69c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d69f:	e8 be f3 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d6a4:	29 c3                	sub    %eax,%ebx
f012d6a6:	89 d8                	mov    %ebx,%eax
f012d6a8:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d6ad:	74 17                	je     f012d6c6 <test_krealloc_BF+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d6af:	83 ec 04             	sub    $0x4,%esp
f012d6b2:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012d6b7:	68 b9 12 00 00       	push   $0x12b9
f012d6bc:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d6c1:	e8 ea 2a fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012d6c6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d6c9:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012d6cf:	e8 8e f3 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d6d4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012d6d7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d6dd:	83 ec 08             	sub    $0x8,%esp
f012d6e0:	68 00 fc 3f 00       	push   $0x3ffc00
f012d6e5:	50                   	push   %eax
f012d6e6:	e8 c6 a9 fd ff       	call   f01080b1 <krealloc>
f012d6eb:	83 c4 10             	add    $0x10,%esp
f012d6ee:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d6f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d6f4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d6f9:	77 17                	ja     f012d712 <test_krealloc_BF+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d6fb:	83 ec 04             	sub    $0x4,%esp
f012d6fe:	68 78 ad 13 f0       	push   $0xf013ad78
f012d703:	68 c2 12 00 00       	push   $0x12c2
f012d708:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d70d:	e8 9e 2a fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d712:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d718:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d71b:	75 17                	jne    f012d734 <test_krealloc_BF+0x189c>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d71d:	83 ec 04             	sub    $0x4,%esp
f012d720:	68 60 b2 13 f0       	push   $0xf013b260
f012d725:	68 c4 12 00 00       	push   $0x12c4
f012d72a:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d72f:	e8 7c 2a fd ff       	call   f01001b0 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012d734:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d73b:	10 00 00 
f012d73e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d743:	0f b6 d0             	movzbl %al,%edx
f012d746:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d74c:	01 d0                	add    %edx,%eax
f012d74e:	48                   	dec    %eax
f012d74f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d755:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d75b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d760:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d766:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d76c:	29 d0                	sub    %edx,%eax
f012d76e:	89 c1                	mov    %eax,%ecx
f012d770:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d777:	10 00 00 
f012d77a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d77f:	0f b6 c0             	movzbl %al,%eax
f012d782:	c1 e0 04             	shl    $0x4,%eax
f012d785:	89 c2                	mov    %eax,%edx
f012d787:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d78d:	01 d0                	add    %edx,%eax
f012d78f:	48                   	dec    %eax
f012d790:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d796:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d79c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7a1:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d7a7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d7ad:	29 d0                	sub    %edx,%eax
f012d7af:	01 c8                	add    %ecx,%eax
f012d7b1:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012d7b7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d7ba:	39 c2                	cmp    %eax,%edx
f012d7bc:	74 17                	je     f012d7d5 <test_krealloc_BF+0x193d>
f012d7be:	83 ec 04             	sub    $0x4,%esp
f012d7c1:	68 b4 ad 13 f0       	push   $0xf013adb4
f012d7c6:	68 c5 12 00 00       	push   $0x12c5
f012d7cb:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d7d0:	e8 db 29 fd ff       	call   f01001b0 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012d7d5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d7d8:	e8 85 f2 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d7dd:	29 c3                	sub    %eax,%ebx
f012d7df:	89 d8                	mov    %ebx,%eax
f012d7e1:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d7e6:	74 17                	je     f012d7ff <test_krealloc_BF+0x1967>
			panic("krealloc: pages in memory are not loaded correctly");
f012d7e8:	83 ec 04             	sub    $0x4,%esp
f012d7eb:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012d7f0:	68 c9 12 00 00       	push   $0x12c9
f012d7f5:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d7fa:	e8 b1 29 fd ff       	call   f01001b0 <_panic>
		ptr_allocations[6] = newAddress;
f012d7ff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d802:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d808:	e8 55 f2 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d80d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d810:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d816:	83 ec 08             	sub    $0x8,%esp
f012d819:	68 00 fc 3f 01       	push   $0x13ffc00
f012d81e:	50                   	push   %eax
f012d81f:	e8 8d a8 fd ff       	call   f01080b1 <krealloc>
f012d824:	83 c4 10             	add    $0x10,%esp
f012d827:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d82a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d82d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d832:	77 17                	ja     f012d84b <test_krealloc_BF+0x19b3>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d834:	83 ec 04             	sub    $0x4,%esp
f012d837:	68 78 ad 13 f0       	push   $0xf013ad78
f012d83c:	68 cf 12 00 00       	push   $0x12cf
f012d841:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d846:	e8 65 29 fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d84b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d851:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d854:	75 17                	jne    f012d86d <test_krealloc_BF+0x19d5>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d856:	83 ec 04             	sub    $0x4,%esp
f012d859:	68 60 b2 13 f0       	push   $0xf013b260
f012d85e:	68 d1 12 00 00       	push   $0x12d1
f012d863:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d868:	e8 43 29 fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012d86d:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012d874:	10 00 00 
f012d877:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d87c:	0f b6 d0             	movzbl %al,%edx
f012d87f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012d885:	01 d0                	add    %edx,%eax
f012d887:	48                   	dec    %eax
f012d888:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012d88e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d894:	ba 00 00 00 00       	mov    $0x0,%edx
f012d899:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012d89f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d8a5:	29 d0                	sub    %edx,%eax
f012d8a7:	89 c1                	mov    %eax,%ecx
f012d8a9:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012d8b0:	10 00 00 
f012d8b3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d8b8:	0f b6 c0             	movzbl %al,%eax
f012d8bb:	c1 e0 04             	shl    $0x4,%eax
f012d8be:	89 c2                	mov    %eax,%edx
f012d8c0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d8c6:	01 d0                	add    %edx,%eax
f012d8c8:	48                   	dec    %eax
f012d8c9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012d8cf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d8d5:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8da:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012d8e0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d8e6:	29 d0                	sub    %edx,%eax
f012d8e8:	01 c8                	add    %ecx,%eax
f012d8ea:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012d8f0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d8f3:	39 c2                	cmp    %eax,%edx
f012d8f5:	74 17                	je     f012d90e <test_krealloc_BF+0x1a76>
			panic("krealloc: Wrong start address for reallocated space\n");
f012d8f7:	83 ec 04             	sub    $0x4,%esp
f012d8fa:	68 80 b3 13 f0       	push   $0xf013b380
f012d8ff:	68 d3 12 00 00       	push   $0x12d3
f012d904:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d909:	e8 a2 28 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012d90e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d911:	e8 4c f1 fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012d916:	29 c3                	sub    %eax,%ebx
f012d918:	89 d8                	mov    %ebx,%eax
f012d91a:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012d91f:	74 17                	je     f012d938 <test_krealloc_BF+0x1aa0>
			panic("krealloc: pages in memory are not loaded correctly");
f012d921:	83 ec 04             	sub    $0x4,%esp
f012d924:	68 e8 b1 13 f0       	push   $0xf013b1e8
f012d929:	68 d6 12 00 00       	push   $0x12d6
f012d92e:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d933:	e8 78 28 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012d938:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d93b:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d941:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d947:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012d94d:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d954:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d957:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d95e:	eb 21                	jmp    f012d981 <test_krealloc_BF+0x1ae9>
			sums[0] += ptr[i];
f012d960:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d966:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d969:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d96f:	01 c8                	add    %ecx,%eax
f012d971:	8a 00                	mov    (%eax),%al
f012d973:	0f be c0             	movsbl %al,%eax
f012d976:	01 d0                	add    %edx,%eax
f012d978:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d97e:	ff 45 d8             	incl   -0x28(%ebp)
f012d981:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d987:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d98a:	7d d4                	jge    f012d960 <test_krealloc_BF+0x1ac8>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d98c:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d992:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d998:	42                   	inc    %edx
f012d999:	01 d2                	add    %edx,%edx
f012d99b:	39 d0                	cmp    %edx,%eax
f012d99d:	74 17                	je     f012d9b6 <test_krealloc_BF+0x1b1e>
			panic("krealloc: invalid read after re-allocations");
f012d99f:	83 ec 04             	sub    $0x4,%esp
f012d9a2:	68 18 b3 13 f0       	push   $0xf013b318
f012d9a7:	68 e4 12 00 00       	push   $0x12e4
f012d9ac:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012d9b1:	e8 fa 27 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d9b6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d9bc:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012d9c2:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d9c9:	00 00 00 
		sums[1] = 0;
f012d9cc:	c7 85 fc fd ff ff 00 	movl   $0x0,-0x204(%ebp)
f012d9d3:	00 00 00 
		sums[2] = 0;
f012d9d6:	c7 85 00 fe ff ff 00 	movl   $0x0,-0x200(%ebp)
f012d9dd:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d9e0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d9e7:	eb 70                	jmp    f012da59 <test_krealloc_BF+0x1bc1>
			sums[0] += structArr[i].a;
f012d9e9:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d9ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d9f2:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d9f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d9ff:	01 c8                	add    %ecx,%eax
f012da01:	8a 00                	mov    (%eax),%al
f012da03:	0f be c0             	movsbl %al,%eax
f012da06:	01 d0                	add    %edx,%eax
f012da08:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			sums[1] += structArr[i].b;
f012da0e:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012da14:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012da17:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012da1e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012da24:	01 c8                	add    %ecx,%eax
f012da26:	66 8b 40 02          	mov    0x2(%eax),%ax
f012da2a:	98                   	cwtl   
f012da2b:	01 d0                	add    %edx,%eax
f012da2d:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			sums[2] += structArr[i].c;
f012da33:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012da39:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012da3c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012da43:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012da49:	01 c8                	add    %ecx,%eax
f012da4b:	8b 40 04             	mov    0x4(%eax),%eax
f012da4e:	01 d0                	add    %edx,%eax
f012da50:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012da56:	ff 45 d8             	incl   -0x28(%ebp)
f012da59:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012da5f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012da62:	7d 85                	jge    f012d9e9 <test_krealloc_BF+0x1b51>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012da64:	8b 8d f8 fd ff ff    	mov    -0x208(%ebp),%ecx
f012da6a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012da70:	8d 50 01             	lea    0x1(%eax),%edx
f012da73:	89 d0                	mov    %edx,%eax
f012da75:	01 c0                	add    %eax,%eax
f012da77:	01 d0                	add    %edx,%eax
f012da79:	01 c0                	add    %eax,%eax
f012da7b:	01 d0                	add    %edx,%eax
f012da7d:	39 c1                	cmp    %eax,%ecx
f012da7f:	75 3a                	jne    f012dabb <test_krealloc_BF+0x1c23>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012da81:	8b 8d fc fd ff ff    	mov    -0x204(%ebp),%ecx
f012da87:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012da8d:	8d 50 01             	lea    0x1(%eax),%edx
f012da90:	89 d0                	mov    %edx,%eax
f012da92:	01 c0                	add    %eax,%eax
f012da94:	01 d0                	add    %edx,%eax
f012da96:	01 c0                	add    %eax,%eax
f012da98:	01 d0                	add    %edx,%eax
f012da9a:	39 c1                	cmp    %eax,%ecx
f012da9c:	75 1d                	jne    f012dabb <test_krealloc_BF+0x1c23>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012da9e:	8b 8d 00 fe ff ff    	mov    -0x200(%ebp),%ecx
f012daa4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012daaa:	8d 50 01             	lea    0x1(%eax),%edx
f012daad:	89 d0                	mov    %edx,%eax
f012daaf:	01 c0                	add    %eax,%eax
f012dab1:	01 d0                	add    %edx,%eax
f012dab3:	01 c0                	add    %eax,%eax
f012dab5:	01 d0                	add    %edx,%eax
f012dab7:	39 c1                	cmp    %eax,%ecx
f012dab9:	74 17                	je     f012dad2 <test_krealloc_BF+0x1c3a>
			panic("krealloc: invalid read after re-allocations");
f012dabb:	83 ec 04             	sub    $0x4,%esp
f012dabe:	68 18 b3 13 f0       	push   $0xf013b318
f012dac3:	68 f6 12 00 00       	push   $0x12f6
f012dac8:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012dacd:	e8 de 26 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012dad2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dad8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012dade:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012dae5:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012dae8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012daef:	eb 24                	jmp    f012db15 <test_krealloc_BF+0x1c7d>
			sums[0] += shortArr[i];
f012daf1:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012daf7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dafa:	01 c0                	add    %eax,%eax
f012dafc:	89 c1                	mov    %eax,%ecx
f012dafe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012db04:	01 c8                	add    %ecx,%eax
f012db06:	66 8b 00             	mov    (%eax),%ax
f012db09:	98                   	cwtl   
f012db0a:	01 d0                	add    %edx,%eax
f012db0c:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012db12:	ff 45 d8             	incl   -0x28(%ebp)
f012db15:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012db1b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012db1e:	7d d1                	jge    f012daf1 <test_krealloc_BF+0x1c59>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012db20:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012db26:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012db2c:	8d 48 01             	lea    0x1(%eax),%ecx
f012db2f:	89 c8                	mov    %ecx,%eax
f012db31:	c1 e0 02             	shl    $0x2,%eax
f012db34:	01 c8                	add    %ecx,%eax
f012db36:	39 c2                	cmp    %eax,%edx
f012db38:	74 17                	je     f012db51 <test_krealloc_BF+0x1cb9>
			panic("krealloc: invalid read after re-allocations");
f012db3a:	83 ec 04             	sub    $0x4,%esp
f012db3d:	68 18 b3 13 f0       	push   $0xf013b318
f012db42:	68 00 13 00 00       	push   $0x1300
f012db47:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012db4c:	e8 5f 26 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012db51:	e8 0c ef fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012db56:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012db59:	e8 26 6b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012db5e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012db64:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012db6a:	83 ec 08             	sub    $0x8,%esp
f012db6d:	6a 00                	push   $0x0
f012db6f:	50                   	push   %eax
f012db70:	e8 3c a5 fd ff       	call   f01080b1 <krealloc>
f012db75:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012db78:	e8 07 6b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012db7d:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012db83:	74 17                	je     f012db9c <test_krealloc_BF+0x1d04>
			panic(
f012db85:	83 ec 04             	sub    $0x4,%esp
f012db88:	68 ec 9a 13 f0       	push   $0xf0139aec
f012db8d:	68 08 13 00 00       	push   $0x1308
f012db92:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012db97:	e8 14 26 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012db9c:	e8 c1 ee fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012dba1:	89 c2                	mov    %eax,%edx
f012dba3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dba6:	29 c2                	sub    %eax,%edx
f012dba8:	89 d0                	mov    %edx,%eax
f012dbaa:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012dbaf:	74 17                	je     f012dbc8 <test_krealloc_BF+0x1d30>
			panic("krealloc: pages in memory are not freed correctly");
f012dbb1:	83 ec 04             	sub    $0x4,%esp
f012dbb4:	68 a8 af 13 f0       	push   $0xf013afa8
f012dbb9:	68 0a 13 00 00       	push   $0x130a
f012dbbe:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012dbc3:	e8 e8 25 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012dbc8:	e8 95 ee fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012dbcd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dbd0:	e8 af 6a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012dbd5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012dbdb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dbe1:	83 ec 0c             	sub    $0xc,%esp
f012dbe4:	50                   	push   %eax
f012dbe5:	e8 28 a4 fd ff       	call   f0108012 <kfree>
f012dbea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012dbed:	e8 92 6a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012dbf2:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012dbf8:	74 17                	je     f012dc11 <test_krealloc_BF+0x1d79>
			panic(
f012dbfa:	83 ec 04             	sub    $0x4,%esp
f012dbfd:	68 ec 9a 13 f0       	push   $0xf0139aec
f012dc02:	68 12 13 00 00       	push   $0x1312
f012dc07:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012dc0c:	e8 9f 25 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012dc11:	e8 4c ee fd ff       	call   f010ca62 <sys_calculate_free_frames>
f012dc16:	89 c2                	mov    %eax,%edx
f012dc18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dc1b:	29 c2                	sub    %eax,%edx
f012dc1d:	89 d0                	mov    %edx,%eax
f012dc1f:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012dc24:	74 17                	je     f012dc3d <test_krealloc_BF+0x1da5>
			panic("krealloc: pages in memory are not freed correctly");
f012dc26:	83 ec 04             	sub    $0x4,%esp
f012dc29:	68 a8 af 13 f0       	push   $0xf013afa8
f012dc2e:	68 14 13 00 00       	push   $0x1314
f012dc33:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012dc38:	e8 73 25 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dc3d:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012dc44:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012dc4b:	eb 48                	jmp    f012dc95 <test_krealloc_BF+0x1dfd>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012dc4d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012dc50:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012dc55:	83 ec 04             	sub    $0x4,%esp
f012dc58:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
f012dc5e:	51                   	push   %ecx
f012dc5f:	52                   	push   %edx
f012dc60:	50                   	push   %eax
f012dc61:	e8 81 98 fd ff       	call   f01074e7 <get_page_table>
f012dc66:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012dc69:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012dc6f:	85 c0                	test   %eax,%eax
f012dc71:	75 17                	jne    f012dc8a <test_krealloc_BF+0x1df2>
					panic(
f012dc73:	83 ec 04             	sub    $0x4,%esp
f012dc76:	68 d4 a3 13 f0       	push   $0xf013a3d4
f012dc7b:	68 21 13 00 00       	push   $0x1321
f012dc80:	68 d2 9a 13 f0       	push   $0xf0139ad2
f012dc85:	e8 26 25 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dc8a:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012dc91:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012dc95:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012dc99:	78 b2                	js     f012dc4d <test_krealloc_BF+0x1db5>
f012dc9b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012dc9f:	7f 09                	jg     f012dcaa <test_krealloc_BF+0x1e12>
f012dca1:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012dca8:	76 a3                	jbe    f012dc4d <test_krealloc_BF+0x1db5>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012dcaa:	83 ec 0c             	sub    $0xc,%esp
f012dcad:	68 b6 9c 13 f0       	push   $0xf0139cb6
f012dcb2:	e8 7a 31 fd ff       	call   f0100e31 <cprintf>
f012dcb7:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012dcba:	83 ec 0c             	sub    $0xc,%esp
f012dcbd:	68 b8 b3 13 f0       	push   $0xf013b3b8
f012dcc2:	e8 6a 31 fd ff       	call   f0100e31 <cprintf>
f012dcc7:	83 c4 10             	add    $0x10,%esp
	return 0;
f012dcca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012dccf:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012dcd2:	5b                   	pop    %ebx
f012dcd3:	5f                   	pop    %edi
f012dcd4:	5d                   	pop    %ebp
f012dcd5:	c3                   	ret    

f012dcd6 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012dcd6:	55                   	push   %ebp
f012dcd7:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
*/	return 0;
f012dcd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012dcde:	5d                   	pop    %ebp
f012dcdf:	c3                   	ret    

f012dce0 <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012dce0:	55                   	push   %ebp
f012dce1:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f012dce3:	c7 05 54 3a 25 f0 00 	movl   $0x0,0xf0253a54
f012dcea:	00 00 00 
}
f012dced:	90                   	nop
f012dcee:	5d                   	pop    %ebp
f012dcef:	c3                   	ret    

f012dcf0 <inctst>:
void inctst()
{
f012dcf0:	55                   	push   %ebp
f012dcf1:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f012dcf3:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
f012dcf8:	40                   	inc    %eax
f012dcf9:	a3 54 3a 25 f0       	mov    %eax,0xf0253a54
}
f012dcfe:	90                   	nop
f012dcff:	5d                   	pop    %ebp
f012dd00:	c3                   	ret    

f012dd01 <gettst>:
uint32 gettst()
{
f012dd01:	55                   	push   %ebp
f012dd02:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f012dd04:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
}
f012dd09:	5d                   	pop    %ebp
f012dd0a:	c3                   	ret    

f012dd0b <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012dd0b:	55                   	push   %ebp
f012dd0c:	89 e5                	mov    %esp,%ebp
f012dd0e:	83 ec 28             	sub    $0x28,%esp
f012dd11:	8b 45 14             	mov    0x14(%ebp),%eax
f012dd14:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012dd17:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012dd1e:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f012dd22:	83 f8 65             	cmp    $0x65,%eax
f012dd25:	74 5d                	je     f012dd84 <tst+0x79>
f012dd27:	83 f8 65             	cmp    $0x65,%eax
f012dd2a:	7f 0a                	jg     f012dd36 <tst+0x2b>
f012dd2c:	83 f8 62             	cmp    $0x62,%eax
f012dd2f:	74 73                	je     f012dda4 <tst+0x99>
f012dd31:	e9 91 00 00 00       	jmp    f012ddc7 <tst+0xbc>
f012dd36:	83 f8 67             	cmp    $0x67,%eax
f012dd39:	74 29                	je     f012dd64 <tst+0x59>
f012dd3b:	83 f8 6c             	cmp    $0x6c,%eax
f012dd3e:	0f 85 83 00 00 00    	jne    f012ddc7 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012dd44:	8b 45 08             	mov    0x8(%ebp),%eax
f012dd47:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dd4a:	73 09                	jae    f012dd55 <tst+0x4a>
			chk = 1;
f012dd4c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dd53:	eb 68                	jmp    f012ddbd <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012dd55:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012dd59:	74 62                	je     f012ddbd <tst+0xb2>
			chk = 1;
f012dd5b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dd62:	eb 59                	jmp    f012ddbd <tst+0xb2>
	case 'g':
		if (n > v1)
f012dd64:	8b 45 08             	mov    0x8(%ebp),%eax
f012dd67:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dd6a:	76 09                	jbe    f012dd75 <tst+0x6a>
			chk = 1;
f012dd6c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dd73:	eb 4b                	jmp    f012ddc0 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012dd75:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012dd79:	74 45                	je     f012ddc0 <tst+0xb5>
			chk = 1;
f012dd7b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dd82:	eb 3c                	jmp    f012ddc0 <tst+0xb5>
	case 'e':
		if (n == v1)
f012dd84:	8b 45 08             	mov    0x8(%ebp),%eax
f012dd87:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dd8a:	75 09                	jne    f012dd95 <tst+0x8a>
			chk = 1;
f012dd8c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dd93:	eb 2e                	jmp    f012ddc3 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012dd95:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012dd99:	74 28                	je     f012ddc3 <tst+0xb8>
			chk = 1;
f012dd9b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dda2:	eb 1f                	jmp    f012ddc3 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012dda4:	8b 45 08             	mov    0x8(%ebp),%eax
f012dda7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012ddaa:	72 1a                	jb     f012ddc6 <tst+0xbb>
f012ddac:	8b 45 08             	mov    0x8(%ebp),%eax
f012ddaf:	3b 45 10             	cmp    0x10(%ebp),%eax
f012ddb2:	77 12                	ja     f012ddc6 <tst+0xbb>
			chk = 1;
f012ddb4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012ddbb:	eb 09                	jmp    f012ddc6 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012ddbd:	90                   	nop
f012ddbe:	eb 07                	jmp    f012ddc7 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012ddc0:	90                   	nop
f012ddc1:	eb 04                	jmp    f012ddc7 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012ddc3:	90                   	nop
f012ddc4:	eb 01                	jmp    f012ddc7 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012ddc6:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f012ddc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ddcb:	75 14                	jne    f012dde1 <tst+0xd6>
f012ddcd:	83 ec 04             	sub    $0x4,%esp
f012ddd0:	68 f8 b3 13 f0       	push   $0xf013b3f8
f012ddd5:	6a 3c                	push   $0x3c
f012ddd7:	68 0b b4 13 f0       	push   $0xf013b40b
f012dddc:	e8 cf 23 fd ff       	call   f01001b0 <_panic>
	tstcnt++ ;
f012dde1:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
f012dde6:	40                   	inc    %eax
f012dde7:	a3 54 3a 25 f0       	mov    %eax,0xf0253a54
	return;
f012ddec:	90                   	nop
}
f012dded:	c9                   	leave  
f012ddee:	c3                   	ret    

f012ddef <chktst>:

void chktst(uint32 n)
{
f012ddef:	55                   	push   %ebp
f012ddf0:	89 e5                	mov    %esp,%ebp
f012ddf2:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f012ddf5:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
f012ddfa:	3b 45 08             	cmp    0x8(%ebp),%eax
f012ddfd:	75 12                	jne    f012de11 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012ddff:	83 ec 0c             	sub    $0xc,%esp
f012de02:	68 24 b4 13 f0       	push   $0xf013b424
f012de07:	e8 25 30 fd ff       	call   f0100e31 <cprintf>
f012de0c:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012de0f:	eb 14                	jmp    f012de25 <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f012de11:	83 ec 04             	sub    $0x4,%esp
f012de14:	68 50 b4 13 f0       	push   $0xf013b450
f012de19:	6a 46                	push   $0x46
f012de1b:	68 0b b4 13 f0       	push   $0xf013b40b
f012de20:	e8 8b 23 fd ff       	call   f01001b0 <_panic>
}
f012de25:	c9                   	leave  
f012de26:	c3                   	ret    

f012de27 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012de27:	55                   	push   %ebp
f012de28:	89 e5                	mov    %esp,%ebp
f012de2a:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012de2d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012de31:	77 07                	ja     f012de3a <nearest_pow2_ceil+0x13>
f012de33:	b8 01 00 00 00       	mov    $0x1,%eax
f012de38:	eb 20                	jmp    f012de5a <nearest_pow2_ceil+0x33>
    int power = 2;
f012de3a:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012de41:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012de44:	eb 08                	jmp    f012de4e <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012de46:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012de49:	01 c0                	add    %eax,%eax
f012de4b:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012de4e:	d1 6d 08             	shrl   0x8(%ebp)
f012de51:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012de55:	75 ef                	jne    f012de46 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012de57:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012de5a:	c9                   	leave  
f012de5b:	c3                   	ret    

f012de5c <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012de5c:	55                   	push   %ebp
f012de5d:	89 e5                	mov    %esp,%ebp
f012de5f:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012de62:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012de66:	77 07                	ja     f012de6f <log2_ceil+0x13>
f012de68:	b8 01 00 00 00       	mov    $0x1,%eax
f012de6d:	eb 1b                	jmp    f012de8a <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012de6f:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012de76:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012de79:	eb 03                	jmp    f012de7e <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012de7b:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012de7e:	d1 6d 08             	shrl   0x8(%ebp)
f012de81:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012de85:	75 f4                	jne    f012de7b <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012de87:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012de8a:	c9                   	leave  
f012de8b:	c3                   	ret    

f012de8c <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012de8c:	55                   	push   %ebp
f012de8d:	89 e5                	mov    %esp,%ebp
f012de8f:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012de92:	8b 45 08             	mov    0x8(%ebp),%eax
f012de95:	8b 00                	mov    (%eax),%eax
f012de97:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012de9a:	8b 45 08             	mov    0x8(%ebp),%eax
f012de9d:	8b 00                	mov    (%eax),%eax
f012de9f:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012dea2:	eb 52                	jmp    f012def6 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012dea4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dea7:	8b 00                	mov    (%eax),%eax
f012dea9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012deac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012deaf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012deb2:	75 12                	jne    f012dec6 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012deb4:	83 ec 0c             	sub    $0xc,%esp
f012deb7:	68 6c b4 13 f0       	push   $0xf013b46c
f012debc:	e8 70 2f fd ff       	call   f0100e31 <cprintf>
f012dec1:	83 c4 10             	add    $0x10,%esp
			break;
f012dec4:	eb 3f                	jmp    f012df05 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012dec6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012deca:	74 38                	je     f012df04 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012decc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012decf:	8b 00                	mov    (%eax),%eax
f012ded1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012ded4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ded7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012deda:	75 12                	jne    f012deee <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012dedc:	83 ec 0c             	sub    $0xc,%esp
f012dedf:	68 88 b4 13 f0       	push   $0xf013b488
f012dee4:	e8 48 2f fd ff       	call   f0100e31 <cprintf>
f012dee9:	83 c4 10             	add    $0x10,%esp
			break;
f012deec:	eb 17                	jmp    f012df05 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012deee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012def1:	8b 00                	mov    (%eax),%eax
f012def3:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012def6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012defa:	74 09                	je     f012df05 <detect_loop_in_FrameInfo_list+0x79>
f012defc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012df00:	75 a2                	jne    f012dea4 <detect_loop_in_FrameInfo_list+0x18>
f012df02:	eb 01                	jmp    f012df05 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012df04:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012df05:	83 ec 0c             	sub    $0xc,%esp
f012df08:	68 9f b4 13 f0       	push   $0xf013b49f
f012df0d:	e8 1f 2f fd ff       	call   f0100e31 <cprintf>
f012df12:	83 c4 10             	add    $0x10,%esp
}
f012df15:	90                   	nop
f012df16:	c9                   	leave  
f012df17:	c3                   	ret    

f012df18 <scarce_memory>:

void scarce_memory()
{
f012df18:	55                   	push   %ebp
f012df19:	89 e5                	mov    %esp,%ebp
f012df1b:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012df1e:	a1 c0 99 2b f0       	mov    0xf02b99c0,%eax
f012df23:	ba 64 00 00 00       	mov    $0x64,%edx
f012df28:	29 c2                	sub    %eax,%edx
f012df2a:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f012df2f:	0f af c2             	imul   %edx,%eax
f012df32:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012df37:	f7 e2                	mul    %edx
f012df39:	89 d0                	mov    %edx,%eax
f012df3b:	c1 e8 05             	shr    $0x5,%eax
f012df3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012df41:	a1 c0 99 2b f0       	mov    0xf02b99c0,%eax
f012df46:	ba 64 00 00 00       	mov    $0x64,%edx
f012df4b:	29 c2                	sub    %eax,%edx
f012df4d:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f012df52:	89 d1                	mov    %edx,%ecx
f012df54:	0f af c8             	imul   %eax,%ecx
f012df57:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012df5c:	f7 e1                	mul    %ecx
f012df5e:	c1 ea 05             	shr    $0x5,%edx
f012df61:	89 d0                	mov    %edx,%eax
f012df63:	c1 e0 02             	shl    $0x2,%eax
f012df66:	01 d0                	add    %edx,%eax
f012df68:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012df6f:	01 d0                	add    %edx,%eax
f012df71:	c1 e0 02             	shl    $0x2,%eax
f012df74:	29 c1                	sub    %eax,%ecx
f012df76:	89 ca                	mov    %ecx,%edx
f012df78:	85 d2                	test   %edx,%edx
f012df7a:	74 03                	je     f012df7f <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012df7c:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012df7f:	8b 15 d0 bd 2b f0    	mov    0xf02bbdd0,%edx
f012df85:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f012df8a:	29 c2                	sub    %eax,%edx
f012df8c:	89 d0                	mov    %edx,%eax
f012df8e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012df91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012df94:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012df97:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012df9a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dfa1:	eb 12                	jmp    f012dfb5 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012dfa3:	83 ec 0c             	sub    $0xc,%esp
f012dfa6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012dfa9:	50                   	push   %eax
f012dfaa:	e8 76 93 fd ff       	call   f0107325 <allocate_frame>
f012dfaf:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dfb2:	ff 45 f0             	incl   -0x10(%ebp)
f012dfb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dfb8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012dfbb:	76 e6                	jbe    f012dfa3 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012dfbd:	90                   	nop
f012dfbe:	c9                   	leave  
f012dfbf:	c3                   	ret    

f012dfc0 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012dfc0:	55                   	push   %ebp
f012dfc1:	89 e5                	mov    %esp,%ebp
f012dfc3:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012dfc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012dfcd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012dfd4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012dfdb:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dfdf:	0f 85 d3 01 00 00    	jne    f012e1b8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012dfe5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012dfec:	e9 e1 00 00 00       	jmp    f012e0d2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012dff1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012dff8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dffb:	c1 e0 04             	shl    $0x4,%eax
f012dffe:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e003:	8b 00                	mov    (%eax),%eax
f012e005:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e008:	e9 82 00 00 00       	jmp    f012e08f <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012e00d:	83 ec 0c             	sub    $0xc,%esp
f012e010:	ff 75 e4             	pushl  -0x1c(%ebp)
f012e013:	e8 d9 a2 fd ff       	call   f01082f1 <env_page_ws_get_size>
f012e018:	83 c4 10             	add    $0x10,%esp
f012e01b:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012e01e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e023:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e029:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012e02c:	0f af c2             	imul   %edx,%eax
f012e02f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012e034:	f7 e2                	mul    %edx
f012e036:	89 d0                	mov    %edx,%eax
f012e038:	c1 e8 05             	shr    $0x5,%eax
f012e03b:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012e03e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e043:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e049:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012e04c:	89 d1                	mov    %edx,%ecx
f012e04e:	0f af c8             	imul   %eax,%ecx
f012e051:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e056:	f7 e1                	mul    %ecx
f012e058:	c1 ea 05             	shr    $0x5,%edx
f012e05b:	89 d0                	mov    %edx,%eax
f012e05d:	c1 e0 02             	shl    $0x2,%eax
f012e060:	01 d0                	add    %edx,%eax
f012e062:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e069:	01 d0                	add    %edx,%eax
f012e06b:	c1 e0 02             	shl    $0x2,%eax
f012e06e:	29 c1                	sub    %eax,%ecx
f012e070:	89 ca                	mov    %ecx,%edx
f012e072:	85 d2                	test   %edx,%edx
f012e074:	74 03                	je     f012e079 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012e076:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012e079:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e07c:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012e07f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e082:	c1 e0 04             	shl    $0x4,%eax
f012e085:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f012e08a:	8b 00                	mov    (%eax),%eax
f012e08c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e08f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e093:	74 08                	je     f012e09d <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012e095:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012e098:	8b 40 44             	mov    0x44(%eax),%eax
f012e09b:	eb 05                	jmp    f012e0a2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012e09d:	b8 00 00 00 00       	mov    $0x0,%eax
f012e0a2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012e0a5:	c1 e2 04             	shl    $0x4,%edx
f012e0a8:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f012e0ae:	89 02                	mov    %eax,(%edx)
f012e0b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e0b3:	c1 e0 04             	shl    $0x4,%eax
f012e0b6:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f012e0bb:	8b 00                	mov    (%eax),%eax
f012e0bd:	85 c0                	test   %eax,%eax
f012e0bf:	0f 85 48 ff ff ff    	jne    f012e00d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012e0c5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e0c9:	0f 85 3e ff ff ff    	jne    f012e00d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012e0cf:	ff 45 e8             	incl   -0x18(%ebp)
f012e0d2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e0d7:	0f b6 c0             	movzbl %al,%eax
f012e0da:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e0dd:	0f 8f 0e ff ff ff    	jg     f012dff1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012e0e3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012e0ea:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f012e0ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012e0f2:	eb 19                	jmp    f012e10d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012e0f4:	83 ec 0c             	sub    $0xc,%esp
f012e0f7:	ff 75 dc             	pushl  -0x24(%ebp)
f012e0fa:	e8 f2 a1 fd ff       	call   f01082f1 <env_page_ws_get_size>
f012e0ff:	83 c4 10             	add    $0x10,%esp
f012e102:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012e105:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f012e10a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012e10d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e111:	74 08                	je     f012e11b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012e113:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e116:	8b 40 44             	mov    0x44(%eax),%eax
f012e119:	eb 05                	jmp    f012e120 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012e11b:	b8 00 00 00 00       	mov    $0x0,%eax
f012e120:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f012e125:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f012e12a:	85 c0                	test   %eax,%eax
f012e12c:	75 c6                	jne    f012e0f4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012e12e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e132:	75 c0                	jne    f012e0f4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012e134:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e139:	85 c0                	test   %eax,%eax
f012e13b:	0f 84 ec 00 00 00    	je     f012e22d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012e141:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e146:	83 ec 0c             	sub    $0xc,%esp
f012e149:	50                   	push   %eax
f012e14a:	e8 a2 a1 fd ff       	call   f01082f1 <env_page_ws_get_size>
f012e14f:	83 c4 10             	add    $0x10,%esp
f012e152:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012e155:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e15a:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e160:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012e163:	0f af c2             	imul   %edx,%eax
f012e166:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012e16b:	f7 e2                	mul    %edx
f012e16d:	89 d0                	mov    %edx,%eax
f012e16f:	c1 e8 05             	shr    $0x5,%eax
f012e172:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012e175:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e17a:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e180:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012e183:	89 d1                	mov    %edx,%ecx
f012e185:	0f af c8             	imul   %eax,%ecx
f012e188:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e18d:	f7 e1                	mul    %ecx
f012e18f:	c1 ea 05             	shr    $0x5,%edx
f012e192:	89 d0                	mov    %edx,%eax
f012e194:	c1 e0 02             	shl    $0x2,%eax
f012e197:	01 d0                	add    %edx,%eax
f012e199:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e1a0:	01 d0                	add    %edx,%eax
f012e1a2:	c1 e0 02             	shl    $0x2,%eax
f012e1a5:	29 c1                	sub    %eax,%ecx
f012e1a7:	89 ca                	mov    %ecx,%edx
f012e1a9:	85 d2                	test   %edx,%edx
f012e1ab:	74 03                	je     f012e1b0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012e1ad:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012e1b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e1b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e1b6:	eb 75                	jmp    f012e22d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012e1b8:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e1bd:	83 ec 0c             	sub    $0xc,%esp
f012e1c0:	50                   	push   %eax
f012e1c1:	e8 2b a1 fd ff       	call   f01082f1 <env_page_ws_get_size>
f012e1c6:	83 c4 10             	add    $0x10,%esp
f012e1c9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012e1cc:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e1d1:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e1d7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012e1da:	0f af c2             	imul   %edx,%eax
f012e1dd:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012e1e2:	f7 e2                	mul    %edx
f012e1e4:	89 d0                	mov    %edx,%eax
f012e1e6:	c1 e8 05             	shr    $0x5,%eax
f012e1e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012e1ec:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e1f1:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e1f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012e1fa:	89 d1                	mov    %edx,%ecx
f012e1fc:	0f af c8             	imul   %eax,%ecx
f012e1ff:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e204:	f7 e1                	mul    %ecx
f012e206:	c1 ea 05             	shr    $0x5,%edx
f012e209:	89 d0                	mov    %edx,%eax
f012e20b:	c1 e0 02             	shl    $0x2,%eax
f012e20e:	01 d0                	add    %edx,%eax
f012e210:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e217:	01 d0                	add    %edx,%eax
f012e219:	c1 e0 02             	shl    $0x2,%eax
f012e21c:	29 c1                	sub    %eax,%ecx
f012e21e:	89 ca                	mov    %ecx,%edx
f012e220:	85 d2                	test   %edx,%edx
f012e222:	74 03                	je     f012e227 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012e224:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012e227:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012e22a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012e22d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012e230:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e233:	01 c2                	add    %eax,%edx
f012e235:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e238:	01 d0                	add    %edx,%eax
}
f012e23a:	c9                   	leave  
f012e23b:	c3                   	ret    

f012e23c <schenv>:


void schenv()
{
f012e23c:	55                   	push   %ebp
f012e23d:	89 e5                	mov    %esp,%ebp
f012e23f:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012e242:	c6 05 6c be 2b f0 00 	movb   $0x0,0xf02bbe6c
	__ne = NULL;
f012e249:	c7 05 f4 bd 2b f0 00 	movl   $0x0,0xf02bbdf4
f012e250:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012e253:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e25a:	eb 3a                	jmp    f012e296 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012e25c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e25f:	c1 e0 04             	shl    $0x4,%eax
f012e262:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e267:	83 ec 0c             	sub    $0xc,%esp
f012e26a:	50                   	push   %eax
f012e26b:	e8 3d 6b fd ff       	call   f0104dad <queue_size>
f012e270:	83 c4 10             	add    $0x10,%esp
f012e273:	85 c0                	test   %eax,%eax
f012e275:	74 1c                	je     f012e293 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012e277:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e27a:	c1 e0 04             	shl    $0x4,%eax
f012e27d:	05 64 3a 25 f0       	add    $0xf0253a64,%eax
f012e282:	8b 00                	mov    (%eax),%eax
f012e284:	a3 f4 bd 2b f0       	mov    %eax,0xf02bbdf4
			__nl = i;
f012e289:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e28c:	a2 6c be 2b f0       	mov    %al,0xf02bbe6c
			break;
f012e291:	eb 10                	jmp    f012e2a3 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012e293:	ff 45 f4             	incl   -0xc(%ebp)
f012e296:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e29b:	0f b6 c0             	movzbl %al,%eax
f012e29e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e2a1:	7f b9                	jg     f012e25c <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012e2a3:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e2a8:	85 c0                	test   %eax,%eax
f012e2aa:	0f 84 86 00 00 00    	je     f012e336 <schenv+0xfa>
	{
		if (__ne != NULL)
f012e2b0:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e2b5:	85 c0                	test   %eax,%eax
f012e2b7:	74 4b                	je     f012e304 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012e2b9:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e2be:	0f b6 c0             	movzbl %al,%eax
f012e2c1:	8d 50 01             	lea    0x1(%eax),%edx
f012e2c4:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e2c9:	0f b6 c0             	movzbl %al,%eax
f012e2cc:	39 c2                	cmp    %eax,%edx
f012e2ce:	7d 66                	jge    f012e336 <schenv+0xfa>
			{
				__ne = curenv;
f012e2d0:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e2d5:	a3 f4 bd 2b f0       	mov    %eax,0xf02bbdf4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e2da:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e2df:	0f b6 c0             	movzbl %al,%eax
f012e2e2:	8a 15 44 be 2b f0    	mov    0xf02bbe44,%dl
f012e2e8:	0f b6 d2             	movzbl %dl,%edx
f012e2eb:	4a                   	dec    %edx
f012e2ec:	39 d0                	cmp    %edx,%eax
f012e2ee:	7d 08                	jge    f012e2f8 <schenv+0xbc>
f012e2f0:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e2f5:	40                   	inc    %eax
f012e2f6:	eb 05                	jmp    f012e2fd <schenv+0xc1>
f012e2f8:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e2fd:	a2 6c be 2b f0       	mov    %al,0xf02bbe6c
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012e302:	eb 32                	jmp    f012e336 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012e304:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e309:	a3 f4 bd 2b f0       	mov    %eax,0xf02bbdf4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e30e:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e313:	0f b6 c0             	movzbl %al,%eax
f012e316:	8a 15 44 be 2b f0    	mov    0xf02bbe44,%dl
f012e31c:	0f b6 d2             	movzbl %dl,%edx
f012e31f:	4a                   	dec    %edx
f012e320:	39 d0                	cmp    %edx,%eax
f012e322:	7d 08                	jge    f012e32c <schenv+0xf0>
f012e324:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e329:	40                   	inc    %eax
f012e32a:	eb 05                	jmp    f012e331 <schenv+0xf5>
f012e32c:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e331:	a2 6c be 2b f0       	mov    %al,0xf02bbe6c
		}
	}
}
f012e336:	90                   	nop
f012e337:	c9                   	leave  
f012e338:	c3                   	ret    

f012e339 <chksch>:

void chksch(uint8 onoff)
{
f012e339:	55                   	push   %ebp
f012e33a:	89 e5                	mov    %esp,%ebp
f012e33c:	83 ec 04             	sub    $0x4,%esp
f012e33f:	8b 45 08             	mov    0x8(%ebp),%eax
f012e342:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012e345:	c7 05 68 be 2b f0 00 	movl   $0x0,0xf02bbe68
f012e34c:	00 00 00 
	__ne = NULL;
f012e34f:	c7 05 f4 bd 2b f0 00 	movl   $0x0,0xf02bbdf4
f012e356:	00 00 00 
	__pl = 0 ;
f012e359:	c6 05 58 3a 25 f0 00 	movb   $0x0,0xf0253a58
	__nl = 0 ;
f012e360:	c6 05 6c be 2b f0 00 	movb   $0x0,0xf02bbe6c
	__chkstatus = onoff;
f012e367:	8a 45 fc             	mov    -0x4(%ebp),%al
f012e36a:	a2 f0 bd 2b f0       	mov    %al,0xf02bbdf0
}
f012e36f:	90                   	nop
f012e370:	c9                   	leave  
f012e371:	c3                   	ret    

f012e372 <chk1>:
void chk1()
{
f012e372:	55                   	push   %ebp
f012e373:	89 e5                	mov    %esp,%ebp
f012e375:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012e378:	a0 f0 bd 2b f0       	mov    0xf02bbdf0,%al
f012e37d:	84 c0                	test   %al,%al
f012e37f:	74 2b                	je     f012e3ac <chk1+0x3a>
		return ;
	__pe = curenv;
f012e381:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e386:	a3 68 be 2b f0       	mov    %eax,0xf02bbe68
	__pl = __nl ;
f012e38b:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e390:	a2 58 3a 25 f0       	mov    %al,0xf0253a58
	if (__pe == NULL)
f012e395:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e39a:	85 c0                	test   %eax,%eax
f012e39c:	75 07                	jne    f012e3a5 <chk1+0x33>
	{
		__pl = 0;
f012e39e:	c6 05 58 3a 25 f0 00 	movb   $0x0,0xf0253a58
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012e3a5:	e8 92 fe ff ff       	call   f012e23c <schenv>
f012e3aa:	eb 01                	jmp    f012e3ad <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012e3ac:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012e3ad:	c9                   	leave  
f012e3ae:	c3                   	ret    

f012e3af <chk2>:
void chk2(struct Env* __se)
{
f012e3af:	55                   	push   %ebp
f012e3b0:	89 e5                	mov    %esp,%ebp
f012e3b2:	53                   	push   %ebx
f012e3b3:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012e3b6:	a0 f0 bd 2b f0       	mov    0xf02bbdf0,%al
f012e3bb:	84 c0                	test   %al,%al
f012e3bd:	0f 84 35 02 00 00    	je     f012e5f8 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012e3c3:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e3c8:	39 45 08             	cmp    %eax,0x8(%ebp)
f012e3cb:	74 19                	je     f012e3e6 <chk2+0x37>
f012e3cd:	68 b9 b4 13 f0       	push   $0xf013b4b9
f012e3d2:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e3d7:	68 f8 00 00 00       	push   $0xf8
f012e3dc:	68 0b b4 13 f0       	push   $0xf013b40b
f012e3e1:	e8 80 1e fd ff       	call   f0100266 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012e3e6:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e3eb:	85 c0                	test   %eax,%eax
f012e3ed:	0f 84 1b 01 00 00    	je     f012e50e <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012e3f3:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e3f8:	0f b6 c0             	movzbl %al,%eax
f012e3fb:	8a 80 e8 bd 2b f0    	mov    -0xfd44218(%eax),%al
f012e401:	0f b6 d8             	movzbl %al,%ebx
f012e404:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012e409:	99                   	cltd   
f012e40a:	f7 fb                	idiv   %ebx
f012e40c:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012e412:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e417:	0f b6 c0             	movzbl %al,%eax
f012e41a:	8a 80 e8 bd 2b f0    	mov    -0xfd44218(%eax),%al
f012e420:	0f b6 d8             	movzbl %al,%ebx
f012e423:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012e428:	99                   	cltd   
f012e429:	f7 fb                	idiv   %ebx
f012e42b:	89 c3                	mov    %eax,%ebx
f012e42d:	89 c8                	mov    %ecx,%eax
f012e42f:	99                   	cltd   
f012e430:	f7 fb                	idiv   %ebx
f012e432:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012e436:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e43a:	83 e0 01             	and    $0x1,%eax
f012e43d:	66 85 c0             	test   %ax,%ax
f012e440:	74 07                	je     f012e449 <chk2+0x9a>
f012e442:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e446:	40                   	inc    %eax
f012e447:	eb 04                	jmp    f012e44d <chk2+0x9e>
f012e449:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e44d:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012e451:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012e455:	89 d0                	mov    %edx,%eax
f012e457:	c1 e0 02             	shl    $0x2,%eax
f012e45a:	01 d0                	add    %edx,%eax
f012e45c:	01 c0                	add    %eax,%eax
f012e45e:	01 d0                	add    %edx,%eax
f012e460:	c1 e0 02             	shl    $0x2,%eax
f012e463:	01 d0                	add    %edx,%eax
f012e465:	01 c0                	add    %eax,%eax
f012e467:	89 c1                	mov    %eax,%ecx
f012e469:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e46e:	f7 e9                	imul   %ecx
f012e470:	c1 fa 05             	sar    $0x5,%edx
f012e473:	89 c8                	mov    %ecx,%eax
f012e475:	c1 f8 1f             	sar    $0x1f,%eax
f012e478:	29 c2                	sub    %eax,%edx
f012e47a:	89 d0                	mov    %edx,%eax
f012e47c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012e480:	e8 2e 68 fd ff       	call   f0104cb3 <kclock_read_cnt0>
f012e485:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012e489:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e48d:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012e491:	76 0a                	jbe    f012e49d <chk2+0xee>
f012e493:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e497:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012e49b:	76 19                	jbe    f012e4b6 <chk2+0x107>
f012e49d:	68 dc b4 13 f0       	push   $0xf013b4dc
f012e4a2:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e4a7:	68 02 01 00 00       	push   $0x102
f012e4ac:	68 0b b4 13 f0       	push   $0xf013b40b
f012e4b1:	e8 b0 1d fd ff       	call   f0100266 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e4b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e4bd:	eb 42                	jmp    f012e501 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012e4bf:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e4c4:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e4c7:	89 c2                	mov    %eax,%edx
f012e4c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e4cc:	c1 e0 04             	shl    $0x4,%eax
f012e4cf:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e4d4:	83 ec 08             	sub    $0x8,%esp
f012e4d7:	52                   	push   %edx
f012e4d8:	50                   	push   %eax
f012e4d9:	e8 e9 6a fd ff       	call   f0104fc7 <find_env_in_queue>
f012e4de:	83 c4 10             	add    $0x10,%esp
f012e4e1:	85 c0                	test   %eax,%eax
f012e4e3:	74 19                	je     f012e4fe <chk2+0x14f>
f012e4e5:	68 00 b5 13 f0       	push   $0xf013b500
f012e4ea:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e4ef:	68 06 01 00 00       	push   $0x106
f012e4f4:	68 0b b4 13 f0       	push   $0xf013b40b
f012e4f9:	e8 68 1d fd ff       	call   f0100266 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e4fe:	ff 45 f4             	incl   -0xc(%ebp)
f012e501:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e506:	0f b6 c0             	movzbl %al,%eax
f012e509:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e50c:	7f b1                	jg     f012e4bf <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012e50e:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e513:	85 c0                	test   %eax,%eax
f012e515:	0f 84 de 00 00 00    	je     f012e5f9 <chk2+0x24a>
f012e51b:	8b 15 68 be 2b f0    	mov    0xf02bbe68,%edx
f012e521:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e526:	39 c2                	cmp    %eax,%edx
f012e528:	0f 84 cb 00 00 00    	je     f012e5f9 <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012e52e:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e533:	0f b6 c0             	movzbl %al,%eax
f012e536:	8a 15 44 be 2b f0    	mov    0xf02bbe44,%dl
f012e53c:	0f b6 d2             	movzbl %dl,%edx
f012e53f:	4a                   	dec    %edx
f012e540:	39 d0                	cmp    %edx,%eax
f012e542:	74 08                	je     f012e54c <chk2+0x19d>
f012e544:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e549:	40                   	inc    %eax
f012e54a:	eb 05                	jmp    f012e551 <chk2+0x1a2>
f012e54c:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e551:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012e554:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e559:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e55c:	89 c2                	mov    %eax,%edx
f012e55e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e562:	c1 e0 04             	shl    $0x4,%eax
f012e565:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e56a:	83 ec 08             	sub    $0x8,%esp
f012e56d:	52                   	push   %edx
f012e56e:	50                   	push   %eax
f012e56f:	e8 53 6a fd ff       	call   f0104fc7 <find_env_in_queue>
f012e574:	83 c4 10             	add    $0x10,%esp
f012e577:	85 c0                	test   %eax,%eax
f012e579:	75 19                	jne    f012e594 <chk2+0x1e5>
f012e57b:	68 40 b5 13 f0       	push   $0xf013b540
f012e580:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e585:	68 0c 01 00 00       	push   $0x10c
f012e58a:	68 0b b4 13 f0       	push   $0xf013b40b
f012e58f:	e8 d2 1c fd ff       	call   f0100266 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e594:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e59b:	eb 4c                	jmp    f012e5e9 <chk2+0x23a>
		{
			if (i == __tl) continue;
f012e59d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e5a1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e5a4:	74 3f                	je     f012e5e5 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012e5a6:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e5ab:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e5ae:	89 c2                	mov    %eax,%edx
f012e5b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e5b3:	c1 e0 04             	shl    $0x4,%eax
f012e5b6:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e5bb:	83 ec 08             	sub    $0x8,%esp
f012e5be:	52                   	push   %edx
f012e5bf:	50                   	push   %eax
f012e5c0:	e8 02 6a fd ff       	call   f0104fc7 <find_env_in_queue>
f012e5c5:	83 c4 10             	add    $0x10,%esp
f012e5c8:	85 c0                	test   %eax,%eax
f012e5ca:	74 1a                	je     f012e5e6 <chk2+0x237>
f012e5cc:	68 84 b5 13 f0       	push   $0xf013b584
f012e5d1:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e5d6:	68 10 01 00 00       	push   $0x110
f012e5db:	68 0b b4 13 f0       	push   $0xf013b40b
f012e5e0:	e8 81 1c fd ff       	call   f0100266 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012e5e5:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e5e6:	ff 45 f0             	incl   -0x10(%ebp)
f012e5e9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e5ee:	0f b6 c0             	movzbl %al,%eax
f012e5f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e5f4:	7f a7                	jg     f012e59d <chk2+0x1ee>
f012e5f6:	eb 01                	jmp    f012e5f9 <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012e5f8:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012e5f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e5fc:	c9                   	leave  
f012e5fd:	c3                   	ret    

f012e5fe <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012e5fe:	55                   	push   %ebp
f012e5ff:	89 e5                	mov    %esp,%ebp
f012e601:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e604:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e60b:	eb 40                	jmp    f012e64d <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012e60d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e610:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012e616:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e61b:	83 ec 08             	sub    $0x8,%esp
f012e61e:	52                   	push   %edx
f012e61f:	50                   	push   %eax
f012e620:	e8 92 01 00 00       	call   f012e7b7 <check_va2pa>
f012e625:	83 c4 10             	add    $0x10,%esp
f012e628:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e62b:	74 19                	je     f012e646 <check_boot_pgdir+0x48>
f012e62d:	68 c4 b5 13 f0       	push   $0xf013b5c4
f012e632:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e637:	68 37 01 00 00       	push   $0x137
f012e63c:	68 0b b4 13 f0       	push   $0xf013b40b
f012e641:	e8 6a 1b fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e646:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e64d:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012e654:	75 b7                	jne    f012e60d <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e656:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e65d:	eb 74                	jmp    f012e6d3 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012e65f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e662:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012e668:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e66d:	83 ec 08             	sub    $0x8,%esp
f012e670:	52                   	push   %edx
f012e671:	50                   	push   %eax
f012e672:	e8 40 01 00 00       	call   f012e7b7 <check_va2pa>
f012e677:	83 c4 10             	add    $0x10,%esp
f012e67a:	c7 45 f0 00 60 18 f0 	movl   $0xf0186000,-0x10(%ebp)
f012e681:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012e688:	77 17                	ja     f012e6a1 <check_boot_pgdir+0xa3>
f012e68a:	ff 75 f0             	pushl  -0x10(%ebp)
f012e68d:	68 fc b5 13 f0       	push   $0xf013b5fc
f012e692:	68 3c 01 00 00       	push   $0x13c
f012e697:	68 0b b4 13 f0       	push   $0xf013b40b
f012e69c:	e8 0f 1b fd ff       	call   f01001b0 <_panic>
f012e6a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012e6a4:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012e6aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e6ad:	01 ca                	add    %ecx,%edx
f012e6af:	39 d0                	cmp    %edx,%eax
f012e6b1:	74 19                	je     f012e6cc <check_boot_pgdir+0xce>
f012e6b3:	68 30 b6 13 f0       	push   $0xf013b630
f012e6b8:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e6bd:	68 3c 01 00 00       	push   $0x13c
f012e6c2:	68 0b b4 13 f0       	push   $0xf013b40b
f012e6c7:	e8 e4 1a fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e6cc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e6d3:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012e6da:	76 83                	jbe    f012e65f <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e6dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e6e3:	e9 af 00 00 00       	jmp    f012e797 <check_boot_pgdir+0x199>
		switch (i) {
f012e6e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e6eb:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e6f0:	74 11                	je     f012e703 <check_boot_pgdir+0x105>
f012e6f2:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e6f7:	72 36                	jb     f012e72f <check_boot_pgdir+0x131>
f012e6f9:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012e6fe:	83 f8 02             	cmp    $0x2,%eax
f012e701:	77 2c                	ja     f012e72f <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012e703:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e708:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e70b:	c1 e2 02             	shl    $0x2,%edx
f012e70e:	01 d0                	add    %edx,%eax
f012e710:	8b 00                	mov    (%eax),%eax
f012e712:	85 c0                	test   %eax,%eax
f012e714:	75 7a                	jne    f012e790 <check_boot_pgdir+0x192>
f012e716:	68 b2 b6 13 f0       	push   $0xf013b6b2
f012e71b:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e720:	68 47 01 00 00       	push   $0x147
f012e725:	68 0b b4 13 f0       	push   $0xf013b40b
f012e72a:	e8 81 1a fd ff       	call   f01001b0 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012e72f:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012e736:	76 2c                	jbe    f012e764 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012e738:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e73d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e740:	c1 e2 02             	shl    $0x2,%edx
f012e743:	01 d0                	add    %edx,%eax
f012e745:	8b 00                	mov    (%eax),%eax
f012e747:	85 c0                	test   %eax,%eax
f012e749:	75 48                	jne    f012e793 <check_boot_pgdir+0x195>
f012e74b:	68 b2 b6 13 f0       	push   $0xf013b6b2
f012e750:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e755:	68 4b 01 00 00       	push   $0x14b
f012e75a:	68 0b b4 13 f0       	push   $0xf013b40b
f012e75f:	e8 4c 1a fd ff       	call   f01001b0 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012e764:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e769:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e76c:	c1 e2 02             	shl    $0x2,%edx
f012e76f:	01 d0                	add    %edx,%eax
f012e771:	8b 00                	mov    (%eax),%eax
f012e773:	85 c0                	test   %eax,%eax
f012e775:	74 1c                	je     f012e793 <check_boot_pgdir+0x195>
f012e777:	68 c8 b6 13 f0       	push   $0xf013b6c8
f012e77c:	68 c6 b4 13 f0       	push   $0xf013b4c6
f012e781:	68 4d 01 00 00       	push   $0x14d
f012e786:	68 0b b4 13 f0       	push   $0xf013b40b
f012e78b:	e8 20 1a fd ff       	call   f01001b0 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012e790:	90                   	nop
f012e791:	eb 01                	jmp    f012e794 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012e793:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e794:	ff 45 f4             	incl   -0xc(%ebp)
f012e797:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012e79e:	0f 86 44 ff ff ff    	jbe    f012e6e8 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012e7a4:	83 ec 0c             	sub    $0xc,%esp
f012e7a7:	68 e4 b6 13 f0       	push   $0xf013b6e4
f012e7ac:	e8 80 26 fd ff       	call   f0100e31 <cprintf>
f012e7b1:	83 c4 10             	add    $0x10,%esp
}
f012e7b4:	90                   	nop
f012e7b5:	c9                   	leave  
f012e7b6:	c3                   	ret    

f012e7b7 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012e7b7:	55                   	push   %ebp
f012e7b8:	89 e5                	mov    %esp,%ebp
f012e7ba:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012e7bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e7c0:	c1 e8 16             	shr    $0x16,%eax
f012e7c3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e7ca:	8b 45 08             	mov    0x8(%ebp),%eax
f012e7cd:	01 d0                	add    %edx,%eax
f012e7cf:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012e7d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e7d5:	8b 00                	mov    (%eax),%eax
f012e7d7:	83 e0 01             	and    $0x1,%eax
f012e7da:	85 c0                	test   %eax,%eax
f012e7dc:	75 0a                	jne    f012e7e8 <check_va2pa+0x31>
		return ~0;
f012e7de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e7e3:	e9 87 00 00 00       	jmp    f012e86f <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012e7e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e7eb:	8b 00                	mov    (%eax),%eax
f012e7ed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012e7f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e7f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e7f8:	c1 e8 0c             	shr    $0xc,%eax
f012e7fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e7fe:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f012e803:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012e806:	72 17                	jb     f012e81f <check_va2pa+0x68>
f012e808:	ff 75 f0             	pushl  -0x10(%ebp)
f012e80b:	68 04 b7 13 f0       	push   $0xf013b704
f012e810:	68 63 01 00 00       	push   $0x163
f012e815:	68 0b b4 13 f0       	push   $0xf013b40b
f012e81a:	e8 91 19 fd ff       	call   f01001b0 <_panic>
f012e81f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e822:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012e827:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012e82a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e82d:	c1 e8 0c             	shr    $0xc,%eax
f012e830:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e835:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e83c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e83f:	01 d0                	add    %edx,%eax
f012e841:	8b 00                	mov    (%eax),%eax
f012e843:	83 e0 01             	and    $0x1,%eax
f012e846:	85 c0                	test   %eax,%eax
f012e848:	75 07                	jne    f012e851 <check_va2pa+0x9a>
		return ~0;
f012e84a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e84f:	eb 1e                	jmp    f012e86f <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012e851:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e854:	c1 e8 0c             	shr    $0xc,%eax
f012e857:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e85c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e863:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e866:	01 d0                	add    %edx,%eax
f012e868:	8b 00                	mov    (%eax),%eax
f012e86a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012e86f:	c9                   	leave  
f012e870:	c3                   	ret    

f012e871 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012e871:	55                   	push   %ebp
f012e872:	89 e5                	mov    %esp,%ebp
f012e874:	53                   	push   %ebx
f012e875:	83 ec 14             	sub    $0x14,%esp
f012e878:	8b 45 10             	mov    0x10(%ebp),%eax
f012e87b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e87e:	8b 45 14             	mov    0x14(%ebp),%eax
f012e881:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012e884:	8b 45 18             	mov    0x18(%ebp),%eax
f012e887:	ba 00 00 00 00       	mov    $0x0,%edx
f012e88c:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e88f:	77 55                	ja     f012e8e6 <printnum+0x75>
f012e891:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e894:	72 05                	jb     f012e89b <printnum+0x2a>
f012e896:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e899:	77 4b                	ja     f012e8e6 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012e89b:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012e89e:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012e8a1:	8b 45 18             	mov    0x18(%ebp),%eax
f012e8a4:	ba 00 00 00 00       	mov    $0x0,%edx
f012e8a9:	52                   	push   %edx
f012e8aa:	50                   	push   %eax
f012e8ab:	ff 75 f4             	pushl  -0xc(%ebp)
f012e8ae:	ff 75 f0             	pushl  -0x10(%ebp)
f012e8b1:	e8 36 1b 00 00       	call   f01303ec <__udivdi3>
f012e8b6:	83 c4 10             	add    $0x10,%esp
f012e8b9:	83 ec 04             	sub    $0x4,%esp
f012e8bc:	ff 75 20             	pushl  0x20(%ebp)
f012e8bf:	53                   	push   %ebx
f012e8c0:	ff 75 18             	pushl  0x18(%ebp)
f012e8c3:	52                   	push   %edx
f012e8c4:	50                   	push   %eax
f012e8c5:	ff 75 0c             	pushl  0xc(%ebp)
f012e8c8:	ff 75 08             	pushl  0x8(%ebp)
f012e8cb:	e8 a1 ff ff ff       	call   f012e871 <printnum>
f012e8d0:	83 c4 20             	add    $0x20,%esp
f012e8d3:	eb 1a                	jmp    f012e8ef <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012e8d5:	83 ec 08             	sub    $0x8,%esp
f012e8d8:	ff 75 0c             	pushl  0xc(%ebp)
f012e8db:	ff 75 20             	pushl  0x20(%ebp)
f012e8de:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8e1:	ff d0                	call   *%eax
f012e8e3:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012e8e6:	ff 4d 1c             	decl   0x1c(%ebp)
f012e8e9:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012e8ed:	7f e6                	jg     f012e8d5 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012e8ef:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012e8f2:	bb 00 00 00 00       	mov    $0x0,%ebx
f012e8f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e8fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e8fd:	53                   	push   %ebx
f012e8fe:	51                   	push   %ecx
f012e8ff:	52                   	push   %edx
f012e900:	50                   	push   %eax
f012e901:	e8 f6 1b 00 00       	call   f01304fc <__umoddi3>
f012e906:	83 c4 10             	add    $0x10,%esp
f012e909:	05 54 b9 13 f0       	add    $0xf013b954,%eax
f012e90e:	8a 00                	mov    (%eax),%al
f012e910:	0f be c0             	movsbl %al,%eax
f012e913:	83 ec 08             	sub    $0x8,%esp
f012e916:	ff 75 0c             	pushl  0xc(%ebp)
f012e919:	50                   	push   %eax
f012e91a:	8b 45 08             	mov    0x8(%ebp),%eax
f012e91d:	ff d0                	call   *%eax
f012e91f:	83 c4 10             	add    $0x10,%esp
}
f012e922:	90                   	nop
f012e923:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e926:	c9                   	leave  
f012e927:	c3                   	ret    

f012e928 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012e928:	55                   	push   %ebp
f012e929:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e92b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e92f:	7e 1c                	jle    f012e94d <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012e931:	8b 45 08             	mov    0x8(%ebp),%eax
f012e934:	8b 00                	mov    (%eax),%eax
f012e936:	8d 50 08             	lea    0x8(%eax),%edx
f012e939:	8b 45 08             	mov    0x8(%ebp),%eax
f012e93c:	89 10                	mov    %edx,(%eax)
f012e93e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e941:	8b 00                	mov    (%eax),%eax
f012e943:	83 e8 08             	sub    $0x8,%eax
f012e946:	8b 50 04             	mov    0x4(%eax),%edx
f012e949:	8b 00                	mov    (%eax),%eax
f012e94b:	eb 40                	jmp    f012e98d <getuint+0x65>
	else if (lflag)
f012e94d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e951:	74 1e                	je     f012e971 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012e953:	8b 45 08             	mov    0x8(%ebp),%eax
f012e956:	8b 00                	mov    (%eax),%eax
f012e958:	8d 50 04             	lea    0x4(%eax),%edx
f012e95b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e95e:	89 10                	mov    %edx,(%eax)
f012e960:	8b 45 08             	mov    0x8(%ebp),%eax
f012e963:	8b 00                	mov    (%eax),%eax
f012e965:	83 e8 04             	sub    $0x4,%eax
f012e968:	8b 00                	mov    (%eax),%eax
f012e96a:	ba 00 00 00 00       	mov    $0x0,%edx
f012e96f:	eb 1c                	jmp    f012e98d <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012e971:	8b 45 08             	mov    0x8(%ebp),%eax
f012e974:	8b 00                	mov    (%eax),%eax
f012e976:	8d 50 04             	lea    0x4(%eax),%edx
f012e979:	8b 45 08             	mov    0x8(%ebp),%eax
f012e97c:	89 10                	mov    %edx,(%eax)
f012e97e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e981:	8b 00                	mov    (%eax),%eax
f012e983:	83 e8 04             	sub    $0x4,%eax
f012e986:	8b 00                	mov    (%eax),%eax
f012e988:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012e98d:	5d                   	pop    %ebp
f012e98e:	c3                   	ret    

f012e98f <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012e98f:	55                   	push   %ebp
f012e990:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e992:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e996:	7e 1c                	jle    f012e9b4 <getint+0x25>
		return va_arg(*ap, long long);
f012e998:	8b 45 08             	mov    0x8(%ebp),%eax
f012e99b:	8b 00                	mov    (%eax),%eax
f012e99d:	8d 50 08             	lea    0x8(%eax),%edx
f012e9a0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9a3:	89 10                	mov    %edx,(%eax)
f012e9a5:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9a8:	8b 00                	mov    (%eax),%eax
f012e9aa:	83 e8 08             	sub    $0x8,%eax
f012e9ad:	8b 50 04             	mov    0x4(%eax),%edx
f012e9b0:	8b 00                	mov    (%eax),%eax
f012e9b2:	eb 38                	jmp    f012e9ec <getint+0x5d>
	else if (lflag)
f012e9b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e9b8:	74 1a                	je     f012e9d4 <getint+0x45>
		return va_arg(*ap, long);
f012e9ba:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9bd:	8b 00                	mov    (%eax),%eax
f012e9bf:	8d 50 04             	lea    0x4(%eax),%edx
f012e9c2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9c5:	89 10                	mov    %edx,(%eax)
f012e9c7:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9ca:	8b 00                	mov    (%eax),%eax
f012e9cc:	83 e8 04             	sub    $0x4,%eax
f012e9cf:	8b 00                	mov    (%eax),%eax
f012e9d1:	99                   	cltd   
f012e9d2:	eb 18                	jmp    f012e9ec <getint+0x5d>
	else
		return va_arg(*ap, int);
f012e9d4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9d7:	8b 00                	mov    (%eax),%eax
f012e9d9:	8d 50 04             	lea    0x4(%eax),%edx
f012e9dc:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9df:	89 10                	mov    %edx,(%eax)
f012e9e1:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9e4:	8b 00                	mov    (%eax),%eax
f012e9e6:	83 e8 04             	sub    $0x4,%eax
f012e9e9:	8b 00                	mov    (%eax),%eax
f012e9eb:	99                   	cltd   
}
f012e9ec:	5d                   	pop    %ebp
f012e9ed:	c3                   	ret    

f012e9ee <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012e9ee:	55                   	push   %ebp
f012e9ef:	89 e5                	mov    %esp,%ebp
f012e9f1:	56                   	push   %esi
f012e9f2:	53                   	push   %ebx
f012e9f3:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e9f6:	eb 17                	jmp    f012ea0f <vprintfmt+0x21>
			if (ch == '\0')
f012e9f8:	85 db                	test   %ebx,%ebx
f012e9fa:	0f 84 af 03 00 00    	je     f012edaf <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012ea00:	83 ec 08             	sub    $0x8,%esp
f012ea03:	ff 75 0c             	pushl  0xc(%ebp)
f012ea06:	53                   	push   %ebx
f012ea07:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea0a:	ff d0                	call   *%eax
f012ea0c:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012ea0f:	8b 45 10             	mov    0x10(%ebp),%eax
f012ea12:	8d 50 01             	lea    0x1(%eax),%edx
f012ea15:	89 55 10             	mov    %edx,0x10(%ebp)
f012ea18:	8a 00                	mov    (%eax),%al
f012ea1a:	0f b6 d8             	movzbl %al,%ebx
f012ea1d:	83 fb 25             	cmp    $0x25,%ebx
f012ea20:	75 d6                	jne    f012e9f8 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012ea22:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012ea26:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012ea2d:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012ea34:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012ea3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012ea42:	8b 45 10             	mov    0x10(%ebp),%eax
f012ea45:	8d 50 01             	lea    0x1(%eax),%edx
f012ea48:	89 55 10             	mov    %edx,0x10(%ebp)
f012ea4b:	8a 00                	mov    (%eax),%al
f012ea4d:	0f b6 d8             	movzbl %al,%ebx
f012ea50:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012ea53:	83 f8 55             	cmp    $0x55,%eax
f012ea56:	0f 87 2b 03 00 00    	ja     f012ed87 <vprintfmt+0x399>
f012ea5c:	8b 04 85 78 b9 13 f0 	mov    -0xfec4688(,%eax,4),%eax
f012ea63:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012ea65:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012ea69:	eb d7                	jmp    f012ea42 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012ea6b:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012ea6f:	eb d1                	jmp    f012ea42 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012ea71:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012ea78:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ea7b:	89 d0                	mov    %edx,%eax
f012ea7d:	c1 e0 02             	shl    $0x2,%eax
f012ea80:	01 d0                	add    %edx,%eax
f012ea82:	01 c0                	add    %eax,%eax
f012ea84:	01 d8                	add    %ebx,%eax
f012ea86:	83 e8 30             	sub    $0x30,%eax
f012ea89:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012ea8c:	8b 45 10             	mov    0x10(%ebp),%eax
f012ea8f:	8a 00                	mov    (%eax),%al
f012ea91:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012ea94:	83 fb 2f             	cmp    $0x2f,%ebx
f012ea97:	7e 3e                	jle    f012ead7 <vprintfmt+0xe9>
f012ea99:	83 fb 39             	cmp    $0x39,%ebx
f012ea9c:	7f 39                	jg     f012ead7 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012ea9e:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012eaa1:	eb d5                	jmp    f012ea78 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012eaa3:	8b 45 14             	mov    0x14(%ebp),%eax
f012eaa6:	83 c0 04             	add    $0x4,%eax
f012eaa9:	89 45 14             	mov    %eax,0x14(%ebp)
f012eaac:	8b 45 14             	mov    0x14(%ebp),%eax
f012eaaf:	83 e8 04             	sub    $0x4,%eax
f012eab2:	8b 00                	mov    (%eax),%eax
f012eab4:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012eab7:	eb 1f                	jmp    f012ead8 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012eab9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012eabd:	79 83                	jns    f012ea42 <vprintfmt+0x54>
				width = 0;
f012eabf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012eac6:	e9 77 ff ff ff       	jmp    f012ea42 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012eacb:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012ead2:	e9 6b ff ff ff       	jmp    f012ea42 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012ead7:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012ead8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012eadc:	0f 89 60 ff ff ff    	jns    f012ea42 <vprintfmt+0x54>
				width = precision, precision = -1;
f012eae2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012eae5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012eae8:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012eaef:	e9 4e ff ff ff       	jmp    f012ea42 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012eaf4:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012eaf7:	e9 46 ff ff ff       	jmp    f012ea42 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012eafc:	8b 45 14             	mov    0x14(%ebp),%eax
f012eaff:	83 c0 04             	add    $0x4,%eax
f012eb02:	89 45 14             	mov    %eax,0x14(%ebp)
f012eb05:	8b 45 14             	mov    0x14(%ebp),%eax
f012eb08:	83 e8 04             	sub    $0x4,%eax
f012eb0b:	8b 00                	mov    (%eax),%eax
f012eb0d:	83 ec 08             	sub    $0x8,%esp
f012eb10:	ff 75 0c             	pushl  0xc(%ebp)
f012eb13:	50                   	push   %eax
f012eb14:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb17:	ff d0                	call   *%eax
f012eb19:	83 c4 10             	add    $0x10,%esp
			break;
f012eb1c:	e9 89 02 00 00       	jmp    f012edaa <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012eb21:	8b 45 14             	mov    0x14(%ebp),%eax
f012eb24:	83 c0 04             	add    $0x4,%eax
f012eb27:	89 45 14             	mov    %eax,0x14(%ebp)
f012eb2a:	8b 45 14             	mov    0x14(%ebp),%eax
f012eb2d:	83 e8 04             	sub    $0x4,%eax
f012eb30:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012eb32:	85 db                	test   %ebx,%ebx
f012eb34:	79 02                	jns    f012eb38 <vprintfmt+0x14a>
				err = -err;
f012eb36:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012eb38:	83 fb 64             	cmp    $0x64,%ebx
f012eb3b:	7f 0b                	jg     f012eb48 <vprintfmt+0x15a>
f012eb3d:	8b 34 9d c0 b7 13 f0 	mov    -0xfec4840(,%ebx,4),%esi
f012eb44:	85 f6                	test   %esi,%esi
f012eb46:	75 19                	jne    f012eb61 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012eb48:	53                   	push   %ebx
f012eb49:	68 65 b9 13 f0       	push   $0xf013b965
f012eb4e:	ff 75 0c             	pushl  0xc(%ebp)
f012eb51:	ff 75 08             	pushl  0x8(%ebp)
f012eb54:	e8 5e 02 00 00       	call   f012edb7 <printfmt>
f012eb59:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012eb5c:	e9 49 02 00 00       	jmp    f012edaa <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012eb61:	56                   	push   %esi
f012eb62:	68 6e b9 13 f0       	push   $0xf013b96e
f012eb67:	ff 75 0c             	pushl  0xc(%ebp)
f012eb6a:	ff 75 08             	pushl  0x8(%ebp)
f012eb6d:	e8 45 02 00 00       	call   f012edb7 <printfmt>
f012eb72:	83 c4 10             	add    $0x10,%esp
			break;
f012eb75:	e9 30 02 00 00       	jmp    f012edaa <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012eb7a:	8b 45 14             	mov    0x14(%ebp),%eax
f012eb7d:	83 c0 04             	add    $0x4,%eax
f012eb80:	89 45 14             	mov    %eax,0x14(%ebp)
f012eb83:	8b 45 14             	mov    0x14(%ebp),%eax
f012eb86:	83 e8 04             	sub    $0x4,%eax
f012eb89:	8b 30                	mov    (%eax),%esi
f012eb8b:	85 f6                	test   %esi,%esi
f012eb8d:	75 05                	jne    f012eb94 <vprintfmt+0x1a6>
				p = "(null)";
f012eb8f:	be 71 b9 13 f0       	mov    $0xf013b971,%esi
			if (width > 0 && padc != '-')
f012eb94:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012eb98:	7e 6d                	jle    f012ec07 <vprintfmt+0x219>
f012eb9a:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012eb9e:	74 67                	je     f012ec07 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012eba0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012eba3:	83 ec 08             	sub    $0x8,%esp
f012eba6:	50                   	push   %eax
f012eba7:	56                   	push   %esi
f012eba8:	e8 12 05 00 00       	call   f012f0bf <strnlen>
f012ebad:	83 c4 10             	add    $0x10,%esp
f012ebb0:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012ebb3:	eb 16                	jmp    f012ebcb <vprintfmt+0x1dd>
					putch(padc, putdat);
f012ebb5:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012ebb9:	83 ec 08             	sub    $0x8,%esp
f012ebbc:	ff 75 0c             	pushl  0xc(%ebp)
f012ebbf:	50                   	push   %eax
f012ebc0:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebc3:	ff d0                	call   *%eax
f012ebc5:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012ebc8:	ff 4d e4             	decl   -0x1c(%ebp)
f012ebcb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ebcf:	7f e4                	jg     f012ebb5 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012ebd1:	eb 34                	jmp    f012ec07 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012ebd3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012ebd7:	74 1c                	je     f012ebf5 <vprintfmt+0x207>
f012ebd9:	83 fb 1f             	cmp    $0x1f,%ebx
f012ebdc:	7e 05                	jle    f012ebe3 <vprintfmt+0x1f5>
f012ebde:	83 fb 7e             	cmp    $0x7e,%ebx
f012ebe1:	7e 12                	jle    f012ebf5 <vprintfmt+0x207>
					putch('?', putdat);
f012ebe3:	83 ec 08             	sub    $0x8,%esp
f012ebe6:	ff 75 0c             	pushl  0xc(%ebp)
f012ebe9:	6a 3f                	push   $0x3f
f012ebeb:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebee:	ff d0                	call   *%eax
f012ebf0:	83 c4 10             	add    $0x10,%esp
f012ebf3:	eb 0f                	jmp    f012ec04 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012ebf5:	83 ec 08             	sub    $0x8,%esp
f012ebf8:	ff 75 0c             	pushl  0xc(%ebp)
f012ebfb:	53                   	push   %ebx
f012ebfc:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebff:	ff d0                	call   *%eax
f012ec01:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012ec04:	ff 4d e4             	decl   -0x1c(%ebp)
f012ec07:	89 f0                	mov    %esi,%eax
f012ec09:	8d 70 01             	lea    0x1(%eax),%esi
f012ec0c:	8a 00                	mov    (%eax),%al
f012ec0e:	0f be d8             	movsbl %al,%ebx
f012ec11:	85 db                	test   %ebx,%ebx
f012ec13:	74 24                	je     f012ec39 <vprintfmt+0x24b>
f012ec15:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012ec19:	78 b8                	js     f012ebd3 <vprintfmt+0x1e5>
f012ec1b:	ff 4d e0             	decl   -0x20(%ebp)
f012ec1e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012ec22:	79 af                	jns    f012ebd3 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012ec24:	eb 13                	jmp    f012ec39 <vprintfmt+0x24b>
				putch(' ', putdat);
f012ec26:	83 ec 08             	sub    $0x8,%esp
f012ec29:	ff 75 0c             	pushl  0xc(%ebp)
f012ec2c:	6a 20                	push   $0x20
f012ec2e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec31:	ff d0                	call   *%eax
f012ec33:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012ec36:	ff 4d e4             	decl   -0x1c(%ebp)
f012ec39:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ec3d:	7f e7                	jg     f012ec26 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012ec3f:	e9 66 01 00 00       	jmp    f012edaa <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012ec44:	83 ec 08             	sub    $0x8,%esp
f012ec47:	ff 75 e8             	pushl  -0x18(%ebp)
f012ec4a:	8d 45 14             	lea    0x14(%ebp),%eax
f012ec4d:	50                   	push   %eax
f012ec4e:	e8 3c fd ff ff       	call   f012e98f <getint>
f012ec53:	83 c4 10             	add    $0x10,%esp
f012ec56:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ec59:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012ec5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ec5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ec62:	85 d2                	test   %edx,%edx
f012ec64:	79 23                	jns    f012ec89 <vprintfmt+0x29b>
				putch('-', putdat);
f012ec66:	83 ec 08             	sub    $0x8,%esp
f012ec69:	ff 75 0c             	pushl  0xc(%ebp)
f012ec6c:	6a 2d                	push   $0x2d
f012ec6e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec71:	ff d0                	call   *%eax
f012ec73:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012ec76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ec79:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ec7c:	f7 d8                	neg    %eax
f012ec7e:	83 d2 00             	adc    $0x0,%edx
f012ec81:	f7 da                	neg    %edx
f012ec83:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ec86:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012ec89:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012ec90:	e9 bc 00 00 00       	jmp    f012ed51 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012ec95:	83 ec 08             	sub    $0x8,%esp
f012ec98:	ff 75 e8             	pushl  -0x18(%ebp)
f012ec9b:	8d 45 14             	lea    0x14(%ebp),%eax
f012ec9e:	50                   	push   %eax
f012ec9f:	e8 84 fc ff ff       	call   f012e928 <getuint>
f012eca4:	83 c4 10             	add    $0x10,%esp
f012eca7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ecaa:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012ecad:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012ecb4:	e9 98 00 00 00       	jmp    f012ed51 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012ecb9:	83 ec 08             	sub    $0x8,%esp
f012ecbc:	ff 75 0c             	pushl  0xc(%ebp)
f012ecbf:	6a 58                	push   $0x58
f012ecc1:	8b 45 08             	mov    0x8(%ebp),%eax
f012ecc4:	ff d0                	call   *%eax
f012ecc6:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ecc9:	83 ec 08             	sub    $0x8,%esp
f012eccc:	ff 75 0c             	pushl  0xc(%ebp)
f012eccf:	6a 58                	push   $0x58
f012ecd1:	8b 45 08             	mov    0x8(%ebp),%eax
f012ecd4:	ff d0                	call   *%eax
f012ecd6:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ecd9:	83 ec 08             	sub    $0x8,%esp
f012ecdc:	ff 75 0c             	pushl  0xc(%ebp)
f012ecdf:	6a 58                	push   $0x58
f012ece1:	8b 45 08             	mov    0x8(%ebp),%eax
f012ece4:	ff d0                	call   *%eax
f012ece6:	83 c4 10             	add    $0x10,%esp
			break;
f012ece9:	e9 bc 00 00 00       	jmp    f012edaa <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012ecee:	83 ec 08             	sub    $0x8,%esp
f012ecf1:	ff 75 0c             	pushl  0xc(%ebp)
f012ecf4:	6a 30                	push   $0x30
f012ecf6:	8b 45 08             	mov    0x8(%ebp),%eax
f012ecf9:	ff d0                	call   *%eax
f012ecfb:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012ecfe:	83 ec 08             	sub    $0x8,%esp
f012ed01:	ff 75 0c             	pushl  0xc(%ebp)
f012ed04:	6a 78                	push   $0x78
f012ed06:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed09:	ff d0                	call   *%eax
f012ed0b:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012ed0e:	8b 45 14             	mov    0x14(%ebp),%eax
f012ed11:	83 c0 04             	add    $0x4,%eax
f012ed14:	89 45 14             	mov    %eax,0x14(%ebp)
f012ed17:	8b 45 14             	mov    0x14(%ebp),%eax
f012ed1a:	83 e8 04             	sub    $0x4,%eax
f012ed1d:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012ed1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ed22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012ed29:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012ed30:	eb 1f                	jmp    f012ed51 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012ed32:	83 ec 08             	sub    $0x8,%esp
f012ed35:	ff 75 e8             	pushl  -0x18(%ebp)
f012ed38:	8d 45 14             	lea    0x14(%ebp),%eax
f012ed3b:	50                   	push   %eax
f012ed3c:	e8 e7 fb ff ff       	call   f012e928 <getuint>
f012ed41:	83 c4 10             	add    $0x10,%esp
f012ed44:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ed47:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012ed4a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012ed51:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012ed55:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ed58:	83 ec 04             	sub    $0x4,%esp
f012ed5b:	52                   	push   %edx
f012ed5c:	ff 75 e4             	pushl  -0x1c(%ebp)
f012ed5f:	50                   	push   %eax
f012ed60:	ff 75 f4             	pushl  -0xc(%ebp)
f012ed63:	ff 75 f0             	pushl  -0x10(%ebp)
f012ed66:	ff 75 0c             	pushl  0xc(%ebp)
f012ed69:	ff 75 08             	pushl  0x8(%ebp)
f012ed6c:	e8 00 fb ff ff       	call   f012e871 <printnum>
f012ed71:	83 c4 20             	add    $0x20,%esp
			break;
f012ed74:	eb 34                	jmp    f012edaa <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012ed76:	83 ec 08             	sub    $0x8,%esp
f012ed79:	ff 75 0c             	pushl  0xc(%ebp)
f012ed7c:	53                   	push   %ebx
f012ed7d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed80:	ff d0                	call   *%eax
f012ed82:	83 c4 10             	add    $0x10,%esp
			break;
f012ed85:	eb 23                	jmp    f012edaa <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012ed87:	83 ec 08             	sub    $0x8,%esp
f012ed8a:	ff 75 0c             	pushl  0xc(%ebp)
f012ed8d:	6a 25                	push   $0x25
f012ed8f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed92:	ff d0                	call   *%eax
f012ed94:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012ed97:	ff 4d 10             	decl   0x10(%ebp)
f012ed9a:	eb 03                	jmp    f012ed9f <vprintfmt+0x3b1>
f012ed9c:	ff 4d 10             	decl   0x10(%ebp)
f012ed9f:	8b 45 10             	mov    0x10(%ebp),%eax
f012eda2:	48                   	dec    %eax
f012eda3:	8a 00                	mov    (%eax),%al
f012eda5:	3c 25                	cmp    $0x25,%al
f012eda7:	75 f3                	jne    f012ed9c <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012eda9:	90                   	nop
		}
	}
f012edaa:	e9 47 fc ff ff       	jmp    f012e9f6 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012edaf:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012edb0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012edb3:	5b                   	pop    %ebx
f012edb4:	5e                   	pop    %esi
f012edb5:	5d                   	pop    %ebp
f012edb6:	c3                   	ret    

f012edb7 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012edb7:	55                   	push   %ebp
f012edb8:	89 e5                	mov    %esp,%ebp
f012edba:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012edbd:	8d 45 10             	lea    0x10(%ebp),%eax
f012edc0:	83 c0 04             	add    $0x4,%eax
f012edc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012edc6:	8b 45 10             	mov    0x10(%ebp),%eax
f012edc9:	ff 75 f4             	pushl  -0xc(%ebp)
f012edcc:	50                   	push   %eax
f012edcd:	ff 75 0c             	pushl  0xc(%ebp)
f012edd0:	ff 75 08             	pushl  0x8(%ebp)
f012edd3:	e8 16 fc ff ff       	call   f012e9ee <vprintfmt>
f012edd8:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012eddb:	90                   	nop
f012eddc:	c9                   	leave  
f012eddd:	c3                   	ret    

f012edde <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012edde:	55                   	push   %ebp
f012eddf:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012ede1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ede4:	8b 40 08             	mov    0x8(%eax),%eax
f012ede7:	8d 50 01             	lea    0x1(%eax),%edx
f012edea:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eded:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012edf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012edf3:	8b 10                	mov    (%eax),%edx
f012edf5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012edf8:	8b 40 04             	mov    0x4(%eax),%eax
f012edfb:	39 c2                	cmp    %eax,%edx
f012edfd:	73 12                	jae    f012ee11 <sprintputch+0x33>
		*b->buf++ = ch;
f012edff:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ee02:	8b 00                	mov    (%eax),%eax
f012ee04:	8d 48 01             	lea    0x1(%eax),%ecx
f012ee07:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ee0a:	89 0a                	mov    %ecx,(%edx)
f012ee0c:	8b 55 08             	mov    0x8(%ebp),%edx
f012ee0f:	88 10                	mov    %dl,(%eax)
}
f012ee11:	90                   	nop
f012ee12:	5d                   	pop    %ebp
f012ee13:	c3                   	ret    

f012ee14 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012ee14:	55                   	push   %ebp
f012ee15:	89 e5                	mov    %esp,%ebp
f012ee17:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012ee1a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012ee20:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ee23:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ee26:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee29:	01 d0                	add    %edx,%eax
f012ee2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ee2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012ee35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ee39:	74 06                	je     f012ee41 <vsnprintf+0x2d>
f012ee3b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ee3f:	7f 07                	jg     f012ee48 <vsnprintf+0x34>
		return -E_INVAL;
f012ee41:	b8 03 00 00 00       	mov    $0x3,%eax
f012ee46:	eb 20                	jmp    f012ee68 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012ee48:	ff 75 14             	pushl  0x14(%ebp)
f012ee4b:	ff 75 10             	pushl  0x10(%ebp)
f012ee4e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012ee51:	50                   	push   %eax
f012ee52:	68 de ed 12 f0       	push   $0xf012edde
f012ee57:	e8 92 fb ff ff       	call   f012e9ee <vprintfmt>
f012ee5c:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012ee5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ee62:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012ee65:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012ee68:	c9                   	leave  
f012ee69:	c3                   	ret    

f012ee6a <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012ee6a:	55                   	push   %ebp
f012ee6b:	89 e5                	mov    %esp,%ebp
f012ee6d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012ee70:	8d 45 10             	lea    0x10(%ebp),%eax
f012ee73:	83 c0 04             	add    $0x4,%eax
f012ee76:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012ee79:	8b 45 10             	mov    0x10(%ebp),%eax
f012ee7c:	ff 75 f4             	pushl  -0xc(%ebp)
f012ee7f:	50                   	push   %eax
f012ee80:	ff 75 0c             	pushl  0xc(%ebp)
f012ee83:	ff 75 08             	pushl  0x8(%ebp)
f012ee86:	e8 89 ff ff ff       	call   f012ee14 <vsnprintf>
f012ee8b:	83 c4 10             	add    $0x10,%esp
f012ee8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012ee91:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012ee94:	c9                   	leave  
f012ee95:	c3                   	ret    

f012ee96 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012ee96:	55                   	push   %ebp
f012ee97:	89 e5                	mov    %esp,%ebp
f012ee99:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012ee9c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012eea0:	74 13                	je     f012eeb5 <readline+0x1f>
		cprintf("%s", prompt);
f012eea2:	83 ec 08             	sub    $0x8,%esp
f012eea5:	ff 75 08             	pushl  0x8(%ebp)
f012eea8:	68 d0 ba 13 f0       	push   $0xf013bad0
f012eead:	e8 7f 1f fd ff       	call   f0100e31 <cprintf>
f012eeb2:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012eeb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012eebc:	83 ec 0c             	sub    $0xc,%esp
f012eebf:	6a 00                	push   $0x0
f012eec1:	e8 14 1f fd ff       	call   f0100dda <iscons>
f012eec6:	83 c4 10             	add    $0x10,%esp
f012eec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012eecc:	e8 f0 1e fd ff       	call   f0100dc1 <getchar>
f012eed1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012eed4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012eed8:	79 22                	jns    f012eefc <readline+0x66>
			if (c != -E_EOF)
f012eeda:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012eede:	0f 84 ad 00 00 00    	je     f012ef91 <readline+0xfb>
				cprintf("read error: %e\n", c);
f012eee4:	83 ec 08             	sub    $0x8,%esp
f012eee7:	ff 75 ec             	pushl  -0x14(%ebp)
f012eeea:	68 d3 ba 13 f0       	push   $0xf013bad3
f012eeef:	e8 3d 1f fd ff       	call   f0100e31 <cprintf>
f012eef4:	83 c4 10             	add    $0x10,%esp
			return;
f012eef7:	e9 95 00 00 00       	jmp    f012ef91 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012eefc:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ef00:	7e 34                	jle    f012ef36 <readline+0xa0>
f012ef02:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ef09:	7f 2b                	jg     f012ef36 <readline+0xa0>
			if (echoing)
f012ef0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ef0f:	74 0e                	je     f012ef1f <readline+0x89>
				cputchar(c);
f012ef11:	83 ec 0c             	sub    $0xc,%esp
f012ef14:	ff 75 ec             	pushl  -0x14(%ebp)
f012ef17:	e8 8e 1e fd ff       	call   f0100daa <cputchar>
f012ef1c:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ef1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ef22:	8d 50 01             	lea    0x1(%eax),%edx
f012ef25:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ef28:	89 c2                	mov    %eax,%edx
f012ef2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef2d:	01 d0                	add    %edx,%eax
f012ef2f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ef32:	88 10                	mov    %dl,(%eax)
f012ef34:	eb 56                	jmp    f012ef8c <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012ef36:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ef3a:	75 1f                	jne    f012ef5b <readline+0xc5>
f012ef3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ef40:	7e 19                	jle    f012ef5b <readline+0xc5>
			if (echoing)
f012ef42:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ef46:	74 0e                	je     f012ef56 <readline+0xc0>
				cputchar(c);
f012ef48:	83 ec 0c             	sub    $0xc,%esp
f012ef4b:	ff 75 ec             	pushl  -0x14(%ebp)
f012ef4e:	e8 57 1e fd ff       	call   f0100daa <cputchar>
f012ef53:	83 c4 10             	add    $0x10,%esp

			i--;
f012ef56:	ff 4d f4             	decl   -0xc(%ebp)
f012ef59:	eb 31                	jmp    f012ef8c <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012ef5b:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ef5f:	74 0a                	je     f012ef6b <readline+0xd5>
f012ef61:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ef65:	0f 85 61 ff ff ff    	jne    f012eecc <readline+0x36>
			if (echoing)
f012ef6b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ef6f:	74 0e                	je     f012ef7f <readline+0xe9>
				cputchar(c);
f012ef71:	83 ec 0c             	sub    $0xc,%esp
f012ef74:	ff 75 ec             	pushl  -0x14(%ebp)
f012ef77:	e8 2e 1e fd ff       	call   f0100daa <cputchar>
f012ef7c:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012ef7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ef82:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef85:	01 d0                	add    %edx,%eax
f012ef87:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012ef8a:	eb 06                	jmp    f012ef92 <readline+0xfc>
		}
	}
f012ef8c:	e9 3b ff ff ff       	jmp    f012eecc <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012ef91:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012ef92:	c9                   	leave  
f012ef93:	c3                   	ret    

f012ef94 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012ef94:	55                   	push   %ebp
f012ef95:	89 e5                	mov    %esp,%ebp
f012ef97:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012ef9a:	e8 47 dc fd ff       	call   f010cbe6 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012ef9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012efa3:	74 13                	je     f012efb8 <atomic_readline+0x24>
		cprintf("%s", prompt);
f012efa5:	83 ec 08             	sub    $0x8,%esp
f012efa8:	ff 75 08             	pushl  0x8(%ebp)
f012efab:	68 d0 ba 13 f0       	push   $0xf013bad0
f012efb0:	e8 7c 1e fd ff       	call   f0100e31 <cprintf>
f012efb5:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012efb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012efbf:	83 ec 0c             	sub    $0xc,%esp
f012efc2:	6a 00                	push   $0x0
f012efc4:	e8 11 1e fd ff       	call   f0100dda <iscons>
f012efc9:	83 c4 10             	add    $0x10,%esp
f012efcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012efcf:	e8 ed 1d fd ff       	call   f0100dc1 <getchar>
f012efd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012efd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012efdb:	79 23                	jns    f012f000 <atomic_readline+0x6c>
			if (c != -E_EOF)
f012efdd:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012efe1:	74 13                	je     f012eff6 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012efe3:	83 ec 08             	sub    $0x8,%esp
f012efe6:	ff 75 ec             	pushl  -0x14(%ebp)
f012efe9:	68 d3 ba 13 f0       	push   $0xf013bad3
f012efee:	e8 3e 1e fd ff       	call   f0100e31 <cprintf>
f012eff3:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012eff6:	e8 05 dc fd ff       	call   f010cc00 <sys_enable_interrupt>
			return;
f012effb:	e9 9a 00 00 00       	jmp    f012f09a <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012f000:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012f004:	7e 34                	jle    f012f03a <atomic_readline+0xa6>
f012f006:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012f00d:	7f 2b                	jg     f012f03a <atomic_readline+0xa6>
			if (echoing)
f012f00f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f013:	74 0e                	je     f012f023 <atomic_readline+0x8f>
				cputchar(c);
f012f015:	83 ec 0c             	sub    $0xc,%esp
f012f018:	ff 75 ec             	pushl  -0x14(%ebp)
f012f01b:	e8 8a 1d fd ff       	call   f0100daa <cputchar>
f012f020:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012f023:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f026:	8d 50 01             	lea    0x1(%eax),%edx
f012f029:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012f02c:	89 c2                	mov    %eax,%edx
f012f02e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f031:	01 d0                	add    %edx,%eax
f012f033:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f036:	88 10                	mov    %dl,(%eax)
f012f038:	eb 5b                	jmp    f012f095 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f012f03a:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012f03e:	75 1f                	jne    f012f05f <atomic_readline+0xcb>
f012f040:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f044:	7e 19                	jle    f012f05f <atomic_readline+0xcb>
			if (echoing)
f012f046:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f04a:	74 0e                	je     f012f05a <atomic_readline+0xc6>
				cputchar(c);
f012f04c:	83 ec 0c             	sub    $0xc,%esp
f012f04f:	ff 75 ec             	pushl  -0x14(%ebp)
f012f052:	e8 53 1d fd ff       	call   f0100daa <cputchar>
f012f057:	83 c4 10             	add    $0x10,%esp
			i--;
f012f05a:	ff 4d f4             	decl   -0xc(%ebp)
f012f05d:	eb 36                	jmp    f012f095 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f012f05f:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012f063:	74 0a                	je     f012f06f <atomic_readline+0xdb>
f012f065:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012f069:	0f 85 60 ff ff ff    	jne    f012efcf <atomic_readline+0x3b>
			if (echoing)
f012f06f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f073:	74 0e                	je     f012f083 <atomic_readline+0xef>
				cputchar(c);
f012f075:	83 ec 0c             	sub    $0xc,%esp
f012f078:	ff 75 ec             	pushl  -0x14(%ebp)
f012f07b:	e8 2a 1d fd ff       	call   f0100daa <cputchar>
f012f080:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f012f083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f086:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f089:	01 d0                	add    %edx,%eax
f012f08b:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012f08e:	e8 6d db fd ff       	call   f010cc00 <sys_enable_interrupt>
			return;
f012f093:	eb 05                	jmp    f012f09a <atomic_readline+0x106>
		}
	}
f012f095:	e9 35 ff ff ff       	jmp    f012efcf <atomic_readline+0x3b>
}
f012f09a:	c9                   	leave  
f012f09b:	c3                   	ret    

f012f09c <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f012f09c:	55                   	push   %ebp
f012f09d:	89 e5                	mov    %esp,%ebp
f012f09f:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012f0a2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f0a9:	eb 06                	jmp    f012f0b1 <strlen+0x15>
		n++;
f012f0ab:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012f0ae:	ff 45 08             	incl   0x8(%ebp)
f012f0b1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0b4:	8a 00                	mov    (%eax),%al
f012f0b6:	84 c0                	test   %al,%al
f012f0b8:	75 f1                	jne    f012f0ab <strlen+0xf>
		n++;
	return n;
f012f0ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f0bd:	c9                   	leave  
f012f0be:	c3                   	ret    

f012f0bf <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012f0bf:	55                   	push   %ebp
f012f0c0:	89 e5                	mov    %esp,%ebp
f012f0c2:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012f0c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f0cc:	eb 09                	jmp    f012f0d7 <strnlen+0x18>
		n++;
f012f0ce:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012f0d1:	ff 45 08             	incl   0x8(%ebp)
f012f0d4:	ff 4d 0c             	decl   0xc(%ebp)
f012f0d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f0db:	74 09                	je     f012f0e6 <strnlen+0x27>
f012f0dd:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0e0:	8a 00                	mov    (%eax),%al
f012f0e2:	84 c0                	test   %al,%al
f012f0e4:	75 e8                	jne    f012f0ce <strnlen+0xf>
		n++;
	return n;
f012f0e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f0e9:	c9                   	leave  
f012f0ea:	c3                   	ret    

f012f0eb <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012f0eb:	55                   	push   %ebp
f012f0ec:	89 e5                	mov    %esp,%ebp
f012f0ee:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012f0f1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012f0f7:	90                   	nop
f012f0f8:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0fb:	8d 50 01             	lea    0x1(%eax),%edx
f012f0fe:	89 55 08             	mov    %edx,0x8(%ebp)
f012f101:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f104:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f107:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012f10a:	8a 12                	mov    (%edx),%dl
f012f10c:	88 10                	mov    %dl,(%eax)
f012f10e:	8a 00                	mov    (%eax),%al
f012f110:	84 c0                	test   %al,%al
f012f112:	75 e4                	jne    f012f0f8 <strcpy+0xd>
		/* do nothing */;
	return ret;
f012f114:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f117:	c9                   	leave  
f012f118:	c3                   	ret    

f012f119 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012f119:	55                   	push   %ebp
f012f11a:	89 e5                	mov    %esp,%ebp
f012f11c:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012f11f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f122:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f012f125:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f12c:	eb 1f                	jmp    f012f14d <strncpy+0x34>
		*dst++ = *src;
f012f12e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f131:	8d 50 01             	lea    0x1(%eax),%edx
f012f134:	89 55 08             	mov    %edx,0x8(%ebp)
f012f137:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f13a:	8a 12                	mov    (%edx),%dl
f012f13c:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012f13e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f141:	8a 00                	mov    (%eax),%al
f012f143:	84 c0                	test   %al,%al
f012f145:	74 03                	je     f012f14a <strncpy+0x31>
			src++;
f012f147:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012f14a:	ff 45 fc             	incl   -0x4(%ebp)
f012f14d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f150:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f153:	72 d9                	jb     f012f12e <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f012f155:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f158:	c9                   	leave  
f012f159:	c3                   	ret    

f012f15a <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012f15a:	55                   	push   %ebp
f012f15b:	89 e5                	mov    %esp,%ebp
f012f15d:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012f160:	8b 45 08             	mov    0x8(%ebp),%eax
f012f163:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f012f166:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f16a:	74 30                	je     f012f19c <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012f16c:	eb 16                	jmp    f012f184 <strlcpy+0x2a>
			*dst++ = *src++;
f012f16e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f171:	8d 50 01             	lea    0x1(%eax),%edx
f012f174:	89 55 08             	mov    %edx,0x8(%ebp)
f012f177:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f17a:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f17d:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012f180:	8a 12                	mov    (%edx),%dl
f012f182:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f012f184:	ff 4d 10             	decl   0x10(%ebp)
f012f187:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f18b:	74 09                	je     f012f196 <strlcpy+0x3c>
f012f18d:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f190:	8a 00                	mov    (%eax),%al
f012f192:	84 c0                	test   %al,%al
f012f194:	75 d8                	jne    f012f16e <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f012f196:	8b 45 08             	mov    0x8(%ebp),%eax
f012f199:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012f19c:	8b 55 08             	mov    0x8(%ebp),%edx
f012f19f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f1a2:	29 c2                	sub    %eax,%edx
f012f1a4:	89 d0                	mov    %edx,%eax
}
f012f1a6:	c9                   	leave  
f012f1a7:	c3                   	ret    

f012f1a8 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012f1a8:	55                   	push   %ebp
f012f1a9:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012f1ab:	eb 06                	jmp    f012f1b3 <strcmp+0xb>
		p++, q++;
f012f1ad:	ff 45 08             	incl   0x8(%ebp)
f012f1b0:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012f1b3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1b6:	8a 00                	mov    (%eax),%al
f012f1b8:	84 c0                	test   %al,%al
f012f1ba:	74 0e                	je     f012f1ca <strcmp+0x22>
f012f1bc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1bf:	8a 10                	mov    (%eax),%dl
f012f1c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f1c4:	8a 00                	mov    (%eax),%al
f012f1c6:	38 c2                	cmp    %al,%dl
f012f1c8:	74 e3                	je     f012f1ad <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012f1ca:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1cd:	8a 00                	mov    (%eax),%al
f012f1cf:	0f b6 d0             	movzbl %al,%edx
f012f1d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f1d5:	8a 00                	mov    (%eax),%al
f012f1d7:	0f b6 c0             	movzbl %al,%eax
f012f1da:	29 c2                	sub    %eax,%edx
f012f1dc:	89 d0                	mov    %edx,%eax
}
f012f1de:	5d                   	pop    %ebp
f012f1df:	c3                   	ret    

f012f1e0 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012f1e0:	55                   	push   %ebp
f012f1e1:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012f1e3:	eb 09                	jmp    f012f1ee <strncmp+0xe>
		n--, p++, q++;
f012f1e5:	ff 4d 10             	decl   0x10(%ebp)
f012f1e8:	ff 45 08             	incl   0x8(%ebp)
f012f1eb:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012f1ee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f1f2:	74 17                	je     f012f20b <strncmp+0x2b>
f012f1f4:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1f7:	8a 00                	mov    (%eax),%al
f012f1f9:	84 c0                	test   %al,%al
f012f1fb:	74 0e                	je     f012f20b <strncmp+0x2b>
f012f1fd:	8b 45 08             	mov    0x8(%ebp),%eax
f012f200:	8a 10                	mov    (%eax),%dl
f012f202:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f205:	8a 00                	mov    (%eax),%al
f012f207:	38 c2                	cmp    %al,%dl
f012f209:	74 da                	je     f012f1e5 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012f20b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f20f:	75 07                	jne    f012f218 <strncmp+0x38>
		return 0;
f012f211:	b8 00 00 00 00       	mov    $0x0,%eax
f012f216:	eb 14                	jmp    f012f22c <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012f218:	8b 45 08             	mov    0x8(%ebp),%eax
f012f21b:	8a 00                	mov    (%eax),%al
f012f21d:	0f b6 d0             	movzbl %al,%edx
f012f220:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f223:	8a 00                	mov    (%eax),%al
f012f225:	0f b6 c0             	movzbl %al,%eax
f012f228:	29 c2                	sub    %eax,%edx
f012f22a:	89 d0                	mov    %edx,%eax
}
f012f22c:	5d                   	pop    %ebp
f012f22d:	c3                   	ret    

f012f22e <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f012f22e:	55                   	push   %ebp
f012f22f:	89 e5                	mov    %esp,%ebp
f012f231:	83 ec 04             	sub    $0x4,%esp
f012f234:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f237:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012f23a:	eb 12                	jmp    f012f24e <strchr+0x20>
		if (*s == c)
f012f23c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f23f:	8a 00                	mov    (%eax),%al
f012f241:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012f244:	75 05                	jne    f012f24b <strchr+0x1d>
			return (char *) s;
f012f246:	8b 45 08             	mov    0x8(%ebp),%eax
f012f249:	eb 11                	jmp    f012f25c <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012f24b:	ff 45 08             	incl   0x8(%ebp)
f012f24e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f251:	8a 00                	mov    (%eax),%al
f012f253:	84 c0                	test   %al,%al
f012f255:	75 e5                	jne    f012f23c <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012f257:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f25c:	c9                   	leave  
f012f25d:	c3                   	ret    

f012f25e <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f012f25e:	55                   	push   %ebp
f012f25f:	89 e5                	mov    %esp,%ebp
f012f261:	83 ec 04             	sub    $0x4,%esp
f012f264:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f267:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012f26a:	eb 0d                	jmp    f012f279 <strfind+0x1b>
		if (*s == c)
f012f26c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f26f:	8a 00                	mov    (%eax),%al
f012f271:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012f274:	74 0e                	je     f012f284 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f012f276:	ff 45 08             	incl   0x8(%ebp)
f012f279:	8b 45 08             	mov    0x8(%ebp),%eax
f012f27c:	8a 00                	mov    (%eax),%al
f012f27e:	84 c0                	test   %al,%al
f012f280:	75 ea                	jne    f012f26c <strfind+0xe>
f012f282:	eb 01                	jmp    f012f285 <strfind+0x27>
		if (*s == c)
			break;
f012f284:	90                   	nop
	return (char *) s;
f012f285:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f288:	c9                   	leave  
f012f289:	c3                   	ret    

f012f28a <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012f28a:	55                   	push   %ebp
f012f28b:	89 e5                	mov    %esp,%ebp
f012f28d:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012f290:	8b 45 08             	mov    0x8(%ebp),%eax
f012f293:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f012f296:	8b 45 10             	mov    0x10(%ebp),%eax
f012f299:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012f29c:	eb 0e                	jmp    f012f2ac <memset+0x22>
		*p++ = c;
f012f29e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f2a1:	8d 50 01             	lea    0x1(%eax),%edx
f012f2a4:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f2a7:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f2aa:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012f2ac:	ff 4d f8             	decl   -0x8(%ebp)
f012f2af:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012f2b3:	79 e9                	jns    f012f29e <memset+0x14>
		*p++ = c;

	return v;
f012f2b5:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f2b8:	c9                   	leave  
f012f2b9:	c3                   	ret    

f012f2ba <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012f2ba:	55                   	push   %ebp
f012f2bb:	89 e5                	mov    %esp,%ebp
f012f2bd:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f2c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f2c6:	8b 45 08             	mov    0x8(%ebp),%eax
f012f2c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012f2cc:	eb 16                	jmp    f012f2e4 <memcpy+0x2a>
		*d++ = *s++;
f012f2ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f2d1:	8d 50 01             	lea    0x1(%eax),%edx
f012f2d4:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f2d7:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f2da:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f2dd:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f2e0:	8a 12                	mov    (%edx),%dl
f012f2e2:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f012f2e4:	8b 45 10             	mov    0x10(%ebp),%eax
f012f2e7:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f2ea:	89 55 10             	mov    %edx,0x10(%ebp)
f012f2ed:	85 c0                	test   %eax,%eax
f012f2ef:	75 dd                	jne    f012f2ce <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012f2f1:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f2f4:	c9                   	leave  
f012f2f5:	c3                   	ret    

f012f2f6 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f012f2f6:	55                   	push   %ebp
f012f2f7:	89 e5                	mov    %esp,%ebp
f012f2f9:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f2fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f302:	8b 45 08             	mov    0x8(%ebp),%eax
f012f305:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012f308:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f30b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f30e:	73 50                	jae    f012f360 <memmove+0x6a>
f012f310:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f313:	8b 45 10             	mov    0x10(%ebp),%eax
f012f316:	01 d0                	add    %edx,%eax
f012f318:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f31b:	76 43                	jbe    f012f360 <memmove+0x6a>
		s += n;
f012f31d:	8b 45 10             	mov    0x10(%ebp),%eax
f012f320:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f012f323:	8b 45 10             	mov    0x10(%ebp),%eax
f012f326:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012f329:	eb 10                	jmp    f012f33b <memmove+0x45>
			*--d = *--s;
f012f32b:	ff 4d f8             	decl   -0x8(%ebp)
f012f32e:	ff 4d fc             	decl   -0x4(%ebp)
f012f331:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f334:	8a 10                	mov    (%eax),%dl
f012f336:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f339:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012f33b:	8b 45 10             	mov    0x10(%ebp),%eax
f012f33e:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f341:	89 55 10             	mov    %edx,0x10(%ebp)
f012f344:	85 c0                	test   %eax,%eax
f012f346:	75 e3                	jne    f012f32b <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012f348:	eb 23                	jmp    f012f36d <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012f34a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f34d:	8d 50 01             	lea    0x1(%eax),%edx
f012f350:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f353:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f356:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f359:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f35c:	8a 12                	mov    (%edx),%dl
f012f35e:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f012f360:	8b 45 10             	mov    0x10(%ebp),%eax
f012f363:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f366:	89 55 10             	mov    %edx,0x10(%ebp)
f012f369:	85 c0                	test   %eax,%eax
f012f36b:	75 dd                	jne    f012f34a <memmove+0x54>
			*d++ = *s++;

	return dst;
f012f36d:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f370:	c9                   	leave  
f012f371:	c3                   	ret    

f012f372 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012f372:	55                   	push   %ebp
f012f373:	89 e5                	mov    %esp,%ebp
f012f375:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012f378:	8b 45 08             	mov    0x8(%ebp),%eax
f012f37b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012f37e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f381:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f012f384:	eb 2a                	jmp    f012f3b0 <memcmp+0x3e>
		if (*s1 != *s2)
f012f386:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f389:	8a 10                	mov    (%eax),%dl
f012f38b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f38e:	8a 00                	mov    (%eax),%al
f012f390:	38 c2                	cmp    %al,%dl
f012f392:	74 16                	je     f012f3aa <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f012f394:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f397:	8a 00                	mov    (%eax),%al
f012f399:	0f b6 d0             	movzbl %al,%edx
f012f39c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f39f:	8a 00                	mov    (%eax),%al
f012f3a1:	0f b6 c0             	movzbl %al,%eax
f012f3a4:	29 c2                	sub    %eax,%edx
f012f3a6:	89 d0                	mov    %edx,%eax
f012f3a8:	eb 18                	jmp    f012f3c2 <memcmp+0x50>
		s1++, s2++;
f012f3aa:	ff 45 fc             	incl   -0x4(%ebp)
f012f3ad:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012f3b0:	8b 45 10             	mov    0x10(%ebp),%eax
f012f3b3:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f3b6:	89 55 10             	mov    %edx,0x10(%ebp)
f012f3b9:	85 c0                	test   %eax,%eax
f012f3bb:	75 c9                	jne    f012f386 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012f3bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f3c2:	c9                   	leave  
f012f3c3:	c3                   	ret    

f012f3c4 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f012f3c4:	55                   	push   %ebp
f012f3c5:	89 e5                	mov    %esp,%ebp
f012f3c7:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012f3ca:	8b 55 08             	mov    0x8(%ebp),%edx
f012f3cd:	8b 45 10             	mov    0x10(%ebp),%eax
f012f3d0:	01 d0                	add    %edx,%eax
f012f3d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f012f3d5:	eb 15                	jmp    f012f3ec <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f012f3d7:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3da:	8a 00                	mov    (%eax),%al
f012f3dc:	0f b6 d0             	movzbl %al,%edx
f012f3df:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f3e2:	0f b6 c0             	movzbl %al,%eax
f012f3e5:	39 c2                	cmp    %eax,%edx
f012f3e7:	74 0d                	je     f012f3f6 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012f3e9:	ff 45 08             	incl   0x8(%ebp)
f012f3ec:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3ef:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012f3f2:	72 e3                	jb     f012f3d7 <memfind+0x13>
f012f3f4:	eb 01                	jmp    f012f3f7 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f012f3f6:	90                   	nop
	return (void *) s;
f012f3f7:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f3fa:	c9                   	leave  
f012f3fb:	c3                   	ret    

f012f3fc <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012f3fc:	55                   	push   %ebp
f012f3fd:	89 e5                	mov    %esp,%ebp
f012f3ff:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012f402:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012f409:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f410:	eb 03                	jmp    f012f415 <strtol+0x19>
		s++;
f012f412:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f415:	8b 45 08             	mov    0x8(%ebp),%eax
f012f418:	8a 00                	mov    (%eax),%al
f012f41a:	3c 20                	cmp    $0x20,%al
f012f41c:	74 f4                	je     f012f412 <strtol+0x16>
f012f41e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f421:	8a 00                	mov    (%eax),%al
f012f423:	3c 09                	cmp    $0x9,%al
f012f425:	74 eb                	je     f012f412 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012f427:	8b 45 08             	mov    0x8(%ebp),%eax
f012f42a:	8a 00                	mov    (%eax),%al
f012f42c:	3c 2b                	cmp    $0x2b,%al
f012f42e:	75 05                	jne    f012f435 <strtol+0x39>
		s++;
f012f430:	ff 45 08             	incl   0x8(%ebp)
f012f433:	eb 13                	jmp    f012f448 <strtol+0x4c>
	else if (*s == '-')
f012f435:	8b 45 08             	mov    0x8(%ebp),%eax
f012f438:	8a 00                	mov    (%eax),%al
f012f43a:	3c 2d                	cmp    $0x2d,%al
f012f43c:	75 0a                	jne    f012f448 <strtol+0x4c>
		s++, neg = 1;
f012f43e:	ff 45 08             	incl   0x8(%ebp)
f012f441:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012f448:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f44c:	74 06                	je     f012f454 <strtol+0x58>
f012f44e:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f012f452:	75 20                	jne    f012f474 <strtol+0x78>
f012f454:	8b 45 08             	mov    0x8(%ebp),%eax
f012f457:	8a 00                	mov    (%eax),%al
f012f459:	3c 30                	cmp    $0x30,%al
f012f45b:	75 17                	jne    f012f474 <strtol+0x78>
f012f45d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f460:	40                   	inc    %eax
f012f461:	8a 00                	mov    (%eax),%al
f012f463:	3c 78                	cmp    $0x78,%al
f012f465:	75 0d                	jne    f012f474 <strtol+0x78>
		s += 2, base = 16;
f012f467:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012f46b:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012f472:	eb 28                	jmp    f012f49c <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f012f474:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f478:	75 15                	jne    f012f48f <strtol+0x93>
f012f47a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f47d:	8a 00                	mov    (%eax),%al
f012f47f:	3c 30                	cmp    $0x30,%al
f012f481:	75 0c                	jne    f012f48f <strtol+0x93>
		s++, base = 8;
f012f483:	ff 45 08             	incl   0x8(%ebp)
f012f486:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012f48d:	eb 0d                	jmp    f012f49c <strtol+0xa0>
	else if (base == 0)
f012f48f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f493:	75 07                	jne    f012f49c <strtol+0xa0>
		base = 10;
f012f495:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012f49c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f49f:	8a 00                	mov    (%eax),%al
f012f4a1:	3c 2f                	cmp    $0x2f,%al
f012f4a3:	7e 19                	jle    f012f4be <strtol+0xc2>
f012f4a5:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4a8:	8a 00                	mov    (%eax),%al
f012f4aa:	3c 39                	cmp    $0x39,%al
f012f4ac:	7f 10                	jg     f012f4be <strtol+0xc2>
			dig = *s - '0';
f012f4ae:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4b1:	8a 00                	mov    (%eax),%al
f012f4b3:	0f be c0             	movsbl %al,%eax
f012f4b6:	83 e8 30             	sub    $0x30,%eax
f012f4b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f4bc:	eb 42                	jmp    f012f500 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012f4be:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4c1:	8a 00                	mov    (%eax),%al
f012f4c3:	3c 60                	cmp    $0x60,%al
f012f4c5:	7e 19                	jle    f012f4e0 <strtol+0xe4>
f012f4c7:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4ca:	8a 00                	mov    (%eax),%al
f012f4cc:	3c 7a                	cmp    $0x7a,%al
f012f4ce:	7f 10                	jg     f012f4e0 <strtol+0xe4>
			dig = *s - 'a' + 10;
f012f4d0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4d3:	8a 00                	mov    (%eax),%al
f012f4d5:	0f be c0             	movsbl %al,%eax
f012f4d8:	83 e8 57             	sub    $0x57,%eax
f012f4db:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f4de:	eb 20                	jmp    f012f500 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012f4e0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4e3:	8a 00                	mov    (%eax),%al
f012f4e5:	3c 40                	cmp    $0x40,%al
f012f4e7:	7e 39                	jle    f012f522 <strtol+0x126>
f012f4e9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4ec:	8a 00                	mov    (%eax),%al
f012f4ee:	3c 5a                	cmp    $0x5a,%al
f012f4f0:	7f 30                	jg     f012f522 <strtol+0x126>
			dig = *s - 'A' + 10;
f012f4f2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4f5:	8a 00                	mov    (%eax),%al
f012f4f7:	0f be c0             	movsbl %al,%eax
f012f4fa:	83 e8 37             	sub    $0x37,%eax
f012f4fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012f500:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f503:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f506:	7d 19                	jge    f012f521 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012f508:	ff 45 08             	incl   0x8(%ebp)
f012f50b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f50e:	0f af 45 10          	imul   0x10(%ebp),%eax
f012f512:	89 c2                	mov    %eax,%edx
f012f514:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f517:	01 d0                	add    %edx,%eax
f012f519:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012f51c:	e9 7b ff ff ff       	jmp    f012f49c <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f012f521:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f012f522:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f526:	74 08                	je     f012f530 <strtol+0x134>
		*endptr = (char *) s;
f012f528:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f52b:	8b 55 08             	mov    0x8(%ebp),%edx
f012f52e:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f012f530:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f534:	74 07                	je     f012f53d <strtol+0x141>
f012f536:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f539:	f7 d8                	neg    %eax
f012f53b:	eb 03                	jmp    f012f540 <strtol+0x144>
f012f53d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f540:	c9                   	leave  
f012f541:	c3                   	ret    

f012f542 <ltostr>:

void
ltostr(long value, char *str)
{
f012f542:	55                   	push   %ebp
f012f543:	89 e5                	mov    %esp,%ebp
f012f545:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012f548:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f012f54f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f012f556:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f55a:	79 13                	jns    f012f56f <ltostr+0x2d>
	{
		neg = 1;
f012f55c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f012f563:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f566:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012f569:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012f56c:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012f56f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f572:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012f577:	99                   	cltd   
f012f578:	f7 f9                	idiv   %ecx
f012f57a:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f012f57d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f580:	8d 50 01             	lea    0x1(%eax),%edx
f012f583:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f586:	89 c2                	mov    %eax,%edx
f012f588:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f58b:	01 d0                	add    %edx,%eax
f012f58d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f590:	83 c2 30             	add    $0x30,%edx
f012f593:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f012f595:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f598:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f59d:	f7 e9                	imul   %ecx
f012f59f:	c1 fa 02             	sar    $0x2,%edx
f012f5a2:	89 c8                	mov    %ecx,%eax
f012f5a4:	c1 f8 1f             	sar    $0x1f,%eax
f012f5a7:	29 c2                	sub    %eax,%edx
f012f5a9:	89 d0                	mov    %edx,%eax
f012f5ab:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f012f5ae:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f5b1:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f5b6:	f7 e9                	imul   %ecx
f012f5b8:	c1 fa 02             	sar    $0x2,%edx
f012f5bb:	89 c8                	mov    %ecx,%eax
f012f5bd:	c1 f8 1f             	sar    $0x1f,%eax
f012f5c0:	29 c2                	sub    %eax,%edx
f012f5c2:	89 d0                	mov    %edx,%eax
f012f5c4:	c1 e0 02             	shl    $0x2,%eax
f012f5c7:	01 d0                	add    %edx,%eax
f012f5c9:	01 c0                	add    %eax,%eax
f012f5cb:	29 c1                	sub    %eax,%ecx
f012f5cd:	89 ca                	mov    %ecx,%edx
f012f5cf:	85 d2                	test   %edx,%edx
f012f5d1:	75 9c                	jne    f012f56f <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012f5d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f012f5da:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f5dd:	48                   	dec    %eax
f012f5de:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012f5e1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f5e5:	74 3d                	je     f012f624 <ltostr+0xe2>
		start = 1 ;
f012f5e7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012f5ee:	eb 34                	jmp    f012f624 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f012f5f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f5f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f5f6:	01 d0                	add    %edx,%eax
f012f5f8:	8a 00                	mov    (%eax),%al
f012f5fa:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012f5fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f600:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f603:	01 c2                	add    %eax,%edx
f012f605:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f012f608:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f60b:	01 c8                	add    %ecx,%eax
f012f60d:	8a 00                	mov    (%eax),%al
f012f60f:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012f611:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f614:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f617:	01 c2                	add    %eax,%edx
f012f619:	8a 45 eb             	mov    -0x15(%ebp),%al
f012f61c:	88 02                	mov    %al,(%edx)
		start++ ;
f012f61e:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012f621:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012f624:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f627:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f62a:	7c c4                	jl     f012f5f0 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f012f62c:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012f62f:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f632:	01 d0                	add    %edx,%eax
f012f634:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012f637:	90                   	nop
f012f638:	c9                   	leave  
f012f639:	c3                   	ret    

f012f63a <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012f63a:	55                   	push   %ebp
f012f63b:	89 e5                	mov    %esp,%ebp
f012f63d:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f012f640:	ff 75 08             	pushl  0x8(%ebp)
f012f643:	e8 54 fa ff ff       	call   f012f09c <strlen>
f012f648:	83 c4 04             	add    $0x4,%esp
f012f64b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f012f64e:	ff 75 0c             	pushl  0xc(%ebp)
f012f651:	e8 46 fa ff ff       	call   f012f09c <strlen>
f012f656:	83 c4 04             	add    $0x4,%esp
f012f659:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f012f65c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f012f663:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f66a:	eb 17                	jmp    f012f683 <strcconcat+0x49>
		final[s] = str1[s] ;
f012f66c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f66f:	8b 45 10             	mov    0x10(%ebp),%eax
f012f672:	01 c2                	add    %eax,%edx
f012f674:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012f677:	8b 45 08             	mov    0x8(%ebp),%eax
f012f67a:	01 c8                	add    %ecx,%eax
f012f67c:	8a 00                	mov    (%eax),%al
f012f67e:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f012f680:	ff 45 fc             	incl   -0x4(%ebp)
f012f683:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f686:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f689:	7c e1                	jl     f012f66c <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012f68b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f012f692:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012f699:	eb 1f                	jmp    f012f6ba <strcconcat+0x80>
		final[s++] = str2[i] ;
f012f69b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f69e:	8d 50 01             	lea    0x1(%eax),%edx
f012f6a1:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f6a4:	89 c2                	mov    %eax,%edx
f012f6a6:	8b 45 10             	mov    0x10(%ebp),%eax
f012f6a9:	01 c2                	add    %eax,%edx
f012f6ab:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f012f6ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f6b1:	01 c8                	add    %ecx,%eax
f012f6b3:	8a 00                	mov    (%eax),%al
f012f6b5:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f012f6b7:	ff 45 f8             	incl   -0x8(%ebp)
f012f6ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f6bd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f6c0:	7c d9                	jl     f012f69b <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012f6c2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f6c5:	8b 45 10             	mov    0x10(%ebp),%eax
f012f6c8:	01 d0                	add    %edx,%eax
f012f6ca:	c6 00 00             	movb   $0x0,(%eax)
}
f012f6cd:	90                   	nop
f012f6ce:	c9                   	leave  
f012f6cf:	c3                   	ret    

f012f6d0 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f012f6d0:	55                   	push   %ebp
f012f6d1:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012f6d3:	8b 45 14             	mov    0x14(%ebp),%eax
f012f6d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f012f6dc:	8b 45 14             	mov    0x14(%ebp),%eax
f012f6df:	8b 00                	mov    (%eax),%eax
f012f6e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f6e8:	8b 45 10             	mov    0x10(%ebp),%eax
f012f6eb:	01 d0                	add    %edx,%eax
f012f6ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f6f3:	eb 0c                	jmp    f012f701 <strsplit+0x31>
			*string++ = 0;
f012f6f5:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6f8:	8d 50 01             	lea    0x1(%eax),%edx
f012f6fb:	89 55 08             	mov    %edx,0x8(%ebp)
f012f6fe:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f701:	8b 45 08             	mov    0x8(%ebp),%eax
f012f704:	8a 00                	mov    (%eax),%al
f012f706:	84 c0                	test   %al,%al
f012f708:	74 18                	je     f012f722 <strsplit+0x52>
f012f70a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f70d:	8a 00                	mov    (%eax),%al
f012f70f:	0f be c0             	movsbl %al,%eax
f012f712:	50                   	push   %eax
f012f713:	ff 75 0c             	pushl  0xc(%ebp)
f012f716:	e8 13 fb ff ff       	call   f012f22e <strchr>
f012f71b:	83 c4 08             	add    $0x8,%esp
f012f71e:	85 c0                	test   %eax,%eax
f012f720:	75 d3                	jne    f012f6f5 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012f722:	8b 45 08             	mov    0x8(%ebp),%eax
f012f725:	8a 00                	mov    (%eax),%al
f012f727:	84 c0                	test   %al,%al
f012f729:	74 5a                	je     f012f785 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012f72b:	8b 45 14             	mov    0x14(%ebp),%eax
f012f72e:	8b 00                	mov    (%eax),%eax
f012f730:	83 f8 0f             	cmp    $0xf,%eax
f012f733:	75 07                	jne    f012f73c <strsplit+0x6c>
		{
			return 0;
f012f735:	b8 00 00 00 00       	mov    $0x0,%eax
f012f73a:	eb 66                	jmp    f012f7a2 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f012f73c:	8b 45 14             	mov    0x14(%ebp),%eax
f012f73f:	8b 00                	mov    (%eax),%eax
f012f741:	8d 48 01             	lea    0x1(%eax),%ecx
f012f744:	8b 55 14             	mov    0x14(%ebp),%edx
f012f747:	89 0a                	mov    %ecx,(%edx)
f012f749:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f750:	8b 45 10             	mov    0x10(%ebp),%eax
f012f753:	01 c2                	add    %eax,%edx
f012f755:	8b 45 08             	mov    0x8(%ebp),%eax
f012f758:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f75a:	eb 03                	jmp    f012f75f <strsplit+0x8f>
			string++;
f012f75c:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f75f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f762:	8a 00                	mov    (%eax),%al
f012f764:	84 c0                	test   %al,%al
f012f766:	74 8b                	je     f012f6f3 <strsplit+0x23>
f012f768:	8b 45 08             	mov    0x8(%ebp),%eax
f012f76b:	8a 00                	mov    (%eax),%al
f012f76d:	0f be c0             	movsbl %al,%eax
f012f770:	50                   	push   %eax
f012f771:	ff 75 0c             	pushl  0xc(%ebp)
f012f774:	e8 b5 fa ff ff       	call   f012f22e <strchr>
f012f779:	83 c4 08             	add    $0x8,%esp
f012f77c:	85 c0                	test   %eax,%eax
f012f77e:	74 dc                	je     f012f75c <strsplit+0x8c>
			string++;
	}
f012f780:	e9 6e ff ff ff       	jmp    f012f6f3 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f012f785:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012f786:	8b 45 14             	mov    0x14(%ebp),%eax
f012f789:	8b 00                	mov    (%eax),%eax
f012f78b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f792:	8b 45 10             	mov    0x10(%ebp),%eax
f012f795:	01 d0                	add    %edx,%eax
f012f797:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f012f79d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012f7a2:	c9                   	leave  
f012f7a3:	c3                   	ret    

f012f7a4 <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f012f7a4:	55                   	push   %ebp
f012f7a5:	89 e5                	mov    %esp,%ebp
f012f7a7:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
f012f7aa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f7ae:	74 06                	je     f012f7b6 <str2lower+0x12>
f012f7b0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f7b4:	75 07                	jne    f012f7bd <str2lower+0x19>
		return NULL;
f012f7b6:	b8 00 00 00 00       	mov    $0x0,%eax
f012f7bb:	eb 4d                	jmp    f012f80a <str2lower+0x66>
	}
	char *ref=dst;
f012f7bd:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
		while(*src!='\0'){
f012f7c3:	eb 33                	jmp    f012f7f8 <str2lower+0x54>
			if(*src>=65&&*src<=90){
f012f7c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7c8:	8a 00                	mov    (%eax),%al
f012f7ca:	3c 40                	cmp    $0x40,%al
f012f7cc:	7e 1a                	jle    f012f7e8 <str2lower+0x44>
f012f7ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7d1:	8a 00                	mov    (%eax),%al
f012f7d3:	3c 5a                	cmp    $0x5a,%al
f012f7d5:	7f 11                	jg     f012f7e8 <str2lower+0x44>
				*dst=*src+32;
f012f7d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7da:	8a 00                	mov    (%eax),%al
f012f7dc:	83 c0 20             	add    $0x20,%eax
f012f7df:	88 c2                	mov    %al,%dl
f012f7e1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7e4:	88 10                	mov    %dl,(%eax)
f012f7e6:	eb 0a                	jmp    f012f7f2 <str2lower+0x4e>
			}
			else{
				*dst=*src;
f012f7e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7eb:	8a 10                	mov    (%eax),%dl
f012f7ed:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7f0:	88 10                	mov    %dl,(%eax)
			}
			src++;
f012f7f2:	ff 45 0c             	incl   0xc(%ebp)
			dst++;
f012f7f5:	ff 45 08             	incl   0x8(%ebp)
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
		return NULL;
	}
	char *ref=dst;
		while(*src!='\0'){
f012f7f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7fb:	8a 00                	mov    (%eax),%al
f012f7fd:	84 c0                	test   %al,%al
f012f7ff:	75 c4                	jne    f012f7c5 <str2lower+0x21>
				*dst=*src;
			}
			src++;
			dst++;
		}
		*dst='\0';
f012f801:	8b 45 08             	mov    0x8(%ebp),%eax
f012f804:	c6 00 00             	movb   $0x0,(%eax)
		return ref;
f012f807:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f80a:	c9                   	leave  
f012f80b:	c3                   	ret    

f012f80c <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f012f80c:	55                   	push   %ebp
f012f80d:	89 e5                	mov    %esp,%ebp
f012f80f:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012f812:	90                   	nop
f012f813:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f012f81a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f81d:	89 c2                	mov    %eax,%edx
f012f81f:	ec                   	in     (%dx),%al
f012f820:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012f823:	8a 45 f7             	mov    -0x9(%ebp),%al
f012f826:	0f b6 c0             	movzbl %al,%eax
f012f829:	89 45 fc             	mov    %eax,-0x4(%ebp)
f012f82c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f82f:	25 c0 00 00 00       	and    $0xc0,%eax
f012f834:	83 f8 40             	cmp    $0x40,%eax
f012f837:	75 da                	jne    f012f813 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f012f839:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f83d:	74 11                	je     f012f850 <ide_wait_ready+0x44>
f012f83f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f842:	83 e0 21             	and    $0x21,%eax
f012f845:	85 c0                	test   %eax,%eax
f012f847:	74 07                	je     f012f850 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f012f849:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f84e:	eb 05                	jmp    f012f855 <ide_wait_ready+0x49>
	}
	return 0;
f012f850:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f855:	c9                   	leave  
f012f856:	c3                   	ret    

f012f857 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f012f857:	55                   	push   %ebp
f012f858:	89 e5                	mov    %esp,%ebp
f012f85a:	57                   	push   %edi
f012f85b:	53                   	push   %ebx
f012f85c:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012f85f:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f866:	76 16                	jbe    f012f87e <ide_read+0x27>
f012f868:	68 e3 ba 13 f0       	push   $0xf013bae3
f012f86d:	68 f0 ba 13 f0       	push   $0xf013baf0
f012f872:	6a 25                	push   $0x25
f012f874:	68 05 bb 13 f0       	push   $0xf013bb05
f012f879:	e8 32 09 fd ff       	call   f01001b0 <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f012f87e:	83 ec 0c             	sub    $0xc,%esp
f012f881:	6a 00                	push   $0x0
f012f883:	e8 84 ff ff ff       	call   f012f80c <ide_wait_ready>
f012f888:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f012f88b:	8b 45 10             	mov    0x10(%ebp),%eax
f012f88e:	0f b6 c0             	movzbl %al,%eax
f012f891:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f898:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f89b:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f89e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f8a1:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f8a2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8a5:	0f b6 c0             	movzbl %al,%eax
f012f8a8:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f8af:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f8b2:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f8b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f8b8:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f8b9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8bc:	c1 e8 08             	shr    $0x8,%eax
f012f8bf:	0f b6 c0             	movzbl %al,%eax
f012f8c2:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f8c9:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f8cc:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f8cf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f8d2:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f8d3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8d6:	c1 e8 10             	shr    $0x10,%eax
f012f8d9:	0f b6 c0             	movzbl %al,%eax
f012f8dc:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f8e3:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f8e6:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f8e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f8ec:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f8ed:	a1 2c 3a 25 f0       	mov    0xf0253a2c,%eax
f012f8f2:	83 e0 01             	and    $0x1,%eax
f012f8f5:	c1 e0 04             	shl    $0x4,%eax
f012f8f8:	88 c2                	mov    %al,%dl
f012f8fa:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8fd:	c1 e8 18             	shr    $0x18,%eax
f012f900:	83 e0 0f             	and    $0xf,%eax
f012f903:	09 d0                	or     %edx,%eax
f012f905:	83 c8 e0             	or     $0xffffffe0,%eax
f012f908:	0f b6 c0             	movzbl %al,%eax
f012f90b:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f912:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f915:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f918:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f91b:	ee                   	out    %al,(%dx)
f012f91c:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f923:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f012f927:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f92a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f92d:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f92e:	eb 55                	jmp    f012f985 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f930:	83 ec 0c             	sub    $0xc,%esp
f012f933:	6a 01                	push   $0x1
f012f935:	e8 d2 fe ff ff       	call   f012f80c <ide_wait_ready>
f012f93a:	83 c4 10             	add    $0x10,%esp
f012f93d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f940:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f944:	79 05                	jns    f012f94b <ide_read+0xf4>
			return r;
f012f946:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f949:	eb 45                	jmp    f012f990 <ide_read+0x139>
f012f94b:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f952:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f955:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f958:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012f95f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f962:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f965:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f968:	89 cb                	mov    %ecx,%ebx
f012f96a:	89 df                	mov    %ebx,%edi
f012f96c:	89 c1                	mov    %eax,%ecx
f012f96e:	fc                   	cld    
f012f96f:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012f971:	89 c8                	mov    %ecx,%eax
f012f973:	89 fb                	mov    %edi,%ebx
f012f975:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f978:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f97b:	ff 4d 10             	decl   0x10(%ebp)
f012f97e:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f985:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f989:	75 a5                	jne    f012f930 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f012f98b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f990:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f993:	5b                   	pop    %ebx
f012f994:	5f                   	pop    %edi
f012f995:	5d                   	pop    %ebp
f012f996:	c3                   	ret    

f012f997 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f012f997:	55                   	push   %ebp
f012f998:	89 e5                	mov    %esp,%ebp
f012f99a:	56                   	push   %esi
f012f99b:	53                   	push   %ebx
f012f99c:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f012f99f:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f9a6:	76 16                	jbe    f012f9be <ide_write+0x27>
f012f9a8:	68 e3 ba 13 f0       	push   $0xf013bae3
f012f9ad:	68 f0 ba 13 f0       	push   $0xf013baf0
f012f9b2:	6a 3f                	push   $0x3f
f012f9b4:	68 05 bb 13 f0       	push   $0xf013bb05
f012f9b9:	e8 f2 07 fd ff       	call   f01001b0 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f012f9be:	83 ec 0c             	sub    $0xc,%esp
f012f9c1:	6a 00                	push   $0x0
f012f9c3:	e8 44 fe ff ff       	call   f012f80c <ide_wait_ready>
f012f9c8:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f012f9cb:	8b 45 10             	mov    0x10(%ebp),%eax
f012f9ce:	0f b6 c0             	movzbl %al,%eax
f012f9d1:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f9d8:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f9db:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f9de:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f9e1:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f9e2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9e5:	0f b6 c0             	movzbl %al,%eax
f012f9e8:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f9ef:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f9f2:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f9f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f9f8:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f9f9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9fc:	c1 e8 08             	shr    $0x8,%eax
f012f9ff:	0f b6 c0             	movzbl %al,%eax
f012fa02:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012fa09:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012fa0c:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012fa0f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fa12:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012fa13:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa16:	c1 e8 10             	shr    $0x10,%eax
f012fa19:	0f b6 c0             	movzbl %al,%eax
f012fa1c:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012fa23:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012fa26:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012fa29:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fa2c:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012fa2d:	a1 2c 3a 25 f0       	mov    0xf0253a2c,%eax
f012fa32:	83 e0 01             	and    $0x1,%eax
f012fa35:	c1 e0 04             	shl    $0x4,%eax
f012fa38:	88 c2                	mov    %al,%dl
f012fa3a:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa3d:	c1 e8 18             	shr    $0x18,%eax
f012fa40:	83 e0 0f             	and    $0xf,%eax
f012fa43:	09 d0                	or     %edx,%eax
f012fa45:	83 c8 e0             	or     $0xffffffe0,%eax
f012fa48:	0f b6 c0             	movzbl %al,%eax
f012fa4b:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012fa52:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012fa55:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012fa58:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012fa5b:	ee                   	out    %al,(%dx)
f012fa5c:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012fa63:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f012fa67:	8a 45 d7             	mov    -0x29(%ebp),%al
f012fa6a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012fa6d:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012fa6e:	eb 55                	jmp    f012fac5 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012fa70:	83 ec 0c             	sub    $0xc,%esp
f012fa73:	6a 01                	push   $0x1
f012fa75:	e8 92 fd ff ff       	call   f012f80c <ide_wait_ready>
f012fa7a:	83 c4 10             	add    $0x10,%esp
f012fa7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fa80:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fa84:	79 05                	jns    f012fa8b <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f012fa86:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fa89:	eb 45                	jmp    f012fad0 <ide_write+0x139>
f012fa8b:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012fa92:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fa95:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012fa98:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f012fa9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012faa2:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012faa5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012faa8:	89 cb                	mov    %ecx,%ebx
f012faaa:	89 de                	mov    %ebx,%esi
f012faac:	89 c1                	mov    %eax,%ecx
f012faae:	fc                   	cld    
f012faaf:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012fab1:	89 c8                	mov    %ecx,%eax
f012fab3:	89 f3                	mov    %esi,%ebx
f012fab5:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012fab8:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012fabb:	ff 4d 10             	decl   0x10(%ebp)
f012fabe:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012fac5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012fac9:	75 a5                	jne    f012fa70 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f012facb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fad0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012fad3:	5b                   	pop    %ebx
f012fad4:	5e                   	pop    %esi
f012fad5:	5d                   	pop    %ebp
f012fad6:	c3                   	ret    

f012fad7 <get_block_size>:
//==================================================================================//

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va) {
f012fad7:	55                   	push   %ebp
f012fad8:	89 e5                	mov    %esp,%ebp
f012fada:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *) va - 1);
f012fadd:	8b 45 08             	mov    0x8(%ebp),%eax
f012fae0:	83 e8 10             	sub    $0x10,%eax
f012fae3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size;
f012fae6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fae9:	8b 00                	mov    (%eax),%eax
}
f012faeb:	c9                   	leave  
f012faec:	c3                   	ret    

f012faed <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va) {
f012faed:	55                   	push   %ebp
f012faee:	89 e5                	mov    %esp,%ebp
f012faf0:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *) va - 1);
f012faf3:	8b 45 08             	mov    0x8(%ebp),%eax
f012faf6:	83 e8 10             	sub    $0x10,%eax
f012faf9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free;
f012fafc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012faff:	8a 40 04             	mov    0x4(%eax),%al
}
f012fb02:	c9                   	leave  
f012fb03:	c3                   	ret    

f012fb04 <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY) {
f012fb04:	55                   	push   %ebp
f012fb05:	89 e5                	mov    %esp,%ebp
f012fb07:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f012fb0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY) {
f012fb11:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fb14:	83 f8 02             	cmp    $0x2,%eax
f012fb17:	74 2b                	je     f012fb44 <alloc_block+0x40>
f012fb19:	83 f8 02             	cmp    $0x2,%eax
f012fb1c:	7f 07                	jg     f012fb25 <alloc_block+0x21>
f012fb1e:	83 f8 01             	cmp    $0x1,%eax
f012fb21:	74 0e                	je     f012fb31 <alloc_block+0x2d>
f012fb23:	eb 58                	jmp    f012fb7d <alloc_block+0x79>
f012fb25:	83 f8 03             	cmp    $0x3,%eax
f012fb28:	74 2d                	je     f012fb57 <alloc_block+0x53>
f012fb2a:	83 f8 04             	cmp    $0x4,%eax
f012fb2d:	74 3b                	je     f012fb6a <alloc_block+0x66>
f012fb2f:	eb 4c                	jmp    f012fb7d <alloc_block+0x79>
	case DA_FF:
		va = alloc_block_FF(size);
f012fb31:	83 ec 0c             	sub    $0xc,%esp
f012fb34:	ff 75 08             	pushl  0x8(%ebp)
f012fb37:	e8 77 01 00 00       	call   f012fcb3 <alloc_block_FF>
f012fb3c:	83 c4 10             	add    $0x10,%esp
f012fb3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012fb42:	eb 4a                	jmp    f012fb8e <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012fb44:	83 ec 0c             	sub    $0xc,%esp
f012fb47:	ff 75 08             	pushl  0x8(%ebp)
f012fb4a:	e8 36 05 00 00       	call   f0130085 <alloc_block_NF>
f012fb4f:	83 c4 10             	add    $0x10,%esp
f012fb52:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012fb55:	eb 37                	jmp    f012fb8e <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012fb57:	83 ec 0c             	sub    $0xc,%esp
f012fb5a:	ff 75 08             	pushl  0x8(%ebp)
f012fb5d:	e8 45 03 00 00       	call   f012fea7 <alloc_block_BF>
f012fb62:	83 c4 10             	add    $0x10,%esp
f012fb65:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012fb68:	eb 24                	jmp    f012fb8e <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f012fb6a:	83 ec 0c             	sub    $0xc,%esp
f012fb6d:	ff 75 08             	pushl  0x8(%ebp)
f012fb70:	e8 f3 04 00 00       	call   f0130068 <alloc_block_WF>
f012fb75:	83 c4 10             	add    $0x10,%esp
f012fb78:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012fb7b:	eb 11                	jmp    f012fb8e <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f012fb7d:	83 ec 0c             	sub    $0xc,%esp
f012fb80:	68 10 bb 13 f0       	push   $0xf013bb10
f012fb85:	e8 a7 12 fd ff       	call   f0100e31 <cprintf>
f012fb8a:	83 c4 10             	add    $0x10,%esp
		break;
f012fb8d:	90                   	nop
	}
	return va;
f012fb8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012fb91:	c9                   	leave  
f012fb92:	c3                   	ret    

f012fb93 <print_blocks_list>:

//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list) {
f012fb93:	55                   	push   %ebp
f012fb94:	89 e5                	mov    %esp,%ebp
f012fb96:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f012fb99:	83 ec 0c             	sub    $0xc,%esp
f012fb9c:	68 30 bb 13 f0       	push   $0xf013bb30
f012fba1:	e8 8b 12 fd ff       	call   f0100e31 <cprintf>
f012fba6:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk;
	cprintf("\nDynAlloc Blocks List:\n");
f012fba9:	83 ec 0c             	sub    $0xc,%esp
f012fbac:	68 5b bb 13 f0       	push   $0xf013bb5b
f012fbb1:	e8 7b 12 fd ff       	call   f0100e31 <cprintf>
f012fbb6:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f012fbb9:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fbbf:	eb 26                	jmp    f012fbe7 <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free);
f012fbc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbc4:	8a 40 04             	mov    0x4(%eax),%al
f012fbc7:	0f b6 d0             	movzbl %al,%edx
f012fbca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbcd:	8b 00                	mov    (%eax),%eax
f012fbcf:	83 ec 04             	sub    $0x4,%esp
f012fbd2:	52                   	push   %edx
f012fbd3:	50                   	push   %eax
f012fbd4:	68 73 bb 13 f0       	push   $0xf013bb73
f012fbd9:	e8 53 12 fd ff       	call   f0100e31 <cprintf>
f012fbde:	83 c4 10             	add    $0x10,%esp

void print_blocks_list(struct MemBlock_LIST list) {
	cprintf("=========================================\n");
	struct BlockMetaData* blk;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012fbe1:	8b 45 10             	mov    0x10(%ebp),%eax
f012fbe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fbe7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fbeb:	74 08                	je     f012fbf5 <print_blocks_list+0x62>
f012fbed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbf0:	8b 40 08             	mov    0x8(%eax),%eax
f012fbf3:	eb 05                	jmp    f012fbfa <print_blocks_list+0x67>
f012fbf5:	b8 00 00 00 00       	mov    $0x0,%eax
f012fbfa:	89 45 10             	mov    %eax,0x10(%ebp)
f012fbfd:	8b 45 10             	mov    0x10(%ebp),%eax
f012fc00:	85 c0                	test   %eax,%eax
f012fc02:	75 bd                	jne    f012fbc1 <print_blocks_list+0x2e>
f012fc04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fc08:	75 b7                	jne    f012fbc1 <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free);
	}
	cprintf("=========================================\n");
f012fc0a:	83 ec 0c             	sub    $0xc,%esp
f012fc0d:	68 30 bb 13 f0       	push   $0xf013bb30
f012fc12:	e8 1a 12 fd ff       	call   f0100e31 <cprintf>
f012fc17:	83 c4 10             	add    $0x10,%esp

}
f012fc1a:	90                   	nop
f012fc1b:	c9                   	leave  
f012fc1c:	c3                   	ret    

f012fc1d <initialize_dynamic_allocator>:
bool is_initialized = 0;
//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart,
		uint32 initSizeOfAllocatedSpace) {
f012fc1d:	55                   	push   %ebp
f012fc1e:	89 e5                	mov    %esp,%ebp
f012fc20:	83 ec 18             	sub    $0x18,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
f012fc23:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fc27:	0f 84 83 00 00 00    	je     f012fcb0 <initialize_dynamic_allocator+0x93>
		return;
	is_initialized = 1;
f012fc2d:	c7 05 30 3a 25 f0 01 	movl   $0x1,0xf0253a30
f012fc34:	00 00 00 
	//=========================================
	//=========================================
	struct BlockMetaData *firstMeta = (struct BlockMetaData *) daStart;
f012fc37:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Heap_MetaBlock.lh_first = firstMeta;
	firstMeta->size = initSizeOfAllocatedSpace;
f012fc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc40:	8b 55 0c             	mov    0xc(%ebp),%edx
f012fc43:	89 10                	mov    %edx,(%eax)
	firstMeta->is_free = 1;
f012fc45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc48:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	LIST_INSERT_HEAD(&Heap_MetaBlock, firstMeta);
f012fc4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fc50:	75 14                	jne    f012fc66 <initialize_dynamic_allocator+0x49>
f012fc52:	83 ec 04             	sub    $0x4,%esp
f012fc55:	68 8c bb 13 f0       	push   $0xf013bb8c
f012fc5a:	6a 60                	push   $0x60
f012fc5c:	68 af bb 13 f0       	push   $0xf013bbaf
f012fc61:	e8 4a 05 fd ff       	call   f01001b0 <_panic>
f012fc66:	8b 15 34 be 2b f0    	mov    0xf02bbe34,%edx
f012fc6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc6f:	89 50 08             	mov    %edx,0x8(%eax)
f012fc72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc75:	8b 40 08             	mov    0x8(%eax),%eax
f012fc78:	85 c0                	test   %eax,%eax
f012fc7a:	74 0d                	je     f012fc89 <initialize_dynamic_allocator+0x6c>
f012fc7c:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f012fc81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fc84:	89 50 0c             	mov    %edx,0xc(%eax)
f012fc87:	eb 08                	jmp    f012fc91 <initialize_dynamic_allocator+0x74>
f012fc89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc8c:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f012fc91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc94:	a3 34 be 2b f0       	mov    %eax,0xf02bbe34
f012fc99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc9c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f012fca3:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f012fca8:	40                   	inc    %eax
f012fca9:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
f012fcae:	eb 01                	jmp    f012fcb1 <initialize_dynamic_allocator+0x94>
void initialize_dynamic_allocator(uint32 daStart,
		uint32 initSizeOfAllocatedSpace) {
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
		return;
f012fcb0:	90                   	nop
	//Heap_MetaBlock.lh_first = firstMeta;
	firstMeta->size = initSizeOfAllocatedSpace;
	firstMeta->is_free = 1;
	LIST_INSERT_HEAD(&Heap_MetaBlock, firstMeta);

}
f012fcb1:	c9                   	leave  
f012fcb2:	c3                   	ret    

f012fcb3 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================

void *alloc_block_FF(uint32 size) {
f012fcb3:	55                   	push   %ebp
f012fcb4:	89 e5                	mov    %esp,%ebp
f012fcb6:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - #6] [3] DYNAMIC ALLOCATOR - alloc_block_FF()
	//panic("alloc_block_FF is not implemented yet");
	if (size == 0) {
f012fcb9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fcbd:	75 0a                	jne    f012fcc9 <alloc_block_FF+0x16>
		return NULL;
f012fcbf:	b8 00 00 00 00       	mov    $0x0,%eax
f012fcc4:	e9 dc 01 00 00       	jmp    f012fea5 <alloc_block_FF+0x1f2>
	}
	if (!is_initialized)
f012fcc9:	a1 30 3a 25 f0       	mov    0xf0253a30,%eax
f012fcce:	85 c0                	test   %eax,%eax
f012fcd0:	75 40                	jne    f012fd12 <alloc_block_FF+0x5f>
	{
	uint32 required_size = size + sizeOfMetaData();
f012fcd2:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcd5:	83 c0 10             	add    $0x10,%eax
f012fcd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 da_start = (uint32)sbrk(required_size);
f012fcdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcde:	83 ec 0c             	sub    $0xc,%esp
f012fce1:	50                   	push   %eax
f012fce2:	e8 07 83 fd ff       	call   f0107fee <sbrk>
f012fce7:	83 c4 10             	add    $0x10,%esp
f012fcea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//get new break since it's page aligned! thus, the size can be more than the required one
	uint32 da_break = (uint32)sbrk(0);
f012fced:	83 ec 0c             	sub    $0xc,%esp
f012fcf0:	6a 00                	push   $0x0
f012fcf2:	e8 f7 82 fd ff       	call   f0107fee <sbrk>
f012fcf7:	83 c4 10             	add    $0x10,%esp
f012fcfa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	initialize_dynamic_allocator(da_start, da_break - da_start);
f012fcfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fd00:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012fd03:	83 ec 08             	sub    $0x8,%esp
f012fd06:	50                   	push   %eax
f012fd07:	ff 75 ec             	pushl  -0x14(%ebp)
f012fd0a:	e8 0e ff ff ff       	call   f012fc1d <initialize_dynamic_allocator>
f012fd0f:	83 c4 10             	add    $0x10,%esp
	}

	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
f012fd12:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd15:	83 c0 10             	add    $0x10,%eax
f012fd18:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fd1b:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f012fd20:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fd23:	e9 16 01 00 00       	jmp    f012fe3e <alloc_block_FF+0x18b>
	{
		if (!iterator->is_free) {
f012fd28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd2b:	8a 40 04             	mov    0x4(%eax),%al
f012fd2e:	84 c0                	test   %al,%al
f012fd30:	0f 84 fc 00 00 00    	je     f012fe32 <alloc_block_FF+0x17f>
			continue;
		} else if (iterator->size < sizeToAllocate) {
f012fd36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd39:	8b 00                	mov    (%eax),%eax
f012fd3b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012fd3e:	0f 82 f1 00 00 00    	jb     f012fe35 <alloc_block_FF+0x182>
			continue;
		}
		if (iterator->is_free && iterator->size >= sizeToAllocate) {
f012fd44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd47:	8a 40 04             	mov    0x4(%eax),%al
f012fd4a:	84 c0                	test   %al,%al
f012fd4c:	0f 84 e4 00 00 00    	je     f012fe36 <alloc_block_FF+0x183>
f012fd52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd55:	8b 00                	mov    (%eax),%eax
f012fd57:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012fd5a:	0f 82 d6 00 00 00    	jb     f012fe36 <alloc_block_FF+0x183>
			if (iterator->size - sizeToAllocate < sizeOfMetaData()) {
f012fd60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd63:	8b 00                	mov    (%eax),%eax
f012fd65:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f012fd68:	83 f8 0f             	cmp    $0xf,%eax
f012fd6b:	77 12                	ja     f012fd7f <alloc_block_FF+0xcc>
				iterator->is_free = 0;
f012fd6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd70:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				return (struct BlockMetaData*) ((uint32) iterator
						+ sizeOfMetaData());
f012fd74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd77:	83 c0 10             	add    $0x10,%eax
			continue;
		}
		if (iterator->is_free && iterator->size >= sizeToAllocate) {
			if (iterator->size - sizeToAllocate < sizeOfMetaData()) {
				iterator->is_free = 0;
				return (struct BlockMetaData*) ((uint32) iterator
f012fd7a:	e9 26 01 00 00       	jmp    f012fea5 <alloc_block_FF+0x1f2>
						+ sizeOfMetaData());
			} else {
				temp = iterator;
f012fd7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd82:	89 45 dc             	mov    %eax,-0x24(%ebp)
				iterator = (struct BlockMetaData *) ((uint32) iterator
f012fd85:	8b 55 f4             	mov    -0xc(%ebp),%edx
						+ sizeToAllocate);
f012fd88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012fd8b:	01 d0                	add    %edx,%eax
				iterator->is_free = 0;
				return (struct BlockMetaData*) ((uint32) iterator
						+ sizeOfMetaData());
			} else {
				temp = iterator;
				iterator = (struct BlockMetaData *) ((uint32) iterator
f012fd8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
						+ sizeToAllocate);
				iterator->size = temp->size - (size + sizeOfMetaData());
f012fd90:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fd93:	8b 00                	mov    (%eax),%eax
f012fd95:	2b 45 08             	sub    0x8(%ebp),%eax
f012fd98:	8d 50 f0             	lea    -0x10(%eax),%edx
f012fd9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd9e:	89 10                	mov    %edx,(%eax)
				iterator->is_free = 1;
f012fda0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fda3:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, iterator);
f012fda7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fdab:	74 06                	je     f012fdb3 <alloc_block_FF+0x100>
f012fdad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fdb1:	75 17                	jne    f012fdca <alloc_block_FF+0x117>
f012fdb3:	83 ec 04             	sub    $0x4,%esp
f012fdb6:	68 c8 bb 13 f0       	push   $0xf013bbc8
f012fdbb:	68 8b 00 00 00       	push   $0x8b
f012fdc0:	68 af bb 13 f0       	push   $0xf013bbaf
f012fdc5:	e8 e6 03 fd ff       	call   f01001b0 <_panic>
f012fdca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fdcd:	8b 50 08             	mov    0x8(%eax),%edx
f012fdd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fdd3:	89 50 08             	mov    %edx,0x8(%eax)
f012fdd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fdd9:	8b 40 08             	mov    0x8(%eax),%eax
f012fddc:	85 c0                	test   %eax,%eax
f012fdde:	74 0c                	je     f012fdec <alloc_block_FF+0x139>
f012fde0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fde3:	8b 40 08             	mov    0x8(%eax),%eax
f012fde6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fde9:	89 50 0c             	mov    %edx,0xc(%eax)
f012fdec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fdef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fdf2:	89 50 08             	mov    %edx,0x8(%eax)
f012fdf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fdf8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012fdfb:	89 50 0c             	mov    %edx,0xc(%eax)
f012fdfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe01:	8b 40 08             	mov    0x8(%eax),%eax
f012fe04:	85 c0                	test   %eax,%eax
f012fe06:	75 08                	jne    f012fe10 <alloc_block_FF+0x15d>
f012fe08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe0b:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f012fe10:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f012fe15:	40                   	inc    %eax
f012fe16:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
				temp->is_free = 0;
f012fe1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fe1e:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				temp->size = sizeToAllocate;
f012fe22:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fe25:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fe28:	89 10                	mov    %edx,(%eax)
				return (struct BlockMetaData *) ((uint32) temp
						+ sizeOfMetaData());
f012fe2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fe2d:	83 c0 10             	add    $0x10,%eax
				iterator->size = temp->size - (size + sizeOfMetaData());
				iterator->is_free = 1;
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, iterator);
				temp->is_free = 0;
				temp->size = sizeToAllocate;
				return (struct BlockMetaData *) ((uint32) temp
f012fe30:	eb 73                	jmp    f012fea5 <alloc_block_FF+0x1f2>
	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
	{
		if (!iterator->is_free) {
			continue;
f012fe32:	90                   	nop
f012fe33:	eb 01                	jmp    f012fe36 <alloc_block_FF+0x183>
		} else if (iterator->size < sizeToAllocate) {
			continue;
f012fe35:	90                   	nop
	initialize_dynamic_allocator(da_start, da_break - da_start);
	}

	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fe36:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fe3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fe3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fe42:	74 08                	je     f012fe4c <alloc_block_FF+0x199>
f012fe44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe47:	8b 40 08             	mov    0x8(%eax),%eax
f012fe4a:	eb 05                	jmp    f012fe51 <alloc_block_FF+0x19e>
f012fe4c:	b8 00 00 00 00       	mov    $0x0,%eax
f012fe51:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f012fe56:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fe5b:	85 c0                	test   %eax,%eax
f012fe5d:	0f 85 c5 fe ff ff    	jne    f012fd28 <alloc_block_FF+0x75>
f012fe63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fe67:	0f 85 bb fe ff ff    	jne    f012fd28 <alloc_block_FF+0x75>
				return (struct BlockMetaData *) ((uint32) temp
						+ sizeOfMetaData());
			}
		}
	}
	if (sbrk(sizeToAllocate) == (void*) -1) {
f012fe6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012fe70:	83 ec 0c             	sub    $0xc,%esp
f012fe73:	50                   	push   %eax
f012fe74:	e8 75 81 fd ff       	call   f0107fee <sbrk>
f012fe79:	83 c4 10             	add    $0x10,%esp
f012fe7c:	83 f8 ff             	cmp    $0xffffffff,%eax
f012fe7f:	75 07                	jne    f012fe88 <alloc_block_FF+0x1d5>
		return NULL;
f012fe81:	b8 00 00 00 00       	mov    $0x0,%eax
f012fe86:	eb 1d                	jmp    f012fea5 <alloc_block_FF+0x1f2>
	}
	struct BlockMetaData* extendingBlock;
	extendingBlock = (struct BlockMetaData*) ((uint32) Heap_MetaBlock.lh_last);
f012fe88:	a1 38 be 2b f0       	mov    0xf02bbe38,%eax
f012fe8d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	extendingBlock->is_free = 0;
f012fe90:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fe93:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	extendingBlock->size = sizeToAllocate;
f012fe97:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fe9a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fe9d:	89 10                	mov    %edx,(%eax)
	return (struct BlockMetaData*) ((uint32) extendingBlock + sizeOfMetaData());
f012fe9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fea2:	83 c0 10             	add    $0x10,%eax

}
f012fea5:	c9                   	leave  
f012fea6:	c3                   	ret    

f012fea7 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size) {
f012fea7:	55                   	push   %ebp
f012fea8:	89 e5                	mov    %esp,%ebp
f012feaa:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF()
	//panic("alloc_block_BF is not implemented yet");
	if (size == 0) {
f012fead:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012feb1:	75 0a                	jne    f012febd <alloc_block_BF+0x16>
		return NULL;
f012feb3:	b8 00 00 00 00       	mov    $0x0,%eax
f012feb8:	e9 a9 01 00 00       	jmp    f0130066 <alloc_block_BF+0x1bf>
	}
	struct BlockMetaData* iterator, *temp, *allocate=NULL;
f012febd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 diff = -1;
f012fec4:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
	uint32 sizeToAllocate = size + sizeOfMetaData();
f012fecb:	8b 45 08             	mov    0x8(%ebp),%eax
f012fece:	83 c0 10             	add    $0x10,%eax
f012fed1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fed4:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f012fed9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fedc:	eb 4d                	jmp    f012ff2b <alloc_block_BF+0x84>
	{

		if (!iterator->is_free)
f012fede:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fee1:	8a 40 04             	mov    0x4(%eax),%al
f012fee4:	84 c0                	test   %al,%al
f012fee6:	74 37                	je     f012ff1f <alloc_block_BF+0x78>
		{
			continue;
		} else if (iterator->size < sizeToAllocate)
f012fee8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012feeb:	8b 00                	mov    (%eax),%eax
f012feed:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fef0:	72 30                	jb     f012ff22 <alloc_block_BF+0x7b>
		{
			continue;
		}
		if(allocate==NULL)
f012fef2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fef6:	75 06                	jne    f012fefe <alloc_block_BF+0x57>
		 {
			allocate=iterator;
f012fef8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fefb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		 }
		uint32 newdiff = iterator->size - sizeToAllocate;
f012fefe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ff01:	8b 00                	mov    (%eax),%eax
f012ff03:	2b 45 e8             	sub    -0x18(%ebp),%eax
f012ff06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (diff > newdiff)
f012ff09:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ff0c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012ff0f:	76 12                	jbe    f012ff23 <alloc_block_BF+0x7c>
		{
			diff = newdiff;
f012ff11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012ff14:	89 45 ec             	mov    %eax,-0x14(%ebp)
			allocate = iterator;
f012ff17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ff1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ff1d:	eb 04                	jmp    f012ff23 <alloc_block_BF+0x7c>
	LIST_FOREACH(iterator,&Heap_MetaBlock)
	{

		if (!iterator->is_free)
		{
			continue;
f012ff1f:	90                   	nop
f012ff20:	eb 01                	jmp    f012ff23 <alloc_block_BF+0x7c>
		} else if (iterator->size < sizeToAllocate)
		{
			continue;
f012ff22:	90                   	nop
		return NULL;
	}
	struct BlockMetaData* iterator, *temp, *allocate=NULL;
	uint32 diff = -1;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012ff23:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012ff28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012ff2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ff2f:	74 08                	je     f012ff39 <alloc_block_BF+0x92>
f012ff31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ff34:	8b 40 08             	mov    0x8(%eax),%eax
f012ff37:	eb 05                	jmp    f012ff3e <alloc_block_BF+0x97>
f012ff39:	b8 00 00 00 00       	mov    $0x0,%eax
f012ff3e:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f012ff43:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012ff48:	85 c0                	test   %eax,%eax
f012ff4a:	75 92                	jne    f012fede <alloc_block_BF+0x37>
f012ff4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ff50:	75 8c                	jne    f012fede <alloc_block_BF+0x37>
		{
			diff = newdiff;
			allocate = iterator;
		}
	}
	if(allocate!=NULL)
f012ff52:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ff56:	0f 84 d2 00 00 00    	je     f013002e <alloc_block_BF+0x187>
	{
		if (allocate->size - sizeToAllocate < sizeOfMetaData()) {
f012ff5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff5f:	8b 00                	mov    (%eax),%eax
f012ff61:	2b 45 e8             	sub    -0x18(%ebp),%eax
f012ff64:	83 f8 0f             	cmp    $0xf,%eax
f012ff67:	77 12                	ja     f012ff7b <alloc_block_BF+0xd4>

				allocate->is_free = 0;
f012ff69:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff6c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				return (struct BlockMetaData*) ((uint32) allocate + sizeOfMetaData());
f012ff70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff73:	83 c0 10             	add    $0x10,%eax
f012ff76:	e9 eb 00 00 00       	jmp    f0130066 <alloc_block_BF+0x1bf>
			} else {
				temp = allocate;
f012ff7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff7e:	89 45 e0             	mov    %eax,-0x20(%ebp)
				allocate = (struct BlockMetaData *) ((uint32) allocate
f012ff81:	8b 55 f0             	mov    -0x10(%ebp),%edx
						+ sizeToAllocate);
f012ff84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ff87:	01 d0                	add    %edx,%eax

				allocate->is_free = 0;
				return (struct BlockMetaData*) ((uint32) allocate + sizeOfMetaData());
			} else {
				temp = allocate;
				allocate = (struct BlockMetaData *) ((uint32) allocate
f012ff89:	89 45 f0             	mov    %eax,-0x10(%ebp)
						+ sizeToAllocate);
				allocate->size = temp->size - (size + sizeOfMetaData());
f012ff8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ff8f:	8b 00                	mov    (%eax),%eax
f012ff91:	2b 45 08             	sub    0x8(%ebp),%eax
f012ff94:	8d 50 f0             	lea    -0x10(%eax),%edx
f012ff97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff9a:	89 10                	mov    %edx,(%eax)
				allocate->is_free = 1;
f012ff9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff9f:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, allocate);
f012ffa3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012ffa7:	74 06                	je     f012ffaf <alloc_block_BF+0x108>
f012ffa9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ffad:	75 17                	jne    f012ffc6 <alloc_block_BF+0x11f>
f012ffaf:	83 ec 04             	sub    $0x4,%esp
f012ffb2:	68 c8 bb 13 f0       	push   $0xf013bbc8
f012ffb7:	68 cb 00 00 00       	push   $0xcb
f012ffbc:	68 af bb 13 f0       	push   $0xf013bbaf
f012ffc1:	e8 ea 01 fd ff       	call   f01001b0 <_panic>
f012ffc6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ffc9:	8b 50 08             	mov    0x8(%eax),%edx
f012ffcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffcf:	89 50 08             	mov    %edx,0x8(%eax)
f012ffd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffd5:	8b 40 08             	mov    0x8(%eax),%eax
f012ffd8:	85 c0                	test   %eax,%eax
f012ffda:	74 0c                	je     f012ffe8 <alloc_block_BF+0x141>
f012ffdc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ffdf:	8b 40 08             	mov    0x8(%eax),%eax
f012ffe2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012ffe5:	89 50 0c             	mov    %edx,0xc(%eax)
f012ffe8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ffeb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012ffee:	89 50 08             	mov    %edx,0x8(%eax)
f012fff1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fff4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012fff7:	89 50 0c             	mov    %edx,0xc(%eax)
f012fffa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fffd:	8b 40 08             	mov    0x8(%eax),%eax
f0130000:	85 c0                	test   %eax,%eax
f0130002:	75 08                	jne    f013000c <alloc_block_BF+0x165>
f0130004:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130007:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f013000c:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f0130011:	40                   	inc    %eax
f0130012:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
				temp->is_free = 0;
f0130017:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013001a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				temp->size = sizeToAllocate;
f013001e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130021:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130024:	89 10                	mov    %edx,(%eax)
				return (struct BlockMetaData *) ((uint32) temp + sizeOfMetaData());
f0130026:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130029:	83 c0 10             	add    $0x10,%eax
f013002c:	eb 38                	jmp    f0130066 <alloc_block_BF+0x1bf>
			}
	}
	else{
	if (sbrk(sizeToAllocate) == (void*) -1) {
f013002e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130031:	83 ec 0c             	sub    $0xc,%esp
f0130034:	50                   	push   %eax
f0130035:	e8 b4 7f fd ff       	call   f0107fee <sbrk>
f013003a:	83 c4 10             	add    $0x10,%esp
f013003d:	83 f8 ff             	cmp    $0xffffffff,%eax
f0130040:	75 07                	jne    f0130049 <alloc_block_BF+0x1a2>
		return NULL;
f0130042:	b8 00 00 00 00       	mov    $0x0,%eax
f0130047:	eb 1d                	jmp    f0130066 <alloc_block_BF+0x1bf>
	}
	struct BlockMetaData* extendingBlock;
	extendingBlock = (struct BlockMetaData*) ((uint32) Heap_MetaBlock.lh_last);
f0130049:	a1 38 be 2b f0       	mov    0xf02bbe38,%eax
f013004e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	extendingBlock->is_free = 0;
f0130051:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130054:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	extendingBlock->size = sizeToAllocate;
f0130058:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013005b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013005e:	89 10                	mov    %edx,(%eax)
	return (struct BlockMetaData*) ((uint32) extendingBlock + sizeOfMetaData());
f0130060:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130063:	83 c0 10             	add    $0x10,%eax
	}


}
f0130066:	c9                   	leave  
f0130067:	c3                   	ret    

f0130068 <alloc_block_WF>:

//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size) {
f0130068:	55                   	push   %ebp
f0130069:	89 e5                	mov    %esp,%ebp
f013006b:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f013006e:	83 ec 04             	sub    $0x4,%esp
f0130071:	68 fc bb 13 f0       	push   $0xf013bbfc
f0130076:	68 e3 00 00 00       	push   $0xe3
f013007b:	68 af bb 13 f0       	push   $0xf013bbaf
f0130080:	e8 2b 01 fd ff       	call   f01001b0 <_panic>

f0130085 <alloc_block_NF>:
}

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size) {
f0130085:	55                   	push   %ebp
f0130086:	89 e5                	mov    %esp,%ebp
f0130088:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f013008b:	83 ec 04             	sub    $0x4,%esp
f013008e:	68 24 bc 13 f0       	push   $0xf013bc24
f0130093:	68 eb 00 00 00       	push   $0xeb
f0130098:	68 af bb 13 f0       	push   $0xf013bbaf
f013009d:	e8 0e 01 fd ff       	call   f01001b0 <_panic>

f01300a2 <free_block>:
}

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va) {
f01300a2:	55                   	push   %ebp
f01300a3:	89 e5                	mov    %esp,%ebp
f01300a5:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//	panic("free_block is not implemented yet");
	if (va == NULL) {
f01300a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01300ac:	0f 84 8c 00 00 00    	je     f013013e <free_block+0x9c>
		return;
	}
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
f01300b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01300b5:	83 e8 10             	sub    $0x10,%eax
f01300b8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
f01300bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01300be:	8b 40 08             	mov    0x8(%eax),%eax
f01300c1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	struct BlockMetaData *prevBlock = currBlock->prev_next_info.le_prev;
f01300c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01300c7:	8b 40 0c             	mov    0xc(%eax),%eax
f01300ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//address is null or block is already free
	if (/*currBlock->is_free ||*/ currBlock == NULL) {
f01300cd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01300d1:	74 6e                	je     f0130141 <free_block+0x9f>
		return;
	}

	//freeing the block
	currBlock->is_free = 1;
f01300d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01300d6:	c6 40 04 01          	movb   $0x1,0x4(%eax)

	//next is free
	if (nextBlock != NULL && nextBlock->is_free) {
f01300da:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01300de:	74 2b                	je     f013010b <free_block+0x69>
f01300e0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01300e3:	8a 40 04             	mov    0x4(%eax),%al
f01300e6:	84 c0                	test   %al,%al
f01300e8:	74 21                	je     f013010b <free_block+0x69>
		currBlock->size += nextBlock->size;
f01300ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01300ed:	8b 10                	mov    (%eax),%edx
f01300ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01300f2:	8b 00                	mov    (%eax),%eax
f01300f4:	01 c2                	add    %eax,%edx
f01300f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01300f9:	89 10                	mov    %edx,(%eax)
		nextBlock->is_free = 0;
f01300fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01300fe:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		nextBlock->size = 0;
f0130102:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130105:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	//prev is free or prev and next are free
	if (prevBlock != NULL && prevBlock->is_free) {
f013010b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013010f:	74 31                	je     f0130142 <free_block+0xa0>
f0130111:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130114:	8a 40 04             	mov    0x4(%eax),%al
f0130117:	84 c0                	test   %al,%al
f0130119:	74 27                	je     f0130142 <free_block+0xa0>
		prevBlock->size += currBlock->size;
f013011b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013011e:	8b 10                	mov    (%eax),%edx
f0130120:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130123:	8b 00                	mov    (%eax),%eax
f0130125:	01 c2                	add    %eax,%edx
f0130127:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013012a:	89 10                	mov    %edx,(%eax)
		currBlock->size = 0;
f013012c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013012f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		currBlock->is_free = 0;
f0130135:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130138:	c6 40 04 00          	movb   $0x0,0x4(%eax)
f013013c:	eb 04                	jmp    f0130142 <free_block+0xa0>
//===================================================
void free_block(void *va) {
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//	panic("free_block is not implemented yet");
	if (va == NULL) {
		return;
f013013e:	90                   	nop
f013013f:	eb 01                	jmp    f0130142 <free_block+0xa0>
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
	struct BlockMetaData *prevBlock = currBlock->prev_next_info.le_prev;
	//address is null or block is already free
	if (/*currBlock->is_free ||*/ currBlock == NULL) {
		return;
f0130141:	90                   	nop
		currBlock->size = 0;
		currBlock->is_free = 0;

	}

}
f0130142:	c9                   	leave  
f0130143:	c3                   	ret    

f0130144 <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size) {
f0130144:	55                   	push   %ebp
f0130145:	89 e5                	mov    %esp,%ebp
f0130147:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	//panic("realloc_block_FF is not implemented yet");

	if (va == NULL && new_size != 0) {
f013014a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013014e:	75 19                	jne    f0130169 <realloc_block_FF+0x25>
f0130150:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130154:	74 13                	je     f0130169 <realloc_block_FF+0x25>
		return alloc_block_FF(new_size);
f0130156:	83 ec 0c             	sub    $0xc,%esp
f0130159:	ff 75 0c             	pushl  0xc(%ebp)
f013015c:	e8 52 fb ff ff       	call   f012fcb3 <alloc_block_FF>
f0130161:	83 c4 10             	add    $0x10,%esp
f0130164:	e9 7f 02 00 00       	jmp    f01303e8 <realloc_block_FF+0x2a4>
	} else if (va != NULL && new_size == 0) {
f0130169:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013016d:	74 1e                	je     f013018d <realloc_block_FF+0x49>
f013016f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130173:	75 18                	jne    f013018d <realloc_block_FF+0x49>
		free_block(va);
f0130175:	83 ec 0c             	sub    $0xc,%esp
f0130178:	ff 75 08             	pushl  0x8(%ebp)
f013017b:	e8 22 ff ff ff       	call   f01300a2 <free_block>
f0130180:	83 c4 10             	add    $0x10,%esp
		return NULL;
f0130183:	b8 00 00 00 00       	mov    $0x0,%eax
f0130188:	e9 5b 02 00 00       	jmp    f01303e8 <realloc_block_FF+0x2a4>
	} else if (va == NULL && new_size == 0) {
f013018d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130191:	75 10                	jne    f01301a3 <realloc_block_FF+0x5f>
f0130193:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130197:	75 0a                	jne    f01301a3 <realloc_block_FF+0x5f>
		return NULL;
f0130199:	b8 00 00 00 00       	mov    $0x0,%eax
f013019e:	e9 45 02 00 00       	jmp    f01303e8 <realloc_block_FF+0x2a4>
	}
	uint32 sizeToAllocate = new_size + sizeOfMetaData();
f01301a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01301a6:	83 c0 10             	add    $0x10,%eax
f01301a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
f01301ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01301af:	83 e8 10             	sub    $0x10,%eax
f01301b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
f01301b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301b8:	8b 40 08             	mov    0x8(%eax),%eax
f01301bb:	89 45 ec             	mov    %eax,-0x14(%ebp)

	 if (sizeToAllocate < currBlock->size) {
f01301be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301c1:	8b 00                	mov    (%eax),%eax
f01301c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01301c6:	0f 86 0e 01 00 00    	jbe    f01302da <realloc_block_FF+0x196>
		 if (currBlock->size - sizeToAllocate < sizeOfMetaData()) {
f01301cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301cf:	8b 00                	mov    (%eax),%eax
f01301d1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01301d4:	83 f8 0f             	cmp    $0xf,%eax
f01301d7:	77 0b                	ja     f01301e4 <realloc_block_FF+0xa0>

		 				return (struct BlockMetaData*) ((uint32) currBlock
		 						+ sizeOfMetaData());
f01301d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301dc:	83 c0 10             	add    $0x10,%eax
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;

	 if (sizeToAllocate < currBlock->size) {
		 if (currBlock->size - sizeToAllocate < sizeOfMetaData()) {

		 				return (struct BlockMetaData*) ((uint32) currBlock
f01301df:	e9 04 02 00 00       	jmp    f01303e8 <realloc_block_FF+0x2a4>
		 						+ sizeOfMetaData());
		 			}
		 struct BlockMetaData *temp = currBlock;
f01301e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	 currBlock = (struct BlockMetaData *) ((uint32) currBlock
f01301ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
								+ sizeToAllocate);
f01301ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301f0:	01 d0                	add    %edx,%eax

		 				return (struct BlockMetaData*) ((uint32) currBlock
		 						+ sizeOfMetaData());
		 			}
		 struct BlockMetaData *temp = currBlock;
	 currBlock = (struct BlockMetaData *) ((uint32) currBlock
f01301f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
								+ sizeToAllocate);
	 currBlock->size = temp->size - (sizeToAllocate /*+ sizeOfMetaData()*/);
f01301f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01301f8:	8b 00                	mov    (%eax),%eax
f01301fa:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01301fd:	89 c2                	mov    %eax,%edx
f01301ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130202:	89 10                	mov    %edx,(%eax)
	 currBlock->is_free = 1;
f0130204:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130207:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	 LIST_INSERT_AFTER(&Heap_MetaBlock, temp, currBlock);
f013020b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013020f:	74 06                	je     f0130217 <realloc_block_FF+0xd3>
f0130211:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130215:	75 17                	jne    f013022e <realloc_block_FF+0xea>
f0130217:	83 ec 04             	sub    $0x4,%esp
f013021a:	68 c8 bb 13 f0       	push   $0xf013bbc8
f013021f:	68 31 01 00 00       	push   $0x131
f0130224:	68 af bb 13 f0       	push   $0xf013bbaf
f0130229:	e8 82 ff fc ff       	call   f01001b0 <_panic>
f013022e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130231:	8b 50 08             	mov    0x8(%eax),%edx
f0130234:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130237:	89 50 08             	mov    %edx,0x8(%eax)
f013023a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013023d:	8b 40 08             	mov    0x8(%eax),%eax
f0130240:	85 c0                	test   %eax,%eax
f0130242:	74 0c                	je     f0130250 <realloc_block_FF+0x10c>
f0130244:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130247:	8b 40 08             	mov    0x8(%eax),%eax
f013024a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013024d:	89 50 0c             	mov    %edx,0xc(%eax)
f0130250:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130253:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130256:	89 50 08             	mov    %edx,0x8(%eax)
f0130259:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013025c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013025f:	89 50 0c             	mov    %edx,0xc(%eax)
f0130262:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130265:	8b 40 08             	mov    0x8(%eax),%eax
f0130268:	85 c0                	test   %eax,%eax
f013026a:	75 08                	jne    f0130274 <realloc_block_FF+0x130>
f013026c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013026f:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f0130274:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f0130279:	40                   	inc    %eax
f013027a:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
	 temp->is_free = 0;
f013027f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130282:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	 temp->size = sizeToAllocate;
f0130286:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130289:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013028c:	89 10                	mov    %edx,(%eax)

	   if(currBlock->prev_next_info.le_next!=NULL&&currBlock->prev_next_info.le_next->is_free){
f013028e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130291:	8b 40 08             	mov    0x8(%eax),%eax
f0130294:	85 c0                	test   %eax,%eax
f0130296:	74 37                	je     f01302cf <realloc_block_FF+0x18b>
f0130298:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013029b:	8b 40 08             	mov    0x8(%eax),%eax
f013029e:	8a 40 04             	mov    0x4(%eax),%al
f01302a1:	84 c0                	test   %al,%al
f01302a3:	74 2a                	je     f01302cf <realloc_block_FF+0x18b>
		   currBlock->size += currBlock->prev_next_info.le_next->size;
f01302a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302a8:	8b 10                	mov    (%eax),%edx
f01302aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302ad:	8b 40 08             	mov    0x8(%eax),%eax
f01302b0:	8b 00                	mov    (%eax),%eax
f01302b2:	01 c2                	add    %eax,%edx
f01302b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302b7:	89 10                	mov    %edx,(%eax)
		   currBlock->prev_next_info.le_next->is_free = 0;
f01302b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302bc:	8b 40 08             	mov    0x8(%eax),%eax
f01302bf:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		   currBlock->prev_next_info.le_next->size = 0;
f01302c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302c6:	8b 40 08             	mov    0x8(%eax),%eax
f01302c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	   }

		return (struct BlockMetaData *) ((uint32) temp + sizeOfMetaData());
f01302cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01302d2:	83 c0 10             	add    $0x10,%eax
f01302d5:	e9 0e 01 00 00       	jmp    f01303e8 <realloc_block_FF+0x2a4>
	} else if (sizeToAllocate > currBlock->size) {
f01302da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302dd:	8b 00                	mov    (%eax),%eax
f01302df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01302e2:	0f 83 e9 00 00 00    	jae    f01303d1 <realloc_block_FF+0x28d>
		if (nextBlock->is_free && nextBlock != NULL) {
f01302e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01302eb:	8a 40 04             	mov    0x4(%eax),%al
f01302ee:	84 c0                	test   %al,%al
f01302f0:	0f 84 98 00 00 00    	je     f013038e <realloc_block_FF+0x24a>
f01302f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01302fa:	0f 84 8e 00 00 00    	je     f013038e <realloc_block_FF+0x24a>
			if (nextBlock->size == sizeToAllocate - currBlock->size) {
f0130300:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130303:	8b 10                	mov    (%eax),%edx
f0130305:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130308:	8b 00                	mov    (%eax),%eax
f013030a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f013030d:	29 c1                	sub    %eax,%ecx
f013030f:	89 c8                	mov    %ecx,%eax
f0130311:	39 c2                	cmp    %eax,%edx
f0130313:	75 1a                	jne    f013032f <realloc_block_FF+0x1eb>
				currBlock->size = sizeToAllocate;
f0130315:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130318:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013031b:	89 10                	mov    %edx,(%eax)
				nextBlock->is_free = 0;
f013031d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130320:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				nextBlock->size = 0;
f0130324:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130327:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013032d:	eb 57                	jmp    f0130386 <realloc_block_FF+0x242>
			} else if (nextBlock->size - sizeOfMetaData()
f013032f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130332:	8b 00                	mov    (%eax),%eax
f0130334:	8d 48 f0             	lea    -0x10(%eax),%ecx
					> sizeToAllocate - currBlock->size) {
f0130337:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013033a:	8b 00                	mov    (%eax),%eax
f013033c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013033f:	29 c2                	sub    %eax,%edx
f0130341:	89 d0                	mov    %edx,%eax
		if (nextBlock->is_free && nextBlock != NULL) {
			if (nextBlock->size == sizeToAllocate - currBlock->size) {
				currBlock->size = sizeToAllocate;
				nextBlock->is_free = 0;
				nextBlock->size = 0;
			} else if (nextBlock->size - sizeOfMetaData()
f0130343:	39 c1                	cmp    %eax,%ecx
f0130345:	76 3f                	jbe    f0130386 <realloc_block_FF+0x242>
					> sizeToAllocate - currBlock->size) {
				struct BlockMetaData *temp = nextBlock;
f0130347:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013034a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			  	nextBlock = (struct BlockMetaData *) ((uint32) temp
f013034d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
						+ sizeToAllocate);
f0130350:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130353:	01 d0                	add    %edx,%eax
				nextBlock->is_free = 0;
				nextBlock->size = 0;
			} else if (nextBlock->size - sizeOfMetaData()
					> sizeToAllocate - currBlock->size) {
				struct BlockMetaData *temp = nextBlock;
			  	nextBlock = (struct BlockMetaData *) ((uint32) temp
f0130355:	89 45 ec             	mov    %eax,-0x14(%ebp)
						+ sizeToAllocate);
				nextBlock->size = temp->size - sizeToAllocate - currBlock->size;
f0130358:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013035b:	8b 00                	mov    (%eax),%eax
f013035d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0130360:	89 c2                	mov    %eax,%edx
f0130362:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130365:	8b 00                	mov    (%eax),%eax
f0130367:	29 c2                	sub    %eax,%edx
f0130369:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013036c:	89 10                	mov    %edx,(%eax)
				temp->size = 0;
f013036e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130371:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				temp->is_free = 0;
f0130377:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013037a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				currBlock->size = sizeToAllocate;
f013037e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130381:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130384:	89 10                	mov    %edx,(%eax)
			}
			return (struct BlockMetaData *) ((uint32) currBlock
					+ sizeOfMetaData());
f0130386:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130389:	83 c0 10             	add    $0x10,%eax
				nextBlock->size = temp->size - sizeToAllocate - currBlock->size;
				temp->size = 0;
				temp->is_free = 0;
				currBlock->size = sizeToAllocate;
			}
			return (struct BlockMetaData *) ((uint32) currBlock
f013038c:	eb 5a                	jmp    f01303e8 <realloc_block_FF+0x2a4>
					+ sizeOfMetaData());
		} else if (nextBlock == NULL
f013038e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130392:	74 1f                	je     f01303b3 <realloc_block_FF+0x26f>
				|| nextBlock->size < sizeToAllocate - currBlock->size
f0130394:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130397:	8b 10                	mov    (%eax),%edx
f0130399:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013039c:	8b 00                	mov    (%eax),%eax
f013039e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01303a1:	29 c1                	sub    %eax,%ecx
f01303a3:	89 c8                	mov    %ecx,%eax
f01303a5:	39 c2                	cmp    %eax,%edx
f01303a7:	72 0a                	jb     f01303b3 <realloc_block_FF+0x26f>
				|| !nextBlock->is_free) {
f01303a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01303ac:	8a 40 04             	mov    0x4(%eax),%al
f01303af:	84 c0                	test   %al,%al
f01303b1:	75 30                	jne    f01303e3 <realloc_block_FF+0x29f>
			free_block(currBlock);
f01303b3:	83 ec 0c             	sub    $0xc,%esp
f01303b6:	ff 75 f0             	pushl  -0x10(%ebp)
f01303b9:	e8 e4 fc ff ff       	call   f01300a2 <free_block>
f01303be:	83 c4 10             	add    $0x10,%esp
			return alloc_block_FF(new_size);
f01303c1:	83 ec 0c             	sub    $0xc,%esp
f01303c4:	ff 75 0c             	pushl  0xc(%ebp)
f01303c7:	e8 e7 f8 ff ff       	call   f012fcb3 <alloc_block_FF>
f01303cc:	83 c4 10             	add    $0x10,%esp
f01303cf:	eb 17                	jmp    f01303e8 <realloc_block_FF+0x2a4>

		}
	} else if (sizeToAllocate == currBlock->size) {
f01303d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303d4:	8b 00                	mov    (%eax),%eax
f01303d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01303d9:	75 08                	jne    f01303e3 <realloc_block_FF+0x29f>
		return (struct BlockMetaData *) ((uint32) currBlock + sizeOfMetaData());
f01303db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303de:	83 c0 10             	add    $0x10,%eax
f01303e1:	eb 05                	jmp    f01303e8 <realloc_block_FF+0x2a4>
	}
	return NULL;
f01303e3:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01303e8:	c9                   	leave  
f01303e9:	c3                   	ret    
f01303ea:	66 90                	xchg   %ax,%ax

f01303ec <__udivdi3>:
f01303ec:	55                   	push   %ebp
f01303ed:	57                   	push   %edi
f01303ee:	56                   	push   %esi
f01303ef:	53                   	push   %ebx
f01303f0:	83 ec 1c             	sub    $0x1c,%esp
f01303f3:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01303f7:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01303fb:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01303ff:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0130403:	89 ca                	mov    %ecx,%edx
f0130405:	89 f8                	mov    %edi,%eax
f0130407:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f013040b:	85 f6                	test   %esi,%esi
f013040d:	75 2d                	jne    f013043c <__udivdi3+0x50>
f013040f:	39 cf                	cmp    %ecx,%edi
f0130411:	77 65                	ja     f0130478 <__udivdi3+0x8c>
f0130413:	89 fd                	mov    %edi,%ebp
f0130415:	85 ff                	test   %edi,%edi
f0130417:	75 0b                	jne    f0130424 <__udivdi3+0x38>
f0130419:	b8 01 00 00 00       	mov    $0x1,%eax
f013041e:	31 d2                	xor    %edx,%edx
f0130420:	f7 f7                	div    %edi
f0130422:	89 c5                	mov    %eax,%ebp
f0130424:	31 d2                	xor    %edx,%edx
f0130426:	89 c8                	mov    %ecx,%eax
f0130428:	f7 f5                	div    %ebp
f013042a:	89 c1                	mov    %eax,%ecx
f013042c:	89 d8                	mov    %ebx,%eax
f013042e:	f7 f5                	div    %ebp
f0130430:	89 cf                	mov    %ecx,%edi
f0130432:	89 fa                	mov    %edi,%edx
f0130434:	83 c4 1c             	add    $0x1c,%esp
f0130437:	5b                   	pop    %ebx
f0130438:	5e                   	pop    %esi
f0130439:	5f                   	pop    %edi
f013043a:	5d                   	pop    %ebp
f013043b:	c3                   	ret    
f013043c:	39 ce                	cmp    %ecx,%esi
f013043e:	77 28                	ja     f0130468 <__udivdi3+0x7c>
f0130440:	0f bd fe             	bsr    %esi,%edi
f0130443:	83 f7 1f             	xor    $0x1f,%edi
f0130446:	75 40                	jne    f0130488 <__udivdi3+0x9c>
f0130448:	39 ce                	cmp    %ecx,%esi
f013044a:	72 0a                	jb     f0130456 <__udivdi3+0x6a>
f013044c:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0130450:	0f 87 9e 00 00 00    	ja     f01304f4 <__udivdi3+0x108>
f0130456:	b8 01 00 00 00       	mov    $0x1,%eax
f013045b:	89 fa                	mov    %edi,%edx
f013045d:	83 c4 1c             	add    $0x1c,%esp
f0130460:	5b                   	pop    %ebx
f0130461:	5e                   	pop    %esi
f0130462:	5f                   	pop    %edi
f0130463:	5d                   	pop    %ebp
f0130464:	c3                   	ret    
f0130465:	8d 76 00             	lea    0x0(%esi),%esi
f0130468:	31 ff                	xor    %edi,%edi
f013046a:	31 c0                	xor    %eax,%eax
f013046c:	89 fa                	mov    %edi,%edx
f013046e:	83 c4 1c             	add    $0x1c,%esp
f0130471:	5b                   	pop    %ebx
f0130472:	5e                   	pop    %esi
f0130473:	5f                   	pop    %edi
f0130474:	5d                   	pop    %ebp
f0130475:	c3                   	ret    
f0130476:	66 90                	xchg   %ax,%ax
f0130478:	89 d8                	mov    %ebx,%eax
f013047a:	f7 f7                	div    %edi
f013047c:	31 ff                	xor    %edi,%edi
f013047e:	89 fa                	mov    %edi,%edx
f0130480:	83 c4 1c             	add    $0x1c,%esp
f0130483:	5b                   	pop    %ebx
f0130484:	5e                   	pop    %esi
f0130485:	5f                   	pop    %edi
f0130486:	5d                   	pop    %ebp
f0130487:	c3                   	ret    
f0130488:	bd 20 00 00 00       	mov    $0x20,%ebp
f013048d:	89 eb                	mov    %ebp,%ebx
f013048f:	29 fb                	sub    %edi,%ebx
f0130491:	89 f9                	mov    %edi,%ecx
f0130493:	d3 e6                	shl    %cl,%esi
f0130495:	89 c5                	mov    %eax,%ebp
f0130497:	88 d9                	mov    %bl,%cl
f0130499:	d3 ed                	shr    %cl,%ebp
f013049b:	89 e9                	mov    %ebp,%ecx
f013049d:	09 f1                	or     %esi,%ecx
f013049f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f01304a3:	89 f9                	mov    %edi,%ecx
f01304a5:	d3 e0                	shl    %cl,%eax
f01304a7:	89 c5                	mov    %eax,%ebp
f01304a9:	89 d6                	mov    %edx,%esi
f01304ab:	88 d9                	mov    %bl,%cl
f01304ad:	d3 ee                	shr    %cl,%esi
f01304af:	89 f9                	mov    %edi,%ecx
f01304b1:	d3 e2                	shl    %cl,%edx
f01304b3:	8b 44 24 08          	mov    0x8(%esp),%eax
f01304b7:	88 d9                	mov    %bl,%cl
f01304b9:	d3 e8                	shr    %cl,%eax
f01304bb:	09 c2                	or     %eax,%edx
f01304bd:	89 d0                	mov    %edx,%eax
f01304bf:	89 f2                	mov    %esi,%edx
f01304c1:	f7 74 24 0c          	divl   0xc(%esp)
f01304c5:	89 d6                	mov    %edx,%esi
f01304c7:	89 c3                	mov    %eax,%ebx
f01304c9:	f7 e5                	mul    %ebp
f01304cb:	39 d6                	cmp    %edx,%esi
f01304cd:	72 19                	jb     f01304e8 <__udivdi3+0xfc>
f01304cf:	74 0b                	je     f01304dc <__udivdi3+0xf0>
f01304d1:	89 d8                	mov    %ebx,%eax
f01304d3:	31 ff                	xor    %edi,%edi
f01304d5:	e9 58 ff ff ff       	jmp    f0130432 <__udivdi3+0x46>
f01304da:	66 90                	xchg   %ax,%ax
f01304dc:	8b 54 24 08          	mov    0x8(%esp),%edx
f01304e0:	89 f9                	mov    %edi,%ecx
f01304e2:	d3 e2                	shl    %cl,%edx
f01304e4:	39 c2                	cmp    %eax,%edx
f01304e6:	73 e9                	jae    f01304d1 <__udivdi3+0xe5>
f01304e8:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01304eb:	31 ff                	xor    %edi,%edi
f01304ed:	e9 40 ff ff ff       	jmp    f0130432 <__udivdi3+0x46>
f01304f2:	66 90                	xchg   %ax,%ax
f01304f4:	31 c0                	xor    %eax,%eax
f01304f6:	e9 37 ff ff ff       	jmp    f0130432 <__udivdi3+0x46>
f01304fb:	90                   	nop

f01304fc <__umoddi3>:
f01304fc:	55                   	push   %ebp
f01304fd:	57                   	push   %edi
f01304fe:	56                   	push   %esi
f01304ff:	53                   	push   %ebx
f0130500:	83 ec 1c             	sub    $0x1c,%esp
f0130503:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0130507:	8b 74 24 34          	mov    0x34(%esp),%esi
f013050b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013050f:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0130513:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0130517:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f013051b:	89 f3                	mov    %esi,%ebx
f013051d:	89 fa                	mov    %edi,%edx
f013051f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0130523:	89 34 24             	mov    %esi,(%esp)
f0130526:	85 c0                	test   %eax,%eax
f0130528:	75 1a                	jne    f0130544 <__umoddi3+0x48>
f013052a:	39 f7                	cmp    %esi,%edi
f013052c:	0f 86 a2 00 00 00    	jbe    f01305d4 <__umoddi3+0xd8>
f0130532:	89 c8                	mov    %ecx,%eax
f0130534:	89 f2                	mov    %esi,%edx
f0130536:	f7 f7                	div    %edi
f0130538:	89 d0                	mov    %edx,%eax
f013053a:	31 d2                	xor    %edx,%edx
f013053c:	83 c4 1c             	add    $0x1c,%esp
f013053f:	5b                   	pop    %ebx
f0130540:	5e                   	pop    %esi
f0130541:	5f                   	pop    %edi
f0130542:	5d                   	pop    %ebp
f0130543:	c3                   	ret    
f0130544:	39 f0                	cmp    %esi,%eax
f0130546:	0f 87 ac 00 00 00    	ja     f01305f8 <__umoddi3+0xfc>
f013054c:	0f bd e8             	bsr    %eax,%ebp
f013054f:	83 f5 1f             	xor    $0x1f,%ebp
f0130552:	0f 84 ac 00 00 00    	je     f0130604 <__umoddi3+0x108>
f0130558:	bf 20 00 00 00       	mov    $0x20,%edi
f013055d:	29 ef                	sub    %ebp,%edi
f013055f:	89 fe                	mov    %edi,%esi
f0130561:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0130565:	89 e9                	mov    %ebp,%ecx
f0130567:	d3 e0                	shl    %cl,%eax
f0130569:	89 d7                	mov    %edx,%edi
f013056b:	89 f1                	mov    %esi,%ecx
f013056d:	d3 ef                	shr    %cl,%edi
f013056f:	09 c7                	or     %eax,%edi
f0130571:	89 e9                	mov    %ebp,%ecx
f0130573:	d3 e2                	shl    %cl,%edx
f0130575:	89 14 24             	mov    %edx,(%esp)
f0130578:	89 d8                	mov    %ebx,%eax
f013057a:	d3 e0                	shl    %cl,%eax
f013057c:	89 c2                	mov    %eax,%edx
f013057e:	8b 44 24 08          	mov    0x8(%esp),%eax
f0130582:	d3 e0                	shl    %cl,%eax
f0130584:	89 44 24 04          	mov    %eax,0x4(%esp)
f0130588:	8b 44 24 08          	mov    0x8(%esp),%eax
f013058c:	89 f1                	mov    %esi,%ecx
f013058e:	d3 e8                	shr    %cl,%eax
f0130590:	09 d0                	or     %edx,%eax
f0130592:	d3 eb                	shr    %cl,%ebx
f0130594:	89 da                	mov    %ebx,%edx
f0130596:	f7 f7                	div    %edi
f0130598:	89 d3                	mov    %edx,%ebx
f013059a:	f7 24 24             	mull   (%esp)
f013059d:	89 c6                	mov    %eax,%esi
f013059f:	89 d1                	mov    %edx,%ecx
f01305a1:	39 d3                	cmp    %edx,%ebx
f01305a3:	0f 82 87 00 00 00    	jb     f0130630 <__umoddi3+0x134>
f01305a9:	0f 84 91 00 00 00    	je     f0130640 <__umoddi3+0x144>
f01305af:	8b 54 24 04          	mov    0x4(%esp),%edx
f01305b3:	29 f2                	sub    %esi,%edx
f01305b5:	19 cb                	sbb    %ecx,%ebx
f01305b7:	89 d8                	mov    %ebx,%eax
f01305b9:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01305bd:	d3 e0                	shl    %cl,%eax
f01305bf:	89 e9                	mov    %ebp,%ecx
f01305c1:	d3 ea                	shr    %cl,%edx
f01305c3:	09 d0                	or     %edx,%eax
f01305c5:	89 e9                	mov    %ebp,%ecx
f01305c7:	d3 eb                	shr    %cl,%ebx
f01305c9:	89 da                	mov    %ebx,%edx
f01305cb:	83 c4 1c             	add    $0x1c,%esp
f01305ce:	5b                   	pop    %ebx
f01305cf:	5e                   	pop    %esi
f01305d0:	5f                   	pop    %edi
f01305d1:	5d                   	pop    %ebp
f01305d2:	c3                   	ret    
f01305d3:	90                   	nop
f01305d4:	89 fd                	mov    %edi,%ebp
f01305d6:	85 ff                	test   %edi,%edi
f01305d8:	75 0b                	jne    f01305e5 <__umoddi3+0xe9>
f01305da:	b8 01 00 00 00       	mov    $0x1,%eax
f01305df:	31 d2                	xor    %edx,%edx
f01305e1:	f7 f7                	div    %edi
f01305e3:	89 c5                	mov    %eax,%ebp
f01305e5:	89 f0                	mov    %esi,%eax
f01305e7:	31 d2                	xor    %edx,%edx
f01305e9:	f7 f5                	div    %ebp
f01305eb:	89 c8                	mov    %ecx,%eax
f01305ed:	f7 f5                	div    %ebp
f01305ef:	89 d0                	mov    %edx,%eax
f01305f1:	e9 44 ff ff ff       	jmp    f013053a <__umoddi3+0x3e>
f01305f6:	66 90                	xchg   %ax,%ax
f01305f8:	89 c8                	mov    %ecx,%eax
f01305fa:	89 f2                	mov    %esi,%edx
f01305fc:	83 c4 1c             	add    $0x1c,%esp
f01305ff:	5b                   	pop    %ebx
f0130600:	5e                   	pop    %esi
f0130601:	5f                   	pop    %edi
f0130602:	5d                   	pop    %ebp
f0130603:	c3                   	ret    
f0130604:	3b 04 24             	cmp    (%esp),%eax
f0130607:	72 06                	jb     f013060f <__umoddi3+0x113>
f0130609:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f013060d:	77 0f                	ja     f013061e <__umoddi3+0x122>
f013060f:	89 f2                	mov    %esi,%edx
f0130611:	29 f9                	sub    %edi,%ecx
f0130613:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0130617:	89 14 24             	mov    %edx,(%esp)
f013061a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f013061e:	8b 44 24 04          	mov    0x4(%esp),%eax
f0130622:	8b 14 24             	mov    (%esp),%edx
f0130625:	83 c4 1c             	add    $0x1c,%esp
f0130628:	5b                   	pop    %ebx
f0130629:	5e                   	pop    %esi
f013062a:	5f                   	pop    %edi
f013062b:	5d                   	pop    %ebp
f013062c:	c3                   	ret    
f013062d:	8d 76 00             	lea    0x0(%esi),%esi
f0130630:	2b 04 24             	sub    (%esp),%eax
f0130633:	19 fa                	sbb    %edi,%edx
f0130635:	89 d1                	mov    %edx,%ecx
f0130637:	89 c6                	mov    %eax,%esi
f0130639:	e9 71 ff ff ff       	jmp    f01305af <__umoddi3+0xb3>
f013063e:	66 90                	xchg   %ax,%ax
f0130640:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0130644:	72 ea                	jb     f0130630 <__umoddi3+0x134>
f0130646:	89 d9                	mov    %ebx,%ecx
f0130648:	e9 62 ff ff ff       	jmp    f01305af <__umoddi3+0xb3>
