
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 c0 18 00 	lgdtl  0x18c018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc bf 18 f0       	mov    $0xf018bfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 d8 ae 2b f0 01 	movl   $0x1,0xf02baed8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 ac ae 2b f0 01 	movl   $0x1,0xf02baeac
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 3c d6 2d f0       	mov    $0xf02dd63c,%edx
f010006a:	b8 d2 1f 25 f0       	mov    $0xf0251fd2,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 d2 1f 25 f0       	push   $0xf0251fd2
f010007e:	e8 1b ef 02 00       	call   f012ef9e <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 d4 ae 2b f0 ff 	movl   $0xffffffff,0xf02baed4
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 e4 0c 00 00       	call   f0100d79 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 9d 00 00 00       	call   f0100137 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 78 6a 00 00       	call   f0106b17 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 51 66 00 00       	call   f01066f5 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 cc 6d 00 00       	call   f0106e75 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 b9 99 00 00       	call   f0109a67 <env_init>
	idt_init();
f01000ae:	e8 f2 ae 00 00       	call   f010afa5 <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 f2 d5 00 00       	call   f010d6aa <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 64                	push   $0x64
f01000c7:	e8 7b 79 00 00       	call   f0107a47 <create_shares_array>
f01000cc:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000cf:	83 ec 0c             	sub    $0xc,%esp
f01000d2:	6a 64                	push   $0x64
f01000d4:	e8 bb d7 00 00       	call   f010d894 <create_semaphores_array>
f01000d9:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f01000dc:	83 ec 0c             	sub    $0xc,%esp
f01000df:	6a 00                	push   $0x0
f01000e1:	e8 c1 d6 00 00       	call   f010d7a7 <enableBuffering>
f01000e6:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000e9:	83 ec 0c             	sub    $0xc,%esp
f01000ec:	6a 00                	push   $0x0
f01000ee:	e8 9c d6 00 00       	call   f010d78f <enableModifiedBuffer>
f01000f3:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000f6:	83 ec 0c             	sub    $0xc,%esp
f01000f9:	68 e8 03 00 00       	push   $0x3e8
f01000fe:	e8 bc d6 00 00       	call   f010d7bf <setModifiedBufferLength>
f0100103:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100106:	e8 64 64 00 00       	call   f010656f <pic_init>
	sched_init() ;
f010010b:	e8 61 60 00 00       	call   f0106171 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100110:	83 ec 0c             	sub    $0xc,%esp
f0100113:	68 40 fd 12 f0       	push   $0xf012fd40
f0100118:	e8 14 0d 00 00       	call   f0100e31 <cprintf>
f010011d:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 6c fd 12 f0       	push   $0xf012fd6c
f0100128:	e8 04 0d 00 00       	call   f0100e31 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100130:	e8 1b 1a 00 00       	call   f0101b50 <run_command_prompt>
	}
f0100135:	eb d9                	jmp    f0100110 <FOS_initialize+0xb1>

f0100137 <print_welcome_message>:
}


void print_welcome_message()
{
f0100137:	55                   	push   %ebp
f0100138:	89 e5                	mov    %esp,%ebp
f010013a:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013d:	83 ec 0c             	sub    $0xc,%esp
f0100140:	68 91 fd 12 f0       	push   $0xf012fd91
f0100145:	e8 e7 0c 00 00       	call   f0100e31 <cprintf>
f010014a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014d:	83 ec 0c             	sub    $0xc,%esp
f0100150:	68 98 fd 12 f0       	push   $0xf012fd98
f0100155:	e8 d7 0c 00 00       	call   f0100e31 <cprintf>
f010015a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015d:	83 ec 0c             	sub    $0xc,%esp
f0100160:	68 e0 fd 12 f0       	push   $0xf012fde0
f0100165:	e8 c7 0c 00 00       	call   f0100e31 <cprintf>
f010016a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016d:	83 ec 0c             	sub    $0xc,%esp
f0100170:	68 28 fe 12 f0       	push   $0xf012fe28
f0100175:	e8 b7 0c 00 00       	call   f0100e31 <cprintf>
f010017a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017d:	83 ec 0c             	sub    $0xc,%esp
f0100180:	68 e0 fd 12 f0       	push   $0xf012fde0
f0100185:	e8 a7 0c 00 00       	call   f0100e31 <cprintf>
f010018a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018d:	83 ec 0c             	sub    $0xc,%esp
f0100190:	68 98 fd 12 f0       	push   $0xf012fd98
f0100195:	e8 97 0c 00 00       	call   f0100e31 <cprintf>
f010019a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019d:	83 ec 0c             	sub    $0xc,%esp
f01001a0:	68 6d fe 12 f0       	push   $0xf012fe6d
f01001a5:	e8 87 0c 00 00       	call   f0100e31 <cprintf>
f01001aa:	83 c4 10             	add    $0x10,%esp
}
f01001ad:	90                   	nop
f01001ae:	c9                   	leave  
f01001af:	c3                   	ret    

f01001b0 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001b0:	55                   	push   %ebp
f01001b1:	89 e5                	mov    %esp,%ebp
f01001b3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b9:	a3 e0 1f 25 f0       	mov    %eax,0xf0251fe0

	va_start(ap, fmt);
f01001be:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c1:	83 c0 04             	add    $0x4,%eax
f01001c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c7:	83 ec 04             	sub    $0x4,%esp
f01001ca:	ff 75 0c             	pushl  0xc(%ebp)
f01001cd:	ff 75 08             	pushl  0x8(%ebp)
f01001d0:	68 72 fe 12 f0       	push   $0xf012fe72
f01001d5:	e8 57 0c 00 00       	call   f0100e31 <cprintf>
f01001da:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01001e0:	83 ec 08             	sub    $0x8,%esp
f01001e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e6:	50                   	push   %eax
f01001e7:	e8 1c 0c 00 00       	call   f0100e08 <vcprintf>
f01001ec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ef:	83 ec 0c             	sub    $0xc,%esp
f01001f2:	68 8b fe 12 f0       	push   $0xf012fe8b
f01001f7:	e8 35 0c 00 00       	call   f0100e31 <cprintf>
f01001fc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001ff:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0100204:	85 c0                	test   %eax,%eax
f0100206:	74 12                	je     f010021a <_panic+0x6a>
f0100208:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010020d:	8b 40 54             	mov    0x54(%eax),%eax
f0100210:	83 f8 02             	cmp    $0x2,%eax
f0100213:	75 05                	jne    f010021a <_panic+0x6a>
	{
		//2015
		env_exit();
f0100215:	e8 37 97 00 00       	call   f0109951 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010021a:	a1 d4 ae 2b f0       	mov    0xf02baed4,%eax
f010021f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100222:	74 1b                	je     f010023f <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100224:	a1 d4 ae 2b f0       	mov    0xf02baed4,%eax
f0100229:	83 ec 08             	sub    $0x8,%esp
f010022c:	50                   	push   %eax
f010022d:	68 8d fe 12 f0       	push   $0xf012fe8d
f0100232:	e8 fa 0b 00 00       	call   f0100e31 <cprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010023a:	e8 7c 5f 00 00       	call   f01061bb <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010023f:	c7 05 34 22 25 f0 00 	movl   $0x0,0xf0252234
f0100246:	00 00 00 
		lcr3(phys_page_directory);
f0100249:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f010024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100254:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100257:	83 ec 0c             	sub    $0xc,%esp
f010025a:	6a 00                	push   $0x0
f010025c:	e8 ef 18 00 00       	call   f0101b50 <run_command_prompt>
f0100261:	83 c4 10             	add    $0x10,%esp
f0100264:	eb f1                	jmp    f0100257 <_panic+0xa7>

f0100266 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100266:	55                   	push   %ebp
f0100267:	89 e5                	mov    %esp,%ebp
f0100269:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010026c:	8b 45 10             	mov    0x10(%ebp),%eax
f010026f:	a3 e0 1f 25 f0       	mov    %eax,0xf0251fe0

	va_start(ap, fmt);
f0100274:	8d 45 10             	lea    0x10(%ebp),%eax
f0100277:	83 c0 04             	add    $0x4,%eax
f010027a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010027d:	83 ec 04             	sub    $0x4,%esp
f0100280:	ff 75 0c             	pushl  0xc(%ebp)
f0100283:	ff 75 08             	pushl  0x8(%ebp)
f0100286:	68 72 fe 12 f0       	push   $0xf012fe72
f010028b:	e8 a1 0b 00 00       	call   f0100e31 <cprintf>
f0100290:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100293:	8b 45 10             	mov    0x10(%ebp),%eax
f0100296:	83 ec 08             	sub    $0x8,%esp
f0100299:	ff 75 f4             	pushl  -0xc(%ebp)
f010029c:	50                   	push   %eax
f010029d:	e8 66 0b 00 00       	call   f0100e08 <vcprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a5:	83 ec 0c             	sub    $0xc,%esp
f01002a8:	68 8b fe 12 f0       	push   $0xf012fe8b
f01002ad:	e8 7f 0b 00 00       	call   f0100e31 <cprintf>
f01002b2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01002b5:	a1 d4 ae 2b f0       	mov    0xf02baed4,%eax
f01002ba:	83 f8 ff             	cmp    $0xffffffff,%eax
f01002bd:	74 27                	je     f01002e6 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f01002bf:	e8 6e 5c 00 00       	call   f0105f32 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f01002c4:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f01002c9:	85 c0                	test   %eax,%eax
f01002cb:	74 14                	je     f01002e1 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f01002cd:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f01002d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002d5:	83 ec 0c             	sub    $0xc,%esp
f01002d8:	50                   	push   %eax
f01002d9:	e8 95 50 00 00       	call   f0105373 <sched_exit_env>
f01002de:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f01002e1:	e8 d5 5e 00 00       	call   f01061bb <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002e6:	c7 05 34 22 25 f0 00 	movl   $0x0,0xf0252234
f01002ed:	00 00 00 
		lcr3(phys_page_directory);
f01002f0:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f01002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01002f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002fb:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	6a 00                	push   $0x0
f0100303:	e8 48 18 00 00       	call   f0101b50 <run_command_prompt>
f0100308:	83 c4 10             	add    $0x10,%esp
f010030b:	eb f1                	jmp    f01002fe <_panic_all+0x98>

f010030d <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010030d:	55                   	push   %ebp
f010030e:	89 e5                	mov    %esp,%ebp
f0100310:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100313:	8b 45 10             	mov    0x10(%ebp),%eax
f0100316:	a3 e0 1f 25 f0       	mov    %eax,0xf0251fe0

	va_start(ap, fmt);
f010031b:	8d 45 10             	lea    0x10(%ebp),%eax
f010031e:	83 c0 04             	add    $0x4,%eax
f0100321:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100324:	83 ec 04             	sub    $0x4,%esp
f0100327:	ff 75 0c             	pushl  0xc(%ebp)
f010032a:	ff 75 08             	pushl  0x8(%ebp)
f010032d:	68 72 fe 12 f0       	push   $0xf012fe72
f0100332:	e8 fa 0a 00 00       	call   f0100e31 <cprintf>
f0100337:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010033a:	8b 45 10             	mov    0x10(%ebp),%eax
f010033d:	83 ec 08             	sub    $0x8,%esp
f0100340:	ff 75 f4             	pushl  -0xc(%ebp)
f0100343:	50                   	push   %eax
f0100344:	e8 bf 0a 00 00       	call   f0100e08 <vcprintf>
f0100349:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010034c:	83 ec 0c             	sub    $0xc,%esp
f010034f:	68 8b fe 12 f0       	push   $0xf012fe8b
f0100354:	e8 d8 0a 00 00       	call   f0100e31 <cprintf>
f0100359:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010035c:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0100361:	85 c0                	test   %eax,%eax
f0100363:	74 28                	je     f010038d <_panic_into_prompt+0x80>
f0100365:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010036a:	8b 40 54             	mov    0x54(%eax),%eax
f010036d:	83 f8 02             	cmp    $0x2,%eax
f0100370:	75 1b                	jne    f010038d <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100372:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0100377:	83 ec 0c             	sub    $0xc,%esp
f010037a:	50                   	push   %eax
f010037b:	e8 6d 4e 00 00       	call   f01051ed <sched_insert_exit>
f0100380:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100383:	c7 05 34 22 25 f0 00 	movl   $0x0,0xf0252234
f010038a:	00 00 00 
	}

	lcr3(phys_page_directory);
f010038d:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f0100392:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100398:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010039b:	a1 d4 ae 2b f0       	mov    0xf02baed4,%eax
f01003a0:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003a3:	74 0a                	je     f01003af <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003a5:	c7 05 d4 ae 2b f0 00 	movl   $0x0,0xf02baed4
f01003ac:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f01003af:	83 ec 0c             	sub    $0xc,%esp
f01003b2:	6a 00                	push   $0x0
f01003b4:	e8 97 17 00 00       	call   f0101b50 <run_command_prompt>
f01003b9:	83 c4 10             	add    $0x10,%esp
f01003bc:	eb f1                	jmp    f01003af <_panic_into_prompt+0xa2>

f01003be <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01003c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01003c7:	83 c0 04             	add    $0x4,%eax
f01003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01003cd:	83 ec 04             	sub    $0x4,%esp
f01003d0:	ff 75 0c             	pushl  0xc(%ebp)
f01003d3:	ff 75 08             	pushl  0x8(%ebp)
f01003d6:	68 a2 fe 12 f0       	push   $0xf012fea2
f01003db:	e8 51 0a 00 00       	call   f0100e31 <cprintf>
f01003e0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01003e6:	83 ec 08             	sub    $0x8,%esp
f01003e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ec:	50                   	push   %eax
f01003ed:	e8 16 0a 00 00       	call   f0100e08 <vcprintf>
f01003f2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003f5:	83 ec 0c             	sub    $0xc,%esp
f01003f8:	68 8b fe 12 f0       	push   $0xf012fe8b
f01003fd:	e8 2f 0a 00 00       	call   f0100e31 <cprintf>
f0100402:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100405:	90                   	nop
f0100406:	c9                   	leave  
f0100407:	c3                   	ret    

f0100408 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100408:	55                   	push   %ebp
f0100409:	89 e5                	mov    %esp,%ebp
f010040b:	83 ec 10             	sub    $0x10,%esp
f010040e:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100415:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100418:	89 c2                	mov    %eax,%edx
f010041a:	ec                   	in     (%dx),%al
f010041b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010041e:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100421:	0f b6 c0             	movzbl %al,%eax
f0100424:	83 e0 01             	and    $0x1,%eax
f0100427:	85 c0                	test   %eax,%eax
f0100429:	75 07                	jne    f0100432 <serial_proc_data+0x2a>
		return -1;
f010042b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100430:	eb 16                	jmp    f0100448 <serial_proc_data+0x40>
f0100432:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100439:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010043c:	89 c2                	mov    %eax,%edx
f010043e:	ec                   	in     (%dx),%al
f010043f:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100442:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100445:	0f b6 c0             	movzbl %al,%eax
}
f0100448:	c9                   	leave  
f0100449:	c3                   	ret    

f010044a <serial_intr>:

void
serial_intr(void)
{
f010044a:	55                   	push   %ebp
f010044b:	89 e5                	mov    %esp,%ebp
f010044d:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100450:	a1 04 20 25 f0       	mov    0xf0252004,%eax
f0100455:	85 c0                	test   %eax,%eax
f0100457:	74 10                	je     f0100469 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100459:	83 ec 0c             	sub    $0xc,%esp
f010045c:	68 08 04 10 f0       	push   $0xf0100408
f0100461:	e8 58 07 00 00       	call   f0100bbe <cons_intr>
f0100466:	83 c4 10             	add    $0x10,%esp
}
f0100469:	90                   	nop
f010046a:	c9                   	leave  
f010046b:	c3                   	ret    

f010046c <serial_init>:

void
serial_init(void)
{
f010046c:	55                   	push   %ebp
f010046d:	89 e5                	mov    %esp,%ebp
f010046f:	83 ec 40             	sub    $0x40,%esp
f0100472:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100479:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010047d:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100480:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100483:	ee                   	out    %al,(%dx)
f0100484:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f010048b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010048f:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100492:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100495:	ee                   	out    %al,(%dx)
f0100496:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010049d:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004a1:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004a7:	ee                   	out    %al,(%dx)
f01004a8:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01004af:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01004b3:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01004b9:	ee                   	out    %al,(%dx)
f01004ba:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f01004c1:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f01004c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01004c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01004cb:	ee                   	out    %al,(%dx)
f01004cc:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f01004d3:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004d7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004dd:	ee                   	out    %al,(%dx)
f01004de:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004e5:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004e9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004ef:	ee                   	out    %al,(%dx)
f01004f0:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004fa:	89 c2                	mov    %eax,%edx
f01004fc:	ec                   	in     (%dx),%al
f01004fd:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100500:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100503:	3c ff                	cmp    $0xff,%al
f0100505:	0f 95 c0             	setne  %al
f0100508:	0f b6 c0             	movzbl %al,%eax
f010050b:	a3 04 20 25 f0       	mov    %eax,0xf0252004
f0100510:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100517:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100520:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010052a:	89 c2                	mov    %eax,%edx
f010052c:	ec                   	in     (%dx),%al
f010052d:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100530:	90                   	nop
f0100531:	c9                   	leave  
f0100532:	c3                   	ret    

f0100533 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100533:	55                   	push   %ebp
f0100534:	89 e5                	mov    %esp,%ebp
f0100536:	83 ec 20             	sub    $0x20,%esp
f0100539:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100543:	89 c2                	mov    %eax,%edx
f0100545:	ec                   	in     (%dx),%al
f0100546:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100549:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100550:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100553:	89 c2                	mov    %eax,%edx
f0100555:	ec                   	in     (%dx),%al
f0100556:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100559:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100563:	89 c2                	mov    %eax,%edx
f0100565:	ec                   	in     (%dx),%al
f0100566:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100569:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100573:	89 c2                	mov    %eax,%edx
f0100575:	ec                   	in     (%dx),%al
f0100576:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100579:	90                   	nop
f010057a:	c9                   	leave  
f010057b:	c3                   	ret    

f010057c <lpt_putc>:

static void
lpt_putc(int c)
{
f010057c:	55                   	push   %ebp
f010057d:	89 e5                	mov    %esp,%ebp
f010057f:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100589:	eb 08                	jmp    f0100593 <lpt_putc+0x17>
		delay();
f010058b:	e8 a3 ff ff ff       	call   f0100533 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100590:	ff 45 fc             	incl   -0x4(%ebp)
f0100593:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010059d:	89 c2                	mov    %eax,%edx
f010059f:	ec                   	in     (%dx),%al
f01005a0:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005a3:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005a6:	84 c0                	test   %al,%al
f01005a8:	78 09                	js     f01005b3 <lpt_putc+0x37>
f01005aa:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01005b1:	7e d8                	jle    f010058b <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01005b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01005b6:	0f b6 c0             	movzbl %al,%eax
f01005b9:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01005c0:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c3:	8a 45 e8             	mov    -0x18(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
f01005ca:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01005d1:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01005d5:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005db:	ee                   	out    %al,(%dx)
f01005dc:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005e3:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005ed:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005ee:	90                   	nop
f01005ef:	c9                   	leave  
f01005f0:	c3                   	ret    

f01005f1 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005f1:	55                   	push   %ebp
f01005f2:	89 e5                	mov    %esp,%ebp
f01005f4:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005f7:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100601:	66 8b 00             	mov    (%eax),%ax
f0100604:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100608:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010060b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100613:	66 8b 00             	mov    (%eax),%ax
f0100616:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010061a:	74 13                	je     f010062f <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010061c:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100623:	c7 05 08 20 25 f0 b4 	movl   $0x3b4,0xf0252008
f010062a:	03 00 00 
f010062d:	eb 14                	jmp    f0100643 <cga_init+0x52>
	} else {
		*cp = was;
f010062f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100632:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100636:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100639:	c7 05 08 20 25 f0 d4 	movl   $0x3d4,0xf0252008
f0100640:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100643:	a1 08 20 25 f0       	mov    0xf0252008,%eax
f0100648:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010064b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f010064f:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100655:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f0100656:	a1 08 20 25 f0       	mov    0xf0252008,%eax
f010065b:	40                   	inc    %eax
f010065c:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100662:	89 c2                	mov    %eax,%edx
f0100664:	ec                   	in     (%dx),%al
f0100665:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100668:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010066b:	0f b6 c0             	movzbl %al,%eax
f010066e:	c1 e0 08             	shl    $0x8,%eax
f0100671:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f0100674:	a1 08 20 25 f0       	mov    0xf0252008,%eax
f0100679:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010067c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100680:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100683:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100686:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100687:	a1 08 20 25 f0       	mov    0xf0252008,%eax
f010068c:	40                   	inc    %eax
f010068d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100693:	89 c2                	mov    %eax,%edx
f0100695:	ec                   	in     (%dx),%al
f0100696:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100699:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010069c:	0f b6 c0             	movzbl %al,%eax
f010069f:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006a5:	a3 0c 20 25 f0       	mov    %eax,0xf025200c
	crt_pos = pos;
f01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01006ad:	66 a3 10 20 25 f0    	mov    %ax,0xf0252010
}
f01006b3:	90                   	nop
f01006b4:	c9                   	leave  
f01006b5:	c3                   	ret    

f01006b6 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01006b6:	55                   	push   %ebp
f01006b7:	89 e5                	mov    %esp,%ebp
f01006b9:	53                   	push   %ebx
f01006ba:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01006bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006c0:	b0 00                	mov    $0x0,%al
f01006c2:	85 c0                	test   %eax,%eax
f01006c4:	75 07                	jne    f01006cd <cga_putc+0x17>
		c |= 0x0700;
f01006c6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01006cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006d0:	0f b6 c0             	movzbl %al,%eax
f01006d3:	83 f8 0a             	cmp    $0xa,%eax
f01006d6:	74 77                	je     f010074f <cga_putc+0x99>
f01006d8:	83 f8 0a             	cmp    $0xa,%eax
f01006db:	7f 13                	jg     f01006f0 <cga_putc+0x3a>
f01006dd:	83 f8 08             	cmp    $0x8,%eax
f01006e0:	74 2e                	je     f0100710 <cga_putc+0x5a>
f01006e2:	83 f8 09             	cmp    $0x9,%eax
f01006e5:	0f 84 a8 00 00 00    	je     f0100793 <cga_putc+0xdd>
f01006eb:	e9 22 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
f01006f0:	3d e4 00 00 00       	cmp    $0xe4,%eax
f01006f5:	0f 84 de 00 00 00    	je     f01007d9 <cga_putc+0x123>
f01006fb:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100700:	0f 84 f1 00 00 00    	je     f01007f7 <cga_putc+0x141>
f0100706:	83 f8 0d             	cmp    $0xd,%eax
f0100709:	74 5d                	je     f0100768 <cga_putc+0xb2>
f010070b:	e9 02 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100710:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100716:	66 85 c0             	test   %ax,%ax
f0100719:	0f 84 4f 01 00 00    	je     f010086e <cga_putc+0x1b8>
			crt_pos--;
f010071f:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100725:	48                   	dec    %eax
f0100726:	66 a3 10 20 25 f0    	mov    %ax,0xf0252010
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010072c:	8b 15 0c 20 25 f0    	mov    0xf025200c,%edx
f0100732:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100738:	0f b7 c0             	movzwl %ax,%eax
f010073b:	01 c0                	add    %eax,%eax
f010073d:	01 c2                	add    %eax,%edx
f010073f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100742:	b0 00                	mov    $0x0,%al
f0100744:	83 c8 20             	or     $0x20,%eax
f0100747:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010074a:	e9 1f 01 00 00       	jmp    f010086e <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f010074f:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100755:	83 c0 50             	add    $0x50,%eax
f0100758:	66 a3 10 20 25 f0    	mov    %ax,0xf0252010
		text_length = 0;
f010075e:	c7 05 00 20 25 f0 00 	movl   $0x0,0xf0252000
f0100765:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100768:	66 8b 0d 10 20 25 f0 	mov    0xf0252010,%cx
f010076f:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100775:	bb 50 00 00 00       	mov    $0x50,%ebx
f010077a:	ba 00 00 00 00       	mov    $0x0,%edx
f010077f:	66 f7 f3             	div    %bx
f0100782:	89 d0                	mov    %edx,%eax
f0100784:	29 c1                	sub    %eax,%ecx
f0100786:	89 c8                	mov    %ecx,%eax
f0100788:	66 a3 10 20 25 f0    	mov    %ax,0xf0252010
		break;
f010078e:	e9 e5 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100793:	83 ec 0c             	sub    $0xc,%esp
f0100796:	6a 20                	push   $0x20
f0100798:	e8 ba 05 00 00       	call   f0100d57 <cons_putc>
f010079d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007a0:	83 ec 0c             	sub    $0xc,%esp
f01007a3:	6a 20                	push   $0x20
f01007a5:	e8 ad 05 00 00       	call   f0100d57 <cons_putc>
f01007aa:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ad:	83 ec 0c             	sub    $0xc,%esp
f01007b0:	6a 20                	push   $0x20
f01007b2:	e8 a0 05 00 00       	call   f0100d57 <cons_putc>
f01007b7:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ba:	83 ec 0c             	sub    $0xc,%esp
f01007bd:	6a 20                	push   $0x20
f01007bf:	e8 93 05 00 00       	call   f0100d57 <cons_putc>
f01007c4:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007c7:	83 ec 0c             	sub    $0xc,%esp
f01007ca:	6a 20                	push   $0x20
f01007cc:	e8 86 05 00 00       	call   f0100d57 <cons_putc>
f01007d1:	83 c4 10             	add    $0x10,%esp
		break;
f01007d4:	e9 9f 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f01007d9:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f01007df:	66 85 c0             	test   %ax,%ax
f01007e2:	0f 84 89 00 00 00    	je     f0100871 <cga_putc+0x1bb>
		     crt_pos--;
f01007e8:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f01007ee:	48                   	dec    %eax
f01007ef:	66 a3 10 20 25 f0    	mov    %ax,0xf0252010
		     break;
f01007f5:	eb 7a                	jmp    f0100871 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f01007f7:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f01007fd:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100801:	77 71                	ja     f0100874 <cga_putc+0x1be>
			     crt_pos++;
f0100803:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100809:	40                   	inc    %eax
f010080a:	66 a3 10 20 25 f0    	mov    %ax,0xf0252010
			     break;
f0100810:	eb 62                	jmp    f0100874 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100812:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100819:	74 5c                	je     f0100877 <cga_putc+0x1c1>
f010081b:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100822:	74 53                	je     f0100877 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100824:	8b 0d 0c 20 25 f0    	mov    0xf025200c,%ecx
f010082a:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100830:	8d 50 01             	lea    0x1(%eax),%edx
f0100833:	66 89 15 10 20 25 f0 	mov    %dx,0xf0252010
f010083a:	0f b7 c0             	movzwl %ax,%eax
f010083d:	01 c0                	add    %eax,%eax
f010083f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100848:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f010084e:	0f b7 c0             	movzwl %ax,%eax
f0100851:	8b 15 00 20 25 f0    	mov    0xf0252000,%edx
f0100857:	81 c2 80 07 00 00    	add    $0x780,%edx
f010085d:	39 d0                	cmp    %edx,%eax
f010085f:	7e 16                	jle    f0100877 <cga_putc+0x1c1>
				text_length++;
f0100861:	a1 00 20 25 f0       	mov    0xf0252000,%eax
f0100866:	40                   	inc    %eax
f0100867:	a3 00 20 25 f0       	mov    %eax,0xf0252000
		}
		break;
f010086c:	eb 09                	jmp    f0100877 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010086e:	90                   	nop
f010086f:	eb 07                	jmp    f0100878 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f0100871:	90                   	nop
f0100872:	eb 04                	jmp    f0100878 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f0100874:	90                   	nop
f0100875:	eb 01                	jmp    f0100878 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f0100877:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100878:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f010087e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100882:	76 58                	jbe    f01008dc <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100884:	a1 0c 20 25 f0       	mov    0xf025200c,%eax
f0100889:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010088f:	a1 0c 20 25 f0       	mov    0xf025200c,%eax
f0100894:	83 ec 04             	sub    $0x4,%esp
f0100897:	68 00 0f 00 00       	push   $0xf00
f010089c:	52                   	push   %edx
f010089d:	50                   	push   %eax
f010089e:	e8 2b e7 02 00       	call   f012efce <memcpy>
f01008a3:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008a6:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01008ad:	eb 15                	jmp    f01008c4 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01008af:	8b 15 0c 20 25 f0    	mov    0xf025200c,%edx
f01008b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01008b8:	01 c0                	add    %eax,%eax
f01008ba:	01 d0                	add    %edx,%eax
f01008bc:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008c1:	ff 45 f4             	incl   -0xc(%ebp)
f01008c4:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01008cb:	7e e2                	jle    f01008af <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01008cd:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f01008d3:	83 e8 50             	sub    $0x50,%eax
f01008d6:	66 a3 10 20 25 f0    	mov    %ax,0xf0252010
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01008dc:	a1 08 20 25 f0       	mov    0xf0252008,%eax
f01008e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01008e4:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01008e8:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008ee:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008ef:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f01008f5:	66 c1 e8 08          	shr    $0x8,%ax
f01008f9:	0f b6 c0             	movzbl %al,%eax
f01008fc:	8b 15 08 20 25 f0    	mov    0xf0252008,%edx
f0100902:	42                   	inc    %edx
f0100903:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100906:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100909:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010090c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010090f:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100910:	a1 08 20 25 f0       	mov    0xf0252008,%eax
f0100915:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100918:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010091c:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010091f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100922:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100923:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100929:	0f b6 c0             	movzbl %al,%eax
f010092c:	8b 15 08 20 25 f0    	mov    0xf0252008,%edx
f0100932:	42                   	inc    %edx
f0100933:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100936:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100939:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010093c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010093f:	ee                   	out    %al,(%dx)
}
f0100940:	90                   	nop
f0100941:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100944:	c9                   	leave  
f0100945:	c3                   	ret    

f0100946 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100946:	55                   	push   %ebp
f0100947:	89 e5                	mov    %esp,%ebp
f0100949:	83 ec 28             	sub    $0x28,%esp
f010094c:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	ec                   	in     (%dx),%al
f0100959:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010095c:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010095f:	0f b6 c0             	movzbl %al,%eax
f0100962:	83 e0 01             	and    $0x1,%eax
f0100965:	85 c0                	test   %eax,%eax
f0100967:	75 0a                	jne    f0100973 <kbd_proc_data+0x2d>
		return -1;
f0100969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010096e:	e9 2a 02 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
f0100973:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010097a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010097d:	89 c2                	mov    %eax,%edx
f010097f:	ec                   	in     (%dx),%al
f0100980:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100983:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100986:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100989:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010098d:	75 17                	jne    f01009a6 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010098f:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f0100994:	83 c8 40             	or     $0x40,%eax
f0100997:	a3 28 22 25 f0       	mov    %eax,0xf0252228
		return 0;
f010099c:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a1:	e9 f7 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01009a6:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009a9:	84 c0                	test   %al,%al
f01009ab:	79 44                	jns    f01009f1 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01009ad:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f01009b2:	83 e0 40             	and    $0x40,%eax
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	75 08                	jne    f01009c1 <kbd_proc_data+0x7b>
f01009b9:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009bc:	83 e0 7f             	and    $0x7f,%eax
f01009bf:	eb 03                	jmp    f01009c4 <kbd_proc_data+0x7e>
f01009c1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009c4:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01009c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009cb:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f01009d1:	83 c8 40             	or     $0x40,%eax
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	f7 d0                	not    %eax
f01009d9:	89 c2                	mov    %eax,%edx
f01009db:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f01009e0:	21 d0                	and    %edx,%eax
f01009e2:	a3 28 22 25 f0       	mov    %eax,0xf0252228
		return 0;
f01009e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01009ec:	e9 ac 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f01009f1:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f01009f6:	83 e0 40             	and    $0x40,%eax
f01009f9:	85 c0                	test   %eax,%eax
f01009fb:	74 11                	je     f0100a0e <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009fd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a01:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f0100a06:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a09:	a3 28 22 25 f0       	mov    %eax,0xf0252228
	}

	shift |= shiftcode[data];
f0100a0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a12:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f0100a18:	0f b6 d0             	movzbl %al,%edx
f0100a1b:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f0100a20:	09 d0                	or     %edx,%eax
f0100a22:	a3 28 22 25 f0       	mov    %eax,0xf0252228
	shift ^= togglecode[data];
f0100a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a2b:	8a 80 20 c1 18 f0    	mov    -0xfe73ee0(%eax),%al
f0100a31:	0f b6 d0             	movzbl %al,%edx
f0100a34:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f0100a39:	31 d0                	xor    %edx,%eax
f0100a3b:	a3 28 22 25 f0       	mov    %eax,0xf0252228

	c = charcode[shift & (CTL | SHIFT)][data];
f0100a40:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f0100a45:	83 e0 03             	and    $0x3,%eax
f0100a48:	8b 14 85 20 c5 18 f0 	mov    -0xfe73ae0(,%eax,4),%edx
f0100a4f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a53:	01 d0                	add    %edx,%eax
f0100a55:	8a 00                	mov    (%eax),%al
f0100a57:	0f b6 c0             	movzbl %al,%eax
f0100a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100a5d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a64:	0f 85 9c 00 00 00    	jne    f0100b06 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100a6a:	a1 00 20 25 f0       	mov    0xf0252000,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	0f 8e 85 00 00 00    	jle    f0100afc <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100a77:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100a7d:	0f b7 c0             	movzwl %ax,%eax
f0100a80:	8b 15 00 20 25 f0    	mov    0xf0252000,%edx
f0100a86:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a8c:	39 d0                	cmp    %edx,%eax
f0100a8e:	75 0a                	jne    f0100a9a <kbd_proc_data+0x154>
				return 0;
f0100a90:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a95:	e9 03 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a9a:	a1 00 20 25 f0       	mov    0xf0252000,%eax
f0100a9f:	48                   	dec    %eax
f0100aa0:	a3 00 20 25 f0       	mov    %eax,0xf0252000
				int crt_pos_Length = crt_pos - 1925;
f0100aa5:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100aab:	0f b7 c0             	movzwl %ax,%eax
f0100aae:	2d 85 07 00 00       	sub    $0x785,%eax
f0100ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100ab6:	66 a1 10 20 25 f0    	mov    0xf0252010,%ax
f0100abc:	0f b7 c0             	movzwl %ax,%eax
f0100abf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100ac2:	eb 26                	jmp    f0100aea <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100ac4:	8b 15 0c 20 25 f0    	mov    0xf025200c,%edx
f0100aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100acd:	01 c0                	add    %eax,%eax
f0100acf:	01 c2                	add    %eax,%edx
f0100ad1:	a1 0c 20 25 f0       	mov    0xf025200c,%eax
f0100ad6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100ad9:	41                   	inc    %ecx
f0100ada:	01 c9                	add    %ecx,%ecx
f0100adc:	01 c8                	add    %ecx,%eax
f0100ade:	66 8b 00             	mov    (%eax),%ax
f0100ae1:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100ae4:	ff 45 e8             	incl   -0x18(%ebp)
f0100ae7:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100aea:	a1 00 20 25 f0       	mov    0xf0252000,%eax
f0100aef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100af2:	7e d0                	jle    f0100ac4 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100af7:	e9 a1 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100afc:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b01:	e9 97 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b06:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f0100b0b:	83 e0 08             	and    $0x8,%eax
f0100b0e:	85 c0                	test   %eax,%eax
f0100b10:	74 22                	je     f0100b34 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b12:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b16:	7e 0c                	jle    f0100b24 <kbd_proc_data+0x1de>
f0100b18:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b1c:	7f 06                	jg     f0100b24 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b1e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b22:	eb 10                	jmp    f0100b34 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b24:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b28:	7e 0a                	jle    f0100b34 <kbd_proc_data+0x1ee>
f0100b2a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b2e:	7f 04                	jg     f0100b34 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b30:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b34:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f0100b39:	83 f8 10             	cmp    $0x10,%eax
f0100b3c:	75 13                	jne    f0100b51 <kbd_proc_data+0x20b>
f0100b3e:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100b42:	7e 0d                	jle    f0100b51 <kbd_proc_data+0x20b>
f0100b44:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100b48:	7f 07                	jg     f0100b51 <kbd_proc_data+0x20b>
		return 0;
f0100b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b4f:	eb 4c                	jmp    f0100b9d <kbd_proc_data+0x257>
	if (c == 255)
f0100b51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100b58:	75 07                	jne    f0100b61 <kbd_proc_data+0x21b>
		return 0;
f0100b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b5f:	eb 3c                	jmp    f0100b9d <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100b61:	a1 28 22 25 f0       	mov    0xf0252228,%eax
f0100b66:	f7 d0                	not    %eax
f0100b68:	83 e0 06             	and    $0x6,%eax
f0100b6b:	85 c0                	test   %eax,%eax
f0100b6d:	75 2b                	jne    f0100b9a <kbd_proc_data+0x254>
f0100b6f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b76:	75 22                	jne    f0100b9a <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100b78:	83 ec 0c             	sub    $0xc,%esp
f0100b7b:	68 bd fe 12 f0       	push   $0xf012febd
f0100b80:	e8 ac 02 00 00       	call   f0100e31 <cprintf>
f0100b85:	83 c4 10             	add    $0x10,%esp
f0100b88:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b8f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b93:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b99:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b9d:	c9                   	leave  
f0100b9e:	c3                   	ret    

f0100b9f <kbd_intr>:

void
kbd_intr(void)
{
f0100b9f:	55                   	push   %ebp
f0100ba0:	89 e5                	mov    %esp,%ebp
f0100ba2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ba5:	83 ec 0c             	sub    $0xc,%esp
f0100ba8:	68 46 09 10 f0       	push   $0xf0100946
f0100bad:	e8 0c 00 00 00       	call   f0100bbe <cons_intr>
f0100bb2:	83 c4 10             	add    $0x10,%esp
}
f0100bb5:	90                   	nop
f0100bb6:	c9                   	leave  
f0100bb7:	c3                   	ret    

f0100bb8 <kbd_init>:

void
kbd_init(void)
{
f0100bb8:	55                   	push   %ebp
f0100bb9:	89 e5                	mov    %esp,%ebp
}
f0100bbb:	90                   	nop
f0100bbc:	5d                   	pop    %ebp
f0100bbd:	c3                   	ret    

f0100bbe <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100bbe:	55                   	push   %ebp
f0100bbf:	89 e5                	mov    %esp,%ebp
f0100bc1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100bc4:	eb 35                	jmp    f0100bfb <cons_intr+0x3d>
		if (c == 0)
f0100bc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bca:	75 02                	jne    f0100bce <cons_intr+0x10>
			continue;
f0100bcc:	eb 2d                	jmp    f0100bfb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100bce:	a1 24 22 25 f0       	mov    0xf0252224,%eax
f0100bd3:	8d 50 01             	lea    0x1(%eax),%edx
f0100bd6:	89 15 24 22 25 f0    	mov    %edx,0xf0252224
f0100bdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100bdf:	88 90 20 20 25 f0    	mov    %dl,-0xfdadfe0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100be5:	a1 24 22 25 f0       	mov    0xf0252224,%eax
f0100bea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bef:	75 0a                	jne    f0100bfb <cons_intr+0x3d>
			cons.wpos = 0;
f0100bf1:	c7 05 24 22 25 f0 00 	movl   $0x0,0xf0252224
f0100bf8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100bfe:	ff d0                	call   *%eax
f0100c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c07:	75 bd                	jne    f0100bc6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c09:	90                   	nop
f0100c0a:	c9                   	leave  
f0100c0b:	c3                   	ret    

f0100c0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c0c:	55                   	push   %ebp
f0100c0d:	89 e5                	mov    %esp,%ebp
f0100c0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c12:	e8 33 f8 ff ff       	call   f010044a <serial_intr>
	kbd_intr();
f0100c17:	e8 83 ff ff ff       	call   f0100b9f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c1c:	8b 15 20 22 25 f0    	mov    0xf0252220,%edx
f0100c22:	a1 24 22 25 f0       	mov    0xf0252224,%eax
f0100c27:	39 c2                	cmp    %eax,%edx
f0100c29:	74 35                	je     f0100c60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c2b:	a1 20 22 25 f0       	mov    0xf0252220,%eax
f0100c30:	8d 50 01             	lea    0x1(%eax),%edx
f0100c33:	89 15 20 22 25 f0    	mov    %edx,0xf0252220
f0100c39:	8a 80 20 20 25 f0    	mov    -0xfdadfe0(%eax),%al
f0100c3f:	0f b6 c0             	movzbl %al,%eax
f0100c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100c45:	a1 20 22 25 f0       	mov    0xf0252220,%eax
f0100c4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c4f:	75 0a                	jne    f0100c5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100c51:	c7 05 20 22 25 f0 00 	movl   $0x0,0xf0252220
f0100c58:	00 00 00 
		return c;
f0100c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c5e:	eb 05                	jmp    f0100c65 <cons_getc+0x59>
	}
	return 0;
f0100c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c65:	c9                   	leave  
f0100c66:	c3                   	ret    

f0100c67 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100c67:	55                   	push   %ebp
f0100c68:	89 e5                	mov    %esp,%ebp
f0100c6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100c74:	a1 04 20 25 f0       	mov    0xf0252004,%eax
f0100c79:	85 c0                	test   %eax,%eax
f0100c7b:	74 41                	je     f0100cbe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100c7d:	e8 86 f7 ff ff       	call   f0100408 <serial_proc_data>
f0100c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c89:	74 33                	je     f0100cbe <cons_getc2+0x57>
				if (c1 == 0)
f0100c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c8f:	74 2d                	je     f0100cbe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c91:	a1 24 22 25 f0       	mov    0xf0252224,%eax
f0100c96:	8d 50 01             	lea    0x1(%eax),%edx
f0100c99:	89 15 24 22 25 f0    	mov    %edx,0xf0252224
f0100c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ca2:	88 90 20 20 25 f0    	mov    %dl,-0xfdadfe0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100ca8:	a1 24 22 25 f0       	mov    0xf0252224,%eax
f0100cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb2:	75 0a                	jne    f0100cbe <cons_getc2+0x57>
						cons.wpos = 0;
f0100cb4:	c7 05 24 22 25 f0 00 	movl   $0x0,0xf0252224
f0100cbb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100cbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100cc5:	e8 7c fc ff ff       	call   f0100946 <kbd_proc_data>
f0100cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100ccd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100cd1:	74 33                	je     f0100d06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100cd7:	74 2d                	je     f0100d06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100cd9:	a1 24 22 25 f0       	mov    0xf0252224,%eax
f0100cde:	8d 50 01             	lea    0x1(%eax),%edx
f0100ce1:	89 15 24 22 25 f0    	mov    %edx,0xf0252224
f0100ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cea:	88 90 20 20 25 f0    	mov    %dl,-0xfdadfe0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100cf0:	a1 24 22 25 f0       	mov    0xf0252224,%eax
f0100cf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cfa:	75 0a                	jne    f0100d06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100cfc:	c7 05 24 22 25 f0 00 	movl   $0x0,0xf0252224
f0100d03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d0a:	7e 44                	jle    f0100d50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d0c:	8b 15 20 22 25 f0    	mov    0xf0252220,%edx
f0100d12:	a1 24 22 25 f0       	mov    0xf0252224,%eax
f0100d17:	39 c2                	cmp    %eax,%edx
f0100d19:	74 35                	je     f0100d50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d1b:	a1 20 22 25 f0       	mov    0xf0252220,%eax
f0100d20:	8d 50 01             	lea    0x1(%eax),%edx
f0100d23:	89 15 20 22 25 f0    	mov    %edx,0xf0252220
f0100d29:	8a 80 20 20 25 f0    	mov    -0xfdadfe0(%eax),%al
f0100d2f:	0f b6 c0             	movzbl %al,%eax
f0100d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d35:	a1 20 22 25 f0       	mov    0xf0252220,%eax
f0100d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d3f:	75 0a                	jne    f0100d4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100d41:	c7 05 20 22 25 f0 00 	movl   $0x0,0xf0252220
f0100d48:	00 00 00 
			return c;
f0100d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d4e:	eb 05                	jmp    f0100d55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100d50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
f0100d5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100d5d:	ff 75 08             	pushl  0x8(%ebp)
f0100d60:	e8 17 f8 ff ff       	call   f010057c <lpt_putc>
f0100d65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100d68:	83 ec 0c             	sub    $0xc,%esp
f0100d6b:	ff 75 08             	pushl  0x8(%ebp)
f0100d6e:	e8 43 f9 ff ff       	call   f01006b6 <cga_putc>
f0100d73:	83 c4 10             	add    $0x10,%esp
}
f0100d76:	90                   	nop
f0100d77:	c9                   	leave  
f0100d78:	c3                   	ret    

f0100d79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100d7f:	e8 6d f8 ff ff       	call   f01005f1 <cga_init>
	kbd_init();
f0100d84:	e8 2f fe ff ff       	call   f0100bb8 <kbd_init>
	serial_init();
f0100d89:	e8 de f6 ff ff       	call   f010046c <serial_init>

	if (!serial_exists)
f0100d8e:	a1 04 20 25 f0       	mov    0xf0252004,%eax
f0100d93:	85 c0                	test   %eax,%eax
f0100d95:	75 10                	jne    f0100da7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d97:	83 ec 0c             	sub    $0xc,%esp
f0100d9a:	68 c9 fe 12 f0       	push   $0xf012fec9
f0100d9f:	e8 8d 00 00 00       	call   f0100e31 <cprintf>
f0100da4:	83 c4 10             	add    $0x10,%esp
}
f0100da7:	90                   	nop
f0100da8:	c9                   	leave  
f0100da9:	c3                   	ret    

f0100daa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100daa:	55                   	push   %ebp
f0100dab:	89 e5                	mov    %esp,%ebp
f0100dad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100db0:	83 ec 0c             	sub    $0xc,%esp
f0100db3:	ff 75 08             	pushl  0x8(%ebp)
f0100db6:	e8 9c ff ff ff       	call   f0100d57 <cons_putc>
f0100dbb:	83 c4 10             	add    $0x10,%esp
}
f0100dbe:	90                   	nop
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <getchar>:

int
getchar(void)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100dc7:	e8 40 fe ff ff       	call   f0100c0c <cons_getc>
f0100dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd3:	74 f2                	je     f0100dc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100dd8:	c9                   	leave  
f0100dd9:	c3                   	ret    

f0100dda <iscons>:

int
iscons(int fdnum)
{
f0100dda:	55                   	push   %ebp
f0100ddb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100ddd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100de2:	5d                   	pop    %ebp
f0100de3:	c3                   	ret    

f0100de4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100de4:	55                   	push   %ebp
f0100de5:	89 e5                	mov    %esp,%ebp
f0100de7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100dea:	83 ec 0c             	sub    $0xc,%esp
f0100ded:	ff 75 08             	pushl  0x8(%ebp)
f0100df0:	e8 b5 ff ff ff       	call   f0100daa <cputchar>
f0100df5:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100df8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dfb:	8b 00                	mov    (%eax),%eax
f0100dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e03:	89 10                	mov    %edx,(%eax)
}
f0100e05:	90                   	nop
f0100e06:	c9                   	leave  
f0100e07:	c3                   	ret    

f0100e08 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e08:	55                   	push   %ebp
f0100e09:	89 e5                	mov    %esp,%ebp
f0100e0b:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e15:	ff 75 0c             	pushl  0xc(%ebp)
f0100e18:	ff 75 08             	pushl  0x8(%ebp)
f0100e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e1e:	50                   	push   %eax
f0100e1f:	68 e4 0d 10 f0       	push   $0xf0100de4
f0100e24:	e8 d9 d8 02 00       	call   f012e702 <vprintfmt>
f0100e29:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e2f:	c9                   	leave  
f0100e30:	c3                   	ret    

f0100e31 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100e37:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e40:	83 ec 08             	sub    $0x8,%esp
f0100e43:	ff 75 f4             	pushl  -0xc(%ebp)
f0100e46:	50                   	push   %eax
f0100e47:	e8 bc ff ff ff       	call   f0100e08 <vcprintf>
f0100e4c:	83 c4 10             	add    $0x10,%esp
f0100e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100e55:	c9                   	leave  
f0100e56:	c3                   	ret    

f0100e57 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100e57:	55                   	push   %ebp
f0100e58:	89 e5                	mov    %esp,%ebp
f0100e5a:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100e5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e64:	eb 10                	jmp    f0100e76 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100e66:	83 ec 0c             	sub    $0xc,%esp
f0100e69:	6a 08                	push   $0x8
f0100e6b:	e8 3a ff ff ff       	call   f0100daa <cputchar>
f0100e70:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100e73:	ff 45 f4             	incl   -0xc(%ebp)
f0100e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e79:	8b 00                	mov    (%eax),%eax
f0100e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100e7e:	7f e6                	jg     f0100e66 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e83:	c1 e0 0a             	shl    $0xa,%eax
f0100e86:	05 40 3f 2d f0       	add    $0xf02d3f40,%eax
f0100e8b:	83 ec 0c             	sub    $0xc,%esp
f0100e8e:	50                   	push   %eax
f0100e8f:	e8 1c df 02 00       	call   f012edb0 <strlen>
f0100e94:	83 c4 10             	add    $0x10,%esp
f0100e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e9a:	83 ec 04             	sub    $0x4,%esp
f0100e9d:	68 00 04 00 00       	push   $0x400
f0100ea2:	68 40 8f 2d f0       	push   $0xf02d8f40
f0100ea7:	ff 75 10             	pushl  0x10(%ebp)
f0100eaa:	e8 1f e1 02 00       	call   f012efce <memcpy>
f0100eaf:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ebb:	eb 52                	jmp    f0100f0f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ec0:	8b 00                	mov    (%eax),%eax
f0100ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ec5:	c1 e2 0a             	shl    $0xa,%edx
f0100ec8:	01 d0                	add    %edx,%eax
f0100eca:	05 40 3f 2d f0       	add    $0xf02d3f40,%eax
f0100ecf:	8a 00                	mov    (%eax),%al
f0100ed1:	0f be c0             	movsbl %al,%eax
f0100ed4:	83 ec 0c             	sub    $0xc,%esp
f0100ed7:	50                   	push   %eax
f0100ed8:	e8 cd fe ff ff       	call   f0100daa <cputchar>
f0100edd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	89 c2                	mov    %eax,%edx
f0100ee7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eea:	01 c2                	add    %eax,%edx
f0100eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100ef4:	c1 e1 0a             	shl    $0xa,%ecx
f0100ef7:	01 c8                	add    %ecx,%eax
f0100ef9:	05 40 3f 2d f0       	add    $0xf02d3f40,%eax
f0100efe:	8a 00                	mov    (%eax),%al
f0100f00:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f05:	8b 00                	mov    (%eax),%eax
f0100f07:	8d 50 01             	lea    0x1(%eax),%edx
f0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f0d:	89 10                	mov    %edx,(%eax)
f0100f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f12:	8b 00                	mov    (%eax),%eax
f0100f14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f17:	7c a4                	jl     f0100ebd <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f19:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f1f:	89 10                	mov    %edx,(%eax)
}
f0100f21:	90                   	nop
f0100f22:	c9                   	leave  
f0100f23:	c3                   	ret    

f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f31:	eb 10                	jmp    f0100f43 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f33:	83 ec 0c             	sub    $0xc,%esp
f0100f36:	6a 08                	push   $0x8
f0100f38:	e8 6d fe ff ff       	call   f0100daa <cputchar>
f0100f3d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100f40:	ff 45 f4             	incl   -0xc(%ebp)
f0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f46:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100f49:	7c e8                	jl     f0100f33 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100f4b:	83 ec 0c             	sub    $0xc,%esp
f0100f4e:	ff 75 0c             	pushl  0xc(%ebp)
f0100f51:	e8 5a de 02 00       	call   f012edb0 <strlen>
f0100f56:	83 c4 10             	add    $0x10,%esp
f0100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f5c:	83 ec 04             	sub    $0x4,%esp
f0100f5f:	68 00 04 00 00       	push   $0x400
f0100f64:	68 40 8f 2d f0       	push   $0xf02d8f40
f0100f69:	ff 75 10             	pushl  0x10(%ebp)
f0100f6c:	e8 5d e0 02 00       	call   f012efce <memcpy>
f0100f71:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f7d:	eb 46                	jmp    f0100fc5 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100f7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f82:	8b 00                	mov    (%eax),%eax
f0100f84:	89 c2                	mov    %eax,%edx
f0100f86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f89:	01 d0                	add    %edx,%eax
f0100f8b:	8a 00                	mov    (%eax),%al
f0100f8d:	0f be c0             	movsbl %al,%eax
f0100f90:	83 ec 0c             	sub    $0xc,%esp
f0100f93:	50                   	push   %eax
f0100f94:	e8 11 fe ff ff       	call   f0100daa <cputchar>
f0100f99:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f9f:	8b 00                	mov    (%eax),%eax
f0100fa1:	89 c2                	mov    %eax,%edx
f0100fa3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100fa6:	01 c2                	add    %eax,%edx
f0100fa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fab:	8b 00                	mov    (%eax),%eax
f0100fad:	89 c1                	mov    %eax,%ecx
f0100faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fb2:	01 c8                	add    %ecx,%eax
f0100fb4:	8a 00                	mov    (%eax),%al
f0100fb6:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fbb:	8b 00                	mov    (%eax),%eax
f0100fbd:	8d 50 01             	lea    0x1(%eax),%edx
f0100fc0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc3:	89 10                	mov    %edx,(%eax)
f0100fc5:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100fcd:	7c b0                	jl     f0100f7f <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100fcf:	8b 45 18             	mov    0x18(%ebp),%eax
f0100fd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100fd5:	89 10                	mov    %edx,(%eax)
}
f0100fd7:	90                   	nop
f0100fd8:	c9                   	leave  
f0100fd9:	c3                   	ret    

f0100fda <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100fda:	55                   	push   %ebp
f0100fdb:	89 e5                	mov    %esp,%ebp
f0100fdd:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fe7:	eb 21                	jmp    f010100a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fec:	c1 e0 0a             	shl    $0xa,%eax
f0100fef:	05 40 af 2b f0       	add    $0xf02baf40,%eax
f0100ff4:	83 ec 04             	sub    $0x4,%esp
f0100ff7:	68 00 04 00 00       	push   $0x400
f0100ffc:	6a 00                	push   $0x0
f0100ffe:	50                   	push   %eax
f0100fff:	e8 9a df 02 00       	call   f012ef9e <memset>
f0101004:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101007:	ff 45 f4             	incl   -0xc(%ebp)
f010100a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010100e:	7e d9                	jle    f0100fe9 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101010:	90                   	nop
f0101011:	c9                   	leave  
f0101012:	c3                   	ret    

f0101013 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101013:	55                   	push   %ebp
f0101014:	89 e5                	mov    %esp,%ebp
f0101016:	57                   	push   %edi
f0101017:	53                   	push   %ebx
f0101018:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f010101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101022:	74 13                	je     f0101037 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101024:	83 ec 08             	sub    $0x8,%esp
f0101027:	ff 75 08             	pushl  0x8(%ebp)
f010102a:	68 e8 fe 12 f0       	push   $0xf012fee8
f010102f:	e8 fd fd ff ff       	call   f0100e31 <cprintf>
f0101034:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0101037:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010103c:	40                   	inc    %eax
f010103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101040:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f0101047:	00 00 00 
f010104a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101050:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101056:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010105c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f010105f:	83 ec 0c             	sub    $0xc,%esp
f0101062:	6a 00                	push   $0x0
f0101064:	e8 71 fd ff ff       	call   f0100dda <iscons>
f0101069:	83 c4 10             	add    $0x10,%esp
f010106c:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f010106f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f0101076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f010107d:	e8 3f fd ff ff       	call   f0100dc1 <getchar>
f0101082:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f0101085:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010108b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101091:	39 c2                	cmp    %eax,%edx
f0101093:	7e 0c                	jle    f01010a1 <command_prompt_readline+0x8e>
			lastIndex = i;
f0101095:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010109b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01010a1:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01010a5:	79 22                	jns    f01010c9 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01010a7:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01010ab:	0f 84 94 0a 00 00    	je     f0101b45 <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01010b1:	83 ec 08             	sub    $0x8,%esp
f01010b4:	ff 75 94             	pushl  -0x6c(%ebp)
f01010b7:	68 eb fe 12 f0       	push   $0xf012feeb
f01010bc:	e8 70 fd ff ff       	call   f0100e31 <cprintf>
f01010c1:	83 c4 10             	add    $0x10,%esp
			return;
f01010c4:	e9 7c 0a 00 00       	jmp    f0101b45 <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f01010c9:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f01010d0:	75 2a                	jne    f01010fc <command_prompt_readline+0xe9>
			if (commandidx)
f01010d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01010d6:	74 03                	je     f01010db <command_prompt_readline+0xc8>
				commandidx--;
f01010d8:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f01010db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01010e1:	50                   	push   %eax
f01010e2:	ff 75 0c             	pushl  0xc(%ebp)
f01010e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01010e8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f01010ee:	50                   	push   %eax
f01010ef:	e8 63 fd ff ff       	call   f0100e57 <clearandwritecommand>
f01010f4:	83 c4 10             	add    $0x10,%esp
f01010f7:	e9 32 0a 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f01010fc:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101103:	75 3b                	jne    f0101140 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f0101105:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010110a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110d:	7d 03                	jge    f0101112 <command_prompt_readline+0xff>
				commandidx++;
f010110f:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101112:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101117:	85 c0                	test   %eax,%eax
f0101119:	0f 88 0f 0a 00 00    	js     f0101b2e <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010111f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101125:	50                   	push   %eax
f0101126:	ff 75 0c             	pushl  0xc(%ebp)
f0101129:	ff 75 f4             	pushl  -0xc(%ebp)
f010112c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101132:	50                   	push   %eax
f0101133:	e8 1f fd ff ff       	call   f0100e57 <clearandwritecommand>
f0101138:	83 c4 10             	add    $0x10,%esp
f010113b:	e9 ee 09 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101140:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101144:	0f 85 6d 07 00 00    	jne    f01018b7 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010114a:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010114e:	0f 84 fc 06 00 00    	je     f0101850 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101154:	83 ec 08             	sub    $0x8,%esp
f0101157:	6a 64                	push   $0x64
f0101159:	68 40 af 2b f0       	push   $0xf02baf40
f010115e:	e8 77 fe ff ff       	call   f0100fda <clear_prefix_list>
f0101163:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101166:	83 ec 0c             	sub    $0xc,%esp
f0101169:	ff 75 0c             	pushl  0xc(%ebp)
f010116c:	e8 3f dc 02 00       	call   f012edb0 <strlen>
f0101171:	83 c4 10             	add    $0x10,%esp
f0101174:	85 c0                	test   %eax,%eax
f0101176:	0f 84 bd 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
f010117c:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101183:	0f 84 b0 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f0101189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101193:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101199:	83 ec 08             	sub    $0x8,%esp
f010119c:	ff 75 0c             	pushl  0xc(%ebp)
f010119f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011a5:	50                   	push   %eax
f01011a6:	e8 54 dc 02 00       	call   f012edff <strcpy>
f01011ab:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01011ae:	83 ec 0c             	sub    $0xc,%esp
f01011b1:	ff 75 0c             	pushl  0xc(%ebp)
f01011b4:	e8 f7 db 02 00       	call   f012edb0 <strlen>
f01011b9:	83 c4 10             	add    $0x10,%esp
f01011bc:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f01011bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01011c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01011c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c8:	01 d0                	add    %edx,%eax
f01011ca:	8a 00                	mov    (%eax),%al
f01011cc:	3c 20                	cmp    $0x20,%al
f01011ce:	0f 84 6b 09 00 00    	je     f0101b3f <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01011d4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01011da:	50                   	push   %eax
f01011db:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f01011e1:	50                   	push   %eax
f01011e2:	68 fb fe 12 f0       	push   $0xf012fefb
f01011e7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011ed:	50                   	push   %eax
f01011ee:	e8 f1 e1 02 00       	call   f012f3e4 <strsplit>
f01011f3:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01011f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f01011fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101203:	83 f8 01             	cmp    $0x1,%eax
f0101206:	0f 8e 28 01 00 00    	jle    f0101334 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f010120c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101212:	83 ec 08             	sub    $0x8,%esp
f0101215:	68 00 ff 12 f0       	push   $0xf012ff00
f010121a:	50                   	push   %eax
f010121b:	e8 9c dc 02 00       	call   f012eebc <strcmp>
f0101220:	83 c4 10             	add    $0x10,%esp
f0101223:	85 c0                	test   %eax,%eax
f0101225:	74 3c                	je     f0101263 <command_prompt_readline+0x250>
f0101227:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010122d:	83 ec 08             	sub    $0x8,%esp
f0101230:	68 04 ff 12 f0       	push   $0xf012ff04
f0101235:	50                   	push   %eax
f0101236:	e8 81 dc 02 00       	call   f012eebc <strcmp>
f010123b:	83 c4 10             	add    $0x10,%esp
f010123e:	85 c0                	test   %eax,%eax
f0101240:	74 21                	je     f0101263 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101242:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101248:	83 ec 08             	sub    $0x8,%esp
f010124b:	68 09 ff 12 f0       	push   $0xf012ff09
f0101250:	50                   	push   %eax
f0101251:	e8 66 dc 02 00       	call   f012eebc <strcmp>
f0101256:	83 c4 10             	add    $0x10,%esp
f0101259:	85 c0                	test   %eax,%eax
f010125b:	74 06                	je     f0101263 <command_prompt_readline+0x250>
						continue;
f010125d:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010125e:	e9 d6 08 00 00       	jmp    f0101b39 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f0101263:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101269:	83 ec 08             	sub    $0x8,%esp
f010126c:	68 09 ff 12 f0       	push   $0xf012ff09
f0101271:	50                   	push   %eax
f0101272:	e8 45 dc 02 00       	call   f012eebc <strcmp>
f0101277:	83 c4 10             	add    $0x10,%esp
f010127a:	85 c0                	test   %eax,%eax
f010127c:	75 09                	jne    f0101287 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f010127e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f0101285:	eb 07                	jmp    f010128e <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f0101287:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f010128e:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101295:	00 00 00 
f0101298:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010129e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01012a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01012a8:	89 d7                	mov    %edx,%edi
f01012aa:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01012ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01012b2:	48                   	dec    %eax
f01012b3:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01012ba:	83 ec 0c             	sub    $0xc,%esp
f01012bd:	50                   	push   %eax
f01012be:	e8 ed da 02 00       	call   f012edb0 <strlen>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	8b 55 90             	mov    -0x70(%ebp),%edx
f01012c9:	29 c2                	sub    %eax,%edx
f01012cb:	89 d0                	mov    %edx,%eax
f01012cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f01012d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01012d7:	eb 1d                	jmp    f01012f6 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f01012d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012dc:	8d 50 01             	lea    0x1(%eax),%edx
f01012df:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01012e2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01012e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01012e8:	01 ca                	add    %ecx,%edx
f01012ea:	8a 12                	mov    (%edx),%dl
f01012ec:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01012f3:	ff 45 d8             	incl   -0x28(%ebp)
f01012f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f9:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01012fc:	7c db                	jl     f01012d9 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01012fe:	83 ec 08             	sub    $0x8,%esp
f0101301:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101307:	50                   	push   %eax
f0101308:	ff 75 0c             	pushl  0xc(%ebp)
f010130b:	e8 ef da 02 00       	call   f012edff <strcpy>
f0101310:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101313:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101319:	48                   	dec    %eax
f010131a:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101321:	83 ec 08             	sub    $0x8,%esp
f0101324:	50                   	push   %eax
f0101325:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010132b:	50                   	push   %eax
f010132c:	e8 ce da 02 00       	call   f012edff <strcpy>
f0101331:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101334:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f010133b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101341:	83 f8 01             	cmp    $0x1,%eax
f0101344:	0f 85 30 01 00 00    	jne    f010147a <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010134a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101351:	e9 0f 01 00 00       	jmp    f0101465 <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101356:	83 ec 0c             	sub    $0xc,%esp
f0101359:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	e8 4b da 02 00       	call   f012edb0 <strlen>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	89 c1                	mov    %eax,%ecx
f010136a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010136d:	89 d0                	mov    %edx,%eax
f010136f:	01 c0                	add    %eax,%eax
f0101371:	01 d0                	add    %edx,%eax
f0101373:	c1 e0 03             	shl    $0x3,%eax
f0101376:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	83 ec 04             	sub    $0x4,%esp
f0101380:	51                   	push   %ecx
f0101381:	50                   	push   %eax
f0101382:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101388:	50                   	push   %eax
f0101389:	e8 66 db 02 00       	call   f012eef4 <strncmp>
f010138e:	83 c4 10             	add    $0x10,%esp
f0101391:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f0101394:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101398:	0f 85 c4 00 00 00    	jne    f0101462 <command_prompt_readline+0x44f>
							it_str = -1;
f010139e:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01013a5:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013ac:	00 00 00 
f01013af:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013b5:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01013bf:	89 d7                	mov    %edx,%edi
f01013c1:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013c3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ca:	eb 2d                	jmp    f01013f9 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f01013cc:	ff 45 dc             	incl   -0x24(%ebp)
f01013cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d2:	89 d0                	mov    %edx,%eax
f01013d4:	01 c0                	add    %eax,%eax
f01013d6:	01 d0                	add    %edx,%eax
f01013d8:	c1 e0 03             	shl    $0x3,%eax
f01013db:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01013ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013f6:	ff 45 cc             	incl   -0x34(%ebp)
f01013f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013fc:	89 d0                	mov    %edx,%eax
f01013fe:	01 c0                	add    %eax,%eax
f0101400:	01 d0                	add    %edx,%eax
f0101402:	c1 e0 03             	shl    $0x3,%eax
f0101405:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010140a:	8b 00                	mov    (%eax),%eax
f010140c:	83 ec 0c             	sub    $0xc,%esp
f010140f:	50                   	push   %eax
f0101410:	e8 9b d9 02 00       	call   f012edb0 <strlen>
f0101415:	83 c4 10             	add    $0x10,%esp
f0101418:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010141b:	7f af                	jg     f01013cc <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010141d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101420:	c1 e0 0a             	shl    $0xa,%eax
f0101423:	05 40 af 2b f0       	add    $0xf02baf40,%eax
f0101428:	83 ec 04             	sub    $0x4,%esp
f010142b:	68 00 04 00 00       	push   $0x400
f0101430:	6a 00                	push   $0x0
f0101432:	50                   	push   %eax
f0101433:	e8 66 db 02 00       	call   f012ef9e <memset>
f0101438:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010143e:	40                   	inc    %eax
f010143f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101442:	c1 e2 0a             	shl    $0xa,%edx
f0101445:	81 c2 40 af 2b f0    	add    $0xf02baf40,%edx
f010144b:	83 ec 04             	sub    $0x4,%esp
f010144e:	50                   	push   %eax
f010144f:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101455:	50                   	push   %eax
f0101456:	52                   	push   %edx
f0101457:	e8 d1 d9 02 00       	call   f012ee2d <strncpy>
f010145c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010145f:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101462:	ff 45 d0             	incl   -0x30(%ebp)
f0101465:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101468:	a1 48 c9 18 f0       	mov    0xf018c948,%eax
f010146d:	39 c2                	cmp    %eax,%edx
f010146f:	0f 82 e1 fe ff ff    	jb     f0101356 <command_prompt_readline+0x343>
f0101475:	e9 fe 02 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f010147a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010147e:	0f 84 7b 01 00 00    	je     f01015ff <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101484:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f010148b:	e9 5c 01 00 00       	jmp    f01015ec <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101499:	50                   	push   %eax
f010149a:	e8 11 d9 02 00       	call   f012edb0 <strlen>
f010149f:	83 c4 10             	add    $0x10,%esp
f01014a2:	89 c1                	mov    %eax,%ecx
f01014a4:	8b 1d 48 ca 18 f0    	mov    0xf018ca48,%ebx
f01014aa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01014ad:	89 d0                	mov    %edx,%eax
f01014af:	01 c0                	add    %eax,%eax
f01014b1:	01 d0                	add    %edx,%eax
f01014b3:	c1 e0 02             	shl    $0x2,%eax
f01014b6:	01 d8                	add    %ebx,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	51                   	push   %ecx
f01014be:	50                   	push   %eax
f01014bf:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014c5:	50                   	push   %eax
f01014c6:	e8 29 da 02 00       	call   f012eef4 <strncmp>
f01014cb:	83 c4 10             	add    $0x10,%esp
f01014ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f01014d1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f01014d5:	0f 85 0e 01 00 00    	jne    f01015e9 <command_prompt_readline+0x5d6>
								it_str = -1;
f01014db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01014e2:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014e9:	00 00 00 
f01014ec:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014f2:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01014fc:	89 d7                	mov    %edx,%edi
f01014fe:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101500:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101506:	83 f8 01             	cmp    $0x1,%eax
f0101509:	7e 39                	jle    f0101544 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010150b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101512:	eb 1d                	jmp    f0101531 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101514:	ff 45 dc             	incl   -0x24(%ebp)
f0101517:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010152a:	01 ca                	add    %ecx,%edx
f010152c:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010152e:	ff 45 c4             	incl   -0x3c(%ebp)
f0101531:	83 ec 0c             	sub    $0xc,%esp
f0101534:	ff 75 0c             	pushl  0xc(%ebp)
f0101537:	e8 74 d8 02 00       	call   f012edb0 <strlen>
f010153c:	83 c4 10             	add    $0x10,%esp
f010153f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101542:	7f d0                	jg     f0101514 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101544:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010154b:	eb 30                	jmp    f010157d <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f010154d:	ff 45 dc             	incl   -0x24(%ebp)
f0101550:	8b 0d 48 ca 18 f0    	mov    0xf018ca48,%ecx
f0101556:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101559:	89 d0                	mov    %edx,%eax
f010155b:	01 c0                	add    %eax,%eax
f010155d:	01 d0                	add    %edx,%eax
f010155f:	c1 e0 02             	shl    $0x2,%eax
f0101562:	01 c8                	add    %ecx,%eax
f0101564:	8b 10                	mov    (%eax),%edx
f0101566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101569:	01 d0                	add    %edx,%eax
f010156b:	8a 00                	mov    (%eax),%al
f010156d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101573:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101576:	01 ca                	add    %ecx,%edx
f0101578:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010157a:	ff 45 c0             	incl   -0x40(%ebp)
f010157d:	8b 0d 48 ca 18 f0    	mov    0xf018ca48,%ecx
f0101583:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101586:	89 d0                	mov    %edx,%eax
f0101588:	01 c0                	add    %eax,%eax
f010158a:	01 d0                	add    %edx,%eax
f010158c:	c1 e0 02             	shl    $0x2,%eax
f010158f:	01 c8                	add    %ecx,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 0c             	sub    $0xc,%esp
f0101596:	50                   	push   %eax
f0101597:	e8 14 d8 02 00       	call   f012edb0 <strlen>
f010159c:	83 c4 10             	add    $0x10,%esp
f010159f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01015a2:	7f a9                	jg     f010154d <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01015a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a7:	c1 e0 0a             	shl    $0xa,%eax
f01015aa:	05 40 af 2b f0       	add    $0xf02baf40,%eax
f01015af:	83 ec 04             	sub    $0x4,%esp
f01015b2:	68 00 04 00 00       	push   $0x400
f01015b7:	6a 00                	push   $0x0
f01015b9:	50                   	push   %eax
f01015ba:	e8 df d9 02 00       	call   f012ef9e <memset>
f01015bf:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01015c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01015c5:	40                   	inc    %eax
f01015c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01015c9:	c1 e2 0a             	shl    $0xa,%edx
f01015cc:	81 c2 40 af 2b f0    	add    $0xf02baf40,%edx
f01015d2:	83 ec 04             	sub    $0x4,%esp
f01015d5:	50                   	push   %eax
f01015d6:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01015dc:	50                   	push   %eax
f01015dd:	52                   	push   %edx
f01015de:	e8 4a d8 02 00       	call   f012ee2d <strncpy>
f01015e3:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01015e6:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015e9:	ff 45 c8             	incl   -0x38(%ebp)
f01015ec:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f01015f1:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f01015f4:	0f 8c 96 fe ff ff    	jl     f0101490 <command_prompt_readline+0x47d>
f01015fa:	e9 79 01 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f01015ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101603:	0f 84 6f 01 00 00    	je     f0101778 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101609:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101610:	e9 53 01 00 00       	jmp    f0101768 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f0101615:	83 ec 0c             	sub    $0xc,%esp
f0101618:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010161e:	50                   	push   %eax
f010161f:	e8 8c d7 02 00       	call   f012edb0 <strlen>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	89 c1                	mov    %eax,%ecx
f0101629:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010162c:	89 d0                	mov    %edx,%eax
f010162e:	01 c0                	add    %eax,%eax
f0101630:	01 d0                	add    %edx,%eax
f0101632:	c1 e0 02             	shl    $0x2,%eax
f0101635:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f010163a:	8b 00                	mov    (%eax),%eax
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	51                   	push   %ecx
f0101640:	50                   	push   %eax
f0101641:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101647:	50                   	push   %eax
f0101648:	e8 a7 d8 02 00       	call   f012eef4 <strncmp>
f010164d:	83 c4 10             	add    $0x10,%esp
f0101650:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101653:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0101657:	0f 85 08 01 00 00    	jne    f0101765 <command_prompt_readline+0x752>
								it_str = -1;
f010165d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101664:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010166b:	00 00 00 
f010166e:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101674:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101679:	b8 00 00 00 00       	mov    $0x0,%eax
f010167e:	89 d7                	mov    %edx,%edi
f0101680:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101682:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101688:	83 f8 01             	cmp    $0x1,%eax
f010168b:	7e 39                	jle    f01016c6 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010168d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0101694:	eb 1d                	jmp    f01016b3 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101696:	ff 45 dc             	incl   -0x24(%ebp)
f0101699:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010169c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010169f:	01 d0                	add    %edx,%eax
f01016a1:	8a 00                	mov    (%eax),%al
f01016a3:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016ac:	01 ca                	add    %ecx,%edx
f01016ae:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016b0:	ff 45 b8             	incl   -0x48(%ebp)
f01016b3:	83 ec 0c             	sub    $0xc,%esp
f01016b6:	ff 75 0c             	pushl  0xc(%ebp)
f01016b9:	e8 f2 d6 02 00       	call   f012edb0 <strlen>
f01016be:	83 c4 10             	add    $0x10,%esp
f01016c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01016c4:	7f d0                	jg     f0101696 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f01016cd:	eb 2d                	jmp    f01016fc <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f01016cf:	ff 45 dc             	incl   -0x24(%ebp)
f01016d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016d5:	89 d0                	mov    %edx,%eax
f01016d7:	01 c0                	add    %eax,%eax
f01016d9:	01 d0                	add    %edx,%eax
f01016db:	c1 e0 02             	shl    $0x2,%eax
f01016de:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f01016e3:	8b 10                	mov    (%eax),%edx
f01016e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e8:	01 d0                	add    %edx,%eax
f01016ea:	8a 00                	mov    (%eax),%al
f01016ec:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016f5:	01 ca                	add    %ecx,%edx
f01016f7:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016ff:	89 d0                	mov    %edx,%eax
f0101701:	01 c0                	add    %eax,%eax
f0101703:	01 d0                	add    %edx,%eax
f0101705:	c1 e0 02             	shl    $0x2,%eax
f0101708:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f010170d:	8b 00                	mov    (%eax),%eax
f010170f:	83 ec 0c             	sub    $0xc,%esp
f0101712:	50                   	push   %eax
f0101713:	e8 98 d6 02 00       	call   f012edb0 <strlen>
f0101718:	83 c4 10             	add    $0x10,%esp
f010171b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010171e:	7f af                	jg     f01016cf <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101723:	c1 e0 0a             	shl    $0xa,%eax
f0101726:	05 40 af 2b f0       	add    $0xf02baf40,%eax
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	68 00 04 00 00       	push   $0x400
f0101733:	6a 00                	push   $0x0
f0101735:	50                   	push   %eax
f0101736:	e8 63 d8 02 00       	call   f012ef9e <memset>
f010173b:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010173e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101741:	40                   	inc    %eax
f0101742:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101745:	c1 e2 0a             	shl    $0xa,%edx
f0101748:	81 c2 40 af 2b f0    	add    $0xf02baf40,%edx
f010174e:	83 ec 04             	sub    $0x4,%esp
f0101751:	50                   	push   %eax
f0101752:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101758:	50                   	push   %eax
f0101759:	52                   	push   %edx
f010175a:	e8 ce d6 02 00       	call   f012ee2d <strncpy>
f010175f:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101762:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101765:	ff 45 bc             	incl   -0x44(%ebp)
f0101768:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010176b:	a1 fc ca 18 f0       	mov    0xf018cafc,%eax
f0101770:	39 c2                	cmp    %eax,%edx
f0101772:	0f 82 9d fe ff ff    	jb     f0101615 <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010177b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010177e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0101782:	0f 84 a6 03 00 00    	je     f0101b2e <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f0101788:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101795:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010179c:	eb 1f                	jmp    f01017bd <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f010179e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017a1:	8d 50 01             	lea    0x1(%eax),%edx
f01017a4:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01017a7:	89 c2                	mov    %eax,%edx
f01017a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ac:	01 c2                	add    %eax,%edx
f01017ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01017b1:	05 40 af 2b f0       	add    $0xf02baf40,%eax
f01017b6:	8a 00                	mov    (%eax),%al
f01017b8:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ba:	ff 45 b0             	incl   -0x50(%ebp)
f01017bd:	83 ec 0c             	sub    $0xc,%esp
f01017c0:	68 40 af 2b f0       	push   $0xf02baf40
f01017c5:	e8 e6 d5 02 00       	call   f012edb0 <strlen>
f01017ca:	83 c4 10             	add    $0x10,%esp
f01017cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01017d0:	7f cc                	jg     f010179e <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017d2:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f01017d9:	eb 10                	jmp    f01017eb <command_prompt_readline+0x7d8>
						cputchar('\b');}
f01017db:	83 ec 0c             	sub    $0xc,%esp
f01017de:	6a 08                	push   $0x8
f01017e0:	e8 c5 f5 ff ff       	call   f0100daa <cputchar>
f01017e5:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017e8:	ff 45 ac             	incl   -0x54(%ebp)
f01017eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01017ee:	3b 45 90             	cmp    -0x70(%ebp),%eax
f01017f1:	7c e8                	jl     f01017db <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01017f3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f01017fa:	eb 1c                	jmp    f0101818 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f01017fc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	01 d0                	add    %edx,%eax
f0101804:	8a 00                	mov    (%eax),%al
f0101806:	0f be c0             	movsbl %al,%eax
f0101809:	83 ec 0c             	sub    $0xc,%esp
f010180c:	50                   	push   %eax
f010180d:	e8 98 f5 ff ff       	call   f0100daa <cputchar>
f0101812:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101815:	ff 45 a8             	incl   -0x58(%ebp)
f0101818:	83 ec 0c             	sub    $0xc,%esp
f010181b:	ff 75 0c             	pushl  0xc(%ebp)
f010181e:	e8 8d d5 02 00       	call   f012edb0 <strlen>
f0101823:	83 c4 10             	add    $0x10,%esp
f0101826:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101829:	7f d1                	jg     f01017fc <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f010182b:	83 ec 0c             	sub    $0xc,%esp
f010182e:	ff 75 0c             	pushl  0xc(%ebp)
f0101831:	e8 7a d5 02 00       	call   f012edb0 <strlen>
f0101836:	83 c4 10             	add    $0x10,%esp
f0101839:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010183f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101845:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010184b:	e9 de 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101850:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101854:	0f 8e d4 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
f010185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101863:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101866:	40                   	inc    %eax
f0101867:	99                   	cltd   
f0101868:	f7 7d ec             	idivl  -0x14(%ebp)
f010186b:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010186e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101871:	c1 e0 0a             	shl    $0xa,%eax
f0101874:	8d 98 40 af 2b f0    	lea    -0xfd450c0(%eax),%ebx
f010187a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0101880:	c1 e0 0a             	shl    $0xa,%eax
f0101883:	05 40 af 2b f0       	add    $0xf02baf40,%eax
f0101888:	83 ec 0c             	sub    $0xc,%esp
f010188b:	50                   	push   %eax
f010188c:	e8 1f d5 02 00       	call   f012edb0 <strlen>
f0101891:	83 c4 10             	add    $0x10,%esp
f0101894:	83 ec 0c             	sub    $0xc,%esp
f0101897:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f010189d:	52                   	push   %edx
f010189e:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01018a4:	52                   	push   %edx
f01018a5:	ff 75 0c             	pushl  0xc(%ebp)
f01018a8:	53                   	push   %ebx
f01018a9:	50                   	push   %eax
f01018aa:	e8 75 f6 ff ff       	call   f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>
f01018af:	83 c4 20             	add    $0x20,%esp
f01018b2:	e9 77 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01018b7:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01018be:	75 2e                	jne    f01018ee <command_prompt_readline+0x8db>
			if (i > 0) {
f01018c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018c6:	85 c0                	test   %eax,%eax
f01018c8:	0f 8e 60 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
				i--;
f01018ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018d4:	48                   	dec    %eax
f01018d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f01018db:	83 ec 0c             	sub    $0xc,%esp
f01018de:	ff 75 94             	pushl  -0x6c(%ebp)
f01018e1:	e8 c4 f4 ff ff       	call   f0100daa <cputchar>
f01018e6:	83 c4 10             	add    $0x10,%esp
f01018e9:	e9 40 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f01018ee:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f01018f5:	75 34                	jne    f010192b <command_prompt_readline+0x918>
			if (i < lastIndex) {
f01018f7:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01018fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101903:	39 c2                	cmp    %eax,%edx
f0101905:	0f 8d 23 02 00 00    	jge    f0101b2e <command_prompt_readline+0xb1b>
				i++;
f010190b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101911:	40                   	inc    %eax
f0101912:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	ff 75 94             	pushl  -0x6c(%ebp)
f010191e:	e8 87 f4 ff ff       	call   f0100daa <cputchar>
f0101923:	83 c4 10             	add    $0x10,%esp
f0101926:	e9 03 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010192b:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101932:	75 4c                	jne    f0101980 <command_prompt_readline+0x96d>
f0101934:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193a:	85 c0                	test   %eax,%eax
f010193c:	7e 42                	jle    f0101980 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f010193e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101944:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101947:	eb 1a                	jmp    f0101963 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101949:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010194c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194f:	01 c2                	add    %eax,%edx
f0101951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101954:	8d 48 01             	lea    0x1(%eax),%ecx
f0101957:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195a:	01 c8                	add    %ecx,%eax
f010195c:	8a 00                	mov    (%eax),%al
f010195e:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101960:	ff 45 a4             	incl   -0x5c(%ebp)
f0101963:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101969:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f010196c:	7e db                	jle    f0101949 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f010196e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101974:	48                   	dec    %eax
f0101975:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010197b:	e9 ae 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101980:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101984:	7e 60                	jle    f01019e6 <command_prompt_readline+0x9d3>
f0101986:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010198c:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101991:	7f 53                	jg     f01019e6 <command_prompt_readline+0x9d3>
f0101993:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010199a:	74 4a                	je     f01019e6 <command_prompt_readline+0x9d3>
f010199c:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01019a3:	74 41                	je     f01019e6 <command_prompt_readline+0x9d3>
			if (echoing)
f01019a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019a9:	74 0e                	je     f01019b9 <command_prompt_readline+0x9a6>
				cputchar(c);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 94             	pushl  -0x6c(%ebp)
f01019b1:	e8 f4 f3 ff ff       	call   f0100daa <cputchar>
f01019b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01019b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019bf:	8d 50 01             	lea    0x1(%eax),%edx
f01019c2:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f01019c8:	89 c2                	mov    %eax,%edx
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	01 d0                	add    %edx,%eax
f01019cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01019d2:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01019d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019da:	40                   	inc    %eax
f01019db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e1:	e9 48 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f01019e6:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f01019ea:	75 60                	jne    f0101a4c <command_prompt_readline+0xa39>
f01019ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f2:	85 c0                	test   %eax,%eax
f01019f4:	7e 56                	jle    f0101a4c <command_prompt_readline+0xa39>

			if (echoing)
f01019f6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019fa:	74 0e                	je     f0101a0a <command_prompt_readline+0x9f7>
				cputchar(c);
f01019fc:	83 ec 0c             	sub    $0xc,%esp
f01019ff:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a02:	e8 a3 f3 ff ff       	call   f0100daa <cputchar>
f0101a07:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a10:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a13:	eb 1a                	jmp    f0101a2f <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1e:	01 c2                	add    %eax,%edx
f0101a20:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a26:	01 c8                	add    %ecx,%eax
f0101a28:	8a 00                	mov    (%eax),%al
f0101a2a:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a2c:	ff 45 a0             	incl   -0x60(%ebp)
f0101a2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a35:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101a38:	7e db                	jle    f0101a15 <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101a3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a40:	48                   	dec    %eax
f0101a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101a47:	e9 e2 00 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101a4c:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101a50:	74 0a                	je     f0101a5c <command_prompt_readline+0xa49>
f0101a52:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101a56:	0f 85 d2 00 00 00    	jne    f0101b2e <command_prompt_readline+0xb1b>

			if (echoing)
f0101a5c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a60:	74 0e                	je     f0101a70 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a68:	e8 3d f3 ff ff       	call   f0100daa <cputchar>
f0101a6d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101a70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a76:	89 c2                	mov    %eax,%edx
f0101a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a7b:	01 d0                	add    %edx,%eax
f0101a7d:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101a80:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101a85:	83 f8 13             	cmp    $0x13,%eax
f0101a88:	75 56                	jne    f0101ae0 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101a8a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101a91:	eb 2d                	jmp    f0101ac0 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101a96:	40                   	inc    %eax
f0101a97:	c1 e0 0a             	shl    $0xa,%eax
f0101a9a:	8d 90 40 3f 2d f0    	lea    -0xfd2c0c0(%eax),%edx
f0101aa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101aa3:	c1 e0 0a             	shl    $0xa,%eax
f0101aa6:	05 40 3f 2d f0       	add    $0xf02d3f40,%eax
f0101aab:	83 ec 04             	sub    $0x4,%esp
f0101aae:	68 00 04 00 00       	push   $0x400
f0101ab3:	52                   	push   %edx
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 14 d5 02 00       	call   f012efce <memcpy>
f0101aba:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101abd:	ff 45 9c             	incl   -0x64(%ebp)
f0101ac0:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101ac4:	7e cd                	jle    f0101a93 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101ac6:	83 ec 04             	sub    $0x4,%esp
f0101ac9:	68 00 04 00 00       	push   $0x400
f0101ace:	ff 75 0c             	pushl  0xc(%ebp)
f0101ad1:	68 40 8b 2d f0       	push   $0xf02d8b40
f0101ad6:	e8 f3 d4 02 00       	call   f012efce <memcpy>
f0101adb:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101ade:	eb 68                	jmp    f0101b48 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101ae0:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101ae5:	c1 e0 0a             	shl    $0xa,%eax
f0101ae8:	05 40 3f 2d f0       	add    $0xf02d3f40,%eax
f0101aed:	83 ec 08             	sub    $0x8,%esp
f0101af0:	ff 75 0c             	pushl  0xc(%ebp)
f0101af3:	50                   	push   %eax
f0101af4:	e8 c3 d3 02 00       	call   f012eebc <strcmp>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	85 c0                	test   %eax,%eax
f0101afe:	74 48                	je     f0101b48 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b00:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b05:	40                   	inc    %eax
f0101b06:	a3 30 c5 18 f0       	mov    %eax,0xf018c530
f0101b0b:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b10:	c1 e0 0a             	shl    $0xa,%eax
f0101b13:	05 40 3f 2d f0       	add    $0xf02d3f40,%eax
f0101b18:	83 ec 04             	sub    $0x4,%esp
f0101b1b:	68 00 04 00 00       	push   $0x400
f0101b20:	ff 75 0c             	pushl  0xc(%ebp)
f0101b23:	50                   	push   %eax
f0101b24:	e8 a5 d4 02 00       	call   f012efce <memcpy>
f0101b29:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b2c:	eb 1a                	jmp    f0101b48 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b34:	e9 44 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101b39:	90                   	nop
f0101b3a:	e9 3e f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101b3f:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101b40:	e9 38 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101b45:	90                   	nop
f0101b46:	eb 01                	jmp    f0101b49 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	90                   	nop

		}
		last_c = c;
	}
}
f0101b49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101b4c:	5b                   	pop    %ebx
f0101b4d:	5f                   	pop    %edi
f0101b4e:	5d                   	pop    %ebp
f0101b4f:	c3                   	ret    

f0101b50 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101b50:	55                   	push   %ebp
f0101b51:	89 e5                	mov    %esp,%ebp
f0101b53:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101b59:	c7 05 00 af 2b f0 00 	movl   $0x0,0xf02baf00
f0101b60:	00 00 00 
f0101b63:	c7 05 04 af 2b f0 00 	movl   $0x0,0xf02baf04
f0101b6a:	00 00 00 
f0101b6d:	c7 05 0c af 2b f0 00 	movl   $0x0,0xf02baf0c
f0101b74:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101b77:	83 ec 04             	sub    $0x4,%esp
f0101b7a:	68 00 04 00 00       	push   $0x400
f0101b7f:	6a 00                	push   $0x0
f0101b81:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b87:	50                   	push   %eax
f0101b88:	e8 11 d4 02 00       	call   f012ef9e <memset>
f0101b8d:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101b90:	83 ec 08             	sub    $0x8,%esp
f0101b93:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b99:	50                   	push   %eax
f0101b9a:	68 0d ff 12 f0       	push   $0xf012ff0d
f0101b9f:	e8 6f f4 ff ff       	call   f0101013 <command_prompt_readline>
f0101ba4:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bb0:	50                   	push   %eax
f0101bb1:	e8 0d 00 00 00       	call   f0101bc3 <execute_command>
f0101bb6:	83 c4 10             	add    $0x10,%esp
f0101bb9:	85 c0                	test   %eax,%eax
f0101bbb:	78 02                	js     f0101bbf <run_command_prompt+0x6f>
				break;
	}
f0101bbd:	eb b8                	jmp    f0101b77 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101bbf:	90                   	nop
	}
}
f0101bc0:	90                   	nop
f0101bc1:	c9                   	leave  
f0101bc2:	c3                   	ret    

f0101bc3 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101bc3:	55                   	push   %ebp
f0101bc4:	89 e5                	mov    %esp,%ebp
f0101bc6:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101bc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101bcc:	50                   	push   %eax
f0101bcd:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101bd0:	50                   	push   %eax
f0101bd1:	68 fb fe 12 f0       	push   $0xf012fefb
f0101bd6:	ff 75 08             	pushl  0x8(%ebp)
f0101bd9:	e8 06 d8 02 00       	call   f012f3e4 <strsplit>
f0101bde:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101be1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101be4:	85 c0                	test   %eax,%eax
f0101be6:	75 0a                	jne    f0101bf2 <execute_command+0x2f>
		return 0;
f0101be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bed:	e9 a4 02 00 00       	jmp    f0101e96 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101bf5:	83 ec 08             	sub    $0x8,%esp
f0101bf8:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101bfb:	52                   	push   %edx
f0101bfc:	50                   	push   %eax
f0101bfd:	e8 e4 03 00 00       	call   f0101fe6 <process_command>
f0101c02:	83 c4 10             	add    $0x10,%esp
f0101c05:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c08:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c0c:	75 19                	jne    f0101c27 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c11:	83 ec 08             	sub    $0x8,%esp
f0101c14:	50                   	push   %eax
f0101c15:	68 13 ff 12 f0       	push   $0xf012ff13
f0101c1a:	e8 12 f2 ff ff       	call   f0100e31 <cprintf>
f0101c1f:	83 c4 10             	add    $0x10,%esp
f0101c22:	e9 6a 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c27:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c2b:	75 4f                	jne    f0101c7c <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c2d:	a1 0c af 2b f0       	mov    0xf02baf0c,%eax
f0101c32:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c35:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101c39:	74 17                	je     f0101c52 <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101c3b:	83 ec 04             	sub    $0x4,%esp
f0101c3e:	68 2c ff 12 f0       	push   $0xf012ff2c
f0101c43:	68 3d 01 00 00       	push   $0x13d
f0101c48:	68 7d ff 12 f0       	push   $0xf012ff7d
f0101c4d:	e8 5e e5 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101c52:	a1 00 af 2b f0       	mov    0xf02baf00,%eax
f0101c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101c5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c5d:	8b 50 04             	mov    0x4(%eax),%edx
f0101c60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c63:	8b 00                	mov    (%eax),%eax
f0101c65:	83 ec 04             	sub    $0x4,%esp
f0101c68:	52                   	push   %edx
f0101c69:	50                   	push   %eax
f0101c6a:	68 98 ff 12 f0       	push   $0xf012ff98
f0101c6f:	e8 bd f1 ff ff       	call   f0100e31 <cprintf>
f0101c74:	83 c4 10             	add    $0x10,%esp
f0101c77:	e9 15 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101c7c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101c80:	0f 85 e6 01 00 00    	jne    f0101e6c <execute_command+0x2a9>
	{
		int i = 1;
f0101c86:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c8d:	a1 0c af 2b f0       	mov    0xf02baf0c,%eax
f0101c92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101c95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101c99:	75 17                	jne    f0101cb2 <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101c9b:	83 ec 04             	sub    $0x4,%esp
f0101c9e:	68 c8 ff 12 f0       	push   $0xf012ffc8
f0101ca3:	68 48 01 00 00       	push   $0x148
f0101ca8:	68 7d ff 12 f0       	push   $0xf012ff7d
f0101cad:	e8 fe e4 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = NULL;
f0101cb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101cb9:	a1 00 af 2b f0       	mov    0xf02baf00,%eax
f0101cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101cc1:	eb 28                	jmp    f0101ceb <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cc6:	8b 10                	mov    (%eax),%edx
f0101cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ccb:	8d 48 01             	lea    0x1(%eax),%ecx
f0101cce:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101cd1:	83 ec 04             	sub    $0x4,%esp
f0101cd4:	52                   	push   %edx
f0101cd5:	50                   	push   %eax
f0101cd6:	68 f2 ff 12 f0       	push   $0xf012fff2
f0101cdb:	e8 51 f1 ff ff       	call   f0100e31 <cprintf>
f0101ce0:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ce3:	a1 08 af 2b f0       	mov    0xf02baf08,%eax
f0101ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101cef:	74 08                	je     f0101cf9 <execute_command+0x136>
f0101cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cf4:	8b 40 10             	mov    0x10(%eax),%eax
f0101cf7:	eb 05                	jmp    f0101cfe <execute_command+0x13b>
f0101cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cfe:	a3 08 af 2b f0       	mov    %eax,0xf02baf08
f0101d03:	a1 08 af 2b f0       	mov    0xf02baf08,%eax
f0101d08:	85 c0                	test   %eax,%eax
f0101d0a:	75 b7                	jne    f0101cc3 <execute_command+0x100>
f0101d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d10:	75 b1                	jne    f0101cc3 <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d12:	83 ec 08             	sub    $0x8,%esp
f0101d15:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d18:	68 fc ff 12 f0       	push   $0xf012fffc
f0101d1d:	e8 0f f1 ff ff       	call   f0100e31 <cprintf>
f0101d22:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d25:	e8 97 f0 ff ff       	call   f0100dc1 <getchar>
f0101d2a:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d2d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d31:	83 ec 0c             	sub    $0xc,%esp
f0101d34:	50                   	push   %eax
f0101d35:	e8 70 f0 ff ff       	call   f0100daa <cputchar>
f0101d3a:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101d3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101d44:	eb 40                	jmp    f0101d86 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101d49:	89 d0                	mov    %edx,%eax
f0101d4b:	c1 e0 02             	shl    $0x2,%eax
f0101d4e:	01 d0                	add    %edx,%eax
f0101d50:	01 c0                	add    %eax,%eax
f0101d52:	89 c2                	mov    %eax,%edx
f0101d54:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d58:	83 e8 30             	sub    $0x30,%eax
f0101d5b:	01 d0                	add    %edx,%eax
f0101d5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101d60:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101d64:	7e 2c                	jle    f0101d92 <execute_command+0x1cf>
f0101d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d69:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101d6c:	7f 24                	jg     f0101d92 <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101d6e:	e8 4e f0 ff ff       	call   f0100dc1 <getchar>
f0101d73:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101d76:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d7a:	83 ec 0c             	sub    $0xc,%esp
f0101d7d:	50                   	push   %eax
f0101d7e:	e8 27 f0 ff ff       	call   f0100daa <cputchar>
f0101d83:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101d86:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101d8a:	7e 06                	jle    f0101d92 <execute_command+0x1cf>
f0101d8c:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101d90:	7e b4                	jle    f0101d46 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101d92:	83 ec 0c             	sub    $0xc,%esp
f0101d95:	6a 0a                	push   $0xa
f0101d97:	e8 0e f0 ff ff       	call   f0100daa <cputchar>
f0101d9c:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101d9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101da3:	0f 8e e8 00 00 00    	jle    f0101e91 <execute_command+0x2ce>
f0101da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101daf:	0f 8f dc 00 00 00    	jg     f0101e91 <execute_command+0x2ce>
		{
			int c = 1;
f0101db5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101dbc:	a1 00 af 2b f0       	mov    0xf02baf00,%eax
f0101dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101dc4:	eb 75                	jmp    f0101e3b <execute_command+0x278>
			{
				if (c++ == selection)
f0101dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101dc9:	8d 50 01             	lea    0x1(%eax),%edx
f0101dcc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101dcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101dd2:	75 5f                	jne    f0101e33 <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd7:	8b 40 0c             	mov    0xc(%eax),%eax
f0101dda:	85 c0                	test   %eax,%eax
f0101ddc:	75 31                	jne    f0101e0f <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de1:	8b 00                	mov    (%eax),%eax
f0101de3:	83 ec 08             	sub    $0x8,%esp
f0101de6:	50                   	push   %eax
f0101de7:	68 5f 00 13 f0       	push   $0xf013005f
f0101dec:	e8 40 f0 ff ff       	call   f0100e31 <cprintf>
f0101df1:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df7:	8b 40 08             	mov    0x8(%eax),%eax
f0101dfa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101dfd:	83 ec 08             	sub    $0x8,%esp
f0101e00:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e03:	51                   	push   %ecx
f0101e04:	52                   	push   %edx
f0101e05:	ff d0                	call   *%eax
f0101e07:	83 c4 10             	add    $0x10,%esp
f0101e0a:	e9 87 00 00 00       	jmp    f0101e96 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e12:	8b 50 04             	mov    0x4(%eax),%edx
f0101e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e18:	8b 00                	mov    (%eax),%eax
f0101e1a:	83 ec 04             	sub    $0x4,%esp
f0101e1d:	52                   	push   %edx
f0101e1e:	50                   	push   %eax
f0101e1f:	68 68 00 13 f0       	push   $0xf0130068
f0101e24:	e8 08 f0 ff ff       	call   f0100e31 <cprintf>
f0101e29:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e31:	eb 63                	jmp    f0101e96 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e33:	a1 08 af 2b f0       	mov    0xf02baf08,%eax
f0101e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e3f:	74 08                	je     f0101e49 <execute_command+0x286>
f0101e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e44:	8b 40 10             	mov    0x10(%eax),%eax
f0101e47:	eb 05                	jmp    f0101e4e <execute_command+0x28b>
f0101e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e4e:	a3 08 af 2b f0       	mov    %eax,0xf02baf08
f0101e53:	a1 08 af 2b f0       	mov    0xf02baf08,%eax
f0101e58:	85 c0                	test   %eax,%eax
f0101e5a:	0f 85 66 ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e64:	0f 85 5c ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e6a:	eb 25                	jmp    f0101e91 <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101e6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101e6f:	89 d0                	mov    %edx,%eax
f0101e71:	01 c0                	add    %eax,%eax
f0101e73:	01 d0                	add    %edx,%eax
f0101e75:	c1 e0 03             	shl    $0x3,%eax
f0101e78:	05 48 c5 18 f0       	add    $0xf018c548,%eax
f0101e7d:	8b 00                	mov    (%eax),%eax
f0101e7f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e82:	83 ec 08             	sub    $0x8,%esp
f0101e85:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e88:	51                   	push   %ecx
f0101e89:	52                   	push   %edx
f0101e8a:	ff d0                	call   *%eax
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 05                	jmp    f0101e96 <execute_command+0x2d3>
	}
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <subSequence>:
bool subSequence(char* str1, char* substr){
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 28             	sub    $0x28,%esp
	bool res=0;
f0101e9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int len=strlen(str1);
f0101ea5:	83 ec 0c             	sub    $0xc,%esp
f0101ea8:	ff 75 08             	pushl  0x8(%ebp)
f0101eab:	e8 00 cf 02 00       	call   f012edb0 <strlen>
f0101eb0:	83 c4 10             	add    $0x10,%esp
f0101eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int subl=strlen(substr);
f0101eb6:	83 ec 0c             	sub    $0xc,%esp
f0101eb9:	ff 75 0c             	pushl  0xc(%ebp)
f0101ebc:	e8 ef ce 02 00       	call   f012edb0 <strlen>
f0101ec1:	83 c4 10             	add    $0x10,%esp
f0101ec4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int subi=0;
f0101ec7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for (int i=0;i<len;i++){
f0101ece:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ed5:	eb 1e                	jmp    f0101ef5 <subSequence+0x5d>
		if(str1[i]==substr[subi]){
f0101ed7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0101edd:	01 d0                	add    %edx,%eax
f0101edf:	8a 10                	mov    (%eax),%dl
f0101ee1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0101ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ee7:	01 c8                	add    %ecx,%eax
f0101ee9:	8a 00                	mov    (%eax),%al
f0101eeb:	38 c2                	cmp    %al,%dl
f0101eed:	75 03                	jne    f0101ef2 <subSequence+0x5a>
			subi++;
f0101eef:	ff 45 f0             	incl   -0x10(%ebp)
bool subSequence(char* str1, char* substr){
	bool res=0;
	int len=strlen(str1);
	int subl=strlen(substr);
	int subi=0;
	for (int i=0;i<len;i++){
f0101ef2:	ff 45 ec             	incl   -0x14(%ebp)
f0101ef5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ef8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101efb:	7c da                	jl     f0101ed7 <subSequence+0x3f>
		if(str1[i]==substr[subi]){
			subi++;
		}
	}
	if(subi==subl){
f0101efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f00:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101f03:	75 07                	jne    f0101f0c <subSequence+0x74>
		res=1;
f0101f05:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	return res;
f0101f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0101f0f:	c9                   	leave  
f0101f10:	c3                   	ret    

f0101f11 <erase>:
void erase(){
f0101f11:	55                   	push   %ebp
f0101f12:	89 e5                	mov    %esp,%ebp
f0101f14:	83 ec 18             	sub    $0x18,%esp
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101f17:	a1 00 af 2b f0       	mov    0xf02baf00,%eax
f0101f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101f1f:	e9 90 00 00 00       	jmp    f0101fb4 <erase+0xa3>
		LIST_REMOVE(&foundCommands,command);
f0101f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101f28:	75 17                	jne    f0101f41 <erase+0x30>
f0101f2a:	83 ec 04             	sub    $0x4,%esp
f0101f2d:	68 70 00 13 f0       	push   $0xf0130070
f0101f32:	68 8a 01 00 00       	push   $0x18a
f0101f37:	68 7d ff 12 f0       	push   $0xf012ff7d
f0101f3c:	e8 6f e2 ff ff       	call   f01001b0 <_panic>
f0101f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f44:	8b 40 10             	mov    0x10(%eax),%eax
f0101f47:	85 c0                	test   %eax,%eax
f0101f49:	74 11                	je     f0101f5c <erase+0x4b>
f0101f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f4e:	8b 40 10             	mov    0x10(%eax),%eax
f0101f51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f54:	8b 52 14             	mov    0x14(%edx),%edx
f0101f57:	89 50 14             	mov    %edx,0x14(%eax)
f0101f5a:	eb 0b                	jmp    f0101f67 <erase+0x56>
f0101f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f5f:	8b 40 14             	mov    0x14(%eax),%eax
f0101f62:	a3 04 af 2b f0       	mov    %eax,0xf02baf04
f0101f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f6a:	8b 40 14             	mov    0x14(%eax),%eax
f0101f6d:	85 c0                	test   %eax,%eax
f0101f6f:	74 11                	je     f0101f82 <erase+0x71>
f0101f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f74:	8b 40 14             	mov    0x14(%eax),%eax
f0101f77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f7a:	8b 52 10             	mov    0x10(%edx),%edx
f0101f7d:	89 50 10             	mov    %edx,0x10(%eax)
f0101f80:	eb 0b                	jmp    f0101f8d <erase+0x7c>
f0101f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f85:	8b 40 10             	mov    0x10(%eax),%eax
f0101f88:	a3 00 af 2b f0       	mov    %eax,0xf02baf00
f0101f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f90:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0101f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f9a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0101fa1:	a1 0c af 2b f0       	mov    0xf02baf0c,%eax
f0101fa6:	48                   	dec    %eax
f0101fa7:	a3 0c af 2b f0       	mov    %eax,0xf02baf0c
	}
	return res;
}
void erase(){
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101fac:	a1 08 af 2b f0       	mov    0xf02baf08,%eax
f0101fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fb8:	74 08                	je     f0101fc2 <erase+0xb1>
f0101fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fbd:	8b 40 10             	mov    0x10(%eax),%eax
f0101fc0:	eb 05                	jmp    f0101fc7 <erase+0xb6>
f0101fc2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fc7:	a3 08 af 2b f0       	mov    %eax,0xf02baf08
f0101fcc:	a1 08 af 2b f0       	mov    0xf02baf08,%eax
f0101fd1:	85 c0                	test   %eax,%eax
f0101fd3:	0f 85 4b ff ff ff    	jne    f0101f24 <erase+0x13>
f0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fdd:	0f 85 41 ff ff ff    	jne    f0101f24 <erase+0x13>
		LIST_REMOVE(&foundCommands,command);
	}
}
f0101fe3:	90                   	nop
f0101fe4:	c9                   	leave  
f0101fe5:	c3                   	ret    

f0101fe6 <process_command>:
int process_command(int number_of_arguments, char** arguments)
{
f0101fe6:	55                   	push   %ebp
f0101fe7:	89 e5                	mov    %esp,%ebp
f0101fe9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");


	int command_found = 0;
f0101fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	erase();
f0101ff3:	e8 19 ff ff ff       	call   f0101f11 <erase>
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0101ff8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fff:	e9 fb 01 00 00       	jmp    f01021ff <process_command+0x219>
		{
			int strl= strlen(commands[i].name);
f0102004:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102007:	89 d0                	mov    %edx,%eax
f0102009:	01 c0                	add    %eax,%eax
f010200b:	01 d0                	add    %edx,%eax
f010200d:	c1 e0 03             	shl    $0x3,%eax
f0102010:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102015:	8b 00                	mov    (%eax),%eax
f0102017:	83 ec 0c             	sub    $0xc,%esp
f010201a:	50                   	push   %eax
f010201b:	e8 90 cd 02 00       	call   f012edb0 <strlen>
f0102020:	83 c4 10             	add    $0x10,%esp
f0102023:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if ((strncmp(arguments[0], commands[i].name,strl)) == 0)
f0102026:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010202c:	89 d0                	mov    %edx,%eax
f010202e:	01 c0                	add    %eax,%eax
f0102030:	01 d0                	add    %edx,%eax
f0102032:	c1 e0 03             	shl    $0x3,%eax
f0102035:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010203a:	8b 10                	mov    (%eax),%edx
f010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010203f:	8b 00                	mov    (%eax),%eax
f0102041:	83 ec 04             	sub    $0x4,%esp
f0102044:	51                   	push   %ecx
f0102045:	52                   	push   %edx
f0102046:	50                   	push   %eax
f0102047:	e8 a8 ce 02 00       	call   f012eef4 <strncmp>
f010204c:	83 c4 10             	add    $0x10,%esp
f010204f:	85 c0                	test   %eax,%eax
f0102051:	0f 85 d7 00 00 00    	jne    f010212e <process_command+0x148>
			{
				if((number_of_arguments-1)==commands[i].num_of_args){
f0102057:	8b 45 08             	mov    0x8(%ebp),%eax
f010205a:	8d 48 ff             	lea    -0x1(%eax),%ecx
f010205d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102060:	89 d0                	mov    %edx,%eax
f0102062:	01 c0                	add    %eax,%eax
f0102064:	01 d0                	add    %edx,%eax
f0102066:	c1 e0 03             	shl    $0x3,%eax
f0102069:	05 4c c5 18 f0       	add    $0xf018c54c,%eax
f010206e:	8b 00                	mov    (%eax),%eax
f0102070:	39 c1                	cmp    %eax,%ecx
f0102072:	75 0f                	jne    f0102083 <process_command+0x9d>
					command_found=1;
f0102074:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return i;
f010207b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010207e:	e9 9e 01 00 00       	jmp    f0102221 <process_command+0x23b>
				}
				else{
					LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f0102083:	8b 15 04 af 2b f0    	mov    0xf02baf04,%edx
f0102089:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010208c:	89 c8                	mov    %ecx,%eax
f010208e:	01 c0                	add    %eax,%eax
f0102090:	01 c8                	add    %ecx,%eax
f0102092:	c1 e0 03             	shl    $0x3,%eax
f0102095:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f010209a:	89 10                	mov    %edx,(%eax)
f010209c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010209f:	89 d0                	mov    %edx,%eax
f01020a1:	01 c0                	add    %eax,%eax
f01020a3:	01 d0                	add    %edx,%eax
f01020a5:	c1 e0 03             	shl    $0x3,%eax
f01020a8:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f01020ad:	8b 00                	mov    (%eax),%eax
f01020af:	85 c0                	test   %eax,%eax
f01020b1:	74 1c                	je     f01020cf <process_command+0xe9>
f01020b3:	8b 15 04 af 2b f0    	mov    0xf02baf04,%edx
f01020b9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020bc:	89 c8                	mov    %ecx,%eax
f01020be:	01 c0                	add    %eax,%eax
f01020c0:	01 c8                	add    %ecx,%eax
f01020c2:	c1 e0 03             	shl    $0x3,%eax
f01020c5:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01020ca:	89 42 10             	mov    %eax,0x10(%edx)
f01020cd:	eb 16                	jmp    f01020e5 <process_command+0xff>
f01020cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020d2:	89 d0                	mov    %edx,%eax
f01020d4:	01 c0                	add    %eax,%eax
f01020d6:	01 d0                	add    %edx,%eax
f01020d8:	c1 e0 03             	shl    $0x3,%eax
f01020db:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01020e0:	a3 00 af 2b f0       	mov    %eax,0xf02baf00
f01020e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020e8:	89 d0                	mov    %edx,%eax
f01020ea:	01 c0                	add    %eax,%eax
f01020ec:	01 d0                	add    %edx,%eax
f01020ee:	c1 e0 03             	shl    $0x3,%eax
f01020f1:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01020f6:	a3 04 af 2b f0       	mov    %eax,0xf02baf04
f01020fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020fe:	89 d0                	mov    %edx,%eax
f0102100:	01 c0                	add    %eax,%eax
f0102102:	01 d0                	add    %edx,%eax
f0102104:	c1 e0 03             	shl    $0x3,%eax
f0102107:	05 50 c5 18 f0       	add    $0xf018c550,%eax
f010210c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102112:	a1 0c af 2b f0       	mov    0xf02baf0c,%eax
f0102117:	40                   	inc    %eax
f0102118:	a3 0c af 2b f0       	mov    %eax,0xf02baf0c
					command_found=1;
f010211d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return CMD_INV_NUM_ARGS;
f0102124:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102129:	e9 f3 00 00 00       	jmp    f0102221 <process_command+0x23b>
				}
			}
			else if(subSequence(commands[i].name,arguments[0])){
f010212e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102131:	8b 10                	mov    (%eax),%edx
f0102133:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102136:	89 c8                	mov    %ecx,%eax
f0102138:	01 c0                	add    %eax,%eax
f010213a:	01 c8                	add    %ecx,%eax
f010213c:	c1 e0 03             	shl    $0x3,%eax
f010213f:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102144:	8b 00                	mov    (%eax),%eax
f0102146:	83 ec 08             	sub    $0x8,%esp
f0102149:	52                   	push   %edx
f010214a:	50                   	push   %eax
f010214b:	e8 48 fd ff ff       	call   f0101e98 <subSequence>
f0102150:	83 c4 10             	add    $0x10,%esp
f0102153:	85 c0                	test   %eax,%eax
f0102155:	0f 84 a1 00 00 00    	je     f01021fc <process_command+0x216>
				command_found=1;
f010215b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f0102162:	8b 15 04 af 2b f0    	mov    0xf02baf04,%edx
f0102168:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010216b:	89 c8                	mov    %ecx,%eax
f010216d:	01 c0                	add    %eax,%eax
f010216f:	01 c8                	add    %ecx,%eax
f0102171:	c1 e0 03             	shl    $0x3,%eax
f0102174:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f0102179:	89 10                	mov    %edx,(%eax)
f010217b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010217e:	89 d0                	mov    %edx,%eax
f0102180:	01 c0                	add    %eax,%eax
f0102182:	01 d0                	add    %edx,%eax
f0102184:	c1 e0 03             	shl    $0x3,%eax
f0102187:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f010218c:	8b 00                	mov    (%eax),%eax
f010218e:	85 c0                	test   %eax,%eax
f0102190:	74 1c                	je     f01021ae <process_command+0x1c8>
f0102192:	8b 15 04 af 2b f0    	mov    0xf02baf04,%edx
f0102198:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010219b:	89 c8                	mov    %ecx,%eax
f010219d:	01 c0                	add    %eax,%eax
f010219f:	01 c8                	add    %ecx,%eax
f01021a1:	c1 e0 03             	shl    $0x3,%eax
f01021a4:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01021a9:	89 42 10             	mov    %eax,0x10(%edx)
f01021ac:	eb 16                	jmp    f01021c4 <process_command+0x1de>
f01021ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021b1:	89 d0                	mov    %edx,%eax
f01021b3:	01 c0                	add    %eax,%eax
f01021b5:	01 d0                	add    %edx,%eax
f01021b7:	c1 e0 03             	shl    $0x3,%eax
f01021ba:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01021bf:	a3 00 af 2b f0       	mov    %eax,0xf02baf00
f01021c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021c7:	89 d0                	mov    %edx,%eax
f01021c9:	01 c0                	add    %eax,%eax
f01021cb:	01 d0                	add    %edx,%eax
f01021cd:	c1 e0 03             	shl    $0x3,%eax
f01021d0:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01021d5:	a3 04 af 2b f0       	mov    %eax,0xf02baf04
f01021da:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021dd:	89 d0                	mov    %edx,%eax
f01021df:	01 c0                	add    %eax,%eax
f01021e1:	01 d0                	add    %edx,%eax
f01021e3:	c1 e0 03             	shl    $0x3,%eax
f01021e6:	05 50 c5 18 f0       	add    $0xf018c550,%eax
f01021eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01021f1:	a1 0c af 2b f0       	mov    0xf02baf0c,%eax
f01021f6:	40                   	inc    %eax
f01021f7:	a3 0c af 2b f0       	mov    %eax,0xf02baf0c
	//panic("process_command is not implemented yet");


	int command_found = 0;
	erase();
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f01021fc:	ff 45 f0             	incl   -0x10(%ebp)
f01021ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102202:	a1 48 c9 18 f0       	mov    0xf018c948,%eax
f0102207:	39 c2                	cmp    %eax,%edx
f0102209:	0f 82 f5 fd ff ff    	jb     f0102004 <process_command+0x1e>
			else if(subSequence(commands[i].name,arguments[0])){
				command_found=1;
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
			}
		}
	if(command_found==0){
f010220f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102213:	75 07                	jne    f010221c <process_command+0x236>
		return CMD_INVALID;
f0102215:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010221a:	eb 05                	jmp    f0102221 <process_command+0x23b>
	}
	return CMD_MATCHED;
f010221c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0102221:	c9                   	leave  
f0102222:	c3                   	ret    

f0102223 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102223:	55                   	push   %ebp
f0102224:	89 e5                	mov    %esp,%ebp
f0102226:	c7 05 d8 ae 2b f0 00 	movl   $0x0,0xf02baed8
f010222d:	00 00 00 
f0102230:	90                   	nop
f0102231:	5d                   	pop    %ebp
f0102232:	c3                   	ret    

f0102233 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102233:	55                   	push   %ebp
f0102234:	89 e5                	mov    %esp,%ebp
f0102236:	c7 05 d8 ae 2b f0 01 	movl   $0x1,0xf02baed8
f010223d:	00 00 00 
f0102240:	90                   	nop
f0102241:	5d                   	pop    %ebp
f0102242:	c3                   	ret    

f0102243 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102243:	55                   	push   %ebp
f0102244:	89 e5                	mov    %esp,%ebp
f0102246:	c7 05 d8 ae 2b f0 02 	movl   $0x2,0xf02baed8
f010224d:	00 00 00 
f0102250:	90                   	nop
f0102251:	5d                   	pop    %ebp
f0102252:	c3                   	ret    

f0102253 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102253:	55                   	push   %ebp
f0102254:	89 e5                	mov    %esp,%ebp
f0102256:	c7 05 d8 ae 2b f0 03 	movl   $0x3,0xf02baed8
f010225d:	00 00 00 
f0102260:	90                   	nop
f0102261:	5d                   	pop    %ebp
f0102262:	c3                   	ret    

f0102263 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102263:	55                   	push   %ebp
f0102264:	89 e5                	mov    %esp,%ebp
f0102266:	c7 05 d8 ae 2b f0 04 	movl   $0x4,0xf02baed8
f010226d:	00 00 00 
f0102270:	90                   	nop
f0102271:	5d                   	pop    %ebp
f0102272:	c3                   	ret    

f0102273 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102273:	55                   	push   %ebp
f0102274:	89 e5                	mov    %esp,%ebp
f0102276:	a1 d8 ae 2b f0       	mov    0xf02baed8,%eax
f010227b:	85 c0                	test   %eax,%eax
f010227d:	75 04                	jne    f0102283 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010227f:	b0 01                	mov    $0x1,%al
f0102281:	eb 02                	jmp    f0102285 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0102283:	b0 00                	mov    $0x0,%al
f0102285:	5d                   	pop    %ebp
f0102286:	c3                   	ret    

f0102287 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102287:	55                   	push   %ebp
f0102288:	89 e5                	mov    %esp,%ebp
f010228a:	a1 d8 ae 2b f0       	mov    0xf02baed8,%eax
f010228f:	83 f8 01             	cmp    $0x1,%eax
f0102292:	75 04                	jne    f0102298 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0102294:	b0 01                	mov    $0x1,%al
f0102296:	eb 02                	jmp    f010229a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0102298:	b0 00                	mov    $0x0,%al
f010229a:	5d                   	pop    %ebp
f010229b:	c3                   	ret    

f010229c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010229c:	55                   	push   %ebp
f010229d:	89 e5                	mov    %esp,%ebp
f010229f:	a1 d8 ae 2b f0       	mov    0xf02baed8,%eax
f01022a4:	83 f8 02             	cmp    $0x2,%eax
f01022a7:	75 04                	jne    f01022ad <isKHeapPlacementStrategyBESTFIT+0x11>
f01022a9:	b0 01                	mov    $0x1,%al
f01022ab:	eb 02                	jmp    f01022af <isKHeapPlacementStrategyBESTFIT+0x13>
f01022ad:	b0 00                	mov    $0x0,%al
f01022af:	5d                   	pop    %ebp
f01022b0:	c3                   	ret    

f01022b1 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01022b1:	55                   	push   %ebp
f01022b2:	89 e5                	mov    %esp,%ebp
f01022b4:	a1 d8 ae 2b f0       	mov    0xf02baed8,%eax
f01022b9:	83 f8 03             	cmp    $0x3,%eax
f01022bc:	75 04                	jne    f01022c2 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01022be:	b0 01                	mov    $0x1,%al
f01022c0:	eb 02                	jmp    f01022c4 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01022c2:	b0 00                	mov    $0x0,%al
f01022c4:	5d                   	pop    %ebp
f01022c5:	c3                   	ret    

f01022c6 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01022c6:	55                   	push   %ebp
f01022c7:	89 e5                	mov    %esp,%ebp
f01022c9:	a1 d8 ae 2b f0       	mov    0xf02baed8,%eax
f01022ce:	83 f8 04             	cmp    $0x4,%eax
f01022d1:	75 04                	jne    f01022d7 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01022d3:	b0 01                	mov    $0x1,%al
f01022d5:	eb 02                	jmp    f01022d9 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01022d7:	b0 00                	mov    $0x0,%al
f01022d9:	5d                   	pop    %ebp
f01022da:	c3                   	ret    

f01022db <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01022db:	55                   	push   %ebp
f01022dc:	89 e5                	mov    %esp,%ebp
f01022de:	c7 05 ac ae 2b f0 01 	movl   $0x1,0xf02baeac
f01022e5:	00 00 00 
f01022e8:	90                   	nop
f01022e9:	5d                   	pop    %ebp
f01022ea:	c3                   	ret    

f01022eb <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f01022eb:	55                   	push   %ebp
f01022ec:	89 e5                	mov    %esp,%ebp
f01022ee:	c7 05 ac ae 2b f0 02 	movl   $0x2,0xf02baeac
f01022f5:	00 00 00 
f01022f8:	90                   	nop
f01022f9:	5d                   	pop    %ebp
f01022fa:	c3                   	ret    

f01022fb <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f01022fb:	55                   	push   %ebp
f01022fc:	89 e5                	mov    %esp,%ebp
f01022fe:	c7 05 ac ae 2b f0 03 	movl   $0x3,0xf02baeac
f0102305:	00 00 00 
f0102308:	90                   	nop
f0102309:	5d                   	pop    %ebp
f010230a:	c3                   	ret    

f010230b <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f010230b:	55                   	push   %ebp
f010230c:	89 e5                	mov    %esp,%ebp
f010230e:	c7 05 ac ae 2b f0 04 	movl   $0x4,0xf02baeac
f0102315:	00 00 00 
f0102318:	90                   	nop
f0102319:	5d                   	pop    %ebp
f010231a:	c3                   	ret    

f010231b <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f010231b:	55                   	push   %ebp
f010231c:	89 e5                	mov    %esp,%ebp
f010231e:	a1 ac ae 2b f0       	mov    0xf02baeac,%eax
f0102323:	83 f8 01             	cmp    $0x1,%eax
f0102326:	75 04                	jne    f010232c <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102328:	b0 01                	mov    $0x1,%al
f010232a:	eb 02                	jmp    f010232e <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010232c:	b0 00                	mov    $0x0,%al
f010232e:	5d                   	pop    %ebp
f010232f:	c3                   	ret    

f0102330 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0102330:	55                   	push   %ebp
f0102331:	89 e5                	mov    %esp,%ebp
f0102333:	a1 ac ae 2b f0       	mov    0xf02baeac,%eax
f0102338:	83 f8 02             	cmp    $0x2,%eax
f010233b:	75 04                	jne    f0102341 <isUHeapPlacementStrategyBESTFIT+0x11>
f010233d:	b0 01                	mov    $0x1,%al
f010233f:	eb 02                	jmp    f0102343 <isUHeapPlacementStrategyBESTFIT+0x13>
f0102341:	b0 00                	mov    $0x0,%al
f0102343:	5d                   	pop    %ebp
f0102344:	c3                   	ret    

f0102345 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102345:	55                   	push   %ebp
f0102346:	89 e5                	mov    %esp,%ebp
f0102348:	a1 ac ae 2b f0       	mov    0xf02baeac,%eax
f010234d:	83 f8 03             	cmp    $0x3,%eax
f0102350:	75 04                	jne    f0102356 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102352:	b0 01                	mov    $0x1,%al
f0102354:	eb 02                	jmp    f0102358 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102356:	b0 00                	mov    $0x0,%al
f0102358:	5d                   	pop    %ebp
f0102359:	c3                   	ret    

f010235a <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f010235a:	55                   	push   %ebp
f010235b:	89 e5                	mov    %esp,%ebp
f010235d:	a1 ac ae 2b f0       	mov    0xf02baeac,%eax
f0102362:	83 f8 04             	cmp    $0x4,%eax
f0102365:	75 04                	jne    f010236b <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102367:	b0 01                	mov    $0x1,%al
f0102369:	eb 02                	jmp    f010236d <isUHeapPlacementStrategyWORSTFIT+0x13>
f010236b:	b0 00                	mov    $0x0,%al
f010236d:	5d                   	pop    %ebp
f010236e:	c3                   	ret    

f010236f <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010236f:	55                   	push   %ebp
f0102370:	89 e5                	mov    %esp,%ebp
f0102372:	53                   	push   %ebx
f0102373:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102376:	8b 45 08             	mov    0x8(%ebp),%eax
f0102379:	c1 e8 0c             	shr    $0xc,%eax
f010237c:	89 c2                	mov    %eax,%edx
f010237e:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0102383:	39 c2                	cmp    %eax,%edx
f0102385:	72 14                	jb     f010239b <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0102387:	83 ec 04             	sub    $0x4,%esp
f010238a:	68 90 00 13 f0       	push   $0xf0130090
f010238f:	6a 55                	push   $0x55
f0102391:	68 b8 00 13 f0       	push   $0xf01300b8
f0102396:	e8 15 de ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f010239b:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f01023a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01023a4:	c1 e8 0c             	shr    $0xc,%eax
f01023a7:	89 c2                	mov    %eax,%edx
f01023a9:	89 d0                	mov    %edx,%eax
f01023ab:	01 c0                	add    %eax,%eax
f01023ad:	01 d0                	add    %edx,%eax
f01023af:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01023b6:	01 d8                	add    %ebx,%eax
f01023b8:	01 d0                	add    %edx,%eax
f01023ba:	01 c8                	add    %ecx,%eax
}
f01023bc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023bf:	c9                   	leave  
f01023c0:	c3                   	ret    

f01023c1 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f01023c1:	55                   	push   %ebp
f01023c2:	89 e5                	mov    %esp,%ebp
f01023c4:	53                   	push   %ebx
f01023c5:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01023c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01023cf:	eb 3b                	jmp    f010240c <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01023d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01023d4:	89 d0                	mov    %edx,%eax
f01023d6:	01 c0                	add    %eax,%eax
f01023d8:	01 d0                	add    %edx,%eax
f01023da:	c1 e0 03             	shl    $0x3,%eax
f01023dd:	05 44 c5 18 f0       	add    $0xf018c544,%eax
f01023e2:	8b 10                	mov    (%eax),%edx
f01023e4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01023e7:	89 c8                	mov    %ecx,%eax
f01023e9:	01 c0                	add    %eax,%eax
f01023eb:	01 c8                	add    %ecx,%eax
f01023ed:	c1 e0 03             	shl    $0x3,%eax
f01023f0:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01023f5:	8b 00                	mov    (%eax),%eax
f01023f7:	83 ec 04             	sub    $0x4,%esp
f01023fa:	52                   	push   %edx
f01023fb:	50                   	push   %eax
f01023fc:	68 3b 09 13 f0       	push   $0xf013093b
f0102401:	e8 2b ea ff ff       	call   f0100e31 <cprintf>
f0102406:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0102409:	ff 45 f4             	incl   -0xc(%ebp)
f010240c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010240f:	a1 48 c9 18 f0       	mov    0xf018c948,%eax
f0102414:	39 c2                	cmp    %eax,%edx
f0102416:	72 b9                	jb     f01023d1 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0102418:	83 ec 0c             	sub    $0xc,%esp
f010241b:	68 44 09 13 f0       	push   $0xf0130944
f0102420:	e8 0c ea ff ff       	call   f0100e31 <cprintf>
f0102425:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102428:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010242f:	eb 42                	jmp    f0102473 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0102431:	8b 0d 48 ca 18 f0    	mov    0xf018ca48,%ecx
f0102437:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010243a:	89 d0                	mov    %edx,%eax
f010243c:	01 c0                	add    %eax,%eax
f010243e:	01 d0                	add    %edx,%eax
f0102440:	c1 e0 02             	shl    $0x2,%eax
f0102443:	01 c8                	add    %ecx,%eax
f0102445:	8b 50 04             	mov    0x4(%eax),%edx
f0102448:	8b 1d 48 ca 18 f0    	mov    0xf018ca48,%ebx
f010244e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102451:	89 c8                	mov    %ecx,%eax
f0102453:	01 c0                	add    %eax,%eax
f0102455:	01 c8                	add    %ecx,%eax
f0102457:	c1 e0 02             	shl    $0x2,%eax
f010245a:	01 d8                	add    %ebx,%eax
f010245c:	8b 00                	mov    (%eax),%eax
f010245e:	83 ec 04             	sub    $0x4,%esp
f0102461:	52                   	push   %edx
f0102462:	50                   	push   %eax
f0102463:	68 59 09 13 f0       	push   $0xf0130959
f0102468:	e8 c4 e9 ff ff       	call   f0100e31 <cprintf>
f010246d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102470:	ff 45 f4             	incl   -0xc(%ebp)
f0102473:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f0102478:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010247b:	7c b4                	jl     f0102431 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010247d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102482:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102485:	c9                   	leave  
f0102486:	c3                   	ret    

f0102487 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0102487:	55                   	push   %ebp
f0102488:	89 e5                	mov    %esp,%ebp
f010248a:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f010248d:	83 ec 0c             	sub    $0xc,%esp
f0102490:	68 75 09 13 f0       	push   $0xf0130975
f0102495:	e8 97 e9 ff ff       	call   f0100e31 <cprintf>
f010249a:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f010249d:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01024a2:	83 ec 04             	sub    $0x4,%esp
f01024a5:	50                   	push   %eax
f01024a6:	68 0c 00 10 f0       	push   $0xf010000c
f01024ab:	68 90 09 13 f0       	push   $0xf0130990
f01024b0:	e8 7c e9 ff ff       	call   f0100e31 <cprintf>
f01024b5:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f01024b8:	b8 39 fd 12 00       	mov    $0x12fd39,%eax
f01024bd:	83 ec 04             	sub    $0x4,%esp
f01024c0:	50                   	push   %eax
f01024c1:	68 39 fd 12 f0       	push   $0xf012fd39
f01024c6:	68 cc 09 13 f0       	push   $0xf01309cc
f01024cb:	e8 61 e9 ff ff       	call   f0100e31 <cprintf>
f01024d0:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01024d3:	b8 d2 1f 25 00       	mov    $0x251fd2,%eax
f01024d8:	83 ec 04             	sub    $0x4,%esp
f01024db:	50                   	push   %eax
f01024dc:	68 d2 1f 25 f0       	push   $0xf0251fd2
f01024e1:	68 08 0a 13 f0       	push   $0xf0130a08
f01024e6:	e8 46 e9 ff ff       	call   f0100e31 <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01024ee:	b8 3c d6 2d 00       	mov    $0x2dd63c,%eax
f01024f3:	83 ec 04             	sub    $0x4,%esp
f01024f6:	50                   	push   %eax
f01024f7:	68 3c d6 2d f0       	push   $0xf02dd63c
f01024fc:	68 50 0a 13 f0       	push   $0xf0130a50
f0102501:	e8 2b e9 ff ff       	call   f0100e31 <cprintf>
f0102506:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0102509:	b8 3c d6 2d f0       	mov    $0xf02dd63c,%eax
f010250e:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0102514:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0102519:	29 c2                	sub    %eax,%edx
f010251b:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010251d:	85 c0                	test   %eax,%eax
f010251f:	79 05                	jns    f0102526 <command_kernel_info+0x9f>
f0102521:	05 ff 03 00 00       	add    $0x3ff,%eax
f0102526:	c1 f8 0a             	sar    $0xa,%eax
f0102529:	83 ec 08             	sub    $0x8,%esp
f010252c:	50                   	push   %eax
f010252d:	68 8c 0a 13 f0       	push   $0xf0130a8c
f0102532:	e8 fa e8 ff ff       	call   f0100e31 <cprintf>
f0102537:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010253a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010253f:	c9                   	leave  
f0102540:	c3                   	ret    

f0102541 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0102541:	55                   	push   %ebp
f0102542:	89 e5                	mov    %esp,%ebp
f0102544:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f0102547:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010254b:	75 37                	jne    f0102584 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010254d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102550:	83 c0 04             	add    $0x4,%eax
f0102553:	8b 00                	mov    (%eax),%eax
f0102555:	83 ec 04             	sub    $0x4,%esp
f0102558:	6a 10                	push   $0x10
f010255a:	6a 00                	push   $0x0
f010255c:	50                   	push   %eax
f010255d:	e8 ae cb 02 00       	call   f012f110 <strtol>
f0102562:	83 c4 10             	add    $0x10,%esp
f0102565:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f0102568:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010256b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f010256e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102571:	83 c0 08             	add    $0x8,%eax
f0102574:	8b 00                	mov    (%eax),%eax
f0102576:	8a 00                	mov    (%eax),%al
f0102578:	88 c2                	mov    %al,%dl
f010257a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010257d:	88 10                	mov    %dl,(%eax)
f010257f:	e9 bc 00 00 00       	jmp    f0102640 <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0102584:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102588:	0f 85 a2 00 00 00    	jne    f0102630 <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010258e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102591:	83 c0 04             	add    $0x4,%eax
f0102594:	8b 00                	mov    (%eax),%eax
f0102596:	83 ec 04             	sub    $0x4,%esp
f0102599:	6a 0a                	push   $0xa
f010259b:	6a 00                	push   $0x0
f010259d:	50                   	push   %eax
f010259e:	e8 6d cb 02 00       	call   f012f110 <strtol>
f01025a3:	83 c4 10             	add    $0x10,%esp
f01025a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01025a9:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01025b0:	83 ec 04             	sub    $0x4,%esp
f01025b3:	6a 00                	push   $0x0
f01025b5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01025b8:	50                   	push   %eax
f01025b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01025bc:	e8 af 73 00 00       	call   f0109970 <envid2env>
f01025c1:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01025c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025c7:	83 c0 08             	add    $0x8,%eax
f01025ca:	8b 00                	mov    (%eax),%eax
f01025cc:	83 ec 04             	sub    $0x4,%esp
f01025cf:	6a 10                	push   $0x10
f01025d1:	6a 00                	push   $0x0
f01025d3:	50                   	push   %eax
f01025d4:	e8 37 cb 02 00       	call   f012f110 <strtol>
f01025d9:	83 c4 10             	add    $0x10,%esp
f01025dc:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01025df:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01025e2:	85 c0                	test   %eax,%eax
f01025e4:	75 07                	jne    f01025ed <command_writeusermem+0xac>
f01025e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01025eb:	eb 58                	jmp    f0102645 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01025ed:	0f 20 d8             	mov    %cr3,%eax
f01025f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01025f3:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01025f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01025f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01025fc:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102602:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102605:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102608:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010260b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010260e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0102611:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102614:	83 c0 0c             	add    $0xc,%eax
f0102617:	8b 00                	mov    (%eax),%eax
f0102619:	8a 00                	mov    (%eax),%al
f010261b:	88 c2                	mov    %al,%dl
f010261d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102620:	88 10                	mov    %dl,(%eax)
f0102622:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102625:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102628:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010262b:	0f 22 d8             	mov    %eax,%cr3
f010262e:	eb 10                	jmp    f0102640 <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0102630:	83 ec 0c             	sub    $0xc,%esp
f0102633:	68 b8 0a 13 f0       	push   $0xf0130ab8
f0102638:	e8 f4 e7 ff ff       	call   f0100e31 <cprintf>
f010263d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102640:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102645:	c9                   	leave  
f0102646:	c3                   	ret    

f0102647 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0102647:	55                   	push   %ebp
f0102648:	89 e5                	mov    %esp,%ebp
f010264a:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010264d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102650:	83 c0 04             	add    $0x4,%eax
f0102653:	8b 00                	mov    (%eax),%eax
f0102655:	83 ec 04             	sub    $0x4,%esp
f0102658:	6a 10                	push   $0x10
f010265a:	6a 00                	push   $0x0
f010265c:	50                   	push   %eax
f010265d:	e8 ae ca 02 00       	call   f012f110 <strtol>
f0102662:	83 c4 10             	add    $0x10,%esp
f0102665:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010266a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f010266d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f0102674:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102677:	83 c0 08             	add    $0x8,%eax
f010267a:	8b 00                	mov    (%eax),%eax
f010267c:	83 ec 0c             	sub    $0xc,%esp
f010267f:	50                   	push   %eax
f0102680:	e8 2b c7 02 00       	call   f012edb0 <strlen>
f0102685:	83 c4 10             	add    $0x10,%esp
f0102688:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f010268b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102692:	eb 1c                	jmp    f01026b0 <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f0102694:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102697:	83 c0 08             	add    $0x8,%eax
f010269a:	8b 10                	mov    (%eax),%edx
f010269c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010269f:	01 d0                	add    %edx,%eax
f01026a1:	8a 00                	mov    (%eax),%al
f01026a3:	88 c2                	mov    %al,%dl
f01026a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01026a8:	88 10                	mov    %dl,(%eax)
		address++;
f01026aa:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f01026ad:	ff 45 f0             	incl   -0x10(%ebp)
f01026b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01026b3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01026b6:	7c dc                	jl     f0102694 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f01026b8:	b8 00 00 00 00       	mov    $0x0,%eax


}
f01026bd:	c9                   	leave  
f01026be:	c3                   	ret    

f01026bf <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f01026bf:	55                   	push   %ebp
f01026c0:	89 e5                	mov    %esp,%ebp
f01026c2:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f01026c5:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01026c9:	75 42                	jne    f010270d <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01026cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026ce:	83 c0 04             	add    $0x4,%eax
f01026d1:	8b 00                	mov    (%eax),%eax
f01026d3:	83 ec 04             	sub    $0x4,%esp
f01026d6:	6a 10                	push   $0x10
f01026d8:	6a 00                	push   $0x0
f01026da:	50                   	push   %eax
f01026db:	e8 30 ca 02 00       	call   f012f110 <strtol>
f01026e0:	83 c4 10             	add    $0x10,%esp
f01026e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01026e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01026e9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01026ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01026ef:	8a 00                	mov    (%eax),%al
f01026f1:	0f b6 c0             	movzbl %al,%eax
f01026f4:	83 ec 04             	sub    $0x4,%esp
f01026f7:	50                   	push   %eax
f01026f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01026fb:	68 e2 0a 13 f0       	push   $0xf0130ae2
f0102700:	e8 2c e7 ff ff       	call   f0100e31 <cprintf>
f0102705:	83 c4 10             	add    $0x10,%esp
f0102708:	e9 c7 00 00 00       	jmp    f01027d4 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010270d:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102711:	0f 85 ad 00 00 00    	jne    f01027c4 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102717:	8b 45 0c             	mov    0xc(%ebp),%eax
f010271a:	83 c0 04             	add    $0x4,%eax
f010271d:	8b 00                	mov    (%eax),%eax
f010271f:	83 ec 04             	sub    $0x4,%esp
f0102722:	6a 0a                	push   $0xa
f0102724:	6a 00                	push   $0x0
f0102726:	50                   	push   %eax
f0102727:	e8 e4 c9 02 00       	call   f012f110 <strtol>
f010272c:	83 c4 10             	add    $0x10,%esp
f010272f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102732:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102739:	83 ec 04             	sub    $0x4,%esp
f010273c:	6a 00                	push   $0x0
f010273e:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102741:	50                   	push   %eax
f0102742:	ff 75 f4             	pushl  -0xc(%ebp)
f0102745:	e8 26 72 00 00       	call   f0109970 <envid2env>
f010274a:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010274d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102750:	83 c0 08             	add    $0x8,%eax
f0102753:	8b 00                	mov    (%eax),%eax
f0102755:	83 ec 04             	sub    $0x4,%esp
f0102758:	6a 10                	push   $0x10
f010275a:	6a 00                	push   $0x0
f010275c:	50                   	push   %eax
f010275d:	e8 ae c9 02 00       	call   f012f110 <strtol>
f0102762:	83 c4 10             	add    $0x10,%esp
f0102765:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0102768:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010276b:	85 c0                	test   %eax,%eax
f010276d:	75 07                	jne    f0102776 <command_readusermem+0xb7>
f010276f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102774:	eb 63                	jmp    f01027d9 <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102776:	0f 20 d8             	mov    %cr3,%eax
f0102779:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010277c:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010277f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0102782:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102785:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010278b:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010278e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102791:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102794:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102797:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010279a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010279d:	8a 00                	mov    (%eax),%al
f010279f:	0f b6 c0             	movzbl %al,%eax
f01027a2:	83 ec 04             	sub    $0x4,%esp
f01027a5:	50                   	push   %eax
f01027a6:	ff 75 f0             	pushl  -0x10(%ebp)
f01027a9:	68 e2 0a 13 f0       	push   $0xf0130ae2
f01027ae:	e8 7e e6 ff ff       	call   f0100e31 <cprintf>
f01027b3:	83 c4 10             	add    $0x10,%esp
f01027b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01027b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01027bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01027bf:	0f 22 d8             	mov    %eax,%cr3
f01027c2:	eb 10                	jmp    f01027d4 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f01027c4:	83 ec 0c             	sub    $0xc,%esp
f01027c7:	68 fc 0a 13 f0       	push   $0xf0130afc
f01027cc:	e8 60 e6 ff ff       	call   f0100e31 <cprintf>
f01027d1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01027d4:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01027d9:	c9                   	leave  
f01027da:	c3                   	ret    

f01027db <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f01027db:	55                   	push   %ebp
f01027dc:	89 e5                	mov    %esp,%ebp
f01027de:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01027e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027e4:	83 c0 04             	add    $0x4,%eax
f01027e7:	8b 00                	mov    (%eax),%eax
f01027e9:	83 ec 04             	sub    $0x4,%esp
f01027ec:	6a 10                	push   $0x10
f01027ee:	6a 00                	push   $0x0
f01027f0:	50                   	push   %eax
f01027f1:	e8 1a c9 02 00       	call   f012f110 <strtol>
f01027f6:	83 c4 10             	add    $0x10,%esp
f01027f9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01027fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f0102801:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102808:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010280b:	8a 00                	mov    (%eax),%al
f010280d:	0f b6 c0             	movzbl %al,%eax
f0102810:	83 ec 08             	sub    $0x8,%esp
f0102813:	50                   	push   %eax
f0102814:	68 26 0b 13 f0       	push   $0xf0130b26
f0102819:	e8 13 e6 ff ff       	call   f0100e31 <cprintf>
f010281e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0102821:	83 ec 0c             	sub    $0xc,%esp
f0102824:	68 29 0b 13 f0       	push   $0xf0130b29
f0102829:	e8 03 e6 ff ff       	call   f0100e31 <cprintf>
f010282e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102831:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102836:	c9                   	leave  
f0102837:	c3                   	ret    

f0102838 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102838:	55                   	push   %ebp
f0102839:	89 e5                	mov    %esp,%ebp
f010283b:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010283e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102841:	83 c0 04             	add    $0x4,%eax
f0102844:	8b 00                	mov    (%eax),%eax
f0102846:	83 ec 04             	sub    $0x4,%esp
f0102849:	6a 0a                	push   $0xa
f010284b:	6a 00                	push   $0x0
f010284d:	50                   	push   %eax
f010284e:	e8 bd c8 02 00       	call   f012f110 <strtol>
f0102853:	83 c4 10             	add    $0x10,%esp
f0102856:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0102859:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0102860:	83 ec 04             	sub    $0x4,%esp
f0102863:	6a 00                	push   $0x0
f0102865:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102868:	50                   	push   %eax
f0102869:	ff 75 ec             	pushl  -0x14(%ebp)
f010286c:	e8 ff 70 00 00       	call   f0109970 <envid2env>
f0102871:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0102874:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102877:	83 c0 08             	add    $0x8,%eax
f010287a:	8b 00                	mov    (%eax),%eax
f010287c:	83 ec 04             	sub    $0x4,%esp
f010287f:	6a 10                	push   $0x10
f0102881:	6a 00                	push   $0x0
f0102883:	50                   	push   %eax
f0102884:	e8 87 c8 02 00       	call   f012f110 <strtol>
f0102889:	83 c4 10             	add    $0x10,%esp
f010288c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010288f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102892:	83 c0 0c             	add    $0xc,%eax
f0102895:	8b 00                	mov    (%eax),%eax
f0102897:	83 ec 04             	sub    $0x4,%esp
f010289a:	6a 0a                	push   $0xa
f010289c:	6a 00                	push   $0x0
f010289e:	50                   	push   %eax
f010289f:	e8 6c c8 02 00       	call   f012f110 <strtol>
f01028a4:	83 c4 10             	add    $0x10,%esp
f01028a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f01028aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01028ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f01028b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028b3:	85 c0                	test   %eax,%eax
f01028b5:	75 07                	jne    f01028be <command_readuserblock+0x86>
f01028b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01028bc:	eb 68                	jmp    f0102926 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01028be:	0f 20 d8             	mov    %cr3,%eax
f01028c1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f01028c4:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f01028c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f01028ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028cd:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01028d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01028d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01028d9:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f01028dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01028e3:	eb 28                	jmp    f010290d <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01028e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01028e8:	8a 00                	mov    (%eax),%al
f01028ea:	0f b6 d0             	movzbl %al,%edx
f01028ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01028f0:	8a 00                	mov    (%eax),%al
f01028f2:	0f b6 c0             	movzbl %al,%eax
f01028f5:	52                   	push   %edx
f01028f6:	50                   	push   %eax
f01028f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01028fa:	68 2b 0b 13 f0       	push   $0xf0130b2b
f01028ff:	e8 2d e5 ff ff       	call   f0100e31 <cprintf>
f0102904:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102907:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f010290a:	ff 45 f0             	incl   -0x10(%ebp)
f010290d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102910:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102913:	7c d0                	jl     f01028e5 <command_readuserblock+0xad>
f0102915:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102918:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010291b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010291e:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0102921:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102926:	c9                   	leave  
f0102927:	c3                   	ret    

f0102928 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102928:	55                   	push   %ebp
f0102929:	89 e5                	mov    %esp,%ebp
f010292b:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010292e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102931:	83 c0 04             	add    $0x4,%eax
f0102934:	8b 00                	mov    (%eax),%eax
f0102936:	83 ec 04             	sub    $0x4,%esp
f0102939:	6a 0a                	push   $0xa
f010293b:	6a 00                	push   $0x0
f010293d:	50                   	push   %eax
f010293e:	e8 cd c7 02 00       	call   f012f110 <strtol>
f0102943:	83 c4 10             	add    $0x10,%esp
f0102946:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0102949:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0102950:	83 ec 04             	sub    $0x4,%esp
f0102953:	6a 00                	push   $0x0
f0102955:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0102958:	50                   	push   %eax
f0102959:	ff 75 f4             	pushl  -0xc(%ebp)
f010295c:	e8 0f 70 00 00       	call   f0109970 <envid2env>
f0102961:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102964:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102967:	85 c0                	test   %eax,%eax
f0102969:	75 0a                	jne    f0102975 <command_remove_table+0x4d>
f010296b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102970:	e9 aa 00 00 00       	jmp    f0102a1f <command_remove_table+0xf7>

	uint32 address = strtol(arguments[2], NULL, 16);
f0102975:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102978:	83 c0 08             	add    $0x8,%eax
f010297b:	8b 00                	mov    (%eax),%eax
f010297d:	83 ec 04             	sub    $0x4,%esp
f0102980:	6a 10                	push   $0x10
f0102982:	6a 00                	push   $0x0
f0102984:	50                   	push   %eax
f0102985:	e8 86 c7 02 00       	call   f012f110 <strtol>
f010298a:	83 c4 10             	add    $0x10,%esp
f010298d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0102990:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102993:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0102996:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102999:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010299f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01029a2:	c1 ea 16             	shr    $0x16,%edx
f01029a5:	c1 e2 02             	shl    $0x2,%edx
f01029a8:	01 d0                	add    %edx,%eax
f01029aa:	8b 00                	mov    (%eax),%eax
f01029ac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01029b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f01029b4:	83 ec 0c             	sub    $0xc,%esp
f01029b7:	ff 75 e8             	pushl  -0x18(%ebp)
f01029ba:	e8 b0 f9 ff ff       	call   f010236f <to_frame_info>
f01029bf:	83 c4 10             	add    $0x10,%esp
f01029c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f01029c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01029c8:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f01029ce:	83 ec 0c             	sub    $0xc,%esp
f01029d1:	ff 75 e4             	pushl  -0x1c(%ebp)
f01029d4:	e8 06 4a 00 00       	call   f01073df <free_frame>
f01029d9:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f01029dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029df:	c1 e8 16             	shr    $0x16,%eax
f01029e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01029e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029e8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01029ee:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01029f1:	c1 e2 02             	shl    $0x2,%edx
f01029f4:	01 c2                	add    %eax,%edx
f01029f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029f9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01029ff:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102a02:	c1 e1 02             	shl    $0x2,%ecx
f0102a05:	01 c8                	add    %ecx,%eax
f0102a07:	8b 00                	mov    (%eax),%eax
f0102a09:	83 e0 fe             	and    $0xfffffffe,%eax
f0102a0c:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102a0e:	0f 20 d8             	mov    %cr3,%eax
f0102a11:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102a14:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102a17:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102a1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a1f:	c9                   	leave  
f0102a20:	c3                   	ret    

f0102a21 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102a21:	55                   	push   %ebp
f0102a22:	89 e5                	mov    %esp,%ebp
f0102a24:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102a27:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a2b:	7e 06                	jle    f0102a33 <command_allocuserpage+0x12>
f0102a2d:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102a31:	7e 1a                	jle    f0102a4d <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102a33:	83 ec 0c             	sub    $0xc,%esp
f0102a36:	68 3c 0b 13 f0       	push   $0xf0130b3c
f0102a3b:	e8 f1 e3 ff ff       	call   f0100e31 <cprintf>
f0102a40:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a43:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a48:	e9 4c 01 00 00       	jmp    f0102b99 <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102a4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a50:	83 c0 04             	add    $0x4,%eax
f0102a53:	8b 00                	mov    (%eax),%eax
f0102a55:	83 ec 04             	sub    $0x4,%esp
f0102a58:	6a 0a                	push   $0xa
f0102a5a:	6a 00                	push   $0x0
f0102a5c:	50                   	push   %eax
f0102a5d:	e8 ae c6 02 00       	call   f012f110 <strtol>
f0102a62:	83 c4 10             	add    $0x10,%esp
f0102a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102a68:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102a6f:	83 ec 04             	sub    $0x4,%esp
f0102a72:	6a 00                	push   $0x0
f0102a74:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102a77:	50                   	push   %eax
f0102a78:	ff 75 f0             	pushl  -0x10(%ebp)
f0102a7b:	e8 f0 6e 00 00       	call   f0109970 <envid2env>
f0102a80:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102a83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a86:	85 c0                	test   %eax,%eax
f0102a88:	75 0a                	jne    f0102a94 <command_allocuserpage+0x73>
f0102a8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a8f:	e9 05 01 00 00       	jmp    f0102b99 <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102a94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a97:	83 c0 08             	add    $0x8,%eax
f0102a9a:	8b 00                	mov    (%eax),%eax
f0102a9c:	83 ec 04             	sub    $0x4,%esp
f0102a9f:	6a 10                	push   $0x10
f0102aa1:	6a 00                	push   $0x0
f0102aa3:	50                   	push   %eax
f0102aa4:	e8 67 c6 02 00       	call   f012f110 <strtol>
f0102aa9:	83 c4 10             	add    $0x10,%esp
f0102aac:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102aaf:	83 ec 0c             	sub    $0xc,%esp
f0102ab2:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102ab5:	50                   	push   %eax
f0102ab6:	e8 0c 48 00 00       	call   f01072c7 <allocate_frame>
f0102abb:	83 c4 10             	add    $0x10,%esp
f0102abe:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102ac1:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102ac5:	75 1a                	jne    f0102ae1 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102ac7:	83 ec 0c             	sub    $0xc,%esp
f0102aca:	68 66 0b 13 f0       	push   $0xf0130b66
f0102acf:	e8 5d e3 ff ff       	call   f0100e31 <cprintf>
f0102ad4:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102ad7:	b8 00 00 00 00       	mov    $0x0,%eax
f0102adc:	e9 b8 00 00 00       	jmp    f0102b99 <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102ae1:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102ae5:	75 20                	jne    f0102b07 <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102ae7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102aea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102aed:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102af3:	6a 06                	push   $0x6
f0102af5:	ff 75 ec             	pushl  -0x14(%ebp)
f0102af8:	52                   	push   %edx
f0102af9:	50                   	push   %eax
f0102afa:	e8 63 4b 00 00       	call   f0107662 <map_frame>
f0102aff:	83 c4 10             	add    $0x10,%esp
f0102b02:	e9 8d 00 00 00       	jmp    f0102b94 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102b07:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b0b:	0f 85 83 00 00 00    	jne    f0102b94 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102b11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b14:	83 c0 0c             	add    $0xc,%eax
f0102b17:	8b 00                	mov    (%eax),%eax
f0102b19:	8a 00                	mov    (%eax),%al
f0102b1b:	3c 72                	cmp    $0x72,%al
f0102b1d:	74 0e                	je     f0102b2d <command_allocuserpage+0x10c>
f0102b1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b22:	83 c0 0c             	add    $0xc,%eax
f0102b25:	8b 00                	mov    (%eax),%eax
f0102b27:	8a 00                	mov    (%eax),%al
f0102b29:	3c 52                	cmp    $0x52,%al
f0102b2b:	75 09                	jne    f0102b36 <command_allocuserpage+0x115>
			rw = 0 ;
f0102b2d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102b34:	eb 3c                	jmp    f0102b72 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102b36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b39:	83 c0 0c             	add    $0xc,%eax
f0102b3c:	8b 00                	mov    (%eax),%eax
f0102b3e:	8a 00                	mov    (%eax),%al
f0102b40:	3c 77                	cmp    $0x77,%al
f0102b42:	74 0e                	je     f0102b52 <command_allocuserpage+0x131>
f0102b44:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b47:	83 c0 0c             	add    $0xc,%eax
f0102b4a:	8b 00                	mov    (%eax),%eax
f0102b4c:	8a 00                	mov    (%eax),%al
f0102b4e:	3c 57                	cmp    $0x57,%al
f0102b50:	75 09                	jne    f0102b5b <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f0102b52:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102b59:	eb 17                	jmp    f0102b72 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102b5b:	83 ec 0c             	sub    $0xc,%esp
f0102b5e:	68 80 0b 13 f0       	push   $0xf0130b80
f0102b63:	e8 c9 e2 ff ff       	call   f0100e31 <cprintf>
f0102b68:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102b6b:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102b75:	83 c8 04             	or     $0x4,%eax
f0102b78:	89 c1                	mov    %eax,%ecx
f0102b7a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102b7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102b80:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102b86:	51                   	push   %ecx
f0102b87:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b8a:	52                   	push   %edx
f0102b8b:	50                   	push   %eax
f0102b8c:	e8 d1 4a 00 00       	call   f0107662 <map_frame>
f0102b91:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102b94:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b99:	c9                   	leave  
f0102b9a:	c3                   	ret    

f0102b9b <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102b9b:	55                   	push   %ebp
f0102b9c:	89 e5                	mov    %esp,%ebp
f0102b9e:	56                   	push   %esi
f0102b9f:	53                   	push   %ebx
f0102ba0:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102ba3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102ba6:	83 ec 0c             	sub    $0xc,%esp
f0102ba9:	50                   	push   %eax
f0102baa:	e8 23 4d 00 00       	call   f01078d2 <calculate_available_frames>
f0102baf:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102bb2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102bb5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102bb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102bbb:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102bbe:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102bc1:	01 de                	add    %ebx,%esi
f0102bc3:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102bc6:	01 f3                	add    %esi,%ebx
f0102bc8:	83 ec 0c             	sub    $0xc,%esp
f0102bcb:	51                   	push   %ecx
f0102bcc:	52                   	push   %edx
f0102bcd:	50                   	push   %eax
f0102bce:	53                   	push   %ebx
f0102bcf:	68 c4 0b 13 f0       	push   $0xf0130bc4
f0102bd4:	e8 58 e2 ff ff       	call   f0100e31 <cprintf>
f0102bd9:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102bdc:	a1 e8 ae 2b f0       	mov    0xf02baee8,%eax
f0102be1:	83 ec 08             	sub    $0x8,%esp
f0102be4:	50                   	push   %eax
f0102be5:	68 1c 0c 13 f0       	push   $0xf0130c1c
f0102bea:	e8 42 e2 ff ff       	call   f0100e31 <cprintf>
f0102bef:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102bf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102bfa:	5b                   	pop    %ebx
f0102bfb:	5e                   	pop    %esi
f0102bfc:	5d                   	pop    %ebp
f0102bfd:	c3                   	ret    

f0102bfe <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102bfe:	55                   	push   %ebp
f0102bff:	89 e5                	mov    %esp,%ebp
f0102c01:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102c04:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102c0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102c12:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f0102c19:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c1c:	83 f8 02             	cmp    $0x2,%eax
f0102c1f:	74 39                	je     f0102c5a <CreateEnv+0x5c>
f0102c21:	83 f8 03             	cmp    $0x3,%eax
f0102c24:	75 1d                	jne    f0102c43 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102c26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c29:	83 c0 08             	add    $0x8,%eax
f0102c2c:	8b 00                	mov    (%eax),%eax
f0102c2e:	83 ec 04             	sub    $0x4,%esp
f0102c31:	6a 0a                	push   $0xa
f0102c33:	6a 00                	push   $0x0
f0102c35:	50                   	push   %eax
f0102c36:	e8 d5 c4 02 00       	call   f012f110 <strtol>
f0102c3b:	83 c4 10             	add    $0x10,%esp
f0102c3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102c41:	eb 18                	jmp    f0102c5b <CreateEnv+0x5d>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102c43:	83 ec 0c             	sub    $0xc,%esp
f0102c46:	68 58 0c 13 f0       	push   $0xf0130c58
f0102c4b:	e8 e1 e1 ff ff       	call   f0100e31 <cprintf>
f0102c50:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102c53:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c58:	eb 58                	jmp    f0102cb2 <CreateEnv+0xb4>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102c5a:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102c5b:	83 ec 0c             	sub    $0xc,%esp
f0102c5e:	6a 02                	push   $0x2
f0102c60:	e8 8d aa 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f0102c65:	83 c4 10             	add    $0x10,%esp
f0102c68:	85 c0                	test   %eax,%eax
f0102c6a:	74 07                	je     f0102c73 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102c6c:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102c73:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102c77:	76 19                	jbe    f0102c92 <CreateEnv+0x94>
f0102c79:	68 c8 0c 13 f0       	push   $0xf0130cc8
f0102c7e:	68 0d 0d 13 f0       	push   $0xf0130d0d
f0102c83:	68 b6 01 00 00       	push   $0x1b6
f0102c88:	68 22 0d 13 f0       	push   $0xf0130d22
f0102c8d:	e8 1e d5 ff ff       	call   f01001b0 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102c92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c95:	83 c0 04             	add    $0x4,%eax
f0102c98:	8b 00                	mov    (%eax),%eax
f0102c9a:	ff 75 f0             	pushl  -0x10(%ebp)
f0102c9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ca0:	ff 75 ec             	pushl  -0x14(%ebp)
f0102ca3:	50                   	push   %eax
f0102ca4:	e8 c4 5f 00 00       	call   f0108c6d <env_create>
f0102ca9:	83 c4 10             	add    $0x10,%esp
f0102cac:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102caf:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0102cb2:	c9                   	leave  
f0102cb3:	c3                   	ret    

f0102cb4 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102cb4:	55                   	push   %ebp
f0102cb5:	89 e5                	mov    %esp,%ebp
f0102cb7:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102cba:	83 ec 08             	sub    $0x8,%esp
f0102cbd:	ff 75 0c             	pushl  0xc(%ebp)
f0102cc0:	ff 75 08             	pushl  0x8(%ebp)
f0102cc3:	e8 36 ff ff ff       	call   f0102bfe <CreateEnv>
f0102cc8:	83 c4 10             	add    $0x10,%esp
f0102ccb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102cce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102cd2:	75 07                	jne    f0102cdb <command_run_program+0x27>
f0102cd4:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cd9:	eb 46                	jmp    f0102d21 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102cdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102cde:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102ce1:	83 ec 08             	sub    $0x8,%esp
f0102ce4:	50                   	push   %eax
f0102ce5:	68 36 0d 13 f0       	push   $0xf0130d36
f0102cea:	e8 42 e1 ff ff       	call   f0100e31 <cprintf>
f0102cef:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102cf2:	c7 05 e8 ae 2b f0 00 	movl   $0x0,0xf02baee8
f0102cf9:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0102cfc:	83 ec 0c             	sub    $0xc,%esp
f0102cff:	ff 75 f4             	pushl  -0xc(%ebp)
f0102d02:	e8 ce 25 00 00       	call   f01052d5 <sched_new_env>
f0102d07:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0102d0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d0d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d10:	83 ec 0c             	sub    $0xc,%esp
f0102d13:	50                   	push   %eax
f0102d14:	e8 d9 25 00 00       	call   f01052f2 <sched_run_env>
f0102d19:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d21:	c9                   	leave  
f0102d22:	c3                   	ret    

f0102d23 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102d23:	55                   	push   %ebp
f0102d24:	89 e5                	mov    %esp,%ebp
f0102d26:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d2c:	83 c0 04             	add    $0x4,%eax
f0102d2f:	8b 00                	mov    (%eax),%eax
f0102d31:	83 ec 04             	sub    $0x4,%esp
f0102d34:	6a 0a                	push   $0xa
f0102d36:	6a 00                	push   $0x0
f0102d38:	50                   	push   %eax
f0102d39:	e8 d2 c3 02 00       	call   f012f110 <strtol>
f0102d3e:	83 c4 10             	add    $0x10,%esp
f0102d41:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d47:	83 ec 0c             	sub    $0xc,%esp
f0102d4a:	50                   	push   %eax
f0102d4b:	e8 63 28 00 00       	call   f01055b3 <sched_kill_env>
f0102d50:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d58:	c9                   	leave  
f0102d59:	c3                   	ret    

f0102d5a <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0102d5a:	55                   	push   %ebp
f0102d5b:	89 e5                	mov    %esp,%ebp
f0102d5d:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102d60:	83 ec 08             	sub    $0x8,%esp
f0102d63:	ff 75 0c             	pushl  0xc(%ebp)
f0102d66:	ff 75 08             	pushl  0x8(%ebp)
f0102d69:	e8 90 fe ff ff       	call   f0102bfe <CreateEnv>
f0102d6e:	83 c4 10             	add    $0x10,%esp
f0102d71:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0102d74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d78:	75 07                	jne    f0102d81 <commnad_load_env+0x27>
		return 0 ;
f0102d7a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d7f:	eb 2a                	jmp    f0102dab <commnad_load_env+0x51>

	sched_new_env(env) ;
f0102d81:	83 ec 0c             	sub    $0xc,%esp
f0102d84:	ff 75 f4             	pushl  -0xc(%ebp)
f0102d87:	e8 49 25 00 00       	call   f01052d5 <sched_new_env>
f0102d8c:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d92:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d95:	83 ec 08             	sub    $0x8,%esp
f0102d98:	50                   	push   %eax
f0102d99:	68 36 0d 13 f0       	push   $0xf0130d36
f0102d9e:	e8 8e e0 ff ff       	call   f0100e31 <cprintf>
f0102da3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102da6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dab:	c9                   	leave  
f0102dac:	c3                   	ret    

f0102dad <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102dad:	55                   	push   %ebp
f0102dae:	89 e5                	mov    %esp,%ebp
f0102db0:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102db3:	c7 05 e8 ae 2b f0 00 	movl   $0x0,0xf02baee8
f0102dba:	00 00 00 
	sched_run_all();
f0102dbd:	e8 ba 2d 00 00       	call   f0105b7c <sched_run_all>

	return 0 ;
f0102dc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dc7:	c9                   	leave  
f0102dc8:	c3                   	ret    

f0102dc9 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102dc9:	55                   	push   %ebp
f0102dca:	89 e5                	mov    %esp,%ebp
f0102dcc:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102dcf:	e8 a6 2b 00 00       	call   f010597a <sched_print_all>

	return 0 ;
f0102dd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dd9:	c9                   	leave  
f0102dda:	c3                   	ret    

f0102ddb <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102ddb:	55                   	push   %ebp
f0102ddc:	89 e5                	mov    %esp,%ebp
f0102dde:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102de1:	e8 09 2e 00 00       	call   f0105bef <sched_kill_all>

	return 0 ;
f0102de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102deb:	c9                   	leave  
f0102dec:	c3                   	ret    

f0102ded <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102ded:	55                   	push   %ebp
f0102dee:	89 e5                	mov    %esp,%ebp
f0102df0:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0102df3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102df7:	7f 1a                	jg     f0102e13 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102df9:	83 ec 0c             	sub    $0xc,%esp
f0102dfc:	68 4c 0d 13 f0       	push   $0xf0130d4c
f0102e01:	e8 2b e0 ff ff       	call   f0100e31 <cprintf>
f0102e06:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e09:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0e:	e9 83 00 00 00       	jmp    f0102e96 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0102e13:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e16:	83 c0 04             	add    $0x4,%eax
f0102e19:	8b 00                	mov    (%eax),%eax
f0102e1b:	83 ec 04             	sub    $0x4,%esp
f0102e1e:	6a 0a                	push   $0xa
f0102e20:	6a 00                	push   $0x0
f0102e22:	50                   	push   %eax
f0102e23:	e8 e8 c2 02 00       	call   f012f110 <strtol>
f0102e28:	83 c4 10             	add    $0x10,%esp
f0102e2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0102e2e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102e32:	75 20                	jne    f0102e54 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102e34:	83 ec 0c             	sub    $0xc,%esp
f0102e37:	ff 75 f4             	pushl  -0xc(%ebp)
f0102e3a:	e8 28 a8 00 00       	call   f010d667 <setPageReplacmentAlgorithmLRU>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0102e42:	83 ec 0c             	sub    $0xc,%esp
f0102e45:	68 ac 0d 13 f0       	push   $0xf0130dac
f0102e4a:	e8 e2 df ff ff       	call   f0100e31 <cprintf>
f0102e4f:	83 c4 10             	add    $0x10,%esp
f0102e52:	eb 3d                	jmp    f0102e91 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0102e54:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102e58:	75 20                	jne    f0102e7a <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102e5a:	83 ec 0c             	sub    $0xc,%esp
f0102e5d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102e60:	e8 02 a8 00 00       	call   f010d667 <setPageReplacmentAlgorithmLRU>
f0102e65:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102e68:	83 ec 0c             	sub    $0xc,%esp
f0102e6b:	68 f0 0d 13 f0       	push   $0xf0130df0
f0102e70:	e8 bc df ff ff       	call   f0100e31 <cprintf>
f0102e75:	83 c4 10             	add    $0x10,%esp
f0102e78:	eb 17                	jmp    f0102e91 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102e7a:	83 ec 0c             	sub    $0xc,%esp
f0102e7d:	68 30 0e 13 f0       	push   $0xf0130e30
f0102e82:	e8 aa df ff ff       	call   f0100e31 <cprintf>
f0102e87:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e8f:	eb 05                	jmp    f0102e96 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0102e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e96:	c9                   	leave  
f0102e97:	c3                   	ret    

f0102e98 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0102e98:	55                   	push   %ebp
f0102e99:	89 e5                	mov    %esp,%ebp
f0102e9b:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0102e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea1:	83 c0 04             	add    $0x4,%eax
f0102ea4:	8b 00                	mov    (%eax),%eax
f0102ea6:	83 ec 04             	sub    $0x4,%esp
f0102ea9:	6a 0a                	push   $0xa
f0102eab:	6a 00                	push   $0x0
f0102ead:	50                   	push   %eax
f0102eae:	e8 5d c2 02 00       	call   f012f110 <strtol>
f0102eb3:	83 c4 10             	add    $0x10,%esp
f0102eb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0102eb9:	83 ec 0c             	sub    $0xc,%esp
f0102ebc:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ebf:	e8 16 a8 00 00       	call   f010d6da <setPageReplacmentAlgorithmNchanceCLOCK>
f0102ec4:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0102ec7:	83 ec 0c             	sub    $0xc,%esp
f0102eca:	68 84 0e 13 f0       	push   $0xf0130e84
f0102ecf:	e8 5d df ff ff       	call   f0100e31 <cprintf>
f0102ed4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102ed7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102edc:	c9                   	leave  
f0102edd:	c3                   	ret    

f0102ede <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102ede:	55                   	push   %ebp
f0102edf:	89 e5                	mov    %esp,%ebp
f0102ee1:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102ee4:	e8 b1 a7 00 00       	call   f010d69a <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102ee9:	83 ec 0c             	sub    $0xc,%esp
f0102eec:	68 b8 0e 13 f0       	push   $0xf0130eb8
f0102ef1:	e8 3b df ff ff       	call   f0100e31 <cprintf>
f0102ef6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102ef9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102efe:	c9                   	leave  
f0102eff:	c3                   	ret    

f0102f00 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102f00:	55                   	push   %ebp
f0102f01:	89 e5                	mov    %esp,%ebp
f0102f03:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102f06:	e8 9f a7 00 00       	call   f010d6aa <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102f0b:	83 ec 0c             	sub    $0xc,%esp
f0102f0e:	68 e4 0e 13 f0       	push   $0xf0130ee4
f0102f13:	e8 19 df ff ff       	call   f0100e31 <cprintf>
f0102f18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f20:	c9                   	leave  
f0102f21:	c3                   	ret    

f0102f22 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102f22:	55                   	push   %ebp
f0102f23:	89 e5                	mov    %esp,%ebp
f0102f25:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0102f28:	e8 8d a7 00 00       	call   f010d6ba <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102f2d:	83 ec 0c             	sub    $0xc,%esp
f0102f30:	68 0c 0f 13 f0       	push   $0xf0130f0c
f0102f35:	e8 f7 de ff ff       	call   f0100e31 <cprintf>
f0102f3a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f42:	c9                   	leave  
f0102f43:	c3                   	ret    

f0102f44 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102f44:	55                   	push   %ebp
f0102f45:	89 e5                	mov    %esp,%ebp
f0102f47:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102f4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f4d:	83 c0 04             	add    $0x4,%eax
f0102f50:	8b 00                	mov    (%eax),%eax
f0102f52:	83 ec 04             	sub    $0x4,%esp
f0102f55:	6a 0a                	push   $0xa
f0102f57:	6a 00                	push   $0x0
f0102f59:	50                   	push   %eax
f0102f5a:	e8 b1 c1 02 00       	call   f012f110 <strtol>
f0102f5f:	83 c4 10             	add    $0x10,%esp
f0102f62:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0102f65:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102f69:	83 ec 0c             	sub    $0xc,%esp
f0102f6c:	50                   	push   %eax
f0102f6d:	e8 44 33 00 00       	call   f01062b6 <sched_init_RR>
f0102f72:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102f75:	a0 a8 ae 2b f0       	mov    0xf02baea8,%al
f0102f7a:	0f b6 c0             	movzbl %al,%eax
f0102f7d:	83 ec 08             	sub    $0x8,%esp
f0102f80:	50                   	push   %eax
f0102f81:	68 40 0f 13 f0       	push   $0xf0130f40
f0102f86:	e8 a6 de ff ff       	call   f0100e31 <cprintf>
f0102f8b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f93:	c9                   	leave  
f0102f94:	c3                   	ret    

f0102f95 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102f95:	55                   	push   %ebp
f0102f96:	89 e5                	mov    %esp,%ebp
f0102f98:	53                   	push   %ebx
f0102f99:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102f9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f9f:	83 c0 04             	add    $0x4,%eax
f0102fa2:	8b 00                	mov    (%eax),%eax
f0102fa4:	83 ec 04             	sub    $0x4,%esp
f0102fa7:	6a 0a                	push   $0xa
f0102fa9:	6a 00                	push   $0x0
f0102fab:	50                   	push   %eax
f0102fac:	e8 5f c1 02 00       	call   f012f110 <strtol>
f0102fb1:	83 c4 10             	add    $0x10,%esp
f0102fb4:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102fb7:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102fbe:	eb 2e                	jmp    f0102fee <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102fc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102fc3:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102fc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102fc9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102fd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fd3:	01 d0                	add    %edx,%eax
f0102fd5:	8b 00                	mov    (%eax),%eax
f0102fd7:	83 ec 04             	sub    $0x4,%esp
f0102fda:	6a 0a                	push   $0xa
f0102fdc:	6a 00                	push   $0x0
f0102fde:	50                   	push   %eax
f0102fdf:	e8 2c c1 02 00       	call   f012f110 <strtol>
f0102fe4:	83 c4 10             	add    $0x10,%esp
f0102fe7:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102feb:	ff 45 f4             	incl   -0xc(%ebp)
f0102fee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ff1:	3b 45 08             	cmp    0x8(%ebp),%eax
f0102ff4:	7c ca                	jl     f0102fc0 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102ff6:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102ffa:	83 ec 08             	sub    $0x8,%esp
f0102ffd:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0103000:	52                   	push   %edx
f0103001:	50                   	push   %eax
f0103002:	e8 05 33 00 00       	call   f010630c <sched_init_MLFQ>
f0103007:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010300a:	83 ec 0c             	sub    $0xc,%esp
f010300d:	68 78 0f 13 f0       	push   $0xf0130f78
f0103012:	e8 1a de ff ff       	call   f0100e31 <cprintf>
f0103017:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010301a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103021:	eb 21                	jmp    f0103044 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103026:	05 a8 ae 2b f0       	add    $0xf02baea8,%eax
f010302b:	8a 00                	mov    (%eax),%al
f010302d:	0f b6 c0             	movzbl %al,%eax
f0103030:	83 ec 08             	sub    $0x8,%esp
f0103033:	50                   	push   %eax
f0103034:	68 a5 0f 13 f0       	push   $0xf0130fa5
f0103039:	e8 f3 dd ff ff       	call   f0100e31 <cprintf>
f010303e:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103041:	ff 45 f0             	incl   -0x10(%ebp)
f0103044:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0103049:	0f b6 c0             	movzbl %al,%eax
f010304c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010304f:	7f d2                	jg     f0103023 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0103051:	83 ec 0c             	sub    $0xc,%esp
f0103054:	68 29 0b 13 f0       	push   $0xf0130b29
f0103059:	e8 d3 dd ff ff       	call   f0100e31 <cprintf>
f010305e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103061:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103066:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103069:	c9                   	leave  
f010306a:	c3                   	ret    

f010306b <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f010306b:	55                   	push   %ebp
f010306c:	89 e5                	mov    %esp,%ebp
f010306e:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0103071:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103074:	83 c0 04             	add    $0x4,%eax
f0103077:	8b 00                	mov    (%eax),%eax
f0103079:	83 ec 04             	sub    $0x4,%esp
f010307c:	6a 0a                	push   $0xa
f010307e:	6a 00                	push   $0x0
f0103080:	50                   	push   %eax
f0103081:	e8 8a c0 02 00       	call   f012f110 <strtol>
f0103086:	83 c4 10             	add    $0x10,%esp
f0103089:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f010308c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010308f:	83 c0 08             	add    $0x8,%eax
f0103092:	8b 00                	mov    (%eax),%eax
f0103094:	83 ec 04             	sub    $0x4,%esp
f0103097:	6a 0a                	push   $0xa
f0103099:	6a 00                	push   $0x0
f010309b:	50                   	push   %eax
f010309c:	e8 6f c0 02 00       	call   f012f110 <strtol>
f01030a1:	83 c4 10             	add    $0x10,%esp
f01030a4:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f01030a7:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01030ab:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01030af:	83 ec 08             	sub    $0x8,%esp
f01030b2:	52                   	push   %edx
f01030b3:	50                   	push   %eax
f01030b4:	e8 62 32 00 00       	call   f010631b <sched_init_BSD>
f01030b9:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f01030bc:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01030c0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01030c4:	83 ec 04             	sub    $0x4,%esp
f01030c7:	52                   	push   %edx
f01030c8:	50                   	push   %eax
f01030c9:	68 ac 0f 13 f0       	push   $0xf0130fac
f01030ce:	e8 5e dd ff ff       	call   f0100e31 <cprintf>
f01030d3:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01030d6:	83 ec 0c             	sub    $0xc,%esp
f01030d9:	68 29 0b 13 f0       	push   $0xf0130b29
f01030de:	e8 4e dd ff ff       	call   f0100e31 <cprintf>
f01030e3:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030eb:	c9                   	leave  
f01030ec:	c3                   	ret    

f01030ed <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01030ed:	55                   	push   %ebp
f01030ee:	89 e5                	mov    %esp,%ebp
f01030f0:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01030f3:	e8 43 30 00 00       	call   f010613b <isSchedMethodMLFQ>
f01030f8:	85 c0                	test   %eax,%eax
f01030fa:	74 59                	je     f0103155 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01030fc:	83 ec 0c             	sub    $0xc,%esp
f01030ff:	68 e8 0f 13 f0       	push   $0xf0130fe8
f0103104:	e8 28 dd ff ff       	call   f0100e31 <cprintf>
f0103109:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010310c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103113:	eb 21                	jmp    f0103136 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0103115:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103118:	05 a8 ae 2b f0       	add    $0xf02baea8,%eax
f010311d:	8a 00                	mov    (%eax),%al
f010311f:	0f b6 c0             	movzbl %al,%eax
f0103122:	83 ec 08             	sub    $0x8,%esp
f0103125:	50                   	push   %eax
f0103126:	68 a5 0f 13 f0       	push   $0xf0130fa5
f010312b:	e8 01 dd ff ff       	call   f0100e31 <cprintf>
f0103130:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103133:	ff 45 f4             	incl   -0xc(%ebp)
f0103136:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f010313b:	0f b6 c0             	movzbl %al,%eax
f010313e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103141:	7f d2                	jg     f0103115 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0103143:	83 ec 0c             	sub    $0xc,%esp
f0103146:	68 29 0b 13 f0       	push   $0xf0130b29
f010314b:	e8 e1 dc ff ff       	call   f0100e31 <cprintf>
f0103150:	83 c4 10             	add    $0x10,%esp
f0103153:	eb 61                	jmp    f01031b6 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f0103155:	e8 c7 2f 00 00       	call   f0106121 <isSchedMethodRR>
f010315a:	85 c0                	test   %eax,%eax
f010315c:	74 1b                	je     f0103179 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010315e:	a0 a8 ae 2b f0       	mov    0xf02baea8,%al
f0103163:	0f b6 c0             	movzbl %al,%eax
f0103166:	83 ec 08             	sub    $0x8,%esp
f0103169:	50                   	push   %eax
f010316a:	68 1c 10 13 f0       	push   $0xf013101c
f010316f:	e8 bd dc ff ff       	call   f0100e31 <cprintf>
f0103174:	83 c4 10             	add    $0x10,%esp
f0103177:	eb 3d                	jmp    f01031b6 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f0103179:	e8 d8 2f 00 00       	call   f0106156 <isSchedMethodBSD>
f010317e:	85 c0                	test   %eax,%eax
f0103180:	74 24                	je     f01031a6 <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f0103182:	a0 a8 ae 2b f0       	mov    0xf02baea8,%al
f0103187:	0f b6 d0             	movzbl %al,%edx
f010318a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f010318f:	0f b6 c0             	movzbl %al,%eax
f0103192:	83 ec 04             	sub    $0x4,%esp
f0103195:	52                   	push   %edx
f0103196:	50                   	push   %eax
f0103197:	68 ac 0f 13 f0       	push   $0xf0130fac
f010319c:	e8 90 dc ff ff       	call   f0100e31 <cprintf>
f01031a1:	83 c4 10             	add    $0x10,%esp
f01031a4:	eb 10                	jmp    f01031b6 <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01031a6:	83 ec 0c             	sub    $0xc,%esp
f01031a9:	68 58 10 13 f0       	push   $0xf0131058
f01031ae:	e8 7e dc ff ff       	call   f0100e31 <cprintf>
f01031b3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01031b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031bb:	c9                   	leave  
f01031bc:	c3                   	ret    

f01031bd <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01031bd:	55                   	push   %ebp
f01031be:	89 e5                	mov    %esp,%ebp
f01031c0:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01031c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01031c6:	83 c0 04             	add    $0x4,%eax
f01031c9:	8b 00                	mov    (%eax),%eax
f01031cb:	83 ec 04             	sub    $0x4,%esp
f01031ce:	6a 0a                	push   $0xa
f01031d0:	6a 00                	push   $0x0
f01031d2:	50                   	push   %eax
f01031d3:	e8 38 bf 02 00       	call   f012f110 <strtol>
f01031d8:	83 c4 10             	add    $0x10,%esp
f01031db:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01031de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031e1:	0f b6 c0             	movzbl %al,%eax
f01031e4:	83 ec 0c             	sub    $0xc,%esp
f01031e7:	50                   	push   %eax
f01031e8:	e8 60 ae 02 00       	call   f012e04d <chksch>
f01031ed:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01031f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01031f4:	75 12                	jne    f0103208 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01031f6:	83 ec 0c             	sub    $0xc,%esp
f01031f9:	68 80 10 13 f0       	push   $0xf0131080
f01031fe:	e8 2e dc ff ff       	call   f0100e31 <cprintf>
f0103203:	83 c4 10             	add    $0x10,%esp
f0103206:	eb 16                	jmp    f010321e <command_sch_test+0x61>
	else if (status == 1)
f0103208:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010320c:	75 10                	jne    f010321e <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f010320e:	83 ec 0c             	sub    $0xc,%esp
f0103211:	68 a8 10 13 f0       	push   $0xf01310a8
f0103216:	e8 16 dc ff ff       	call   f0100e31 <cprintf>
f010321b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010321e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103223:	c9                   	leave  
f0103224:	c3                   	ret    

f0103225 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0103225:	55                   	push   %ebp
f0103226:	89 e5                	mov    %esp,%ebp
f0103228:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f010322b:	e8 d8 a4 00 00       	call   f010d708 <isPageReplacmentAlgorithmCLOCK>
f0103230:	85 c0                	test   %eax,%eax
f0103232:	74 15                	je     f0103249 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103234:	83 ec 0c             	sub    $0xc,%esp
f0103237:	68 cc 10 13 f0       	push   $0xf01310cc
f010323c:	e8 f0 db ff ff       	call   f0100e31 <cprintf>
f0103241:	83 c4 10             	add    $0x10,%esp
f0103244:	e9 8c 00 00 00       	jmp    f01032d5 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0103249:	83 ec 0c             	sub    $0xc,%esp
f010324c:	6a 01                	push   $0x1
f010324e:	e8 9f a4 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f0103253:	83 c4 10             	add    $0x10,%esp
f0103256:	85 c0                	test   %eax,%eax
f0103258:	74 12                	je     f010326c <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f010325a:	83 ec 0c             	sub    $0xc,%esp
f010325d:	68 f4 10 13 f0       	push   $0xf01310f4
f0103262:	e8 ca db ff ff       	call   f0100e31 <cprintf>
f0103267:	83 c4 10             	add    $0x10,%esp
f010326a:	eb 69                	jmp    f01032d5 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010326c:	83 ec 0c             	sub    $0xc,%esp
f010326f:	6a 02                	push   $0x2
f0103271:	e8 7c a4 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f0103276:	83 c4 10             	add    $0x10,%esp
f0103279:	85 c0                	test   %eax,%eax
f010327b:	74 12                	je     f010328f <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f010327d:	83 ec 0c             	sub    $0xc,%esp
f0103280:	68 34 11 13 f0       	push   $0xf0131134
f0103285:	e8 a7 db ff ff       	call   f0100e31 <cprintf>
f010328a:	83 c4 10             	add    $0x10,%esp
f010328d:	eb 46                	jmp    f01032d5 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f010328f:	e8 8f a4 00 00       	call   f010d723 <isPageReplacmentAlgorithmFIFO>
f0103294:	85 c0                	test   %eax,%eax
f0103296:	74 12                	je     f01032aa <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0103298:	83 ec 0c             	sub    $0xc,%esp
f010329b:	68 70 11 13 f0       	push   $0xf0131170
f01032a0:	e8 8c db ff ff       	call   f0100e31 <cprintf>
f01032a5:	83 c4 10             	add    $0x10,%esp
f01032a8:	eb 2b                	jmp    f01032d5 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01032aa:	e8 8f a4 00 00       	call   f010d73e <isPageReplacmentAlgorithmModifiedCLOCK>
f01032af:	85 c0                	test   %eax,%eax
f01032b1:	74 12                	je     f01032c5 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01032b3:	83 ec 0c             	sub    $0xc,%esp
f01032b6:	68 94 11 13 f0       	push   $0xf0131194
f01032bb:	e8 71 db ff ff       	call   f0100e31 <cprintf>
f01032c0:	83 c4 10             	add    $0x10,%esp
f01032c3:	eb 10                	jmp    f01032d5 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01032c5:	83 ec 0c             	sub    $0xc,%esp
f01032c8:	68 c4 11 13 f0       	push   $0xf01311c4
f01032cd:	e8 5f db ff ff       	call   f0100e31 <cprintf>
f01032d2:	83 c4 10             	add    $0x10,%esp

	return 0;
f01032d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01032da:	c9                   	leave  
f01032db:	c3                   	ret    

f01032dc <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01032dc:	55                   	push   %ebp
f01032dd:	89 e5                	mov    %esp,%ebp
f01032df:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01032e2:	e8 f4 ef ff ff       	call   f01022db <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01032e7:	83 ec 0c             	sub    $0xc,%esp
f01032ea:	68 f0 11 13 f0       	push   $0xf01311f0
f01032ef:	e8 3d db ff ff       	call   f0100e31 <cprintf>
f01032f4:	83 c4 10             	add    $0x10,%esp
	return 0;
f01032f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01032fc:	c9                   	leave  
f01032fd:	c3                   	ret    

f01032fe <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01032fe:	55                   	push   %ebp
f01032ff:	89 e5                	mov    %esp,%ebp
f0103301:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103304:	e8 e2 ef ff ff       	call   f01022eb <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0103309:	83 ec 0c             	sub    $0xc,%esp
f010330c:	68 20 12 13 f0       	push   $0xf0131220
f0103311:	e8 1b db ff ff       	call   f0100e31 <cprintf>
f0103316:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103319:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010331e:	c9                   	leave  
f010331f:	c3                   	ret    

f0103320 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0103326:	e8 d0 ef ff ff       	call   f01022fb <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f010332b:	83 ec 0c             	sub    $0xc,%esp
f010332e:	68 50 12 13 f0       	push   $0xf0131250
f0103333:	e8 f9 da ff ff       	call   f0100e31 <cprintf>
f0103338:	83 c4 10             	add    $0x10,%esp
	return 0;
f010333b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103340:	c9                   	leave  
f0103341:	c3                   	ret    

f0103342 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103342:	55                   	push   %ebp
f0103343:	89 e5                	mov    %esp,%ebp
f0103345:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0103348:	e8 be ef ff ff       	call   f010230b <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f010334d:	83 ec 0c             	sub    $0xc,%esp
f0103350:	68 80 12 13 f0       	push   $0xf0131280
f0103355:	e8 d7 da ff ff       	call   f0100e31 <cprintf>
f010335a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010335d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103362:	c9                   	leave  
f0103363:	c3                   	ret    

f0103364 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0103364:	55                   	push   %ebp
f0103365:	89 e5                	mov    %esp,%ebp
f0103367:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f010336a:	e8 ac ef ff ff       	call   f010231b <isUHeapPlacementStrategyFIRSTFIT>
f010336f:	84 c0                	test   %al,%al
f0103371:	74 12                	je     f0103385 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0103373:	83 ec 0c             	sub    $0xc,%esp
f0103376:	68 b0 12 13 f0       	push   $0xf01312b0
f010337b:	e8 b1 da ff ff       	call   f0100e31 <cprintf>
f0103380:	83 c4 10             	add    $0x10,%esp
f0103383:	eb 61                	jmp    f01033e6 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0103385:	e8 a6 ef ff ff       	call   f0102330 <isUHeapPlacementStrategyBESTFIT>
f010338a:	84 c0                	test   %al,%al
f010338c:	74 12                	je     f01033a0 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f010338e:	83 ec 0c             	sub    $0xc,%esp
f0103391:	68 dc 12 13 f0       	push   $0xf01312dc
f0103396:	e8 96 da ff ff       	call   f0100e31 <cprintf>
f010339b:	83 c4 10             	add    $0x10,%esp
f010339e:	eb 46                	jmp    f01033e6 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01033a0:	e8 a0 ef ff ff       	call   f0102345 <isUHeapPlacementStrategyNEXTFIT>
f01033a5:	84 c0                	test   %al,%al
f01033a7:	74 12                	je     f01033bb <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01033a9:	83 ec 0c             	sub    $0xc,%esp
f01033ac:	68 08 13 13 f0       	push   $0xf0131308
f01033b1:	e8 7b da ff ff       	call   f0100e31 <cprintf>
f01033b6:	83 c4 10             	add    $0x10,%esp
f01033b9:	eb 2b                	jmp    f01033e6 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01033bb:	e8 9a ef ff ff       	call   f010235a <isUHeapPlacementStrategyWORSTFIT>
f01033c0:	84 c0                	test   %al,%al
f01033c2:	74 12                	je     f01033d6 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01033c4:	83 ec 0c             	sub    $0xc,%esp
f01033c7:	68 34 13 13 f0       	push   $0xf0131334
f01033cc:	e8 60 da ff ff       	call   f0100e31 <cprintf>
f01033d1:	83 c4 10             	add    $0x10,%esp
f01033d4:	eb 10                	jmp    f01033e6 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01033d6:	83 ec 0c             	sub    $0xc,%esp
f01033d9:	68 60 13 13 f0       	push   $0xf0131360
f01033de:	e8 4e da ff ff       	call   f0100e31 <cprintf>
f01033e3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01033e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033eb:	c9                   	leave  
f01033ec:	c3                   	ret    

f01033ed <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01033ed:	55                   	push   %ebp
f01033ee:	89 e5                	mov    %esp,%ebp
f01033f0:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01033f3:	e8 2b ee ff ff       	call   f0102223 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01033f8:	83 ec 0c             	sub    $0xc,%esp
f01033fb:	68 8c 13 13 f0       	push   $0xf013138c
f0103400:	e8 2c da ff ff       	call   f0100e31 <cprintf>
f0103405:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103408:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010340d:	c9                   	leave  
f010340e:	c3                   	ret    

f010340f <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010340f:	55                   	push   %ebp
f0103410:	89 e5                	mov    %esp,%ebp
f0103412:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0103415:	e8 19 ee ff ff       	call   f0102233 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010341a:	83 ec 0c             	sub    $0xc,%esp
f010341d:	68 8c 13 13 f0       	push   $0xf013138c
f0103422:	e8 0a da ff ff       	call   f0100e31 <cprintf>
f0103427:	83 c4 10             	add    $0x10,%esp
	return 0;
f010342a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010342f:	c9                   	leave  
f0103430:	c3                   	ret    

f0103431 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103431:	55                   	push   %ebp
f0103432:	89 e5                	mov    %esp,%ebp
f0103434:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0103437:	e8 07 ee ff ff       	call   f0102243 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f010343c:	83 ec 0c             	sub    $0xc,%esp
f010343f:	68 c0 13 13 f0       	push   $0xf01313c0
f0103444:	e8 e8 d9 ff ff       	call   f0100e31 <cprintf>
f0103449:	83 c4 10             	add    $0x10,%esp
	return 0;
f010344c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103451:	c9                   	leave  
f0103452:	c3                   	ret    

f0103453 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103453:	55                   	push   %ebp
f0103454:	89 e5                	mov    %esp,%ebp
f0103456:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0103459:	e8 f5 ed ff ff       	call   f0102253 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f010345e:	83 ec 0c             	sub    $0xc,%esp
f0103461:	68 f0 13 13 f0       	push   $0xf01313f0
f0103466:	e8 c6 d9 ff ff       	call   f0100e31 <cprintf>
f010346b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010346e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103473:	c9                   	leave  
f0103474:	c3                   	ret    

f0103475 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103475:	55                   	push   %ebp
f0103476:	89 e5                	mov    %esp,%ebp
f0103478:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010347b:	e8 e3 ed ff ff       	call   f0102263 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0103480:	83 ec 0c             	sub    $0xc,%esp
f0103483:	68 20 14 13 f0       	push   $0xf0131420
f0103488:	e8 a4 d9 ff ff       	call   f0100e31 <cprintf>
f010348d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103490:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103495:	c9                   	leave  
f0103496:	c3                   	ret    

f0103497 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0103497:	55                   	push   %ebp
f0103498:	89 e5                	mov    %esp,%ebp
f010349a:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010349d:	e8 d1 ed ff ff       	call   f0102273 <isKHeapPlacementStrategyCONTALLOC>
f01034a2:	84 c0                	test   %al,%al
f01034a4:	74 12                	je     f01034b8 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01034a6:	83 ec 0c             	sub    $0xc,%esp
f01034a9:	68 54 14 13 f0       	push   $0xf0131454
f01034ae:	e8 7e d9 ff ff       	call   f0100e31 <cprintf>
f01034b3:	83 c4 10             	add    $0x10,%esp
f01034b6:	eb 7c                	jmp    f0103534 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01034b8:	e8 ca ed ff ff       	call   f0102287 <isKHeapPlacementStrategyFIRSTFIT>
f01034bd:	84 c0                	test   %al,%al
f01034bf:	74 12                	je     f01034d3 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01034c1:	83 ec 0c             	sub    $0xc,%esp
f01034c4:	68 90 14 13 f0       	push   $0xf0131490
f01034c9:	e8 63 d9 ff ff       	call   f0100e31 <cprintf>
f01034ce:	83 c4 10             	add    $0x10,%esp
f01034d1:	eb 61                	jmp    f0103534 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01034d3:	e8 c4 ed ff ff       	call   f010229c <isKHeapPlacementStrategyBESTFIT>
f01034d8:	84 c0                	test   %al,%al
f01034da:	74 12                	je     f01034ee <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01034dc:	83 ec 0c             	sub    $0xc,%esp
f01034df:	68 c0 14 13 f0       	push   $0xf01314c0
f01034e4:	e8 48 d9 ff ff       	call   f0100e31 <cprintf>
f01034e9:	83 c4 10             	add    $0x10,%esp
f01034ec:	eb 46                	jmp    f0103534 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01034ee:	e8 be ed ff ff       	call   f01022b1 <isKHeapPlacementStrategyNEXTFIT>
f01034f3:	84 c0                	test   %al,%al
f01034f5:	74 12                	je     f0103509 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	68 ec 14 13 f0       	push   $0xf01314ec
f01034ff:	e8 2d d9 ff ff       	call   f0100e31 <cprintf>
f0103504:	83 c4 10             	add    $0x10,%esp
f0103507:	eb 2b                	jmp    f0103534 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0103509:	e8 b8 ed ff ff       	call   f01022c6 <isKHeapPlacementStrategyWORSTFIT>
f010350e:	84 c0                	test   %al,%al
f0103510:	74 12                	je     f0103524 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103512:	83 ec 0c             	sub    $0xc,%esp
f0103515:	68 18 15 13 f0       	push   $0xf0131518
f010351a:	e8 12 d9 ff ff       	call   f0100e31 <cprintf>
f010351f:	83 c4 10             	add    $0x10,%esp
f0103522:	eb 10                	jmp    f0103534 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103524:	83 ec 0c             	sub    $0xc,%esp
f0103527:	68 48 15 13 f0       	push   $0xf0131548
f010352c:	e8 00 d9 ff ff       	call   f0100e31 <cprintf>
f0103531:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103534:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103539:	c9                   	leave  
f010353a:	c3                   	ret    

f010353b <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f010353b:	55                   	push   %ebp
f010353c:	89 e5                	mov    %esp,%ebp
f010353e:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103541:	e8 6f a2 00 00       	call   f010d7b5 <isBufferingEnabled>
f0103546:	84 c0                	test   %al,%al
f0103548:	75 12                	jne    f010355c <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010354a:	83 ec 0c             	sub    $0xc,%esp
f010354d:	68 78 15 13 f0       	push   $0xf0131578
f0103552:	e8 da d8 ff ff       	call   f0100e31 <cprintf>
f0103557:	83 c4 10             	add    $0x10,%esp
f010355a:	eb 1d                	jmp    f0103579 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f010355c:	83 ec 0c             	sub    $0xc,%esp
f010355f:	6a 00                	push   $0x0
f0103561:	e8 29 a2 00 00       	call   f010d78f <enableModifiedBuffer>
f0103566:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0103569:	83 ec 0c             	sub    $0xc,%esp
f010356c:	68 b4 15 13 f0       	push   $0xf01315b4
f0103571:	e8 bb d8 ff ff       	call   f0100e31 <cprintf>
f0103576:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0103579:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010357e:	c9                   	leave  
f010357f:	c3                   	ret    

f0103580 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103580:	55                   	push   %ebp
f0103581:	89 e5                	mov    %esp,%ebp
f0103583:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103586:	e8 2a a2 00 00       	call   f010d7b5 <isBufferingEnabled>
f010358b:	84 c0                	test   %al,%al
f010358d:	75 12                	jne    f01035a1 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010358f:	83 ec 0c             	sub    $0xc,%esp
f0103592:	68 78 15 13 f0       	push   $0xf0131578
f0103597:	e8 95 d8 ff ff       	call   f0100e31 <cprintf>
f010359c:	83 c4 10             	add    $0x10,%esp
f010359f:	eb 1d                	jmp    f01035be <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01035a1:	83 ec 0c             	sub    $0xc,%esp
f01035a4:	6a 01                	push   $0x1
f01035a6:	e8 e4 a1 00 00       	call   f010d78f <enableModifiedBuffer>
f01035ab:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01035ae:	83 ec 0c             	sub    $0xc,%esp
f01035b1:	68 d8 15 13 f0       	push   $0xf01315d8
f01035b6:	e8 76 d8 ff ff       	call   f0100e31 <cprintf>
f01035bb:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01035be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035c3:	c9                   	leave  
f01035c4:	c3                   	ret    

f01035c5 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01035c5:	55                   	push   %ebp
f01035c6:	89 e5                	mov    %esp,%ebp
f01035c8:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01035cb:	83 ec 0c             	sub    $0xc,%esp
f01035ce:	6a 00                	push   $0x0
f01035d0:	e8 d2 a1 00 00       	call   f010d7a7 <enableBuffering>
f01035d5:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01035d8:	83 ec 0c             	sub    $0xc,%esp
f01035db:	6a 00                	push   $0x0
f01035dd:	e8 ad a1 00 00       	call   f010d78f <enableModifiedBuffer>
f01035e2:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01035e5:	83 ec 0c             	sub    $0xc,%esp
f01035e8:	68 f8 15 13 f0       	push   $0xf01315f8
f01035ed:	e8 3f d8 ff ff       	call   f0100e31 <cprintf>
f01035f2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01035f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035fa:	c9                   	leave  
f01035fb:	c3                   	ret    

f01035fc <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01035fc:	55                   	push   %ebp
f01035fd:	89 e5                	mov    %esp,%ebp
f01035ff:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103602:	83 ec 0c             	sub    $0xc,%esp
f0103605:	6a 01                	push   $0x1
f0103607:	e8 9b a1 00 00       	call   f010d7a7 <enableBuffering>
f010360c:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010360f:	83 ec 0c             	sub    $0xc,%esp
f0103612:	6a 01                	push   $0x1
f0103614:	e8 76 a1 00 00       	call   f010d78f <enableModifiedBuffer>
f0103619:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f010361c:	e8 ac a1 00 00       	call   f010d7cd <getModifiedBufferLength>
f0103621:	85 c0                	test   %eax,%eax
f0103623:	75 59                	jne    f010367e <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0103625:	83 ec 0c             	sub    $0xc,%esp
f0103628:	68 14 16 13 f0       	push   $0xf0131614
f010362d:	e8 ff d7 ff ff       	call   f0100e31 <cprintf>
f0103632:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0103635:	83 ec 08             	sub    $0x8,%esp
f0103638:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010363b:	50                   	push   %eax
f010363c:	68 44 16 13 f0       	push   $0xf0131644
f0103641:	e8 64 b5 02 00       	call   f012ebaa <readline>
f0103646:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0103649:	83 ec 04             	sub    $0x4,%esp
f010364c:	6a 0a                	push   $0xa
f010364e:	6a 00                	push   $0x0
f0103650:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103653:	50                   	push   %eax
f0103654:	e8 b7 ba 02 00       	call   f012f110 <strtol>
f0103659:	83 c4 10             	add    $0x10,%esp
f010365c:	83 ec 0c             	sub    $0xc,%esp
f010365f:	50                   	push   %eax
f0103660:	e8 5a a1 00 00       	call   f010d7bf <setModifiedBufferLength>
f0103665:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103668:	e8 60 a1 00 00       	call   f010d7cd <getModifiedBufferLength>
f010366d:	83 ec 08             	sub    $0x8,%esp
f0103670:	50                   	push   %eax
f0103671:	68 70 16 13 f0       	push   $0xf0131670
f0103676:	e8 b6 d7 ff ff       	call   f0100e31 <cprintf>
f010367b:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f010367e:	83 ec 0c             	sub    $0xc,%esp
f0103681:	68 95 16 13 f0       	push   $0xf0131695
f0103686:	e8 a6 d7 ff ff       	call   f0100e31 <cprintf>
f010368b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010368e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103693:	c9                   	leave  
f0103694:	c3                   	ret    

f0103695 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103695:	55                   	push   %ebp
f0103696:	89 e5                	mov    %esp,%ebp
f0103698:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010369b:	e8 15 a1 00 00       	call   f010d7b5 <isBufferingEnabled>
f01036a0:	84 c0                	test   %al,%al
f01036a2:	75 12                	jne    f01036b6 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01036a4:	83 ec 0c             	sub    $0xc,%esp
f01036a7:	68 b0 16 13 f0       	push   $0xf01316b0
f01036ac:	e8 80 d7 ff ff       	call   f0100e31 <cprintf>
f01036b1:	83 c4 10             	add    $0x10,%esp
f01036b4:	eb 19                	jmp    f01036cf <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01036b6:	e8 e2 a0 00 00       	call   f010d79d <isModifiedBufferEnabled>
f01036bb:	84 c0                	test   %al,%al
f01036bd:	75 10                	jne    f01036cf <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01036bf:	83 ec 0c             	sub    $0xc,%esp
f01036c2:	68 00 17 13 f0       	push   $0xf0131700
f01036c7:	e8 65 d7 ff ff       	call   f0100e31 <cprintf>
f01036cc:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01036cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01036d2:	83 c0 04             	add    $0x4,%eax
f01036d5:	8b 00                	mov    (%eax),%eax
f01036d7:	83 ec 04             	sub    $0x4,%esp
f01036da:	6a 0a                	push   $0xa
f01036dc:	6a 00                	push   $0x0
f01036de:	50                   	push   %eax
f01036df:	e8 2c ba 02 00       	call   f012f110 <strtol>
f01036e4:	83 c4 10             	add    $0x10,%esp
f01036e7:	83 ec 0c             	sub    $0xc,%esp
f01036ea:	50                   	push   %eax
f01036eb:	e8 cf a0 00 00       	call   f010d7bf <setModifiedBufferLength>
f01036f0:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01036f3:	e8 d5 a0 00 00       	call   f010d7cd <getModifiedBufferLength>
f01036f8:	83 ec 08             	sub    $0x8,%esp
f01036fb:	50                   	push   %eax
f01036fc:	68 70 16 13 f0       	push   $0xf0131670
f0103701:	e8 2b d7 ff ff       	call   f0100e31 <cprintf>
f0103706:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103709:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010370e:	c9                   	leave  
f010370f:	c3                   	ret    

f0103710 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103710:	55                   	push   %ebp
f0103711:	89 e5                	mov    %esp,%ebp
f0103713:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103716:	e8 9a a0 00 00       	call   f010d7b5 <isBufferingEnabled>
f010371b:	84 c0                	test   %al,%al
f010371d:	75 12                	jne    f0103731 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010371f:	83 ec 0c             	sub    $0xc,%esp
f0103722:	68 b0 16 13 f0       	push   $0xf01316b0
f0103727:	e8 05 d7 ff ff       	call   f0100e31 <cprintf>
f010372c:	83 c4 10             	add    $0x10,%esp
f010372f:	eb 19                	jmp    f010374a <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103731:	e8 67 a0 00 00       	call   f010d79d <isModifiedBufferEnabled>
f0103736:	84 c0                	test   %al,%al
f0103738:	75 10                	jne    f010374a <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010373a:	83 ec 0c             	sub    $0xc,%esp
f010373d:	68 00 17 13 f0       	push   $0xf0131700
f0103742:	e8 ea d6 ff ff       	call   f0100e31 <cprintf>
f0103747:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f010374a:	e8 7e a0 00 00       	call   f010d7cd <getModifiedBufferLength>
f010374f:	83 ec 08             	sub    $0x8,%esp
f0103752:	50                   	push   %eax
f0103753:	68 46 17 13 f0       	push   $0xf0131746
f0103758:	e8 d4 d6 ff ff       	call   f0100e31 <cprintf>
f010375d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103760:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103765:	c9                   	leave  
f0103766:	c3                   	ret    

f0103767 <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f0103767:	55                   	push   %ebp
f0103768:	89 e5                	mov    %esp,%ebp
f010376a:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f010376d:	83 ec 08             	sub    $0x8,%esp
f0103770:	ff 75 0c             	pushl  0xc(%ebp)
f0103773:	ff 75 08             	pushl  0x8(%ebp)
f0103776:	e8 98 a4 00 00       	call   f010dc13 <tst_handler>
f010377b:	83 c4 10             	add    $0x10,%esp
}
f010377e:	c9                   	leave  
f010377f:	c3                   	ret    

f0103780 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103780:	55                   	push   %ebp
f0103781:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0103783:	8b 45 08             	mov    0x8(%ebp),%eax
f0103786:	8b 15 d0 ae 2b f0    	mov    0xf02baed0,%edx
f010378c:	29 d0                	sub    %edx,%eax
f010378e:	c1 f8 02             	sar    $0x2,%eax
f0103791:	89 c2                	mov    %eax,%edx
f0103793:	89 d0                	mov    %edx,%eax
f0103795:	c1 e0 03             	shl    $0x3,%eax
f0103798:	01 d0                	add    %edx,%eax
f010379a:	c1 e0 03             	shl    $0x3,%eax
f010379d:	01 d0                	add    %edx,%eax
f010379f:	c1 e0 03             	shl    $0x3,%eax
f01037a2:	01 d0                	add    %edx,%eax
f01037a4:	c1 e0 03             	shl    $0x3,%eax
f01037a7:	01 d0                	add    %edx,%eax
f01037a9:	89 c1                	mov    %eax,%ecx
f01037ab:	c1 e1 0f             	shl    $0xf,%ecx
f01037ae:	01 c8                	add    %ecx,%eax
f01037b0:	c1 e0 03             	shl    $0x3,%eax
f01037b3:	01 d0                	add    %edx,%eax
f01037b5:	f7 d8                	neg    %eax
}
f01037b7:	5d                   	pop    %ebp
f01037b8:	c3                   	ret    

f01037b9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01037b9:	55                   	push   %ebp
f01037ba:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01037bc:	ff 75 08             	pushl  0x8(%ebp)
f01037bf:	e8 bc ff ff ff       	call   f0103780 <to_frame_number>
f01037c4:	83 c4 04             	add    $0x4,%esp
f01037c7:	c1 e0 0c             	shl    $0xc,%eax
}
f01037ca:	c9                   	leave  
f01037cb:	c3                   	ret    

f01037cc <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01037cc:	55                   	push   %ebp
f01037cd:	89 e5                	mov    %esp,%ebp
f01037cf:	53                   	push   %ebx
f01037d0:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f01037d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01037d6:	c1 e8 0c             	shr    $0xc,%eax
f01037d9:	89 c2                	mov    %eax,%edx
f01037db:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f01037e0:	39 c2                	cmp    %eax,%edx
f01037e2:	72 14                	jb     f01037f8 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f01037e4:	83 ec 04             	sub    $0x4,%esp
f01037e7:	68 64 17 13 f0       	push   $0xf0131764
f01037ec:	6a 55                	push   $0x55
f01037ee:	68 8c 17 13 f0       	push   $0xf013178c
f01037f3:	e8 b8 c9 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f01037f8:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f01037fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103801:	c1 e8 0c             	shr    $0xc,%eax
f0103804:	89 c2                	mov    %eax,%edx
f0103806:	89 d0                	mov    %edx,%eax
f0103808:	01 c0                	add    %eax,%eax
f010380a:	01 d0                	add    %edx,%eax
f010380c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103813:	01 d8                	add    %ebx,%eax
f0103815:	01 d0                	add    %edx,%eax
f0103817:	01 c8                	add    %ecx,%eax
}
f0103819:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010381c:	c9                   	leave  
f010381d:	c3                   	ret    

f010381e <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010381e:	55                   	push   %ebp
f010381f:	89 e5                	mov    %esp,%ebp
f0103821:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103824:	8b 45 08             	mov    0x8(%ebp),%eax
f0103827:	05 00 14 00 00       	add    $0x1400,%eax
f010382c:	c1 e0 03             	shl    $0x3,%eax
f010382f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103832:	83 ec 04             	sub    $0x4,%esp
f0103835:	6a 08                	push   $0x8
f0103837:	ff 75 0c             	pushl  0xc(%ebp)
f010383a:	ff 75 f4             	pushl  -0xc(%ebp)
f010383d:	e8 de bc 02 00       	call   f012f520 <ide_read>
f0103842:	83 c4 10             	add    $0x10,%esp
f0103845:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0103848:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010384b:	c9                   	leave  
f010384c:	c3                   	ret    

f010384d <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010384d:	55                   	push   %ebp
f010384e:	89 e5                	mov    %esp,%ebp
f0103850:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103853:	8b 45 08             	mov    0x8(%ebp),%eax
f0103856:	05 00 14 00 00       	add    $0x1400,%eax
f010385b:	c1 e0 03             	shl    $0x3,%eax
f010385e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103861:	83 ec 04             	sub    $0x4,%esp
f0103864:	6a 08                	push   $0x8
f0103866:	ff 75 0c             	pushl  0xc(%ebp)
f0103869:	ff 75 f4             	pushl  -0xc(%ebp)
f010386c:	e8 ef bd 02 00       	call   f012f660 <ide_write>
f0103871:	83 c4 10             	add    $0x10,%esp
f0103874:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103877:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010387b:	74 14                	je     f0103891 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010387d:	83 ec 04             	sub    $0x4,%esp
f0103880:	68 ae 17 13 f0       	push   $0xf01317ae
f0103885:	6a 2e                	push   $0x2e
f0103887:	68 c5 17 13 f0       	push   $0xf01317c5
f010388c:	e8 1f c9 ff ff       	call   f01001b0 <_panic>
	return success;
f0103891:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103894:	c9                   	leave  
f0103895:	c3                   	ret    

f0103896 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103896:	55                   	push   %ebp
f0103897:	89 e5                	mov    %esp,%ebp
f0103899:	56                   	push   %esi
f010389a:	53                   	push   %ebx
f010389b:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f010389e:	c7 05 44 93 2d f0 00 	movl   $0x0,0xf02d9344
f01038a5:	00 00 00 
f01038a8:	c7 05 48 93 2d f0 00 	movl   $0x0,0xf02d9348
f01038af:	00 00 00 
f01038b2:	c7 05 50 93 2d f0 00 	movl   $0x0,0xf02d9350
f01038b9:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01038bc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01038c3:	e9 20 01 00 00       	jmp    f01039e8 <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01038c8:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f01038ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038d1:	89 d0                	mov    %edx,%eax
f01038d3:	01 c0                	add    %eax,%eax
f01038d5:	01 d0                	add    %edx,%eax
f01038d7:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01038de:	01 d8                	add    %ebx,%eax
f01038e0:	01 d0                	add    %edx,%eax
f01038e2:	01 c8                	add    %ecx,%eax
f01038e4:	83 ec 0c             	sub    $0xc,%esp
f01038e7:	50                   	push   %eax
f01038e8:	e8 bf 39 00 00       	call   f01072ac <initialize_frame_info>
f01038ed:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f01038f0:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f01038f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038f9:	89 d0                	mov    %edx,%eax
f01038fb:	01 c0                	add    %eax,%eax
f01038fd:	01 d0                	add    %edx,%eax
f01038ff:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103906:	01 d8                	add    %ebx,%eax
f0103908:	01 d0                	add    %edx,%eax
f010390a:	01 c8                	add    %ecx,%eax
f010390c:	85 c0                	test   %eax,%eax
f010390e:	75 14                	jne    f0103924 <initialize_disk_page_file+0x8e>
f0103910:	83 ec 04             	sub    $0x4,%esp
f0103913:	68 e4 17 13 f0       	push   $0xf01317e4
f0103918:	6a 59                	push   $0x59
f010391a:	68 c5 17 13 f0       	push   $0xf01317c5
f010391f:	e8 8c c8 ff ff       	call   f01001b0 <_panic>
f0103924:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f010392a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010392d:	89 d0                	mov    %edx,%eax
f010392f:	01 c0                	add    %eax,%eax
f0103931:	01 d0                	add    %edx,%eax
f0103933:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010393a:	01 d8                	add    %ebx,%eax
f010393c:	01 d0                	add    %edx,%eax
f010393e:	01 c8                	add    %ecx,%eax
f0103940:	8b 15 44 93 2d f0    	mov    0xf02d9344,%edx
f0103946:	89 10                	mov    %edx,(%eax)
f0103948:	8b 00                	mov    (%eax),%eax
f010394a:	85 c0                	test   %eax,%eax
f010394c:	74 27                	je     f0103975 <initialize_disk_page_file+0xdf>
f010394e:	8b 0d 44 93 2d f0    	mov    0xf02d9344,%ecx
f0103954:	8b 1d 10 2b 25 f0    	mov    0xf0252b10,%ebx
f010395a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010395d:	89 d0                	mov    %edx,%eax
f010395f:	01 c0                	add    %eax,%eax
f0103961:	01 d0                	add    %edx,%eax
f0103963:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010396a:	01 f0                	add    %esi,%eax
f010396c:	01 d0                	add    %edx,%eax
f010396e:	01 d8                	add    %ebx,%eax
f0103970:	89 41 04             	mov    %eax,0x4(%ecx)
f0103973:	eb 21                	jmp    f0103996 <initialize_disk_page_file+0x100>
f0103975:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f010397b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010397e:	89 d0                	mov    %edx,%eax
f0103980:	01 c0                	add    %eax,%eax
f0103982:	01 d0                	add    %edx,%eax
f0103984:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010398b:	01 d8                	add    %ebx,%eax
f010398d:	01 d0                	add    %edx,%eax
f010398f:	01 c8                	add    %ecx,%eax
f0103991:	a3 48 93 2d f0       	mov    %eax,0xf02d9348
f0103996:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f010399c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010399f:	89 d0                	mov    %edx,%eax
f01039a1:	01 c0                	add    %eax,%eax
f01039a3:	01 d0                	add    %edx,%eax
f01039a5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01039ac:	01 d8                	add    %ebx,%eax
f01039ae:	01 d0                	add    %edx,%eax
f01039b0:	01 c8                	add    %ecx,%eax
f01039b2:	a3 44 93 2d f0       	mov    %eax,0xf02d9344
f01039b7:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f01039bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039c0:	89 d0                	mov    %edx,%eax
f01039c2:	01 c0                	add    %eax,%eax
f01039c4:	01 d0                	add    %edx,%eax
f01039c6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01039cd:	01 d8                	add    %ebx,%eax
f01039cf:	01 d0                	add    %edx,%eax
f01039d1:	01 c8                	add    %ecx,%eax
f01039d3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01039da:	a1 50 93 2d f0       	mov    0xf02d9350,%eax
f01039df:	40                   	inc    %eax
f01039e0:	a3 50 93 2d f0       	mov    %eax,0xf02d9350
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01039e5:	ff 45 f4             	incl   -0xc(%ebp)
f01039e8:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01039ef:	0f 8e d3 fe ff ff    	jle    f01038c8 <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01039f5:	90                   	nop
f01039f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01039f9:	5b                   	pop    %ebx
f01039fa:	5e                   	pop    %esi
f01039fb:	5d                   	pop    %ebp
f01039fc:	c3                   	ret    

f01039fd <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01039fd:	55                   	push   %ebp
f01039fe:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103a00:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a03:	8b 15 10 2b 25 f0    	mov    0xf0252b10,%edx
f0103a09:	29 d0                	sub    %edx,%eax
f0103a0b:	c1 f8 02             	sar    $0x2,%eax
f0103a0e:	89 c2                	mov    %eax,%edx
f0103a10:	89 d0                	mov    %edx,%eax
f0103a12:	c1 e0 03             	shl    $0x3,%eax
f0103a15:	01 d0                	add    %edx,%eax
f0103a17:	c1 e0 03             	shl    $0x3,%eax
f0103a1a:	01 d0                	add    %edx,%eax
f0103a1c:	c1 e0 03             	shl    $0x3,%eax
f0103a1f:	01 d0                	add    %edx,%eax
f0103a21:	c1 e0 03             	shl    $0x3,%eax
f0103a24:	01 d0                	add    %edx,%eax
f0103a26:	89 c1                	mov    %eax,%ecx
f0103a28:	c1 e1 0f             	shl    $0xf,%ecx
f0103a2b:	01 c8                	add    %ecx,%eax
f0103a2d:	c1 e0 03             	shl    $0x3,%eax
f0103a30:	01 d0                	add    %edx,%eax
f0103a32:	f7 d8                	neg    %eax
}
f0103a34:	5d                   	pop    %ebp
f0103a35:	c3                   	ret    

f0103a36 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103a36:	55                   	push   %ebp
f0103a37:	89 e5                	mov    %esp,%ebp
f0103a39:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103a3c:	a1 44 93 2d f0       	mov    0xf02d9344,%eax
f0103a41:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103a44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103a48:	75 0a                	jne    f0103a54 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103a4a:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103a4f:	e9 a7 00 00 00       	jmp    f0103afb <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103a54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103a58:	75 14                	jne    f0103a6e <allocate_disk_frame+0x38>
f0103a5a:	83 ec 04             	sub    $0x4,%esp
f0103a5d:	68 07 18 13 f0       	push   $0xf0131807
f0103a62:	6a 78                	push   $0x78
f0103a64:	68 c5 17 13 f0       	push   $0xf01317c5
f0103a69:	e8 42 c7 ff ff       	call   f01001b0 <_panic>
f0103a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a71:	8b 00                	mov    (%eax),%eax
f0103a73:	85 c0                	test   %eax,%eax
f0103a75:	74 10                	je     f0103a87 <allocate_disk_frame+0x51>
f0103a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a7a:	8b 00                	mov    (%eax),%eax
f0103a7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a7f:	8b 52 04             	mov    0x4(%edx),%edx
f0103a82:	89 50 04             	mov    %edx,0x4(%eax)
f0103a85:	eb 0b                	jmp    f0103a92 <allocate_disk_frame+0x5c>
f0103a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a8a:	8b 40 04             	mov    0x4(%eax),%eax
f0103a8d:	a3 48 93 2d f0       	mov    %eax,0xf02d9348
f0103a92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a95:	8b 40 04             	mov    0x4(%eax),%eax
f0103a98:	85 c0                	test   %eax,%eax
f0103a9a:	74 0f                	je     f0103aab <allocate_disk_frame+0x75>
f0103a9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a9f:	8b 40 04             	mov    0x4(%eax),%eax
f0103aa2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103aa5:	8b 12                	mov    (%edx),%edx
f0103aa7:	89 10                	mov    %edx,(%eax)
f0103aa9:	eb 0a                	jmp    f0103ab5 <allocate_disk_frame+0x7f>
f0103aab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103aae:	8b 00                	mov    (%eax),%eax
f0103ab0:	a3 44 93 2d f0       	mov    %eax,0xf02d9344
f0103ab5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ab8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ac1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ac8:	a1 50 93 2d f0       	mov    0xf02d9350,%eax
f0103acd:	48                   	dec    %eax
f0103ace:	a3 50 93 2d f0       	mov    %eax,0xf02d9350
	initialize_frame_info(ptr_frame_info);
f0103ad3:	83 ec 0c             	sub    $0xc,%esp
f0103ad6:	ff 75 f4             	pushl  -0xc(%ebp)
f0103ad9:	e8 ce 37 00 00       	call   f01072ac <initialize_frame_info>
f0103ade:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103ae1:	83 ec 0c             	sub    $0xc,%esp
f0103ae4:	ff 75 f4             	pushl  -0xc(%ebp)
f0103ae7:	e8 11 ff ff ff       	call   f01039fd <to_disk_frame_number>
f0103aec:	83 c4 10             	add    $0x10,%esp
f0103aef:	89 c2                	mov    %eax,%edx
f0103af1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af4:	89 10                	mov    %edx,(%eax)
	return 0;
f0103af6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103afb:	c9                   	leave  
f0103afc:	c3                   	ret    

f0103afd <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103afd:	55                   	push   %ebp
f0103afe:	89 e5                	mov    %esp,%ebp
f0103b00:	56                   	push   %esi
f0103b01:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103b02:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103b06:	0f 84 fa 00 00 00    	je     f0103c06 <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103b0c:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f0103b12:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b15:	89 d0                	mov    %edx,%eax
f0103b17:	01 c0                	add    %eax,%eax
f0103b19:	01 d0                	add    %edx,%eax
f0103b1b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b22:	01 d8                	add    %ebx,%eax
f0103b24:	01 d0                	add    %edx,%eax
f0103b26:	01 c8                	add    %ecx,%eax
f0103b28:	85 c0                	test   %eax,%eax
f0103b2a:	75 17                	jne    f0103b43 <free_disk_frame+0x46>
f0103b2c:	83 ec 04             	sub    $0x4,%esp
f0103b2f:	68 e4 17 13 f0       	push   $0xf01317e4
f0103b34:	68 85 00 00 00       	push   $0x85
f0103b39:	68 c5 17 13 f0       	push   $0xf01317c5
f0103b3e:	e8 6d c6 ff ff       	call   f01001b0 <_panic>
f0103b43:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f0103b49:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b4c:	89 d0                	mov    %edx,%eax
f0103b4e:	01 c0                	add    %eax,%eax
f0103b50:	01 d0                	add    %edx,%eax
f0103b52:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b59:	01 d8                	add    %ebx,%eax
f0103b5b:	01 d0                	add    %edx,%eax
f0103b5d:	01 c8                	add    %ecx,%eax
f0103b5f:	8b 15 44 93 2d f0    	mov    0xf02d9344,%edx
f0103b65:	89 10                	mov    %edx,(%eax)
f0103b67:	8b 00                	mov    (%eax),%eax
f0103b69:	85 c0                	test   %eax,%eax
f0103b6b:	74 27                	je     f0103b94 <free_disk_frame+0x97>
f0103b6d:	8b 0d 44 93 2d f0    	mov    0xf02d9344,%ecx
f0103b73:	8b 1d 10 2b 25 f0    	mov    0xf0252b10,%ebx
f0103b79:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b7c:	89 d0                	mov    %edx,%eax
f0103b7e:	01 c0                	add    %eax,%eax
f0103b80:	01 d0                	add    %edx,%eax
f0103b82:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0103b89:	01 f0                	add    %esi,%eax
f0103b8b:	01 d0                	add    %edx,%eax
f0103b8d:	01 d8                	add    %ebx,%eax
f0103b8f:	89 41 04             	mov    %eax,0x4(%ecx)
f0103b92:	eb 21                	jmp    f0103bb5 <free_disk_frame+0xb8>
f0103b94:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f0103b9a:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b9d:	89 d0                	mov    %edx,%eax
f0103b9f:	01 c0                	add    %eax,%eax
f0103ba1:	01 d0                	add    %edx,%eax
f0103ba3:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103baa:	01 d8                	add    %ebx,%eax
f0103bac:	01 d0                	add    %edx,%eax
f0103bae:	01 c8                	add    %ecx,%eax
f0103bb0:	a3 48 93 2d f0       	mov    %eax,0xf02d9348
f0103bb5:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f0103bbb:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bbe:	89 d0                	mov    %edx,%eax
f0103bc0:	01 c0                	add    %eax,%eax
f0103bc2:	01 d0                	add    %edx,%eax
f0103bc4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103bcb:	01 d8                	add    %ebx,%eax
f0103bcd:	01 d0                	add    %edx,%eax
f0103bcf:	01 c8                	add    %ecx,%eax
f0103bd1:	a3 44 93 2d f0       	mov    %eax,0xf02d9344
f0103bd6:	8b 0d 10 2b 25 f0    	mov    0xf0252b10,%ecx
f0103bdc:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bdf:	89 d0                	mov    %edx,%eax
f0103be1:	01 c0                	add    %eax,%eax
f0103be3:	01 d0                	add    %edx,%eax
f0103be5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103bec:	01 d8                	add    %ebx,%eax
f0103bee:	01 d0                	add    %edx,%eax
f0103bf0:	01 c8                	add    %ecx,%eax
f0103bf2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103bf9:	a1 50 93 2d f0       	mov    0xf02d9350,%eax
f0103bfe:	40                   	inc    %eax
f0103bff:	a3 50 93 2d f0       	mov    %eax,0xf02d9350
f0103c04:	eb 01                	jmp    f0103c07 <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103c06:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103c07:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103c0a:	5b                   	pop    %ebx
f0103c0b:	5e                   	pop    %esi
f0103c0c:	5d                   	pop    %ebp
f0103c0d:	c3                   	ret    

f0103c0e <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103c0e:	55                   	push   %ebp
f0103c0f:	89 e5                	mov    %esp,%ebp
f0103c11:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103c14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c17:	c1 e8 16             	shr    $0x16,%eax
f0103c1a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c21:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c24:	01 d0                	add    %edx,%eax
f0103c26:	8b 00                	mov    (%eax),%eax
f0103c28:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103c2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c33:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103c36:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c39:	c1 e8 0c             	shr    $0xc,%eax
f0103c3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c3f:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0103c44:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103c47:	72 17                	jb     f0103c60 <get_disk_page_table+0x52>
f0103c49:	ff 75 f0             	pushl  -0x10(%ebp)
f0103c4c:	68 28 18 13 f0       	push   $0xf0131828
f0103c51:	68 92 00 00 00       	push   $0x92
f0103c56:	68 c5 17 13 f0       	push   $0xf01317c5
f0103c5b:	e8 50 c5 ff ff       	call   f01001b0 <_panic>
f0103c60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c63:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c68:	89 c2                	mov    %eax,%edx
f0103c6a:	8b 45 14             	mov    0x14(%ebp),%eax
f0103c6d:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103c6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103c73:	0f 85 b7 00 00 00    	jne    f0103d30 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103c79:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103c7d:	0f 84 9d 00 00 00    	je     f0103d20 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103c83:	83 ec 0c             	sub    $0xc,%esp
f0103c86:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103c89:	50                   	push   %eax
f0103c8a:	e8 38 36 00 00       	call   f01072c7 <allocate_frame>
f0103c8f:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103c92:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103c95:	83 ec 0c             	sub    $0xc,%esp
f0103c98:	50                   	push   %eax
f0103c99:	e8 1b fb ff ff       	call   f01037b9 <to_physical_address>
f0103c9e:	83 c4 10             	add    $0x10,%esp
f0103ca1:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103ca4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ca7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103caa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103cad:	c1 e8 0c             	shr    $0xc,%eax
f0103cb0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103cb3:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0103cb8:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103cbb:	72 17                	jb     f0103cd4 <get_disk_page_table+0xc6>
f0103cbd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103cc0:	68 28 18 13 f0       	push   $0xf0131828
f0103cc5:	68 ae 00 00 00       	push   $0xae
f0103cca:	68 c5 17 13 f0       	push   $0xf01317c5
f0103ccf:	e8 dc c4 ff ff       	call   f01001b0 <_panic>
f0103cd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103cd7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103cdc:	89 c2                	mov    %eax,%edx
f0103cde:	8b 45 14             	mov    0x14(%ebp),%eax
f0103ce1:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103ce3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103ce6:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103cec:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cef:	c1 e8 16             	shr    $0x16,%eax
f0103cf2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103cf9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cfc:	01 d0                	add    %edx,%eax
f0103cfe:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103d01:	83 ca 01             	or     $0x1,%edx
f0103d04:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103d06:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d09:	8b 00                	mov    (%eax),%eax
f0103d0b:	83 ec 04             	sub    $0x4,%esp
f0103d0e:	68 00 10 00 00       	push   $0x1000
f0103d13:	6a 00                	push   $0x0
f0103d15:	50                   	push   %eax
f0103d16:	e8 83 b2 02 00       	call   f012ef9e <memset>
f0103d1b:	83 c4 10             	add    $0x10,%esp
f0103d1e:	eb 10                	jmp    f0103d30 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0103d20:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103d29:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d2e:	eb 05                	jmp    f0103d35 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103d30:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d35:	c9                   	leave  
f0103d36:	c3                   	ret    

f0103d37 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103d37:	55                   	push   %ebp
f0103d38:	89 e5                	mov    %esp,%ebp
f0103d3a:	83 ec 28             	sub    $0x28,%esp
f0103d3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d40:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103d43:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103d47:	74 75                	je     f0103dbe <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103d49:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d53:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103d58:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103d5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0103d63:	f7 75 f4             	divl   -0xc(%ebp)
f0103d66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d69:	29 d0                	sub    %edx,%eax
f0103d6b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103d6e:	73 32                	jae    f0103da2 <pf_add_empty_env_page+0x6b>
f0103d70:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d73:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103d79:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d7e:	29 d0                	sub    %edx,%eax
f0103d80:	c1 e0 0c             	shl    $0xc,%eax
f0103d83:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103d88:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103d8b:	76 15                	jbe    f0103da2 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d90:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103d96:	8d 50 01             	lea    0x1(%eax),%edx
f0103d99:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d9c:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103da2:	a1 dc ae 2b f0       	mov    0xf02baedc,%eax
f0103da7:	83 ec 04             	sub    $0x4,%esp
f0103daa:	50                   	push   %eax
f0103dab:	ff 75 0c             	pushl  0xc(%ebp)
f0103dae:	ff 75 08             	pushl  0x8(%ebp)
f0103db1:	e8 b7 00 00 00       	call   f0103e6d <pf_add_env_page>
f0103db6:	83 c4 10             	add    $0x10,%esp
f0103db9:	e9 ad 00 00 00       	jmp    f0103e6b <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103dbe:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103dc5:	76 19                	jbe    f0103de0 <pf_add_empty_env_page+0xa9>
f0103dc7:	68 58 18 13 f0       	push   $0xf0131858
f0103dcc:	68 7e 18 13 f0       	push   $0xf013187e
f0103dd1:	68 d1 00 00 00       	push   $0xd1
f0103dd6:	68 c5 17 13 f0       	push   $0xf01317c5
f0103ddb:	e8 d0 c3 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103de0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de3:	05 a8 00 00 00       	add    $0xa8,%eax
f0103de8:	83 ec 08             	sub    $0x8,%esp
f0103deb:	50                   	push   %eax
f0103dec:	ff 75 08             	pushl  0x8(%ebp)
f0103def:	e8 86 06 00 00       	call   f010447a <get_disk_page_directory>
f0103df4:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dfa:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e00:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103e03:	52                   	push   %edx
f0103e04:	6a 01                	push   $0x1
f0103e06:	ff 75 0c             	pushl  0xc(%ebp)
f0103e09:	50                   	push   %eax
f0103e0a:	e8 ff fd ff ff       	call   f0103c0e <get_disk_page_table>
f0103e0f:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103e12:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e15:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e18:	c1 ea 0c             	shr    $0xc,%edx
f0103e1b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e21:	c1 e2 02             	shl    $0x2,%edx
f0103e24:	01 d0                	add    %edx,%eax
f0103e26:	8b 00                	mov    (%eax),%eax
f0103e28:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103e2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e2e:	85 c0                	test   %eax,%eax
f0103e30:	75 34                	jne    f0103e66 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e32:	83 ec 0c             	sub    $0xc,%esp
f0103e35:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103e38:	50                   	push   %eax
f0103e39:	e8 f8 fb ff ff       	call   f0103a36 <allocate_disk_frame>
f0103e3e:	83 c4 10             	add    $0x10,%esp
f0103e41:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e44:	75 07                	jne    f0103e4d <pf_add_empty_env_page+0x116>
f0103e46:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e4b:	eb 1e                	jmp    f0103e6b <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103e4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e53:	c1 ea 0c             	shr    $0xc,%edx
f0103e56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e5c:	c1 e2 02             	shl    $0x2,%edx
f0103e5f:	01 c2                	add    %eax,%edx
f0103e61:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e64:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103e66:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103e6b:	c9                   	leave  
f0103e6c:	c3                   	ret    

f0103e6d <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103e6d:	55                   	push   %ebp
f0103e6e:	89 e5                	mov    %esp,%ebp
f0103e70:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e73:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e7a:	76 19                	jbe    f0103e95 <pf_add_env_page+0x28>
f0103e7c:	68 58 18 13 f0       	push   $0xf0131858
f0103e81:	68 7e 18 13 f0       	push   $0xf013187e
f0103e86:	68 e6 00 00 00       	push   $0xe6
f0103e8b:	68 c5 17 13 f0       	push   $0xf01317c5
f0103e90:	e8 1b c3 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103e95:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e98:	05 a8 00 00 00       	add    $0xa8,%eax
f0103e9d:	83 ec 08             	sub    $0x8,%esp
f0103ea0:	50                   	push   %eax
f0103ea1:	ff 75 08             	pushl  0x8(%ebp)
f0103ea4:	e8 d1 05 00 00       	call   f010447a <get_disk_page_directory>
f0103ea9:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103eac:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eaf:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103eb5:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103eb8:	52                   	push   %edx
f0103eb9:	6a 01                	push   $0x1
f0103ebb:	ff 75 0c             	pushl  0xc(%ebp)
f0103ebe:	50                   	push   %eax
f0103ebf:	e8 4a fd ff ff       	call   f0103c0e <get_disk_page_table>
f0103ec4:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103ec7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103eca:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ecd:	c1 ea 0c             	shr    $0xc,%edx
f0103ed0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ed6:	c1 e2 02             	shl    $0x2,%edx
f0103ed9:	01 d0                	add    %edx,%eax
f0103edb:	8b 00                	mov    (%eax),%eax
f0103edd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103ee0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103ee3:	85 c0                	test   %eax,%eax
f0103ee5:	75 34                	jne    f0103f1b <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee7:	83 ec 0c             	sub    $0xc,%esp
f0103eea:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103eed:	50                   	push   %eax
f0103eee:	e8 43 fb ff ff       	call   f0103a36 <allocate_disk_frame>
f0103ef3:	83 c4 10             	add    $0x10,%esp
f0103ef6:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ef9:	75 07                	jne    f0103f02 <pf_add_env_page+0x95>
f0103efb:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f00:	eb 31                	jmp    f0103f33 <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103f02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f05:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f08:	c1 ea 0c             	shr    $0xc,%edx
f0103f0b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f11:	c1 e2 02             	shl    $0x2,%edx
f0103f14:	01 c2                	add    %eax,%edx
f0103f16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f19:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103f1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f1e:	83 ec 08             	sub    $0x8,%esp
f0103f21:	ff 75 10             	pushl  0x10(%ebp)
f0103f24:	50                   	push   %eax
f0103f25:	e8 23 f9 ff ff       	call   f010384d <write_disk_page>
f0103f2a:	83 c4 10             	add    $0x10,%esp
f0103f2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103f30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f33:	c9                   	leave  
f0103f34:	c3                   	ret    

f0103f35 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103f35:	55                   	push   %ebp
f0103f36:	89 e5                	mov    %esp,%ebp
f0103f38:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103f3b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103f42:	76 19                	jbe    f0103f5d <pf_update_env_page+0x28>
f0103f44:	68 58 18 13 f0       	push   $0xf0131858
f0103f49:	68 7e 18 13 f0       	push   $0xf013187e
f0103f4e:	68 08 01 00 00       	push   $0x108
f0103f53:	68 c5 17 13 f0       	push   $0xf01317c5
f0103f58:	e8 53 c2 ff ff       	call   f01001b0 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103f5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f60:	05 a8 00 00 00       	add    $0xa8,%eax
f0103f65:	83 ec 08             	sub    $0x8,%esp
f0103f68:	50                   	push   %eax
f0103f69:	ff 75 08             	pushl  0x8(%ebp)
f0103f6c:	e8 09 05 00 00       	call   f010447a <get_disk_page_directory>
f0103f71:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103f74:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f77:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f7d:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103f80:	52                   	push   %edx
f0103f81:	6a 00                	push   $0x0
f0103f83:	ff 75 0c             	pushl  0xc(%ebp)
f0103f86:	50                   	push   %eax
f0103f87:	e8 82 fc ff ff       	call   f0103c0e <get_disk_page_table>
f0103f8c:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103f8f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 29                	je     f0103fbf <pf_update_env_page+0x8a>
f0103f96:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103f99:	85 c0                	test   %eax,%eax
f0103f9b:	0f 84 46 01 00 00    	je     f01040e7 <pf_update_env_page+0x1b2>
f0103fa1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103fa4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103fa7:	c1 ea 0c             	shr    $0xc,%edx
f0103faa:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103fb0:	c1 e2 02             	shl    $0x2,%edx
f0103fb3:	01 d0                	add    %edx,%eax
f0103fb5:	8b 00                	mov    (%eax),%eax
f0103fb7:	85 c0                	test   %eax,%eax
f0103fb9:	0f 85 28 01 00 00    	jne    f01040e7 <pf_update_env_page+0x1b2>
	{
		uint32 VA = (uint32)virtual_address ;
f0103fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103fc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fc8:	85 c0                	test   %eax,%eax
f0103fca:	79 09                	jns    f0103fd5 <pf_update_env_page+0xa0>
f0103fcc:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103fd3:	76 38                	jbe    f010400d <pf_update_env_page+0xd8>
f0103fd5:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103fdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fdf:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103fe4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103fe7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fea:	ba 00 00 00 00       	mov    $0x0,%edx
f0103fef:	f7 75 f0             	divl   -0x10(%ebp)
f0103ff2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103ff5:	29 d0                	sub    %edx,%eax
f0103ff7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103ffa:	0f 87 d0 00 00 00    	ja     f01040d0 <pf_update_env_page+0x19b>
f0104000:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0104007:	0f 87 c3 00 00 00    	ja     f01040d0 <pf_update_env_page+0x19b>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010400d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104010:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104016:	83 ec 04             	sub    $0x4,%esp
f0104019:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010401c:	52                   	push   %edx
f010401d:	ff 75 0c             	pushl  0xc(%ebp)
f0104020:	50                   	push   %eax
f0104021:	e8 fb 36 00 00       	call   f0107721 <get_frame_info>
f0104026:	83 c4 10             	add    $0x10,%esp
f0104029:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010402c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010402f:	3b 45 10             	cmp    0x10(%ebp),%eax
f0104032:	75 52                	jne    f0104086 <pf_update_env_page+0x151>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0104034:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104037:	83 ec 04             	sub    $0x4,%esp
f010403a:	50                   	push   %eax
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	ff 75 08             	pushl  0x8(%ebp)
f0104041:	e8 27 fe ff ff       	call   f0103e6d <pf_add_env_page>
f0104046:	83 c4 10             	add    $0x10,%esp
f0104049:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010404c:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0104050:	75 17                	jne    f0104069 <pf_update_env_page+0x134>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0104052:	83 ec 04             	sub    $0x4,%esp
f0104055:	68 94 18 13 f0       	push   $0xf0131894
f010405a:	68 1d 01 00 00       	push   $0x11d
f010405f:	68 c5 17 13 f0       	push   $0xf01317c5
f0104064:	e8 47 c1 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0104069:	8b 45 08             	mov    0x8(%ebp),%eax
f010406c:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0104072:	8d 50 01             	lea    0x1(%eax),%edx
f0104075:	8b 45 08             	mov    0x8(%ebp),%eax
f0104078:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
				return ret ;
f010407e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104081:	e9 02 01 00 00       	jmp    f0104188 <pf_update_env_page+0x253>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0104086:	83 ec 04             	sub    $0x4,%esp
f0104089:	6a 00                	push   $0x0
f010408b:	ff 75 f4             	pushl  -0xc(%ebp)
f010408e:	ff 75 08             	pushl  0x8(%ebp)
f0104091:	e8 a1 fc ff ff       	call   f0103d37 <pf_add_empty_env_page>
f0104096:	83 c4 10             	add    $0x10,%esp
f0104099:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010409c:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040a0:	75 17                	jne    f01040b9 <pf_update_env_page+0x184>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01040a2:	83 ec 04             	sub    $0x4,%esp
f01040a5:	68 c0 18 13 f0       	push   $0xf01318c0
f01040aa:	68 28 01 00 00       	push   $0x128
f01040af:	68 c5 17 13 f0       	push   $0xf01317c5
f01040b4:	e8 f7 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01040b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01040bc:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f01040c2:	8d 50 01             	lea    0x1(%eax),%edx
f01040c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c8:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f01040ce:	eb 17                	jmp    f01040e7 <pf_update_env_page+0x1b2>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f01040d0:	83 ec 04             	sub    $0x4,%esp
f01040d3:	68 0c 19 13 f0       	push   $0xf013190c
f01040d8:	68 2f 01 00 00       	push   $0x12f
f01040dd:	68 c5 17 13 f0       	push   $0xf01317c5
f01040e2:	e8 c9 c0 ff ff       	call   f01001b0 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01040e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ea:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01040f0:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01040f3:	52                   	push   %edx
f01040f4:	6a 00                	push   $0x0
f01040f6:	ff 75 0c             	pushl  0xc(%ebp)
f01040f9:	50                   	push   %eax
f01040fa:	e8 0f fb ff ff       	call   f0103c0e <get_disk_page_table>
f01040ff:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104102:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104105:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104108:	c1 ea 0c             	shr    $0xc,%edx
f010410b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104111:	c1 e2 02             	shl    $0x2,%edx
f0104114:	01 d0                	add    %edx,%eax
f0104116:	8b 00                	mov    (%eax),%eax
f0104118:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f010411b:	83 ec 0c             	sub    $0xc,%esp
f010411e:	ff 75 10             	pushl  0x10(%ebp)
f0104121:	e8 93 f6 ff ff       	call   f01037b9 <to_physical_address>
f0104126:	83 c4 10             	add    $0x10,%esp
f0104129:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010412c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010412f:	c1 e8 0c             	shr    $0xc,%eax
f0104132:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0104135:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f010413a:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f010413d:	72 17                	jb     f0104156 <pf_update_env_page+0x221>
f010413f:	ff 75 dc             	pushl  -0x24(%ebp)
f0104142:	68 28 18 13 f0       	push   $0xf0131828
f0104147:	68 47 01 00 00       	push   $0x147
f010414c:	68 c5 17 13 f0       	push   $0xf01317c5
f0104151:	e8 5a c0 ff ff       	call   f01001b0 <_panic>
f0104156:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104159:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010415e:	83 ec 08             	sub    $0x8,%esp
f0104161:	50                   	push   %eax
f0104162:	ff 75 e0             	pushl  -0x20(%ebp)
f0104165:	e8 e3 f6 ff ff       	call   f010384d <write_disk_page>
f010416a:	83 c4 10             	add    $0x10,%esp
f010416d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0104170:	8b 45 08             	mov    0x8(%ebp),%eax
f0104173:	8b 80 94 da 01 00    	mov    0x1da94(%eax),%eax
f0104179:	8d 50 01             	lea    0x1(%eax),%edx
f010417c:	8b 45 08             	mov    0x8(%ebp),%eax
f010417f:	89 90 94 da 01 00    	mov    %edx,0x1da94(%eax)
	//======================

	return ret;
f0104185:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0104188:	c9                   	leave  
f0104189:	c3                   	ret    

f010418a <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f010418a:	55                   	push   %ebp
f010418b:	89 e5                	mov    %esp,%ebp
f010418d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0104190:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104193:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104196:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104199:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010419e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01041a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01041a4:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01041aa:	85 c0                	test   %eax,%eax
f01041ac:	75 0a                	jne    f01041b8 <pf_read_env_page+0x2e>
f01041ae:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01041b3:	e9 96 00 00 00       	jmp    f010424e <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f01041b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01041be:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01041c4:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f01041c7:	51                   	push   %ecx
f01041c8:	6a 00                	push   $0x0
f01041ca:	52                   	push   %edx
f01041cb:	50                   	push   %eax
f01041cc:	e8 3d fa ff ff       	call   f0103c0e <get_disk_page_table>
f01041d1:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01041d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01041d7:	85 c0                	test   %eax,%eax
f01041d9:	75 07                	jne    f01041e2 <pf_read_env_page+0x58>
f01041db:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01041e0:	eb 6c                	jmp    f010424e <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01041e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01041e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041e8:	c1 ea 0c             	shr    $0xc,%edx
f01041eb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041f1:	c1 e2 02             	shl    $0x2,%edx
f01041f4:	01 d0                	add    %edx,%eax
f01041f6:	8b 00                	mov    (%eax),%eax
f01041f8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01041fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01041ff:	75 07                	jne    f0104208 <pf_read_env_page+0x7e>
f0104201:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104206:	eb 46                	jmp    f010424e <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0104208:	83 ec 08             	sub    $0x8,%esp
f010420b:	ff 75 0c             	pushl  0xc(%ebp)
f010420e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104211:	e8 08 f6 ff ff       	call   f010381e <read_disk_page>
f0104216:	83 c4 10             	add    $0x10,%esp
f0104219:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f010421c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010421f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104222:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104228:	6a 40                	push   $0x40
f010422a:	6a 00                	push   $0x0
f010422c:	52                   	push   %edx
f010422d:	50                   	push   %eax
f010422e:	e8 8e 3d 00 00       	call   f0107fc1 <pt_set_page_permissions>
f0104233:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0104236:	8b 45 08             	mov    0x8(%ebp),%eax
f0104239:	8b 80 90 da 01 00    	mov    0x1da90(%eax),%eax
f010423f:	8d 50 01             	lea    0x1(%eax),%edx
f0104242:	8b 45 08             	mov    0x8(%ebp),%eax
f0104245:	89 90 90 da 01 00    	mov    %edx,0x1da90(%eax)
	//======================

	return disk_read_error;
f010424b:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010424e:	c9                   	leave  
f010424f:	c3                   	ret    

f0104250 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0104250:	55                   	push   %ebp
f0104251:	89 e5                	mov    %esp,%ebp
f0104253:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104256:	8b 45 08             	mov    0x8(%ebp),%eax
f0104259:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010425f:	85 c0                	test   %eax,%eax
f0104261:	74 65                	je     f01042c8 <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104263:	8b 45 08             	mov    0x8(%ebp),%eax
f0104266:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010426c:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010426f:	52                   	push   %edx
f0104270:	6a 00                	push   $0x0
f0104272:	ff 75 0c             	pushl  0xc(%ebp)
f0104275:	50                   	push   %eax
f0104276:	e8 93 f9 ff ff       	call   f0103c0e <get_disk_page_table>
f010427b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010427e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104281:	85 c0                	test   %eax,%eax
f0104283:	74 46                	je     f01042cb <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104285:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104288:	8b 55 0c             	mov    0xc(%ebp),%edx
f010428b:	c1 ea 0c             	shr    $0xc,%edx
f010428e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104294:	c1 e2 02             	shl    $0x2,%edx
f0104297:	01 d0                	add    %edx,%eax
f0104299:	8b 00                	mov    (%eax),%eax
f010429b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010429e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042a1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01042a4:	c1 ea 0c             	shr    $0xc,%edx
f01042a7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01042ad:	c1 e2 02             	shl    $0x2,%edx
f01042b0:	01 d0                	add    %edx,%eax
f01042b2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01042b8:	83 ec 0c             	sub    $0xc,%esp
f01042bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01042be:	e8 3a f8 ff ff       	call   f0103afd <free_disk_frame>
f01042c3:	83 c4 10             	add    $0x10,%esp
f01042c6:	eb 04                	jmp    f01042cc <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01042c8:	90                   	nop
f01042c9:	eb 01                	jmp    f01042cc <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f01042cb:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f01042cc:	c9                   	leave  
f01042cd:	c3                   	ret    

f01042ce <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f01042ce:	55                   	push   %ebp
f01042cf:	89 e5                	mov    %esp,%ebp
f01042d1:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01042d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01042db:	e9 f7 00 00 00       	jmp    f01043d7 <pf_free_env+0x109>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f01042e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01042e3:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01042ec:	c1 e2 02             	shl    $0x2,%edx
f01042ef:	01 d0                	add    %edx,%eax
f01042f1:	8b 00                	mov    (%eax),%eax
f01042f3:	83 e0 01             	and    $0x1,%eax
f01042f6:	85 c0                	test   %eax,%eax
f01042f8:	0f 84 d5 00 00 00    	je     f01043d3 <pf_free_env+0x105>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f01042fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104301:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104307:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010430a:	c1 e2 02             	shl    $0x2,%edx
f010430d:	01 d0                	add    %edx,%eax
f010430f:	8b 00                	mov    (%eax),%eax
f0104311:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104316:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104319:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010431c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010431f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104322:	c1 e8 0c             	shr    $0xc,%eax
f0104325:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104328:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f010432d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104330:	72 17                	jb     f0104349 <pf_free_env+0x7b>
f0104332:	ff 75 e8             	pushl  -0x18(%ebp)
f0104335:	68 28 18 13 f0       	push   $0xf0131828
f010433a:	68 a7 01 00 00       	push   $0x1a7
f010433f:	68 c5 17 13 f0       	push   $0xf01317c5
f0104344:	e8 67 be ff ff       	call   f01001b0 <_panic>
f0104349:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010434c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104351:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0104354:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010435b:	eb 3a                	jmp    f0104397 <pf_free_env+0xc9>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f010435d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104360:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104367:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010436a:	01 d0                	add    %edx,%eax
f010436c:	8b 00                	mov    (%eax),%eax
f010436e:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f0104371:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104374:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010437b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010437e:	01 d0                	add    %edx,%eax
f0104380:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0104386:	83 ec 0c             	sub    $0xc,%esp
f0104389:	ff 75 dc             	pushl  -0x24(%ebp)
f010438c:	e8 6c f7 ff ff       	call   f0103afd <free_disk_frame>
f0104391:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0104394:	ff 45 f0             	incl   -0x10(%ebp)
f0104397:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f010439e:	76 bd                	jbe    f010435d <pf_free_env+0x8f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01043a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01043a3:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01043a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043ac:	c1 e2 02             	shl    $0x2,%edx
f01043af:	01 d0                	add    %edx,%eax
f01043b1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f01043b7:	83 ec 0c             	sub    $0xc,%esp
f01043ba:	ff 75 ec             	pushl  -0x14(%ebp)
f01043bd:	e8 0a f4 ff ff       	call   f01037cc <to_frame_info>
f01043c2:	83 c4 10             	add    $0x10,%esp
f01043c5:	83 ec 0c             	sub    $0xc,%esp
f01043c8:	50                   	push   %eax
f01043c9:	e8 8b 30 00 00       	call   f0107459 <decrement_references>
f01043ce:	83 c4 10             	add    $0x10,%esp
f01043d1:	eb 01                	jmp    f01043d4 <pf_free_env+0x106>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f01043d3:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01043d4:	ff 45 f4             	incl   -0xc(%ebp)
f01043d7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f01043de:	0f 86 fc fe ff ff    	jbe    f01042e0 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f01043e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e7:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f01043ed:	83 ec 0c             	sub    $0xc,%esp
f01043f0:	50                   	push   %eax
f01043f1:	e8 d6 f3 ff ff       	call   f01037cc <to_frame_info>
f01043f6:	83 c4 10             	add    $0x10,%esp
f01043f9:	83 ec 0c             	sub    $0xc,%esp
f01043fc:	50                   	push   %eax
f01043fd:	e8 57 30 00 00       	call   f0107459 <decrement_references>
f0104402:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104405:	8b 45 08             	mov    0x8(%ebp),%eax
f0104408:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010440f:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f0104412:	8b 45 08             	mov    0x8(%ebp),%eax
f0104415:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010441c:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010441f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104422:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104428:	85 c0                	test   %eax,%eax
f010442a:	74 4b                	je     f0104477 <pf_free_env+0x1a9>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010442c:	83 ec 0c             	sub    $0xc,%esp
f010442f:	ff 75 08             	pushl  0x8(%ebp)
f0104432:	e8 17 04 00 00       	call   f010484e <__pf_remove_env_all_tables>
f0104437:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f010443a:	8b 45 08             	mov    0x8(%ebp),%eax
f010443d:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f0104443:	83 ec 0c             	sub    $0xc,%esp
f0104446:	50                   	push   %eax
f0104447:	e8 80 f3 ff ff       	call   f01037cc <to_frame_info>
f010444c:	83 c4 10             	add    $0x10,%esp
f010444f:	83 ec 0c             	sub    $0xc,%esp
f0104452:	50                   	push   %eax
f0104453:	e8 01 30 00 00       	call   f0107459 <decrement_references>
f0104458:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f010445b:	8b 45 08             	mov    0x8(%ebp),%eax
f010445e:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f0104465:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f0104468:	8b 45 08             	mov    0x8(%ebp),%eax
f010446b:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0104472:	00 00 00 
f0104475:	eb 01                	jmp    f0104478 <pf_free_env+0x1aa>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0104477:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0104478:	c9                   	leave  
f0104479:	c3                   	ret    

f010447a <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f010447a:	55                   	push   %ebp
f010447b:	89 e5                	mov    %esp,%ebp
f010447d:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0104480:	8b 45 08             	mov    0x8(%ebp),%eax
f0104483:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f0104489:	8b 45 0c             	mov    0xc(%ebp),%eax
f010448c:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f010448e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104491:	8b 00                	mov    (%eax),%eax
f0104493:	85 c0                	test   %eax,%eax
f0104495:	0f 85 ad 00 00 00    	jne    f0104548 <get_disk_page_directory+0xce>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f010449b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01044a2:	83 ec 0c             	sub    $0xc,%esp
f01044a5:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01044a8:	50                   	push   %eax
f01044a9:	e8 19 2e 00 00       	call   f01072c7 <allocate_frame>
f01044ae:	83 c4 10             	add    $0x10,%esp
f01044b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01044b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044b8:	79 08                	jns    f01044c2 <get_disk_page_directory+0x48>
				return r;
f01044ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044bd:	e9 8b 00 00 00       	jmp    f010454d <get_disk_page_directory+0xd3>
			p->references = 1;
f01044c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01044c5:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01044cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01044ce:	83 ec 0c             	sub    $0xc,%esp
f01044d1:	50                   	push   %eax
f01044d2:	e8 e2 f2 ff ff       	call   f01037b9 <to_physical_address>
f01044d7:	83 c4 10             	add    $0x10,%esp
f01044da:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01044dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044e0:	c1 e8 0c             	shr    $0xc,%eax
f01044e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01044e6:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f01044eb:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01044ee:	72 17                	jb     f0104507 <get_disk_page_directory+0x8d>
f01044f0:	ff 75 f0             	pushl  -0x10(%ebp)
f01044f3:	68 28 18 13 f0       	push   $0xf0131828
f01044f8:	68 ff 01 00 00       	push   $0x1ff
f01044fd:	68 c5 17 13 f0       	push   $0xf01317c5
f0104502:	e8 a9 bc ff ff       	call   f01001b0 <_panic>
f0104507:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010450a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010450f:	89 c2                	mov    %eax,%edx
f0104511:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104514:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104516:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104519:	83 ec 0c             	sub    $0xc,%esp
f010451c:	50                   	push   %eax
f010451d:	e8 97 f2 ff ff       	call   f01037b9 <to_physical_address>
f0104522:	83 c4 10             	add    $0x10,%esp
f0104525:	89 c2                	mov    %eax,%edx
f0104527:	8b 45 08             	mov    0x8(%ebp),%eax
f010452a:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0104530:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104533:	8b 00                	mov    (%eax),%eax
f0104535:	83 ec 04             	sub    $0x4,%esp
f0104538:	68 00 10 00 00       	push   $0x1000
f010453d:	6a 00                	push   $0x0
f010453f:	50                   	push   %eax
f0104540:	e8 59 aa 02 00       	call   f012ef9e <memset>
f0104545:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0104548:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010454d:	c9                   	leave  
f010454e:	c3                   	ret    

f010454f <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010454f:	55                   	push   %ebp
f0104550:	89 e5                	mov    %esp,%ebp
f0104552:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0104555:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010455c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104563:	e9 ac 00 00 00       	jmp    f0104614 <pf_calculate_allocated_pages+0xc5>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0104568:	8b 45 08             	mov    0x8(%ebp),%eax
f010456b:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104571:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104574:	c1 e2 02             	shl    $0x2,%edx
f0104577:	01 d0                	add    %edx,%eax
f0104579:	8b 00                	mov    (%eax),%eax
f010457b:	83 e0 01             	and    $0x1,%eax
f010457e:	85 c0                	test   %eax,%eax
f0104580:	0f 84 8a 00 00 00    	je     f0104610 <pf_calculate_allocated_pages+0xc1>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0104586:	8b 45 08             	mov    0x8(%ebp),%eax
f0104589:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010458f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104592:	c1 e2 02             	shl    $0x2,%edx
f0104595:	01 d0                	add    %edx,%eax
f0104597:	8b 00                	mov    (%eax),%eax
f0104599:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010459e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01045a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01045a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01045a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01045aa:	c1 e8 0c             	shr    $0xc,%eax
f01045ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01045b0:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f01045b5:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f01045b8:	72 17                	jb     f01045d1 <pf_calculate_allocated_pages+0x82>
f01045ba:	ff 75 e4             	pushl  -0x1c(%ebp)
f01045bd:	68 28 18 13 f0       	push   $0xf0131828
f01045c2:	68 1f 02 00 00       	push   $0x21f
f01045c7:	68 c5 17 13 f0       	push   $0xf01317c5
f01045cc:	e8 df bb ff ff       	call   f01001b0 <_panic>
f01045d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01045d4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01045d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f01045dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01045e3:	eb 20                	jmp    f0104605 <pf_calculate_allocated_pages+0xb6>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f01045e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01045e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01045ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01045f2:	01 d0                	add    %edx,%eax
f01045f4:	8b 00                	mov    (%eax),%eax
f01045f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f01045f9:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01045fd:	74 03                	je     f0104602 <pf_calculate_allocated_pages+0xb3>
				counter ++;
f01045ff:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104602:	ff 45 ec             	incl   -0x14(%ebp)
f0104605:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010460c:	76 d7                	jbe    f01045e5 <pf_calculate_allocated_pages+0x96>
f010460e:	eb 01                	jmp    f0104611 <pf_calculate_allocated_pages+0xc2>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0104610:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0104611:	ff 45 f4             	incl   -0xc(%ebp)
f0104614:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010461b:	0f 86 47 ff ff ff    	jbe    f0104568 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0104621:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104624:	c9                   	leave  
f0104625:	c3                   	ret    

f0104626 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104626:	55                   	push   %ebp
f0104627:	89 e5                	mov    %esp,%ebp
f0104629:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010462c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104633:	a1 44 93 2d f0       	mov    0xf02d9344,%eax
f0104638:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010463b:	eb 0b                	jmp    f0104648 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010463d:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104640:	a1 4c 93 2d f0       	mov    0xf02d934c,%eax
f0104645:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104648:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010464c:	74 07                	je     f0104655 <pf_calculate_free_frames+0x2f>
f010464e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104651:	8b 00                	mov    (%eax),%eax
f0104653:	eb 05                	jmp    f010465a <pf_calculate_free_frames+0x34>
f0104655:	b8 00 00 00 00       	mov    $0x0,%eax
f010465a:	a3 4c 93 2d f0       	mov    %eax,0xf02d934c
f010465f:	a1 4c 93 2d f0       	mov    0xf02d934c,%eax
f0104664:	85 c0                	test   %eax,%eax
f0104666:	75 d5                	jne    f010463d <pf_calculate_free_frames+0x17>
f0104668:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010466c:	75 cf                	jne    f010463d <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f010466e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0104671:	c9                   	leave  
f0104672:	c3                   	ret    

f0104673 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0104673:	55                   	push   %ebp
f0104674:	89 e5                	mov    %esp,%ebp
f0104676:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0104679:	8b 45 08             	mov    0x8(%ebp),%eax
f010467c:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f0104682:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104685:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0104687:	8b 45 0c             	mov    0xc(%ebp),%eax
f010468a:	8b 00                	mov    (%eax),%eax
f010468c:	85 c0                	test   %eax,%eax
f010468e:	0f 85 ad 00 00 00    	jne    f0104741 <get_disk_table_directory+0xce>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0104694:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f010469b:	83 ec 0c             	sub    $0xc,%esp
f010469e:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046a1:	50                   	push   %eax
f01046a2:	e8 20 2c 00 00       	call   f01072c7 <allocate_frame>
f01046a7:	83 c4 10             	add    $0x10,%esp
f01046aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01046ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046b1:	79 08                	jns    f01046bb <get_disk_table_directory+0x48>
				return r;
f01046b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046b6:	e9 8b 00 00 00       	jmp    f0104746 <get_disk_table_directory+0xd3>
			p->references = 1;
f01046bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046be:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01046c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046c7:	83 ec 0c             	sub    $0xc,%esp
f01046ca:	50                   	push   %eax
f01046cb:	e8 e9 f0 ff ff       	call   f01037b9 <to_physical_address>
f01046d0:	83 c4 10             	add    $0x10,%esp
f01046d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01046d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01046d9:	c1 e8 0c             	shr    $0xc,%eax
f01046dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01046df:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f01046e4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01046e7:	72 17                	jb     f0104700 <get_disk_table_directory+0x8d>
f01046e9:	ff 75 f0             	pushl  -0x10(%ebp)
f01046ec:	68 28 18 13 f0       	push   $0xf0131828
f01046f1:	68 5d 02 00 00       	push   $0x25d
f01046f6:	68 c5 17 13 f0       	push   $0xf01317c5
f01046fb:	e8 b0 ba ff ff       	call   f01001b0 <_panic>
f0104700:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104703:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104708:	89 c2                	mov    %eax,%edx
f010470a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010470d:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010470f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104712:	83 ec 0c             	sub    $0xc,%esp
f0104715:	50                   	push   %eax
f0104716:	e8 9e f0 ff ff       	call   f01037b9 <to_physical_address>
f010471b:	83 c4 10             	add    $0x10,%esp
f010471e:	89 c2                	mov    %eax,%edx
f0104720:	8b 45 08             	mov    0x8(%ebp),%eax
f0104723:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104729:	8b 45 0c             	mov    0xc(%ebp),%eax
f010472c:	8b 00                	mov    (%eax),%eax
f010472e:	83 ec 04             	sub    $0x4,%esp
f0104731:	68 00 10 00 00       	push   $0x1000
f0104736:	6a 00                	push   $0x0
f0104738:	50                   	push   %eax
f0104739:	e8 60 a8 02 00       	call   f012ef9e <memset>
f010473e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0104741:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104746:	c9                   	leave  
f0104747:	c3                   	ret    

f0104748 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104748:	55                   	push   %ebp
f0104749:	89 e5                	mov    %esp,%ebp
f010474b:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010474e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104755:	76 19                	jbe    f0104770 <__pf_write_env_table+0x28>
f0104757:	68 58 18 13 f0       	push   $0xf0131858
f010475c:	68 7e 18 13 f0       	push   $0xf013187e
f0104761:	68 6b 02 00 00       	push   $0x26b
f0104766:	68 c5 17 13 f0       	push   $0xf01317c5
f010476b:	e8 40 ba ff ff       	call   f01001b0 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0104770:	8b 45 08             	mov    0x8(%ebp),%eax
f0104773:	05 b0 00 00 00       	add    $0xb0,%eax
f0104778:	83 ec 08             	sub    $0x8,%esp
f010477b:	50                   	push   %eax
f010477c:	ff 75 08             	pushl  0x8(%ebp)
f010477f:	e8 ef fe ff ff       	call   f0104673 <get_disk_table_directory>
f0104784:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104787:	8b 45 08             	mov    0x8(%ebp),%eax
f010478a:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104790:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104793:	c1 ea 16             	shr    $0x16,%edx
f0104796:	c1 e2 02             	shl    $0x2,%edx
f0104799:	01 d0                	add    %edx,%eax
f010479b:	8b 00                	mov    (%eax),%eax
f010479d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f01047a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047a3:	85 c0                	test   %eax,%eax
f01047a5:	75 34                	jne    f01047db <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01047a7:	83 ec 0c             	sub    $0xc,%esp
f01047aa:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01047ad:	50                   	push   %eax
f01047ae:	e8 83 f2 ff ff       	call   f0103a36 <allocate_disk_frame>
f01047b3:	83 c4 10             	add    $0x10,%esp
f01047b6:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01047b9:	75 07                	jne    f01047c2 <__pf_write_env_table+0x7a>
f01047bb:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01047c0:	eb 31                	jmp    f01047f3 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f01047c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01047cb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01047ce:	c1 ea 16             	shr    $0x16,%edx
f01047d1:	c1 e2 02             	shl    $0x2,%edx
f01047d4:	01 c2                	add    %eax,%edx
f01047d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047d9:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f01047db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047de:	83 ec 08             	sub    $0x8,%esp
f01047e1:	ff 75 10             	pushl  0x10(%ebp)
f01047e4:	50                   	push   %eax
f01047e5:	e8 63 f0 ff ff       	call   f010384d <write_disk_page>
f01047ea:	83 c4 10             	add    $0x10,%esp
f01047ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f01047f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01047f3:	c9                   	leave  
f01047f4:	c3                   	ret    

f01047f5 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01047f5:	55                   	push   %ebp
f01047f6:	89 e5                	mov    %esp,%ebp
f01047f8:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f01047fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01047fe:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104804:	85 c0                	test   %eax,%eax
f0104806:	75 07                	jne    f010480f <__pf_read_env_table+0x1a>
f0104808:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010480d:	eb 3d                	jmp    f010484c <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010480f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104812:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104818:	8b 55 0c             	mov    0xc(%ebp),%edx
f010481b:	c1 ea 16             	shr    $0x16,%edx
f010481e:	c1 e2 02             	shl    $0x2,%edx
f0104821:	01 d0                	add    %edx,%eax
f0104823:	8b 00                	mov    (%eax),%eax
f0104825:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104828:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010482c:	75 07                	jne    f0104835 <__pf_read_env_table+0x40>
f010482e:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104833:	eb 17                	jmp    f010484c <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104835:	83 ec 08             	sub    $0x8,%esp
f0104838:	ff 75 10             	pushl  0x10(%ebp)
f010483b:	ff 75 f4             	pushl  -0xc(%ebp)
f010483e:	e8 db ef ff ff       	call   f010381e <read_disk_page>
f0104843:	83 c4 10             	add    $0x10,%esp
f0104846:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0104849:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010484c:	c9                   	leave  
f010484d:	c3                   	ret    

f010484e <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f010484e:	55                   	push   %ebp
f010484f:	89 e5                	mov    %esp,%ebp
f0104851:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104854:	8b 45 08             	mov    0x8(%ebp),%eax
f0104857:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010485d:	85 c0                	test   %eax,%eax
f010485f:	74 52                	je     f01048b3 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104861:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104868:	eb 3e                	jmp    f01048a8 <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f010486a:	8b 45 08             	mov    0x8(%ebp),%eax
f010486d:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104873:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104876:	c1 e2 02             	shl    $0x2,%edx
f0104879:	01 d0                	add    %edx,%eax
f010487b:	8b 00                	mov    (%eax),%eax
f010487d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0104880:	8b 45 08             	mov    0x8(%ebp),%eax
f0104883:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104889:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010488c:	c1 e2 02             	shl    $0x2,%edx
f010488f:	01 d0                	add    %edx,%eax
f0104891:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0104897:	83 ec 0c             	sub    $0xc,%esp
f010489a:	ff 75 f0             	pushl  -0x10(%ebp)
f010489d:	e8 5b f2 ff ff       	call   f0103afd <free_disk_frame>
f01048a2:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01048a5:	ff 45 f4             	incl   -0xc(%ebp)
f01048a8:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f01048af:	76 b9                	jbe    f010486a <__pf_remove_env_all_tables+0x1c>
f01048b1:	eb 01                	jmp    f01048b4 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01048b3:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f01048b4:	c9                   	leave  
f01048b5:	c3                   	ret    

f01048b6 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f01048b6:	55                   	push   %ebp
f01048b7:	89 e5                	mov    %esp,%ebp
f01048b9:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f01048bc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01048c0:	75 10                	jne    f01048d2 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f01048c2:	83 ec 0c             	sub    $0xc,%esp
f01048c5:	68 88 19 13 f0       	push   $0xf0131988
f01048ca:	e8 62 c5 ff ff       	call   f0100e31 <cprintf>
f01048cf:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f01048d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048d5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048db:	85 c0                	test   %eax,%eax
f01048dd:	74 43                	je     f0104922 <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01048df:	8b 45 08             	mov    0x8(%ebp),%eax
f01048e2:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048e8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01048eb:	c1 ea 16             	shr    $0x16,%edx
f01048ee:	c1 e2 02             	shl    $0x2,%edx
f01048f1:	01 d0                	add    %edx,%eax
f01048f3:	8b 00                	mov    (%eax),%eax
f01048f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f01048f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01048fb:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104901:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104904:	c1 ea 16             	shr    $0x16,%edx
f0104907:	c1 e2 02             	shl    $0x2,%edx
f010490a:	01 d0                	add    %edx,%eax
f010490c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104912:	83 ec 0c             	sub    $0xc,%esp
f0104915:	ff 75 f4             	pushl  -0xc(%ebp)
f0104918:	e8 e0 f1 ff ff       	call   f0103afd <free_disk_frame>
f010491d:	83 c4 10             	add    $0x10,%esp
f0104920:	eb 01                	jmp    f0104923 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104922:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104923:	c9                   	leave  
f0104924:	c3                   	ret    

f0104925 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104925:	55                   	push   %ebp
f0104926:	89 e5                	mov    %esp,%ebp
f0104928:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010492b:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104932:	eb 1f                	jmp    f0104953 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104934:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104937:	83 ec 04             	sub    $0x4,%esp
f010493a:	6a 08                	push   $0x8
f010493c:	ff 75 08             	pushl  0x8(%ebp)
f010493f:	50                   	push   %eax
f0104940:	e8 1b ad 02 00       	call   f012f660 <ide_write>
f0104945:	83 c4 10             	add    $0x10,%esp
f0104948:	85 c0                	test   %eax,%eax
f010494a:	75 12                	jne    f010495e <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010494c:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104953:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010495a:	7e d8                	jle    f0104934 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010495c:	eb 01                	jmp    f010495f <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010495e:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010495f:	90                   	nop
f0104960:	c9                   	leave  
f0104961:	c3                   	ret    

f0104962 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104962:	55                   	push   %ebp
f0104963:	89 e5                	mov    %esp,%ebp
f0104965:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	0f b6 c0             	movzbl %al,%eax
f010496e:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104975:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104978:	8a 45 f6             	mov    -0xa(%ebp),%al
f010497b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010497e:	ee                   	out    %al,(%dx)
f010497f:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104986:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104989:	89 c2                	mov    %eax,%edx
f010498b:	ec                   	in     (%dx),%al
f010498c:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010498f:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104992:	0f b6 c0             	movzbl %al,%eax
}
f0104995:	c9                   	leave  
f0104996:	c3                   	ret    

f0104997 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104997:	55                   	push   %ebp
f0104998:	89 e5                	mov    %esp,%ebp
f010499a:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010499d:	8b 45 08             	mov    0x8(%ebp),%eax
f01049a0:	0f b6 c0             	movzbl %al,%eax
f01049a3:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01049aa:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049ad:	8a 45 f6             	mov    -0xa(%ebp),%al
f01049b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01049b3:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01049b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01049b7:	0f b6 c0             	movzbl %al,%eax
f01049ba:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01049c1:	88 45 f7             	mov    %al,-0x9(%ebp)
f01049c4:	8a 45 f7             	mov    -0x9(%ebp),%al
f01049c7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01049ca:	ee                   	out    %al,(%dx)
}
f01049cb:	90                   	nop
f01049cc:	c9                   	leave  
f01049cd:	c3                   	ret    

f01049ce <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01049ce:	55                   	push   %ebp
f01049cf:	89 e5                	mov    %esp,%ebp
f01049d1:	53                   	push   %ebx
f01049d2:	83 ec 24             	sub    $0x24,%esp
f01049d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01049d8:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01049db:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01049e2:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01049e6:	8a 45 ef             	mov    -0x11(%ebp),%al
f01049e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01049ec:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01049ed:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01049f1:	77 48                	ja     f0104a3b <kclock_start+0x6d>
f01049f3:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01049fa:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f01049fe:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104a01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a04:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104a05:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a09:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104a0e:	99                   	cltd   
f0104a0f:	f7 fb                	idiv   %ebx
f0104a11:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104a17:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a1b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104a20:	99                   	cltd   
f0104a21:	f7 fb                	idiv   %ebx
f0104a23:	89 c3                	mov    %eax,%ebx
f0104a25:	89 c8                	mov    %ecx,%eax
f0104a27:	99                   	cltd   
f0104a28:	f7 fb                	idiv   %ebx
f0104a2a:	0f b7 c0             	movzwl %ax,%eax
f0104a2d:	83 ec 0c             	sub    $0xc,%esp
f0104a30:	50                   	push   %eax
f0104a31:	e8 dd 01 00 00       	call   f0104c13 <kclock_write_cnt0_LSB_first>
f0104a36:	83 c4 10             	add    $0x10,%esp
f0104a39:	eb 13                	jmp    f0104a4e <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104a3b:	6a 35                	push   $0x35
f0104a3d:	68 ac 19 13 f0       	push   $0xf01319ac
f0104a42:	6a 33                	push   $0x33
f0104a44:	68 08 1a 13 f0       	push   $0xf0131a08
f0104a49:	e8 62 b7 ff ff       	call   f01001b0 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104a4e:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f0104a54:	0f b7 c0             	movzwl %ax,%eax
f0104a57:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104a5c:	83 ec 0c             	sub    $0xc,%esp
f0104a5f:	50                   	push   %eax
f0104a60:	e8 3a 1c 00 00       	call   f010669f <irq_setmask_8259A>
f0104a65:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104a68:	90                   	nop
f0104a69:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104a6c:	c9                   	leave  
f0104a6d:	c3                   	ret    

f0104a6e <kclock_stop>:

void
kclock_stop(void)
{
f0104a6e:	55                   	push   %ebp
f0104a6f:	89 e5                	mov    %esp,%ebp
f0104a71:	83 ec 18             	sub    $0x18,%esp
f0104a74:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104a7b:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104a7f:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104a82:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a85:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104a86:	83 ec 0c             	sub    $0xc,%esp
f0104a89:	68 ff ff 00 00       	push   $0xffff
f0104a8e:	e8 0c 1c 00 00       	call   f010669f <irq_setmask_8259A>
f0104a93:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104a96:	90                   	nop
f0104a97:	c9                   	leave  
f0104a98:	c3                   	ret    

f0104a99 <kclock_resume>:

void
kclock_resume(void)
{
f0104a99:	55                   	push   %ebp
f0104a9a:	89 e5                	mov    %esp,%ebp
f0104a9c:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104a9f:	e8 b1 01 00 00       	call   f0104c55 <kclock_read_cnt0>
f0104aa4:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104aa8:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104aad:	77 06                	ja     f0104ab5 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104aaf:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104ab5:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104ab9:	83 e0 01             	and    $0x1,%eax
f0104abc:	66 85 c0             	test   %ax,%ax
f0104abf:	74 09                	je     f0104aca <kclock_resume+0x31>
		cnt0++;
f0104ac1:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104ac5:	40                   	inc    %eax
f0104ac6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104aca:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104ad1:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104ad5:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104ad8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104adb:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104adc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104ae0:	83 ec 0c             	sub    $0xc,%esp
f0104ae3:	50                   	push   %eax
f0104ae4:	e8 2a 01 00 00       	call   f0104c13 <kclock_write_cnt0_LSB_first>
f0104ae9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104aec:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f0104af2:	0f b7 c0             	movzwl %ax,%eax
f0104af5:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104afa:	83 ec 0c             	sub    $0xc,%esp
f0104afd:	50                   	push   %eax
f0104afe:	e8 9c 1b 00 00       	call   f010669f <irq_setmask_8259A>
f0104b03:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104b06:	90                   	nop
f0104b07:	c9                   	leave  
f0104b08:	c3                   	ret    

f0104b09 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104b09:	55                   	push   %ebp
f0104b0a:	89 e5                	mov    %esp,%ebp
f0104b0c:	83 ec 28             	sub    $0x28,%esp
f0104b0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b12:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104b15:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104b1c:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104b20:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104b23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b26:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b27:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104b2b:	83 ec 0c             	sub    $0xc,%esp
f0104b2e:	50                   	push   %eax
f0104b2f:	e8 df 00 00 00       	call   f0104c13 <kclock_write_cnt0_LSB_first>
f0104b34:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b37:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f0104b3d:	0f b7 c0             	movzwl %ax,%eax
f0104b40:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104b45:	83 ec 0c             	sub    $0xc,%esp
f0104b48:	50                   	push   %eax
f0104b49:	e8 51 1b 00 00       	call   f010669f <irq_setmask_8259A>
f0104b4e:	83 c4 10             	add    $0x10,%esp

}
f0104b51:	90                   	nop
f0104b52:	c9                   	leave  
f0104b53:	c3                   	ret    

f0104b54 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104b54:	55                   	push   %ebp
f0104b55:	89 e5                	mov    %esp,%ebp
f0104b57:	56                   	push   %esi
f0104b58:	53                   	push   %ebx
f0104b59:	83 ec 20             	sub    $0x20,%esp
f0104b5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b5f:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104b62:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104b66:	0f 87 8a 00 00 00    	ja     f0104bf6 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104b6c:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104b70:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104b75:	99                   	cltd   
f0104b76:	f7 fe                	idiv   %esi
f0104b78:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104b7e:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104b82:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104b87:	99                   	cltd   
f0104b88:	f7 fb                	idiv   %ebx
f0104b8a:	89 c6                	mov    %eax,%esi
f0104b8c:	89 c8                	mov    %ecx,%eax
f0104b8e:	99                   	cltd   
f0104b8f:	f7 fe                	idiv   %esi
f0104b91:	89 c3                	mov    %eax,%ebx
f0104b93:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104b97:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104b9c:	99                   	cltd   
f0104b9d:	f7 f9                	idiv   %ecx
f0104b9f:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104ba5:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104ba9:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104bae:	99                   	cltd   
f0104baf:	f7 fe                	idiv   %esi
f0104bb1:	89 c6                	mov    %eax,%esi
f0104bb3:	89 c8                	mov    %ecx,%eax
f0104bb5:	99                   	cltd   
f0104bb6:	f7 fe                	idiv   %esi
f0104bb8:	25 01 00 00 80       	and    $0x80000001,%eax
f0104bbd:	85 c0                	test   %eax,%eax
f0104bbf:	79 05                	jns    f0104bc6 <kclock_set_quantum+0x72>
f0104bc1:	48                   	dec    %eax
f0104bc2:	83 c8 fe             	or     $0xfffffffe,%eax
f0104bc5:	40                   	inc    %eax
f0104bc6:	01 d8                	add    %ebx,%eax
f0104bc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bcb:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104bd2:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104bd6:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104bd9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104bdc:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104be0:	0f b7 c0             	movzwl %ax,%eax
f0104be3:	83 ec 0c             	sub    $0xc,%esp
f0104be6:	50                   	push   %eax
f0104be7:	e8 27 00 00 00       	call   f0104c13 <kclock_write_cnt0_LSB_first>
f0104bec:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104bef:	e8 7a fe ff ff       	call   f0104a6e <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104bf4:	eb 16                	jmp    f0104c0c <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104bf6:	6a 35                	push   $0x35
f0104bf8:	68 ac 19 13 f0       	push   $0xf01319ac
f0104bfd:	68 cc 00 00 00       	push   $0xcc
f0104c02:	68 08 1a 13 f0       	push   $0xf0131a08
f0104c07:	e8 a4 b5 ff ff       	call   f01001b0 <_panic>
	}
}
f0104c0c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104c0f:	5b                   	pop    %ebx
f0104c10:	5e                   	pop    %esi
f0104c11:	5d                   	pop    %ebp
f0104c12:	c3                   	ret    

f0104c13 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104c13:	55                   	push   %ebp
f0104c14:	89 e5                	mov    %esp,%ebp
f0104c16:	83 ec 14             	sub    $0x14,%esp
f0104c19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c1c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104c20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c23:	0f b6 c0             	movzbl %al,%eax
f0104c26:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104c2d:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104c30:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104c33:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104c36:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104c37:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c3a:	66 c1 e8 08          	shr    $0x8,%ax
f0104c3e:	0f b6 c0             	movzbl %al,%eax
f0104c41:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104c48:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104c4b:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104c4e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104c51:	ee                   	out    %al,(%dx)
}
f0104c52:	90                   	nop
f0104c53:	c9                   	leave  
f0104c54:	c3                   	ret    

f0104c55 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104c55:	55                   	push   %ebp
f0104c56:	89 e5                	mov    %esp,%ebp
f0104c58:	83 ec 20             	sub    $0x20,%esp
f0104c5b:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104c62:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104c65:	89 c2                	mov    %eax,%edx
f0104c67:	ec                   	in     (%dx),%al
f0104c68:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104c6b:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104c6e:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104c71:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104c78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104c7b:	89 c2                	mov    %eax,%edx
f0104c7d:	ec                   	in     (%dx),%al
f0104c7e:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104c81:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104c84:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104c87:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104c8b:	c1 e0 08             	shl    $0x8,%eax
f0104c8e:	89 c2                	mov    %eax,%edx
f0104c90:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104c94:	09 d0                	or     %edx,%eax
f0104c96:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104c9d:	c9                   	leave  
f0104c9e:	c3                   	ret    

f0104c9f <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104c9f:	55                   	push   %ebp
f0104ca0:	89 e5                	mov    %esp,%ebp
f0104ca2:	83 ec 30             	sub    $0x30,%esp
f0104ca5:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104caf:	89 c2                	mov    %eax,%edx
f0104cb1:	ec                   	in     (%dx),%al
f0104cb2:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104cb5:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104cb8:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104cbb:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104cc2:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104cc6:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104cc9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ccc:	ee                   	out    %al,(%dx)
f0104ccd:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104cd7:	89 c2                	mov    %eax,%edx
f0104cd9:	ec                   	in     (%dx),%al
f0104cda:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104cdd:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ce0:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104ce3:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104ced:	89 c2                	mov    %eax,%edx
f0104cef:	ec                   	in     (%dx),%al
f0104cf0:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104cf3:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104cf6:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104cf9:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104cfd:	c1 e0 08             	shl    $0x8,%eax
f0104d00:	89 c2                	mov    %eax,%edx
f0104d02:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104d06:	09 d0                	or     %edx,%eax
f0104d08:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104d0c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104d10:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104d17:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d1a:	8a 45 df             	mov    -0x21(%ebp),%al
f0104d1d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104d20:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104d21:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104d24:	c9                   	leave  
f0104d25:	c3                   	ret    

f0104d26 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104d26:	55                   	push   %ebp
f0104d27:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104d29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d2d:	74 1d                	je     f0104d4c <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104d2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d32:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104d38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d3b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104d42:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d45:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104d4c:	90                   	nop
f0104d4d:	5d                   	pop    %ebp
f0104d4e:	c3                   	ret    

f0104d4f <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104d4f:	55                   	push   %ebp
f0104d50:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104d52:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d56:	74 08                	je     f0104d60 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104d58:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d5b:	8b 40 0c             	mov    0xc(%eax),%eax
f0104d5e:	eb 05                	jmp    f0104d65 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104d60:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104d65:	5d                   	pop    %ebp
f0104d66:	c3                   	ret    

f0104d67 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104d67:	55                   	push   %ebp
f0104d68:	89 e5                	mov    %esp,%ebp
f0104d6a:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104d6d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d71:	75 16                	jne    f0104d89 <enqueue+0x22>
f0104d73:	68 1c 1a 13 f0       	push   $0xf0131a1c
f0104d78:	68 2a 1a 13 f0       	push   $0xf0131a2a
f0104d7d:	6a 33                	push   $0x33
f0104d7f:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0104d84:	e8 27 b4 ff ff       	call   f01001b0 <_panic>
	if(env != NULL)
f0104d89:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104d8d:	74 66                	je     f0104df5 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104d8f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104d93:	75 14                	jne    f0104da9 <enqueue+0x42>
f0104d95:	83 ec 04             	sub    $0x4,%esp
f0104d98:	68 58 1a 13 f0       	push   $0xf0131a58
f0104d9d:	6a 36                	push   $0x36
f0104d9f:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0104da4:	e8 07 b4 ff ff       	call   f01001b0 <_panic>
f0104da9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dac:	8b 10                	mov    (%eax),%edx
f0104dae:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104db1:	89 50 44             	mov    %edx,0x44(%eax)
f0104db4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104db7:	8b 40 44             	mov    0x44(%eax),%eax
f0104dba:	85 c0                	test   %eax,%eax
f0104dbc:	74 0d                	je     f0104dcb <enqueue+0x64>
f0104dbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dc1:	8b 00                	mov    (%eax),%eax
f0104dc3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104dc6:	89 50 48             	mov    %edx,0x48(%eax)
f0104dc9:	eb 09                	jmp    f0104dd4 <enqueue+0x6d>
f0104dcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dce:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104dd1:	89 50 04             	mov    %edx,0x4(%eax)
f0104dd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dd7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104dda:	89 10                	mov    %edx,(%eax)
f0104ddc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ddf:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104de6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104de9:	8b 40 0c             	mov    0xc(%eax),%eax
f0104dec:	8d 50 01             	lea    0x1(%eax),%edx
f0104def:	8b 45 08             	mov    0x8(%ebp),%eax
f0104df2:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104df5:	90                   	nop
f0104df6:	c9                   	leave  
f0104df7:	c3                   	ret    

f0104df8 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104df8:	55                   	push   %ebp
f0104df9:	89 e5                	mov    %esp,%ebp
f0104dfb:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104dfe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e02:	75 0a                	jne    f0104e0e <dequeue+0x16>
f0104e04:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e09:	e9 a0 00 00 00       	jmp    f0104eae <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104e0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e11:	8b 40 04             	mov    0x4(%eax),%eax
f0104e14:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104e17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e1b:	0f 84 8a 00 00 00    	je     f0104eab <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104e21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e25:	75 14                	jne    f0104e3b <dequeue+0x43>
f0104e27:	83 ec 04             	sub    $0x4,%esp
f0104e2a:	68 7b 1a 13 f0       	push   $0xf0131a7b
f0104e2f:	6a 43                	push   $0x43
f0104e31:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0104e36:	e8 75 b3 ff ff       	call   f01001b0 <_panic>
f0104e3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e3e:	8b 40 44             	mov    0x44(%eax),%eax
f0104e41:	85 c0                	test   %eax,%eax
f0104e43:	74 11                	je     f0104e56 <dequeue+0x5e>
f0104e45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e48:	8b 40 44             	mov    0x44(%eax),%eax
f0104e4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e4e:	8b 52 48             	mov    0x48(%edx),%edx
f0104e51:	89 50 48             	mov    %edx,0x48(%eax)
f0104e54:	eb 0c                	jmp    f0104e62 <dequeue+0x6a>
f0104e56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e59:	8b 50 48             	mov    0x48(%eax),%edx
f0104e5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e5f:	89 50 04             	mov    %edx,0x4(%eax)
f0104e62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e65:	8b 40 48             	mov    0x48(%eax),%eax
f0104e68:	85 c0                	test   %eax,%eax
f0104e6a:	74 11                	je     f0104e7d <dequeue+0x85>
f0104e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e6f:	8b 40 48             	mov    0x48(%eax),%eax
f0104e72:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e75:	8b 52 44             	mov    0x44(%edx),%edx
f0104e78:	89 50 44             	mov    %edx,0x44(%eax)
f0104e7b:	eb 0b                	jmp    f0104e88 <dequeue+0x90>
f0104e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e80:	8b 50 44             	mov    0x44(%eax),%edx
f0104e83:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e86:	89 10                	mov    %edx,(%eax)
f0104e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e8b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104e92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e95:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e9f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104ea2:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104ea5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ea8:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104eab:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104eae:	c9                   	leave  
f0104eaf:	c3                   	ret    

f0104eb0 <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104eb0:	55                   	push   %ebp
f0104eb1:	89 e5                	mov    %esp,%ebp
f0104eb3:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104eb6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104eba:	75 16                	jne    f0104ed2 <remove_from_queue+0x22>
f0104ebc:	68 1c 1a 13 f0       	push   $0xf0131a1c
f0104ec1:	68 2a 1a 13 f0       	push   $0xf0131a2a
f0104ec6:	6a 4d                	push   $0x4d
f0104ec8:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0104ecd:	e8 de b2 ff ff       	call   f01001b0 <_panic>

	if (e != NULL)
f0104ed2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104ed6:	0f 84 8a 00 00 00    	je     f0104f66 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104edc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104ee0:	75 14                	jne    f0104ef6 <remove_from_queue+0x46>
f0104ee2:	83 ec 04             	sub    $0x4,%esp
f0104ee5:	68 7b 1a 13 f0       	push   $0xf0131a7b
f0104eea:	6a 51                	push   $0x51
f0104eec:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0104ef1:	e8 ba b2 ff ff       	call   f01001b0 <_panic>
f0104ef6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ef9:	8b 40 44             	mov    0x44(%eax),%eax
f0104efc:	85 c0                	test   %eax,%eax
f0104efe:	74 11                	je     f0104f11 <remove_from_queue+0x61>
f0104f00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f03:	8b 40 44             	mov    0x44(%eax),%eax
f0104f06:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f09:	8b 52 48             	mov    0x48(%edx),%edx
f0104f0c:	89 50 48             	mov    %edx,0x48(%eax)
f0104f0f:	eb 0c                	jmp    f0104f1d <remove_from_queue+0x6d>
f0104f11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f14:	8b 50 48             	mov    0x48(%eax),%edx
f0104f17:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f1a:	89 50 04             	mov    %edx,0x4(%eax)
f0104f1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f20:	8b 40 48             	mov    0x48(%eax),%eax
f0104f23:	85 c0                	test   %eax,%eax
f0104f25:	74 11                	je     f0104f38 <remove_from_queue+0x88>
f0104f27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f2a:	8b 40 48             	mov    0x48(%eax),%eax
f0104f2d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f30:	8b 52 44             	mov    0x44(%edx),%edx
f0104f33:	89 50 44             	mov    %edx,0x44(%eax)
f0104f36:	eb 0b                	jmp    f0104f43 <remove_from_queue+0x93>
f0104f38:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f3b:	8b 50 44             	mov    0x44(%eax),%edx
f0104f3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f41:	89 10                	mov    %edx,(%eax)
f0104f43:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f46:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104f4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f50:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104f57:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f5a:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f5d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104f60:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f63:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104f66:	90                   	nop
f0104f67:	c9                   	leave  
f0104f68:	c3                   	ret    

f0104f69 <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104f69:	55                   	push   %ebp
f0104f6a:	89 e5                	mov    %esp,%ebp
f0104f6c:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104f6f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f73:	75 07                	jne    f0104f7c <find_env_in_queue+0x13>
f0104f75:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f7a:	eb 58                	jmp    f0104fd4 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104f7c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104f83:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f86:	8b 00                	mov    (%eax),%eax
f0104f88:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104f8b:	eb 19                	jmp    f0104fa6 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104f8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104f90:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f93:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104f96:	75 05                	jne    f0104f9d <find_env_in_queue+0x34>
		{
			return ptr_env;
f0104f98:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104f9b:	eb 37                	jmp    f0104fd4 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104f9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fa0:	8b 40 08             	mov    0x8(%eax),%eax
f0104fa3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104fa6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104faa:	74 08                	je     f0104fb4 <find_env_in_queue+0x4b>
f0104fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104faf:	8b 40 44             	mov    0x44(%eax),%eax
f0104fb2:	eb 05                	jmp    f0104fb9 <find_env_in_queue+0x50>
f0104fb4:	b8 00 00 00 00       	mov    $0x0,%eax
f0104fb9:	8b 55 08             	mov    0x8(%ebp),%edx
f0104fbc:	89 42 08             	mov    %eax,0x8(%edx)
f0104fbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fc2:	8b 40 08             	mov    0x8(%eax),%eax
f0104fc5:	85 c0                	test   %eax,%eax
f0104fc7:	75 c4                	jne    f0104f8d <find_env_in_queue+0x24>
f0104fc9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104fcd:	75 be                	jne    f0104f8d <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104fcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104fd4:	c9                   	leave  
f0104fd5:	c3                   	ret    

f0104fd6 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f0104fd6:	55                   	push   %ebp
f0104fd7:	89 e5                	mov    %esp,%ebp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
	if (quantums != NULL)
		kfree(quantums);
#endif
}
f0104fd9:	90                   	nop
f0104fda:	5d                   	pop    %ebp
f0104fdb:	c3                   	ret    

f0104fdc <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f0104fdc:	55                   	push   %ebp
f0104fdd:	89 e5                	mov    %esp,%ebp
f0104fdf:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104fe2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104fe6:	74 1d                	je     f0105005 <sched_insert_ready0+0x29>
	{
		env->env_status = ENV_READY ;
f0104fe8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104feb:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104ff2:	83 ec 08             	sub    $0x8,%esp
f0104ff5:	ff 75 08             	pushl  0x8(%ebp)
f0104ff8:	68 20 2b 25 f0       	push   $0xf0252b20
f0104ffd:	e8 65 fd ff ff       	call   f0104d67 <enqueue>
f0105002:	83 c4 10             	add    $0x10,%esp
	}
}
f0105005:	90                   	nop
f0105006:	c9                   	leave  
f0105007:	c3                   	ret    

f0105008 <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f0105008:	55                   	push   %ebp
f0105009:	89 e5                	mov    %esp,%ebp
f010500b:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010500e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105012:	0f 84 02 01 00 00    	je     f010511a <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105018:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010501f:	e9 e5 00 00 00       	jmp    f0105109 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0105024:	8b 45 08             	mov    0x8(%ebp),%eax
f0105027:	8b 40 4c             	mov    0x4c(%eax),%eax
f010502a:	89 c2                	mov    %eax,%edx
f010502c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010502f:	c1 e0 04             	shl    $0x4,%eax
f0105032:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f0105037:	52                   	push   %edx
f0105038:	50                   	push   %eax
f0105039:	e8 2b ff ff ff       	call   f0104f69 <find_env_in_queue>
f010503e:	83 c4 08             	add    $0x8,%esp
f0105041:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f0105044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105048:	0f 84 b8 00 00 00    	je     f0105106 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f010504e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105052:	75 17                	jne    f010506b <sched_remove_ready+0x63>
f0105054:	83 ec 04             	sub    $0x4,%esp
f0105057:	68 7b 1a 13 f0       	push   $0xf0131a7b
f010505c:	68 90 00 00 00       	push   $0x90
f0105061:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0105066:	e8 45 b1 ff ff       	call   f01001b0 <_panic>
f010506b:	8b 45 08             	mov    0x8(%ebp),%eax
f010506e:	8b 40 44             	mov    0x44(%eax),%eax
f0105071:	85 c0                	test   %eax,%eax
f0105073:	74 11                	je     f0105086 <sched_remove_ready+0x7e>
f0105075:	8b 45 08             	mov    0x8(%ebp),%eax
f0105078:	8b 40 44             	mov    0x44(%eax),%eax
f010507b:	8b 55 08             	mov    0x8(%ebp),%edx
f010507e:	8b 52 48             	mov    0x48(%edx),%edx
f0105081:	89 50 48             	mov    %edx,0x48(%eax)
f0105084:	eb 14                	jmp    f010509a <sched_remove_ready+0x92>
f0105086:	8b 45 08             	mov    0x8(%ebp),%eax
f0105089:	8b 40 48             	mov    0x48(%eax),%eax
f010508c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010508f:	c1 e2 04             	shl    $0x4,%edx
f0105092:	81 c2 24 2b 25 f0    	add    $0xf0252b24,%edx
f0105098:	89 02                	mov    %eax,(%edx)
f010509a:	8b 45 08             	mov    0x8(%ebp),%eax
f010509d:	8b 40 48             	mov    0x48(%eax),%eax
f01050a0:	85 c0                	test   %eax,%eax
f01050a2:	74 11                	je     f01050b5 <sched_remove_ready+0xad>
f01050a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01050a7:	8b 40 48             	mov    0x48(%eax),%eax
f01050aa:	8b 55 08             	mov    0x8(%ebp),%edx
f01050ad:	8b 52 44             	mov    0x44(%edx),%edx
f01050b0:	89 50 44             	mov    %edx,0x44(%eax)
f01050b3:	eb 14                	jmp    f01050c9 <sched_remove_ready+0xc1>
f01050b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b8:	8b 40 44             	mov    0x44(%eax),%eax
f01050bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050be:	c1 e2 04             	shl    $0x4,%edx
f01050c1:	81 c2 20 2b 25 f0    	add    $0xf0252b20,%edx
f01050c7:	89 02                	mov    %eax,(%edx)
f01050c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01050cc:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01050d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01050d6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01050dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050e0:	c1 e0 04             	shl    $0x4,%eax
f01050e3:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f01050e8:	8b 00                	mov    (%eax),%eax
f01050ea:	8d 50 ff             	lea    -0x1(%eax),%edx
f01050ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f0:	c1 e0 04             	shl    $0x4,%eax
f01050f3:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f01050f8:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01050fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01050fd:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0105104:	eb 14                	jmp    f010511a <sched_remove_ready+0x112>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105106:	ff 45 f4             	incl   -0xc(%ebp)
f0105109:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f010510e:	0f b6 c0             	movzbl %al,%eax
f0105111:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105114:	0f 8f 0a ff ff ff    	jg     f0105024 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f010511a:	c9                   	leave  
f010511b:	c3                   	ret    

f010511c <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f010511c:	55                   	push   %ebp
f010511d:	89 e5                	mov    %esp,%ebp
f010511f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105122:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105126:	74 1d                	je     f0105145 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0105128:	8b 45 08             	mov    0x8(%ebp),%eax
f010512b:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0105132:	83 ec 08             	sub    $0x8,%esp
f0105135:	ff 75 08             	pushl  0x8(%ebp)
f0105138:	68 b8 ae 2b f0       	push   $0xf02baeb8
f010513d:	e8 25 fc ff ff       	call   f0104d67 <enqueue>
f0105142:	83 c4 10             	add    $0x10,%esp
	}
}
f0105145:	90                   	nop
f0105146:	c9                   	leave  
f0105147:	c3                   	ret    

f0105148 <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f0105148:	55                   	push   %ebp
f0105149:	89 e5                	mov    %esp,%ebp
f010514b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010514e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105152:	0f 84 92 00 00 00    	je     f01051ea <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0105158:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010515c:	75 17                	jne    f0105175 <sched_remove_new+0x2d>
f010515e:	83 ec 04             	sub    $0x4,%esp
f0105161:	68 7b 1a 13 f0       	push   $0xf0131a7b
f0105166:	68 ab 00 00 00       	push   $0xab
f010516b:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0105170:	e8 3b b0 ff ff       	call   f01001b0 <_panic>
f0105175:	8b 45 08             	mov    0x8(%ebp),%eax
f0105178:	8b 40 44             	mov    0x44(%eax),%eax
f010517b:	85 c0                	test   %eax,%eax
f010517d:	74 11                	je     f0105190 <sched_remove_new+0x48>
f010517f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105182:	8b 40 44             	mov    0x44(%eax),%eax
f0105185:	8b 55 08             	mov    0x8(%ebp),%edx
f0105188:	8b 52 48             	mov    0x48(%edx),%edx
f010518b:	89 50 48             	mov    %edx,0x48(%eax)
f010518e:	eb 0b                	jmp    f010519b <sched_remove_new+0x53>
f0105190:	8b 45 08             	mov    0x8(%ebp),%eax
f0105193:	8b 40 48             	mov    0x48(%eax),%eax
f0105196:	a3 bc ae 2b f0       	mov    %eax,0xf02baebc
f010519b:	8b 45 08             	mov    0x8(%ebp),%eax
f010519e:	8b 40 48             	mov    0x48(%eax),%eax
f01051a1:	85 c0                	test   %eax,%eax
f01051a3:	74 11                	je     f01051b6 <sched_remove_new+0x6e>
f01051a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01051a8:	8b 40 48             	mov    0x48(%eax),%eax
f01051ab:	8b 55 08             	mov    0x8(%ebp),%edx
f01051ae:	8b 52 44             	mov    0x44(%edx),%edx
f01051b1:	89 50 44             	mov    %edx,0x44(%eax)
f01051b4:	eb 0b                	jmp    f01051c1 <sched_remove_new+0x79>
f01051b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01051b9:	8b 40 44             	mov    0x44(%eax),%eax
f01051bc:	a3 b8 ae 2b f0       	mov    %eax,0xf02baeb8
f01051c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01051c4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01051cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01051ce:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01051d5:	a1 c4 ae 2b f0       	mov    0xf02baec4,%eax
f01051da:	48                   	dec    %eax
f01051db:	a3 c4 ae 2b f0       	mov    %eax,0xf02baec4
		env->env_status = ENV_UNKNOWN;
f01051e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01051e3:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01051ea:	90                   	nop
f01051eb:	c9                   	leave  
f01051ec:	c3                   	ret    

f01051ed <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f01051ed:	55                   	push   %ebp
f01051ee:	89 e5                	mov    %esp,%ebp
f01051f0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01051f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051f7:	74 34                	je     f010522d <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01051f9:	e8 b7 85 00 00       	call   f010d7b5 <isBufferingEnabled>
f01051fe:	84 c0                	test   %al,%al
f0105200:	74 0e                	je     f0105210 <sched_insert_exit+0x23>
f0105202:	83 ec 0c             	sub    $0xc,%esp
f0105205:	ff 75 08             	pushl  0x8(%ebp)
f0105208:	e8 49 5b 00 00       	call   f010ad56 <cleanup_buffers>
f010520d:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0105210:	8b 45 08             	mov    0x8(%ebp),%eax
f0105213:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f010521a:	83 ec 08             	sub    $0x8,%esp
f010521d:	ff 75 08             	pushl  0x8(%ebp)
f0105220:	68 84 8a 2b f0       	push   $0xf02b8a84
f0105225:	e8 3d fb ff ff       	call   f0104d67 <enqueue>
f010522a:	83 c4 10             	add    $0x10,%esp
	}
}
f010522d:	90                   	nop
f010522e:	c9                   	leave  
f010522f:	c3                   	ret    

f0105230 <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f0105230:	55                   	push   %ebp
f0105231:	89 e5                	mov    %esp,%ebp
f0105233:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105236:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010523a:	0f 84 92 00 00 00    	je     f01052d2 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0105240:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105244:	75 17                	jne    f010525d <sched_remove_exit+0x2d>
f0105246:	83 ec 04             	sub    $0x4,%esp
f0105249:	68 7b 1a 13 f0       	push   $0xf0131a7b
f010524e:	68 c3 00 00 00       	push   $0xc3
f0105253:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0105258:	e8 53 af ff ff       	call   f01001b0 <_panic>
f010525d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105260:	8b 40 44             	mov    0x44(%eax),%eax
f0105263:	85 c0                	test   %eax,%eax
f0105265:	74 11                	je     f0105278 <sched_remove_exit+0x48>
f0105267:	8b 45 08             	mov    0x8(%ebp),%eax
f010526a:	8b 40 44             	mov    0x44(%eax),%eax
f010526d:	8b 55 08             	mov    0x8(%ebp),%edx
f0105270:	8b 52 48             	mov    0x48(%edx),%edx
f0105273:	89 50 48             	mov    %edx,0x48(%eax)
f0105276:	eb 0b                	jmp    f0105283 <sched_remove_exit+0x53>
f0105278:	8b 45 08             	mov    0x8(%ebp),%eax
f010527b:	8b 40 48             	mov    0x48(%eax),%eax
f010527e:	a3 88 8a 2b f0       	mov    %eax,0xf02b8a88
f0105283:	8b 45 08             	mov    0x8(%ebp),%eax
f0105286:	8b 40 48             	mov    0x48(%eax),%eax
f0105289:	85 c0                	test   %eax,%eax
f010528b:	74 11                	je     f010529e <sched_remove_exit+0x6e>
f010528d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105290:	8b 40 48             	mov    0x48(%eax),%eax
f0105293:	8b 55 08             	mov    0x8(%ebp),%edx
f0105296:	8b 52 44             	mov    0x44(%edx),%edx
f0105299:	89 50 44             	mov    %edx,0x44(%eax)
f010529c:	eb 0b                	jmp    f01052a9 <sched_remove_exit+0x79>
f010529e:	8b 45 08             	mov    0x8(%ebp),%eax
f01052a1:	8b 40 44             	mov    0x44(%eax),%eax
f01052a4:	a3 84 8a 2b f0       	mov    %eax,0xf02b8a84
f01052a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ac:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01052b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01052b6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01052bd:	a1 90 8a 2b f0       	mov    0xf02b8a90,%eax
f01052c2:	48                   	dec    %eax
f01052c3:	a3 90 8a 2b f0       	mov    %eax,0xf02b8a90
		env->env_status = ENV_UNKNOWN;
f01052c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01052cb:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01052d2:	90                   	nop
f01052d3:	c9                   	leave  
f01052d4:	c3                   	ret    

f01052d5 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f01052d5:	55                   	push   %ebp
f01052d6:	89 e5                	mov    %esp,%ebp
f01052d8:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f01052db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052df:	74 0e                	je     f01052ef <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f01052e1:	83 ec 0c             	sub    $0xc,%esp
f01052e4:	ff 75 08             	pushl  0x8(%ebp)
f01052e7:	e8 30 fe ff ff       	call   f010511c <sched_insert_new>
f01052ec:	83 c4 10             	add    $0x10,%esp
	}
}
f01052ef:	90                   	nop
f01052f0:	c9                   	leave  
f01052f1:	c3                   	ret    

f01052f2 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f01052f2:	55                   	push   %ebp
f01052f3:	89 e5                	mov    %esp,%ebp
f01052f5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01052ff:	a1 b8 ae 2b f0       	mov    0xf02baeb8,%eax
f0105304:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105307:	eb 3d                	jmp    f0105346 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105309:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010530c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010530f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105312:	75 2a                	jne    f010533e <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105314:	83 ec 0c             	sub    $0xc,%esp
f0105317:	ff 75 f4             	pushl  -0xc(%ebp)
f010531a:	e8 29 fe ff ff       	call   f0105148 <sched_remove_new>
f010531f:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0105322:	83 ec 0c             	sub    $0xc,%esp
f0105325:	ff 75 f4             	pushl  -0xc(%ebp)
f0105328:	e8 af fc ff ff       	call   f0104fdc <sched_insert_ready0>
f010532d:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0105330:	a1 d4 ae 2b f0       	mov    0xf02baed4,%eax
f0105335:	85 c0                	test   %eax,%eax
f0105337:	75 36                	jne    f010536f <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105339:	e8 7d 0e 00 00       	call   f01061bb <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010533e:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f0105343:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105346:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010534a:	74 08                	je     f0105354 <sched_run_env+0x62>
f010534c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010534f:	8b 40 44             	mov    0x44(%eax),%eax
f0105352:	eb 05                	jmp    f0105359 <sched_run_env+0x67>
f0105354:	b8 00 00 00 00       	mov    $0x0,%eax
f0105359:	a3 c0 ae 2b f0       	mov    %eax,0xf02baec0
f010535e:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f0105363:	85 c0                	test   %eax,%eax
f0105365:	75 a2                	jne    f0105309 <sched_run_env+0x17>
f0105367:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010536b:	75 9c                	jne    f0105309 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010536d:	eb 01                	jmp    f0105370 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010536f:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105370:	90                   	nop
f0105371:	c9                   	leave  
f0105372:	c3                   	ret    

f0105373 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f0105373:	55                   	push   %ebp
f0105374:	89 e5                	mov    %esp,%ebp
f0105376:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105379:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105380:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105387:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010538b:	75 59                	jne    f01053e6 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010538d:	a1 b8 ae 2b f0       	mov    0xf02baeb8,%eax
f0105392:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105395:	eb 28                	jmp    f01053bf <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f0105397:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010539a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010539d:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053a0:	75 15                	jne    f01053b7 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01053a2:	83 ec 0c             	sub    $0xc,%esp
f01053a5:	ff 75 f4             	pushl  -0xc(%ebp)
f01053a8:	e8 9b fd ff ff       	call   f0105148 <sched_remove_new>
f01053ad:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01053b0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01053b7:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f01053bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053c3:	74 08                	je     f01053cd <sched_exit_env+0x5a>
f01053c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c8:	8b 40 44             	mov    0x44(%eax),%eax
f01053cb:	eb 05                	jmp    f01053d2 <sched_exit_env+0x5f>
f01053cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01053d2:	a3 c0 ae 2b f0       	mov    %eax,0xf02baec0
f01053d7:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f01053dc:	85 c0                	test   %eax,%eax
f01053de:	75 b7                	jne    f0105397 <sched_exit_env+0x24>
f01053e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053e4:	75 b1                	jne    f0105397 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f01053e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053ea:	0f 85 6e 01 00 00    	jne    f010555e <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01053f0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01053f7:	e9 4e 01 00 00       	jmp    f010554a <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01053fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01053ff:	c1 e0 04             	shl    $0x4,%eax
f0105402:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f0105407:	8b 00                	mov    (%eax),%eax
f0105409:	85 c0                	test   %eax,%eax
f010540b:	0f 84 30 01 00 00    	je     f0105541 <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f0105411:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105418:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010541b:	c1 e0 04             	shl    $0x4,%eax
f010541e:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f0105423:	8b 00                	mov    (%eax),%eax
f0105425:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105428:	e9 d4 00 00 00       	jmp    f0105501 <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f010542d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105430:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105433:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105436:	0f 85 b5 00 00 00    	jne    f01054f1 <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010543c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105440:	75 17                	jne    f0105459 <sched_exit_env+0xe6>
f0105442:	83 ec 04             	sub    $0x4,%esp
f0105445:	68 7b 1a 13 f0       	push   $0xf0131a7b
f010544a:	68 10 01 00 00       	push   $0x110
f010544f:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0105454:	e8 57 ad ff ff       	call   f01001b0 <_panic>
f0105459:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010545c:	8b 40 44             	mov    0x44(%eax),%eax
f010545f:	85 c0                	test   %eax,%eax
f0105461:	74 11                	je     f0105474 <sched_exit_env+0x101>
f0105463:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105466:	8b 40 44             	mov    0x44(%eax),%eax
f0105469:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010546c:	8b 52 48             	mov    0x48(%edx),%edx
f010546f:	89 50 48             	mov    %edx,0x48(%eax)
f0105472:	eb 14                	jmp    f0105488 <sched_exit_env+0x115>
f0105474:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105477:	8b 40 48             	mov    0x48(%eax),%eax
f010547a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010547d:	c1 e2 04             	shl    $0x4,%edx
f0105480:	81 c2 24 2b 25 f0    	add    $0xf0252b24,%edx
f0105486:	89 02                	mov    %eax,(%edx)
f0105488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010548b:	8b 40 48             	mov    0x48(%eax),%eax
f010548e:	85 c0                	test   %eax,%eax
f0105490:	74 11                	je     f01054a3 <sched_exit_env+0x130>
f0105492:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105495:	8b 40 48             	mov    0x48(%eax),%eax
f0105498:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010549b:	8b 52 44             	mov    0x44(%edx),%edx
f010549e:	89 50 44             	mov    %edx,0x44(%eax)
f01054a1:	eb 14                	jmp    f01054b7 <sched_exit_env+0x144>
f01054a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054a6:	8b 40 44             	mov    0x44(%eax),%eax
f01054a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01054ac:	c1 e2 04             	shl    $0x4,%edx
f01054af:	81 c2 20 2b 25 f0    	add    $0xf0252b20,%edx
f01054b5:	89 02                	mov    %eax,(%edx)
f01054b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ba:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01054c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054c4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01054cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01054ce:	c1 e0 04             	shl    $0x4,%eax
f01054d1:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f01054d6:	8b 00                	mov    (%eax),%eax
f01054d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01054db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01054de:	c1 e0 04             	shl    $0x4,%eax
f01054e1:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f01054e6:	89 10                	mov    %edx,(%eax)
						found = 1;
f01054e8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01054ef:	eb 50                	jmp    f0105541 <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01054f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01054f4:	c1 e0 04             	shl    $0x4,%eax
f01054f7:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f01054fc:	8b 00                	mov    (%eax),%eax
f01054fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105501:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105505:	74 08                	je     f010550f <sched_exit_env+0x19c>
f0105507:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010550a:	8b 40 44             	mov    0x44(%eax),%eax
f010550d:	eb 05                	jmp    f0105514 <sched_exit_env+0x1a1>
f010550f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105514:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105517:	c1 e2 04             	shl    $0x4,%edx
f010551a:	81 c2 28 2b 25 f0    	add    $0xf0252b28,%edx
f0105520:	89 02                	mov    %eax,(%edx)
f0105522:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105525:	c1 e0 04             	shl    $0x4,%eax
f0105528:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f010552d:	8b 00                	mov    (%eax),%eax
f010552f:	85 c0                	test   %eax,%eax
f0105531:	0f 85 f6 fe ff ff    	jne    f010542d <sched_exit_env+0xba>
f0105537:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010553b:	0f 85 ec fe ff ff    	jne    f010542d <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105541:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105545:	75 16                	jne    f010555d <sched_exit_env+0x1ea>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105547:	ff 45 ec             	incl   -0x14(%ebp)
f010554a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f010554f:	0f b6 c0             	movzbl %al,%eax
f0105552:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105555:	0f 8f a1 fe ff ff    	jg     f01053fc <sched_exit_env+0x89>
f010555b:	eb 01                	jmp    f010555e <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f010555d:	90                   	nop
		}
	}
	if (!found)
f010555e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105562:	75 1c                	jne    f0105580 <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f0105564:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0105569:	8b 40 4c             	mov    0x4c(%eax),%eax
f010556c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010556f:	75 0f                	jne    f0105580 <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f0105571:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0105576:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0105579:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105580:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105584:	74 2a                	je     f01055b0 <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0105586:	83 ec 0c             	sub    $0xc,%esp
f0105589:	ff 75 f4             	pushl  -0xc(%ebp)
f010558c:	e8 5c fc ff ff       	call   f01051ed <sched_insert_exit>
f0105591:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0105594:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0105599:	8b 40 4c             	mov    0x4c(%eax),%eax
f010559c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010559f:	75 0f                	jne    f01055b0 <sched_exit_env+0x23d>
		{
			curenv = NULL;
f01055a1:	c7 05 34 22 25 f0 00 	movl   $0x0,0xf0252234
f01055a8:	00 00 00 
			fos_scheduler();
f01055ab:	e8 0b 0c 00 00       	call   f01061bb <fos_scheduler>
		}
	}
}
f01055b0:	90                   	nop
f01055b1:	c9                   	leave  
f01055b2:	c3                   	ret    

f01055b3 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f01055b3:	55                   	push   %ebp
f01055b4:	89 e5                	mov    %esp,%ebp
f01055b6:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01055b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01055c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01055c7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055cb:	0f 85 9d 00 00 00    	jne    f010566e <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01055d1:	a1 b8 ae 2b f0       	mov    0xf02baeb8,%eax
f01055d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055d9:	eb 64                	jmp    f010563f <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f01055db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055de:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055e1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055e4:	75 51                	jne    f0105637 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f01055e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055e9:	8d 50 5c             	lea    0x5c(%eax),%edx
f01055ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055ef:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055f2:	83 ec 04             	sub    $0x4,%esp
f01055f5:	52                   	push   %edx
f01055f6:	50                   	push   %eax
f01055f7:	68 9c 1a 13 f0       	push   $0xf0131a9c
f01055fc:	e8 30 b8 ff ff       	call   f0100e31 <cprintf>
f0105601:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105604:	83 ec 0c             	sub    $0xc,%esp
f0105607:	ff 75 f4             	pushl  -0xc(%ebp)
f010560a:	e8 39 fb ff ff       	call   f0105148 <sched_remove_new>
f010560f:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105612:	83 ec 0c             	sub    $0xc,%esp
f0105615:	ff 75 f4             	pushl  -0xc(%ebp)
f0105618:	e8 2e 43 00 00       	call   f010994b <env_free>
f010561d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105620:	83 ec 0c             	sub    $0xc,%esp
f0105623:	68 c1 1a 13 f0       	push   $0xf0131ac1
f0105628:	e8 04 b8 ff ff       	call   f0100e31 <cprintf>
f010562d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105630:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105637:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f010563c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010563f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105643:	74 08                	je     f010564d <sched_kill_env+0x9a>
f0105645:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105648:	8b 40 44             	mov    0x44(%eax),%eax
f010564b:	eb 05                	jmp    f0105652 <sched_kill_env+0x9f>
f010564d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105652:	a3 c0 ae 2b f0       	mov    %eax,0xf02baec0
f0105657:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f010565c:	85 c0                	test   %eax,%eax
f010565e:	0f 85 77 ff ff ff    	jne    f01055db <sched_kill_env+0x28>
f0105664:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105668:	0f 85 6d ff ff ff    	jne    f01055db <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f010566e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105672:	0f 85 aa 01 00 00    	jne    f0105822 <sched_kill_env+0x26f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105678:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010567f:	e9 8a 01 00 00       	jmp    f010580e <sched_kill_env+0x25b>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105684:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105687:	c1 e0 04             	shl    $0x4,%eax
f010568a:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f010568f:	8b 00                	mov    (%eax),%eax
f0105691:	85 c0                	test   %eax,%eax
f0105693:	0f 84 6c 01 00 00    	je     f0105805 <sched_kill_env+0x252>
			{
				ptr_env=NULL;
f0105699:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056a3:	c1 e0 04             	shl    $0x4,%eax
f01056a6:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f01056ab:	8b 00                	mov    (%eax),%eax
f01056ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056b0:	e9 10 01 00 00       	jmp    f01057c5 <sched_kill_env+0x212>
				{
					if(ptr_env->env_id == envId)
f01056b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056b8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056bb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01056be:	0f 85 f1 00 00 00    	jne    f01057b5 <sched_kill_env+0x202>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f01056c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056c7:	8d 50 5c             	lea    0x5c(%eax),%edx
f01056ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056cd:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056d0:	ff 75 ec             	pushl  -0x14(%ebp)
f01056d3:	52                   	push   %edx
f01056d4:	50                   	push   %eax
f01056d5:	68 c8 1a 13 f0       	push   $0xf0131ac8
f01056da:	e8 52 b7 ff ff       	call   f0100e31 <cprintf>
f01056df:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01056e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056e6:	75 17                	jne    f01056ff <sched_kill_env+0x14c>
f01056e8:	83 ec 04             	sub    $0x4,%esp
f01056eb:	68 7b 1a 13 f0       	push   $0xf0131a7b
f01056f0:	68 54 01 00 00       	push   $0x154
f01056f5:	68 3f 1a 13 f0       	push   $0xf0131a3f
f01056fa:	e8 b1 aa ff ff       	call   f01001b0 <_panic>
f01056ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105702:	8b 40 44             	mov    0x44(%eax),%eax
f0105705:	85 c0                	test   %eax,%eax
f0105707:	74 11                	je     f010571a <sched_kill_env+0x167>
f0105709:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010570c:	8b 40 44             	mov    0x44(%eax),%eax
f010570f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105712:	8b 52 48             	mov    0x48(%edx),%edx
f0105715:	89 50 48             	mov    %edx,0x48(%eax)
f0105718:	eb 14                	jmp    f010572e <sched_kill_env+0x17b>
f010571a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010571d:	8b 40 48             	mov    0x48(%eax),%eax
f0105720:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105723:	c1 e2 04             	shl    $0x4,%edx
f0105726:	81 c2 24 2b 25 f0    	add    $0xf0252b24,%edx
f010572c:	89 02                	mov    %eax,(%edx)
f010572e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105731:	8b 40 48             	mov    0x48(%eax),%eax
f0105734:	85 c0                	test   %eax,%eax
f0105736:	74 11                	je     f0105749 <sched_kill_env+0x196>
f0105738:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010573b:	8b 40 48             	mov    0x48(%eax),%eax
f010573e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105741:	8b 52 44             	mov    0x44(%edx),%edx
f0105744:	89 50 44             	mov    %edx,0x44(%eax)
f0105747:	eb 14                	jmp    f010575d <sched_kill_env+0x1aa>
f0105749:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574c:	8b 40 44             	mov    0x44(%eax),%eax
f010574f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105752:	c1 e2 04             	shl    $0x4,%edx
f0105755:	81 c2 20 2b 25 f0    	add    $0xf0252b20,%edx
f010575b:	89 02                	mov    %eax,(%edx)
f010575d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105760:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105767:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010576a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105771:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105774:	c1 e0 04             	shl    $0x4,%eax
f0105777:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f010577c:	8b 00                	mov    (%eax),%eax
f010577e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105781:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105784:	c1 e0 04             	shl    $0x4,%eax
f0105787:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f010578c:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f010578e:	83 ec 0c             	sub    $0xc,%esp
f0105791:	ff 75 f4             	pushl  -0xc(%ebp)
f0105794:	e8 b2 41 00 00       	call   f010994b <env_free>
f0105799:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010579c:	83 ec 0c             	sub    $0xc,%esp
f010579f:	68 c1 1a 13 f0       	push   $0xf0131ac1
f01057a4:	e8 88 b6 ff ff       	call   f0100e31 <cprintf>
f01057a9:	83 c4 10             	add    $0x10,%esp
						found = 1;
f01057ac:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01057b3:	eb 50                	jmp    f0105805 <sched_kill_env+0x252>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01057b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057b8:	c1 e0 04             	shl    $0x4,%eax
f01057bb:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f01057c0:	8b 00                	mov    (%eax),%eax
f01057c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057c9:	74 08                	je     f01057d3 <sched_kill_env+0x220>
f01057cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ce:	8b 40 44             	mov    0x44(%eax),%eax
f01057d1:	eb 05                	jmp    f01057d8 <sched_kill_env+0x225>
f01057d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01057d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057db:	c1 e2 04             	shl    $0x4,%edx
f01057de:	81 c2 28 2b 25 f0    	add    $0xf0252b28,%edx
f01057e4:	89 02                	mov    %eax,(%edx)
f01057e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057e9:	c1 e0 04             	shl    $0x4,%eax
f01057ec:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f01057f1:	8b 00                	mov    (%eax),%eax
f01057f3:	85 c0                	test   %eax,%eax
f01057f5:	0f 85 ba fe ff ff    	jne    f01056b5 <sched_kill_env+0x102>
f01057fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057ff:	0f 85 b0 fe ff ff    	jne    f01056b5 <sched_kill_env+0x102>
						break;
						//return;
					}
				}
			}
			if (found)
f0105805:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105809:	75 16                	jne    f0105821 <sched_kill_env+0x26e>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010580b:	ff 45 ec             	incl   -0x14(%ebp)
f010580e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0105813:	0f b6 c0             	movzbl %al,%eax
f0105816:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105819:	0f 8f 65 fe ff ff    	jg     f0105684 <sched_kill_env+0xd1>
f010581f:	eb 01                	jmp    f0105822 <sched_kill_env+0x26f>
						//return;
					}
				}
			}
			if (found)
				break;
f0105821:	90                   	nop
		}
	}
	if (!found)
f0105822:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105826:	0f 85 a4 00 00 00    	jne    f01058d0 <sched_kill_env+0x31d>
	{
		ptr_env=NULL;
f010582c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105833:	a1 84 8a 2b f0       	mov    0xf02b8a84,%eax
f0105838:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010583b:	eb 64                	jmp    f01058a1 <sched_kill_env+0x2ee>
		{
			if(ptr_env->env_id == envId)
f010583d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105840:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105843:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105846:	75 51                	jne    f0105899 <sched_kill_env+0x2e6>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0105848:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010584b:	8d 50 5c             	lea    0x5c(%eax),%edx
f010584e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105851:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105854:	83 ec 04             	sub    $0x4,%esp
f0105857:	52                   	push   %edx
f0105858:	50                   	push   %eax
f0105859:	68 f4 1a 13 f0       	push   $0xf0131af4
f010585e:	e8 ce b5 ff ff       	call   f0100e31 <cprintf>
f0105863:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0105866:	83 ec 0c             	sub    $0xc,%esp
f0105869:	ff 75 f4             	pushl  -0xc(%ebp)
f010586c:	e8 bf f9 ff ff       	call   f0105230 <sched_remove_exit>
f0105871:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105874:	83 ec 0c             	sub    $0xc,%esp
f0105877:	ff 75 f4             	pushl  -0xc(%ebp)
f010587a:	e8 cc 40 00 00       	call   f010994b <env_free>
f010587f:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105882:	83 ec 0c             	sub    $0xc,%esp
f0105885:	68 c1 1a 13 f0       	push   $0xf0131ac1
f010588a:	e8 a2 b5 ff ff       	call   f0100e31 <cprintf>
f010588f:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105892:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105899:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f010589e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058a5:	74 08                	je     f01058af <sched_kill_env+0x2fc>
f01058a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058aa:	8b 40 44             	mov    0x44(%eax),%eax
f01058ad:	eb 05                	jmp    f01058b4 <sched_kill_env+0x301>
f01058af:	b8 00 00 00 00       	mov    $0x0,%eax
f01058b4:	a3 8c 8a 2b f0       	mov    %eax,0xf02b8a8c
f01058b9:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f01058be:	85 c0                	test   %eax,%eax
f01058c0:	0f 85 77 ff ff ff    	jne    f010583d <sched_kill_env+0x28a>
f01058c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058ca:	0f 85 6d ff ff ff    	jne    f010583d <sched_kill_env+0x28a>
				//return;
			}
		}
	}

	if (!found)
f01058d0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058d4:	0f 85 9d 00 00 00    	jne    f0105977 <sched_kill_env+0x3c4>
	{
		if (curenv->env_id == envId)
f01058da:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058e5:	0f 85 8c 00 00 00    	jne    f0105977 <sched_kill_env+0x3c4>
		{
			ptr_env = curenv;
f01058eb:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f01058f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f01058f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058f6:	8b 40 54             	mov    0x54(%eax),%eax
f01058f9:	83 f8 02             	cmp    $0x2,%eax
f01058fc:	74 19                	je     f0105917 <sched_kill_env+0x364>
f01058fe:	68 1c 1b 13 f0       	push   $0xf0131b1c
f0105903:	68 2a 1a 13 f0       	push   $0xf0131a2a
f0105908:	68 77 01 00 00       	push   $0x177
f010590d:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0105912:	e8 99 a8 ff ff       	call   f01001b0 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105917:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010591a:	8d 50 5c             	lea    0x5c(%eax),%edx
f010591d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105920:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105923:	83 ec 04             	sub    $0x4,%esp
f0105926:	52                   	push   %edx
f0105927:	50                   	push   %eax
f0105928:	68 40 1b 13 f0       	push   $0xf0131b40
f010592d:	e8 ff b4 ff ff       	call   f0100e31 <cprintf>
f0105932:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105935:	83 ec 0c             	sub    $0xc,%esp
f0105938:	ff 75 f4             	pushl  -0xc(%ebp)
f010593b:	e8 0b 40 00 00       	call   f010994b <env_free>
f0105940:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105943:	83 ec 0c             	sub    $0xc,%esp
f0105946:	68 c1 1a 13 f0       	push   $0xf0131ac1
f010594b:	e8 e1 b4 ff ff       	call   f0100e31 <cprintf>
f0105950:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105953:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f010595a:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f010595f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105962:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105965:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105968:	c7 05 34 22 25 f0 00 	movl   $0x0,0xf0252234
f010596f:	00 00 00 
			fos_scheduler();
f0105972:	e8 44 08 00 00       	call   f01061bb <fos_scheduler>
		}
	}
}
f0105977:	90                   	nop
f0105978:	c9                   	leave  
f0105979:	c3                   	ret    

f010597a <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f010597a:	55                   	push   %ebp
f010597b:	89 e5                	mov    %esp,%ebp
f010597d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105980:	a1 b8 ae 2b f0       	mov    0xf02baeb8,%eax
f0105985:	85 c0                	test   %eax,%eax
f0105987:	74 69                	je     f01059f2 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0105989:	83 ec 0c             	sub    $0xc,%esp
f010598c:	68 6c 1b 13 f0       	push   $0xf0131b6c
f0105991:	e8 9b b4 ff ff       	call   f0100e31 <cprintf>
f0105996:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105999:	a1 b8 ae 2b f0       	mov    0xf02baeb8,%eax
f010599e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01059a1:	eb 26                	jmp    f01059c9 <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01059a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a6:	8d 50 5c             	lea    0x5c(%eax),%edx
f01059a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059ac:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059af:	83 ec 04             	sub    $0x4,%esp
f01059b2:	52                   	push   %edx
f01059b3:	50                   	push   %eax
f01059b4:	68 8e 1b 13 f0       	push   $0xf0131b8e
f01059b9:	e8 73 b4 ff ff       	call   f0100e31 <cprintf>
f01059be:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f01059c1:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f01059c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01059c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01059cd:	74 08                	je     f01059d7 <sched_print_all+0x5d>
f01059cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059d2:	8b 40 44             	mov    0x44(%eax),%eax
f01059d5:	eb 05                	jmp    f01059dc <sched_print_all+0x62>
f01059d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01059dc:	a3 c0 ae 2b f0       	mov    %eax,0xf02baec0
f01059e1:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f01059e6:	85 c0                	test   %eax,%eax
f01059e8:	75 b9                	jne    f01059a3 <sched_print_all+0x29>
f01059ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01059ee:	75 b3                	jne    f01059a3 <sched_print_all+0x29>
f01059f0:	eb 10                	jmp    f0105a02 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f01059f2:	83 ec 0c             	sub    $0xc,%esp
f01059f5:	68 98 1b 13 f0       	push   $0xf0131b98
f01059fa:	e8 32 b4 ff ff       	call   f0100e31 <cprintf>
f01059ff:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105a02:	83 ec 0c             	sub    $0xc,%esp
f0105a05:	68 b4 1b 13 f0       	push   $0xf0131bb4
f0105a0a:	e8 22 b4 ff ff       	call   f0100e31 <cprintf>
f0105a0f:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105a12:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a19:	e9 c8 00 00 00       	jmp    f0105ae6 <sched_print_all+0x16c>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a21:	c1 e0 04             	shl    $0x4,%eax
f0105a24:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f0105a29:	8b 00                	mov    (%eax),%eax
f0105a2b:	85 c0                	test   %eax,%eax
f0105a2d:	0f 84 8d 00 00 00    	je     f0105ac0 <sched_print_all+0x146>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105a33:	83 ec 08             	sub    $0x8,%esp
f0105a36:	ff 75 f0             	pushl  -0x10(%ebp)
f0105a39:	68 e8 1b 13 f0       	push   $0xf0131be8
f0105a3e:	e8 ee b3 ff ff       	call   f0100e31 <cprintf>
f0105a43:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105a46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a49:	c1 e0 04             	shl    $0x4,%eax
f0105a4c:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f0105a51:	8b 00                	mov    (%eax),%eax
f0105a53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a56:	eb 2e                	jmp    f0105a86 <sched_print_all+0x10c>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a5b:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a61:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105a64:	83 ec 04             	sub    $0x4,%esp
f0105a67:	52                   	push   %edx
f0105a68:	50                   	push   %eax
f0105a69:	68 8e 1b 13 f0       	push   $0xf0131b8e
f0105a6e:	e8 be b3 ff ff       	call   f0100e31 <cprintf>
f0105a73:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105a76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a79:	c1 e0 04             	shl    $0x4,%eax
f0105a7c:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f0105a81:	8b 00                	mov    (%eax),%eax
f0105a83:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a8a:	74 08                	je     f0105a94 <sched_print_all+0x11a>
f0105a8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a8f:	8b 40 44             	mov    0x44(%eax),%eax
f0105a92:	eb 05                	jmp    f0105a99 <sched_print_all+0x11f>
f0105a94:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a99:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a9c:	c1 e2 04             	shl    $0x4,%edx
f0105a9f:	81 c2 28 2b 25 f0    	add    $0xf0252b28,%edx
f0105aa5:	89 02                	mov    %eax,(%edx)
f0105aa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105aaa:	c1 e0 04             	shl    $0x4,%eax
f0105aad:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f0105ab2:	8b 00                	mov    (%eax),%eax
f0105ab4:	85 c0                	test   %eax,%eax
f0105ab6:	75 a0                	jne    f0105a58 <sched_print_all+0xde>
f0105ab8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105abc:	75 9a                	jne    f0105a58 <sched_print_all+0xde>
f0105abe:	eb 13                	jmp    f0105ad3 <sched_print_all+0x159>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105ac0:	83 ec 08             	sub    $0x8,%esp
f0105ac3:	ff 75 f0             	pushl  -0x10(%ebp)
f0105ac6:	68 10 1c 13 f0       	push   $0xf0131c10
f0105acb:	e8 61 b3 ff ff       	call   f0100e31 <cprintf>
f0105ad0:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105ad3:	83 ec 0c             	sub    $0xc,%esp
f0105ad6:	68 b4 1b 13 f0       	push   $0xf0131bb4
f0105adb:	e8 51 b3 ff ff       	call   f0100e31 <cprintf>
f0105ae0:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ae3:	ff 45 f0             	incl   -0x10(%ebp)
f0105ae6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0105aeb:	0f b6 c0             	movzbl %al,%eax
f0105aee:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105af1:	0f 8f 27 ff ff ff    	jg     f0105a1e <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105af7:	a1 84 8a 2b f0       	mov    0xf02b8a84,%eax
f0105afc:	85 c0                	test   %eax,%eax
f0105afe:	74 69                	je     f0105b69 <sched_print_all+0x1ef>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105b00:	83 ec 0c             	sub    $0xc,%esp
f0105b03:	68 34 1c 13 f0       	push   $0xf0131c34
f0105b08:	e8 24 b3 ff ff       	call   f0100e31 <cprintf>
f0105b0d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b10:	a1 84 8a 2b f0       	mov    0xf02b8a84,%eax
f0105b15:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b18:	eb 26                	jmp    f0105b40 <sched_print_all+0x1c6>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b1d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b23:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b26:	83 ec 04             	sub    $0x4,%esp
f0105b29:	52                   	push   %edx
f0105b2a:	50                   	push   %eax
f0105b2b:	68 8e 1b 13 f0       	push   $0xf0131b8e
f0105b30:	e8 fc b2 ff ff       	call   f0100e31 <cprintf>
f0105b35:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b38:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f0105b3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b44:	74 08                	je     f0105b4e <sched_print_all+0x1d4>
f0105b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b49:	8b 40 44             	mov    0x44(%eax),%eax
f0105b4c:	eb 05                	jmp    f0105b53 <sched_print_all+0x1d9>
f0105b4e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105b53:	a3 8c 8a 2b f0       	mov    %eax,0xf02b8a8c
f0105b58:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f0105b5d:	85 c0                	test   %eax,%eax
f0105b5f:	75 b9                	jne    f0105b1a <sched_print_all+0x1a0>
f0105b61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b65:	75 b3                	jne    f0105b1a <sched_print_all+0x1a0>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0105b67:	eb 10                	jmp    f0105b79 <sched_print_all+0x1ff>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105b69:	83 ec 0c             	sub    $0xc,%esp
f0105b6c:	68 56 1c 13 f0       	push   $0xf0131c56
f0105b71:	e8 bb b2 ff ff       	call   f0100e31 <cprintf>
f0105b76:	83 c4 10             	add    $0x10,%esp
	}
}
f0105b79:	90                   	nop
f0105b7a:	c9                   	leave  
f0105b7b:	c3                   	ret    

f0105b7c <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0105b7c:	55                   	push   %ebp
f0105b7d:	89 e5                	mov    %esp,%ebp
f0105b7f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105b82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105b89:	a1 b8 ae 2b f0       	mov    0xf02baeb8,%eax
f0105b8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b91:	eb 24                	jmp    f0105bb7 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105b93:	83 ec 0c             	sub    $0xc,%esp
f0105b96:	ff 75 f4             	pushl  -0xc(%ebp)
f0105b99:	e8 aa f5 ff ff       	call   f0105148 <sched_remove_new>
f0105b9e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105ba1:	83 ec 0c             	sub    $0xc,%esp
f0105ba4:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ba7:	e8 30 f4 ff ff       	call   f0104fdc <sched_insert_ready0>
f0105bac:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105baf:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f0105bb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105bb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105bbb:	74 08                	je     f0105bc5 <sched_run_all+0x49>
f0105bbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bc0:	8b 40 44             	mov    0x44(%eax),%eax
f0105bc3:	eb 05                	jmp    f0105bca <sched_run_all+0x4e>
f0105bc5:	b8 00 00 00 00       	mov    $0x0,%eax
f0105bca:	a3 c0 ae 2b f0       	mov    %eax,0xf02baec0
f0105bcf:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f0105bd4:	85 c0                	test   %eax,%eax
f0105bd6:	75 bb                	jne    f0105b93 <sched_run_all+0x17>
f0105bd8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105bdc:	75 b5                	jne    f0105b93 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105bde:	a1 d4 ae 2b f0       	mov    0xf02baed4,%eax
f0105be3:	85 c0                	test   %eax,%eax
f0105be5:	75 05                	jne    f0105bec <sched_run_all+0x70>
		fos_scheduler();
f0105be7:	e8 cf 05 00 00       	call   f01061bb <fos_scheduler>
}
f0105bec:	90                   	nop
f0105bed:	c9                   	leave  
f0105bee:	c3                   	ret    

f0105bef <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105bef:	55                   	push   %ebp
f0105bf0:	89 e5                	mov    %esp,%ebp
f0105bf2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105bf5:	a1 b8 ae 2b f0       	mov    0xf02baeb8,%eax
f0105bfa:	85 c0                	test   %eax,%eax
f0105bfc:	0f 84 95 00 00 00    	je     f0105c97 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105c02:	83 ec 0c             	sub    $0xc,%esp
f0105c05:	68 74 1c 13 f0       	push   $0xf0131c74
f0105c0a:	e8 22 b2 ff ff       	call   f0100e31 <cprintf>
f0105c0f:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105c12:	a1 b8 ae 2b f0       	mov    0xf02baeb8,%eax
f0105c17:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c1a:	eb 52                	jmp    f0105c6e <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c1f:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105c22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c25:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105c28:	83 ec 04             	sub    $0x4,%esp
f0105c2b:	52                   	push   %edx
f0105c2c:	50                   	push   %eax
f0105c2d:	68 a0 1c 13 f0       	push   $0xf0131ca0
f0105c32:	e8 fa b1 ff ff       	call   f0100e31 <cprintf>
f0105c37:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0105c3a:	83 ec 0c             	sub    $0xc,%esp
f0105c3d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c40:	e8 03 f5 ff ff       	call   f0105148 <sched_remove_new>
f0105c45:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105c48:	83 ec 0c             	sub    $0xc,%esp
f0105c4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c4e:	e8 f8 3c 00 00       	call   f010994b <env_free>
f0105c53:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105c56:	83 ec 0c             	sub    $0xc,%esp
f0105c59:	68 c1 1a 13 f0       	push   $0xf0131ac1
f0105c5e:	e8 ce b1 ff ff       	call   f0100e31 <cprintf>
f0105c63:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105c66:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f0105c6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c72:	74 08                	je     f0105c7c <sched_kill_all+0x8d>
f0105c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c77:	8b 40 44             	mov    0x44(%eax),%eax
f0105c7a:	eb 05                	jmp    f0105c81 <sched_kill_all+0x92>
f0105c7c:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c81:	a3 c0 ae 2b f0       	mov    %eax,0xf02baec0
f0105c86:	a1 c0 ae 2b f0       	mov    0xf02baec0,%eax
f0105c8b:	85 c0                	test   %eax,%eax
f0105c8d:	75 8d                	jne    f0105c1c <sched_kill_all+0x2d>
f0105c8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c93:	75 87                	jne    f0105c1c <sched_kill_all+0x2d>
f0105c95:	eb 10                	jmp    f0105ca7 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105c97:	83 ec 0c             	sub    $0xc,%esp
f0105c9a:	68 b3 1c 13 f0       	push   $0xf0131cb3
f0105c9f:	e8 8d b1 ff ff       	call   f0100e31 <cprintf>
f0105ca4:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105ca7:	83 ec 0c             	sub    $0xc,%esp
f0105caa:	68 b4 1b 13 f0       	push   $0xf0131bb4
f0105caf:	e8 7d b1 ff ff       	call   f0100e31 <cprintf>
f0105cb4:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105cb7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105cbe:	e9 9d 01 00 00       	jmp    f0105e60 <sched_kill_all+0x271>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105cc6:	c1 e0 04             	shl    $0x4,%eax
f0105cc9:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f0105cce:	8b 00                	mov    (%eax),%eax
f0105cd0:	85 c0                	test   %eax,%eax
f0105cd2:	0f 84 62 01 00 00    	je     f0105e3a <sched_kill_all+0x24b>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0105cd8:	83 ec 08             	sub    $0x8,%esp
f0105cdb:	ff 75 f0             	pushl  -0x10(%ebp)
f0105cde:	68 d0 1c 13 f0       	push   $0xf0131cd0
f0105ce3:	e8 49 b1 ff ff       	call   f0100e31 <cprintf>
f0105ce8:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105ceb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105cee:	c1 e0 04             	shl    $0x4,%eax
f0105cf1:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f0105cf6:	8b 00                	mov    (%eax),%eax
f0105cf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105cfb:	e9 f8 00 00 00       	jmp    f0105df8 <sched_kill_all+0x209>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105d00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d03:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105d06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d09:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105d0c:	83 ec 04             	sub    $0x4,%esp
f0105d0f:	52                   	push   %edx
f0105d10:	50                   	push   %eax
f0105d11:	68 a0 1c 13 f0       	push   $0xf0131ca0
f0105d16:	e8 16 b1 ff ff       	call   f0100e31 <cprintf>
f0105d1b:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105d1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d22:	75 17                	jne    f0105d3b <sched_kill_all+0x14c>
f0105d24:	83 ec 04             	sub    $0x4,%esp
f0105d27:	68 7b 1a 13 f0       	push   $0xf0131a7b
f0105d2c:	68 e5 01 00 00       	push   $0x1e5
f0105d31:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0105d36:	e8 75 a4 ff ff       	call   f01001b0 <_panic>
f0105d3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d3e:	8b 40 44             	mov    0x44(%eax),%eax
f0105d41:	85 c0                	test   %eax,%eax
f0105d43:	74 11                	je     f0105d56 <sched_kill_all+0x167>
f0105d45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d48:	8b 40 44             	mov    0x44(%eax),%eax
f0105d4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105d4e:	8b 52 48             	mov    0x48(%edx),%edx
f0105d51:	89 50 48             	mov    %edx,0x48(%eax)
f0105d54:	eb 14                	jmp    f0105d6a <sched_kill_all+0x17b>
f0105d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d59:	8b 40 48             	mov    0x48(%eax),%eax
f0105d5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105d5f:	c1 e2 04             	shl    $0x4,%edx
f0105d62:	81 c2 24 2b 25 f0    	add    $0xf0252b24,%edx
f0105d68:	89 02                	mov    %eax,(%edx)
f0105d6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d6d:	8b 40 48             	mov    0x48(%eax),%eax
f0105d70:	85 c0                	test   %eax,%eax
f0105d72:	74 11                	je     f0105d85 <sched_kill_all+0x196>
f0105d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d77:	8b 40 48             	mov    0x48(%eax),%eax
f0105d7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105d7d:	8b 52 44             	mov    0x44(%edx),%edx
f0105d80:	89 50 44             	mov    %edx,0x44(%eax)
f0105d83:	eb 14                	jmp    f0105d99 <sched_kill_all+0x1aa>
f0105d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d88:	8b 40 44             	mov    0x44(%eax),%eax
f0105d8b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105d8e:	c1 e2 04             	shl    $0x4,%edx
f0105d91:	81 c2 20 2b 25 f0    	add    $0xf0252b20,%edx
f0105d97:	89 02                	mov    %eax,(%edx)
f0105d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d9c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105da6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105dad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105db0:	c1 e0 04             	shl    $0x4,%eax
f0105db3:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f0105db8:	8b 00                	mov    (%eax),%eax
f0105dba:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105dbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105dc0:	c1 e0 04             	shl    $0x4,%eax
f0105dc3:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f0105dc8:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0105dca:	83 ec 0c             	sub    $0xc,%esp
f0105dcd:	ff 75 f4             	pushl  -0xc(%ebp)
f0105dd0:	e8 76 3b 00 00       	call   f010994b <env_free>
f0105dd5:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105dd8:	83 ec 0c             	sub    $0xc,%esp
f0105ddb:	68 c1 1a 13 f0       	push   $0xf0131ac1
f0105de0:	e8 4c b0 ff ff       	call   f0100e31 <cprintf>
f0105de5:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105de8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105deb:	c1 e0 04             	shl    $0x4,%eax
f0105dee:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f0105df3:	8b 00                	mov    (%eax),%eax
f0105df5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105df8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105dfc:	74 08                	je     f0105e06 <sched_kill_all+0x217>
f0105dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e01:	8b 40 44             	mov    0x44(%eax),%eax
f0105e04:	eb 05                	jmp    f0105e0b <sched_kill_all+0x21c>
f0105e06:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e0b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e0e:	c1 e2 04             	shl    $0x4,%edx
f0105e11:	81 c2 28 2b 25 f0    	add    $0xf0252b28,%edx
f0105e17:	89 02                	mov    %eax,(%edx)
f0105e19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e1c:	c1 e0 04             	shl    $0x4,%eax
f0105e1f:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f0105e24:	8b 00                	mov    (%eax),%eax
f0105e26:	85 c0                	test   %eax,%eax
f0105e28:	0f 85 d2 fe ff ff    	jne    f0105d00 <sched_kill_all+0x111>
f0105e2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e32:	0f 85 c8 fe ff ff    	jne    f0105d00 <sched_kill_all+0x111>
f0105e38:	eb 13                	jmp    f0105e4d <sched_kill_all+0x25e>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105e3a:	83 ec 08             	sub    $0x8,%esp
f0105e3d:	ff 75 f0             	pushl  -0x10(%ebp)
f0105e40:	68 10 1c 13 f0       	push   $0xf0131c10
f0105e45:	e8 e7 af ff ff       	call   f0100e31 <cprintf>
f0105e4a:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105e4d:	83 ec 0c             	sub    $0xc,%esp
f0105e50:	68 b4 1b 13 f0       	push   $0xf0131bb4
f0105e55:	e8 d7 af ff ff       	call   f0100e31 <cprintf>
f0105e5a:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105e5d:	ff 45 f0             	incl   -0x10(%ebp)
f0105e60:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0105e65:	0f b6 c0             	movzbl %al,%eax
f0105e68:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105e6b:	0f 8f 52 fe ff ff    	jg     f0105cc3 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105e71:	a1 84 8a 2b f0       	mov    0xf02b8a84,%eax
f0105e76:	85 c0                	test   %eax,%eax
f0105e78:	0f 84 95 00 00 00    	je     f0105f13 <sched_kill_all+0x324>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105e7e:	83 ec 0c             	sub    $0xc,%esp
f0105e81:	68 04 1d 13 f0       	push   $0xf0131d04
f0105e86:	e8 a6 af ff ff       	call   f0100e31 <cprintf>
f0105e8b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105e8e:	a1 84 8a 2b f0       	mov    0xf02b8a84,%eax
f0105e93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e96:	eb 52                	jmp    f0105eea <sched_kill_all+0x2fb>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e9b:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ea1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105ea4:	83 ec 04             	sub    $0x4,%esp
f0105ea7:	52                   	push   %edx
f0105ea8:	50                   	push   %eax
f0105ea9:	68 a0 1c 13 f0       	push   $0xf0131ca0
f0105eae:	e8 7e af ff ff       	call   f0100e31 <cprintf>
f0105eb3:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105eb6:	83 ec 0c             	sub    $0xc,%esp
f0105eb9:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ebc:	e8 6f f3 ff ff       	call   f0105230 <sched_remove_exit>
f0105ec1:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105ec4:	83 ec 0c             	sub    $0xc,%esp
f0105ec7:	ff 75 f4             	pushl  -0xc(%ebp)
f0105eca:	e8 7c 3a 00 00       	call   f010994b <env_free>
f0105ecf:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105ed2:	83 ec 0c             	sub    $0xc,%esp
f0105ed5:	68 c1 1a 13 f0       	push   $0xf0131ac1
f0105eda:	e8 52 af ff ff       	call   f0100e31 <cprintf>
f0105edf:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105ee2:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f0105ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105eea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105eee:	74 08                	je     f0105ef8 <sched_kill_all+0x309>
f0105ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ef3:	8b 40 44             	mov    0x44(%eax),%eax
f0105ef6:	eb 05                	jmp    f0105efd <sched_kill_all+0x30e>
f0105ef8:	b8 00 00 00 00       	mov    $0x0,%eax
f0105efd:	a3 8c 8a 2b f0       	mov    %eax,0xf02b8a8c
f0105f02:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f0105f07:	85 c0                	test   %eax,%eax
f0105f09:	75 8d                	jne    f0105e98 <sched_kill_all+0x2a9>
f0105f0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f0f:	75 87                	jne    f0105e98 <sched_kill_all+0x2a9>
f0105f11:	eb 10                	jmp    f0105f23 <sched_kill_all+0x334>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105f13:	83 ec 0c             	sub    $0xc,%esp
f0105f16:	68 56 1c 13 f0       	push   $0xf0131c56
f0105f1b:	e8 11 af ff ff       	call   f0100e31 <cprintf>
f0105f20:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105f23:	c7 05 34 22 25 f0 00 	movl   $0x0,0xf0252234
f0105f2a:	00 00 00 
	fos_scheduler();
f0105f2d:	e8 89 02 00 00       	call   f01061bb <fos_scheduler>

f0105f32 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f0105f32:	55                   	push   %ebp
f0105f33:	89 e5                	mov    %esp,%ebp
f0105f35:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105f38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105f3f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105f46:	e9 3e 01 00 00       	jmp    f0106089 <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105f4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f4e:	c1 e0 04             	shl    $0x4,%eax
f0105f51:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f0105f56:	8b 00                	mov    (%eax),%eax
f0105f58:	85 c0                	test   %eax,%eax
f0105f5a:	0f 84 26 01 00 00    	je     f0106086 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105f60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105f67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f6a:	c1 e0 04             	shl    $0x4,%eax
f0105f6d:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f0105f72:	8b 00                	mov    (%eax),%eax
f0105f74:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f77:	e9 ca 00 00 00       	jmp    f0106046 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105f7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f80:	75 17                	jne    f0105f99 <sched_exit_all_ready_envs+0x67>
f0105f82:	83 ec 04             	sub    $0x4,%esp
f0105f85:	68 7b 1a 13 f0       	push   $0xf0131a7b
f0105f8a:	68 14 02 00 00       	push   $0x214
f0105f8f:	68 3f 1a 13 f0       	push   $0xf0131a3f
f0105f94:	e8 17 a2 ff ff       	call   f01001b0 <_panic>
f0105f99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f9c:	8b 40 44             	mov    0x44(%eax),%eax
f0105f9f:	85 c0                	test   %eax,%eax
f0105fa1:	74 11                	je     f0105fb4 <sched_exit_all_ready_envs+0x82>
f0105fa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fa6:	8b 40 44             	mov    0x44(%eax),%eax
f0105fa9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105fac:	8b 52 48             	mov    0x48(%edx),%edx
f0105faf:	89 50 48             	mov    %edx,0x48(%eax)
f0105fb2:	eb 14                	jmp    f0105fc8 <sched_exit_all_ready_envs+0x96>
f0105fb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fb7:	8b 40 48             	mov    0x48(%eax),%eax
f0105fba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105fbd:	c1 e2 04             	shl    $0x4,%edx
f0105fc0:	81 c2 24 2b 25 f0    	add    $0xf0252b24,%edx
f0105fc6:	89 02                	mov    %eax,(%edx)
f0105fc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fcb:	8b 40 48             	mov    0x48(%eax),%eax
f0105fce:	85 c0                	test   %eax,%eax
f0105fd0:	74 11                	je     f0105fe3 <sched_exit_all_ready_envs+0xb1>
f0105fd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fd5:	8b 40 48             	mov    0x48(%eax),%eax
f0105fd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105fdb:	8b 52 44             	mov    0x44(%edx),%edx
f0105fde:	89 50 44             	mov    %edx,0x44(%eax)
f0105fe1:	eb 14                	jmp    f0105ff7 <sched_exit_all_ready_envs+0xc5>
f0105fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe6:	8b 40 44             	mov    0x44(%eax),%eax
f0105fe9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105fec:	c1 e2 04             	shl    $0x4,%edx
f0105fef:	81 c2 20 2b 25 f0    	add    $0xf0252b20,%edx
f0105ff5:	89 02                	mov    %eax,(%edx)
f0105ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ffa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0106001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106004:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010600b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010600e:	c1 e0 04             	shl    $0x4,%eax
f0106011:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f0106016:	8b 00                	mov    (%eax),%eax
f0106018:	8d 50 ff             	lea    -0x1(%eax),%edx
f010601b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010601e:	c1 e0 04             	shl    $0x4,%eax
f0106021:	05 2c 2b 25 f0       	add    $0xf0252b2c,%eax
f0106026:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0106028:	83 ec 0c             	sub    $0xc,%esp
f010602b:	ff 75 f4             	pushl  -0xc(%ebp)
f010602e:	e8 ba f1 ff ff       	call   f01051ed <sched_insert_exit>
f0106033:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0106036:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106039:	c1 e0 04             	shl    $0x4,%eax
f010603c:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f0106041:	8b 00                	mov    (%eax),%eax
f0106043:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106046:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010604a:	74 08                	je     f0106054 <sched_exit_all_ready_envs+0x122>
f010604c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010604f:	8b 40 44             	mov    0x44(%eax),%eax
f0106052:	eb 05                	jmp    f0106059 <sched_exit_all_ready_envs+0x127>
f0106054:	b8 00 00 00 00       	mov    $0x0,%eax
f0106059:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010605c:	c1 e2 04             	shl    $0x4,%edx
f010605f:	81 c2 28 2b 25 f0    	add    $0xf0252b28,%edx
f0106065:	89 02                	mov    %eax,(%edx)
f0106067:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010606a:	c1 e0 04             	shl    $0x4,%eax
f010606d:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f0106072:	8b 00                	mov    (%eax),%eax
f0106074:	85 c0                	test   %eax,%eax
f0106076:	0f 85 00 ff ff ff    	jne    f0105f7c <sched_exit_all_ready_envs+0x4a>
f010607c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106080:	0f 85 f6 fe ff ff    	jne    f0105f7c <sched_exit_all_ready_envs+0x4a>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0106086:	ff 45 f0             	incl   -0x10(%ebp)
f0106089:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f010608e:	0f b6 c0             	movzbl %al,%eax
f0106091:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0106094:	0f 8f b1 fe ff ff    	jg     f0105f4b <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010609a:	90                   	nop
f010609b:	c9                   	leave  
f010609c:	c3                   	ret    

f010609d <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f010609d:	55                   	push   %ebp
f010609e:	89 e5                	mov    %esp,%ebp
	return ticks;
f01060a0:	a1 e0 ae 2b f0       	mov    0xf02baee0,%eax
f01060a5:	8b 15 e4 ae 2b f0    	mov    0xf02baee4,%edx
}
f01060ab:	5d                   	pop    %ebp
f01060ac:	c3                   	ret    

f01060ad <env_get_nice>:
int env_get_nice(struct Env* e)
{
f01060ad:	55                   	push   %ebp
f01060ae:	89 e5                	mov    %esp,%ebp
f01060b0:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01060b3:	83 ec 04             	sub    $0x4,%esp
f01060b6:	68 30 1d 13 f0       	push   $0xf0131d30
f01060bb:	68 26 02 00 00       	push   $0x226
f01060c0:	68 3f 1a 13 f0       	push   $0xf0131a3f
f01060c5:	e8 e6 a0 ff ff       	call   f01001b0 <_panic>

f01060ca <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f01060ca:	55                   	push   %ebp
f01060cb:	89 e5                	mov    %esp,%ebp
f01060cd:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01060d0:	83 ec 04             	sub    $0x4,%esp
f01060d3:	68 30 1d 13 f0       	push   $0xf0131d30
f01060d8:	68 2e 02 00 00       	push   $0x22e
f01060dd:	68 3f 1a 13 f0       	push   $0xf0131a3f
f01060e2:	e8 c9 a0 ff ff       	call   f01001b0 <_panic>

f01060e7 <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f01060e7:	55                   	push   %ebp
f01060e8:	89 e5                	mov    %esp,%ebp
f01060ea:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01060ed:	83 ec 04             	sub    $0x4,%esp
f01060f0:	68 30 1d 13 f0       	push   $0xf0131d30
f01060f5:	68 35 02 00 00       	push   $0x235
f01060fa:	68 3f 1a 13 f0       	push   $0xf0131a3f
f01060ff:	e8 ac a0 ff ff       	call   f01001b0 <_panic>

f0106104 <get_load_average>:
	return 0;
}
int get_load_average()
{
f0106104:	55                   	push   %ebp
f0106105:	89 e5                	mov    %esp,%ebp
f0106107:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010610a:	83 ec 04             	sub    $0x4,%esp
f010610d:	68 30 1d 13 f0       	push   $0xf0131d30
f0106112:	68 3d 02 00 00       	push   $0x23d
f0106117:	68 3f 1a 13 f0       	push   $0xf0131a3f
f010611c:	e8 8f a0 ff ff       	call   f01001b0 <_panic>

f0106121 <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0106121:	55                   	push   %ebp
f0106122:	89 e5                	mov    %esp,%ebp
f0106124:	a1 c8 ae 2b f0       	mov    0xf02baec8,%eax
f0106129:	85 c0                	test   %eax,%eax
f010612b:	75 07                	jne    f0106134 <isSchedMethodRR+0x13>
f010612d:	b8 01 00 00 00       	mov    $0x1,%eax
f0106132:	eb 05                	jmp    f0106139 <isSchedMethodRR+0x18>
f0106134:	b8 00 00 00 00       	mov    $0x0,%eax
f0106139:	5d                   	pop    %ebp
f010613a:	c3                   	ret    

f010613b <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010613b:	55                   	push   %ebp
f010613c:	89 e5                	mov    %esp,%ebp
f010613e:	a1 c8 ae 2b f0       	mov    0xf02baec8,%eax
f0106143:	83 f8 01             	cmp    $0x1,%eax
f0106146:	75 07                	jne    f010614f <isSchedMethodMLFQ+0x14>
f0106148:	b8 01 00 00 00       	mov    $0x1,%eax
f010614d:	eb 05                	jmp    f0106154 <isSchedMethodMLFQ+0x19>
f010614f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106154:	5d                   	pop    %ebp
f0106155:	c3                   	ret    

f0106156 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f0106156:	55                   	push   %ebp
f0106157:	89 e5                	mov    %esp,%ebp
f0106159:	a1 c8 ae 2b f0       	mov    0xf02baec8,%eax
f010615e:	83 f8 02             	cmp    $0x2,%eax
f0106161:	75 07                	jne    f010616a <isSchedMethodBSD+0x14>
f0106163:	b8 01 00 00 00       	mov    $0x1,%eax
f0106168:	eb 05                	jmp    f010616f <isSchedMethodBSD+0x19>
f010616a:	b8 00 00 00 00       	mov    $0x0,%eax
f010616f:	5d                   	pop    %ebp
f0106170:	c3                   	ret    

f0106171 <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f0106171:	55                   	push   %ebp
f0106172:	89 e5                	mov    %esp,%ebp
f0106174:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0106177:	c7 05 94 8a 2b f0 00 	movl   $0x0,0xf02b8a94
f010617e:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f0106181:	83 ec 0c             	sub    $0xc,%esp
f0106184:	6a 0a                	push   $0xa
f0106186:	e8 2b 01 00 00       	call   f01062b6 <sched_init_RR>
f010618b:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f010618e:	83 ec 0c             	sub    $0xc,%esp
f0106191:	68 b8 ae 2b f0       	push   $0xf02baeb8
f0106196:	e8 8b eb ff ff       	call   f0104d26 <init_queue>
f010619b:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f010619e:	83 ec 0c             	sub    $0xc,%esp
f01061a1:	68 84 8a 2b f0       	push   $0xf02b8a84
f01061a6:	e8 7b eb ff ff       	call   f0104d26 <init_queue>
f01061ab:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f01061ae:	c7 05 d4 ae 2b f0 00 	movl   $0x0,0xf02baed4
f01061b5:	00 00 00 
}
f01061b8:	90                   	nop
f01061b9:	c9                   	leave  
f01061ba:	c3                   	ret    

f01061bb <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f01061bb:	55                   	push   %ebp
f01061bc:	89 e5                	mov    %esp,%ebp
f01061be:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f01061c1:	e8 c0 7e 02 00       	call   f012e086 <chk1>
	scheduler_status = SCH_STARTED;
f01061c6:	c7 05 d4 ae 2b f0 01 	movl   $0x1,0xf02baed4
f01061cd:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f01061d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f01061d7:	a1 c8 ae 2b f0       	mov    0xf02baec8,%eax
f01061dc:	85 c0                	test   %eax,%eax
f01061de:	75 48                	jne    f0106228 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f01061e0:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f01061e5:	85 c0                	test   %eax,%eax
f01061e7:	74 16                	je     f01061ff <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f01061e9:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f01061ee:	83 ec 08             	sub    $0x8,%esp
f01061f1:	50                   	push   %eax
f01061f2:	68 20 2b 25 f0       	push   $0xf0252b20
f01061f7:	e8 6b eb ff ff       	call   f0104d67 <enqueue>
f01061fc:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f01061ff:	83 ec 0c             	sub    $0xc,%esp
f0106202:	68 20 2b 25 f0       	push   $0xf0252b20
f0106207:	e8 ec eb ff ff       	call   f0104df8 <dequeue>
f010620c:	83 c4 10             	add    $0x10,%esp
f010620f:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0106212:	a0 a8 ae 2b f0       	mov    0xf02baea8,%al
f0106217:	0f b6 c0             	movzbl %al,%eax
f010621a:	83 ec 0c             	sub    $0xc,%esp
f010621d:	50                   	push   %eax
f010621e:	e8 31 e9 ff ff       	call   f0104b54 <kclock_set_quantum>
f0106223:	83 c4 10             	add    $0x10,%esp
f0106226:	eb 26                	jmp    f010624e <fos_scheduler+0x93>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0106228:	a1 c8 ae 2b f0       	mov    0xf02baec8,%eax
f010622d:	83 f8 01             	cmp    $0x1,%eax
f0106230:	75 0a                	jne    f010623c <fos_scheduler+0x81>
	{
		next_env = fos_scheduler_MLFQ();
f0106232:	e8 f9 00 00 00       	call   f0106330 <fos_scheduler_MLFQ>
f0106237:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010623a:	eb 12                	jmp    f010624e <fos_scheduler+0x93>
	}
	else if (scheduler_method == SCH_BSD)
f010623c:	a1 c8 ae 2b f0       	mov    0xf02baec8,%eax
f0106241:	83 f8 02             	cmp    $0x2,%eax
f0106244:	75 08                	jne    f010624e <fos_scheduler+0x93>
	{
		next_env = fos_scheduler_BSD();
f0106246:	e8 02 01 00 00       	call   f010634d <fos_scheduler_BSD>
f010624b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010624e:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0106253:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0106256:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106259:	a3 34 22 25 f0       	mov    %eax,0xf0252234
	chk2(next_env) ;
f010625e:	83 ec 0c             	sub    $0xc,%esp
f0106261:	ff 75 f4             	pushl  -0xc(%ebp)
f0106264:	e8 5a 7e 02 00       	call   f012e0c3 <chk2>
f0106269:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f010626c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010626f:	a3 34 22 25 f0       	mov    %eax,0xf0252234

	//sched_print_all();

	if(next_env != NULL)
f0106274:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106278:	74 0b                	je     f0106285 <fos_scheduler+0xca>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f010627a:	83 ec 0c             	sub    $0xc,%esp
f010627d:	ff 75 f4             	pushl  -0xc(%ebp)
f0106280:	e8 69 36 00 00       	call   f01098ee <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0106285:	c7 05 34 22 25 f0 00 	movl   $0x0,0xf0252234
f010628c:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010628f:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f0106294:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106297:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010629a:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f010629d:	c7 05 d4 ae 2b f0 00 	movl   $0x0,0xf02baed4
f01062a4:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01062a7:	83 ec 0c             	sub    $0xc,%esp
f01062aa:	6a 00                	push   $0x0
f01062ac:	e8 9f b8 ff ff       	call   f0101b50 <run_command_prompt>
f01062b1:	83 c4 10             	add    $0x10,%esp
f01062b4:	eb f1                	jmp    f01062a7 <fos_scheduler+0xec>

f01062b6 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f01062b6:	55                   	push   %ebp
f01062b7:	89 e5                	mov    %esp,%ebp
f01062b9:	83 ec 18             	sub    $0x18,%esp
f01062bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01062bf:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01062c2:	c6 05 f4 ae 2b f0 01 	movb   $0x1,0xf02baef4
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f01062c9:	8a 45 f4             	mov    -0xc(%ebp),%al
f01062cc:	a2 a8 ae 2b f0       	mov    %al,0xf02baea8
	kclock_set_quantum(quantums[0]);
f01062d1:	a0 a8 ae 2b f0       	mov    0xf02baea8,%al
f01062d6:	0f b6 c0             	movzbl %al,%eax
f01062d9:	83 ec 0c             	sub    $0xc,%esp
f01062dc:	50                   	push   %eax
f01062dd:	e8 72 e8 ff ff       	call   f0104b54 <kclock_set_quantum>
f01062e2:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f01062e5:	83 ec 0c             	sub    $0xc,%esp
f01062e8:	68 20 2b 25 f0       	push   $0xf0252b20
f01062ed:	e8 34 ea ff ff       	call   f0104d26 <init_queue>
f01062f2:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f01062f5:	c7 05 d4 ae 2b f0 00 	movl   $0x0,0xf02baed4
f01062fc:	00 00 00 
	scheduler_method = SCH_RR;
f01062ff:	c7 05 c8 ae 2b f0 00 	movl   $0x0,0xf02baec8
f0106306:	00 00 00 
	//=========================================
	//=========================================
}
f0106309:	90                   	nop
f010630a:	c9                   	leave  
f010630b:	c3                   	ret    

f010630c <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010630c:	55                   	push   %ebp
f010630d:	89 e5                	mov    %esp,%ebp
f010630f:	83 ec 04             	sub    $0x4,%esp
f0106312:	8b 45 08             	mov    0x8(%ebp),%eax
f0106315:	88 45 fc             	mov    %al,-0x4(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_MLFQ;
	//=========================================
	//=========================================
#endif
}
f0106318:	90                   	nop
f0106319:	c9                   	leave  
f010631a:	c3                   	ret    

f010631b <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f010631b:	55                   	push   %ebp
f010631c:	89 e5                	mov    %esp,%ebp
f010631e:	83 ec 08             	sub    $0x8,%esp
f0106321:	8b 55 08             	mov    0x8(%ebp),%edx
f0106324:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106327:	88 55 fc             	mov    %dl,-0x4(%ebp)
f010632a:	88 45 f8             	mov    %al,-0x8(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_BSD;
	//=========================================
	//=========================================
#endif
}
f010632d:	90                   	nop
f010632e:	c9                   	leave  
f010632f:	c3                   	ret    

f0106330 <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f0106330:	55                   	push   %ebp
f0106331:	89 e5                	mov    %esp,%ebp
f0106333:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0106336:	83 ec 04             	sub    $0x4,%esp
f0106339:	68 44 1d 13 f0       	push   $0xf0131d44
f010633e:	68 b9 00 00 00       	push   $0xb9
f0106343:	68 54 1d 13 f0       	push   $0xf0131d54
f0106348:	e8 63 9e ff ff       	call   f01001b0 <_panic>

f010634d <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f010634d:	55                   	push   %ebp
f010634e:	89 e5                	mov    %esp,%ebp
f0106350:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106353:	83 ec 04             	sub    $0x4,%esp
f0106356:	68 65 1d 13 f0       	push   $0xf0131d65
f010635b:	68 c5 00 00 00       	push   $0xc5
f0106360:	68 54 1d 13 f0       	push   $0xf0131d54
f0106365:	e8 46 9e ff ff       	call   f01001b0 <_panic>

f010636a <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f010636a:	55                   	push   %ebp
f010636b:	89 e5                	mov    %esp,%ebp
f010636d:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f0106370:	a1 e0 ae 2b f0       	mov    0xf02baee0,%eax
f0106375:	8b 15 e4 ae 2b f0    	mov    0xf02baee4,%edx
f010637b:	83 c0 01             	add    $0x1,%eax
f010637e:	83 d2 00             	adc    $0x0,%edx
f0106381:	a3 e0 ae 2b f0       	mov    %eax,0xf02baee0
f0106386:	89 15 e4 ae 2b f0    	mov    %edx,0xf02baee4
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010638c:	83 ec 0c             	sub    $0xc,%esp
f010638f:	6a 01                	push   $0x1
f0106391:	e8 5c 73 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f0106396:	83 c4 10             	add    $0x10,%esp
f0106399:	85 c0                	test   %eax,%eax
f010639b:	74 05                	je     f01063a2 <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f010639d:	e8 05 00 00 00       	call   f01063a7 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01063a2:	e8 14 fe ff ff       	call   f01061bb <fos_scheduler>

f01063a7 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f01063a7:	55                   	push   %ebp
f01063a8:	89 e5                	mov    %esp,%ebp
f01063aa:	53                   	push   %ebx
f01063ab:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f01063ae:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f01063b3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f01063b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01063ba:	0f 84 a9 01 00 00    	je     f0106569 <update_WS_time_stamps+0x1c2>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01063c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01063c7:	e9 9f 00 00 00       	jmp    f010646b <update_WS_time_stamps+0xc4>
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f01063cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01063cf:	89 d0                	mov    %edx,%eax
f01063d1:	01 c0                	add    %eax,%eax
f01063d3:	01 d0                	add    %edx,%eax
f01063d5:	c1 e0 03             	shl    $0x3,%eax
f01063d8:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f01063de:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e1:	01 d0                	add    %edx,%eax
f01063e3:	83 c0 08             	add    $0x8,%eax
f01063e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if( wse->empty == 1)
f01063e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01063ec:	8a 40 04             	mov    0x4(%eax),%al
f01063ef:	3c 01                	cmp    $0x1,%al
f01063f1:	74 74                	je     f0106467 <update_WS_time_stamps+0xc0>
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f01063f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01063f6:	8b 00                	mov    (%eax),%eax
f01063f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f01063fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063fe:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106404:	83 ec 08             	sub    $0x8,%esp
f0106407:	ff 75 e4             	pushl  -0x1c(%ebp)
f010640a:	50                   	push   %eax
f010640b:	e8 75 1c 00 00       	call   f0108085 <pt_get_page_permissions>
f0106410:	83 c4 10             	add    $0x10,%esp
f0106413:	89 45 e0             	mov    %eax,-0x20(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f0106416:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106419:	8b 40 08             	mov    0x8(%eax),%eax
f010641c:	89 45 dc             	mov    %eax,-0x24(%ebp)

				if (perm & PERM_USED)
f010641f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106422:	83 e0 20             	and    $0x20,%eax
f0106425:	85 c0                	test   %eax,%eax
f0106427:	74 2e                	je     f0106457 <update_WS_time_stamps+0xb0>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106429:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010642c:	c1 e8 02             	shr    $0x2,%eax
f010642f:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106434:	89 c2                	mov    %eax,%edx
f0106436:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106439:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010643c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010643f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106445:	6a 20                	push   $0x20
f0106447:	6a 00                	push   $0x0
f0106449:	ff 75 e4             	pushl  -0x1c(%ebp)
f010644c:	50                   	push   %eax
f010644d:	e8 6f 1b 00 00       	call   f0107fc1 <pt_set_page_permissions>
f0106452:	83 c4 10             	add    $0x10,%esp
f0106455:	eb 11                	jmp    f0106468 <update_WS_time_stamps+0xc1>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f0106457:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010645a:	c1 e8 02             	shr    $0x2,%eax
f010645d:	89 c2                	mov    %eax,%edx
f010645f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106462:	89 50 08             	mov    %edx,0x8(%eax)
f0106465:	eb 01                	jmp    f0106468 <update_WS_time_stamps+0xc1>
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
f0106467:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106468:	ff 45 f4             	incl   -0xc(%ebp)
f010646b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010646e:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0106474:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106477:	39 c2                	cmp    %eax,%edx
f0106479:	0f 87 4d ff ff ff    	ja     f01063cc <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010647f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106486:	e9 d4 00 00 00       	jmp    f010655f <update_WS_time_stamps+0x1b8>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f010648b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010648e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106491:	89 d0                	mov    %edx,%eax
f0106493:	01 c0                	add    %eax,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 03             	shl    $0x3,%eax
f010649a:	01 c8                	add    %ecx,%eax
f010649c:	05 84 d5 01 00       	add    $0x1d584,%eax
f01064a1:	8a 00                	mov    (%eax),%al
f01064a3:	3c 01                	cmp    $0x1,%al
f01064a5:	0f 84 b1 00 00 00    	je     f010655c <update_WS_time_stamps+0x1b5>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01064ab:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01064ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064b1:	89 d0                	mov    %edx,%eax
f01064b3:	01 c0                	add    %eax,%eax
f01064b5:	01 d0                	add    %edx,%eax
f01064b7:	c1 e0 03             	shl    $0x3,%eax
f01064ba:	01 c8                	add    %ecx,%eax
f01064bc:	05 80 d5 01 00       	add    $0x1d580,%eax
f01064c1:	8b 00                	mov    (%eax),%eax
f01064c3:	89 45 d8             	mov    %eax,-0x28(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f01064c6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01064c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064cc:	89 d0                	mov    %edx,%eax
f01064ce:	01 c0                	add    %eax,%eax
f01064d0:	01 d0                	add    %edx,%eax
f01064d2:	c1 e0 03             	shl    $0x3,%eax
f01064d5:	01 c8                	add    %ecx,%eax
f01064d7:	05 88 d5 01 00       	add    $0x1d588,%eax
f01064dc:	8b 00                	mov    (%eax),%eax
f01064de:	89 45 d4             	mov    %eax,-0x2c(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f01064e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064e4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01064ea:	83 ec 08             	sub    $0x8,%esp
f01064ed:	ff 75 d8             	pushl  -0x28(%ebp)
f01064f0:	50                   	push   %eax
f01064f1:	e8 6b 1c 00 00       	call   f0108161 <pd_is_table_used>
f01064f6:	83 c4 10             	add    $0x10,%esp
f01064f9:	85 c0                	test   %eax,%eax
f01064fb:	74 3f                	je     f010653c <update_WS_time_stamps+0x195>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f01064fd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106500:	c1 e8 02             	shr    $0x2,%eax
f0106503:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106508:	89 c1                	mov    %eax,%ecx
f010650a:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010650d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106510:	89 d0                	mov    %edx,%eax
f0106512:	01 c0                	add    %eax,%eax
f0106514:	01 d0                	add    %edx,%eax
f0106516:	c1 e0 03             	shl    $0x3,%eax
f0106519:	01 d8                	add    %ebx,%eax
f010651b:	05 88 d5 01 00       	add    $0x1d588,%eax
f0106520:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106522:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106525:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010652b:	83 ec 08             	sub    $0x8,%esp
f010652e:	ff 75 d8             	pushl  -0x28(%ebp)
f0106531:	50                   	push   %eax
f0106532:	e8 4e 1c 00 00       	call   f0108185 <pd_set_table_unused>
f0106537:	83 c4 10             	add    $0x10,%esp
f010653a:	eb 20                	jmp    f010655c <update_WS_time_stamps+0x1b5>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010653c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010653f:	c1 e8 02             	shr    $0x2,%eax
f0106542:	89 c1                	mov    %eax,%ecx
f0106544:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106547:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010654a:	89 d0                	mov    %edx,%eax
f010654c:	01 c0                	add    %eax,%eax
f010654e:	01 d0                	add    %edx,%eax
f0106550:	c1 e0 03             	shl    $0x3,%eax
f0106553:	01 d8                	add    %ebx,%eax
f0106555:	05 88 d5 01 00       	add    $0x1d588,%eax
f010655a:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010655c:	ff 45 f0             	incl   -0x10(%ebp)
f010655f:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0106563:	0f 8e 22 ff ff ff    	jle    f010648b <update_WS_time_stamps+0xe4>
					}
				}
			}
		}
	}
}
f0106569:	90                   	nop
f010656a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010656d:	c9                   	leave  
f010656e:	c3                   	ret    

f010656f <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f010656f:	55                   	push   %ebp
f0106570:	89 e5                	mov    %esp,%ebp
f0106572:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106575:	c7 05 2c 22 25 f0 01 	movl   $0x1,0xf025222c
f010657c:	00 00 00 
f010657f:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106586:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010658a:	8a 45 b2             	mov    -0x4e(%ebp),%al
f010658d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106590:	ee                   	out    %al,(%dx)
f0106591:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0106598:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f010659c:	8a 45 b3             	mov    -0x4d(%ebp),%al
f010659f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a2:	ee                   	out    %al,(%dx)
f01065a3:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f01065aa:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f01065ae:	8a 45 b4             	mov    -0x4c(%ebp),%al
f01065b1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01065b4:	ee                   	out    %al,(%dx)
f01065b5:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f01065bc:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f01065c0:	8a 45 b5             	mov    -0x4b(%ebp),%al
f01065c3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01065c6:	ee                   	out    %al,(%dx)
f01065c7:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f01065ce:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f01065d2:	8a 45 b6             	mov    -0x4a(%ebp),%al
f01065d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01065d8:	ee                   	out    %al,(%dx)
f01065d9:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f01065e0:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f01065e4:	8a 45 b7             	mov    -0x49(%ebp),%al
f01065e7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01065ea:	ee                   	out    %al,(%dx)
f01065eb:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f01065f2:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f01065f6:	8a 45 b8             	mov    -0x48(%ebp),%al
f01065f9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01065fc:	ee                   	out    %al,(%dx)
f01065fd:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106604:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106608:	8a 45 b9             	mov    -0x47(%ebp),%al
f010660b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010660e:	ee                   	out    %al,(%dx)
f010660f:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106616:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f010661a:	8a 45 ba             	mov    -0x46(%ebp),%al
f010661d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0106620:	ee                   	out    %al,(%dx)
f0106621:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106628:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f010662c:	8a 45 bb             	mov    -0x45(%ebp),%al
f010662f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106632:	ee                   	out    %al,(%dx)
f0106633:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f010663a:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f010663e:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106641:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106644:	ee                   	out    %al,(%dx)
f0106645:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f010664c:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0106650:	8a 45 bd             	mov    -0x43(%ebp),%al
f0106653:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0106656:	ee                   	out    %al,(%dx)
f0106657:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f010665e:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0106662:	8a 45 be             	mov    -0x42(%ebp),%al
f0106665:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106668:	ee                   	out    %al,(%dx)
f0106669:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106670:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106674:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106677:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010667a:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f010667b:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f0106681:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106685:	74 15                	je     f010669c <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0106687:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f010668d:	0f b7 c0             	movzwl %ax,%eax
f0106690:	83 ec 0c             	sub    $0xc,%esp
f0106693:	50                   	push   %eax
f0106694:	e8 06 00 00 00       	call   f010669f <irq_setmask_8259A>
f0106699:	83 c4 10             	add    $0x10,%esp
}
f010669c:	90                   	nop
f010669d:	c9                   	leave  
f010669e:	c3                   	ret    

f010669f <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f010669f:	55                   	push   %ebp
f01066a0:	89 e5                	mov    %esp,%ebp
f01066a2:	83 ec 14             	sub    $0x14,%esp
f01066a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01066a8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f01066ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01066af:	66 a3 4c c9 18 f0    	mov    %ax,0xf018c94c
	if (!didinit)
f01066b5:	a1 2c 22 25 f0       	mov    0xf025222c,%eax
f01066ba:	85 c0                	test   %eax,%eax
f01066bc:	74 34                	je     f01066f2 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f01066be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01066c1:	0f b6 c0             	movzbl %al,%eax
f01066c4:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f01066cb:	88 45 f6             	mov    %al,-0xa(%ebp)
f01066ce:	8a 45 f6             	mov    -0xa(%ebp),%al
f01066d1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01066d4:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f01066d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01066d8:	66 c1 e8 08          	shr    $0x8,%ax
f01066dc:	0f b6 c0             	movzbl %al,%eax
f01066df:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f01066e6:	88 45 f7             	mov    %al,-0x9(%ebp)
f01066e9:	8a 45 f7             	mov    -0x9(%ebp),%al
f01066ec:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01066ef:	ee                   	out    %al,(%dx)
f01066f0:	eb 01                	jmp    f01066f3 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f01066f2:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f01066f3:	c9                   	leave  
f01066f4:	c3                   	ret    

f01066f5 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f01066f5:	55                   	push   %ebp
f01066f6:	89 e5                	mov    %esp,%ebp
f01066f8:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f01066fb:	83 ec 08             	sub    $0x8,%esp
f01066fe:	68 00 10 00 00       	push   $0x1000
f0106703:	68 00 10 00 00       	push   $0x1000
f0106708:	e8 0a 02 00 00       	call   f0106917 <boot_allocate_space>
f010670d:	83 c4 10             	add    $0x10,%esp
f0106710:	a3 f0 ae 2b f0       	mov    %eax,0xf02baef0
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106715:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f010671a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010671d:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0106724:	77 14                	ja     f010673a <initialize_kernel_VM+0x45>
f0106726:	ff 75 e8             	pushl  -0x18(%ebp)
f0106729:	68 7c 1d 13 f0       	push   $0xf0131d7c
f010672e:	6a 45                	push   $0x45
f0106730:	68 b0 1d 13 f0       	push   $0xf0131db0
f0106735:	e8 76 9a ff ff       	call   f01001b0 <_panic>
f010673a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010673d:	05 00 00 00 10       	add    $0x10000000,%eax
f0106742:	a3 20 af 2b f0       	mov    %eax,0xf02baf20
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0106747:	c7 45 e4 00 40 18 f0 	movl   $0xf0184000,-0x1c(%ebp)
f010674e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0106755:	77 14                	ja     f010676b <initialize_kernel_VM+0x76>
f0106757:	ff 75 e4             	pushl  -0x1c(%ebp)
f010675a:	68 7c 1d 13 f0       	push   $0xf0131d7c
f010675f:	6a 4d                	push   $0x4d
f0106761:	68 b0 1d 13 f0       	push   $0xf0131db0
f0106766:	e8 45 9a ff ff       	call   f01001b0 <_panic>
f010676b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106774:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0106779:	83 ec 0c             	sub    $0xc,%esp
f010677c:	6a 02                	push   $0x2
f010677e:	52                   	push   %edx
f010677f:	68 00 80 00 00       	push   $0x8000
f0106784:	68 00 80 bf ef       	push   $0xefbf8000
f0106789:	50                   	push   %eax
f010678a:	e8 fc 01 00 00       	call   f010698b <boot_map_range>
f010678f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0106792:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0106799:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01067a0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01067a7:	eb 25                	jmp    f01067ce <initialize_kernel_VM+0xd9>
	{
		++nTables;
f01067a9:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f01067ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01067af:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01067b4:	83 ec 04             	sub    $0x4,%esp
f01067b7:	6a 01                	push   $0x1
f01067b9:	52                   	push   %edx
f01067ba:	50                   	push   %eax
f01067bb:	e8 3f 02 00 00       	call   f01069ff <boot_get_page_table>
f01067c0:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01067c3:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f01067ca:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f01067ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01067d2:	72 d5                	jb     f01067a9 <initialize_kernel_VM+0xb4>
f01067d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01067d8:	77 06                	ja     f01067e0 <initialize_kernel_VM+0xeb>
f01067da:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f01067de:	76 c9                	jbe    f01067a9 <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f01067e0:	8b 15 90 ae 2b f0    	mov    0xf02bae90,%edx
f01067e6:	89 d0                	mov    %edx,%eax
f01067e8:	01 c0                	add    %eax,%eax
f01067ea:	01 d0                	add    %edx,%eax
f01067ec:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01067f3:	01 c8                	add    %ecx,%eax
f01067f5:	01 d0                	add    %edx,%eax
f01067f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f01067fa:	83 ec 08             	sub    $0x8,%esp
f01067fd:	68 00 10 00 00       	push   $0x1000
f0106802:	ff 75 e0             	pushl  -0x20(%ebp)
f0106805:	e8 0d 01 00 00       	call   f0106917 <boot_allocate_space>
f010680a:	83 c4 10             	add    $0x10,%esp
f010680d:	a3 d0 ae 2b f0       	mov    %eax,0xf02baed0
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0106812:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0106819:	83 ec 08             	sub    $0x8,%esp
f010681c:	68 00 10 00 00       	push   $0x1000
f0106821:	ff 75 dc             	pushl  -0x24(%ebp)
f0106824:	e8 ee 00 00 00       	call   f0106917 <boot_allocate_space>
f0106829:	83 c4 10             	add    $0x10,%esp
f010682c:	a3 10 2b 25 f0       	mov    %eax,0xf0252b10
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0106831:	e8 fe 04 00 00       	call   f0106d34 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0106836:	83 ec 0c             	sub    $0xc,%esp
f0106839:	6a 08                	push   $0x8
f010683b:	e8 fb 72 02 00       	call   f012db3b <nearest_pow2_ceil>
f0106840:	83 c4 10             	add    $0x10,%esp
f0106843:	83 ec 04             	sub    $0x4,%esp
f0106846:	50                   	push   %eax
f0106847:	6a 08                	push   $0x8
f0106849:	68 d0 1d 13 f0       	push   $0xf0131dd0
f010684e:	e8 de a5 ff ff       	call   f0100e31 <cprintf>
f0106853:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0106856:	c7 45 d8 00 d5 0e 00 	movl   $0xed500,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f010685d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106860:	83 ec 08             	sub    $0x8,%esp
f0106863:	68 00 10 00 00       	push   $0x1000
f0106868:	50                   	push   %eax
f0106869:	e8 a9 00 00 00       	call   f0106917 <boot_allocate_space>
f010686e:	83 c4 10             	add    $0x10,%esp
f0106871:	a3 30 22 25 f0       	mov    %eax,0xf0252230
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0106876:	a1 30 22 25 f0       	mov    0xf0252230,%eax
f010687b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010687e:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0106885:	77 17                	ja     f010689e <initialize_kernel_VM+0x1a9>
f0106887:	ff 75 d4             	pushl  -0x2c(%ebp)
f010688a:	68 7c 1d 13 f0       	push   $0xf0131d7c
f010688f:	68 96 00 00 00       	push   $0x96
f0106894:	68 b0 1d 13 f0       	push   $0xf0131db0
f0106899:	e8 12 99 ff ff       	call   f01001b0 <_panic>
f010689e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01068a1:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01068a7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01068aa:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01068af:	83 ec 0c             	sub    $0xc,%esp
f01068b2:	6a 04                	push   $0x4
f01068b4:	51                   	push   %ecx
f01068b5:	52                   	push   %edx
f01068b6:	68 00 00 c0 ee       	push   $0xeec00000
f01068bb:	50                   	push   %eax
f01068bc:	e8 ca 00 00 00       	call   f010698b <boot_map_range>
f01068c1:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f01068c4:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01068c9:	05 ec 0e 00 00       	add    $0xeec,%eax
f01068ce:	8b 15 f0 ae 2b f0    	mov    0xf02baef0,%edx
f01068d4:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f01068da:	8b 12                	mov    (%edx),%edx
f01068dc:	83 ca 05             	or     $0x5,%edx
f01068df:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f01068e1:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01068e6:	83 ec 0c             	sub    $0xc,%esp
f01068e9:	6a 02                	push   $0x2
f01068eb:	6a 00                	push   $0x0
f01068ed:	68 ff ff ff 0f       	push   $0xfffffff
f01068f2:	68 00 00 00 f0       	push   $0xf0000000
f01068f7:	50                   	push   %eax
f01068f8:	e8 8e 00 00 00       	call   f010698b <boot_map_range>
f01068fd:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106900:	e8 0d 7a 02 00       	call   f012e312 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106905:	c7 05 80 8a 2b f0 19 	movl   $0x19,0xf02b8a80
f010690c:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010690f:	e8 20 03 00 00       	call   f0106c34 <turn_on_paging>
}
f0106914:	90                   	nop
f0106915:	c9                   	leave  
f0106916:	c3                   	ret    

f0106917 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0106917:	55                   	push   %ebp
f0106918:	89 e5                	mov    %esp,%ebp
f010691a:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010691d:	a1 ec ae 2b f0       	mov    0xf02baeec,%eax
f0106922:	85 c0                	test   %eax,%eax
f0106924:	75 0a                	jne    f0106930 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106926:	c7 05 ec ae 2b f0 3c 	movl   $0xf02dd63c,0xf02baeec
f010692d:	d6 2d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106930:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106933:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106936:	a1 ec ae 2b f0       	mov    0xf02baeec,%eax
f010693b:	89 c2                	mov    %eax,%edx
f010693d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106940:	01 d0                	add    %edx,%eax
f0106942:	48                   	dec    %eax
f0106943:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106946:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106949:	ba 00 00 00 00       	mov    $0x0,%edx
f010694e:	f7 75 f4             	divl   -0xc(%ebp)
f0106951:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106954:	29 d0                	sub    %edx,%eax
f0106956:	a3 ec ae 2b f0       	mov    %eax,0xf02baeec

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f010695b:	a1 ec ae 2b f0       	mov    0xf02baeec,%eax
f0106960:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0106963:	8b 15 ec ae 2b f0    	mov    0xf02baeec,%edx
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	01 d0                	add    %edx,%eax
f010696e:	a3 ec ae 2b f0       	mov    %eax,0xf02baeec

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f0106973:	83 ec 04             	sub    $0x4,%esp
f0106976:	ff 75 08             	pushl  0x8(%ebp)
f0106979:	6a 00                	push   $0x0
f010697b:	ff 75 ec             	pushl  -0x14(%ebp)
f010697e:	e8 1b 86 02 00       	call   f012ef9e <memset>
f0106983:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0106986:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f0106989:	c9                   	leave  
f010698a:	c3                   	ret    

f010698b <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f010698b:	55                   	push   %ebp
f010698c:	89 e5                	mov    %esp,%ebp
f010698e:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106991:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106998:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010699f:	eb 53                	jmp    f01069f4 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01069a1:	83 ec 04             	sub    $0x4,%esp
f01069a4:	6a 01                	push   $0x1
f01069a6:	ff 75 0c             	pushl  0xc(%ebp)
f01069a9:	ff 75 08             	pushl  0x8(%ebp)
f01069ac:	e8 4e 00 00 00       	call   f01069ff <boot_get_page_table>
f01069b1:	83 c4 10             	add    $0x10,%esp
f01069b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01069b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069ba:	c1 e8 0c             	shr    $0xc,%eax
f01069bd:	25 ff 03 00 00       	and    $0x3ff,%eax
f01069c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01069c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01069c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01069cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069d2:	01 c2                	add    %eax,%edx
f01069d4:	8b 45 18             	mov    0x18(%ebp),%eax
f01069d7:	0b 45 14             	or     0x14(%ebp),%eax
f01069da:	83 c8 01             	or     $0x1,%eax
f01069dd:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01069df:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01069e6:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01069ed:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01069f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01069f7:	3b 45 10             	cmp    0x10(%ebp),%eax
f01069fa:	72 a5                	jb     f01069a1 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01069fc:	90                   	nop
f01069fd:	c9                   	leave  
f01069fe:	c3                   	ret    

f01069ff <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01069ff:	55                   	push   %ebp
f0106a00:	89 e5                	mov    %esp,%ebp
f0106a02:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106a05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a08:	c1 e8 16             	shr    $0x16,%eax
f0106a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a11:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a18:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a1b:	01 d0                	add    %edx,%eax
f0106a1d:	8b 00                	mov    (%eax),%eax
f0106a1f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a25:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106a2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a30:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a33:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a36:	c1 e8 0c             	shr    $0xc,%eax
f0106a39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a3c:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0106a41:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106a44:	72 17                	jb     f0106a5d <boot_get_page_table+0x5e>
f0106a46:	ff 75 e8             	pushl  -0x18(%ebp)
f0106a49:	68 f8 1d 13 f0       	push   $0xf0131df8
f0106a4e:	68 18 01 00 00       	push   $0x118
f0106a53:	68 b0 1d 13 f0       	push   $0xf0131db0
f0106a58:	e8 53 97 ff ff       	call   f01001b0 <_panic>
f0106a5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a60:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a65:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106a68:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106a6c:	75 72                	jne    f0106ae0 <boot_get_page_table+0xe1>
	{
		if (create)
f0106a6e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106a72:	74 65                	je     f0106ad9 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106a74:	83 ec 08             	sub    $0x8,%esp
f0106a77:	68 00 10 00 00       	push   $0x1000
f0106a7c:	68 00 10 00 00       	push   $0x1000
f0106a81:	e8 91 fe ff ff       	call   f0106917 <boot_allocate_space>
f0106a86:	83 c4 10             	add    $0x10,%esp
f0106a89:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106a8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106a8f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106a92:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106a99:	77 17                	ja     f0106ab2 <boot_get_page_table+0xb3>
f0106a9b:	ff 75 dc             	pushl  -0x24(%ebp)
f0106a9e:	68 7c 1d 13 f0       	push   $0xf0131d7c
f0106aa3:	68 1e 01 00 00       	push   $0x11e
f0106aa8:	68 b0 1d 13 f0       	push   $0xf0131db0
f0106aad:	e8 fe 96 ff ff       	call   f01001b0 <_panic>
f0106ab2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106ab5:	05 00 00 00 10       	add    $0x10000000,%eax
f0106aba:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ac0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac7:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aca:	01 d0                	add    %edx,%eax
f0106acc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106acf:	83 ca 03             	or     $0x3,%edx
f0106ad2:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106ad4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ad7:	eb 0a                	jmp    f0106ae3 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0106ad9:	b8 00 00 00 00       	mov    $0x0,%eax
f0106ade:	eb 03                	jmp    f0106ae3 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106ae0:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106ae3:	c9                   	leave  
f0106ae4:	c3                   	ret    

f0106ae5 <nvram_read>:


int nvram_read(int r)
{
f0106ae5:	55                   	push   %ebp
f0106ae6:	89 e5                	mov    %esp,%ebp
f0106ae8:	53                   	push   %ebx
f0106ae9:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aef:	83 ec 0c             	sub    $0xc,%esp
f0106af2:	50                   	push   %eax
f0106af3:	e8 6a de ff ff       	call   f0104962 <mc146818_read>
f0106af8:	83 c4 10             	add    $0x10,%esp
f0106afb:	89 c3                	mov    %eax,%ebx
f0106afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b00:	40                   	inc    %eax
f0106b01:	83 ec 0c             	sub    $0xc,%esp
f0106b04:	50                   	push   %eax
f0106b05:	e8 58 de ff ff       	call   f0104962 <mc146818_read>
f0106b0a:	83 c4 10             	add    $0x10,%esp
f0106b0d:	c1 e0 08             	shl    $0x8,%eax
f0106b10:	09 d8                	or     %ebx,%eax
}
f0106b12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106b15:	c9                   	leave  
f0106b16:	c3                   	ret    

f0106b17 <detect_memory>:

void detect_memory()
{
f0106b17:	55                   	push   %ebp
f0106b18:	89 e5                	mov    %esp,%ebp
f0106b1a:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106b1d:	83 ec 0c             	sub    $0xc,%esp
f0106b20:	6a 15                	push   $0x15
f0106b22:	e8 be ff ff ff       	call   f0106ae5 <nvram_read>
f0106b27:	83 c4 10             	add    $0x10,%esp
f0106b2a:	c1 e0 0a             	shl    $0xa,%eax
f0106b2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b33:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b38:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106b3b:	83 ec 0c             	sub    $0xc,%esp
f0106b3e:	6a 17                	push   $0x17
f0106b40:	e8 a0 ff ff ff       	call   f0106ae5 <nvram_read>
f0106b45:	83 c4 10             	add    $0x10,%esp
f0106b48:	c1 e0 0a             	shl    $0xa,%eax
f0106b4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106b4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b51:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b56:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106b59:	83 ec 0c             	sub    $0xc,%esp
f0106b5c:	6a 34                	push   $0x34
f0106b5e:	e8 82 ff ff ff       	call   f0106ae5 <nvram_read>
f0106b63:	83 c4 10             	add    $0x10,%esp
f0106b66:	c1 e0 10             	shl    $0x10,%eax
f0106b69:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106b6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b6f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b74:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106b77:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106b7b:	74 18                	je     f0106b95 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106b7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106b80:	05 00 00 00 01       	add    $0x1000000,%eax
f0106b85:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b8b:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106b90:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b93:	eb 19                	jmp    f0106bae <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106b95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106b99:	74 0d                	je     f0106ba8 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106b9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b9e:	05 00 00 10 00       	add    $0x100000,%eax
f0106ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106ba6:	eb 06                	jmp    f0106bae <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bab:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106bae:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bb8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0106bbb:	76 32                	jbe    f0106bef <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106bbd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106bc0:	c1 e8 0a             	shr    $0xa,%eax
f0106bc3:	89 c2                	mov    %eax,%edx
f0106bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bc8:	c1 e8 0a             	shr    $0xa,%eax
f0106bcb:	83 ec 04             	sub    $0x4,%esp
f0106bce:	52                   	push   %edx
f0106bcf:	50                   	push   %eax
f0106bd0:	68 28 1e 13 f0       	push   $0xf0131e28
f0106bd5:	e8 57 a2 ff ff       	call   f0100e31 <cprintf>
f0106bda:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106bdd:	83 ec 0c             	sub    $0xc,%esp
f0106be0:	68 70 1e 13 f0       	push   $0xf0131e70
f0106be5:	e8 47 a2 ff ff       	call   f0100e31 <cprintf>
f0106bea:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106bed:	eb fe                	jmp    f0106bed <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bf2:	c1 e8 0c             	shr    $0xc,%eax
f0106bf5:	a3 90 ae 2b f0       	mov    %eax,0xf02bae90

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106bfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bfd:	c1 e8 0a             	shr    $0xa,%eax
f0106c00:	83 ec 08             	sub    $0x8,%esp
f0106c03:	50                   	push   %eax
f0106c04:	68 04 1f 13 f0       	push   $0xf0131f04
f0106c09:	e8 23 a2 ff ff       	call   f0100e31 <cprintf>
f0106c0e:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c14:	c1 e8 0a             	shr    $0xa,%eax
f0106c17:	89 c2                	mov    %eax,%edx
f0106c19:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c1c:	c1 e8 0a             	shr    $0xa,%eax
f0106c1f:	83 ec 04             	sub    $0x4,%esp
f0106c22:	52                   	push   %edx
f0106c23:	50                   	push   %eax
f0106c24:	68 25 1f 13 f0       	push   $0xf0131f25
f0106c29:	e8 03 a2 ff ff       	call   f0100e31 <cprintf>
f0106c2e:	83 c4 10             	add    $0x10,%esp
}
f0106c31:	90                   	nop
f0106c32:	c9                   	leave  
f0106c33:	c3                   	ret    

f0106c34 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106c34:	55                   	push   %ebp
f0106c35:	89 e5                	mov    %esp,%ebp
f0106c37:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106c3a:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106c41:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106c48:	eb 24                	jmp    f0106c6e <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106c4a:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0106c4f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106c52:	c1 e2 02             	shl    $0x2,%edx
f0106c55:	01 c2                	add    %eax,%edx
f0106c57:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0106c5c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106c5f:	c1 e1 02             	shl    $0x2,%ecx
f0106c62:	01 c8                	add    %ecx,%eax
f0106c64:	8b 00                	mov    (%eax),%eax
f0106c66:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106c68:	ff 45 fc             	incl   -0x4(%ebp)
f0106c6b:	ff 45 f8             	incl   -0x8(%ebp)
f0106c6e:	a1 ec ae 2b f0       	mov    0xf02baeec,%eax
f0106c73:	c1 e8 16             	shr    $0x16,%eax
f0106c76:	89 c2                	mov    %eax,%edx
f0106c78:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106c7b:	39 c2                	cmp    %eax,%edx
f0106c7d:	77 cb                	ja     f0106c4a <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106c7f:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f0106c84:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106c87:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c8a:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106c8d:	0f 20 c0             	mov    %cr0,%eax
f0106c90:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106c93:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106c96:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106c99:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106ca0:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106ca4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106ca7:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106caa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106cad:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106cb0:	0f 01 15 90 c9 18 f0 	lgdtl  0xf018c990
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106cb7:	b8 23 00 00 00       	mov    $0x23,%eax
f0106cbc:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106cbe:	b8 23 00 00 00       	mov    $0x23,%eax
f0106cc3:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106cc5:	b8 10 00 00 00       	mov    $0x10,%eax
f0106cca:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106ccc:	b8 10 00 00 00       	mov    $0x10,%eax
f0106cd1:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106cd3:	b8 10 00 00 00       	mov    $0x10,%eax
f0106cd8:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106cda:	ea e1 6c 10 f0 08 00 	ljmp   $0x8,$0xf0106ce1
	asm volatile("lldt %%ax" :: "a" (0));
f0106ce1:	b8 00 00 00 00       	mov    $0x0,%eax
f0106ce6:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106ce9:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106cf0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106cf7:	eb 19                	jmp    f0106d12 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106cf9:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0106cfe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d01:	c1 e2 02             	shl    $0x2,%edx
f0106d04:	01 d0                	add    %edx,%eax
f0106d06:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d0c:	ff 45 f4             	incl   -0xc(%ebp)
f0106d0f:	ff 45 f0             	incl   -0x10(%ebp)
f0106d12:	a1 ec ae 2b f0       	mov    0xf02baeec,%eax
f0106d17:	c1 e8 16             	shr    $0x16,%eax
f0106d1a:	89 c2                	mov    %eax,%edx
f0106d1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d1f:	39 c2                	cmp    %eax,%edx
f0106d21:	77 d6                	ja     f0106cf9 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106d23:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f0106d28:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106d2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d2e:	0f 22 d8             	mov    %eax,%cr3
}
f0106d31:	90                   	nop
f0106d32:	c9                   	leave  
f0106d33:	c3                   	ret    

f0106d34 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106d34:	55                   	push   %ebp
f0106d35:	89 e5                	mov    %esp,%ebp
f0106d37:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106d3a:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0106d3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106d42:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106d49:	77 17                	ja     f0106d62 <setup_listing_to_all_page_tables_entries+0x2e>
f0106d4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0106d4e:	68 7c 1d 13 f0       	push   $0xf0131d7c
f0106d53:	68 ae 01 00 00       	push   $0x1ae
f0106d58:	68 b0 1d 13 f0       	push   $0xf0131db0
f0106d5d:	e8 4e 94 ff ff       	call   f01001b0 <_panic>
f0106d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d65:	05 00 00 00 10       	add    $0x10000000,%eax
f0106d6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106d6d:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0106d72:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106d77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d7a:	83 ca 03             	or     $0x3,%edx
f0106d7d:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106d7f:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0106d84:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106d8a:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0106d8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106d92:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106d99:	77 17                	ja     f0106db2 <setup_listing_to_all_page_tables_entries+0x7e>
f0106d9b:	ff 75 ec             	pushl  -0x14(%ebp)
f0106d9e:	68 7c 1d 13 f0       	push   $0xf0131d7c
f0106da3:	68 b3 01 00 00       	push   $0x1b3
f0106da8:	68 b0 1d 13 f0       	push   $0xf0131db0
f0106dad:	e8 fe 93 ff ff       	call   f01001b0 <_panic>
f0106db2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db5:	05 00 00 00 10       	add    $0x10000000,%eax
f0106dba:	83 c8 05             	or     $0x5,%eax
f0106dbd:	89 02                	mov    %eax,(%edx)

}
f0106dbf:	90                   	nop
f0106dc0:	c9                   	leave  
f0106dc1:	c3                   	ret    

f0106dc2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106dc2:	55                   	push   %ebp
f0106dc3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106dc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dc8:	8b 15 d0 ae 2b f0    	mov    0xf02baed0,%edx
f0106dce:	29 d0                	sub    %edx,%eax
f0106dd0:	c1 f8 02             	sar    $0x2,%eax
f0106dd3:	89 c2                	mov    %eax,%edx
f0106dd5:	89 d0                	mov    %edx,%eax
f0106dd7:	c1 e0 03             	shl    $0x3,%eax
f0106dda:	01 d0                	add    %edx,%eax
f0106ddc:	c1 e0 03             	shl    $0x3,%eax
f0106ddf:	01 d0                	add    %edx,%eax
f0106de1:	c1 e0 03             	shl    $0x3,%eax
f0106de4:	01 d0                	add    %edx,%eax
f0106de6:	c1 e0 03             	shl    $0x3,%eax
f0106de9:	01 d0                	add    %edx,%eax
f0106deb:	89 c1                	mov    %eax,%ecx
f0106ded:	c1 e1 0f             	shl    $0xf,%ecx
f0106df0:	01 c8                	add    %ecx,%eax
f0106df2:	c1 e0 03             	shl    $0x3,%eax
f0106df5:	01 d0                	add    %edx,%eax
f0106df7:	f7 d8                	neg    %eax
}
f0106df9:	5d                   	pop    %ebp
f0106dfa:	c3                   	ret    

f0106dfb <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106dfb:	55                   	push   %ebp
f0106dfc:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106dfe:	ff 75 08             	pushl  0x8(%ebp)
f0106e01:	e8 bc ff ff ff       	call   f0106dc2 <to_frame_number>
f0106e06:	83 c4 04             	add    $0x4,%esp
f0106e09:	c1 e0 0c             	shl    $0xc,%eax
}
f0106e0c:	c9                   	leave  
f0106e0d:	c3                   	ret    

f0106e0e <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106e0e:	55                   	push   %ebp
f0106e0f:	89 e5                	mov    %esp,%ebp
f0106e11:	53                   	push   %ebx
f0106e12:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106e15:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e18:	c1 e8 0c             	shr    $0xc,%eax
f0106e1b:	89 c2                	mov    %eax,%edx
f0106e1d:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0106e22:	39 c2                	cmp    %eax,%edx
f0106e24:	72 14                	jb     f0106e3a <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106e26:	83 ec 04             	sub    $0x4,%esp
f0106e29:	68 44 1f 13 f0       	push   $0xf0131f44
f0106e2e:	6a 55                	push   $0x55
f0106e30:	68 69 1f 13 f0       	push   $0xf0131f69
f0106e35:	e8 76 93 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0106e3a:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0106e40:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e43:	c1 e8 0c             	shr    $0xc,%eax
f0106e46:	89 c2                	mov    %eax,%edx
f0106e48:	89 d0                	mov    %edx,%eax
f0106e4a:	01 c0                	add    %eax,%eax
f0106e4c:	01 d0                	add    %edx,%eax
f0106e4e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106e55:	01 d8                	add    %ebx,%eax
f0106e57:	01 d0                	add    %edx,%eax
f0106e59:	01 c8                	add    %ecx,%eax
}
f0106e5b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106e5e:	c9                   	leave  
f0106e5f:	c3                   	ret    

f0106e60 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106e60:	55                   	push   %ebp
f0106e61:	89 e5                	mov    %esp,%ebp
f0106e63:	83 ec 10             	sub    $0x10,%esp
f0106e66:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e69:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106e6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106e6f:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106e72:	90                   	nop
f0106e73:	c9                   	leave  
f0106e74:	c3                   	ret    

f0106e75 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106e75:	55                   	push   %ebp
f0106e76:	89 e5                	mov    %esp,%ebp
f0106e78:	56                   	push   %esi
f0106e79:	53                   	push   %ebx
f0106e7a:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106e7d:	c7 05 98 ae 2b f0 00 	movl   $0x0,0xf02bae98
f0106e84:	00 00 00 
f0106e87:	c7 05 9c ae 2b f0 00 	movl   $0x0,0xf02bae9c
f0106e8e:	00 00 00 
f0106e91:	c7 05 a4 ae 2b f0 00 	movl   $0x0,0xf02baea4
f0106e98:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106e9b:	c7 05 00 2b 25 f0 00 	movl   $0x0,0xf0252b00
f0106ea2:	00 00 00 
f0106ea5:	c7 05 04 2b 25 f0 00 	movl   $0x0,0xf0252b04
f0106eac:	00 00 00 
f0106eaf:	c7 05 0c 2b 25 f0 00 	movl   $0x0,0xf0252b0c
f0106eb6:	00 00 00 

	frames_info[0].references = 1;
f0106eb9:	a1 d0 ae 2b f0       	mov    0xf02baed0,%eax
f0106ebe:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106ec4:	a1 d0 ae 2b f0       	mov    0xf02baed0,%eax
f0106ec9:	83 c0 1c             	add    $0x1c,%eax
f0106ecc:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106ed2:	a1 d0 ae 2b f0       	mov    0xf02baed0,%eax
f0106ed7:	83 c0 38             	add    $0x38,%eax
f0106eda:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106ee0:	c7 05 dc ae 2b f0 00 	movl   $0xf0001000,0xf02baedc
f0106ee7:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106eea:	c7 05 f8 ae 2b f0 00 	movl   $0xf0002000,0xf02baef8
f0106ef1:	20 00 f0 
	i =0;
f0106ef4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106efb:	eb 1f                	jmp    f0106f1c <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f0106efd:	8b 15 dc ae 2b f0    	mov    0xf02baedc,%edx
f0106f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f06:	01 d0                	add    %edx,%eax
f0106f08:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106f0b:	8b 15 f8 ae 2b f0    	mov    0xf02baef8,%edx
f0106f11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f14:	01 d0                	add    %edx,%eax
f0106f16:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106f19:	ff 45 f4             	incl   -0xc(%ebp)
f0106f1c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106f23:	7e d8                	jle    f0106efd <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106f25:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f2f:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106f34:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106f37:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0106f3f:	f7 75 f0             	divl   -0x10(%ebp)
f0106f42:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f45:	29 d0                	sub    %edx,%eax
f0106f47:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106f4a:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106f51:	e9 20 01 00 00       	jmp    f0107076 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0106f56:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0106f5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f5f:	89 d0                	mov    %edx,%eax
f0106f61:	01 c0                	add    %eax,%eax
f0106f63:	01 d0                	add    %edx,%eax
f0106f65:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106f6c:	01 d8                	add    %ebx,%eax
f0106f6e:	01 d0                	add    %edx,%eax
f0106f70:	01 c8                	add    %ecx,%eax
f0106f72:	83 ec 0c             	sub    $0xc,%esp
f0106f75:	50                   	push   %eax
f0106f76:	e8 31 03 00 00       	call   f01072ac <initialize_frame_info>
f0106f7b:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106f7e:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0106f84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f87:	89 d0                	mov    %edx,%eax
f0106f89:	01 c0                	add    %eax,%eax
f0106f8b:	01 d0                	add    %edx,%eax
f0106f8d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106f94:	01 d8                	add    %ebx,%eax
f0106f96:	01 d0                	add    %edx,%eax
f0106f98:	01 c8                	add    %ecx,%eax
f0106f9a:	85 c0                	test   %eax,%eax
f0106f9c:	75 14                	jne    f0106fb2 <initialize_paging+0x13d>
f0106f9e:	83 ec 04             	sub    $0x4,%esp
f0106fa1:	68 84 1f 13 f0       	push   $0xf0131f84
f0106fa6:	6a 5c                	push   $0x5c
f0106fa8:	68 a7 1f 13 f0       	push   $0xf0131fa7
f0106fad:	e8 fe 91 ff ff       	call   f01001b0 <_panic>
f0106fb2:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0106fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fbb:	89 d0                	mov    %edx,%eax
f0106fbd:	01 c0                	add    %eax,%eax
f0106fbf:	01 d0                	add    %edx,%eax
f0106fc1:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106fc8:	01 d8                	add    %ebx,%eax
f0106fca:	01 d0                	add    %edx,%eax
f0106fcc:	01 c8                	add    %ecx,%eax
f0106fce:	8b 15 98 ae 2b f0    	mov    0xf02bae98,%edx
f0106fd4:	89 10                	mov    %edx,(%eax)
f0106fd6:	8b 00                	mov    (%eax),%eax
f0106fd8:	85 c0                	test   %eax,%eax
f0106fda:	74 27                	je     f0107003 <initialize_paging+0x18e>
f0106fdc:	8b 0d 98 ae 2b f0    	mov    0xf02bae98,%ecx
f0106fe2:	8b 1d d0 ae 2b f0    	mov    0xf02baed0,%ebx
f0106fe8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106feb:	89 d0                	mov    %edx,%eax
f0106fed:	01 c0                	add    %eax,%eax
f0106fef:	01 d0                	add    %edx,%eax
f0106ff1:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0106ff8:	01 f0                	add    %esi,%eax
f0106ffa:	01 d0                	add    %edx,%eax
f0106ffc:	01 d8                	add    %ebx,%eax
f0106ffe:	89 41 04             	mov    %eax,0x4(%ecx)
f0107001:	eb 21                	jmp    f0107024 <initialize_paging+0x1af>
f0107003:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0107009:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010700c:	89 d0                	mov    %edx,%eax
f010700e:	01 c0                	add    %eax,%eax
f0107010:	01 d0                	add    %edx,%eax
f0107012:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107019:	01 d8                	add    %ebx,%eax
f010701b:	01 d0                	add    %edx,%eax
f010701d:	01 c8                	add    %ecx,%eax
f010701f:	a3 9c ae 2b f0       	mov    %eax,0xf02bae9c
f0107024:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f010702a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010702d:	89 d0                	mov    %edx,%eax
f010702f:	01 c0                	add    %eax,%eax
f0107031:	01 d0                	add    %edx,%eax
f0107033:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010703a:	01 d8                	add    %ebx,%eax
f010703c:	01 d0                	add    %edx,%eax
f010703e:	01 c8                	add    %ecx,%eax
f0107040:	a3 98 ae 2b f0       	mov    %eax,0xf02bae98
f0107045:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f010704b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010704e:	89 d0                	mov    %edx,%eax
f0107050:	01 c0                	add    %eax,%eax
f0107052:	01 d0                	add    %edx,%eax
f0107054:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010705b:	01 d8                	add    %ebx,%eax
f010705d:	01 d0                	add    %edx,%eax
f010705f:	01 c8                	add    %ecx,%eax
f0107061:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107068:	a1 a4 ae 2b f0       	mov    0xf02baea4,%eax
f010706d:	40                   	inc    %eax
f010706e:	a3 a4 ae 2b f0       	mov    %eax,0xf02baea4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107073:	ff 45 f4             	incl   -0xc(%ebp)
f0107076:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107079:	85 c0                	test   %eax,%eax
f010707b:	79 05                	jns    f0107082 <initialize_paging+0x20d>
f010707d:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107082:	c1 f8 0c             	sar    $0xc,%eax
f0107085:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107088:	0f 8f c8 fe ff ff    	jg     f0106f56 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010708e:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0107095:	eb 25                	jmp    f01070bc <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f0107097:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f010709d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070a0:	89 d0                	mov    %edx,%eax
f01070a2:	01 c0                	add    %eax,%eax
f01070a4:	01 d0                	add    %edx,%eax
f01070a6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01070ad:	01 d8                	add    %ebx,%eax
f01070af:	01 d0                	add    %edx,%eax
f01070b1:	01 c8                	add    %ecx,%eax
f01070b3:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01070b9:	ff 45 f4             	incl   -0xc(%ebp)
f01070bc:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01070c3:	7e d2                	jle    f0107097 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01070c5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01070cc:	a1 ec ae 2b f0       	mov    0xf02baeec,%eax
f01070d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01070d4:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f01070db:	77 14                	ja     f01070f1 <initialize_paging+0x27c>
f01070dd:	ff 75 e0             	pushl  -0x20(%ebp)
f01070e0:	68 c4 1f 13 f0       	push   $0xf0131fc4
f01070e5:	6a 64                	push   $0x64
f01070e7:	68 a7 1f 13 f0       	push   $0xf0131fa7
f01070ec:	e8 bf 90 ff ff       	call   f01001b0 <_panic>
f01070f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01070f4:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01070fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01070fd:	01 d0                	add    %edx,%eax
f01070ff:	48                   	dec    %eax
f0107100:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107103:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107106:	ba 00 00 00 00       	mov    $0x0,%edx
f010710b:	f7 75 e4             	divl   -0x1c(%ebp)
f010710e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107111:	29 d0                	sub    %edx,%eax
f0107113:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107116:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010711d:	eb 25                	jmp    f0107144 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f010711f:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0107125:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107128:	89 d0                	mov    %edx,%eax
f010712a:	01 c0                	add    %eax,%eax
f010712c:	01 d0                	add    %edx,%eax
f010712e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107135:	01 d8                	add    %ebx,%eax
f0107137:	01 d0                	add    %edx,%eax
f0107139:	01 c8                	add    %ecx,%eax
f010713b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107141:	ff 45 f4             	incl   -0xc(%ebp)
f0107144:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107147:	85 c0                	test   %eax,%eax
f0107149:	79 05                	jns    f0107150 <initialize_paging+0x2db>
f010714b:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107150:	c1 f8 0c             	sar    $0xc,%eax
f0107153:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107156:	7f c7                	jg     f010711f <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0107158:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010715b:	85 c0                	test   %eax,%eax
f010715d:	79 05                	jns    f0107164 <initialize_paging+0x2ef>
f010715f:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107164:	c1 f8 0c             	sar    $0xc,%eax
f0107167:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010716a:	e9 20 01 00 00       	jmp    f010728f <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f010716f:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0107175:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107178:	89 d0                	mov    %edx,%eax
f010717a:	01 c0                	add    %eax,%eax
f010717c:	01 d0                	add    %edx,%eax
f010717e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107185:	01 d8                	add    %ebx,%eax
f0107187:	01 d0                	add    %edx,%eax
f0107189:	01 c8                	add    %ecx,%eax
f010718b:	83 ec 0c             	sub    $0xc,%esp
f010718e:	50                   	push   %eax
f010718f:	e8 18 01 00 00       	call   f01072ac <initialize_frame_info>
f0107194:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0107197:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f010719d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a0:	89 d0                	mov    %edx,%eax
f01071a2:	01 c0                	add    %eax,%eax
f01071a4:	01 d0                	add    %edx,%eax
f01071a6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071ad:	01 d8                	add    %ebx,%eax
f01071af:	01 d0                	add    %edx,%eax
f01071b1:	01 c8                	add    %ecx,%eax
f01071b3:	85 c0                	test   %eax,%eax
f01071b5:	75 14                	jne    f01071cb <initialize_paging+0x356>
f01071b7:	83 ec 04             	sub    $0x4,%esp
f01071ba:	68 84 1f 13 f0       	push   $0xf0131f84
f01071bf:	6a 70                	push   $0x70
f01071c1:	68 a7 1f 13 f0       	push   $0xf0131fa7
f01071c6:	e8 e5 8f ff ff       	call   f01001b0 <_panic>
f01071cb:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f01071d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071d4:	89 d0                	mov    %edx,%eax
f01071d6:	01 c0                	add    %eax,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071e1:	01 d8                	add    %ebx,%eax
f01071e3:	01 d0                	add    %edx,%eax
f01071e5:	01 c8                	add    %ecx,%eax
f01071e7:	8b 15 98 ae 2b f0    	mov    0xf02bae98,%edx
f01071ed:	89 10                	mov    %edx,(%eax)
f01071ef:	8b 00                	mov    (%eax),%eax
f01071f1:	85 c0                	test   %eax,%eax
f01071f3:	74 27                	je     f010721c <initialize_paging+0x3a7>
f01071f5:	8b 0d 98 ae 2b f0    	mov    0xf02bae98,%ecx
f01071fb:	8b 1d d0 ae 2b f0    	mov    0xf02baed0,%ebx
f0107201:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107204:	89 d0                	mov    %edx,%eax
f0107206:	01 c0                	add    %eax,%eax
f0107208:	01 d0                	add    %edx,%eax
f010720a:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0107211:	01 f0                	add    %esi,%eax
f0107213:	01 d0                	add    %edx,%eax
f0107215:	01 d8                	add    %ebx,%eax
f0107217:	89 41 04             	mov    %eax,0x4(%ecx)
f010721a:	eb 21                	jmp    f010723d <initialize_paging+0x3c8>
f010721c:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0107222:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107225:	89 d0                	mov    %edx,%eax
f0107227:	01 c0                	add    %eax,%eax
f0107229:	01 d0                	add    %edx,%eax
f010722b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107232:	01 d8                	add    %ebx,%eax
f0107234:	01 d0                	add    %edx,%eax
f0107236:	01 c8                	add    %ecx,%eax
f0107238:	a3 9c ae 2b f0       	mov    %eax,0xf02bae9c
f010723d:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0107243:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107246:	89 d0                	mov    %edx,%eax
f0107248:	01 c0                	add    %eax,%eax
f010724a:	01 d0                	add    %edx,%eax
f010724c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107253:	01 d8                	add    %ebx,%eax
f0107255:	01 d0                	add    %edx,%eax
f0107257:	01 c8                	add    %ecx,%eax
f0107259:	a3 98 ae 2b f0       	mov    %eax,0xf02bae98
f010725e:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0107264:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107267:	89 d0                	mov    %edx,%eax
f0107269:	01 c0                	add    %eax,%eax
f010726b:	01 d0                	add    %edx,%eax
f010726d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107274:	01 d8                	add    %ebx,%eax
f0107276:	01 d0                	add    %edx,%eax
f0107278:	01 c8                	add    %ecx,%eax
f010727a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107281:	a1 a4 ae 2b f0       	mov    0xf02baea4,%eax
f0107286:	40                   	inc    %eax
f0107287:	a3 a4 ae 2b f0       	mov    %eax,0xf02baea4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010728c:	ff 45 f4             	incl   -0xc(%ebp)
f010728f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107292:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0107297:	39 c2                	cmp    %eax,%edx
f0107299:	0f 82 d0 fe ff ff    	jb     f010716f <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f010729f:	e8 f2 c5 ff ff       	call   f0103896 <initialize_disk_page_file>
}
f01072a4:	90                   	nop
f01072a5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01072a8:	5b                   	pop    %ebx
f01072a9:	5e                   	pop    %esi
f01072aa:	5d                   	pop    %ebp
f01072ab:	c3                   	ret    

f01072ac <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01072ac:	55                   	push   %ebp
f01072ad:	89 e5                	mov    %esp,%ebp
f01072af:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01072b2:	83 ec 04             	sub    $0x4,%esp
f01072b5:	6a 1c                	push   $0x1c
f01072b7:	6a 00                	push   $0x0
f01072b9:	ff 75 08             	pushl  0x8(%ebp)
f01072bc:	e8 dd 7c 02 00       	call   f012ef9e <memset>
f01072c1:	83 c4 10             	add    $0x10,%esp
}
f01072c4:	90                   	nop
f01072c5:	c9                   	leave  
f01072c6:	c3                   	ret    

f01072c7 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01072c7:	55                   	push   %ebp
f01072c8:	89 e5                	mov    %esp,%ebp
f01072ca:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01072cd:	8b 15 98 ae 2b f0    	mov    0xf02bae98,%edx
f01072d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01072d6:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01072d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01072df:	8b 45 08             	mov    0x8(%ebp),%eax
f01072e2:	8b 00                	mov    (%eax),%eax
f01072e4:	85 c0                	test   %eax,%eax
f01072e6:	75 17                	jne    f01072ff <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01072e8:	83 ec 04             	sub    $0x4,%esp
f01072eb:	68 f8 1f 13 f0       	push   $0xf0131ff8
f01072f0:	68 98 00 00 00       	push   $0x98
f01072f5:	68 a7 1f 13 f0       	push   $0xf0131fa7
f01072fa:	e8 b1 8e ff ff       	call   f01001b0 <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01072ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0107302:	8b 00                	mov    (%eax),%eax
f0107304:	85 c0                	test   %eax,%eax
f0107306:	75 17                	jne    f010731f <allocate_frame+0x58>
f0107308:	83 ec 04             	sub    $0x4,%esp
f010730b:	68 45 20 13 f0       	push   $0xf0132045
f0107310:	68 9e 00 00 00       	push   $0x9e
f0107315:	68 a7 1f 13 f0       	push   $0xf0131fa7
f010731a:	e8 91 8e ff ff       	call   f01001b0 <_panic>
f010731f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107322:	8b 00                	mov    (%eax),%eax
f0107324:	8b 00                	mov    (%eax),%eax
f0107326:	85 c0                	test   %eax,%eax
f0107328:	74 14                	je     f010733e <allocate_frame+0x77>
f010732a:	8b 45 08             	mov    0x8(%ebp),%eax
f010732d:	8b 00                	mov    (%eax),%eax
f010732f:	8b 00                	mov    (%eax),%eax
f0107331:	8b 55 08             	mov    0x8(%ebp),%edx
f0107334:	8b 12                	mov    (%edx),%edx
f0107336:	8b 52 04             	mov    0x4(%edx),%edx
f0107339:	89 50 04             	mov    %edx,0x4(%eax)
f010733c:	eb 0d                	jmp    f010734b <allocate_frame+0x84>
f010733e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107341:	8b 00                	mov    (%eax),%eax
f0107343:	8b 40 04             	mov    0x4(%eax),%eax
f0107346:	a3 9c ae 2b f0       	mov    %eax,0xf02bae9c
f010734b:	8b 45 08             	mov    0x8(%ebp),%eax
f010734e:	8b 00                	mov    (%eax),%eax
f0107350:	8b 40 04             	mov    0x4(%eax),%eax
f0107353:	85 c0                	test   %eax,%eax
f0107355:	74 13                	je     f010736a <allocate_frame+0xa3>
f0107357:	8b 45 08             	mov    0x8(%ebp),%eax
f010735a:	8b 00                	mov    (%eax),%eax
f010735c:	8b 40 04             	mov    0x4(%eax),%eax
f010735f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107362:	8b 12                	mov    (%edx),%edx
f0107364:	8b 12                	mov    (%edx),%edx
f0107366:	89 10                	mov    %edx,(%eax)
f0107368:	eb 0c                	jmp    f0107376 <allocate_frame+0xaf>
f010736a:	8b 45 08             	mov    0x8(%ebp),%eax
f010736d:	8b 00                	mov    (%eax),%eax
f010736f:	8b 00                	mov    (%eax),%eax
f0107371:	a3 98 ae 2b f0       	mov    %eax,0xf02bae98
f0107376:	8b 45 08             	mov    0x8(%ebp),%eax
f0107379:	8b 00                	mov    (%eax),%eax
f010737b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107381:	8b 45 08             	mov    0x8(%ebp),%eax
f0107384:	8b 00                	mov    (%eax),%eax
f0107386:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010738d:	a1 a4 ae 2b f0       	mov    0xf02baea4,%eax
f0107392:	48                   	dec    %eax
f0107393:	a3 a4 ae 2b f0       	mov    %eax,0xf02baea4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f0107398:	8b 45 08             	mov    0x8(%ebp),%eax
f010739b:	8b 00                	mov    (%eax),%eax
f010739d:	8a 40 14             	mov    0x14(%eax),%al
f01073a0:	84 c0                	test   %al,%al
f01073a2:	74 23                	je     f01073c7 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01073a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01073a7:	8b 00                	mov    (%eax),%eax
f01073a9:	8b 50 0c             	mov    0xc(%eax),%edx
f01073ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01073af:	8b 00                	mov    (%eax),%eax
f01073b1:	8b 40 10             	mov    0x10(%eax),%eax
f01073b4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01073ba:	83 ec 08             	sub    $0x8,%esp
f01073bd:	52                   	push   %edx
f01073be:	50                   	push   %eax
f01073bf:	e8 0a 0d 00 00       	call   f01080ce <pt_clear_page_table_entry>
f01073c4:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01073c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01073ca:	8b 00                	mov    (%eax),%eax
f01073cc:	83 ec 0c             	sub    $0xc,%esp
f01073cf:	50                   	push   %eax
f01073d0:	e8 d7 fe ff ff       	call   f01072ac <initialize_frame_info>
f01073d5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01073d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01073dd:	c9                   	leave  
f01073de:	c3                   	ret    

f01073df <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01073df:	55                   	push   %ebp
f01073e0:	89 e5                	mov    %esp,%ebp
f01073e2:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01073e5:	83 ec 0c             	sub    $0xc,%esp
f01073e8:	ff 75 08             	pushl  0x8(%ebp)
f01073eb:	e8 bc fe ff ff       	call   f01072ac <initialize_frame_info>
f01073f0:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f01073f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01073f7:	75 17                	jne    f0107410 <free_frame+0x31>
f01073f9:	83 ec 04             	sub    $0x4,%esp
f01073fc:	68 84 1f 13 f0       	push   $0xf0131f84
f0107401:	68 bb 00 00 00       	push   $0xbb
f0107406:	68 a7 1f 13 f0       	push   $0xf0131fa7
f010740b:	e8 a0 8d ff ff       	call   f01001b0 <_panic>
f0107410:	8b 15 98 ae 2b f0    	mov    0xf02bae98,%edx
f0107416:	8b 45 08             	mov    0x8(%ebp),%eax
f0107419:	89 10                	mov    %edx,(%eax)
f010741b:	8b 45 08             	mov    0x8(%ebp),%eax
f010741e:	8b 00                	mov    (%eax),%eax
f0107420:	85 c0                	test   %eax,%eax
f0107422:	74 0d                	je     f0107431 <free_frame+0x52>
f0107424:	a1 98 ae 2b f0       	mov    0xf02bae98,%eax
f0107429:	8b 55 08             	mov    0x8(%ebp),%edx
f010742c:	89 50 04             	mov    %edx,0x4(%eax)
f010742f:	eb 08                	jmp    f0107439 <free_frame+0x5a>
f0107431:	8b 45 08             	mov    0x8(%ebp),%eax
f0107434:	a3 9c ae 2b f0       	mov    %eax,0xf02bae9c
f0107439:	8b 45 08             	mov    0x8(%ebp),%eax
f010743c:	a3 98 ae 2b f0       	mov    %eax,0xf02bae98
f0107441:	8b 45 08             	mov    0x8(%ebp),%eax
f0107444:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010744b:	a1 a4 ae 2b f0       	mov    0xf02baea4,%eax
f0107450:	40                   	inc    %eax
f0107451:	a3 a4 ae 2b f0       	mov    %eax,0xf02baea4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f0107456:	90                   	nop
f0107457:	c9                   	leave  
f0107458:	c3                   	ret    

f0107459 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0107459:	55                   	push   %ebp
f010745a:	89 e5                	mov    %esp,%ebp
f010745c:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f010745f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107462:	8b 40 08             	mov    0x8(%eax),%eax
f0107465:	48                   	dec    %eax
f0107466:	8b 55 08             	mov    0x8(%ebp),%edx
f0107469:	66 89 42 08          	mov    %ax,0x8(%edx)
f010746d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107470:	8b 40 08             	mov    0x8(%eax),%eax
f0107473:	66 85 c0             	test   %ax,%ax
f0107476:	75 0e                	jne    f0107486 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0107478:	83 ec 0c             	sub    $0xc,%esp
f010747b:	ff 75 08             	pushl  0x8(%ebp)
f010747e:	e8 5c ff ff ff       	call   f01073df <free_frame>
f0107483:	83 c4 10             	add    $0x10,%esp
}
f0107486:	90                   	nop
f0107487:	c9                   	leave  
f0107488:	c3                   	ret    

f0107489 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0107489:	55                   	push   %ebp
f010748a:	89 e5                	mov    %esp,%ebp
f010748c:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010748f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107492:	c1 e8 16             	shr    $0x16,%eax
f0107495:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010749c:	8b 45 08             	mov    0x8(%ebp),%eax
f010749f:	01 d0                	add    %edx,%eax
f01074a1:	8b 00                	mov    (%eax),%eax
f01074a3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f01074a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074a9:	83 e0 01             	and    $0x1,%eax
f01074ac:	85 c0                	test   %eax,%eax
f01074ae:	74 4e                	je     f01074fe <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01074b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01074b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01074bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01074be:	c1 e8 0c             	shr    $0xc,%eax
f01074c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01074c4:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f01074c9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01074cc:	72 17                	jb     f01074e5 <get_page_table+0x5c>
f01074ce:	ff 75 f0             	pushl  -0x10(%ebp)
f01074d1:	68 64 20 13 f0       	push   $0xf0132064
f01074d6:	68 e2 00 00 00       	push   $0xe2
f01074db:	68 a7 1f 13 f0       	push   $0xf0131fa7
f01074e0:	e8 cb 8c ff ff       	call   f01001b0 <_panic>
f01074e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01074e8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01074ed:	89 c2                	mov    %eax,%edx
f01074ef:	8b 45 10             	mov    0x10(%ebp),%eax
f01074f2:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f01074f4:	b8 00 00 00 00       	mov    $0x0,%eax
f01074f9:	e9 8f 00 00 00       	jmp    f010758d <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01074fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107502:	74 7b                	je     f010757f <get_page_table+0xf6>
f0107504:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107507:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f010750a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010750d:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0107510:	83 ec 0c             	sub    $0xc,%esp
f0107513:	6a 00                	push   $0x0
f0107515:	e8 87 4f 00 00       	call   f010c4a1 <fault_handler>
f010751a:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010751d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107520:	c1 e8 16             	shr    $0x16,%eax
f0107523:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010752a:	8b 45 08             	mov    0x8(%ebp),%eax
f010752d:	01 d0                	add    %edx,%eax
f010752f:	8b 00                	mov    (%eax),%eax
f0107531:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107534:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107537:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010753c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010753f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107542:	c1 e8 0c             	shr    $0xc,%eax
f0107545:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107548:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f010754d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0107550:	72 17                	jb     f0107569 <get_page_table+0xe0>
f0107552:	ff 75 e8             	pushl  -0x18(%ebp)
f0107555:	68 64 20 13 f0       	push   $0xf0132064
f010755a:	68 fa 00 00 00       	push   $0xfa
f010755f:	68 a7 1f 13 f0       	push   $0xf0131fa7
f0107564:	e8 47 8c ff ff       	call   f01001b0 <_panic>
f0107569:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010756c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107571:	89 c2                	mov    %eax,%edx
f0107573:	8b 45 10             	mov    0x10(%ebp),%eax
f0107576:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0107578:	b8 00 00 00 00       	mov    $0x0,%eax
f010757d:	eb 0e                	jmp    f010758d <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f010757f:	8b 45 10             	mov    0x10(%ebp),%eax
f0107582:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0107588:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f010758d:	c9                   	leave  
f010758e:	c3                   	ret    

f010758f <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f010758f:	55                   	push   %ebp
f0107590:	89 e5                	mov    %esp,%ebp
f0107592:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0107595:	83 ec 04             	sub    $0x4,%esp
f0107598:	8d 45 f4             	lea    -0xc(%ebp),%eax
f010759b:	50                   	push   %eax
f010759c:	ff 75 0c             	pushl  0xc(%ebp)
f010759f:	ff 75 08             	pushl  0x8(%ebp)
f01075a2:	e8 08 00 00 00       	call   f01075af <__static_cpt>
f01075a7:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f01075aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01075ad:	c9                   	leave  
f01075ae:	c3                   	ret    

f01075af <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01075af:	55                   	push   %ebp
f01075b0:	89 e5                	mov    %esp,%ebp
f01075b2:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f01075b5:	83 ec 0c             	sub    $0xc,%esp
f01075b8:	8d 45 e0             	lea    -0x20(%ebp),%eax
f01075bb:	50                   	push   %eax
f01075bc:	e8 06 fd ff ff       	call   f01072c7 <allocate_frame>
f01075c1:	83 c4 10             	add    $0x10,%esp
f01075c4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f01075c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01075ca:	83 ec 0c             	sub    $0xc,%esp
f01075cd:	50                   	push   %eax
f01075ce:	e8 28 f8 ff ff       	call   f0106dfb <to_physical_address>
f01075d3:	83 c4 10             	add    $0x10,%esp
f01075d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f01075d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01075dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01075df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01075e2:	c1 e8 0c             	shr    $0xc,%eax
f01075e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01075e8:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f01075ed:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01075f0:	72 17                	jb     f0107609 <__static_cpt+0x5a>
f01075f2:	ff 75 ec             	pushl  -0x14(%ebp)
f01075f5:	68 64 20 13 f0       	push   $0xf0132064
f01075fa:	68 2f 01 00 00       	push   $0x12f
f01075ff:	68 a7 1f 13 f0       	push   $0xf0131fa7
f0107604:	e8 a7 8b ff ff       	call   f01001b0 <_panic>
f0107609:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010760c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107611:	89 c2                	mov    %eax,%edx
f0107613:	8b 45 10             	mov    0x10(%ebp),%eax
f0107616:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0107618:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010761b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0107621:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107624:	c1 e8 16             	shr    $0x16,%eax
f0107627:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010762e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107631:	01 d0                	add    %edx,%eax
f0107633:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107636:	83 ca 07             	or     $0x7,%edx
f0107639:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f010763b:	8b 45 10             	mov    0x10(%ebp),%eax
f010763e:	8b 00                	mov    (%eax),%eax
f0107640:	83 ec 04             	sub    $0x4,%esp
f0107643:	68 00 10 00 00       	push   $0x1000
f0107648:	6a 00                	push   $0x0
f010764a:	50                   	push   %eax
f010764b:	e8 4e 79 02 00       	call   f012ef9e <memset>
f0107650:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107653:	0f 20 d8             	mov    %cr3,%eax
f0107656:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107659:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010765c:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f010765f:	90                   	nop
f0107660:	c9                   	leave  
f0107661:	c3                   	ret    

f0107662 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0107662:	55                   	push   %ebp
f0107663:	89 e5                	mov    %esp,%ebp
f0107665:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0107668:	ff 75 0c             	pushl  0xc(%ebp)
f010766b:	e8 8b f7 ff ff       	call   f0106dfb <to_physical_address>
f0107670:	83 c4 04             	add    $0x4,%esp
f0107673:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0107676:	83 ec 04             	sub    $0x4,%esp
f0107679:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010767c:	50                   	push   %eax
f010767d:	ff 75 10             	pushl  0x10(%ebp)
f0107680:	ff 75 08             	pushl  0x8(%ebp)
f0107683:	e8 01 fe ff ff       	call   f0107489 <get_page_table>
f0107688:	83 c4 10             	add    $0x10,%esp
f010768b:	83 f8 01             	cmp    $0x1,%eax
f010768e:	75 15                	jne    f01076a5 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0107690:	83 ec 04             	sub    $0x4,%esp
f0107693:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107696:	50                   	push   %eax
f0107697:	ff 75 10             	pushl  0x10(%ebp)
f010769a:	ff 75 08             	pushl  0x8(%ebp)
f010769d:	e8 0d ff ff ff       	call   f01075af <__static_cpt>
f01076a2:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f01076a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076a8:	8b 55 10             	mov    0x10(%ebp),%edx
f01076ab:	c1 ea 0c             	shr    $0xc,%edx
f01076ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01076b4:	c1 e2 02             	shl    $0x2,%edx
f01076b7:	01 d0                	add    %edx,%eax
f01076b9:	8b 00                	mov    (%eax),%eax
f01076bb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f01076be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01076c1:	83 e0 01             	and    $0x1,%eax
f01076c4:	85 c0                	test   %eax,%eax
f01076c6:	74 25                	je     f01076ed <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f01076c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01076cb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01076d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01076d3:	75 07                	jne    f01076dc <map_frame+0x7a>
			return 0;
f01076d5:	b8 00 00 00 00       	mov    $0x0,%eax
f01076da:	eb 43                	jmp    f010771f <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f01076dc:	83 ec 08             	sub    $0x8,%esp
f01076df:	ff 75 10             	pushl  0x10(%ebp)
f01076e2:	ff 75 08             	pushl  0x8(%ebp)
f01076e5:	e8 a7 00 00 00       	call   f0107791 <unmap_frame>
f01076ea:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f01076ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01076f0:	8b 40 08             	mov    0x8(%eax),%eax
f01076f3:	40                   	inc    %eax
f01076f4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01076f7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f01076fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076fe:	8b 55 10             	mov    0x10(%ebp),%edx
f0107701:	c1 ea 0c             	shr    $0xc,%edx
f0107704:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010770a:	c1 e2 02             	shl    $0x2,%edx
f010770d:	01 c2                	add    %eax,%edx
f010770f:	8b 45 14             	mov    0x14(%ebp),%eax
f0107712:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107715:	83 c8 01             	or     $0x1,%eax
f0107718:	89 02                	mov    %eax,(%edx)

	return 0;
f010771a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010771f:	c9                   	leave  
f0107720:	c3                   	ret    

f0107721 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0107721:	55                   	push   %ebp
f0107722:	89 e5                	mov    %esp,%ebp
f0107724:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0107727:	83 ec 04             	sub    $0x4,%esp
f010772a:	ff 75 10             	pushl  0x10(%ebp)
f010772d:	ff 75 0c             	pushl  0xc(%ebp)
f0107730:	ff 75 08             	pushl  0x8(%ebp)
f0107733:	e8 51 fd ff ff       	call   f0107489 <get_page_table>
f0107738:	83 c4 10             	add    $0x10,%esp
f010773b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f010773e:	8b 45 10             	mov    0x10(%ebp),%eax
f0107741:	8b 00                	mov    (%eax),%eax
f0107743:	85 c0                	test   %eax,%eax
f0107745:	74 43                	je     f010778a <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0107747:	8b 45 0c             	mov    0xc(%ebp),%eax
f010774a:	c1 e8 0c             	shr    $0xc,%eax
f010774d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107752:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0107755:	8b 45 10             	mov    0x10(%ebp),%eax
f0107758:	8b 00                	mov    (%eax),%eax
f010775a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010775d:	c1 e2 02             	shl    $0x2,%edx
f0107760:	01 d0                	add    %edx,%eax
f0107762:	8b 00                	mov    (%eax),%eax
f0107764:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0107767:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010776b:	74 16                	je     f0107783 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f010776d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107770:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107775:	83 ec 0c             	sub    $0xc,%esp
f0107778:	50                   	push   %eax
f0107779:	e8 90 f6 ff ff       	call   f0106e0e <to_frame_info>
f010777e:	83 c4 10             	add    $0x10,%esp
f0107781:	eb 0c                	jmp    f010778f <get_frame_info+0x6e>
		}
		return 0;
f0107783:	b8 00 00 00 00       	mov    $0x0,%eax
f0107788:	eb 05                	jmp    f010778f <get_frame_info+0x6e>
	}
	return 0;
f010778a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010778f:	c9                   	leave  
f0107790:	c3                   	ret    

f0107791 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0107791:	55                   	push   %ebp
f0107792:	89 e5                	mov    %esp,%ebp
f0107794:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0107797:	83 ec 04             	sub    $0x4,%esp
f010779a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010779d:	50                   	push   %eax
f010779e:	ff 75 0c             	pushl  0xc(%ebp)
f01077a1:	ff 75 08             	pushl  0x8(%ebp)
f01077a4:	e8 78 ff ff ff       	call   f0107721 <get_frame_info>
f01077a9:	83 c4 10             	add    $0x10,%esp
f01077ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f01077af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01077b3:	74 60                	je     f0107815 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f01077b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077b8:	8a 40 14             	mov    0x14(%eax),%al
f01077bb:	84 c0                	test   %al,%al
f01077bd:	74 1c                	je     f01077db <unmap_frame+0x4a>
f01077bf:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01077c6:	77 13                	ja     f01077db <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f01077c8:	83 ec 08             	sub    $0x8,%esp
f01077cb:	ff 75 0c             	pushl  0xc(%ebp)
f01077ce:	68 94 20 13 f0       	push   $0xf0132094
f01077d3:	e8 59 96 ff ff       	call   f0100e31 <cprintf>
f01077d8:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f01077db:	83 ec 0c             	sub    $0xc,%esp
f01077de:	ff 75 f4             	pushl  -0xc(%ebp)
f01077e1:	e8 73 fc ff ff       	call   f0107459 <decrement_references>
f01077e6:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f01077e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01077ec:	8b 55 0c             	mov    0xc(%ebp),%edx
f01077ef:	c1 ea 0c             	shr    $0xc,%edx
f01077f2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01077f8:	c1 e2 02             	shl    $0x2,%edx
f01077fb:	01 d0                	add    %edx,%eax
f01077fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107803:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107806:	83 ec 08             	sub    $0x8,%esp
f0107809:	50                   	push   %eax
f010780a:	ff 75 08             	pushl  0x8(%ebp)
f010780d:	e8 4e f6 ff ff       	call   f0106e60 <tlb_invalidate>
f0107812:	83 c4 10             	add    $0x10,%esp
	}
}
f0107815:	90                   	nop
f0107816:	c9                   	leave  
f0107817:	c3                   	ret    

f0107818 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0107818:	55                   	push   %ebp
f0107819:	89 e5                	mov    %esp,%ebp
f010781b:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f010781e:	ff 75 0c             	pushl  0xc(%ebp)
f0107821:	e8 d5 f5 ff ff       	call   f0106dfb <to_physical_address>
f0107826:	83 c4 04             	add    $0x4,%esp
f0107829:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010782c:	8b 45 10             	mov    0x10(%ebp),%eax
f010782f:	c1 e8 16             	shr    $0x16,%eax
f0107832:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107839:	8b 45 08             	mov    0x8(%ebp),%eax
f010783c:	01 d0                	add    %edx,%eax
f010783e:	8b 00                	mov    (%eax),%eax
f0107840:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107843:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107846:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010784b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010784e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107851:	c1 e8 0c             	shr    $0xc,%eax
f0107854:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107857:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f010785c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010785f:	72 17                	jb     f0107878 <loadtime_map_frame+0x60>
f0107861:	ff 75 ec             	pushl  -0x14(%ebp)
f0107864:	68 64 20 13 f0       	push   $0xf0132064
f0107869:	68 e5 01 00 00       	push   $0x1e5
f010786e:	68 a7 1f 13 f0       	push   $0xf0131fa7
f0107873:	e8 38 89 ff ff       	call   f01001b0 <_panic>
f0107878:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010787b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107880:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0107883:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107887:	75 15                	jne    f010789e <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0107889:	83 ec 04             	sub    $0x4,%esp
f010788c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010788f:	50                   	push   %eax
f0107890:	ff 75 10             	pushl  0x10(%ebp)
f0107893:	ff 75 08             	pushl  0x8(%ebp)
f0107896:	e8 14 fd ff ff       	call   f01075af <__static_cpt>
f010789b:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f010789e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078a1:	8b 40 08             	mov    0x8(%eax),%eax
f01078a4:	40                   	inc    %eax
f01078a5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01078a8:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f01078ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01078af:	8b 55 10             	mov    0x10(%ebp),%edx
f01078b2:	c1 ea 0c             	shr    $0xc,%edx
f01078b5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01078bb:	c1 e2 02             	shl    $0x2,%edx
f01078be:	01 c2                	add    %eax,%edx
f01078c0:	8b 45 14             	mov    0x14(%ebp),%eax
f01078c3:	0b 45 f4             	or     -0xc(%ebp),%eax
f01078c6:	83 c8 01             	or     $0x1,%eax
f01078c9:	89 02                	mov    %eax,(%edx)

	return 0;
f01078cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01078d0:	c9                   	leave  
f01078d1:	c3                   	ret    

f01078d2 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f01078d2:	55                   	push   %ebp
f01078d3:	89 e5                	mov    %esp,%ebp
f01078d5:	57                   	push   %edi
f01078d6:	56                   	push   %esi
f01078d7:	53                   	push   %ebx
f01078d8:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f01078db:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f01078e2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f01078e9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f01078f0:	a1 98 ae 2b f0       	mov    0xf02bae98,%eax
f01078f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01078f8:	eb 1a                	jmp    f0107914 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f01078fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078fd:	8a 40 14             	mov    0x14(%eax),%al
f0107900:	84 c0                	test   %al,%al
f0107902:	74 05                	je     f0107909 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107904:	ff 45 e8             	incl   -0x18(%ebp)
f0107907:	eb 03                	jmp    f010790c <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107909:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f010790c:	a1 a0 ae 2b f0       	mov    0xf02baea0,%eax
f0107911:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107914:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107918:	74 07                	je     f0107921 <calculate_available_frames+0x4f>
f010791a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010791d:	8b 00                	mov    (%eax),%eax
f010791f:	eb 05                	jmp    f0107926 <calculate_available_frames+0x54>
f0107921:	b8 00 00 00 00       	mov    $0x0,%eax
f0107926:	a3 a0 ae 2b f0       	mov    %eax,0xf02baea0
f010792b:	a1 a0 ae 2b f0       	mov    0xf02baea0,%eax
f0107930:	85 c0                	test   %eax,%eax
f0107932:	75 c6                	jne    f01078fa <calculate_available_frames+0x28>
f0107934:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107938:	75 c0                	jne    f01078fa <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f010793a:	a1 00 2b 25 f0       	mov    0xf0252b00,%eax
f010793f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107942:	eb 0b                	jmp    f010794f <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0107944:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107947:	a1 08 2b 25 f0       	mov    0xf0252b08,%eax
f010794c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010794f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107953:	74 07                	je     f010795c <calculate_available_frames+0x8a>
f0107955:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107958:	8b 00                	mov    (%eax),%eax
f010795a:	eb 05                	jmp    f0107961 <calculate_available_frames+0x8f>
f010795c:	b8 00 00 00 00       	mov    $0x0,%eax
f0107961:	a3 08 2b 25 f0       	mov    %eax,0xf0252b08
f0107966:	a1 08 2b 25 f0       	mov    0xf0252b08,%eax
f010796b:	85 c0                	test   %eax,%eax
f010796d:	75 d5                	jne    f0107944 <calculate_available_frames+0x72>
f010796f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107973:	75 cf                	jne    f0107944 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0107975:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107978:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f010797b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010797e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0107981:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107984:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107987:	8b 45 08             	mov    0x8(%ebp),%eax
f010798a:	89 c3                	mov    %eax,%ebx
f010798c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010798f:	ba 03 00 00 00       	mov    $0x3,%edx
f0107994:	89 df                	mov    %ebx,%edi
f0107996:	89 c6                	mov    %eax,%esi
f0107998:	89 d1                	mov    %edx,%ecx
f010799a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010799c:	8b 45 08             	mov    0x8(%ebp),%eax
f010799f:	83 c4 20             	add    $0x20,%esp
f01079a2:	5b                   	pop    %ebx
f01079a3:	5e                   	pop    %esi
f01079a4:	5f                   	pop    %edi
f01079a5:	5d                   	pop    %ebp
f01079a6:	c2 04 00             	ret    $0x4

f01079a9 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01079a9:	55                   	push   %ebp
f01079aa:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01079ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01079af:	8b 15 d0 ae 2b f0    	mov    0xf02baed0,%edx
f01079b5:	29 d0                	sub    %edx,%eax
f01079b7:	c1 f8 02             	sar    $0x2,%eax
f01079ba:	89 c2                	mov    %eax,%edx
f01079bc:	89 d0                	mov    %edx,%eax
f01079be:	c1 e0 03             	shl    $0x3,%eax
f01079c1:	01 d0                	add    %edx,%eax
f01079c3:	c1 e0 03             	shl    $0x3,%eax
f01079c6:	01 d0                	add    %edx,%eax
f01079c8:	c1 e0 03             	shl    $0x3,%eax
f01079cb:	01 d0                	add    %edx,%eax
f01079cd:	c1 e0 03             	shl    $0x3,%eax
f01079d0:	01 d0                	add    %edx,%eax
f01079d2:	89 c1                	mov    %eax,%ecx
f01079d4:	c1 e1 0f             	shl    $0xf,%ecx
f01079d7:	01 c8                	add    %ecx,%eax
f01079d9:	c1 e0 03             	shl    $0x3,%eax
f01079dc:	01 d0                	add    %edx,%eax
f01079de:	f7 d8                	neg    %eax
}
f01079e0:	5d                   	pop    %ebp
f01079e1:	c3                   	ret    

f01079e2 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01079e2:	55                   	push   %ebp
f01079e3:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01079e5:	ff 75 08             	pushl  0x8(%ebp)
f01079e8:	e8 bc ff ff ff       	call   f01079a9 <to_frame_number>
f01079ed:	83 c4 04             	add    $0x4,%esp
f01079f0:	c1 e0 0c             	shl    $0xc,%eax
}
f01079f3:	c9                   	leave  
f01079f4:	c3                   	ret    

f01079f5 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01079f5:	55                   	push   %ebp
f01079f6:	89 e5                	mov    %esp,%ebp
f01079f8:	53                   	push   %ebx
f01079f9:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f01079fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01079ff:	c1 e8 0c             	shr    $0xc,%eax
f0107a02:	89 c2                	mov    %eax,%edx
f0107a04:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0107a09:	39 c2                	cmp    %eax,%edx
f0107a0b:	72 14                	jb     f0107a21 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0107a0d:	83 ec 04             	sub    $0x4,%esp
f0107a10:	68 b8 20 13 f0       	push   $0xf01320b8
f0107a15:	6a 55                	push   $0x55
f0107a17:	68 dd 20 13 f0       	push   $0xf01320dd
f0107a1c:	e8 8f 87 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0107a21:	8b 0d d0 ae 2b f0    	mov    0xf02baed0,%ecx
f0107a27:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a2a:	c1 e8 0c             	shr    $0xc,%eax
f0107a2d:	89 c2                	mov    %eax,%edx
f0107a2f:	89 d0                	mov    %edx,%eax
f0107a31:	01 c0                	add    %eax,%eax
f0107a33:	01 d0                	add    %edx,%eax
f0107a35:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107a3c:	01 d8                	add    %ebx,%eax
f0107a3e:	01 d0                	add    %edx,%eax
f0107a40:	01 c8                	add    %ecx,%eax
}
f0107a42:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107a45:	c9                   	leave  
f0107a46:	c3                   	ret    

f0107a47 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107a47:	55                   	push   %ebp
f0107a48:	89 e5                	mov    %esp,%ebp
f0107a4a:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107a4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107a54:	eb 5f                	jmp    f0107ab5 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107a56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107a59:	89 d0                	mov    %edx,%eax
f0107a5b:	01 c0                	add    %eax,%eax
f0107a5d:	01 d0                	add    %edx,%eax
f0107a5f:	01 c0                	add    %eax,%eax
f0107a61:	01 d0                	add    %edx,%eax
f0107a63:	c1 e0 02             	shl    $0x2,%eax
f0107a66:	01 d0                	add    %edx,%eax
f0107a68:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107a6f:	01 d0                	add    %edx,%eax
f0107a71:	c1 e0 04             	shl    $0x4,%eax
f0107a74:	05 40 2b 25 f0       	add    $0xf0252b40,%eax
f0107a79:	83 ec 04             	sub    $0x4,%esp
f0107a7c:	68 50 10 00 00       	push   $0x1050
f0107a81:	6a 00                	push   $0x0
f0107a83:	50                   	push   %eax
f0107a84:	e8 15 75 02 00       	call   f012ef9e <memset>
f0107a89:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107a8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107a8f:	89 d0                	mov    %edx,%eax
f0107a91:	01 c0                	add    %eax,%eax
f0107a93:	01 d0                	add    %edx,%eax
f0107a95:	01 c0                	add    %eax,%eax
f0107a97:	01 d0                	add    %edx,%eax
f0107a99:	c1 e0 02             	shl    $0x2,%eax
f0107a9c:	01 d0                	add    %edx,%eax
f0107a9e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107aa5:	01 d0                	add    %edx,%eax
f0107aa7:	c1 e0 04             	shl    $0x4,%eax
f0107aaa:	05 8d 2b 25 f0       	add    $0xf0252b8d,%eax
f0107aaf:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107ab2:	ff 45 f4             	incl   -0xc(%ebp)
f0107ab5:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107ab9:	7e 9b                	jle    f0107a56 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107abb:	90                   	nop
f0107abc:	c9                   	leave  
f0107abd:	c3                   	ret    

f0107abe <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107abe:	55                   	push   %ebp
f0107abf:	89 e5                	mov    %esp,%ebp
f0107ac1:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0107ac4:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0107acb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107ad2:	eb 34                	jmp    f0107b08 <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0107ad4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ad7:	89 d0                	mov    %edx,%eax
f0107ad9:	01 c0                	add    %eax,%eax
f0107adb:	01 d0                	add    %edx,%eax
f0107add:	01 c0                	add    %eax,%eax
f0107adf:	01 d0                	add    %edx,%eax
f0107ae1:	c1 e0 02             	shl    $0x2,%eax
f0107ae4:	01 d0                	add    %edx,%eax
f0107ae6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107aed:	01 d0                	add    %edx,%eax
f0107aef:	c1 e0 04             	shl    $0x4,%eax
f0107af2:	05 8d 2b 25 f0       	add    $0xf0252b8d,%eax
f0107af7:	8a 00                	mov    (%eax),%al
f0107af9:	84 c0                	test   %al,%al
f0107afb:	74 08                	je     f0107b05 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0107afd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b00:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107b03:	eb 09                	jmp    f0107b0e <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b05:	ff 45 f0             	incl   -0x10(%ebp)
f0107b08:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0107b0c:	7e c6                	jle    f0107ad4 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107b0e:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107b12:	75 0a                	jne    f0107b1e <allocate_share_object+0x60>
	{
		return E_NO_SHARE ;
f0107b14:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107b19:	e9 8b 00 00 00       	jmp    f0107ba9 <allocate_share_object+0xeb>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107b1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b21:	89 d0                	mov    %edx,%eax
f0107b23:	01 c0                	add    %eax,%eax
f0107b25:	01 d0                	add    %edx,%eax
f0107b27:	01 c0                	add    %eax,%eax
f0107b29:	01 d0                	add    %edx,%eax
f0107b2b:	c1 e0 02             	shl    $0x2,%eax
f0107b2e:	01 d0                	add    %edx,%eax
f0107b30:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b37:	01 d0                	add    %edx,%eax
f0107b39:	c1 e0 04             	shl    $0x4,%eax
f0107b3c:	8d 90 40 2b 25 f0    	lea    -0xfdad4c0(%eax),%edx
f0107b42:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b45:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107b47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b4a:	89 d0                	mov    %edx,%eax
f0107b4c:	01 c0                	add    %eax,%eax
f0107b4e:	01 d0                	add    %edx,%eax
f0107b50:	01 c0                	add    %eax,%eax
f0107b52:	01 d0                	add    %edx,%eax
f0107b54:	c1 e0 02             	shl    $0x2,%eax
f0107b57:	01 d0                	add    %edx,%eax
f0107b59:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b60:	01 d0                	add    %edx,%eax
f0107b62:	c1 e0 04             	shl    $0x4,%eax
f0107b65:	05 8d 2b 25 f0       	add    $0xf0252b8d,%eax
f0107b6a:	c6 00 00             	movb   $0x0,(%eax)
#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107b6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b70:	89 d0                	mov    %edx,%eax
f0107b72:	01 c0                	add    %eax,%eax
f0107b74:	01 d0                	add    %edx,%eax
f0107b76:	01 c0                	add    %eax,%eax
f0107b78:	01 d0                	add    %edx,%eax
f0107b7a:	c1 e0 02             	shl    $0x2,%eax
f0107b7d:	01 d0                	add    %edx,%eax
f0107b7f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b86:	01 d0                	add    %edx,%eax
f0107b88:	c1 e0 04             	shl    $0x4,%eax
f0107b8b:	83 c0 50             	add    $0x50,%eax
f0107b8e:	05 40 2b 25 f0       	add    $0xf0252b40,%eax
f0107b93:	83 ec 04             	sub    $0x4,%esp
f0107b96:	68 00 10 00 00       	push   $0x1000
f0107b9b:	6a 00                	push   $0x0
f0107b9d:	50                   	push   %eax
f0107b9e:	e8 fb 73 02 00       	call   f012ef9e <memset>
f0107ba3:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107ba9:	c9                   	leave  
f0107baa:	c3                   	ret    

f0107bab <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107bab:	55                   	push   %ebp
f0107bac:	89 e5                	mov    %esp,%ebp
f0107bae:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107bb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107bb8:	e9 95 00 00 00       	jmp    f0107c52 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f0107bbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bc0:	89 d0                	mov    %edx,%eax
f0107bc2:	01 c0                	add    %eax,%eax
f0107bc4:	01 d0                	add    %edx,%eax
f0107bc6:	01 c0                	add    %eax,%eax
f0107bc8:	01 d0                	add    %edx,%eax
f0107bca:	c1 e0 02             	shl    $0x2,%eax
f0107bcd:	01 d0                	add    %edx,%eax
f0107bcf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107bd6:	01 d0                	add    %edx,%eax
f0107bd8:	c1 e0 04             	shl    $0x4,%eax
f0107bdb:	05 8d 2b 25 f0       	add    $0xf0252b8d,%eax
f0107be0:	8a 00                	mov    (%eax),%al
f0107be2:	84 c0                	test   %al,%al
f0107be4:	75 68                	jne    f0107c4e <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107be6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107be9:	89 d0                	mov    %edx,%eax
f0107beb:	01 c0                	add    %eax,%eax
f0107bed:	01 d0                	add    %edx,%eax
f0107bef:	01 c0                	add    %eax,%eax
f0107bf1:	01 d0                	add    %edx,%eax
f0107bf3:	c1 e0 02             	shl    $0x2,%eax
f0107bf6:	01 d0                	add    %edx,%eax
f0107bf8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107bff:	01 d0                	add    %edx,%eax
f0107c01:	c1 e0 04             	shl    $0x4,%eax
f0107c04:	05 40 2b 25 f0       	add    $0xf0252b40,%eax
f0107c09:	8b 00                	mov    (%eax),%eax
f0107c0b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107c0e:	75 3f                	jne    f0107c4f <get_share_object_ID+0xa4>
f0107c10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c13:	89 d0                	mov    %edx,%eax
f0107c15:	01 c0                	add    %eax,%eax
f0107c17:	01 d0                	add    %edx,%eax
f0107c19:	01 c0                	add    %eax,%eax
f0107c1b:	01 d0                	add    %edx,%eax
f0107c1d:	c1 e0 02             	shl    $0x2,%eax
f0107c20:	01 d0                	add    %edx,%eax
f0107c22:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c29:	01 d0                	add    %edx,%eax
f0107c2b:	c1 e0 04             	shl    $0x4,%eax
f0107c2e:	05 40 2b 25 f0       	add    $0xf0252b40,%eax
f0107c33:	83 c0 04             	add    $0x4,%eax
f0107c36:	83 ec 08             	sub    $0x8,%esp
f0107c39:	50                   	push   %eax
f0107c3a:	ff 75 0c             	pushl  0xc(%ebp)
f0107c3d:	e8 7a 72 02 00       	call   f012eebc <strcmp>
f0107c42:	83 c4 10             	add    $0x10,%esp
f0107c45:	85 c0                	test   %eax,%eax
f0107c47:	75 06                	jne    f0107c4f <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c4c:	eb 13                	jmp    f0107c61 <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107c4e:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107c4f:	ff 45 f4             	incl   -0xc(%ebp)
f0107c52:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107c56:	0f 8e 61 ff ff ff    	jle    f0107bbd <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107c5c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107c61:	c9                   	leave  
f0107c62:	c3                   	ret    

f0107c63 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107c63:	55                   	push   %ebp
f0107c64:	89 e5                	mov    %esp,%ebp
f0107c66:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107c69:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f0107c6d:	76 0a                	jbe    f0107c79 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107c6f:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107c74:	e9 93 00 00 00       	jmp    f0107d0c <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107c79:	8b 55 08             	mov    0x8(%ebp),%edx
f0107c7c:	89 d0                	mov    %edx,%eax
f0107c7e:	01 c0                	add    %eax,%eax
f0107c80:	01 d0                	add    %edx,%eax
f0107c82:	01 c0                	add    %eax,%eax
f0107c84:	01 d0                	add    %edx,%eax
f0107c86:	c1 e0 02             	shl    $0x2,%eax
f0107c89:	01 d0                	add    %edx,%eax
f0107c8b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c92:	01 d0                	add    %edx,%eax
f0107c94:	c1 e0 04             	shl    $0x4,%eax
f0107c97:	83 c0 50             	add    $0x50,%eax
f0107c9a:	05 40 2b 25 f0       	add    $0xf0252b40,%eax
f0107c9f:	83 ec 0c             	sub    $0xc,%esp
f0107ca2:	50                   	push   %eax
f0107ca3:	e8 3e 01 00 00       	call   f0107de6 <clear_frames_storage>
f0107ca8:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107cab:	8b 55 08             	mov    0x8(%ebp),%edx
f0107cae:	89 d0                	mov    %edx,%eax
f0107cb0:	01 c0                	add    %eax,%eax
f0107cb2:	01 d0                	add    %edx,%eax
f0107cb4:	01 c0                	add    %eax,%eax
f0107cb6:	01 d0                	add    %edx,%eax
f0107cb8:	c1 e0 02             	shl    $0x2,%eax
f0107cbb:	01 d0                	add    %edx,%eax
f0107cbd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107cc4:	01 d0                	add    %edx,%eax
f0107cc6:	c1 e0 04             	shl    $0x4,%eax
f0107cc9:	05 40 2b 25 f0       	add    $0xf0252b40,%eax
f0107cce:	83 ec 04             	sub    $0x4,%esp
f0107cd1:	68 50 10 00 00       	push   $0x1050
f0107cd6:	6a 00                	push   $0x0
f0107cd8:	50                   	push   %eax
f0107cd9:	e8 c0 72 02 00       	call   f012ef9e <memset>
f0107cde:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107ce1:	8b 55 08             	mov    0x8(%ebp),%edx
f0107ce4:	89 d0                	mov    %edx,%eax
f0107ce6:	01 c0                	add    %eax,%eax
f0107ce8:	01 d0                	add    %edx,%eax
f0107cea:	01 c0                	add    %eax,%eax
f0107cec:	01 d0                	add    %edx,%eax
f0107cee:	c1 e0 02             	shl    $0x2,%eax
f0107cf1:	01 d0                	add    %edx,%eax
f0107cf3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107cfa:	01 d0                	add    %edx,%eax
f0107cfc:	c1 e0 04             	shl    $0x4,%eax
f0107cff:	05 8d 2b 25 f0       	add    $0xf0252b8d,%eax
f0107d04:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f0107d07:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107d0c:	c9                   	leave  
f0107d0d:	c3                   	ret    

f0107d0e <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107d0e:	55                   	push   %ebp
f0107d0f:	89 e5                	mov    %esp,%ebp
f0107d11:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107d14:	83 ec 0c             	sub    $0xc,%esp
f0107d17:	68 00 10 00 00       	push   $0x1000
f0107d1c:	e8 e0 01 00 00       	call   f0107f01 <kmalloc>
f0107d21:	83 c4 10             	add    $0x10,%esp
f0107d24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107d27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d2b:	75 17                	jne    f0107d44 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107d2d:	83 ec 04             	sub    $0x4,%esp
f0107d30:	68 f7 20 13 f0       	push   $0xf01320f7
f0107d35:	68 a6 00 00 00       	push   $0xa6
f0107d3a:	68 14 21 13 f0       	push   $0xf0132114
f0107d3f:	e8 6c 84 ff ff       	call   f01001b0 <_panic>
	}
	return frames_storage;
f0107d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107d47:	c9                   	leave  
f0107d48:	c3                   	ret    

f0107d49 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107d49:	55                   	push   %ebp
f0107d4a:	89 e5                	mov    %esp,%ebp
f0107d4c:	53                   	push   %ebx
f0107d4d:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107d50:	8b 45 10             	mov    0x10(%ebp),%eax
f0107d53:	c1 e0 0c             	shl    $0xc,%eax
f0107d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107d59:	83 ec 04             	sub    $0x4,%esp
f0107d5c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107d5f:	50                   	push   %eax
f0107d60:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d63:	ff 75 08             	pushl  0x8(%ebp)
f0107d66:	e8 1e f7 ff ff       	call   f0107489 <get_page_table>
f0107d6b:	83 c4 10             	add    $0x10,%esp
f0107d6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107d71:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107d75:	75 15                	jne    f0107d8c <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107d77:	83 ec 04             	sub    $0x4,%esp
f0107d7a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107d7d:	50                   	push   %eax
f0107d7e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d81:	ff 75 08             	pushl  0x8(%ebp)
f0107d84:	e8 26 f8 ff ff       	call   f01075af <__static_cpt>
f0107d89:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107d8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107d92:	c1 ea 0c             	shr    $0xc,%edx
f0107d95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107d9b:	c1 e2 02             	shl    $0x2,%edx
f0107d9e:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107da1:	83 ec 0c             	sub    $0xc,%esp
f0107da4:	ff 75 0c             	pushl  0xc(%ebp)
f0107da7:	e8 36 fc ff ff       	call   f01079e2 <to_physical_address>
f0107dac:	83 c4 10             	add    $0x10,%esp
f0107daf:	83 c8 01             	or     $0x1,%eax
f0107db2:	89 03                	mov    %eax,(%ebx)
}
f0107db4:	90                   	nop
f0107db5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107db8:	c9                   	leave  
f0107db9:	c3                   	ret    

f0107dba <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107dba:	55                   	push   %ebp
f0107dbb:	89 e5                	mov    %esp,%ebp
f0107dbd:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dc3:	c1 e0 0c             	shl    $0xc,%eax
f0107dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107dc9:	83 ec 04             	sub    $0x4,%esp
f0107dcc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107dcf:	50                   	push   %eax
f0107dd0:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dd3:	ff 75 08             	pushl  0x8(%ebp)
f0107dd6:	e8 46 f9 ff ff       	call   f0107721 <get_frame_info>
f0107ddb:	83 c4 10             	add    $0x10,%esp
f0107dde:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107de1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107de4:	c9                   	leave  
f0107de5:	c3                   	ret    

f0107de6 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107de6:	55                   	push   %ebp
f0107de7:	89 e5                	mov    %esp,%ebp
f0107de9:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0107dec:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107df3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107dfa:	eb 5b                	jmp    f0107e57 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0107dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107dff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e06:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e09:	01 d0                	add    %edx,%eax
f0107e0b:	8b 00                	mov    (%eax),%eax
f0107e0d:	85 c0                	test   %eax,%eax
f0107e0f:	74 43                	je     f0107e54 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0107e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e14:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e1e:	01 d0                	add    %edx,%eax
f0107e20:	8b 00                	mov    (%eax),%eax
f0107e22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e27:	83 ec 0c             	sub    $0xc,%esp
f0107e2a:	50                   	push   %eax
f0107e2b:	e8 c5 fb ff ff       	call   f01079f5 <to_frame_info>
f0107e30:	83 c4 10             	add    $0x10,%esp
f0107e33:	83 ec 0c             	sub    $0xc,%esp
f0107e36:	50                   	push   %eax
f0107e37:	e8 a3 f5 ff ff       	call   f01073df <free_frame>
f0107e3c:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e42:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e49:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e4c:	01 d0                	add    %edx,%eax
f0107e4e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107e54:	ff 45 f4             	incl   -0xc(%ebp)
f0107e57:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107e5e:	7e 9c                	jle    f0107dfc <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107e60:	90                   	nop
f0107e61:	c9                   	leave  
f0107e62:	c3                   	ret    

f0107e63 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107e63:	55                   	push   %ebp
f0107e64:	89 e5                	mov    %esp,%ebp
f0107e66:	83 ec 18             	sub    $0x18,%esp
f0107e69:	8b 45 14             	mov    0x14(%ebp),%eax
f0107e6c:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f0107e6f:	83 ec 04             	sub    $0x4,%esp
f0107e72:	68 38 21 13 f0       	push   $0xf0132138
f0107e77:	68 f6 00 00 00       	push   $0xf6
f0107e7c:	68 14 21 13 f0       	push   $0xf0132114
f0107e81:	e8 2a 83 ff ff       	call   f01001b0 <_panic>

f0107e86 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107e86:	55                   	push   %ebp
f0107e87:	89 e5                	mov    %esp,%ebp
f0107e89:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107e8c:	83 ec 04             	sub    $0x4,%esp
f0107e8f:	68 6c 21 13 f0       	push   $0xf013216c
f0107e94:	68 02 01 00 00       	push   $0x102
f0107e99:	68 14 21 13 f0       	push   $0xf0132114
f0107e9e:	e8 0d 83 ff ff       	call   f01001b0 <_panic>

f0107ea3 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107ea3:	55                   	push   %ebp
f0107ea4:	89 e5                	mov    %esp,%ebp
f0107ea6:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f0107ea9:	83 ec 04             	sub    $0x4,%esp
f0107eac:	68 a0 21 13 f0       	push   $0xf01321a0
f0107eb1:	68 0c 01 00 00       	push   $0x10c
f0107eb6:	68 14 21 13 f0       	push   $0xf0132114
f0107ebb:	e8 f0 82 ff ff       	call   f01001b0 <_panic>

f0107ec0 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107ec0:	55                   	push   %ebp
f0107ec1:	89 e5                	mov    %esp,%ebp
f0107ec3:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f0107ec6:	83 ec 04             	sub    $0x4,%esp
f0107ec9:	68 d0 21 13 f0       	push   $0xf01321d0
f0107ece:	68 1b 01 00 00       	push   $0x11b
f0107ed3:	68 14 21 13 f0       	push   $0xf0132114
f0107ed8:	e8 d3 82 ff ff       	call   f01001b0 <_panic>

f0107edd <initialize_kheap_dynamic_allocator>:
#include <inc/dynamic_allocator.h>
#include "memory_manager.h"


int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0107edd:	55                   	push   %ebp
f0107ede:	89 e5                	mov    %esp,%ebp
f0107ee0:	83 ec 08             	sub    $0x8,%esp
	//Return:
	//	On success: 0
	//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM

	//Comment the following line(s) before start coding...
	panic("not implemented yet");
f0107ee3:	83 ec 04             	sub    $0x4,%esp
f0107ee6:	68 00 22 13 f0       	push   $0xf0132200
f0107eeb:	6a 13                	push   $0x13
f0107eed:	68 14 22 13 f0       	push   $0xf0132214
f0107ef2:	e8 b9 82 ff ff       	call   f01001b0 <_panic>

f0107ef7 <sbrk>:
	return 0;
}

void* sbrk(int increment)
{
f0107ef7:	55                   	push   %ebp
f0107ef8:	89 e5                	mov    %esp,%ebp
	 * 	3) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0107efa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	panic("not implemented yet");
}
f0107eff:	5d                   	pop    %ebp
f0107f00:	c3                   	ret    

f0107f01 <kmalloc>:


void* kmalloc(unsigned int size)
{
f0107f01:	55                   	push   %ebp
f0107f02:	89 e5                	mov    %esp,%ebp
f0107f04:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #03] [1] KERNEL HEAP - kmalloc()
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	//change this "return" according to your answer
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0107f07:	83 ec 04             	sub    $0x4,%esp
f0107f0a:	68 28 22 13 f0       	push   $0xf0132228
f0107f0f:	6a 36                	push   $0x36
f0107f11:	68 14 22 13 f0       	push   $0xf0132214
f0107f16:	e8 f2 83 ff ff       	call   f010030d <_panic_into_prompt>

f0107f1b <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f0107f1b:	55                   	push   %ebp
f0107f1c:	89 e5                	mov    %esp,%ebp
f0107f1e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0107f21:	83 ec 04             	sub    $0x4,%esp
f0107f24:	68 50 22 13 f0       	push   $0xf0132250
f0107f29:	6a 3f                	push   $0x3f
f0107f2b:	68 14 22 13 f0       	push   $0xf0132214
f0107f30:	e8 7b 82 ff ff       	call   f01001b0 <_panic>

f0107f35 <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107f35:	55                   	push   %ebp
f0107f36:	89 e5                	mov    %esp,%ebp
f0107f38:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #05] [1] KERNEL HEAP - kheap_virtual_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0107f3b:	83 ec 04             	sub    $0x4,%esp
f0107f3e:	68 74 22 13 f0       	push   $0xf0132274
f0107f43:	6a 47                	push   $0x47
f0107f45:	68 14 22 13 f0       	push   $0xf0132214
f0107f4a:	e8 61 82 ff ff       	call   f01001b0 <_panic>

f0107f4f <kheap_physical_address>:
	//change this "return" according to your answer
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107f4f:	55                   	push   %ebp
f0107f50:	89 e5                	mov    %esp,%ebp
f0107f52:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #06] [1] KERNEL HEAP - kheap_physical_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107f55:	83 ec 04             	sub    $0x4,%esp
f0107f58:	68 a8 22 13 f0       	push   $0xf01322a8
f0107f5d:	6a 54                	push   $0x54
f0107f5f:	68 14 22 13 f0       	push   $0xf0132214
f0107f64:	e8 47 82 ff ff       	call   f01001b0 <_panic>

f0107f69 <kfreeall>:
	return 0;
}


void kfreeall()
{
f0107f69:	55                   	push   %ebp
f0107f6a:	89 e5                	mov    %esp,%ebp
f0107f6c:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107f6f:	83 ec 04             	sub    $0x4,%esp
f0107f72:	68 dd 22 13 f0       	push   $0xf01322dd
f0107f77:	6a 5d                	push   $0x5d
f0107f79:	68 14 22 13 f0       	push   $0xf0132214
f0107f7e:	e8 2d 82 ff ff       	call   f01001b0 <_panic>

f0107f83 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107f83:	55                   	push   %ebp
f0107f84:	89 e5                	mov    %esp,%ebp
f0107f86:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107f89:	83 ec 04             	sub    $0x4,%esp
f0107f8c:	68 dd 22 13 f0       	push   $0xf01322dd
f0107f91:	6a 63                	push   $0x63
f0107f93:	68 14 22 13 f0       	push   $0xf0132214
f0107f98:	e8 13 82 ff ff       	call   f01001b0 <_panic>

f0107f9d <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107f9d:	55                   	push   %ebp
f0107f9e:	89 e5                	mov    %esp,%ebp
f0107fa0:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107fa3:	83 ec 04             	sub    $0x4,%esp
f0107fa6:	68 dd 22 13 f0       	push   $0xf01322dd
f0107fab:	6a 68                	push   $0x68
f0107fad:	68 14 22 13 f0       	push   $0xf0132214
f0107fb2:	e8 f9 81 ff ff       	call   f01001b0 <_panic>

f0107fb7 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107fb7:	55                   	push   %ebp
f0107fb8:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - BONUS] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	return NULL;
f0107fba:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f0107fbf:	5d                   	pop    %ebp
f0107fc0:	c3                   	ret    

f0107fc1 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107fc1:	55                   	push   %ebp
f0107fc2:	89 e5                	mov    %esp,%ebp
f0107fc4:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107fc7:	83 ec 04             	sub    $0x4,%esp
f0107fca:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107fcd:	50                   	push   %eax
f0107fce:	ff 75 0c             	pushl  0xc(%ebp)
f0107fd1:	ff 75 08             	pushl  0x8(%ebp)
f0107fd4:	e8 b0 f4 ff ff       	call   f0107489 <get_page_table>
f0107fd9:	83 c4 10             	add    $0x10,%esp
f0107fdc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0107fdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107fe2:	85 c0                	test   %eax,%eax
f0107fe4:	74 64                	je     f010804a <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0107fe6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107fe9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fec:	c1 ea 0c             	shr    $0xc,%edx
f0107fef:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ff5:	c1 e2 02             	shl    $0x2,%edx
f0107ff8:	01 c2                	add    %eax,%edx
f0107ffa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ffd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108000:	c1 e9 0c             	shr    $0xc,%ecx
f0108003:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108009:	c1 e1 02             	shl    $0x2,%ecx
f010800c:	01 c8                	add    %ecx,%eax
f010800e:	8b 00                	mov    (%eax),%eax
f0108010:	0b 45 10             	or     0x10(%ebp),%eax
f0108013:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108015:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108018:	8b 55 0c             	mov    0xc(%ebp),%edx
f010801b:	c1 ea 0c             	shr    $0xc,%edx
f010801e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108024:	c1 e2 02             	shl    $0x2,%edx
f0108027:	01 d0                	add    %edx,%eax
f0108029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010802c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010802f:	c1 e9 0c             	shr    $0xc,%ecx
f0108032:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108038:	c1 e1 02             	shl    $0x2,%ecx
f010803b:	01 ca                	add    %ecx,%edx
f010803d:	8b 12                	mov    (%edx),%edx
f010803f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108042:	f7 d1                	not    %ecx
f0108044:	21 ca                	and    %ecx,%edx
f0108046:	89 10                	mov    %edx,(%eax)
f0108048:	eb 27                	jmp    f0108071 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f010804a:	83 ec 08             	sub    $0x8,%esp
f010804d:	ff 75 0c             	pushl  0xc(%ebp)
f0108050:	68 f0 22 13 f0       	push   $0xf01322f0
f0108055:	e8 d7 8d ff ff       	call   f0100e31 <cprintf>
f010805a:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f010805d:	83 ec 04             	sub    $0x4,%esp
f0108060:	68 18 23 13 f0       	push   $0xf0132318
f0108065:	6a 1c                	push   $0x1c
f0108067:	68 8c 23 13 f0       	push   $0xf013238c
f010806c:	e8 3f 81 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108071:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108074:	83 ec 08             	sub    $0x8,%esp
f0108077:	50                   	push   %eax
f0108078:	6a 00                	push   $0x0
f010807a:	e8 e1 ed ff ff       	call   f0106e60 <tlb_invalidate>
f010807f:	83 c4 10             	add    $0x10,%esp
}
f0108082:	90                   	nop
f0108083:	c9                   	leave  
f0108084:	c3                   	ret    

f0108085 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0108085:	55                   	push   %ebp
f0108086:	89 e5                	mov    %esp,%ebp
f0108088:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f010808b:	83 ec 04             	sub    $0x4,%esp
f010808e:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108091:	50                   	push   %eax
f0108092:	ff 75 0c             	pushl  0xc(%ebp)
f0108095:	ff 75 08             	pushl  0x8(%ebp)
f0108098:	e8 ec f3 ff ff       	call   f0107489 <get_page_table>
f010809d:	83 c4 10             	add    $0x10,%esp
f01080a0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f01080a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080a6:	85 c0                	test   %eax,%eax
f01080a8:	74 1d                	je     f01080c7 <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f01080aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080ad:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080b0:	c1 ea 0c             	shr    $0xc,%edx
f01080b3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01080b9:	c1 e2 02             	shl    $0x2,%edx
f01080bc:	01 d0                	add    %edx,%eax
f01080be:	8b 00                	mov    (%eax),%eax
f01080c0:	25 ff 0f 00 00       	and    $0xfff,%eax
f01080c5:	eb 05                	jmp    f01080cc <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f01080c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f01080cc:	c9                   	leave  
f01080cd:	c3                   	ret    

f01080ce <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f01080ce:	55                   	push   %ebp
f01080cf:	89 e5                	mov    %esp,%ebp
f01080d1:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f01080d4:	83 ec 04             	sub    $0x4,%esp
f01080d7:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01080da:	50                   	push   %eax
f01080db:	ff 75 0c             	pushl  0xc(%ebp)
f01080de:	ff 75 08             	pushl  0x8(%ebp)
f01080e1:	e8 a3 f3 ff ff       	call   f0107489 <get_page_table>
f01080e6:	83 c4 10             	add    $0x10,%esp
f01080e9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f01080ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080ef:	85 c0                	test   %eax,%eax
f01080f1:	74 46                	je     f0108139 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f01080f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080f6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080f9:	c1 ea 0c             	shr    $0xc,%edx
f01080fc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108102:	c1 e2 02             	shl    $0x2,%edx
f0108105:	01 d0                	add    %edx,%eax
f0108107:	8b 00                	mov    (%eax),%eax
f0108109:	83 ec 04             	sub    $0x4,%esp
f010810c:	50                   	push   %eax
f010810d:	ff 75 0c             	pushl  0xc(%ebp)
f0108110:	68 a8 23 13 f0       	push   $0xf01323a8
f0108115:	e8 17 8d ff ff       	call   f0100e31 <cprintf>
f010811a:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f010811d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108120:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108123:	c1 ea 0c             	shr    $0xc,%edx
f0108126:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010812c:	c1 e2 02             	shl    $0x2,%edx
f010812f:	01 d0                	add    %edx,%eax
f0108131:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108137:	eb 14                	jmp    f010814d <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108139:	83 ec 04             	sub    $0x4,%esp
f010813c:	68 d0 23 13 f0       	push   $0xf01323d0
f0108141:	6a 47                	push   $0x47
f0108143:	68 8c 23 13 f0       	push   $0xf013238c
f0108148:	e8 63 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f010814d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108150:	83 ec 08             	sub    $0x8,%esp
f0108153:	50                   	push   %eax
f0108154:	6a 00                	push   $0x0
f0108156:	e8 05 ed ff ff       	call   f0106e60 <tlb_invalidate>
f010815b:	83 c4 10             	add    $0x10,%esp
}
f010815e:	90                   	nop
f010815f:	c9                   	leave  
f0108160:	c3                   	ret    

f0108161 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108161:	55                   	push   %ebp
f0108162:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0108164:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108167:	c1 e8 16             	shr    $0x16,%eax
f010816a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108171:	8b 45 08             	mov    0x8(%ebp),%eax
f0108174:	01 d0                	add    %edx,%eax
f0108176:	8b 00                	mov    (%eax),%eax
f0108178:	83 e0 20             	and    $0x20,%eax
f010817b:	85 c0                	test   %eax,%eax
f010817d:	0f 95 c0             	setne  %al
f0108180:	0f b6 c0             	movzbl %al,%eax
}
f0108183:	5d                   	pop    %ebp
f0108184:	c3                   	ret    

f0108185 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0108185:	55                   	push   %ebp
f0108186:	89 e5                	mov    %esp,%ebp
f0108188:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f010818b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010818e:	c1 e8 16             	shr    $0x16,%eax
f0108191:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108198:	8b 45 08             	mov    0x8(%ebp),%eax
f010819b:	01 d0                	add    %edx,%eax
f010819d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081a0:	c1 ea 16             	shr    $0x16,%edx
f01081a3:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01081aa:	8b 55 08             	mov    0x8(%ebp),%edx
f01081ad:	01 ca                	add    %ecx,%edx
f01081af:	8b 12                	mov    (%edx),%edx
f01081b1:	83 e2 df             	and    $0xffffffdf,%edx
f01081b4:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01081b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081b9:	83 ec 08             	sub    $0x8,%esp
f01081bc:	50                   	push   %eax
f01081bd:	6a 00                	push   $0x0
f01081bf:	e8 9c ec ff ff       	call   f0106e60 <tlb_invalidate>
f01081c4:	83 c4 10             	add    $0x10,%esp
}
f01081c7:	90                   	nop
f01081c8:	c9                   	leave  
f01081c9:	c3                   	ret    

f01081ca <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f01081ca:	55                   	push   %ebp
f01081cb:	89 e5                	mov    %esp,%ebp
f01081cd:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f01081d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081d3:	c1 e8 16             	shr    $0x16,%eax
f01081d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01081dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01081e0:	01 d0                	add    %edx,%eax
f01081e2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01081e8:	0f 20 d8             	mov    %cr3,%eax
f01081eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01081ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01081f1:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01081f4:	90                   	nop
f01081f5:	c9                   	leave  
f01081f6:	c3                   	ret    

f01081f7 <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f01081f7:	55                   	push   %ebp
f01081f8:	89 e5                	mov    %esp,%ebp
f01081fa:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01081fd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108204:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f010820b:	eb 22                	jmp    f010822f <env_page_ws_get_size+0x38>
f010820d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108210:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108213:	89 d0                	mov    %edx,%eax
f0108215:	01 c0                	add    %eax,%eax
f0108217:	01 d0                	add    %edx,%eax
f0108219:	c1 e0 03             	shl    $0x3,%eax
f010821c:	01 c8                	add    %ecx,%eax
f010821e:	05 bc 00 00 00       	add    $0xbc,%eax
f0108223:	8a 00                	mov    (%eax),%al
f0108225:	84 c0                	test   %al,%al
f0108227:	75 03                	jne    f010822c <env_page_ws_get_size+0x35>
f0108229:	ff 45 f8             	incl   -0x8(%ebp)
f010822c:	ff 45 fc             	incl   -0x4(%ebp)
f010822f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108232:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108238:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010823b:	39 c2                	cmp    %eax,%edx
f010823d:	77 ce                	ja     f010820d <env_page_ws_get_size+0x16>
	return counter;
f010823f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108242:	c9                   	leave  
f0108243:	c3                   	ret    

f0108244 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108244:	55                   	push   %ebp
f0108245:	89 e5                	mov    %esp,%ebp
f0108247:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010824a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108251:	eb 4e                	jmp    f01082a1 <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108253:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108256:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108259:	89 d0                	mov    %edx,%eax
f010825b:	01 c0                	add    %eax,%eax
f010825d:	01 d0                	add    %edx,%eax
f010825f:	c1 e0 03             	shl    $0x3,%eax
f0108262:	01 c8                	add    %ecx,%eax
f0108264:	05 b8 00 00 00       	add    $0xb8,%eax
f0108269:	8b 00                	mov    (%eax),%eax
f010826b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010826e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108271:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108276:	89 c2                	mov    %eax,%edx
f0108278:	8b 45 0c             	mov    0xc(%ebp),%eax
f010827b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010827e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108281:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108286:	39 c2                	cmp    %eax,%edx
f0108288:	75 14                	jne    f010829e <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f010828a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010828d:	83 ec 08             	sub    $0x8,%esp
f0108290:	50                   	push   %eax
f0108291:	ff 75 08             	pushl  0x8(%ebp)
f0108294:	e8 c8 00 00 00       	call   f0108361 <env_page_ws_clear_entry>
f0108299:	83 c4 10             	add    $0x10,%esp
			break;
f010829c:	eb 13                	jmp    f01082b1 <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f010829e:	ff 45 f4             	incl   -0xc(%ebp)
f01082a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01082a4:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01082aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082ad:	39 c2                	cmp    %eax,%edx
f01082af:	77 a2                	ja     f0108253 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01082b1:	90                   	nop
f01082b2:	c9                   	leave  
f01082b3:	c3                   	ret    

f01082b4 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01082b4:	55                   	push   %ebp
f01082b5:	89 e5                	mov    %esp,%ebp
f01082b7:	53                   	push   %ebx
f01082b8:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01082bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01082be:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01082c4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01082c7:	77 16                	ja     f01082df <env_page_ws_set_entry+0x2b>
f01082c9:	68 48 24 13 f0       	push   $0xf0132448
f01082ce:	68 7e 24 13 f0       	push   $0xf013247e
f01082d3:	6a 77                	push   $0x77
f01082d5:	68 94 24 13 f0       	push   $0xf0132494
f01082da:	e8 d1 7e ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01082df:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01082e6:	76 16                	jbe    f01082fe <env_page_ws_set_entry+0x4a>
f01082e8:	68 b4 24 13 f0       	push   $0xf01324b4
f01082ed:	68 7e 24 13 f0       	push   $0xf013247e
f01082f2:	6a 78                	push   $0x78
f01082f4:	68 94 24 13 f0       	push   $0xf0132494
f01082f9:	e8 b2 7e ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01082fe:	8b 45 10             	mov    0x10(%ebp),%eax
f0108301:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108304:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108307:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010830c:	89 c1                	mov    %eax,%ecx
f010830e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108311:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108314:	89 d0                	mov    %edx,%eax
f0108316:	01 c0                	add    %eax,%eax
f0108318:	01 d0                	add    %edx,%eax
f010831a:	c1 e0 03             	shl    $0x3,%eax
f010831d:	01 d8                	add    %ebx,%eax
f010831f:	05 b8 00 00 00       	add    $0xb8,%eax
f0108324:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108326:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108329:	8b 55 0c             	mov    0xc(%ebp),%edx
f010832c:	89 d0                	mov    %edx,%eax
f010832e:	01 c0                	add    %eax,%eax
f0108330:	01 d0                	add    %edx,%eax
f0108332:	c1 e0 03             	shl    $0x3,%eax
f0108335:	01 c8                	add    %ecx,%eax
f0108337:	05 bc 00 00 00       	add    $0xbc,%eax
f010833c:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f010833f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108342:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108345:	89 d0                	mov    %edx,%eax
f0108347:	01 c0                	add    %eax,%eax
f0108349:	01 d0                	add    %edx,%eax
f010834b:	c1 e0 03             	shl    $0x3,%eax
f010834e:	01 c8                	add    %ecx,%eax
f0108350:	05 c0 00 00 00       	add    $0xc0,%eax
f0108355:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f010835b:	90                   	nop
}
f010835c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010835f:	c9                   	leave  
f0108360:	c3                   	ret    

f0108361 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108361:	55                   	push   %ebp
f0108362:	89 e5                	mov    %esp,%ebp
f0108364:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108367:	8b 45 08             	mov    0x8(%ebp),%eax
f010836a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108370:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108373:	77 19                	ja     f010838e <env_page_ws_clear_entry+0x2d>
f0108375:	68 e8 24 13 f0       	push   $0xf01324e8
f010837a:	68 7e 24 13 f0       	push   $0xf013247e
f010837f:	68 83 00 00 00       	push   $0x83
f0108384:	68 94 24 13 f0       	push   $0xf0132494
f0108389:	e8 22 7e ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f010838e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108391:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108394:	89 d0                	mov    %edx,%eax
f0108396:	01 c0                	add    %eax,%eax
f0108398:	01 d0                	add    %edx,%eax
f010839a:	c1 e0 03             	shl    $0x3,%eax
f010839d:	01 c8                	add    %ecx,%eax
f010839f:	05 b8 00 00 00       	add    $0xb8,%eax
f01083a4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01083aa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083ad:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083b0:	89 d0                	mov    %edx,%eax
f01083b2:	01 c0                	add    %eax,%eax
f01083b4:	01 d0                	add    %edx,%eax
f01083b6:	c1 e0 03             	shl    $0x3,%eax
f01083b9:	01 c8                	add    %ecx,%eax
f01083bb:	05 bc 00 00 00       	add    $0xbc,%eax
f01083c0:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01083c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083c9:	89 d0                	mov    %edx,%eax
f01083cb:	01 c0                	add    %eax,%eax
f01083cd:	01 d0                	add    %edx,%eax
f01083cf:	c1 e0 03             	shl    $0x3,%eax
f01083d2:	01 c8                	add    %ecx,%eax
f01083d4:	05 c0 00 00 00       	add    $0xc0,%eax
f01083d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01083df:	90                   	nop
f01083e0:	c9                   	leave  
f01083e1:	c3                   	ret    

f01083e2 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01083e2:	55                   	push   %ebp
f01083e3:	89 e5                	mov    %esp,%ebp
f01083e5:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01083e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01083eb:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01083f1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01083f4:	77 19                	ja     f010840f <env_page_ws_get_virtual_address+0x2d>
f01083f6:	68 e8 24 13 f0       	push   $0xf01324e8
f01083fb:	68 7e 24 13 f0       	push   $0xf013247e
f0108400:	68 8b 00 00 00       	push   $0x8b
f0108405:	68 94 24 13 f0       	push   $0xf0132494
f010840a:	e8 a1 7d ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f010840f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108412:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108415:	89 d0                	mov    %edx,%eax
f0108417:	01 c0                	add    %eax,%eax
f0108419:	01 d0                	add    %edx,%eax
f010841b:	c1 e0 03             	shl    $0x3,%eax
f010841e:	01 c8                	add    %ecx,%eax
f0108420:	05 b8 00 00 00       	add    $0xb8,%eax
f0108425:	8b 00                	mov    (%eax),%eax
f0108427:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010842a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010842d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108432:	c9                   	leave  
f0108433:	c3                   	ret    

f0108434 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108434:	55                   	push   %ebp
f0108435:	89 e5                	mov    %esp,%ebp
f0108437:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010843a:	8b 45 08             	mov    0x8(%ebp),%eax
f010843d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108443:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108446:	77 19                	ja     f0108461 <env_page_ws_get_time_stamp+0x2d>
f0108448:	68 e8 24 13 f0       	push   $0xf01324e8
f010844d:	68 7e 24 13 f0       	push   $0xf013247e
f0108452:	68 91 00 00 00       	push   $0x91
f0108457:	68 94 24 13 f0       	push   $0xf0132494
f010845c:	e8 4f 7d ff ff       	call   f01001b0 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108461:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108464:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108467:	89 d0                	mov    %edx,%eax
f0108469:	01 c0                	add    %eax,%eax
f010846b:	01 d0                	add    %edx,%eax
f010846d:	c1 e0 03             	shl    $0x3,%eax
f0108470:	01 c8                	add    %ecx,%eax
f0108472:	05 c0 00 00 00       	add    $0xc0,%eax
f0108477:	8b 00                	mov    (%eax),%eax
}
f0108479:	c9                   	leave  
f010847a:	c3                   	ret    

f010847b <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010847b:	55                   	push   %ebp
f010847c:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010847e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108481:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108484:	89 d0                	mov    %edx,%eax
f0108486:	01 c0                	add    %eax,%eax
f0108488:	01 d0                	add    %edx,%eax
f010848a:	c1 e0 03             	shl    $0x3,%eax
f010848d:	01 c8                	add    %ecx,%eax
f010848f:	05 bc 00 00 00       	add    $0xbc,%eax
f0108494:	8a 00                	mov    (%eax),%al
f0108496:	0f b6 c0             	movzbl %al,%eax
}
f0108499:	5d                   	pop    %ebp
f010849a:	c3                   	ret    

f010849b <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010849b:	55                   	push   %ebp
f010849c:	89 e5                	mov    %esp,%ebp
f010849e:	53                   	push   %ebx
f010849f:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01084a2:	83 ec 0c             	sub    $0xc,%esp
f01084a5:	6a 02                	push   $0x2
f01084a7:	e8 46 52 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f01084ac:	83 c4 10             	add    $0x10,%esp
f01084af:	85 c0                	test   %eax,%eax
f01084b1:	0f 84 fe 00 00 00    	je     f01085b5 <env_page_ws_print+0x11a>
	{
		int i = 0;
f01084b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01084be:	83 ec 0c             	sub    $0xc,%esp
f01084c1:	68 20 25 13 f0       	push   $0xf0132520
f01084c6:	e8 66 89 ff ff       	call   f0100e31 <cprintf>
f01084cb:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01084ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01084d1:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f01084d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01084da:	eb 2c                	jmp    f0108508 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01084dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084df:	8b 10                	mov    (%eax),%edx
f01084e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084e4:	8d 48 01             	lea    0x1(%eax),%ecx
f01084e7:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01084ea:	83 ec 04             	sub    $0x4,%esp
f01084ed:	52                   	push   %edx
f01084ee:	50                   	push   %eax
f01084ef:	68 3a 25 13 f0       	push   $0xf013253a
f01084f4:	e8 38 89 ff ff       	call   f0100e31 <cprintf>
f01084f9:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01084fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01084ff:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0108505:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108508:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010850c:	74 08                	je     f0108516 <env_page_ws_print+0x7b>
f010850e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108511:	8b 40 10             	mov    0x10(%eax),%eax
f0108514:	eb 05                	jmp    f010851b <env_page_ws_print+0x80>
f0108516:	b8 00 00 00 00       	mov    $0x0,%eax
f010851b:	8b 55 08             	mov    0x8(%ebp),%edx
f010851e:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0108524:	8b 45 08             	mov    0x8(%ebp),%eax
f0108527:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f010852d:	85 c0                	test   %eax,%eax
f010852f:	75 ab                	jne    f01084dc <env_page_ws_print+0x41>
f0108531:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108535:	75 a5                	jne    f01084dc <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108537:	83 ec 0c             	sub    $0xc,%esp
f010853a:	68 42 25 13 f0       	push   $0xf0132542
f010853f:	e8 ed 88 ff ff       	call   f0100e31 <cprintf>
f0108544:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108547:	8b 45 08             	mov    0x8(%ebp),%eax
f010854a:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0108550:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108553:	eb 2c                	jmp    f0108581 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108555:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108558:	8b 10                	mov    (%eax),%edx
f010855a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010855d:	8d 48 01             	lea    0x1(%eax),%ecx
f0108560:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108563:	83 ec 04             	sub    $0x4,%esp
f0108566:	52                   	push   %edx
f0108567:	50                   	push   %eax
f0108568:	68 3a 25 13 f0       	push   $0xf013253a
f010856d:	e8 bf 88 ff ff       	call   f0100e31 <cprintf>
f0108572:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108575:	8b 45 08             	mov    0x8(%ebp),%eax
f0108578:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f010857e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108581:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108585:	74 08                	je     f010858f <env_page_ws_print+0xf4>
f0108587:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010858a:	8b 40 10             	mov    0x10(%eax),%eax
f010858d:	eb 05                	jmp    f0108594 <env_page_ws_print+0xf9>
f010858f:	b8 00 00 00 00       	mov    $0x0,%eax
f0108594:	8b 55 08             	mov    0x8(%ebp),%edx
f0108597:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f010859d:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a0:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01085a6:	85 c0                	test   %eax,%eax
f01085a8:	75 ab                	jne    f0108555 <env_page_ws_print+0xba>
f01085aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01085ae:	75 a5                	jne    f0108555 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01085b0:	e9 a2 01 00 00       	jmp    f0108757 <env_page_ws_print+0x2bc>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01085b5:	83 ec 0c             	sub    $0xc,%esp
f01085b8:	68 5d 25 13 f0       	push   $0xf013255d
f01085bd:	e8 6f 88 ff ff       	call   f0100e31 <cprintf>
f01085c2:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01085c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01085cc:	e9 74 01 00 00       	jmp    f0108745 <env_page_ws_print+0x2aa>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01085d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085d7:	89 d0                	mov    %edx,%eax
f01085d9:	01 c0                	add    %eax,%eax
f01085db:	01 d0                	add    %edx,%eax
f01085dd:	c1 e0 03             	shl    $0x3,%eax
f01085e0:	01 c8                	add    %ecx,%eax
f01085e2:	05 bc 00 00 00       	add    $0xbc,%eax
f01085e7:	8a 00                	mov    (%eax),%al
f01085e9:	84 c0                	test   %al,%al
f01085eb:	74 43                	je     f0108630 <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f01085ed:	83 ec 0c             	sub    $0xc,%esp
f01085f0:	68 67 25 13 f0       	push   $0xf0132567
f01085f5:	e8 37 88 ff ff       	call   f0100e31 <cprintf>
f01085fa:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01085fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108600:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108606:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108609:	75 10                	jne    f010861b <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f010860b:	83 ec 0c             	sub    $0xc,%esp
f010860e:	68 76 25 13 f0       	push   $0xf0132576
f0108613:	e8 19 88 ff ff       	call   f0100e31 <cprintf>
f0108618:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010861b:	83 ec 0c             	sub    $0xc,%esp
f010861e:	68 7c 25 13 f0       	push   $0xf013257c
f0108623:	e8 09 88 ff ff       	call   f0100e31 <cprintf>
f0108628:	83 c4 10             	add    $0x10,%esp
				continue;
f010862b:	e9 12 01 00 00       	jmp    f0108742 <env_page_ws_print+0x2a7>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108630:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108633:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108636:	89 d0                	mov    %edx,%eax
f0108638:	01 c0                	add    %eax,%eax
f010863a:	01 d0                	add    %edx,%eax
f010863c:	c1 e0 03             	shl    $0x3,%eax
f010863f:	01 c8                	add    %ecx,%eax
f0108641:	05 b8 00 00 00       	add    $0xb8,%eax
f0108646:	8b 00                	mov    (%eax),%eax
f0108648:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f010864b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010864e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108651:	89 d0                	mov    %edx,%eax
f0108653:	01 c0                	add    %eax,%eax
f0108655:	01 d0                	add    %edx,%eax
f0108657:	c1 e0 03             	shl    $0x3,%eax
f010865a:	01 c8                	add    %ecx,%eax
f010865c:	05 c0 00 00 00       	add    $0xc0,%eax
f0108661:	8b 00                	mov    (%eax),%eax
f0108663:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108666:	8b 45 08             	mov    0x8(%ebp),%eax
f0108669:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010866f:	83 ec 08             	sub    $0x8,%esp
f0108672:	ff 75 e8             	pushl  -0x18(%ebp)
f0108675:	50                   	push   %eax
f0108676:	e8 0a fa ff ff       	call   f0108085 <pt_get_page_permissions>
f010867b:	83 c4 10             	add    $0x10,%esp
f010867e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108681:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108684:	83 e0 40             	and    $0x40,%eax
f0108687:	85 c0                	test   %eax,%eax
f0108689:	0f 95 c0             	setne  %al
f010868c:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f010868f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108692:	83 e0 20             	and    $0x20,%eax
f0108695:	85 c0                	test   %eax,%eax
f0108697:	0f 95 c0             	setne  %al
f010869a:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010869d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086a0:	25 00 02 00 00       	and    $0x200,%eax
f01086a5:	85 c0                	test   %eax,%eax
f01086a7:	0f 95 c0             	setne  %al
f01086aa:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f01086ad:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086b0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01086b3:	89 d0                	mov    %edx,%eax
f01086b5:	01 c0                	add    %eax,%eax
f01086b7:	01 d0                	add    %edx,%eax
f01086b9:	c1 e0 03             	shl    $0x3,%eax
f01086bc:	01 c8                	add    %ecx,%eax
f01086be:	05 b8 00 00 00       	add    $0xb8,%eax
f01086c3:	8b 00                	mov    (%eax),%eax
f01086c5:	83 ec 04             	sub    $0x4,%esp
f01086c8:	50                   	push   %eax
f01086c9:	ff 75 ec             	pushl  -0x14(%ebp)
f01086cc:	68 7e 25 13 f0       	push   $0xf013257e
f01086d1:	e8 5b 87 ff ff       	call   f0100e31 <cprintf>
f01086d6:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01086d9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01086df:	89 d0                	mov    %edx,%eax
f01086e1:	01 c0                	add    %eax,%eax
f01086e3:	01 d0                	add    %edx,%eax
f01086e5:	c1 e0 03             	shl    $0x3,%eax
f01086e8:	01 c8                	add    %ecx,%eax
f01086ea:	05 c4 00 00 00       	add    $0xc4,%eax
f01086ef:	8b 18                	mov    (%eax),%ebx
f01086f1:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01086f5:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01086f9:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01086fd:	83 ec 08             	sub    $0x8,%esp
f0108700:	53                   	push   %ebx
f0108701:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108704:	51                   	push   %ecx
f0108705:	52                   	push   %edx
f0108706:	50                   	push   %eax
f0108707:	68 90 25 13 f0       	push   $0xf0132590
f010870c:	e8 20 87 ff ff       	call   f0100e31 <cprintf>
f0108711:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108714:	8b 45 08             	mov    0x8(%ebp),%eax
f0108717:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010871d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108720:	75 10                	jne    f0108732 <env_page_ws_print+0x297>
			{
				cprintf(" <--");
f0108722:	83 ec 0c             	sub    $0xc,%esp
f0108725:	68 d7 25 13 f0       	push   $0xf01325d7
f010872a:	e8 02 87 ff ff       	call   f0100e31 <cprintf>
f010872f:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108732:	83 ec 0c             	sub    $0xc,%esp
f0108735:	68 7c 25 13 f0       	push   $0xf013257c
f010873a:	e8 f2 86 ff ff       	call   f0100e31 <cprintf>
f010873f:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108742:	ff 45 ec             	incl   -0x14(%ebp)
f0108745:	8b 45 08             	mov    0x8(%ebp),%eax
f0108748:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010874e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108751:	0f 87 7a fe ff ff    	ja     f01085d1 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108757:	90                   	nop
f0108758:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010875b:	c9                   	leave  
f010875c:	c3                   	ret    

f010875d <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f010875d:	55                   	push   %ebp
f010875e:	89 e5                	mov    %esp,%ebp
f0108760:	53                   	push   %ebx
f0108761:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0108764:	83 ec 0c             	sub    $0xc,%esp
f0108767:	68 dc 25 13 f0       	push   $0xf01325dc
f010876c:	e8 c0 86 ff ff       	call   f0100e31 <cprintf>
f0108771:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108774:	83 ec 0c             	sub    $0xc,%esp
f0108777:	68 11 26 13 f0       	push   $0xf0132611
f010877c:	e8 b0 86 ff ff       	call   f0100e31 <cprintf>
f0108781:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108784:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010878b:	e9 19 01 00 00       	jmp    f01088a9 <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f0108790:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108793:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108796:	89 d0                	mov    %edx,%eax
f0108798:	01 c0                	add    %eax,%eax
f010879a:	01 d0                	add    %edx,%eax
f010879c:	c1 e0 03             	shl    $0x3,%eax
f010879f:	01 c8                	add    %ecx,%eax
f01087a1:	05 84 d5 01 00       	add    $0x1d584,%eax
f01087a6:	8a 00                	mov    (%eax),%al
f01087a8:	84 c0                	test   %al,%al
f01087aa:	74 43                	je     f01087ef <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f01087ac:	83 ec 0c             	sub    $0xc,%esp
f01087af:	68 67 25 13 f0       	push   $0xf0132567
f01087b4:	e8 78 86 ff ff       	call   f0100e31 <cprintf>
f01087b9:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f01087bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01087bf:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f01087c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01087c8:	75 10                	jne    f01087da <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f01087ca:	83 ec 0c             	sub    $0xc,%esp
f01087cd:	68 76 25 13 f0       	push   $0xf0132576
f01087d2:	e8 5a 86 ff ff       	call   f0100e31 <cprintf>
f01087d7:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01087da:	83 ec 0c             	sub    $0xc,%esp
f01087dd:	68 7c 25 13 f0       	push   $0xf013257c
f01087e2:	e8 4a 86 ff ff       	call   f0100e31 <cprintf>
f01087e7:	83 c4 10             	add    $0x10,%esp
			continue;
f01087ea:	e9 b7 00 00 00       	jmp    f01088a6 <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01087ef:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087f5:	89 d0                	mov    %edx,%eax
f01087f7:	01 c0                	add    %eax,%eax
f01087f9:	01 d0                	add    %edx,%eax
f01087fb:	c1 e0 03             	shl    $0x3,%eax
f01087fe:	01 c8                	add    %ecx,%eax
f0108800:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108805:	8b 00                	mov    (%eax),%eax
f0108807:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f010880a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010880d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108810:	89 d0                	mov    %edx,%eax
f0108812:	01 c0                	add    %eax,%eax
f0108814:	01 d0                	add    %edx,%eax
f0108816:	c1 e0 03             	shl    $0x3,%eax
f0108819:	01 c8                	add    %ecx,%eax
f010881b:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108820:	8b 00                	mov    (%eax),%eax
f0108822:	83 ec 04             	sub    $0x4,%esp
f0108825:	50                   	push   %eax
f0108826:	ff 75 f4             	pushl  -0xc(%ebp)
f0108829:	68 1c 26 13 f0       	push   $0xf013261c
f010882e:	e8 fe 85 ff ff       	call   f0100e31 <cprintf>
f0108833:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108836:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108839:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010883c:	89 d0                	mov    %edx,%eax
f010883e:	01 c0                	add    %eax,%eax
f0108840:	01 d0                	add    %edx,%eax
f0108842:	c1 e0 03             	shl    $0x3,%eax
f0108845:	01 c8                	add    %ecx,%eax
f0108847:	05 88 d5 01 00       	add    $0x1d588,%eax
f010884c:	8b 18                	mov    (%eax),%ebx
f010884e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108851:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108857:	83 ec 08             	sub    $0x8,%esp
f010885a:	ff 75 f0             	pushl  -0x10(%ebp)
f010885d:	50                   	push   %eax
f010885e:	e8 fe f8 ff ff       	call   f0108161 <pd_is_table_used>
f0108863:	83 c4 10             	add    $0x10,%esp
f0108866:	83 ec 04             	sub    $0x4,%esp
f0108869:	53                   	push   %ebx
f010886a:	50                   	push   %eax
f010886b:	68 34 26 13 f0       	push   $0xf0132634
f0108870:	e8 bc 85 ff ff       	call   f0100e31 <cprintf>
f0108875:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108878:	8b 45 08             	mov    0x8(%ebp),%eax
f010887b:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108881:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108884:	75 10                	jne    f0108896 <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f0108886:	83 ec 0c             	sub    $0xc,%esp
f0108889:	68 d7 25 13 f0       	push   $0xf01325d7
f010888e:	e8 9e 85 ff ff       	call   f0100e31 <cprintf>
f0108893:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108896:	83 ec 0c             	sub    $0xc,%esp
f0108899:	68 7c 25 13 f0       	push   $0xf013257c
f010889e:	e8 8e 85 ff ff       	call   f0100e31 <cprintf>
f01088a3:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01088a6:	ff 45 f4             	incl   -0xc(%ebp)
f01088a9:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01088ad:	0f 86 dd fe ff ff    	jbe    f0108790 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01088b3:	90                   	nop
f01088b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01088b7:	c9                   	leave  
f01088b8:	c3                   	ret    

f01088b9 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f01088b9:	55                   	push   %ebp
f01088ba:	89 e5                	mov    %esp,%ebp
f01088bc:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01088bf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01088c6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01088cd:	eb 22                	jmp    f01088f1 <env_table_ws_get_size+0x38>
f01088cf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088d2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01088d5:	89 d0                	mov    %edx,%eax
f01088d7:	01 c0                	add    %eax,%eax
f01088d9:	01 d0                	add    %edx,%eax
f01088db:	c1 e0 03             	shl    $0x3,%eax
f01088de:	01 c8                	add    %ecx,%eax
f01088e0:	05 84 d5 01 00       	add    $0x1d584,%eax
f01088e5:	8a 00                	mov    (%eax),%al
f01088e7:	84 c0                	test   %al,%al
f01088e9:	75 03                	jne    f01088ee <env_table_ws_get_size+0x35>
f01088eb:	ff 45 f8             	incl   -0x8(%ebp)
f01088ee:	ff 45 fc             	incl   -0x4(%ebp)
f01088f1:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01088f5:	7e d8                	jle    f01088cf <env_table_ws_get_size+0x16>
	return counter;
f01088f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01088fa:	c9                   	leave  
f01088fb:	c3                   	ret    

f01088fc <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01088fc:	55                   	push   %ebp
f01088fd:	89 e5                	mov    %esp,%ebp
f01088ff:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108902:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108909:	eb 4e                	jmp    f0108959 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f010890b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010890e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108911:	89 d0                	mov    %edx,%eax
f0108913:	01 c0                	add    %eax,%eax
f0108915:	01 d0                	add    %edx,%eax
f0108917:	c1 e0 03             	shl    $0x3,%eax
f010891a:	01 c8                	add    %ecx,%eax
f010891c:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108921:	8b 00                	mov    (%eax),%eax
f0108923:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108926:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108929:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010892e:	89 c2                	mov    %eax,%edx
f0108930:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108933:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108936:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108939:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010893e:	39 c2                	cmp    %eax,%edx
f0108940:	75 14                	jne    f0108956 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0108942:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108945:	83 ec 08             	sub    $0x8,%esp
f0108948:	50                   	push   %eax
f0108949:	ff 75 08             	pushl  0x8(%ebp)
f010894c:	e8 bc 00 00 00       	call   f0108a0d <env_table_ws_clear_entry>
f0108951:	83 c4 10             	add    $0x10,%esp
			break;
f0108954:	eb 09                	jmp    f010895f <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0108956:	ff 45 f4             	incl   -0xc(%ebp)
f0108959:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010895d:	7e ac                	jle    f010890b <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f010895f:	90                   	nop
f0108960:	c9                   	leave  
f0108961:	c3                   	ret    

f0108962 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108962:	55                   	push   %ebp
f0108963:	89 e5                	mov    %esp,%ebp
f0108965:	53                   	push   %ebx
f0108966:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108969:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010896d:	76 19                	jbe    f0108988 <env_table_ws_set_entry+0x26>
f010896f:	68 58 26 13 f0       	push   $0xf0132658
f0108974:	68 7e 24 13 f0       	push   $0xf013247e
f0108979:	68 07 01 00 00       	push   $0x107
f010897e:	68 94 24 13 f0       	push   $0xf0132494
f0108983:	e8 28 78 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108988:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f010898f:	76 19                	jbe    f01089aa <env_table_ws_set_entry+0x48>
f0108991:	68 b4 24 13 f0       	push   $0xf01324b4
f0108996:	68 7e 24 13 f0       	push   $0xf013247e
f010899b:	68 08 01 00 00       	push   $0x108
f01089a0:	68 94 24 13 f0       	push   $0xf0132494
f01089a5:	e8 06 78 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f01089aa:	8b 45 10             	mov    0x10(%ebp),%eax
f01089ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01089b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089b3:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01089b8:	89 c1                	mov    %eax,%ecx
f01089ba:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01089bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089c0:	89 d0                	mov    %edx,%eax
f01089c2:	01 c0                	add    %eax,%eax
f01089c4:	01 d0                	add    %edx,%eax
f01089c6:	c1 e0 03             	shl    $0x3,%eax
f01089c9:	01 d8                	add    %ebx,%eax
f01089cb:	05 80 d5 01 00       	add    $0x1d580,%eax
f01089d0:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01089d2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089d5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089d8:	89 d0                	mov    %edx,%eax
f01089da:	01 c0                	add    %eax,%eax
f01089dc:	01 d0                	add    %edx,%eax
f01089de:	c1 e0 03             	shl    $0x3,%eax
f01089e1:	01 c8                	add    %ecx,%eax
f01089e3:	05 84 d5 01 00       	add    $0x1d584,%eax
f01089e8:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01089eb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089ee:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089f1:	89 d0                	mov    %edx,%eax
f01089f3:	01 c0                	add    %eax,%eax
f01089f5:	01 d0                	add    %edx,%eax
f01089f7:	c1 e0 03             	shl    $0x3,%eax
f01089fa:	01 c8                	add    %ecx,%eax
f01089fc:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108a01:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108a07:	90                   	nop
}
f0108a08:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108a0b:	c9                   	leave  
f0108a0c:	c3                   	ret    

f0108a0d <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108a0d:	55                   	push   %ebp
f0108a0e:	89 e5                	mov    %esp,%ebp
f0108a10:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108a13:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108a17:	76 19                	jbe    f0108a32 <env_table_ws_clear_entry+0x25>
f0108a19:	68 58 26 13 f0       	push   $0xf0132658
f0108a1e:	68 7e 24 13 f0       	push   $0xf013247e
f0108a23:	68 13 01 00 00       	push   $0x113
f0108a28:	68 94 24 13 f0       	push   $0xf0132494
f0108a2d:	e8 7e 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108a32:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a35:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a38:	89 d0                	mov    %edx,%eax
f0108a3a:	01 c0                	add    %eax,%eax
f0108a3c:	01 d0                	add    %edx,%eax
f0108a3e:	c1 e0 03             	shl    $0x3,%eax
f0108a41:	01 c8                	add    %ecx,%eax
f0108a43:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108a48:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108a4e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a51:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a54:	89 d0                	mov    %edx,%eax
f0108a56:	01 c0                	add    %eax,%eax
f0108a58:	01 d0                	add    %edx,%eax
f0108a5a:	c1 e0 03             	shl    $0x3,%eax
f0108a5d:	01 c8                	add    %ecx,%eax
f0108a5f:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108a64:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108a67:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a6d:	89 d0                	mov    %edx,%eax
f0108a6f:	01 c0                	add    %eax,%eax
f0108a71:	01 d0                	add    %edx,%eax
f0108a73:	c1 e0 03             	shl    $0x3,%eax
f0108a76:	01 c8                	add    %ecx,%eax
f0108a78:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108a7d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108a83:	90                   	nop
f0108a84:	c9                   	leave  
f0108a85:	c3                   	ret    

f0108a86 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108a86:	55                   	push   %ebp
f0108a87:	89 e5                	mov    %esp,%ebp
f0108a89:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108a8c:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108a90:	76 19                	jbe    f0108aab <env_table_ws_get_virtual_address+0x25>
f0108a92:	68 58 26 13 f0       	push   $0xf0132658
f0108a97:	68 7e 24 13 f0       	push   $0xf013247e
f0108a9c:	68 1b 01 00 00       	push   $0x11b
f0108aa1:	68 94 24 13 f0       	push   $0xf0132494
f0108aa6:	e8 05 77 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108aab:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108aae:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ab1:	89 d0                	mov    %edx,%eax
f0108ab3:	01 c0                	add    %eax,%eax
f0108ab5:	01 d0                	add    %edx,%eax
f0108ab7:	c1 e0 03             	shl    $0x3,%eax
f0108aba:	01 c8                	add    %ecx,%eax
f0108abc:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108ac1:	8b 00                	mov    (%eax),%eax
f0108ac3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ac9:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108ace:	c9                   	leave  
f0108acf:	c3                   	ret    

f0108ad0 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108ad0:	55                   	push   %ebp
f0108ad1:	89 e5                	mov    %esp,%ebp
f0108ad3:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108ad6:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108ada:	76 19                	jbe    f0108af5 <env_table_ws_get_time_stamp+0x25>
f0108adc:	68 58 26 13 f0       	push   $0xf0132658
f0108ae1:	68 7e 24 13 f0       	push   $0xf013247e
f0108ae6:	68 22 01 00 00       	push   $0x122
f0108aeb:	68 94 24 13 f0       	push   $0xf0132494
f0108af0:	e8 bb 76 ff ff       	call   f01001b0 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108af5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108af8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108afb:	89 d0                	mov    %edx,%eax
f0108afd:	01 c0                	add    %eax,%eax
f0108aff:	01 d0                	add    %edx,%eax
f0108b01:	c1 e0 03             	shl    $0x3,%eax
f0108b04:	01 c8                	add    %ecx,%eax
f0108b06:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108b0b:	8b 00                	mov    (%eax),%eax
}
f0108b0d:	c9                   	leave  
f0108b0e:	c3                   	ret    

f0108b0f <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108b0f:	55                   	push   %ebp
f0108b10:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108b12:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b15:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b18:	89 d0                	mov    %edx,%eax
f0108b1a:	01 c0                	add    %eax,%eax
f0108b1c:	01 d0                	add    %edx,%eax
f0108b1e:	c1 e0 03             	shl    $0x3,%eax
f0108b21:	01 c8                	add    %ecx,%eax
f0108b23:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108b28:	8a 00                	mov    (%eax),%al
f0108b2a:	0f b6 c0             	movzbl %al,%eax
}
f0108b2d:	5d                   	pop    %ebp
f0108b2e:	c3                   	ret    

f0108b2f <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108b2f:	55                   	push   %ebp
f0108b30:	89 e5                	mov    %esp,%ebp
f0108b32:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f0108b35:	83 ec 04             	sub    $0x4,%esp
f0108b38:	68 8c 26 13 f0       	push   $0xf013268c
f0108b3d:	6a 1f                	push   $0x1f
f0108b3f:	68 ba 26 13 f0       	push   $0xf01326ba
f0108b44:	e8 67 76 ff ff       	call   f01001b0 <_panic>

f0108b49 <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108b49:	55                   	push   %ebp
f0108b4a:	89 e5                	mov    %esp,%ebp
f0108b4c:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f0108b4f:	83 ec 04             	sub    $0x4,%esp
f0108b52:	68 d8 26 13 f0       	push   $0xf01326d8
f0108b57:	6a 32                	push   $0x32
f0108b59:	68 ba 26 13 f0       	push   $0xf01326ba
f0108b5e:	e8 4d 76 ff ff       	call   f01001b0 <_panic>

f0108b63 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108b63:	55                   	push   %ebp
f0108b64:	89 e5                	mov    %esp,%ebp
f0108b66:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f0108b69:	83 ec 04             	sub    $0x4,%esp
f0108b6c:	68 08 27 13 f0       	push   $0xf0132708
f0108b71:	6a 41                	push   $0x41
f0108b73:	68 ba 26 13 f0       	push   $0xf01326ba
f0108b78:	e8 33 76 ff ff       	call   f01001b0 <_panic>

f0108b7d <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108b7d:	55                   	push   %ebp
f0108b7e:	89 e5                	mov    %esp,%ebp
f0108b80:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0108b83:	83 ec 04             	sub    $0x4,%esp
f0108b86:	68 34 27 13 f0       	push   $0xf0132734
f0108b8b:	6a 4e                	push   $0x4e
f0108b8d:	68 ba 26 13 f0       	push   $0xf01326ba
f0108b92:	e8 19 76 ff ff       	call   f01001b0 <_panic>

f0108b97 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108b97:	55                   	push   %ebp
f0108b98:	89 e5                	mov    %esp,%ebp
f0108b9a:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108b9d:	83 ec 04             	sub    $0x4,%esp
f0108ba0:	68 64 27 13 f0       	push   $0xf0132764
f0108ba5:	6a 57                	push   $0x57
f0108ba7:	68 ba 26 13 f0       	push   $0xf01326ba
f0108bac:	e8 ff 75 ff ff       	call   f01001b0 <_panic>

f0108bb1 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108bb1:	55                   	push   %ebp
f0108bb2:	89 e5                	mov    %esp,%ebp
f0108bb4:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f0108bb7:	83 ec 04             	sub    $0x4,%esp
f0108bba:	68 9c 27 13 f0       	push   $0xf013279c
f0108bbf:	6a 63                	push   $0x63
f0108bc1:	68 ba 26 13 f0       	push   $0xf01326ba
f0108bc6:	e8 e5 75 ff ff       	call   f01001b0 <_panic>

f0108bcb <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108bcb:	55                   	push   %ebp
f0108bcc:	89 e5                	mov    %esp,%ebp
f0108bce:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108bd1:	e8 2e 4e 02 00       	call   f012da04 <inctst>
	return;
f0108bd6:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #10] [2] USER HEAP - allocate_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f0108bd7:	c9                   	leave  
f0108bd8:	c3                   	ret    

f0108bd9 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108bd9:	55                   	push   %ebp
f0108bda:	89 e5                	mov    %esp,%ebp
f0108bdc:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108bdf:	e8 20 4e 02 00       	call   f012da04 <inctst>
	return;
f0108be4:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f0108be5:	c9                   	leave  
f0108be6:	c3                   	ret    

f0108be7 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108be7:	55                   	push   %ebp
f0108be8:	89 e5                	mov    %esp,%ebp
f0108bea:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108bed:	83 ec 04             	sub    $0x4,%esp
f0108bf0:	68 d4 27 13 f0       	push   $0xf01327d4
f0108bf5:	68 99 00 00 00       	push   $0x99
f0108bfa:	68 ba 26 13 f0       	push   $0xf01326ba
f0108bff:	e8 ac 75 ff ff       	call   f01001b0 <_panic>

f0108c04 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108c04:	55                   	push   %ebp
f0108c05:	89 e5                	mov    %esp,%ebp
f0108c07:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - BONUS] [2] USER HEAP - move_user_mem() [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108c0a:	83 ec 04             	sub    $0x4,%esp
f0108c0d:	68 14 28 13 f0       	push   $0xf0132814
f0108c12:	68 a3 00 00 00       	push   $0xa3
f0108c17:	68 ba 26 13 f0       	push   $0xf01326ba
f0108c1c:	e8 8f 75 ff ff       	call   f01001b0 <_panic>

f0108c21 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108c21:	55                   	push   %ebp
f0108c22:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108c24:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c27:	8b 15 d0 ae 2b f0    	mov    0xf02baed0,%edx
f0108c2d:	29 d0                	sub    %edx,%eax
f0108c2f:	c1 f8 02             	sar    $0x2,%eax
f0108c32:	89 c2                	mov    %eax,%edx
f0108c34:	89 d0                	mov    %edx,%eax
f0108c36:	c1 e0 03             	shl    $0x3,%eax
f0108c39:	01 d0                	add    %edx,%eax
f0108c3b:	c1 e0 03             	shl    $0x3,%eax
f0108c3e:	01 d0                	add    %edx,%eax
f0108c40:	c1 e0 03             	shl    $0x3,%eax
f0108c43:	01 d0                	add    %edx,%eax
f0108c45:	c1 e0 03             	shl    $0x3,%eax
f0108c48:	01 d0                	add    %edx,%eax
f0108c4a:	89 c1                	mov    %eax,%ecx
f0108c4c:	c1 e1 0f             	shl    $0xf,%ecx
f0108c4f:	01 c8                	add    %ecx,%eax
f0108c51:	c1 e0 03             	shl    $0x3,%eax
f0108c54:	01 d0                	add    %edx,%eax
f0108c56:	f7 d8                	neg    %eax
}
f0108c58:	5d                   	pop    %ebp
f0108c59:	c3                   	ret    

f0108c5a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108c5a:	55                   	push   %ebp
f0108c5b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108c5d:	ff 75 08             	pushl  0x8(%ebp)
f0108c60:	e8 bc ff ff ff       	call   f0108c21 <to_frame_number>
f0108c65:	83 c4 04             	add    $0x4,%esp
f0108c68:	c1 e0 0c             	shl    $0xc,%eax
}
f0108c6b:	c9                   	leave  
f0108c6c:	c3                   	ret    

f0108c6d <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108c6d:	55                   	push   %ebp
f0108c6e:	89 e5                	mov    %esp,%ebp
f0108c70:	57                   	push   %edi
f0108c71:	56                   	push   %esi
f0108c72:	53                   	push   %ebx
f0108c73:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108c79:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108c80:	83 ec 0c             	sub    $0xc,%esp
f0108c83:	ff 75 08             	pushl  0x8(%ebp)
f0108c86:	e8 f6 21 00 00       	call   f010ae81 <get_user_program_info>
f0108c8b:	83 c4 10             	add    $0x10,%esp
f0108c8e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108c91:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108c95:	75 0a                	jne    f0108ca1 <env_create+0x34>
f0108c97:	b8 00 00 00 00       	mov    $0x0,%eax
f0108c9c:	e9 45 0c 00 00       	jmp    f01098e6 <env_create+0xc79>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108ca1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ca4:	8b 40 08             	mov    0x8(%eax),%eax
f0108ca7:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108caa:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0108cb1:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108cb4:	83 ec 0c             	sub    $0xc,%esp
f0108cb7:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0108cbd:	50                   	push   %eax
f0108cbe:	e8 aa 0f 00 00       	call   f0109c6d <allocate_environment>
f0108cc3:	83 c4 10             	add    $0x10,%esp
f0108cc6:	85 c0                	test   %eax,%eax
f0108cc8:	79 0a                	jns    f0108cd4 <env_create+0x67>
	{
		return 0;
f0108cca:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ccf:	e9 12 0c 00 00       	jmp    f01098e6 <env_create+0xc79>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108cd4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108cd7:	8b 00                	mov    (%eax),%eax
f0108cd9:	83 ec 0c             	sub    $0xc,%esp
f0108cdc:	50                   	push   %eax
f0108cdd:	e8 ce 60 02 00       	call   f012edb0 <strlen>
f0108ce2:	83 c4 10             	add    $0x10,%esp
f0108ce5:	83 f8 3f             	cmp    $0x3f,%eax
f0108ce8:	7f 1d                	jg     f0108d07 <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108cea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ced:	8b 00                	mov    (%eax),%eax
f0108cef:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108cf5:	83 c2 5c             	add    $0x5c,%edx
f0108cf8:	83 ec 08             	sub    $0x8,%esp
f0108cfb:	50                   	push   %eax
f0108cfc:	52                   	push   %edx
f0108cfd:	e8 fd 60 02 00       	call   f012edff <strcpy>
f0108d02:	83 c4 10             	add    $0x10,%esp
f0108d05:	eb 1d                	jmp    f0108d24 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108d07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d0a:	8b 00                	mov    (%eax),%eax
f0108d0c:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108d12:	83 c2 5c             	add    $0x5c,%edx
f0108d15:	83 ec 04             	sub    $0x4,%esp
f0108d18:	6a 3f                	push   $0x3f
f0108d1a:	50                   	push   %eax
f0108d1b:	52                   	push   %edx
f0108d1c:	e8 0c 61 02 00       	call   f012ee2d <strncpy>
f0108d21:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108d24:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0108d2b:	00 00 00 

		allocate_frame(&p) ;
f0108d2e:	83 ec 0c             	sub    $0xc,%esp
f0108d31:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0108d37:	50                   	push   %eax
f0108d38:	e8 8a e5 ff ff       	call   f01072c7 <allocate_frame>
f0108d3d:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0108d40:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108d46:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108d4c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108d52:	83 ec 0c             	sub    $0xc,%esp
f0108d55:	50                   	push   %eax
f0108d56:	e8 ff fe ff ff       	call   f0108c5a <to_physical_address>
f0108d5b:	83 c4 10             	add    $0x10,%esp
f0108d5e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108d61:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108d64:	c1 e8 0c             	shr    $0xc,%eax
f0108d67:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108d6a:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0108d6f:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108d72:	72 17                	jb     f0108d8b <env_create+0x11e>
f0108d74:	ff 75 b0             	pushl  -0x50(%ebp)
f0108d77:	68 40 28 13 f0       	push   $0xf0132840
f0108d7c:	68 8a 00 00 00       	push   $0x8a
f0108d81:	68 6f 28 13 f0       	push   $0xf013286f
f0108d86:	e8 25 74 ff ff       	call   f01001b0 <_panic>
f0108d8b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108d8e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108d93:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0108d96:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108d9c:	83 ec 0c             	sub    $0xc,%esp
f0108d9f:	50                   	push   %eax
f0108da0:	e8 b5 fe ff ff       	call   f0108c5a <to_physical_address>
f0108da5:	83 c4 10             	add    $0x10,%esp
f0108da8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108dab:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108db1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108db4:	89 90 7c d5 01 00    	mov    %edx,0x1d57c(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108dba:	83 ec 0c             	sub    $0xc,%esp
f0108dbd:	6a 02                	push   $0x2
f0108dbf:	e8 2e 49 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f0108dc4:	83 c4 10             	add    $0x10,%esp
f0108dc7:	85 c0                	test   %eax,%eax
f0108dc9:	74 21                	je     f0108dec <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0108dcb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108dd1:	8b 55 10             	mov    0x10(%ebp),%edx
f0108dd4:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108dda:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108de0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108de3:	2b 55 10             	sub    0x10(%ebp),%edx
f0108de6:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108dec:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108df0:	75 12                	jne    f0108e04 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108df2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108df8:	c7 80 70 da 01 00 0a 	movl   $0xa,0x1da70(%eax)
f0108dff:	00 00 00 
f0108e02:	eb 0f                	jmp    f0108e13 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108e04:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e0a:	8b 55 14             	mov    0x14(%ebp),%edx
f0108e0d:	89 90 70 da 01 00    	mov    %edx,0x1da70(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108e13:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e19:	83 ec 04             	sub    $0x4,%esp
f0108e1c:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108e1f:	ff 75 a8             	pushl  -0x58(%ebp)
f0108e22:	50                   	push   %eax
f0108e23:	e8 ac 16 00 00       	call   f010a4d4 <initialize_environment>
f0108e28:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108e2b:	0f 20 d8             	mov    %cr3,%eax
f0108e2e:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108e31:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108e34:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108e37:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e3d:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0108e43:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108e49:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e4f:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108e52:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108e59:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108e60:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e66:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108e6c:	48                   	dec    %eax
f0108e6d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108e70:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0108e77:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108e7a:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108e80:	83 ec 08             	sub    $0x8,%esp
f0108e83:	ff 75 b8             	pushl  -0x48(%ebp)
f0108e86:	50                   	push   %eax
f0108e87:	e8 b1 1d 00 00       	call   f010ac3d <PROGRAM_SEGMENT_FIRST>
f0108e8c:	83 c4 0c             	add    $0xc,%esp
f0108e8f:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108e95:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108e9b:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108ea0:	89 c7                	mov    %eax,%edi
f0108ea2:	89 d6                	mov    %edx,%esi
f0108ea4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108ea6:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108eac:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108eaf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108eb2:	8b 40 10             	mov    0x10(%eax),%eax
f0108eb5:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108eb8:	75 07                	jne    f0108ec1 <env_create+0x254>
f0108eba:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108ec1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108ec4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108ec7:	e9 24 03 00 00       	jmp    f01091f0 <env_create+0x583>
	{
		segment_counter++;
f0108ecc:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108ecf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0108ed6:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108ed9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108edf:	83 ec 0c             	sub    $0xc,%esp
f0108ee2:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0108ee8:	52                   	push   %edx
f0108ee9:	ff 75 dc             	pushl  -0x24(%ebp)
f0108eec:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108ef2:	52                   	push   %edx
f0108ef3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108ef6:	50                   	push   %eax
f0108ef7:	e8 2f 0e 00 00       	call   f0109d2b <program_segment_alloc_map_copy_workingset>
f0108efc:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108eff:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108f05:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f0b:	8b 00                	mov    (%eax),%eax
f0108f0d:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108f10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f13:	8b 40 0c             	mov    0xc(%eax),%eax
f0108f16:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108f19:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108f1c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108f1f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108f22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f27:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108f2a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108f31:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108f34:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108f37:	01 d0                	add    %edx,%eax
f0108f39:	48                   	dec    %eax
f0108f3a:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108f3d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f40:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f45:	f7 75 84             	divl   -0x7c(%ebp)
f0108f48:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f4b:	29 d0                	sub    %edx,%eax
f0108f4d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108f53:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108f56:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108f59:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108f5f:	a1 f8 ae 2b f0       	mov    0xf02baef8,%eax
f0108f64:	83 ec 04             	sub    $0x4,%esp
f0108f67:	68 00 10 00 00       	push   $0x1000
f0108f6c:	6a 00                	push   $0x0
f0108f6e:	50                   	push   %eax
f0108f6f:	e8 2a 60 02 00       	call   f012ef9e <memset>
f0108f74:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108f77:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108f7a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108f7d:	8b 15 f8 ae 2b f0    	mov    0xf02baef8,%edx
f0108f83:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108f89:	01 d0                	add    %edx,%eax
f0108f8b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108f8e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108f91:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108f94:	eb 13                	jmp    f0108fa9 <env_create+0x33c>
		{
			*dst_ptr = *src_ptr ;
f0108f96:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108f99:	8a 10                	mov    (%eax),%dl
f0108f9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f9e:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108fa0:	ff 45 cc             	incl   -0x34(%ebp)
f0108fa3:	ff 45 d4             	incl   -0x2c(%ebp)
f0108fa6:	ff 45 d0             	incl   -0x30(%ebp)
f0108fa9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108fac:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0108fb2:	72 e2                	jb     f0108f96 <env_create+0x329>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108fb4:	8b 15 f8 ae 2b f0    	mov    0xf02baef8,%edx
f0108fba:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108fc0:	83 ec 04             	sub    $0x4,%esp
f0108fc3:	52                   	push   %edx
f0108fc4:	ff 75 88             	pushl  -0x78(%ebp)
f0108fc7:	50                   	push   %eax
f0108fc8:	e8 a0 ae ff ff       	call   f0103e6d <pf_add_env_page>
f0108fcd:	83 c4 10             	add    $0x10,%esp
f0108fd0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108fd3:	75 17                	jne    f0108fec <env_create+0x37f>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108fd5:	83 ec 04             	sub    $0x4,%esp
f0108fd8:	68 8c 28 13 f0       	push   $0xf013288c
f0108fdd:	68 de 00 00 00       	push   $0xde
f0108fe2:	68 6f 28 13 f0       	push   $0xf013286f
f0108fe7:	e8 c4 71 ff ff       	call   f01001b0 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0108fec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108fef:	8b 50 04             	mov    0x4(%eax),%edx
f0108ff2:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108ff5:	01 d0                	add    %edx,%eax
f0108ff7:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0108ffd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0109003:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109008:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010900e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109011:	8b 50 04             	mov    0x4(%eax),%edx
f0109014:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109017:	01 d0                	add    %edx,%eax
f0109019:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010901f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109025:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109028:	eb 43                	jmp    f010906d <env_create+0x400>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f010902a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010902d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109033:	83 ec 04             	sub    $0x4,%esp
f0109036:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109039:	52                   	push   %edx
f010903a:	50                   	push   %eax
f010903b:	e8 2d ae ff ff       	call   f0103e6d <pf_add_env_page>
f0109040:	83 c4 10             	add    $0x10,%esp
f0109043:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109046:	75 17                	jne    f010905f <env_create+0x3f2>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109048:	83 ec 04             	sub    $0x4,%esp
f010904b:	68 8c 28 13 f0       	push   $0xf013288c
f0109050:	68 eb 00 00 00       	push   $0xeb
f0109055:	68 6f 28 13 f0       	push   $0xf013286f
f010905a:	e8 51 71 ff ff       	call   f01001b0 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010905f:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109066:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f010906d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109070:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0109076:	72 b2                	jb     f010902a <env_create+0x3bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0109078:	a1 f8 ae 2b f0       	mov    0xf02baef8,%eax
f010907d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0109080:	83 ec 04             	sub    $0x4,%esp
f0109083:	68 00 10 00 00       	push   $0x1000
f0109088:	6a 00                	push   $0x0
f010908a:	ff 75 d0             	pushl  -0x30(%ebp)
f010908d:	e8 0c 5f 02 00       	call   f012ef9e <memset>
f0109092:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109095:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010909b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010909e:	eb 13                	jmp    f01090b3 <env_create+0x446>
		{
			*dst_ptr = *src_ptr;
f01090a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01090a3:	8a 10                	mov    (%eax),%dl
f01090a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01090a8:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01090aa:	ff 45 cc             	incl   -0x34(%ebp)
f01090ad:	ff 45 d4             	incl   -0x2c(%ebp)
f01090b0:	ff 45 d0             	incl   -0x30(%ebp)
f01090b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090b6:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f01090bc:	72 e2                	jb     f01090a0 <env_create+0x433>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01090be:	8b 15 f8 ae 2b f0    	mov    0xf02baef8,%edx
f01090c4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01090ca:	83 ec 04             	sub    $0x4,%esp
f01090cd:	52                   	push   %edx
f01090ce:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f01090d4:	50                   	push   %eax
f01090d5:	e8 93 ad ff ff       	call   f0103e6d <pf_add_env_page>
f01090da:	83 c4 10             	add    $0x10,%esp
f01090dd:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01090e0:	75 17                	jne    f01090f9 <env_create+0x48c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01090e2:	83 ec 04             	sub    $0x4,%esp
f01090e5:	68 8c 28 13 f0       	push   $0xf013288c
f01090ea:	68 fa 00 00 00       	push   $0xfa
f01090ef:	68 6f 28 13 f0       	push   $0xf013286f
f01090f4:	e8 b7 70 ff ff       	call   f01001b0 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f01090f9:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0109100:	10 00 00 
f0109103:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109106:	8b 50 04             	mov    0x4(%eax),%edx
f0109109:	8b 45 90             	mov    -0x70(%ebp),%eax
f010910c:	01 c2                	add    %eax,%edx
f010910e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0109114:	01 d0                	add    %edx,%eax
f0109116:	48                   	dec    %eax
f0109117:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010911d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109123:	ba 00 00 00 00       	mov    $0x0,%edx
f0109128:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010912e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109134:	29 d0                	sub    %edx,%eax
f0109136:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109139:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010913c:	8b 50 08             	mov    0x8(%eax),%edx
f010913f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109142:	01 d0                	add    %edx,%eax
f0109144:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0109147:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010914d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109154:	eb 41                	jmp    f0109197 <env_create+0x52a>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109156:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010915c:	83 ec 04             	sub    $0x4,%esp
f010915f:	6a 01                	push   $0x1
f0109161:	ff 75 c8             	pushl  -0x38(%ebp)
f0109164:	50                   	push   %eax
f0109165:	e8 cd ab ff ff       	call   f0103d37 <pf_add_empty_env_page>
f010916a:	83 c4 10             	add    $0x10,%esp
f010916d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109170:	75 17                	jne    f0109189 <env_create+0x51c>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109172:	83 ec 04             	sub    $0x4,%esp
f0109175:	68 8c 28 13 f0       	push   $0xf013288c
f010917a:	68 07 01 00 00       	push   $0x107
f010917f:	68 6f 28 13 f0       	push   $0xf013286f
f0109184:	e8 27 70 ff ff       	call   f01001b0 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109189:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109190:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109197:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f010919e:	10 00 00 
f01091a1:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f01091a7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01091ad:	01 d0                	add    %edx,%eax
f01091af:	48                   	dec    %eax
f01091b0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01091b6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01091bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01091c1:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01091c7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01091cd:	29 d0                	sub    %edx,%eax
f01091cf:	89 c2                	mov    %eax,%edx
f01091d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01091d4:	39 c2                	cmp    %eax,%edx
f01091d6:	0f 87 7a ff ff ff    	ja     f0109156 <env_create+0x4e9>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01091dc:	83 ec 08             	sub    $0x8,%esp
f01091df:	ff 75 b8             	pushl  -0x48(%ebp)
f01091e2:	ff 75 e4             	pushl  -0x1c(%ebp)
f01091e5:	e8 48 19 00 00       	call   f010ab32 <PROGRAM_SEGMENT_NEXT>
f01091ea:	83 c4 10             	add    $0x10,%esp
f01091ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01091f0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01091f4:	0f 85 d2 fc ff ff    	jne    f0108ecc <env_create+0x25f>
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
f01091fa:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109201:	e9 a7 00 00 00       	jmp    f01092ad <env_create+0x640>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109206:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010920c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010920f:	89 d0                	mov    %edx,%eax
f0109211:	01 c0                	add    %eax,%eax
f0109213:	01 d0                	add    %edx,%eax
f0109215:	c1 e0 03             	shl    $0x3,%eax
f0109218:	01 c8                	add    %ecx,%eax
f010921a:	05 bc 00 00 00       	add    $0xbc,%eax
f010921f:	8a 00                	mov    (%eax),%al
f0109221:	84 c0                	test   %al,%al
f0109223:	0f 85 81 00 00 00    	jne    f01092aa <env_create+0x63d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109229:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010922f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109232:	89 d0                	mov    %edx,%eax
f0109234:	01 c0                	add    %eax,%eax
f0109236:	01 d0                	add    %edx,%eax
f0109238:	c1 e0 03             	shl    $0x3,%eax
f010923b:	01 c8                	add    %ecx,%eax
f010923d:	05 b8 00 00 00       	add    $0xb8,%eax
f0109242:	8b 00                	mov    (%eax),%eax
f0109244:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010924a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109250:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109256:	83 ec 04             	sub    $0x4,%esp
f0109259:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f010925f:	52                   	push   %edx
f0109260:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0109266:	50                   	push   %eax
f0109267:	e8 1d e2 ff ff       	call   f0107489 <get_page_table>
f010926c:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f010926f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0109275:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f010927b:	c1 ea 0c             	shr    $0xc,%edx
f010927e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0109284:	c1 e2 02             	shl    $0x2,%edx
f0109287:	01 d0                	add    %edx,%eax
f0109289:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f010928f:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0109295:	c1 e9 0c             	shr    $0xc,%ecx
f0109298:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010929e:	c1 e1 02             	shl    $0x2,%ecx
f01092a1:	01 ca                	add    %ecx,%edx
f01092a3:	8b 12                	mov    (%edx),%edx
f01092a5:	83 e2 bf             	and    $0xffffffbf,%edx
f01092a8:	89 10                	mov    %edx,(%eax)
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01092aa:	ff 45 c4             	incl   -0x3c(%ebp)
f01092ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092b3:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01092b9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01092bc:	39 c2                	cmp    %eax,%edx
f01092be:	0f 87 42 ff ff ff    	ja     f0109206 <env_create+0x599>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01092c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01092c7:	8b 50 08             	mov    0x8(%eax),%edx
f01092ca:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092d0:	83 ec 08             	sub    $0x8,%esp
f01092d3:	52                   	push   %edx
f01092d4:	50                   	push   %eax
f01092d5:	e8 18 18 00 00       	call   f010aaf2 <set_environment_entry_point>
f01092da:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f01092dd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092e3:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f01092ea:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01092ed:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f01092f4:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01092f7:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01092fe:	e9 3c 05 00 00       	jmp    f010983f <env_create+0xbd2>
	{
		struct FrameInfo *pp = NULL;
f0109303:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f010930a:	00 00 00 
		allocate_frame(&pp);
f010930d:	83 ec 0c             	sub    $0xc,%esp
f0109310:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0109316:	50                   	push   %eax
f0109317:	e8 ab df ff ff       	call   f01072c7 <allocate_frame>
f010931c:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010931f:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0109325:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010932b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109331:	6a 06                	push   $0x6
f0109333:	ff 75 c0             	pushl  -0x40(%ebp)
f0109336:	52                   	push   %edx
f0109337:	50                   	push   %eax
f0109338:	e8 db e4 ff ff       	call   f0107818 <loadtime_map_frame>
f010933d:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0109340:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109343:	83 ec 04             	sub    $0x4,%esp
f0109346:	68 00 10 00 00       	push   $0x1000
f010934b:	6a 00                	push   $0x0
f010934d:	50                   	push   %eax
f010934e:	e8 4b 5c 02 00       	call   f012ef9e <memset>
f0109353:	83 c4 10             	add    $0x10,%esp
			else
			{
				e->page_last_WS_element = NULL;
			}
#else
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0109356:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010935c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109362:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109368:	83 ec 04             	sub    $0x4,%esp
f010936b:	ff 75 c0             	pushl  -0x40(%ebp)
f010936e:	52                   	push   %edx
f010936f:	50                   	push   %eax
f0109370:	e8 3f ef ff ff       	call   f01082b4 <env_page_ws_set_entry>
f0109375:	83 c4 10             	add    $0x10,%esp
			uint32 lastWSIndex = e->page_last_WS_index ++;
f0109378:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010937e:	8b 82 78 d5 01 00    	mov    0x1d578(%edx),%eax
f0109384:	8d 48 01             	lea    0x1(%eax),%ecx
f0109387:	89 8a 78 d5 01 00    	mov    %ecx,0x1d578(%edx)
f010938d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109393:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109399:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010939f:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f01093a5:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01093ab:	8b 9a 7c d5 01 00    	mov    0x1d57c(%edx),%ebx
f01093b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01093b6:	f7 f3                	div    %ebx
f01093b8:	89 d0                	mov    %edx,%eax
f01093ba:	89 81 78 d5 01 00    	mov    %eax,0x1d578(%ecx)
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01093c0:	83 ec 0c             	sub    $0xc,%esp
f01093c3:	6a 02                	push   $0x2
f01093c5:	e8 28 43 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f01093ca:	83 c4 10             	add    $0x10,%esp
f01093cd:	85 c0                	test   %eax,%eax
f01093cf:	0f 84 46 04 00 00    	je     f010981b <env_create+0xbae>
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
				}
#else
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01093d5:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01093db:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01093e1:	89 d0                	mov    %edx,%eax
f01093e3:	01 c0                	add    %eax,%eax
f01093e5:	01 d0                	add    %edx,%eax
f01093e7:	c1 e0 03             	shl    $0x3,%eax
f01093ea:	05 b0 00 00 00       	add    $0xb0,%eax
f01093ef:	01 c8                	add    %ecx,%eax
f01093f1:	83 c0 08             	add    $0x8,%eax
f01093f4:	85 c0                	test   %eax,%eax
f01093f6:	75 17                	jne    f010940f <env_create+0x7a2>
f01093f8:	83 ec 04             	sub    $0x4,%esp
f01093fb:	68 d1 28 13 f0       	push   $0xf01328d1
f0109400:	68 67 01 00 00       	push   $0x167
f0109405:	68 6f 28 13 f0       	push   $0xf013286f
f010940a:	e8 a1 6d ff ff       	call   f01001b0 <_panic>
f010940f:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109415:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010941b:	89 d0                	mov    %edx,%eax
f010941d:	01 c0                	add    %eax,%eax
f010941f:	01 d0                	add    %edx,%eax
f0109421:	c1 e0 03             	shl    $0x3,%eax
f0109424:	01 c8                	add    %ecx,%eax
f0109426:	05 c8 00 00 00       	add    $0xc8,%eax
f010942b:	8b 00                	mov    (%eax),%eax
f010942d:	85 c0                	test   %eax,%eax
f010942f:	74 41                	je     f0109472 <env_create+0x805>
f0109431:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109437:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010943d:	89 d0                	mov    %edx,%eax
f010943f:	01 c0                	add    %eax,%eax
f0109441:	01 d0                	add    %edx,%eax
f0109443:	c1 e0 03             	shl    $0x3,%eax
f0109446:	01 c8                	add    %ecx,%eax
f0109448:	05 c8 00 00 00       	add    $0xc8,%eax
f010944d:	8b 10                	mov    (%eax),%edx
f010944f:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109455:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010945b:	89 c8                	mov    %ecx,%eax
f010945d:	01 c0                	add    %eax,%eax
f010945f:	01 c8                	add    %ecx,%eax
f0109461:	c1 e0 03             	shl    $0x3,%eax
f0109464:	01 d8                	add    %ebx,%eax
f0109466:	05 cc 00 00 00       	add    $0xcc,%eax
f010946b:	8b 00                	mov    (%eax),%eax
f010946d:	89 42 14             	mov    %eax,0x14(%edx)
f0109470:	eb 2a                	jmp    f010949c <env_create+0x82f>
f0109472:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109478:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010947e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109484:	89 c8                	mov    %ecx,%eax
f0109486:	01 c0                	add    %eax,%eax
f0109488:	01 c8                	add    %ecx,%eax
f010948a:	c1 e0 03             	shl    $0x3,%eax
f010948d:	01 d8                	add    %ebx,%eax
f010948f:	05 cc 00 00 00       	add    $0xcc,%eax
f0109494:	8b 00                	mov    (%eax),%eax
f0109496:	89 82 38 da 01 00    	mov    %eax,0x1da38(%edx)
f010949c:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01094a2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01094a8:	89 d0                	mov    %edx,%eax
f01094aa:	01 c0                	add    %eax,%eax
f01094ac:	01 d0                	add    %edx,%eax
f01094ae:	c1 e0 03             	shl    $0x3,%eax
f01094b1:	01 c8                	add    %ecx,%eax
f01094b3:	05 cc 00 00 00       	add    $0xcc,%eax
f01094b8:	8b 00                	mov    (%eax),%eax
f01094ba:	85 c0                	test   %eax,%eax
f01094bc:	74 41                	je     f01094ff <env_create+0x892>
f01094be:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01094c4:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01094ca:	89 d0                	mov    %edx,%eax
f01094cc:	01 c0                	add    %eax,%eax
f01094ce:	01 d0                	add    %edx,%eax
f01094d0:	c1 e0 03             	shl    $0x3,%eax
f01094d3:	01 c8                	add    %ecx,%eax
f01094d5:	05 cc 00 00 00       	add    $0xcc,%eax
f01094da:	8b 10                	mov    (%eax),%edx
f01094dc:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01094e2:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01094e8:	89 c8                	mov    %ecx,%eax
f01094ea:	01 c0                	add    %eax,%eax
f01094ec:	01 c8                	add    %ecx,%eax
f01094ee:	c1 e0 03             	shl    $0x3,%eax
f01094f1:	01 d8                	add    %ebx,%eax
f01094f3:	05 c8 00 00 00       	add    $0xc8,%eax
f01094f8:	8b 00                	mov    (%eax),%eax
f01094fa:	89 42 10             	mov    %eax,0x10(%edx)
f01094fd:	eb 2a                	jmp    f0109529 <env_create+0x8bc>
f01094ff:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109505:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010950b:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109511:	89 c8                	mov    %ecx,%eax
f0109513:	01 c0                	add    %eax,%eax
f0109515:	01 c8                	add    %ecx,%eax
f0109517:	c1 e0 03             	shl    $0x3,%eax
f010951a:	01 d8                	add    %ebx,%eax
f010951c:	05 c8 00 00 00       	add    $0xc8,%eax
f0109521:	8b 00                	mov    (%eax),%eax
f0109523:	89 82 34 da 01 00    	mov    %eax,0x1da34(%edx)
f0109529:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010952f:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109535:	89 d0                	mov    %edx,%eax
f0109537:	01 c0                	add    %eax,%eax
f0109539:	01 d0                	add    %edx,%eax
f010953b:	c1 e0 03             	shl    $0x3,%eax
f010953e:	01 c8                	add    %ecx,%eax
f0109540:	05 c8 00 00 00       	add    $0xc8,%eax
f0109545:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010954b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109551:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109557:	89 d0                	mov    %edx,%eax
f0109559:	01 c0                	add    %eax,%eax
f010955b:	01 d0                	add    %edx,%eax
f010955d:	c1 e0 03             	shl    $0x3,%eax
f0109560:	01 c8                	add    %ecx,%eax
f0109562:	05 cc 00 00 00       	add    $0xcc,%eax
f0109567:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010956d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109573:	8b 90 40 da 01 00    	mov    0x1da40(%eax),%edx
f0109579:	4a                   	dec    %edx
f010957a:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109580:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109586:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010958c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109592:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0109598:	39 c2                	cmp    %eax,%edx
f010959a:	0f 83 40 01 00 00    	jae    f01096e0 <env_create+0xa73>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01095a0:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01095a6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095ac:	89 d0                	mov    %edx,%eax
f01095ae:	01 c0                	add    %eax,%eax
f01095b0:	01 d0                	add    %edx,%eax
f01095b2:	c1 e0 03             	shl    $0x3,%eax
f01095b5:	05 b0 00 00 00       	add    $0xb0,%eax
f01095ba:	01 c8                	add    %ecx,%eax
f01095bc:	83 c0 08             	add    $0x8,%eax
f01095bf:	85 c0                	test   %eax,%eax
f01095c1:	75 17                	jne    f01095da <env_create+0x96d>
f01095c3:	83 ec 04             	sub    $0x4,%esp
f01095c6:	68 f0 28 13 f0       	push   $0xf01328f0
f01095cb:	68 6c 01 00 00       	push   $0x16c
f01095d0:	68 6f 28 13 f0       	push   $0xf013286f
f01095d5:	e8 d6 6b ff ff       	call   f01001b0 <_panic>
f01095da:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01095e0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095e6:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f01095ec:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f01095f2:	89 d8                	mov    %ebx,%eax
f01095f4:	01 c0                	add    %eax,%eax
f01095f6:	01 d8                	add    %ebx,%eax
f01095f8:	c1 e0 03             	shl    $0x3,%eax
f01095fb:	01 d0                	add    %edx,%eax
f01095fd:	05 c8 00 00 00       	add    $0xc8,%eax
f0109602:	89 08                	mov    %ecx,(%eax)
f0109604:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010960a:	89 c8                	mov    %ecx,%eax
f010960c:	01 c0                	add    %eax,%eax
f010960e:	01 c8                	add    %ecx,%eax
f0109610:	c1 e0 03             	shl    $0x3,%eax
f0109613:	01 d0                	add    %edx,%eax
f0109615:	05 c8 00 00 00       	add    $0xc8,%eax
f010961a:	8b 00                	mov    (%eax),%eax
f010961c:	85 c0                	test   %eax,%eax
f010961e:	74 30                	je     f0109650 <env_create+0x9e3>
f0109620:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109626:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010962c:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109632:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109638:	89 c8                	mov    %ecx,%eax
f010963a:	01 c0                	add    %eax,%eax
f010963c:	01 c8                	add    %ecx,%eax
f010963e:	c1 e0 03             	shl    $0x3,%eax
f0109641:	05 b0 00 00 00       	add    $0xb0,%eax
f0109646:	01 d8                	add    %ebx,%eax
f0109648:	83 c0 08             	add    $0x8,%eax
f010964b:	89 42 14             	mov    %eax,0x14(%edx)
f010964e:	eb 2b                	jmp    f010967b <env_create+0xa0e>
f0109650:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109656:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010965c:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109662:	89 c8                	mov    %ecx,%eax
f0109664:	01 c0                	add    %eax,%eax
f0109666:	01 c8                	add    %ecx,%eax
f0109668:	c1 e0 03             	shl    $0x3,%eax
f010966b:	05 b0 00 00 00       	add    $0xb0,%eax
f0109670:	01 d8                	add    %ebx,%eax
f0109672:	83 c0 08             	add    $0x8,%eax
f0109675:	89 82 48 da 01 00    	mov    %eax,0x1da48(%edx)
f010967b:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109681:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109687:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010968d:	89 c8                	mov    %ecx,%eax
f010968f:	01 c0                	add    %eax,%eax
f0109691:	01 c8                	add    %ecx,%eax
f0109693:	c1 e0 03             	shl    $0x3,%eax
f0109696:	05 b0 00 00 00       	add    $0xb0,%eax
f010969b:	01 d8                	add    %ebx,%eax
f010969d:	83 c0 08             	add    $0x8,%eax
f01096a0:	89 82 44 da 01 00    	mov    %eax,0x1da44(%edx)
f01096a6:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01096ac:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01096b2:	89 d0                	mov    %edx,%eax
f01096b4:	01 c0                	add    %eax,%eax
f01096b6:	01 d0                	add    %edx,%eax
f01096b8:	c1 e0 03             	shl    $0x3,%eax
f01096bb:	01 c8                	add    %ecx,%eax
f01096bd:	05 cc 00 00 00       	add    $0xcc,%eax
f01096c2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01096c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01096ce:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f01096d4:	42                   	inc    %edx
f01096d5:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f01096db:	e9 3b 01 00 00       	jmp    f010981b <env_create+0xbae>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01096e0:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01096e6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01096ec:	89 d0                	mov    %edx,%eax
f01096ee:	01 c0                	add    %eax,%eax
f01096f0:	01 d0                	add    %edx,%eax
f01096f2:	c1 e0 03             	shl    $0x3,%eax
f01096f5:	05 b0 00 00 00       	add    $0xb0,%eax
f01096fa:	01 c8                	add    %ecx,%eax
f01096fc:	83 c0 08             	add    $0x8,%eax
f01096ff:	85 c0                	test   %eax,%eax
f0109701:	75 17                	jne    f010971a <env_create+0xaad>
f0109703:	83 ec 04             	sub    $0x4,%esp
f0109706:	68 f0 28 13 f0       	push   $0xf01328f0
f010970b:	68 70 01 00 00       	push   $0x170
f0109710:	68 6f 28 13 f0       	push   $0xf013286f
f0109715:	e8 96 6a ff ff       	call   f01001b0 <_panic>
f010971a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109720:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109726:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010972c:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109732:	89 d8                	mov    %ebx,%eax
f0109734:	01 c0                	add    %eax,%eax
f0109736:	01 d8                	add    %ebx,%eax
f0109738:	c1 e0 03             	shl    $0x3,%eax
f010973b:	01 d0                	add    %edx,%eax
f010973d:	05 c8 00 00 00       	add    $0xc8,%eax
f0109742:	89 08                	mov    %ecx,(%eax)
f0109744:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010974a:	89 c8                	mov    %ecx,%eax
f010974c:	01 c0                	add    %eax,%eax
f010974e:	01 c8                	add    %ecx,%eax
f0109750:	c1 e0 03             	shl    $0x3,%eax
f0109753:	01 d0                	add    %edx,%eax
f0109755:	05 c8 00 00 00       	add    $0xc8,%eax
f010975a:	8b 00                	mov    (%eax),%eax
f010975c:	85 c0                	test   %eax,%eax
f010975e:	74 30                	je     f0109790 <env_create+0xb23>
f0109760:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109766:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f010976c:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109772:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109778:	89 c8                	mov    %ecx,%eax
f010977a:	01 c0                	add    %eax,%eax
f010977c:	01 c8                	add    %ecx,%eax
f010977e:	c1 e0 03             	shl    $0x3,%eax
f0109781:	05 b0 00 00 00       	add    $0xb0,%eax
f0109786:	01 d8                	add    %ebx,%eax
f0109788:	83 c0 08             	add    $0x8,%eax
f010978b:	89 42 14             	mov    %eax,0x14(%edx)
f010978e:	eb 2b                	jmp    f01097bb <env_create+0xb4e>
f0109790:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109796:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010979c:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097a2:	89 c8                	mov    %ecx,%eax
f01097a4:	01 c0                	add    %eax,%eax
f01097a6:	01 c8                	add    %ecx,%eax
f01097a8:	c1 e0 03             	shl    $0x3,%eax
f01097ab:	05 b0 00 00 00       	add    $0xb0,%eax
f01097b0:	01 d8                	add    %ebx,%eax
f01097b2:	83 c0 08             	add    $0x8,%eax
f01097b5:	89 82 58 da 01 00    	mov    %eax,0x1da58(%edx)
f01097bb:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01097c1:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01097c7:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097cd:	89 c8                	mov    %ecx,%eax
f01097cf:	01 c0                	add    %eax,%eax
f01097d1:	01 c8                	add    %ecx,%eax
f01097d3:	c1 e0 03             	shl    $0x3,%eax
f01097d6:	05 b0 00 00 00       	add    $0xb0,%eax
f01097db:	01 d8                	add    %ebx,%eax
f01097dd:	83 c0 08             	add    $0x8,%eax
f01097e0:	89 82 54 da 01 00    	mov    %eax,0x1da54(%edx)
f01097e6:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01097ec:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01097f2:	89 d0                	mov    %edx,%eax
f01097f4:	01 c0                	add    %eax,%eax
f01097f6:	01 d0                	add    %edx,%eax
f01097f8:	c1 e0 03             	shl    $0x3,%eax
f01097fb:	01 c8                	add    %ecx,%eax
f01097fd:	05 cc 00 00 00       	add    $0xcc,%eax
f0109802:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109808:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010980e:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0109814:	42                   	inc    %edx
f0109815:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010981b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109821:	83 ec 04             	sub    $0x4,%esp
f0109824:	6a 01                	push   $0x1
f0109826:	ff 75 c0             	pushl  -0x40(%ebp)
f0109829:	50                   	push   %eax
f010982a:	e8 08 a5 ff ff       	call   f0103d37 <pf_add_empty_env_page>
f010982f:	83 c4 10             	add    $0x10,%esp
f0109832:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109838:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010983f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109842:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0109848:	0f 83 b5 fa ff ff    	jae    f0109303 <env_create+0x696>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010984e:	83 ec 0c             	sub    $0xc,%esp
f0109851:	6a 02                	push   $0x2
f0109853:	e8 9a 3e 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f0109858:	83 c4 10             	add    $0x10,%esp
f010985b:	85 c0                	test   %eax,%eax
f010985d:	74 75                	je     f01098d4 <env_create+0xc67>
	{
		struct WorkingSetElement * elm = NULL;
f010985f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109866:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010986c:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0109872:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109875:	eb 2e                	jmp    f01098a5 <env_create+0xc38>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109877:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010987a:	8b 10                	mov    (%eax),%edx
f010987c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109882:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109888:	6a 01                	push   $0x1
f010988a:	6a 00                	push   $0x0
f010988c:	52                   	push   %edx
f010988d:	50                   	push   %eax
f010988e:	e8 2e e7 ff ff       	call   f0107fc1 <pt_set_page_permissions>
f0109893:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109896:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010989c:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01098a2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01098a5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098ab:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01098af:	74 08                	je     f01098b9 <env_create+0xc4c>
f01098b1:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01098b4:	8b 52 10             	mov    0x10(%edx),%edx
f01098b7:	eb 05                	jmp    f01098be <env_create+0xc51>
f01098b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01098be:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
f01098c4:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01098ca:	85 c0                	test   %eax,%eax
f01098cc:	75 a9                	jne    f0109877 <env_create+0xc0a>
f01098ce:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01098d2:	75 a3                	jne    f0109877 <env_create+0xc0a>
f01098d4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01098d7:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01098da:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01098dd:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f01098e0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f01098e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01098e9:	5b                   	pop    %ebx
f01098ea:	5e                   	pop    %esi
f01098eb:	5f                   	pop    %edi
f01098ec:	5d                   	pop    %ebp
f01098ed:	c3                   	ret    

f01098ee <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f01098ee:	55                   	push   %ebp
f01098ef:	89 e5                	mov    %esp,%ebp
f01098f1:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f01098f4:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f01098f9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01098fc:	74 2e                	je     f010992c <env_run+0x3e>
	{
		curenv = e ;
f01098fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0109901:	a3 34 22 25 f0       	mov    %eax,0xf0252234
		curenv->env_runs++ ;
f0109906:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010990b:	8b 90 8c da 01 00    	mov    0x1da8c(%eax),%edx
f0109911:	42                   	inc    %edx
f0109912:	89 90 8c da 01 00    	mov    %edx,0x1da8c(%eax)
		lcr3(curenv->env_cr3) ;
f0109918:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010991d:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0109923:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109926:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109929:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010992c:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0109931:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109938:	e8 5c b1 ff ff       	call   f0104a99 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010993d:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0109942:	83 ec 0c             	sub    $0xc,%esp
f0109945:	50                   	push   %eax
f0109946:	e8 f5 00 00 00       	call   f0109a40 <env_pop_tf>

f010994b <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010994b:	55                   	push   %ebp
f010994c:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f010994e:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f010994f:	5d                   	pop    %ebp
f0109950:	c3                   	ret    

f0109951 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109951:	55                   	push   %ebp
f0109952:	89 e5                	mov    %esp,%ebp
f0109954:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109957:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010995c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010995f:	83 ec 0c             	sub    $0xc,%esp
f0109962:	50                   	push   %eax
f0109963:	e8 0b ba ff ff       	call   f0105373 <sched_exit_env>
f0109968:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f010996b:	e8 4b c8 ff ff       	call   f01061bb <fos_scheduler>

f0109970 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109970:	55                   	push   %ebp
f0109971:	89 e5                	mov    %esp,%ebp
f0109973:	53                   	push   %ebx
f0109974:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109977:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010997b:	75 15                	jne    f0109992 <envid2env+0x22>
		*env_store = curenv;
f010997d:	8b 15 34 22 25 f0    	mov    0xf0252234,%edx
f0109983:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109986:	89 10                	mov    %edx,(%eax)
		return 0;
f0109988:	b8 00 00 00 00       	mov    $0x0,%eax
f010998d:	e9 a9 00 00 00       	jmp    f0109a3b <envid2env+0xcb>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109992:	8b 1d 30 22 25 f0    	mov    0xf0252230,%ebx
f0109998:	83 ec 0c             	sub    $0xc,%esp
f010999b:	6a 08                	push   $0x8
f010999d:	e8 99 41 02 00       	call   f012db3b <nearest_pow2_ceil>
f01099a2:	83 c4 10             	add    $0x10,%esp
f01099a5:	8d 50 ff             	lea    -0x1(%eax),%edx
f01099a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01099ab:	21 c2                	and    %eax,%edx
f01099ad:	89 d0                	mov    %edx,%eax
f01099af:	01 c0                	add    %eax,%eax
f01099b1:	01 d0                	add    %edx,%eax
f01099b3:	01 c0                	add    %eax,%eax
f01099b5:	01 d0                	add    %edx,%eax
f01099b7:	c1 e0 02             	shl    $0x2,%eax
f01099ba:	01 d0                	add    %edx,%eax
f01099bc:	01 c0                	add    %eax,%eax
f01099be:	01 d0                	add    %edx,%eax
f01099c0:	c1 e0 02             	shl    $0x2,%eax
f01099c3:	01 d0                	add    %edx,%eax
f01099c5:	c1 e0 02             	shl    $0x2,%eax
f01099c8:	01 d0                	add    %edx,%eax
f01099ca:	c1 e0 02             	shl    $0x2,%eax
f01099cd:	01 d0                	add    %edx,%eax
f01099cf:	c1 e0 05             	shl    $0x5,%eax
f01099d2:	01 d8                	add    %ebx,%eax
f01099d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f01099d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099da:	8b 40 54             	mov    0x54(%eax),%eax
f01099dd:	85 c0                	test   %eax,%eax
f01099df:	74 0b                	je     f01099ec <envid2env+0x7c>
f01099e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099e4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01099e7:	3b 45 08             	cmp    0x8(%ebp),%eax
f01099ea:	74 10                	je     f01099fc <envid2env+0x8c>
		*env_store = 0;
f01099ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f01099f5:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01099fa:	eb 3f                	jmp    f0109a3b <envid2env+0xcb>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f01099fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109a00:	74 2c                	je     f0109a2e <envid2env+0xbe>
f0109a02:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0109a07:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109a0a:	74 22                	je     f0109a2e <envid2env+0xbe>
f0109a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a0f:	8b 50 50             	mov    0x50(%eax),%edx
f0109a12:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0109a17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a1a:	39 c2                	cmp    %eax,%edx
f0109a1c:	74 10                	je     f0109a2e <envid2env+0xbe>
		*env_store = 0;
f0109a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a27:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a2c:	eb 0d                	jmp    f0109a3b <envid2env+0xcb>
	}

	*env_store = e;
f0109a2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a34:	89 10                	mov    %edx,(%eax)
	return 0;
f0109a36:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109a3b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109a3e:	c9                   	leave  
f0109a3f:	c3                   	ret    

f0109a40 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109a40:	55                   	push   %ebp
f0109a41:	89 e5                	mov    %esp,%ebp
f0109a43:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109a46:	8b 65 08             	mov    0x8(%ebp),%esp
f0109a49:	61                   	popa   
f0109a4a:	07                   	pop    %es
f0109a4b:	1f                   	pop    %ds
f0109a4c:	83 c4 08             	add    $0x8,%esp
f0109a4f:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109a50:	83 ec 04             	sub    $0x4,%esp
f0109a53:	68 13 29 13 f0       	push   $0xf0132913
f0109a58:	68 23 02 00 00       	push   $0x223
f0109a5d:	68 6f 28 13 f0       	push   $0xf013286f
f0109a62:	e8 49 67 ff ff       	call   f01001b0 <_panic>

f0109a67 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109a67:	55                   	push   %ebp
f0109a68:	89 e5                	mov    %esp,%ebp
f0109a6a:	53                   	push   %ebx
f0109a6b:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109a6e:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109a75:	e9 e3 01 00 00       	jmp    f0109c5d <env_init+0x1f6>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109a7a:	8b 0d 30 22 25 f0    	mov    0xf0252230,%ecx
f0109a80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a83:	89 d0                	mov    %edx,%eax
f0109a85:	01 c0                	add    %eax,%eax
f0109a87:	01 d0                	add    %edx,%eax
f0109a89:	01 c0                	add    %eax,%eax
f0109a8b:	01 d0                	add    %edx,%eax
f0109a8d:	c1 e0 02             	shl    $0x2,%eax
f0109a90:	01 d0                	add    %edx,%eax
f0109a92:	01 c0                	add    %eax,%eax
f0109a94:	01 d0                	add    %edx,%eax
f0109a96:	c1 e0 02             	shl    $0x2,%eax
f0109a99:	01 d0                	add    %edx,%eax
f0109a9b:	c1 e0 02             	shl    $0x2,%eax
f0109a9e:	01 d0                	add    %edx,%eax
f0109aa0:	c1 e0 02             	shl    $0x2,%eax
f0109aa3:	01 d0                	add    %edx,%eax
f0109aa5:	c1 e0 05             	shl    $0x5,%eax
f0109aa8:	01 c8                	add    %ecx,%eax
f0109aaa:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109ab1:	8b 0d 30 22 25 f0    	mov    0xf0252230,%ecx
f0109ab7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109aba:	89 d0                	mov    %edx,%eax
f0109abc:	01 c0                	add    %eax,%eax
f0109abe:	01 d0                	add    %edx,%eax
f0109ac0:	01 c0                	add    %eax,%eax
f0109ac2:	01 d0                	add    %edx,%eax
f0109ac4:	c1 e0 02             	shl    $0x2,%eax
f0109ac7:	01 d0                	add    %edx,%eax
f0109ac9:	01 c0                	add    %eax,%eax
f0109acb:	01 d0                	add    %edx,%eax
f0109acd:	c1 e0 02             	shl    $0x2,%eax
f0109ad0:	01 d0                	add    %edx,%eax
f0109ad2:	c1 e0 02             	shl    $0x2,%eax
f0109ad5:	01 d0                	add    %edx,%eax
f0109ad7:	c1 e0 02             	shl    $0x2,%eax
f0109ada:	01 d0                	add    %edx,%eax
f0109adc:	c1 e0 05             	shl    $0x5,%eax
f0109adf:	01 c8                	add    %ecx,%eax
f0109ae1:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109ae8:	8b 0d 30 22 25 f0    	mov    0xf0252230,%ecx
f0109aee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109af1:	89 d0                	mov    %edx,%eax
f0109af3:	01 c0                	add    %eax,%eax
f0109af5:	01 d0                	add    %edx,%eax
f0109af7:	01 c0                	add    %eax,%eax
f0109af9:	01 d0                	add    %edx,%eax
f0109afb:	c1 e0 02             	shl    $0x2,%eax
f0109afe:	01 d0                	add    %edx,%eax
f0109b00:	01 c0                	add    %eax,%eax
f0109b02:	01 d0                	add    %edx,%eax
f0109b04:	c1 e0 02             	shl    $0x2,%eax
f0109b07:	01 d0                	add    %edx,%eax
f0109b09:	c1 e0 02             	shl    $0x2,%eax
f0109b0c:	01 d0                	add    %edx,%eax
f0109b0e:	c1 e0 02             	shl    $0x2,%eax
f0109b11:	01 d0                	add    %edx,%eax
f0109b13:	c1 e0 05             	shl    $0x5,%eax
f0109b16:	01 c8                	add    %ecx,%eax
f0109b18:	85 c0                	test   %eax,%eax
f0109b1a:	75 17                	jne    f0109b33 <env_init+0xcc>
f0109b1c:	83 ec 04             	sub    $0x4,%esp
f0109b1f:	68 f0 28 13 f0       	push   $0xf01328f0
f0109b24:	68 3f 02 00 00       	push   $0x23f
f0109b29:	68 6f 28 13 f0       	push   $0xf013286f
f0109b2e:	e8 7d 66 ff ff       	call   f01001b0 <_panic>
f0109b33:	8b 0d 30 22 25 f0    	mov    0xf0252230,%ecx
f0109b39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b3c:	89 d0                	mov    %edx,%eax
f0109b3e:	01 c0                	add    %eax,%eax
f0109b40:	01 d0                	add    %edx,%eax
f0109b42:	01 c0                	add    %eax,%eax
f0109b44:	01 d0                	add    %edx,%eax
f0109b46:	c1 e0 02             	shl    $0x2,%eax
f0109b49:	01 d0                	add    %edx,%eax
f0109b4b:	01 c0                	add    %eax,%eax
f0109b4d:	01 d0                	add    %edx,%eax
f0109b4f:	c1 e0 02             	shl    $0x2,%eax
f0109b52:	01 d0                	add    %edx,%eax
f0109b54:	c1 e0 02             	shl    $0x2,%eax
f0109b57:	01 d0                	add    %edx,%eax
f0109b59:	c1 e0 02             	shl    $0x2,%eax
f0109b5c:	01 d0                	add    %edx,%eax
f0109b5e:	c1 e0 05             	shl    $0x5,%eax
f0109b61:	01 c8                	add    %ecx,%eax
f0109b63:	8b 15 38 22 25 f0    	mov    0xf0252238,%edx
f0109b69:	89 50 44             	mov    %edx,0x44(%eax)
f0109b6c:	8b 40 44             	mov    0x44(%eax),%eax
f0109b6f:	85 c0                	test   %eax,%eax
f0109b71:	74 3b                	je     f0109bae <env_init+0x147>
f0109b73:	8b 0d 38 22 25 f0    	mov    0xf0252238,%ecx
f0109b79:	8b 1d 30 22 25 f0    	mov    0xf0252230,%ebx
f0109b7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b82:	89 d0                	mov    %edx,%eax
f0109b84:	01 c0                	add    %eax,%eax
f0109b86:	01 d0                	add    %edx,%eax
f0109b88:	01 c0                	add    %eax,%eax
f0109b8a:	01 d0                	add    %edx,%eax
f0109b8c:	c1 e0 02             	shl    $0x2,%eax
f0109b8f:	01 d0                	add    %edx,%eax
f0109b91:	01 c0                	add    %eax,%eax
f0109b93:	01 d0                	add    %edx,%eax
f0109b95:	c1 e0 02             	shl    $0x2,%eax
f0109b98:	01 d0                	add    %edx,%eax
f0109b9a:	c1 e0 02             	shl    $0x2,%eax
f0109b9d:	01 d0                	add    %edx,%eax
f0109b9f:	c1 e0 02             	shl    $0x2,%eax
f0109ba2:	01 d0                	add    %edx,%eax
f0109ba4:	c1 e0 05             	shl    $0x5,%eax
f0109ba7:	01 d8                	add    %ebx,%eax
f0109ba9:	89 41 48             	mov    %eax,0x48(%ecx)
f0109bac:	eb 35                	jmp    f0109be3 <env_init+0x17c>
f0109bae:	8b 0d 30 22 25 f0    	mov    0xf0252230,%ecx
f0109bb4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bb7:	89 d0                	mov    %edx,%eax
f0109bb9:	01 c0                	add    %eax,%eax
f0109bbb:	01 d0                	add    %edx,%eax
f0109bbd:	01 c0                	add    %eax,%eax
f0109bbf:	01 d0                	add    %edx,%eax
f0109bc1:	c1 e0 02             	shl    $0x2,%eax
f0109bc4:	01 d0                	add    %edx,%eax
f0109bc6:	01 c0                	add    %eax,%eax
f0109bc8:	01 d0                	add    %edx,%eax
f0109bca:	c1 e0 02             	shl    $0x2,%eax
f0109bcd:	01 d0                	add    %edx,%eax
f0109bcf:	c1 e0 02             	shl    $0x2,%eax
f0109bd2:	01 d0                	add    %edx,%eax
f0109bd4:	c1 e0 02             	shl    $0x2,%eax
f0109bd7:	01 d0                	add    %edx,%eax
f0109bd9:	c1 e0 05             	shl    $0x5,%eax
f0109bdc:	01 c8                	add    %ecx,%eax
f0109bde:	a3 3c 22 25 f0       	mov    %eax,0xf025223c
f0109be3:	8b 0d 30 22 25 f0    	mov    0xf0252230,%ecx
f0109be9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bec:	89 d0                	mov    %edx,%eax
f0109bee:	01 c0                	add    %eax,%eax
f0109bf0:	01 d0                	add    %edx,%eax
f0109bf2:	01 c0                	add    %eax,%eax
f0109bf4:	01 d0                	add    %edx,%eax
f0109bf6:	c1 e0 02             	shl    $0x2,%eax
f0109bf9:	01 d0                	add    %edx,%eax
f0109bfb:	01 c0                	add    %eax,%eax
f0109bfd:	01 d0                	add    %edx,%eax
f0109bff:	c1 e0 02             	shl    $0x2,%eax
f0109c02:	01 d0                	add    %edx,%eax
f0109c04:	c1 e0 02             	shl    $0x2,%eax
f0109c07:	01 d0                	add    %edx,%eax
f0109c09:	c1 e0 02             	shl    $0x2,%eax
f0109c0c:	01 d0                	add    %edx,%eax
f0109c0e:	c1 e0 05             	shl    $0x5,%eax
f0109c11:	01 c8                	add    %ecx,%eax
f0109c13:	a3 38 22 25 f0       	mov    %eax,0xf0252238
f0109c18:	8b 0d 30 22 25 f0    	mov    0xf0252230,%ecx
f0109c1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c21:	89 d0                	mov    %edx,%eax
f0109c23:	01 c0                	add    %eax,%eax
f0109c25:	01 d0                	add    %edx,%eax
f0109c27:	01 c0                	add    %eax,%eax
f0109c29:	01 d0                	add    %edx,%eax
f0109c2b:	c1 e0 02             	shl    $0x2,%eax
f0109c2e:	01 d0                	add    %edx,%eax
f0109c30:	01 c0                	add    %eax,%eax
f0109c32:	01 d0                	add    %edx,%eax
f0109c34:	c1 e0 02             	shl    $0x2,%eax
f0109c37:	01 d0                	add    %edx,%eax
f0109c39:	c1 e0 02             	shl    $0x2,%eax
f0109c3c:	01 d0                	add    %edx,%eax
f0109c3e:	c1 e0 02             	shl    $0x2,%eax
f0109c41:	01 d0                	add    %edx,%eax
f0109c43:	c1 e0 05             	shl    $0x5,%eax
f0109c46:	01 c8                	add    %ecx,%eax
f0109c48:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109c4f:	a1 44 22 25 f0       	mov    0xf0252244,%eax
f0109c54:	40                   	inc    %eax
f0109c55:	a3 44 22 25 f0       	mov    %eax,0xf0252244
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109c5a:	ff 4d f4             	decl   -0xc(%ebp)
f0109c5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109c61:	0f 89 13 fe ff ff    	jns    f0109a7a <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109c67:	90                   	nop
f0109c68:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109c6b:	c9                   	leave  
f0109c6c:	c3                   	ret    

f0109c6d <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109c6d:	55                   	push   %ebp
f0109c6e:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109c70:	8b 15 38 22 25 f0    	mov    0xf0252238,%edx
f0109c76:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c79:	89 10                	mov    %edx,(%eax)
f0109c7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c7e:	8b 00                	mov    (%eax),%eax
f0109c80:	85 c0                	test   %eax,%eax
f0109c82:	75 07                	jne    f0109c8b <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109c84:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109c89:	eb 11                	jmp    f0109c9c <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109c8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c8e:	8b 00                	mov    (%eax),%eax
f0109c90:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109c97:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109c9c:	5d                   	pop    %ebp
f0109c9d:	c3                   	ret    

f0109c9e <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109c9e:	55                   	push   %ebp
f0109c9f:	89 e5                	mov    %esp,%ebp
f0109ca1:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109ca4:	83 ec 04             	sub    $0x4,%esp
f0109ca7:	68 a0 da 01 00       	push   $0x1daa0
f0109cac:	6a 00                	push   $0x0
f0109cae:	ff 75 08             	pushl  0x8(%ebp)
f0109cb1:	e8 e8 52 02 00       	call   f012ef9e <memset>
f0109cb6:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109cb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cbc:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109cc3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109cc7:	75 17                	jne    f0109ce0 <free_environment+0x42>
f0109cc9:	83 ec 04             	sub    $0x4,%esp
f0109ccc:	68 f0 28 13 f0       	push   $0xf01328f0
f0109cd1:	68 5c 02 00 00       	push   $0x25c
f0109cd6:	68 6f 28 13 f0       	push   $0xf013286f
f0109cdb:	e8 d0 64 ff ff       	call   f01001b0 <_panic>
f0109ce0:	8b 15 38 22 25 f0    	mov    0xf0252238,%edx
f0109ce6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ce9:	89 50 44             	mov    %edx,0x44(%eax)
f0109cec:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cef:	8b 40 44             	mov    0x44(%eax),%eax
f0109cf2:	85 c0                	test   %eax,%eax
f0109cf4:	74 0d                	je     f0109d03 <free_environment+0x65>
f0109cf6:	a1 38 22 25 f0       	mov    0xf0252238,%eax
f0109cfb:	8b 55 08             	mov    0x8(%ebp),%edx
f0109cfe:	89 50 48             	mov    %edx,0x48(%eax)
f0109d01:	eb 08                	jmp    f0109d0b <free_environment+0x6d>
f0109d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d06:	a3 3c 22 25 f0       	mov    %eax,0xf025223c
f0109d0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d0e:	a3 38 22 25 f0       	mov    %eax,0xf0252238
f0109d13:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d16:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d1d:	a1 44 22 25 f0       	mov    0xf0252244,%eax
f0109d22:	40                   	inc    %eax
f0109d23:	a3 44 22 25 f0       	mov    %eax,0xf0252244
}
f0109d28:	90                   	nop
f0109d29:	c9                   	leave  
f0109d2a:	c3                   	ret    

f0109d2b <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109d2b:	55                   	push   %ebp
f0109d2c:	89 e5                	mov    %esp,%ebp
f0109d2e:	53                   	push   %ebx
f0109d2f:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109d32:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d35:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d38:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109d3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d3e:	8b 40 08             	mov    0x8(%eax),%eax
f0109d41:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109d44:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109d4b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109d4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109d51:	01 c2                	add    %eax,%edx
f0109d53:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109d56:	01 d0                	add    %edx,%eax
f0109d58:	48                   	dec    %eax
f0109d59:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109d5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109d5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d64:	f7 75 dc             	divl   -0x24(%ebp)
f0109d67:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109d6a:	29 d0                	sub    %edx,%eax
f0109d6c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109d6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d72:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109d75:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109d78:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109d7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109d80:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109d87:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109d8e:	8b 45 10             	mov    0x10(%ebp),%eax
f0109d91:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109d97:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109d9e:	0f 85 38 06 00 00    	jne    f010a3dc <program_segment_alloc_map_copy_workingset+0x6b1>
f0109da4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109da7:	83 c0 5c             	add    $0x5c,%eax
f0109daa:	83 ec 08             	sub    $0x8,%esp
f0109dad:	68 1f 29 13 f0       	push   $0xf013291f
f0109db2:	50                   	push   %eax
f0109db3:	e8 04 51 02 00       	call   f012eebc <strcmp>
f0109db8:	83 c4 10             	add    $0x10,%esp
f0109dbb:	85 c0                	test   %eax,%eax
f0109dbd:	0f 84 19 06 00 00    	je     f010a3dc <program_segment_alloc_map_copy_workingset+0x6b1>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109dc3:	8b 45 14             	mov    0x14(%ebp),%eax
f0109dc6:	83 f8 06             	cmp    $0x6,%eax
f0109dc9:	76 05                	jbe    f0109dd0 <program_segment_alloc_map_copy_workingset+0xa5>
f0109dcb:	b8 06 00 00 00       	mov    $0x6,%eax
f0109dd0:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109dd3:	e9 04 06 00 00       	jmp    f010a3dc <program_segment_alloc_map_copy_workingset+0x6b1>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109dd8:	83 ec 0c             	sub    $0xc,%esp
f0109ddb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109dde:	50                   	push   %eax
f0109ddf:	e8 e3 d4 ff ff       	call   f01072c7 <allocate_frame>
f0109de4:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109de7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109dea:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ded:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109df3:	6a 06                	push   $0x6
f0109df5:	ff 75 f4             	pushl  -0xc(%ebp)
f0109df8:	52                   	push   %edx
f0109df9:	50                   	push   %eax
f0109dfa:	e8 19 da ff ff       	call   f0107818 <loadtime_map_frame>
f0109dff:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e05:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e0b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e0e:	89 d0                	mov    %edx,%eax
f0109e10:	01 c0                	add    %eax,%eax
f0109e12:	01 d0                	add    %edx,%eax
f0109e14:	c1 e0 03             	shl    $0x3,%eax
f0109e17:	01 c8                	add    %ecx,%eax
f0109e19:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f0109e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e22:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109e24:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e27:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e2d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e30:	89 d0                	mov    %edx,%eax
f0109e32:	01 c0                	add    %eax,%eax
f0109e34:	01 d0                	add    %edx,%eax
f0109e36:	c1 e0 03             	shl    $0x3,%eax
f0109e39:	01 c8                	add    %ecx,%eax
f0109e3b:	05 bc 00 00 00       	add    $0xbc,%eax
f0109e40:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109e43:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e46:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e4c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e4f:	89 d0                	mov    %edx,%eax
f0109e51:	01 c0                	add    %eax,%eax
f0109e53:	01 d0                	add    %edx,%eax
f0109e55:	c1 e0 03             	shl    $0x3,%eax
f0109e58:	01 c8                	add    %ecx,%eax
f0109e5a:	05 c0 00 00 00       	add    $0xc0,%eax
f0109e5f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109e65:	83 ec 0c             	sub    $0xc,%esp
f0109e68:	6a 02                	push   $0x2
f0109e6a:	e8 83 38 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f0109e6f:	83 c4 10             	add    $0x10,%esp
f0109e72:	85 c0                	test   %eax,%eax
f0109e74:	0f 84 2c 04 00 00    	je     f010a2a6 <program_segment_alloc_map_copy_workingset+0x57b>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109e7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e7d:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e83:	89 d0                	mov    %edx,%eax
f0109e85:	01 c0                	add    %eax,%eax
f0109e87:	01 d0                	add    %edx,%eax
f0109e89:	c1 e0 03             	shl    $0x3,%eax
f0109e8c:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109e92:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e95:	01 d0                	add    %edx,%eax
f0109e97:	83 c0 08             	add    $0x8,%eax
f0109e9a:	85 c0                	test   %eax,%eax
f0109e9c:	75 17                	jne    f0109eb5 <program_segment_alloc_map_copy_workingset+0x18a>
f0109e9e:	83 ec 04             	sub    $0x4,%esp
f0109ea1:	68 d1 28 13 f0       	push   $0xf01328d1
f0109ea6:	68 9f 02 00 00       	push   $0x29f
f0109eab:	68 6f 28 13 f0       	push   $0xf013286f
f0109eb0:	e8 fb 62 ff ff       	call   f01001b0 <_panic>
f0109eb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eb8:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ebe:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ec1:	89 d0                	mov    %edx,%eax
f0109ec3:	01 c0                	add    %eax,%eax
f0109ec5:	01 d0                	add    %edx,%eax
f0109ec7:	c1 e0 03             	shl    $0x3,%eax
f0109eca:	01 c8                	add    %ecx,%eax
f0109ecc:	05 c8 00 00 00       	add    $0xc8,%eax
f0109ed1:	8b 00                	mov    (%eax),%eax
f0109ed3:	85 c0                	test   %eax,%eax
f0109ed5:	74 41                	je     f0109f18 <program_segment_alloc_map_copy_workingset+0x1ed>
f0109ed7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eda:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ee0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ee3:	89 d0                	mov    %edx,%eax
f0109ee5:	01 c0                	add    %eax,%eax
f0109ee7:	01 d0                	add    %edx,%eax
f0109ee9:	c1 e0 03             	shl    $0x3,%eax
f0109eec:	01 c8                	add    %ecx,%eax
f0109eee:	05 c8 00 00 00       	add    $0xc8,%eax
f0109ef3:	8b 10                	mov    (%eax),%edx
f0109ef5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef8:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109efe:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109f01:	89 c8                	mov    %ecx,%eax
f0109f03:	01 c0                	add    %eax,%eax
f0109f05:	01 c8                	add    %ecx,%eax
f0109f07:	c1 e0 03             	shl    $0x3,%eax
f0109f0a:	01 d8                	add    %ebx,%eax
f0109f0c:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f11:	8b 00                	mov    (%eax),%eax
f0109f13:	89 42 14             	mov    %eax,0x14(%edx)
f0109f16:	eb 27                	jmp    f0109f3f <program_segment_alloc_map_copy_workingset+0x214>
f0109f18:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f1b:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f21:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f24:	89 d0                	mov    %edx,%eax
f0109f26:	01 c0                	add    %eax,%eax
f0109f28:	01 d0                	add    %edx,%eax
f0109f2a:	c1 e0 03             	shl    $0x3,%eax
f0109f2d:	01 c8                	add    %ecx,%eax
f0109f2f:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f34:	8b 10                	mov    (%eax),%edx
f0109f36:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f39:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f0109f3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f42:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f48:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f4b:	89 d0                	mov    %edx,%eax
f0109f4d:	01 c0                	add    %eax,%eax
f0109f4f:	01 d0                	add    %edx,%eax
f0109f51:	c1 e0 03             	shl    $0x3,%eax
f0109f54:	01 c8                	add    %ecx,%eax
f0109f56:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f5b:	8b 00                	mov    (%eax),%eax
f0109f5d:	85 c0                	test   %eax,%eax
f0109f5f:	74 41                	je     f0109fa2 <program_segment_alloc_map_copy_workingset+0x277>
f0109f61:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f64:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f6a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f6d:	89 d0                	mov    %edx,%eax
f0109f6f:	01 c0                	add    %eax,%eax
f0109f71:	01 d0                	add    %edx,%eax
f0109f73:	c1 e0 03             	shl    $0x3,%eax
f0109f76:	01 c8                	add    %ecx,%eax
f0109f78:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f7d:	8b 10                	mov    (%eax),%edx
f0109f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f82:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109f88:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109f8b:	89 c8                	mov    %ecx,%eax
f0109f8d:	01 c0                	add    %eax,%eax
f0109f8f:	01 c8                	add    %ecx,%eax
f0109f91:	c1 e0 03             	shl    $0x3,%eax
f0109f94:	01 d8                	add    %ebx,%eax
f0109f96:	05 c8 00 00 00       	add    $0xc8,%eax
f0109f9b:	8b 00                	mov    (%eax),%eax
f0109f9d:	89 42 10             	mov    %eax,0x10(%edx)
f0109fa0:	eb 27                	jmp    f0109fc9 <program_segment_alloc_map_copy_workingset+0x29e>
f0109fa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa5:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fab:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fae:	89 d0                	mov    %edx,%eax
f0109fb0:	01 c0                	add    %eax,%eax
f0109fb2:	01 d0                	add    %edx,%eax
f0109fb4:	c1 e0 03             	shl    $0x3,%eax
f0109fb7:	01 c8                	add    %ecx,%eax
f0109fb9:	05 c8 00 00 00       	add    $0xc8,%eax
f0109fbe:	8b 10                	mov    (%eax),%edx
f0109fc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc3:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f0109fc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fcc:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fd2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fd5:	89 d0                	mov    %edx,%eax
f0109fd7:	01 c0                	add    %eax,%eax
f0109fd9:	01 d0                	add    %edx,%eax
f0109fdb:	c1 e0 03             	shl    $0x3,%eax
f0109fde:	01 c8                	add    %ecx,%eax
f0109fe0:	05 c8 00 00 00       	add    $0xc8,%eax
f0109fe5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109feb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fee:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ff4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ff7:	89 d0                	mov    %edx,%eax
f0109ff9:	01 c0                	add    %eax,%eax
f0109ffb:	01 d0                	add    %edx,%eax
f0109ffd:	c1 e0 03             	shl    $0x3,%eax
f010a000:	01 c8                	add    %ecx,%eax
f010a002:	05 cc 00 00 00       	add    $0xcc,%eax
f010a007:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a00d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a010:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a016:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a019:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01c:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a022:	8b 45 08             	mov    0x8(%ebp),%eax
f010a025:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010a02b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a02e:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f010a034:	48                   	dec    %eax
f010a035:	39 c2                	cmp    %eax,%edx
f010a037:	0f 83 37 01 00 00    	jae    f010a174 <program_segment_alloc_map_copy_workingset+0x449>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a03d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a040:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a046:	89 d0                	mov    %edx,%eax
f010a048:	01 c0                	add    %eax,%eax
f010a04a:	01 d0                	add    %edx,%eax
f010a04c:	c1 e0 03             	shl    $0x3,%eax
f010a04f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a055:	8b 45 08             	mov    0x8(%ebp),%eax
f010a058:	01 d0                	add    %edx,%eax
f010a05a:	83 c0 08             	add    $0x8,%eax
f010a05d:	85 c0                	test   %eax,%eax
f010a05f:	75 17                	jne    f010a078 <program_segment_alloc_map_copy_workingset+0x34d>
f010a061:	83 ec 04             	sub    $0x4,%esp
f010a064:	68 f0 28 13 f0       	push   $0xf01328f0
f010a069:	68 a3 02 00 00       	push   $0x2a3
f010a06e:	68 6f 28 13 f0       	push   $0xf013286f
f010a073:	e8 38 61 ff ff       	call   f01001b0 <_panic>
f010a078:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07b:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a081:	8b 45 08             	mov    0x8(%ebp),%eax
f010a084:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010a08a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a08d:	89 d0                	mov    %edx,%eax
f010a08f:	01 c0                	add    %eax,%eax
f010a091:	01 d0                	add    %edx,%eax
f010a093:	c1 e0 03             	shl    $0x3,%eax
f010a096:	01 d8                	add    %ebx,%eax
f010a098:	05 c8 00 00 00       	add    $0xc8,%eax
f010a09d:	89 08                	mov    %ecx,(%eax)
f010a09f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a0a2:	89 d0                	mov    %edx,%eax
f010a0a4:	01 c0                	add    %eax,%eax
f010a0a6:	01 d0                	add    %edx,%eax
f010a0a8:	c1 e0 03             	shl    $0x3,%eax
f010a0ab:	01 c8                	add    %ecx,%eax
f010a0ad:	05 c8 00 00 00       	add    $0xc8,%eax
f010a0b2:	8b 00                	mov    (%eax),%eax
f010a0b4:	85 c0                	test   %eax,%eax
f010a0b6:	74 2e                	je     f010a0e6 <program_segment_alloc_map_copy_workingset+0x3bb>
f010a0b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0bb:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010a0c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0c4:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a0ca:	89 c8                	mov    %ecx,%eax
f010a0cc:	01 c0                	add    %eax,%eax
f010a0ce:	01 c8                	add    %ecx,%eax
f010a0d0:	c1 e0 03             	shl    $0x3,%eax
f010a0d3:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a0d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0dc:	01 c8                	add    %ecx,%eax
f010a0de:	83 c0 08             	add    $0x8,%eax
f010a0e1:	89 42 14             	mov    %eax,0x14(%edx)
f010a0e4:	eb 29                	jmp    f010a10f <program_segment_alloc_map_copy_workingset+0x3e4>
f010a0e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e9:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0ef:	89 d0                	mov    %edx,%eax
f010a0f1:	01 c0                	add    %eax,%eax
f010a0f3:	01 d0                	add    %edx,%eax
f010a0f5:	c1 e0 03             	shl    $0x3,%eax
f010a0f8:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a0fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a101:	01 d0                	add    %edx,%eax
f010a103:	8d 50 08             	lea    0x8(%eax),%edx
f010a106:	8b 45 08             	mov    0x8(%ebp),%eax
f010a109:	89 90 48 da 01 00    	mov    %edx,0x1da48(%eax)
f010a10f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a112:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a118:	89 d0                	mov    %edx,%eax
f010a11a:	01 c0                	add    %eax,%eax
f010a11c:	01 d0                	add    %edx,%eax
f010a11e:	c1 e0 03             	shl    $0x3,%eax
f010a121:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a127:	8b 45 08             	mov    0x8(%ebp),%eax
f010a12a:	01 d0                	add    %edx,%eax
f010a12c:	8d 50 08             	lea    0x8(%eax),%edx
f010a12f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a132:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)
f010a138:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13b:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a141:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a144:	89 d0                	mov    %edx,%eax
f010a146:	01 c0                	add    %eax,%eax
f010a148:	01 d0                	add    %edx,%eax
f010a14a:	c1 e0 03             	shl    $0x3,%eax
f010a14d:	01 c8                	add    %ecx,%eax
f010a14f:	05 cc 00 00 00       	add    $0xcc,%eax
f010a154:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a15a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15d:	8b 80 50 da 01 00    	mov    0x1da50(%eax),%eax
f010a163:	8d 50 01             	lea    0x1(%eax),%edx
f010a166:	8b 45 08             	mov    0x8(%ebp),%eax
f010a169:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010a16f:	e9 32 01 00 00       	jmp    f010a2a6 <program_segment_alloc_map_copy_workingset+0x57b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a174:	8b 45 08             	mov    0x8(%ebp),%eax
f010a177:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a17d:	89 d0                	mov    %edx,%eax
f010a17f:	01 c0                	add    %eax,%eax
f010a181:	01 d0                	add    %edx,%eax
f010a183:	c1 e0 03             	shl    $0x3,%eax
f010a186:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a18c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a18f:	01 d0                	add    %edx,%eax
f010a191:	83 c0 08             	add    $0x8,%eax
f010a194:	85 c0                	test   %eax,%eax
f010a196:	75 17                	jne    f010a1af <program_segment_alloc_map_copy_workingset+0x484>
f010a198:	83 ec 04             	sub    $0x4,%esp
f010a19b:	68 f0 28 13 f0       	push   $0xf01328f0
f010a1a0:	68 a8 02 00 00       	push   $0x2a8
f010a1a5:	68 6f 28 13 f0       	push   $0xf013286f
f010a1aa:	e8 01 60 ff ff       	call   f01001b0 <_panic>
f010a1af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bb:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010a1c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a1c4:	89 d0                	mov    %edx,%eax
f010a1c6:	01 c0                	add    %eax,%eax
f010a1c8:	01 d0                	add    %edx,%eax
f010a1ca:	c1 e0 03             	shl    $0x3,%eax
f010a1cd:	01 d8                	add    %ebx,%eax
f010a1cf:	05 c8 00 00 00       	add    $0xc8,%eax
f010a1d4:	89 08                	mov    %ecx,(%eax)
f010a1d6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a1d9:	89 d0                	mov    %edx,%eax
f010a1db:	01 c0                	add    %eax,%eax
f010a1dd:	01 d0                	add    %edx,%eax
f010a1df:	c1 e0 03             	shl    $0x3,%eax
f010a1e2:	01 c8                	add    %ecx,%eax
f010a1e4:	05 c8 00 00 00       	add    $0xc8,%eax
f010a1e9:	8b 00                	mov    (%eax),%eax
f010a1eb:	85 c0                	test   %eax,%eax
f010a1ed:	74 2e                	je     f010a21d <program_segment_alloc_map_copy_workingset+0x4f2>
f010a1ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1f2:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f010a1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1fb:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a201:	89 c8                	mov    %ecx,%eax
f010a203:	01 c0                	add    %eax,%eax
f010a205:	01 c8                	add    %ecx,%eax
f010a207:	c1 e0 03             	shl    $0x3,%eax
f010a20a:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a210:	8b 45 08             	mov    0x8(%ebp),%eax
f010a213:	01 c8                	add    %ecx,%eax
f010a215:	83 c0 08             	add    $0x8,%eax
f010a218:	89 42 14             	mov    %eax,0x14(%edx)
f010a21b:	eb 29                	jmp    f010a246 <program_segment_alloc_map_copy_workingset+0x51b>
f010a21d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a220:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a226:	89 d0                	mov    %edx,%eax
f010a228:	01 c0                	add    %eax,%eax
f010a22a:	01 d0                	add    %edx,%eax
f010a22c:	c1 e0 03             	shl    $0x3,%eax
f010a22f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a235:	8b 45 08             	mov    0x8(%ebp),%eax
f010a238:	01 d0                	add    %edx,%eax
f010a23a:	8d 50 08             	lea    0x8(%eax),%edx
f010a23d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a240:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
f010a246:	8b 45 08             	mov    0x8(%ebp),%eax
f010a249:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a24f:	89 d0                	mov    %edx,%eax
f010a251:	01 c0                	add    %eax,%eax
f010a253:	01 d0                	add    %edx,%eax
f010a255:	c1 e0 03             	shl    $0x3,%eax
f010a258:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a25e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a261:	01 d0                	add    %edx,%eax
f010a263:	8d 50 08             	lea    0x8(%eax),%edx
f010a266:	8b 45 08             	mov    0x8(%ebp),%eax
f010a269:	89 90 54 da 01 00    	mov    %edx,0x1da54(%eax)
f010a26f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a272:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a278:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a27b:	89 d0                	mov    %edx,%eax
f010a27d:	01 c0                	add    %eax,%eax
f010a27f:	01 d0                	add    %edx,%eax
f010a281:	c1 e0 03             	shl    $0x3,%eax
f010a284:	01 c8                	add    %ecx,%eax
f010a286:	05 cc 00 00 00       	add    $0xcc,%eax
f010a28b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a291:	8b 45 08             	mov    0x8(%ebp),%eax
f010a294:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f010a29a:	8d 50 01             	lea    0x1(%eax),%edx
f010a29d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a0:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010a2a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a9:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a2af:	8d 50 01             	lea    0x1(%eax),%edx
f010a2b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2b5:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a2bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2be:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a2c4:	8b 55 08             	mov    0x8(%ebp),%edx
f010a2c7:	8b 8a 7c d5 01 00    	mov    0x1d57c(%edx),%ecx
f010a2cd:	ba 00 00 00 00       	mov    $0x0,%edx
f010a2d2:	f7 f1                	div    %ecx
f010a2d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d7:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a2dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2e0:	c1 e8 16             	shr    $0x16,%eax
f010a2e3:	89 c2                	mov    %eax,%edx
f010a2e5:	8b 45 18             	mov    0x18(%ebp),%eax
f010a2e8:	8b 00                	mov    (%eax),%eax
f010a2ea:	39 c2                	cmp    %eax,%edx
f010a2ec:	0f 84 d3 00 00 00    	je     f010a3c5 <program_segment_alloc_map_copy_workingset+0x69a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a2f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f5:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a2fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2fe:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a301:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a304:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a309:	89 c1                	mov    %eax,%ecx
f010a30b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a30e:	89 d0                	mov    %edx,%eax
f010a310:	01 c0                	add    %eax,%eax
f010a312:	01 d0                	add    %edx,%eax
f010a314:	c1 e0 03             	shl    $0x3,%eax
f010a317:	01 d8                	add    %ebx,%eax
f010a319:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a31e:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a320:	8b 45 08             	mov    0x8(%ebp),%eax
f010a323:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a329:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a32c:	89 d0                	mov    %edx,%eax
f010a32e:	01 c0                	add    %eax,%eax
f010a330:	01 d0                	add    %edx,%eax
f010a332:	c1 e0 03             	shl    $0x3,%eax
f010a335:	01 c8                	add    %ecx,%eax
f010a337:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a33c:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a33f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a342:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a348:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a34b:	89 d0                	mov    %edx,%eax
f010a34d:	01 c0                	add    %eax,%eax
f010a34f:	01 d0                	add    %edx,%eax
f010a351:	c1 e0 03             	shl    $0x3,%eax
f010a354:	01 c8                	add    %ecx,%eax
f010a356:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a35b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a361:	8b 45 08             	mov    0x8(%ebp),%eax
f010a364:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a36a:	8d 50 01             	lea    0x1(%eax),%edx
f010a36d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a370:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a376:	8b 45 08             	mov    0x8(%ebp),%eax
f010a379:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a37f:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a384:	ba 00 00 00 00       	mov    $0x0,%edx
f010a389:	f7 f1                	div    %ecx
f010a38b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38e:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			if (e->table_last_WS_index == 0)
f010a394:	8b 45 08             	mov    0x8(%ebp),%eax
f010a397:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a39d:	85 c0                	test   %eax,%eax
f010a39f:	75 17                	jne    f010a3b8 <program_segment_alloc_map_copy_workingset+0x68d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a3a1:	83 ec 04             	sub    $0x4,%esp
f010a3a4:	68 24 29 13 f0       	push   $0xf0132924
f010a3a9:	68 c3 02 00 00       	push   $0x2c3
f010a3ae:	68 6f 28 13 f0       	push   $0xf013286f
f010a3b3:	e8 f8 5d ff ff       	call   f01001b0 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a3b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3bb:	c1 e8 16             	shr    $0x16,%eax
f010a3be:	89 c2                	mov    %eax,%edx
f010a3c0:	8b 45 18             	mov    0x18(%ebp),%eax
f010a3c3:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a3c5:	8b 45 10             	mov    0x10(%ebp),%eax
f010a3c8:	8b 00                	mov    (%eax),%eax
f010a3ca:	8d 50 01             	lea    0x1(%eax),%edx
f010a3cd:	8b 45 10             	mov    0x10(%ebp),%eax
f010a3d0:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a3d2:	ff 45 f0             	incl   -0x10(%ebp)
f010a3d5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a3dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3df:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a3e2:	73 0c                	jae    f010a3f0 <program_segment_alloc_map_copy_workingset+0x6c5>
f010a3e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a3e7:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a3ea:	0f 82 e8 f9 ff ff    	jb     f0109dd8 <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a3f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a3f3:	8b 00                	mov    (%eax),%eax
f010a3f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a3f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a3fb:	8b 40 0c             	mov    0xc(%eax),%eax
f010a3fe:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a401:	eb 10                	jmp    f010a413 <program_segment_alloc_map_copy_workingset+0x6e8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a403:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a406:	8a 10                	mov    (%eax),%dl
f010a408:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a40b:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a40d:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a410:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a413:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a416:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a419:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a41c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a421:	89 c2                	mov    %eax,%edx
f010a423:	8b 45 10             	mov    0x10(%ebp),%eax
f010a426:	8b 00                	mov    (%eax),%eax
f010a428:	c1 e0 0c             	shl    $0xc,%eax
f010a42b:	01 c2                	add    %eax,%edx
f010a42d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a430:	39 c2                	cmp    %eax,%edx
f010a432:	76 1d                	jbe    f010a451 <program_segment_alloc_map_copy_workingset+0x726>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a434:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a437:	8b 50 04             	mov    0x4(%eax),%edx
f010a43a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a43d:	01 c2                	add    %eax,%edx
f010a43f:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a442:	39 c2                	cmp    %eax,%edx
f010a444:	77 bd                	ja     f010a403 <program_segment_alloc_map_copy_workingset+0x6d8>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a446:	eb 09                	jmp    f010a451 <program_segment_alloc_map_copy_workingset+0x726>
	{
		*dst_ptr = 0;
f010a448:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a44b:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a44e:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a451:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a454:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a457:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a45a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a45f:	89 c2                	mov    %eax,%edx
f010a461:	8b 45 10             	mov    0x10(%ebp),%eax
f010a464:	8b 00                	mov    (%eax),%eax
f010a466:	c1 e0 0c             	shl    $0xc,%eax
f010a469:	01 c2                	add    %eax,%edx
f010a46b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a46e:	39 c2                	cmp    %eax,%edx
f010a470:	77 d6                	ja     f010a448 <program_segment_alloc_map_copy_workingset+0x71d>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a472:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a477:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a47a:	c9                   	leave  
f010a47b:	c3                   	ret    

f010a47c <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a47c:	55                   	push   %ebp
f010a47d:	89 e5                	mov    %esp,%ebp
f010a47f:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a482:	83 ec 0c             	sub    $0xc,%esp
f010a485:	68 00 10 00 00       	push   $0x1000
f010a48a:	e8 72 da ff ff       	call   f0107f01 <kmalloc>
f010a48f:	83 c4 10             	add    $0x10,%esp
f010a492:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a495:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a499:	75 17                	jne    f010a4b2 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a49b:	83 ec 04             	sub    $0x4,%esp
f010a49e:	68 c7 29 13 f0       	push   $0xf01329c7
f010a4a3:	68 ff 02 00 00       	push   $0x2ff
f010a4a8:	68 6f 28 13 f0       	push   $0xf013286f
f010a4ad:	e8 fe 5c ff ff       	call   f01001b0 <_panic>
	}
	return ptr_user_page_directory;
f010a4b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010a4b5:	c9                   	leave  
f010a4b6:	c3                   	ret    

f010a4b7 <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010a4b7:	55                   	push   %ebp
f010a4b8:	89 e5                	mov    %esp,%ebp
f010a4ba:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #07] [2] USER HEAP - initialize_uheap_dynamic_allocator()
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	panic("not implemented yet");
f010a4bd:	83 ec 04             	sub    $0x4,%esp
f010a4c0:	68 e4 29 13 f0       	push   $0xf01329e4
f010a4c5:	68 0e 03 00 00       	push   $0x30e
f010a4ca:	68 6f 28 13 f0       	push   $0xf013286f
f010a4cf:	e8 dc 5c ff ff       	call   f01001b0 <_panic>

f010a4d4 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a4d4:	55                   	push   %ebp
f010a4d5:	89 e5                	mov    %esp,%ebp
f010a4d7:	53                   	push   %ebx
f010a4d8:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a4db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4de:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a4e1:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a4e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ea:	8b 55 10             	mov    0x10(%ebp),%edx
f010a4ed:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a4f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a4fa:	eb 1a                	jmp    f010a516 <initialize_environment+0x42>
	{
		e->env_page_directory[i] = 0 ;
f010a4fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ff:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a505:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a508:	c1 e2 02             	shl    $0x2,%edx
f010a50b:	01 d0                	add    %edx,%eax
f010a50d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a513:	ff 45 f4             	incl   -0xc(%ebp)
f010a516:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a519:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a51e:	76 dc                	jbe    f010a4fc <initialize_environment+0x28>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a520:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a527:	eb 25                	jmp    f010a54e <initialize_environment+0x7a>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a529:	8b 45 08             	mov    0x8(%ebp),%eax
f010a52c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a532:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a535:	c1 e2 02             	shl    $0x2,%edx
f010a538:	01 c2                	add    %eax,%edx
f010a53a:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f010a53f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a542:	c1 e1 02             	shl    $0x2,%ecx
f010a545:	01 c8                	add    %ecx,%eax
f010a547:	8b 00                	mov    (%eax),%eax
f010a549:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a54b:	ff 45 f4             	incl   -0xc(%ebp)
f010a54e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a555:	7e d2                	jle    f010a529 <initialize_environment+0x55>
		LIST_INIT(&(e->page_WS_list));
		//share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010a557:	8b 45 08             	mov    0x8(%ebp),%eax
f010a55a:	8b 15 30 22 25 f0    	mov    0xf0252230,%edx
f010a560:	29 d0                	sub    %edx,%eax
f010a562:	c1 f8 05             	sar    $0x5,%eax
f010a565:	89 c2                	mov    %eax,%edx
f010a567:	89 d0                	mov    %edx,%eax
f010a569:	c1 e0 03             	shl    $0x3,%eax
f010a56c:	01 d0                	add    %edx,%eax
f010a56e:	01 c0                	add    %eax,%eax
f010a570:	01 d0                	add    %edx,%eax
f010a572:	c1 e0 06             	shl    $0x6,%eax
f010a575:	01 d0                	add    %edx,%eax
f010a577:	89 c1                	mov    %eax,%ecx
f010a579:	c1 e1 04             	shl    $0x4,%ecx
f010a57c:	01 c8                	add    %ecx,%eax
f010a57e:	c1 e0 03             	shl    $0x3,%eax
f010a581:	01 d0                	add    %edx,%eax
f010a583:	01 c0                	add    %eax,%eax
f010a585:	01 d0                	add    %edx,%eax
f010a587:	89 c1                	mov    %eax,%ecx
f010a589:	c1 e1 04             	shl    $0x4,%ecx
f010a58c:	01 c8                	add    %ecx,%eax
f010a58e:	c1 e0 03             	shl    $0x3,%eax
f010a591:	01 d0                	add    %edx,%eax
f010a593:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a59a:	01 d0                	add    %edx,%eax
f010a59c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010a59f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a5a2:	89 d0                	mov    %edx,%eax
f010a5a4:	01 c0                	add    %eax,%eax
f010a5a6:	01 d0                	add    %edx,%eax
f010a5a8:	01 c0                	add    %eax,%eax
f010a5aa:	01 d0                	add    %edx,%eax
f010a5ac:	c1 e0 02             	shl    $0x2,%eax
f010a5af:	01 d0                	add    %edx,%eax
f010a5b1:	01 c0                	add    %eax,%eax
f010a5b3:	01 d0                	add    %edx,%eax
f010a5b5:	c1 e0 02             	shl    $0x2,%eax
f010a5b8:	01 d0                	add    %edx,%eax
f010a5ba:	c1 e0 02             	shl    $0x2,%eax
f010a5bd:	01 d0                	add    %edx,%eax
f010a5bf:	c1 e0 02             	shl    $0x2,%eax
f010a5c2:	01 d0                	add    %edx,%eax
f010a5c4:	c1 e0 05             	shl    $0x5,%eax
f010a5c7:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a5cc:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010a5d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d5:	89 90 6c da 01 00    	mov    %edx,0x1da6c(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a5db:	83 ec 0c             	sub    $0xc,%esp
f010a5de:	6a 02                	push   $0x2
f010a5e0:	e8 0d 31 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f010a5e5:	83 c4 10             	add    $0x10,%esp
f010a5e8:	85 c0                	test   %eax,%eax
f010a5ea:	0f 84 34 01 00 00    	je     f010a724 <initialize_environment+0x250>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a5f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a5f7:	e9 14 01 00 00       	jmp    f010a710 <initialize_environment+0x23c>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a5fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a5ff:	89 d0                	mov    %edx,%eax
f010a601:	01 c0                	add    %eax,%eax
f010a603:	01 d0                	add    %edx,%eax
f010a605:	c1 e0 03             	shl    $0x3,%eax
f010a608:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a60e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a611:	01 d0                	add    %edx,%eax
f010a613:	83 c0 08             	add    $0x8,%eax
f010a616:	85 c0                	test   %eax,%eax
f010a618:	75 17                	jne    f010a631 <initialize_environment+0x15d>
f010a61a:	83 ec 04             	sub    $0x4,%esp
f010a61d:	68 f0 28 13 f0       	push   $0xf01328f0
f010a622:	68 45 03 00 00       	push   $0x345
f010a627:	68 6f 28 13 f0       	push   $0xf013286f
f010a62c:	e8 7f 5b ff ff       	call   f01001b0 <_panic>
f010a631:	8b 45 08             	mov    0x8(%ebp),%eax
f010a634:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a63a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a63d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a640:	89 c8                	mov    %ecx,%eax
f010a642:	01 c0                	add    %eax,%eax
f010a644:	01 c8                	add    %ecx,%eax
f010a646:	c1 e0 03             	shl    $0x3,%eax
f010a649:	01 d8                	add    %ebx,%eax
f010a64b:	05 c8 00 00 00       	add    $0xc8,%eax
f010a650:	89 10                	mov    %edx,(%eax)
f010a652:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a655:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a658:	89 d0                	mov    %edx,%eax
f010a65a:	01 c0                	add    %eax,%eax
f010a65c:	01 d0                	add    %edx,%eax
f010a65e:	c1 e0 03             	shl    $0x3,%eax
f010a661:	01 c8                	add    %ecx,%eax
f010a663:	05 c8 00 00 00       	add    $0xc8,%eax
f010a668:	8b 00                	mov    (%eax),%eax
f010a66a:	85 c0                	test   %eax,%eax
f010a66c:	74 28                	je     f010a696 <initialize_environment+0x1c2>
f010a66e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a671:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a677:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a67a:	89 c8                	mov    %ecx,%eax
f010a67c:	01 c0                	add    %eax,%eax
f010a67e:	01 c8                	add    %ecx,%eax
f010a680:	c1 e0 03             	shl    $0x3,%eax
f010a683:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a689:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68c:	01 c8                	add    %ecx,%eax
f010a68e:	83 c0 08             	add    $0x8,%eax
f010a691:	89 42 14             	mov    %eax,0x14(%edx)
f010a694:	eb 23                	jmp    f010a6b9 <initialize_environment+0x1e5>
f010a696:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a699:	89 d0                	mov    %edx,%eax
f010a69b:	01 c0                	add    %eax,%eax
f010a69d:	01 d0                	add    %edx,%eax
f010a69f:	c1 e0 03             	shl    $0x3,%eax
f010a6a2:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a6a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ab:	01 d0                	add    %edx,%eax
f010a6ad:	8d 50 08             	lea    0x8(%eax),%edx
f010a6b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b3:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a6b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6bc:	89 d0                	mov    %edx,%eax
f010a6be:	01 c0                	add    %eax,%eax
f010a6c0:	01 d0                	add    %edx,%eax
f010a6c2:	c1 e0 03             	shl    $0x3,%eax
f010a6c5:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a6cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ce:	01 d0                	add    %edx,%eax
f010a6d0:	8d 50 08             	lea    0x8(%eax),%edx
f010a6d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d6:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a6dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a6df:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6e2:	89 d0                	mov    %edx,%eax
f010a6e4:	01 c0                	add    %eax,%eax
f010a6e6:	01 d0                	add    %edx,%eax
f010a6e8:	c1 e0 03             	shl    $0x3,%eax
f010a6eb:	01 c8                	add    %ecx,%eax
f010a6ed:	05 cc 00 00 00       	add    $0xcc,%eax
f010a6f2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a6f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6fb:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a701:	8d 50 01             	lea    0x1(%eax),%edx
f010a704:	8b 45 08             	mov    0x8(%ebp),%eax
f010a707:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a70d:	ff 45 f0             	incl   -0x10(%ebp)
f010a710:	8b 45 08             	mov    0x8(%ebp),%eax
f010a713:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a719:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a71c:	39 c2                	cmp    %eax,%edx
f010a71e:	0f 87 d8 fe ff ff    	ja     f010a5fc <initialize_environment+0x128>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a724:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a72b:	eb 54                	jmp    f010a781 <initialize_environment+0x2ad>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a72d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a730:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a733:	89 d0                	mov    %edx,%eax
f010a735:	01 c0                	add    %eax,%eax
f010a737:	01 d0                	add    %edx,%eax
f010a739:	c1 e0 03             	shl    $0x3,%eax
f010a73c:	01 c8                	add    %ecx,%eax
f010a73e:	05 b8 00 00 00       	add    $0xb8,%eax
f010a743:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a749:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a74c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a74f:	89 d0                	mov    %edx,%eax
f010a751:	01 c0                	add    %eax,%eax
f010a753:	01 d0                	add    %edx,%eax
f010a755:	c1 e0 03             	shl    $0x3,%eax
f010a758:	01 c8                	add    %ecx,%eax
f010a75a:	05 bc 00 00 00       	add    $0xbc,%eax
f010a75f:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a762:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a765:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a768:	89 d0                	mov    %edx,%eax
f010a76a:	01 c0                	add    %eax,%eax
f010a76c:	01 d0                	add    %edx,%eax
f010a76e:	c1 e0 03             	shl    $0x3,%eax
f010a771:	01 c8                	add    %ecx,%eax
f010a773:	05 c0 00 00 00       	add    $0xc0,%eax
f010a778:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a77e:	ff 45 f4             	incl   -0xc(%ebp)
f010a781:	8b 45 08             	mov    0x8(%ebp),%eax
f010a784:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a78a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a78d:	39 c2                	cmp    %eax,%edx
f010a78f:	77 9c                	ja     f010a72d <initialize_environment+0x259>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a791:	8b 45 08             	mov    0x8(%ebp),%eax
f010a794:	c7 80 78 d5 01 00 00 	movl   $0x0,0x1d578(%eax)
f010a79b:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a79e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a7a5:	eb 54                	jmp    f010a7fb <initialize_environment+0x327>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a7a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7ad:	89 d0                	mov    %edx,%eax
f010a7af:	01 c0                	add    %eax,%eax
f010a7b1:	01 d0                	add    %edx,%eax
f010a7b3:	c1 e0 03             	shl    $0x3,%eax
f010a7b6:	01 c8                	add    %ecx,%eax
f010a7b8:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a7bd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a7c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7c9:	89 d0                	mov    %edx,%eax
f010a7cb:	01 c0                	add    %eax,%eax
f010a7cd:	01 d0                	add    %edx,%eax
f010a7cf:	c1 e0 03             	shl    $0x3,%eax
f010a7d2:	01 c8                	add    %ecx,%eax
f010a7d4:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a7d9:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a7dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7e2:	89 d0                	mov    %edx,%eax
f010a7e4:	01 c0                	add    %eax,%eax
f010a7e6:	01 d0                	add    %edx,%eax
f010a7e8:	c1 e0 03             	shl    $0x3,%eax
f010a7eb:	01 c8                	add    %ecx,%eax
f010a7ed:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a7f2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a7f8:	ff 45 f4             	incl   -0xc(%ebp)
f010a7fb:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a7ff:	7e a6                	jle    f010a7a7 <initialize_environment+0x2d3>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a801:	8b 45 08             	mov    0x8(%ebp),%eax
f010a804:	c7 80 30 da 01 00 00 	movl   $0x0,0x1da30(%eax)
f010a80b:	00 00 00 

	e->pageFaultsCounter=0;
f010a80e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a811:	c7 80 74 da 01 00 00 	movl   $0x0,0x1da74(%eax)
f010a818:	00 00 00 
	e->tableFaultsCounter=0;
f010a81b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a81e:	c7 80 78 da 01 00 00 	movl   $0x0,0x1da78(%eax)
f010a825:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a828:	8b 45 08             	mov    0x8(%ebp),%eax
f010a82b:	c7 80 7c da 01 00 00 	movl   $0x0,0x1da7c(%eax)
f010a832:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a835:	8b 45 08             	mov    0x8(%ebp),%eax
f010a838:	c7 80 80 da 01 00 00 	movl   $0x0,0x1da80(%eax)
f010a83f:	00 00 00 

	e->nModifiedPages=0;
f010a842:	8b 45 08             	mov    0x8(%ebp),%eax
f010a845:	c7 80 84 da 01 00 00 	movl   $0x0,0x1da84(%eax)
f010a84c:	00 00 00 
	e->nNotModifiedPages=0;
f010a84f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a852:	c7 80 88 da 01 00 00 	movl   $0x0,0x1da88(%eax)
f010a859:	00 00 00 
	e->nClocks = 0;
f010a85c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a85f:	c7 80 9c da 01 00 00 	movl   $0x0,0x1da9c(%eax)
f010a866:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a869:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86c:	c7 80 90 da 01 00 00 	movl   $0x0,0x1da90(%eax)
f010a873:	00 00 00 
	e->nPageOut = 0;
f010a876:	8b 45 08             	mov    0x8(%ebp),%eax
f010a879:	c7 80 94 da 01 00 00 	movl   $0x0,0x1da94(%eax)
f010a880:	00 00 00 
	e->nNewPageAdded = 0;
f010a883:	8b 45 08             	mov    0x8(%ebp),%eax
f010a886:	c7 80 98 da 01 00 00 	movl   $0x0,0x1da98(%eax)
f010a88d:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010a890:	83 ec 04             	sub    $0x4,%esp
f010a893:	68 00 00 00 82       	push   $0x82000000
f010a898:	68 00 00 00 80       	push   $0x80000000
f010a89d:	ff 75 08             	pushl  0x8(%ebp)
f010a8a0:	e8 12 fc ff ff       	call   f010a4b7 <initialize_uheap_dynamic_allocator>
f010a8a5:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a8a8:	83 ec 0c             	sub    $0xc,%esp
f010a8ab:	ff 75 08             	pushl  0x8(%ebp)
f010a8ae:	e8 09 00 00 00       	call   f010a8bc <complete_environment_initialization>
f010a8b3:	83 c4 10             	add    $0x10,%esp
}
f010a8b6:	90                   	nop
f010a8b7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8ba:	c9                   	leave  
f010a8bb:	c3                   	ret    

f010a8bc <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a8bc:	55                   	push   %ebp
f010a8bd:	89 e5                	mov    %esp,%ebp
f010a8bf:	53                   	push   %ebx
f010a8c0:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a8c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a8cc:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a8d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8d5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a8db:	83 c8 03             	or     $0x3,%eax
f010a8de:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a8e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e3:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a8e9:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a8ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f2:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a8f8:	83 c8 05             	or     $0x5,%eax
f010a8fb:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a8fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a900:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010a907:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010a90a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90d:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010a914:	00 00 00 
	e->disk_env_tabledir = 0;
f010a917:	8b 45 08             	mov    0x8(%ebp),%eax
f010a91a:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010a921:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010a924:	8b 45 08             	mov    0x8(%ebp),%eax
f010a927:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010a92e:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a931:	8b 45 08             	mov    0x8(%ebp),%eax
f010a934:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a937:	83 ec 0c             	sub    $0xc,%esp
f010a93a:	6a 08                	push   $0x8
f010a93c:	e8 2f 32 02 00       	call   f012db70 <log2_ceil>
f010a941:	83 c4 10             	add    $0x10,%esp
f010a944:	ba 01 00 00 00       	mov    $0x1,%edx
f010a949:	88 c1                	mov    %al,%cl
f010a94b:	d3 e2                	shl    %cl,%edx
f010a94d:	89 d0                	mov    %edx,%eax
f010a94f:	01 d8                	add    %ebx,%eax
f010a951:	89 c3                	mov    %eax,%ebx
f010a953:	83 ec 0c             	sub    $0xc,%esp
f010a956:	6a 08                	push   $0x8
f010a958:	e8 de 31 02 00       	call   f012db3b <nearest_pow2_ceil>
f010a95d:	83 c4 10             	add    $0x10,%esp
f010a960:	f7 d8                	neg    %eax
f010a962:	21 d8                	and    %ebx,%eax
f010a964:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a967:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a96b:	7f 1b                	jg     f010a988 <complete_environment_initialization+0xcc>
		generation = 1 << ENVGENSHIFT;
f010a96d:	83 ec 0c             	sub    $0xc,%esp
f010a970:	6a 08                	push   $0x8
f010a972:	e8 f9 31 02 00       	call   f012db70 <log2_ceil>
f010a977:	83 c4 10             	add    $0x10,%esp
f010a97a:	ba 01 00 00 00       	mov    $0x1,%edx
f010a97f:	88 c1                	mov    %al,%cl
f010a981:	d3 e2                	shl    %cl,%edx
f010a983:	89 d0                	mov    %edx,%eax
f010a985:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a988:	8b 45 08             	mov    0x8(%ebp),%eax
f010a98b:	8b 15 30 22 25 f0    	mov    0xf0252230,%edx
f010a991:	29 d0                	sub    %edx,%eax
f010a993:	c1 f8 05             	sar    $0x5,%eax
f010a996:	89 c2                	mov    %eax,%edx
f010a998:	89 d0                	mov    %edx,%eax
f010a99a:	c1 e0 03             	shl    $0x3,%eax
f010a99d:	01 d0                	add    %edx,%eax
f010a99f:	01 c0                	add    %eax,%eax
f010a9a1:	01 d0                	add    %edx,%eax
f010a9a3:	c1 e0 06             	shl    $0x6,%eax
f010a9a6:	01 d0                	add    %edx,%eax
f010a9a8:	89 c1                	mov    %eax,%ecx
f010a9aa:	c1 e1 04             	shl    $0x4,%ecx
f010a9ad:	01 c8                	add    %ecx,%eax
f010a9af:	c1 e0 03             	shl    $0x3,%eax
f010a9b2:	01 d0                	add    %edx,%eax
f010a9b4:	01 c0                	add    %eax,%eax
f010a9b6:	01 d0                	add    %edx,%eax
f010a9b8:	89 c1                	mov    %eax,%ecx
f010a9ba:	c1 e1 04             	shl    $0x4,%ecx
f010a9bd:	01 c8                	add    %ecx,%eax
f010a9bf:	c1 e0 03             	shl    $0x3,%eax
f010a9c2:	01 d0                	add    %edx,%eax
f010a9c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a9cb:	01 d0                	add    %edx,%eax
f010a9cd:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a9d0:	89 c2                	mov    %eax,%edx
f010a9d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d5:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a9d8:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010a9dd:	85 c0                	test   %eax,%eax
f010a9df:	75 0c                	jne    f010a9ed <complete_environment_initialization+0x131>
		e->env_parent_id = 0;//no parent;
f010a9e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e4:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a9eb:	eb 0e                	jmp    f010a9fb <complete_environment_initialization+0x13f>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a9ed:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010a9f2:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a9f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f8:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a9fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9fe:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aa05:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa08:	c7 80 8c da 01 00 00 	movl   $0x0,0x1da8c(%eax)
f010aa0f:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aa12:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa15:	83 ec 04             	sub    $0x4,%esp
f010aa18:	6a 44                	push   $0x44
f010aa1a:	6a 00                	push   $0x0
f010aa1c:	50                   	push   %eax
f010aa1d:	e8 7c 45 02 00       	call   f012ef9e <memset>
f010aa22:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aa25:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa28:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aa2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa31:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aa37:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3a:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aa40:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa43:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010aa4a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa4d:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aa53:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa56:	8b 40 38             	mov    0x38(%eax),%eax
f010aa59:	80 cc 02             	or     $0x2,%ah
f010aa5c:	89 c2                	mov    %eax,%edx
f010aa5e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa61:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010aa64:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa68:	75 17                	jne    f010aa81 <complete_environment_initialization+0x1c5>
f010aa6a:	83 ec 04             	sub    $0x4,%esp
f010aa6d:	68 d1 28 13 f0       	push   $0xf01328d1
f010aa72:	68 b1 03 00 00       	push   $0x3b1
f010aa77:	68 6f 28 13 f0       	push   $0xf013286f
f010aa7c:	e8 2f 57 ff ff       	call   f01001b0 <_panic>
f010aa81:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa84:	8b 40 44             	mov    0x44(%eax),%eax
f010aa87:	85 c0                	test   %eax,%eax
f010aa89:	74 11                	je     f010aa9c <complete_environment_initialization+0x1e0>
f010aa8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa8e:	8b 40 44             	mov    0x44(%eax),%eax
f010aa91:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa94:	8b 52 48             	mov    0x48(%edx),%edx
f010aa97:	89 50 48             	mov    %edx,0x48(%eax)
f010aa9a:	eb 0b                	jmp    f010aaa7 <complete_environment_initialization+0x1eb>
f010aa9c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9f:	8b 40 48             	mov    0x48(%eax),%eax
f010aaa2:	a3 3c 22 25 f0       	mov    %eax,0xf025223c
f010aaa7:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaaa:	8b 40 48             	mov    0x48(%eax),%eax
f010aaad:	85 c0                	test   %eax,%eax
f010aaaf:	74 11                	je     f010aac2 <complete_environment_initialization+0x206>
f010aab1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab4:	8b 40 48             	mov    0x48(%eax),%eax
f010aab7:	8b 55 08             	mov    0x8(%ebp),%edx
f010aaba:	8b 52 44             	mov    0x44(%edx),%edx
f010aabd:	89 50 44             	mov    %edx,0x44(%eax)
f010aac0:	eb 0b                	jmp    f010aacd <complete_environment_initialization+0x211>
f010aac2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac5:	8b 40 44             	mov    0x44(%eax),%eax
f010aac8:	a3 38 22 25 f0       	mov    %eax,0xf0252238
f010aacd:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010aad7:	8b 45 08             	mov    0x8(%ebp),%eax
f010aada:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010aae1:	a1 44 22 25 f0       	mov    0xf0252244,%eax
f010aae6:	48                   	dec    %eax
f010aae7:	a3 44 22 25 f0       	mov    %eax,0xf0252244
	return ;
f010aaec:	90                   	nop
}
f010aaed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aaf0:	c9                   	leave  
f010aaf1:	c3                   	ret    

f010aaf2 <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010aaf2:	55                   	push   %ebp
f010aaf3:	89 e5                	mov    %esp,%ebp
f010aaf5:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010aaf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aafb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010aafe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab01:	8b 00                	mov    (%eax),%eax
f010ab03:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab08:	74 17                	je     f010ab21 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ab0a:	83 ec 04             	sub    $0x4,%esp
f010ab0d:	68 f8 29 13 f0       	push   $0xf01329f8
f010ab12:	68 bd 03 00 00       	push   $0x3bd
f010ab17:	68 6f 28 13 f0       	push   $0xf013286f
f010ab1c:	e8 8f 56 ff ff       	call   f01001b0 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ab21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab24:	8b 40 18             	mov    0x18(%eax),%eax
f010ab27:	89 c2                	mov    %eax,%edx
f010ab29:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab2c:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ab2f:	90                   	nop
f010ab30:	c9                   	leave  
f010ab31:	c3                   	ret    

f010ab32 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010ab32:	55                   	push   %ebp
f010ab33:	89 e5                	mov    %esp,%ebp
f010ab35:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010ab38:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab3b:	8b 40 10             	mov    0x10(%eax),%eax
f010ab3e:	8d 48 01             	lea    0x1(%eax),%ecx
f010ab41:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab44:	89 4a 10             	mov    %ecx,0x10(%edx)
f010ab47:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab50:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab53:	8b 00                	mov    (%eax),%eax
f010ab55:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab5a:	74 17                	je     f010ab73 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010ab5c:	83 ec 04             	sub    $0x4,%esp
f010ab5f:	68 f8 29 13 f0       	push   $0xf01329f8
f010ab64:	68 cc 03 00 00       	push   $0x3cc
f010ab69:	68 6f 28 13 f0       	push   $0xf013286f
f010ab6e:	e8 3d 56 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010ab73:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab76:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ab79:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab7c:	01 d0                	add    %edx,%eax
f010ab7e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010ab81:	eb 0f                	jmp    f010ab92 <PROGRAM_SEGMENT_NEXT+0x60>
f010ab83:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab86:	8b 40 10             	mov    0x10(%eax),%eax
f010ab89:	8d 50 01             	lea    0x1(%eax),%edx
f010ab8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab8f:	89 50 10             	mov    %edx,0x10(%eax)
f010ab92:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab95:	8b 40 10             	mov    0x10(%eax),%eax
f010ab98:	c1 e0 05             	shl    $0x5,%eax
f010ab9b:	89 c2                	mov    %eax,%edx
f010ab9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aba0:	01 d0                	add    %edx,%eax
f010aba2:	8b 00                	mov    (%eax),%eax
f010aba4:	83 f8 01             	cmp    $0x1,%eax
f010aba7:	74 13                	je     f010abbc <PROGRAM_SEGMENT_NEXT+0x8a>
f010aba9:	8b 45 08             	mov    0x8(%ebp),%eax
f010abac:	8b 50 10             	mov    0x10(%eax),%edx
f010abaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abb2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010abb5:	0f b7 c0             	movzwl %ax,%eax
f010abb8:	39 c2                	cmp    %eax,%edx
f010abba:	72 c7                	jb     f010ab83 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010abbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010abbf:	8b 40 10             	mov    0x10(%eax),%eax
f010abc2:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010abc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abc8:	8b 40 2c             	mov    0x2c(%eax),%eax
f010abcb:	0f b7 c0             	movzwl %ax,%eax
f010abce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010abd1:	7e 63                	jle    f010ac36 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010abd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abd6:	c1 e0 05             	shl    $0x5,%eax
f010abd9:	89 c2                	mov    %eax,%edx
f010abdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abde:	01 d0                	add    %edx,%eax
f010abe0:	8b 50 04             	mov    0x4(%eax),%edx
f010abe3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abe6:	01 c2                	add    %eax,%edx
f010abe8:	8b 45 08             	mov    0x8(%ebp),%eax
f010abeb:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010abed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abf0:	c1 e0 05             	shl    $0x5,%eax
f010abf3:	89 c2                	mov    %eax,%edx
f010abf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abf8:	01 d0                	add    %edx,%eax
f010abfa:	8b 50 14             	mov    0x14(%eax),%edx
f010abfd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac00:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ac03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac06:	c1 e0 05             	shl    $0x5,%eax
f010ac09:	89 c2                	mov    %eax,%edx
f010ac0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac0e:	01 d0                	add    %edx,%eax
f010ac10:	8b 50 10             	mov    0x10(%eax),%edx
f010ac13:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac16:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ac19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac1c:	c1 e0 05             	shl    $0x5,%eax
f010ac1f:	89 c2                	mov    %eax,%edx
f010ac21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac24:	01 d0                	add    %edx,%eax
f010ac26:	8b 40 08             	mov    0x8(%eax),%eax
f010ac29:	89 c2                	mov    %eax,%edx
f010ac2b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac2e:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010ac31:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac34:	eb 05                	jmp    f010ac3b <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010ac36:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac3b:	c9                   	leave  
f010ac3c:	c3                   	ret    

f010ac3d <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ac3d:	55                   	push   %ebp
f010ac3e:	89 e5                	mov    %esp,%ebp
f010ac40:	57                   	push   %edi
f010ac41:	56                   	push   %esi
f010ac42:	53                   	push   %ebx
f010ac43:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010ac46:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ac4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ac53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ac56:	8b 00                	mov    (%eax),%eax
f010ac58:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ac5d:	74 17                	je     f010ac76 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ac5f:	83 ec 04             	sub    $0x4,%esp
f010ac62:	68 f8 29 13 f0       	push   $0xf01329f8
f010ac67:	68 e8 03 00 00       	push   $0x3e8
f010ac6c:	68 6f 28 13 f0       	push   $0xf013286f
f010ac71:	e8 3a 55 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010ac76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ac79:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ac7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac7f:	01 d0                	add    %edx,%eax
f010ac81:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010ac84:	eb 07                	jmp    f010ac8d <PROGRAM_SEGMENT_FIRST+0x50>
f010ac86:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ac89:	40                   	inc    %eax
f010ac8a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010ac8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ac90:	c1 e0 05             	shl    $0x5,%eax
f010ac93:	89 c2                	mov    %eax,%edx
f010ac95:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac98:	01 d0                	add    %edx,%eax
f010ac9a:	8b 00                	mov    (%eax),%eax
f010ac9c:	83 f8 01             	cmp    $0x1,%eax
f010ac9f:	74 10                	je     f010acb1 <PROGRAM_SEGMENT_FIRST+0x74>
f010aca1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010aca4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aca7:	8b 40 2c             	mov    0x2c(%eax),%eax
f010acaa:	0f b7 c0             	movzwl %ax,%eax
f010acad:	39 c2                	cmp    %eax,%edx
f010acaf:	72 d5                	jb     f010ac86 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010acb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acb4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010acb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acba:	8b 40 2c             	mov    0x2c(%eax),%eax
f010acbd:	0f b7 c0             	movzwl %ax,%eax
f010acc0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010acc3:	7e 68                	jle    f010ad2d <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010acc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010acc8:	c1 e0 05             	shl    $0x5,%eax
f010accb:	89 c2                	mov    %eax,%edx
f010accd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010acd0:	01 d0                	add    %edx,%eax
f010acd2:	8b 50 04             	mov    0x4(%eax),%edx
f010acd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acd8:	01 d0                	add    %edx,%eax
f010acda:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010acdd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ace0:	c1 e0 05             	shl    $0x5,%eax
f010ace3:	89 c2                	mov    %eax,%edx
f010ace5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ace8:	01 d0                	add    %edx,%eax
f010acea:	8b 40 14             	mov    0x14(%eax),%eax
f010aced:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010acf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010acf3:	c1 e0 05             	shl    $0x5,%eax
f010acf6:	89 c2                	mov    %eax,%edx
f010acf8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010acfb:	01 d0                	add    %edx,%eax
f010acfd:	8b 40 10             	mov    0x10(%eax),%eax
f010ad00:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ad03:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad06:	c1 e0 05             	shl    $0x5,%eax
f010ad09:	89 c2                	mov    %eax,%edx
f010ad0b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad0e:	01 d0                	add    %edx,%eax
f010ad10:	8b 40 08             	mov    0x8(%eax),%eax
f010ad13:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ad16:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad19:	89 c3                	mov    %eax,%ebx
f010ad1b:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad1e:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad23:	89 df                	mov    %ebx,%edi
f010ad25:	89 c6                	mov    %eax,%esi
f010ad27:	89 d1                	mov    %edx,%ecx
f010ad29:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010ad2b:	eb 1c                	jmp    f010ad49 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010ad2d:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010ad34:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad37:	89 c3                	mov    %eax,%ebx
f010ad39:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad3c:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad41:	89 df                	mov    %ebx,%edi
f010ad43:	89 c6                	mov    %eax,%esi
f010ad45:	89 d1                	mov    %edx,%ecx
f010ad47:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ad49:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ad4f:	5b                   	pop    %ebx
f010ad50:	5e                   	pop    %esi
f010ad51:	5f                   	pop    %edi
f010ad52:	5d                   	pop    %ebp
f010ad53:	c2 04 00             	ret    $0x4

f010ad56 <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010ad56:	55                   	push   %ebp
f010ad57:	89 e5                	mov    %esp,%ebp
f010ad59:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010ad5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ad63:	a1 00 2b 25 f0       	mov    0xf0252b00,%eax
f010ad68:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ad6b:	e9 c6 00 00 00       	jmp    f010ae36 <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010ad70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad73:	8b 40 10             	mov    0x10(%eax),%eax
f010ad76:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ad79:	0f 85 af 00 00 00    	jne    f010ae2e <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010ad7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad82:	8b 50 0c             	mov    0xc(%eax),%edx
f010ad85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad88:	8b 40 10             	mov    0x10(%eax),%eax
f010ad8b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ad91:	83 ec 08             	sub    $0x8,%esp
f010ad94:	52                   	push   %edx
f010ad95:	50                   	push   %eax
f010ad96:	e8 33 d3 ff ff       	call   f01080ce <pt_clear_page_table_entry>
f010ad9b:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010ad9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ada2:	75 17                	jne    f010adbb <cleanup_buffers+0x65>
f010ada4:	83 ec 04             	sub    $0x4,%esp
f010ada7:	68 d1 28 13 f0       	push   $0xf01328d1
f010adac:	68 0f 04 00 00       	push   $0x40f
f010adb1:	68 6f 28 13 f0       	push   $0xf013286f
f010adb6:	e8 f5 53 ff ff       	call   f01001b0 <_panic>
f010adbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adbe:	8b 00                	mov    (%eax),%eax
f010adc0:	85 c0                	test   %eax,%eax
f010adc2:	74 10                	je     f010add4 <cleanup_buffers+0x7e>
f010adc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adc7:	8b 00                	mov    (%eax),%eax
f010adc9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010adcc:	8b 52 04             	mov    0x4(%edx),%edx
f010adcf:	89 50 04             	mov    %edx,0x4(%eax)
f010add2:	eb 0b                	jmp    f010addf <cleanup_buffers+0x89>
f010add4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010add7:	8b 40 04             	mov    0x4(%eax),%eax
f010adda:	a3 04 2b 25 f0       	mov    %eax,0xf0252b04
f010addf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ade2:	8b 40 04             	mov    0x4(%eax),%eax
f010ade5:	85 c0                	test   %eax,%eax
f010ade7:	74 0f                	je     f010adf8 <cleanup_buffers+0xa2>
f010ade9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adec:	8b 40 04             	mov    0x4(%eax),%eax
f010adef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010adf2:	8b 12                	mov    (%edx),%edx
f010adf4:	89 10                	mov    %edx,(%eax)
f010adf6:	eb 0a                	jmp    f010ae02 <cleanup_buffers+0xac>
f010adf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adfb:	8b 00                	mov    (%eax),%eax
f010adfd:	a3 00 2b 25 f0       	mov    %eax,0xf0252b00
f010ae02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ae0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae0e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ae15:	a1 0c 2b 25 f0       	mov    0xf0252b0c,%eax
f010ae1a:	48                   	dec    %eax
f010ae1b:	a3 0c 2b 25 f0       	mov    %eax,0xf0252b0c

			free_frame(ptr_fi);
f010ae20:	83 ec 0c             	sub    $0xc,%esp
f010ae23:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae26:	e8 b4 c5 ff ff       	call   f01073df <free_frame>
f010ae2b:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ae2e:	a1 08 2b 25 f0       	mov    0xf0252b08,%eax
f010ae33:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae3a:	74 07                	je     f010ae43 <cleanup_buffers+0xed>
f010ae3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae3f:	8b 00                	mov    (%eax),%eax
f010ae41:	eb 05                	jmp    f010ae48 <cleanup_buffers+0xf2>
f010ae43:	b8 00 00 00 00       	mov    $0x0,%eax
f010ae48:	a3 08 2b 25 f0       	mov    %eax,0xf0252b08
f010ae4d:	a1 08 2b 25 f0       	mov    0xf0252b08,%eax
f010ae52:	85 c0                	test   %eax,%eax
f010ae54:	0f 85 16 ff ff ff    	jne    f010ad70 <cleanup_buffers+0x1a>
f010ae5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae5e:	0f 85 0c ff ff ff    	jne    f010ad70 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010ae64:	90                   	nop
f010ae65:	c9                   	leave  
f010ae66:	c3                   	ret    

f010ae67 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010ae67:	55                   	push   %ebp
f010ae68:	89 e5                	mov    %esp,%ebp
f010ae6a:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010ae6d:	83 ec 04             	sub    $0x4,%esp
f010ae70:	68 0e 2a 13 f0       	push   $0xf0132a0e
f010ae75:	6a 0b                	push   $0xb
f010ae77:	68 1e 2a 13 f0       	push   $0xf0132a1e
f010ae7c:	e8 2f 53 ff ff       	call   f01001b0 <_panic>

f010ae81 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010ae81:	55                   	push   %ebp
f010ae82:	89 e5                	mov    %esp,%ebp
f010ae84:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ae87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ae8e:	eb 29                	jmp    f010aeb9 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010ae90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae93:	89 d0                	mov    %edx,%eax
f010ae95:	01 c0                	add    %eax,%eax
f010ae97:	01 d0                	add    %edx,%eax
f010ae99:	c1 e0 02             	shl    $0x2,%eax
f010ae9c:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
f010aea1:	8b 00                	mov    (%eax),%eax
f010aea3:	83 ec 08             	sub    $0x8,%esp
f010aea6:	50                   	push   %eax
f010aea7:	ff 75 08             	pushl  0x8(%ebp)
f010aeaa:	e8 0d 40 02 00       	call   f012eebc <strcmp>
f010aeaf:	83 c4 10             	add    $0x10,%esp
f010aeb2:	85 c0                	test   %eax,%eax
f010aeb4:	74 0f                	je     f010aec5 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aeb6:	ff 45 f4             	incl   -0xc(%ebp)
f010aeb9:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010aebe:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010aec1:	7c cd                	jl     f010ae90 <get_user_program_info+0xf>
f010aec3:	eb 01                	jmp    f010aec6 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010aec5:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010aec6:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010aecb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010aece:	75 1a                	jne    f010aeea <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010aed0:	83 ec 08             	sub    $0x8,%esp
f010aed3:	ff 75 08             	pushl  0x8(%ebp)
f010aed6:	68 aa 2b 13 f0       	push   $0xf0132baa
f010aedb:	e8 51 5f ff ff       	call   f0100e31 <cprintf>
f010aee0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010aee3:	b8 00 00 00 00       	mov    $0x0,%eax
f010aee8:	eb 11                	jmp    f010aefb <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010aeea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aeed:	89 d0                	mov    %edx,%eax
f010aeef:	01 c0                	add    %eax,%eax
f010aef1:	01 d0                	add    %edx,%eax
f010aef3:	c1 e0 02             	shl    $0x2,%eax
f010aef6:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
}
f010aefb:	c9                   	leave  
f010aefc:	c3                   	ret    

f010aefd <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010aefd:	55                   	push   %ebp
f010aefe:	89 e5                	mov    %esp,%ebp
f010af00:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010af0a:	eb 2d                	jmp    f010af39 <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010af0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af0f:	89 d0                	mov    %edx,%eax
f010af11:	01 c0                	add    %eax,%eax
f010af13:	01 d0                	add    %edx,%eax
f010af15:	c1 e0 02             	shl    $0x2,%eax
f010af18:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
f010af1d:	8b 00                	mov    (%eax),%eax
f010af1f:	8b 55 08             	mov    0x8(%ebp),%edx
f010af22:	83 c2 5c             	add    $0x5c,%edx
f010af25:	83 ec 08             	sub    $0x8,%esp
f010af28:	50                   	push   %eax
f010af29:	52                   	push   %edx
f010af2a:	e8 8d 3f 02 00       	call   f012eebc <strcmp>
f010af2f:	83 c4 10             	add    $0x10,%esp
f010af32:	85 c0                	test   %eax,%eax
f010af34:	74 0f                	je     f010af45 <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af36:	ff 45 f4             	incl   -0xc(%ebp)
f010af39:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010af3e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af41:	7c c9                	jl     f010af0c <get_user_program_info_by_env+0xf>
f010af43:	eb 01                	jmp    f010af46 <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010af45:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af46:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010af4b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af4e:	75 17                	jne    f010af67 <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010af50:	83 ec 0c             	sub    $0xc,%esp
f010af53:	68 c5 2b 13 f0       	push   $0xf0132bc5
f010af58:	e8 d4 5e ff ff       	call   f0100e31 <cprintf>
f010af5d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af60:	b8 00 00 00 00       	mov    $0x0,%eax
f010af65:	eb 11                	jmp    f010af78 <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010af67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af6a:	89 d0                	mov    %edx,%eax
f010af6c:	01 c0                	add    %eax,%eax
f010af6e:	01 d0                	add    %edx,%eax
f010af70:	c1 e0 02             	shl    $0x2,%eax
f010af73:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
}
f010af78:	c9                   	leave  
f010af79:	c3                   	ret    

f010af7a <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010af7a:	55                   	push   %ebp
f010af7b:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010af7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010af80:	83 f8 13             	cmp    $0x13,%eax
f010af83:	77 0c                	ja     f010af91 <trapname+0x17>
		return excnames[trapno];
f010af85:	8b 45 08             	mov    0x8(%ebp),%eax
f010af88:	8b 04 85 00 30 13 f0 	mov    -0xfecd000(,%eax,4),%eax
f010af8f:	eb 12                	jmp    f010afa3 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010af91:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010af95:	75 07                	jne    f010af9e <trapname+0x24>
		return "System call";
f010af97:	b8 e0 2b 13 f0       	mov    $0xf0132be0,%eax
f010af9c:	eb 05                	jmp    f010afa3 <trapname+0x29>
	return "(unknown trap)";
f010af9e:	b8 ec 2b 13 f0       	mov    $0xf0132bec,%eax
}
f010afa3:	5d                   	pop    %ebp
f010afa4:	c3                   	ret    

f010afa5 <idt_init>:


void
idt_init(void)
{
f010afa5:	55                   	push   %ebp
f010afa6:	89 e5                	mov    %esp,%ebp
f010afa8:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010afab:	b8 40 c6 10 f0       	mov    $0xf010c640,%eax
f010afb0:	66 a3 d0 22 25 f0    	mov    %ax,0xf02522d0
f010afb6:	66 c7 05 d2 22 25 f0 	movw   $0x8,0xf02522d2
f010afbd:	08 00 
f010afbf:	a0 d4 22 25 f0       	mov    0xf02522d4,%al
f010afc4:	83 e0 e0             	and    $0xffffffe0,%eax
f010afc7:	a2 d4 22 25 f0       	mov    %al,0xf02522d4
f010afcc:	a0 d4 22 25 f0       	mov    0xf02522d4,%al
f010afd1:	83 e0 1f             	and    $0x1f,%eax
f010afd4:	a2 d4 22 25 f0       	mov    %al,0xf02522d4
f010afd9:	a0 d5 22 25 f0       	mov    0xf02522d5,%al
f010afde:	83 e0 f0             	and    $0xfffffff0,%eax
f010afe1:	83 c8 0e             	or     $0xe,%eax
f010afe4:	a2 d5 22 25 f0       	mov    %al,0xf02522d5
f010afe9:	a0 d5 22 25 f0       	mov    0xf02522d5,%al
f010afee:	83 e0 ef             	and    $0xffffffef,%eax
f010aff1:	a2 d5 22 25 f0       	mov    %al,0xf02522d5
f010aff6:	a0 d5 22 25 f0       	mov    0xf02522d5,%al
f010affb:	83 e0 9f             	and    $0xffffff9f,%eax
f010affe:	a2 d5 22 25 f0       	mov    %al,0xf02522d5
f010b003:	a0 d5 22 25 f0       	mov    0xf02522d5,%al
f010b008:	83 c8 80             	or     $0xffffff80,%eax
f010b00b:	a2 d5 22 25 f0       	mov    %al,0xf02522d5
f010b010:	b8 40 c6 10 f0       	mov    $0xf010c640,%eax
f010b015:	c1 e8 10             	shr    $0x10,%eax
f010b018:	66 a3 d6 22 25 f0    	mov    %ax,0xf02522d6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b01e:	b8 48 c6 10 f0       	mov    $0xf010c648,%eax
f010b023:	66 a3 e0 23 25 f0    	mov    %ax,0xf02523e0
f010b029:	66 c7 05 e2 23 25 f0 	movw   $0x8,0xf02523e2
f010b030:	08 00 
f010b032:	a0 e4 23 25 f0       	mov    0xf02523e4,%al
f010b037:	83 e0 e0             	and    $0xffffffe0,%eax
f010b03a:	a2 e4 23 25 f0       	mov    %al,0xf02523e4
f010b03f:	a0 e4 23 25 f0       	mov    0xf02523e4,%al
f010b044:	83 e0 1f             	and    $0x1f,%eax
f010b047:	a2 e4 23 25 f0       	mov    %al,0xf02523e4
f010b04c:	a0 e5 23 25 f0       	mov    0xf02523e5,%al
f010b051:	83 e0 f0             	and    $0xfffffff0,%eax
f010b054:	83 c8 0e             	or     $0xe,%eax
f010b057:	a2 e5 23 25 f0       	mov    %al,0xf02523e5
f010b05c:	a0 e5 23 25 f0       	mov    0xf02523e5,%al
f010b061:	83 e0 ef             	and    $0xffffffef,%eax
f010b064:	a2 e5 23 25 f0       	mov    %al,0xf02523e5
f010b069:	a0 e5 23 25 f0       	mov    0xf02523e5,%al
f010b06e:	83 c8 60             	or     $0x60,%eax
f010b071:	a2 e5 23 25 f0       	mov    %al,0xf02523e5
f010b076:	a0 e5 23 25 f0       	mov    0xf02523e5,%al
f010b07b:	83 c8 80             	or     $0xffffff80,%eax
f010b07e:	a2 e5 23 25 f0       	mov    %al,0xf02523e5
f010b083:	b8 48 c6 10 f0       	mov    $0xf010c648,%eax
f010b088:	c1 e8 10             	shr    $0x10,%eax
f010b08b:	66 a3 e6 23 25 f0    	mov    %ax,0xf02523e6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b091:	b8 52 c6 10 f0       	mov    $0xf010c652,%eax
f010b096:	66 a3 a0 22 25 f0    	mov    %ax,0xf02522a0
f010b09c:	66 c7 05 a2 22 25 f0 	movw   $0x8,0xf02522a2
f010b0a3:	08 00 
f010b0a5:	a0 a4 22 25 f0       	mov    0xf02522a4,%al
f010b0aa:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0ad:	a2 a4 22 25 f0       	mov    %al,0xf02522a4
f010b0b2:	a0 a4 22 25 f0       	mov    0xf02522a4,%al
f010b0b7:	83 e0 1f             	and    $0x1f,%eax
f010b0ba:	a2 a4 22 25 f0       	mov    %al,0xf02522a4
f010b0bf:	a0 a5 22 25 f0       	mov    0xf02522a5,%al
f010b0c4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0c7:	83 c8 0e             	or     $0xe,%eax
f010b0ca:	a2 a5 22 25 f0       	mov    %al,0xf02522a5
f010b0cf:	a0 a5 22 25 f0       	mov    0xf02522a5,%al
f010b0d4:	83 e0 ef             	and    $0xffffffef,%eax
f010b0d7:	a2 a5 22 25 f0       	mov    %al,0xf02522a5
f010b0dc:	a0 a5 22 25 f0       	mov    0xf02522a5,%al
f010b0e1:	83 e0 9f             	and    $0xffffff9f,%eax
f010b0e4:	a2 a5 22 25 f0       	mov    %al,0xf02522a5
f010b0e9:	a0 a5 22 25 f0       	mov    0xf02522a5,%al
f010b0ee:	83 c8 80             	or     $0xffffff80,%eax
f010b0f1:	a2 a5 22 25 f0       	mov    %al,0xf02522a5
f010b0f6:	b8 52 c6 10 f0       	mov    $0xf010c652,%eax
f010b0fb:	c1 e8 10             	shr    $0x10,%eax
f010b0fe:	66 a3 a6 22 25 f0    	mov    %ax,0xf02522a6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b104:	b8 5a c6 10 f0       	mov    $0xf010c65a,%eax
f010b109:	66 a3 60 22 25 f0    	mov    %ax,0xf0252260
f010b10f:	66 c7 05 62 22 25 f0 	movw   $0x8,0xf0252262
f010b116:	08 00 
f010b118:	a0 64 22 25 f0       	mov    0xf0252264,%al
f010b11d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b120:	a2 64 22 25 f0       	mov    %al,0xf0252264
f010b125:	a0 64 22 25 f0       	mov    0xf0252264,%al
f010b12a:	83 e0 1f             	and    $0x1f,%eax
f010b12d:	a2 64 22 25 f0       	mov    %al,0xf0252264
f010b132:	a0 65 22 25 f0       	mov    0xf0252265,%al
f010b137:	83 e0 f0             	and    $0xfffffff0,%eax
f010b13a:	83 c8 0e             	or     $0xe,%eax
f010b13d:	a2 65 22 25 f0       	mov    %al,0xf0252265
f010b142:	a0 65 22 25 f0       	mov    0xf0252265,%al
f010b147:	83 e0 ef             	and    $0xffffffef,%eax
f010b14a:	a2 65 22 25 f0       	mov    %al,0xf0252265
f010b14f:	a0 65 22 25 f0       	mov    0xf0252265,%al
f010b154:	83 c8 60             	or     $0x60,%eax
f010b157:	a2 65 22 25 f0       	mov    %al,0xf0252265
f010b15c:	a0 65 22 25 f0       	mov    0xf0252265,%al
f010b161:	83 c8 80             	or     $0xffffff80,%eax
f010b164:	a2 65 22 25 f0       	mov    %al,0xf0252265
f010b169:	b8 5a c6 10 f0       	mov    $0xf010c65a,%eax
f010b16e:	c1 e8 10             	shr    $0x10,%eax
f010b171:	66 a3 66 22 25 f0    	mov    %ax,0xf0252266
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b177:	b8 64 c6 10 f0       	mov    $0xf010c664,%eax
f010b17c:	66 a3 68 22 25 f0    	mov    %ax,0xf0252268
f010b182:	66 c7 05 6a 22 25 f0 	movw   $0x8,0xf025226a
f010b189:	08 00 
f010b18b:	a0 6c 22 25 f0       	mov    0xf025226c,%al
f010b190:	83 e0 e0             	and    $0xffffffe0,%eax
f010b193:	a2 6c 22 25 f0       	mov    %al,0xf025226c
f010b198:	a0 6c 22 25 f0       	mov    0xf025226c,%al
f010b19d:	83 e0 1f             	and    $0x1f,%eax
f010b1a0:	a2 6c 22 25 f0       	mov    %al,0xf025226c
f010b1a5:	a0 6d 22 25 f0       	mov    0xf025226d,%al
f010b1aa:	83 c8 0f             	or     $0xf,%eax
f010b1ad:	a2 6d 22 25 f0       	mov    %al,0xf025226d
f010b1b2:	a0 6d 22 25 f0       	mov    0xf025226d,%al
f010b1b7:	83 e0 ef             	and    $0xffffffef,%eax
f010b1ba:	a2 6d 22 25 f0       	mov    %al,0xf025226d
f010b1bf:	a0 6d 22 25 f0       	mov    0xf025226d,%al
f010b1c4:	83 c8 60             	or     $0x60,%eax
f010b1c7:	a2 6d 22 25 f0       	mov    %al,0xf025226d
f010b1cc:	a0 6d 22 25 f0       	mov    0xf025226d,%al
f010b1d1:	83 c8 80             	or     $0xffffff80,%eax
f010b1d4:	a2 6d 22 25 f0       	mov    %al,0xf025226d
f010b1d9:	b8 64 c6 10 f0       	mov    $0xf010c664,%eax
f010b1de:	c1 e8 10             	shr    $0x10,%eax
f010b1e1:	66 a3 6e 22 25 f0    	mov    %ax,0xf025226e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b1e7:	b8 6e c6 10 f0       	mov    $0xf010c66e,%eax
f010b1ec:	66 a3 70 22 25 f0    	mov    %ax,0xf0252270
f010b1f2:	66 c7 05 72 22 25 f0 	movw   $0x8,0xf0252272
f010b1f9:	08 00 
f010b1fb:	a0 74 22 25 f0       	mov    0xf0252274,%al
f010b200:	83 e0 e0             	and    $0xffffffe0,%eax
f010b203:	a2 74 22 25 f0       	mov    %al,0xf0252274
f010b208:	a0 74 22 25 f0       	mov    0xf0252274,%al
f010b20d:	83 e0 1f             	and    $0x1f,%eax
f010b210:	a2 74 22 25 f0       	mov    %al,0xf0252274
f010b215:	a0 75 22 25 f0       	mov    0xf0252275,%al
f010b21a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b21d:	83 c8 0e             	or     $0xe,%eax
f010b220:	a2 75 22 25 f0       	mov    %al,0xf0252275
f010b225:	a0 75 22 25 f0       	mov    0xf0252275,%al
f010b22a:	83 e0 ef             	and    $0xffffffef,%eax
f010b22d:	a2 75 22 25 f0       	mov    %al,0xf0252275
f010b232:	a0 75 22 25 f0       	mov    0xf0252275,%al
f010b237:	83 c8 60             	or     $0x60,%eax
f010b23a:	a2 75 22 25 f0       	mov    %al,0xf0252275
f010b23f:	a0 75 22 25 f0       	mov    0xf0252275,%al
f010b244:	83 c8 80             	or     $0xffffff80,%eax
f010b247:	a2 75 22 25 f0       	mov    %al,0xf0252275
f010b24c:	b8 6e c6 10 f0       	mov    $0xf010c66e,%eax
f010b251:	c1 e8 10             	shr    $0x10,%eax
f010b254:	66 a3 76 22 25 f0    	mov    %ax,0xf0252276
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b25a:	b8 78 c6 10 f0       	mov    $0xf010c678,%eax
f010b25f:	66 a3 78 22 25 f0    	mov    %ax,0xf0252278
f010b265:	66 c7 05 7a 22 25 f0 	movw   $0x8,0xf025227a
f010b26c:	08 00 
f010b26e:	a0 7c 22 25 f0       	mov    0xf025227c,%al
f010b273:	83 e0 e0             	and    $0xffffffe0,%eax
f010b276:	a2 7c 22 25 f0       	mov    %al,0xf025227c
f010b27b:	a0 7c 22 25 f0       	mov    0xf025227c,%al
f010b280:	83 e0 1f             	and    $0x1f,%eax
f010b283:	a2 7c 22 25 f0       	mov    %al,0xf025227c
f010b288:	a0 7d 22 25 f0       	mov    0xf025227d,%al
f010b28d:	83 c8 0f             	or     $0xf,%eax
f010b290:	a2 7d 22 25 f0       	mov    %al,0xf025227d
f010b295:	a0 7d 22 25 f0       	mov    0xf025227d,%al
f010b29a:	83 e0 ef             	and    $0xffffffef,%eax
f010b29d:	a2 7d 22 25 f0       	mov    %al,0xf025227d
f010b2a2:	a0 7d 22 25 f0       	mov    0xf025227d,%al
f010b2a7:	83 c8 60             	or     $0x60,%eax
f010b2aa:	a2 7d 22 25 f0       	mov    %al,0xf025227d
f010b2af:	a0 7d 22 25 f0       	mov    0xf025227d,%al
f010b2b4:	83 c8 80             	or     $0xffffff80,%eax
f010b2b7:	a2 7d 22 25 f0       	mov    %al,0xf025227d
f010b2bc:	b8 78 c6 10 f0       	mov    $0xf010c678,%eax
f010b2c1:	c1 e8 10             	shr    $0x10,%eax
f010b2c4:	66 a3 7e 22 25 f0    	mov    %ax,0xf025227e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b2ca:	b8 82 c6 10 f0       	mov    $0xf010c682,%eax
f010b2cf:	66 a3 80 22 25 f0    	mov    %ax,0xf0252280
f010b2d5:	66 c7 05 82 22 25 f0 	movw   $0x8,0xf0252282
f010b2dc:	08 00 
f010b2de:	a0 84 22 25 f0       	mov    0xf0252284,%al
f010b2e3:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2e6:	a2 84 22 25 f0       	mov    %al,0xf0252284
f010b2eb:	a0 84 22 25 f0       	mov    0xf0252284,%al
f010b2f0:	83 e0 1f             	and    $0x1f,%eax
f010b2f3:	a2 84 22 25 f0       	mov    %al,0xf0252284
f010b2f8:	a0 85 22 25 f0       	mov    0xf0252285,%al
f010b2fd:	83 c8 0f             	or     $0xf,%eax
f010b300:	a2 85 22 25 f0       	mov    %al,0xf0252285
f010b305:	a0 85 22 25 f0       	mov    0xf0252285,%al
f010b30a:	83 e0 ef             	and    $0xffffffef,%eax
f010b30d:	a2 85 22 25 f0       	mov    %al,0xf0252285
f010b312:	a0 85 22 25 f0       	mov    0xf0252285,%al
f010b317:	83 c8 60             	or     $0x60,%eax
f010b31a:	a2 85 22 25 f0       	mov    %al,0xf0252285
f010b31f:	a0 85 22 25 f0       	mov    0xf0252285,%al
f010b324:	83 c8 80             	or     $0xffffff80,%eax
f010b327:	a2 85 22 25 f0       	mov    %al,0xf0252285
f010b32c:	b8 82 c6 10 f0       	mov    $0xf010c682,%eax
f010b331:	c1 e8 10             	shr    $0x10,%eax
f010b334:	66 a3 86 22 25 f0    	mov    %ax,0xf0252286
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b33a:	b8 8c c6 10 f0       	mov    $0xf010c68c,%eax
f010b33f:	66 a3 88 22 25 f0    	mov    %ax,0xf0252288
f010b345:	66 c7 05 8a 22 25 f0 	movw   $0x8,0xf025228a
f010b34c:	08 00 
f010b34e:	a0 8c 22 25 f0       	mov    0xf025228c,%al
f010b353:	83 e0 e0             	and    $0xffffffe0,%eax
f010b356:	a2 8c 22 25 f0       	mov    %al,0xf025228c
f010b35b:	a0 8c 22 25 f0       	mov    0xf025228c,%al
f010b360:	83 e0 1f             	and    $0x1f,%eax
f010b363:	a2 8c 22 25 f0       	mov    %al,0xf025228c
f010b368:	a0 8d 22 25 f0       	mov    0xf025228d,%al
f010b36d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b370:	83 c8 0e             	or     $0xe,%eax
f010b373:	a2 8d 22 25 f0       	mov    %al,0xf025228d
f010b378:	a0 8d 22 25 f0       	mov    0xf025228d,%al
f010b37d:	83 e0 ef             	and    $0xffffffef,%eax
f010b380:	a2 8d 22 25 f0       	mov    %al,0xf025228d
f010b385:	a0 8d 22 25 f0       	mov    0xf025228d,%al
f010b38a:	83 c8 60             	or     $0x60,%eax
f010b38d:	a2 8d 22 25 f0       	mov    %al,0xf025228d
f010b392:	a0 8d 22 25 f0       	mov    0xf025228d,%al
f010b397:	83 c8 80             	or     $0xffffff80,%eax
f010b39a:	a2 8d 22 25 f0       	mov    %al,0xf025228d
f010b39f:	b8 8c c6 10 f0       	mov    $0xf010c68c,%eax
f010b3a4:	c1 e8 10             	shr    $0x10,%eax
f010b3a7:	66 a3 8e 22 25 f0    	mov    %ax,0xf025228e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b3ad:	b8 96 c6 10 f0       	mov    $0xf010c696,%eax
f010b3b2:	66 a3 90 22 25 f0    	mov    %ax,0xf0252290
f010b3b8:	66 c7 05 92 22 25 f0 	movw   $0x8,0xf0252292
f010b3bf:	08 00 
f010b3c1:	a0 94 22 25 f0       	mov    0xf0252294,%al
f010b3c6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3c9:	a2 94 22 25 f0       	mov    %al,0xf0252294
f010b3ce:	a0 94 22 25 f0       	mov    0xf0252294,%al
f010b3d3:	83 e0 1f             	and    $0x1f,%eax
f010b3d6:	a2 94 22 25 f0       	mov    %al,0xf0252294
f010b3db:	a0 95 22 25 f0       	mov    0xf0252295,%al
f010b3e0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3e3:	83 c8 0e             	or     $0xe,%eax
f010b3e6:	a2 95 22 25 f0       	mov    %al,0xf0252295
f010b3eb:	a0 95 22 25 f0       	mov    0xf0252295,%al
f010b3f0:	83 e0 ef             	and    $0xffffffef,%eax
f010b3f3:	a2 95 22 25 f0       	mov    %al,0xf0252295
f010b3f8:	a0 95 22 25 f0       	mov    0xf0252295,%al
f010b3fd:	83 c8 60             	or     $0x60,%eax
f010b400:	a2 95 22 25 f0       	mov    %al,0xf0252295
f010b405:	a0 95 22 25 f0       	mov    0xf0252295,%al
f010b40a:	83 c8 80             	or     $0xffffff80,%eax
f010b40d:	a2 95 22 25 f0       	mov    %al,0xf0252295
f010b412:	b8 96 c6 10 f0       	mov    $0xf010c696,%eax
f010b417:	c1 e8 10             	shr    $0x10,%eax
f010b41a:	66 a3 96 22 25 f0    	mov    %ax,0xf0252296
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b420:	b8 a0 c6 10 f0       	mov    $0xf010c6a0,%eax
f010b425:	66 a3 98 22 25 f0    	mov    %ax,0xf0252298
f010b42b:	66 c7 05 9a 22 25 f0 	movw   $0x8,0xf025229a
f010b432:	08 00 
f010b434:	a0 9c 22 25 f0       	mov    0xf025229c,%al
f010b439:	83 e0 e0             	and    $0xffffffe0,%eax
f010b43c:	a2 9c 22 25 f0       	mov    %al,0xf025229c
f010b441:	a0 9c 22 25 f0       	mov    0xf025229c,%al
f010b446:	83 e0 1f             	and    $0x1f,%eax
f010b449:	a2 9c 22 25 f0       	mov    %al,0xf025229c
f010b44e:	a0 9d 22 25 f0       	mov    0xf025229d,%al
f010b453:	83 e0 f0             	and    $0xfffffff0,%eax
f010b456:	83 c8 0e             	or     $0xe,%eax
f010b459:	a2 9d 22 25 f0       	mov    %al,0xf025229d
f010b45e:	a0 9d 22 25 f0       	mov    0xf025229d,%al
f010b463:	83 e0 ef             	and    $0xffffffef,%eax
f010b466:	a2 9d 22 25 f0       	mov    %al,0xf025229d
f010b46b:	a0 9d 22 25 f0       	mov    0xf025229d,%al
f010b470:	83 c8 60             	or     $0x60,%eax
f010b473:	a2 9d 22 25 f0       	mov    %al,0xf025229d
f010b478:	a0 9d 22 25 f0       	mov    0xf025229d,%al
f010b47d:	83 c8 80             	or     $0xffffff80,%eax
f010b480:	a2 9d 22 25 f0       	mov    %al,0xf025229d
f010b485:	b8 a0 c6 10 f0       	mov    $0xf010c6a0,%eax
f010b48a:	c1 e8 10             	shr    $0x10,%eax
f010b48d:	66 a3 9e 22 25 f0    	mov    %ax,0xf025229e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b493:	b8 aa c6 10 f0       	mov    $0xf010c6aa,%eax
f010b498:	66 a3 b0 22 25 f0    	mov    %ax,0xf02522b0
f010b49e:	66 c7 05 b2 22 25 f0 	movw   $0x8,0xf02522b2
f010b4a5:	08 00 
f010b4a7:	a0 b4 22 25 f0       	mov    0xf02522b4,%al
f010b4ac:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4af:	a2 b4 22 25 f0       	mov    %al,0xf02522b4
f010b4b4:	a0 b4 22 25 f0       	mov    0xf02522b4,%al
f010b4b9:	83 e0 1f             	and    $0x1f,%eax
f010b4bc:	a2 b4 22 25 f0       	mov    %al,0xf02522b4
f010b4c1:	a0 b5 22 25 f0       	mov    0xf02522b5,%al
f010b4c6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4c9:	83 c8 0e             	or     $0xe,%eax
f010b4cc:	a2 b5 22 25 f0       	mov    %al,0xf02522b5
f010b4d1:	a0 b5 22 25 f0       	mov    0xf02522b5,%al
f010b4d6:	83 e0 ef             	and    $0xffffffef,%eax
f010b4d9:	a2 b5 22 25 f0       	mov    %al,0xf02522b5
f010b4de:	a0 b5 22 25 f0       	mov    0xf02522b5,%al
f010b4e3:	83 c8 60             	or     $0x60,%eax
f010b4e6:	a2 b5 22 25 f0       	mov    %al,0xf02522b5
f010b4eb:	a0 b5 22 25 f0       	mov    0xf02522b5,%al
f010b4f0:	83 c8 80             	or     $0xffffff80,%eax
f010b4f3:	a2 b5 22 25 f0       	mov    %al,0xf02522b5
f010b4f8:	b8 aa c6 10 f0       	mov    $0xf010c6aa,%eax
f010b4fd:	c1 e8 10             	shr    $0x10,%eax
f010b500:	66 a3 b6 22 25 f0    	mov    %ax,0xf02522b6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b506:	b8 b2 c6 10 f0       	mov    $0xf010c6b2,%eax
f010b50b:	66 a3 b8 22 25 f0    	mov    %ax,0xf02522b8
f010b511:	66 c7 05 ba 22 25 f0 	movw   $0x8,0xf02522ba
f010b518:	08 00 
f010b51a:	a0 bc 22 25 f0       	mov    0xf02522bc,%al
f010b51f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b522:	a2 bc 22 25 f0       	mov    %al,0xf02522bc
f010b527:	a0 bc 22 25 f0       	mov    0xf02522bc,%al
f010b52c:	83 e0 1f             	and    $0x1f,%eax
f010b52f:	a2 bc 22 25 f0       	mov    %al,0xf02522bc
f010b534:	a0 bd 22 25 f0       	mov    0xf02522bd,%al
f010b539:	83 e0 f0             	and    $0xfffffff0,%eax
f010b53c:	83 c8 0e             	or     $0xe,%eax
f010b53f:	a2 bd 22 25 f0       	mov    %al,0xf02522bd
f010b544:	a0 bd 22 25 f0       	mov    0xf02522bd,%al
f010b549:	83 e0 ef             	and    $0xffffffef,%eax
f010b54c:	a2 bd 22 25 f0       	mov    %al,0xf02522bd
f010b551:	a0 bd 22 25 f0       	mov    0xf02522bd,%al
f010b556:	83 c8 60             	or     $0x60,%eax
f010b559:	a2 bd 22 25 f0       	mov    %al,0xf02522bd
f010b55e:	a0 bd 22 25 f0       	mov    0xf02522bd,%al
f010b563:	83 c8 80             	or     $0xffffff80,%eax
f010b566:	a2 bd 22 25 f0       	mov    %al,0xf02522bd
f010b56b:	b8 b2 c6 10 f0       	mov    $0xf010c6b2,%eax
f010b570:	c1 e8 10             	shr    $0x10,%eax
f010b573:	66 a3 be 22 25 f0    	mov    %ax,0xf02522be
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b579:	b8 b6 c6 10 f0       	mov    $0xf010c6b6,%eax
f010b57e:	66 a3 c0 22 25 f0    	mov    %ax,0xf02522c0
f010b584:	66 c7 05 c2 22 25 f0 	movw   $0x8,0xf02522c2
f010b58b:	08 00 
f010b58d:	a0 c4 22 25 f0       	mov    0xf02522c4,%al
f010b592:	83 e0 e0             	and    $0xffffffe0,%eax
f010b595:	a2 c4 22 25 f0       	mov    %al,0xf02522c4
f010b59a:	a0 c4 22 25 f0       	mov    0xf02522c4,%al
f010b59f:	83 e0 1f             	and    $0x1f,%eax
f010b5a2:	a2 c4 22 25 f0       	mov    %al,0xf02522c4
f010b5a7:	a0 c5 22 25 f0       	mov    0xf02522c5,%al
f010b5ac:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5af:	83 c8 0e             	or     $0xe,%eax
f010b5b2:	a2 c5 22 25 f0       	mov    %al,0xf02522c5
f010b5b7:	a0 c5 22 25 f0       	mov    0xf02522c5,%al
f010b5bc:	83 e0 ef             	and    $0xffffffef,%eax
f010b5bf:	a2 c5 22 25 f0       	mov    %al,0xf02522c5
f010b5c4:	a0 c5 22 25 f0       	mov    0xf02522c5,%al
f010b5c9:	83 c8 60             	or     $0x60,%eax
f010b5cc:	a2 c5 22 25 f0       	mov    %al,0xf02522c5
f010b5d1:	a0 c5 22 25 f0       	mov    0xf02522c5,%al
f010b5d6:	83 c8 80             	or     $0xffffff80,%eax
f010b5d9:	a2 c5 22 25 f0       	mov    %al,0xf02522c5
f010b5de:	b8 b6 c6 10 f0       	mov    $0xf010c6b6,%eax
f010b5e3:	c1 e8 10             	shr    $0x10,%eax
f010b5e6:	66 a3 c6 22 25 f0    	mov    %ax,0xf02522c6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b5ec:	b8 ba c6 10 f0       	mov    $0xf010c6ba,%eax
f010b5f1:	66 a3 c8 22 25 f0    	mov    %ax,0xf02522c8
f010b5f7:	66 c7 05 ca 22 25 f0 	movw   $0x8,0xf02522ca
f010b5fe:	08 00 
f010b600:	a0 cc 22 25 f0       	mov    0xf02522cc,%al
f010b605:	83 e0 e0             	and    $0xffffffe0,%eax
f010b608:	a2 cc 22 25 f0       	mov    %al,0xf02522cc
f010b60d:	a0 cc 22 25 f0       	mov    0xf02522cc,%al
f010b612:	83 e0 1f             	and    $0x1f,%eax
f010b615:	a2 cc 22 25 f0       	mov    %al,0xf02522cc
f010b61a:	a0 cd 22 25 f0       	mov    0xf02522cd,%al
f010b61f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b622:	83 c8 0e             	or     $0xe,%eax
f010b625:	a2 cd 22 25 f0       	mov    %al,0xf02522cd
f010b62a:	a0 cd 22 25 f0       	mov    0xf02522cd,%al
f010b62f:	83 e0 ef             	and    $0xffffffef,%eax
f010b632:	a2 cd 22 25 f0       	mov    %al,0xf02522cd
f010b637:	a0 cd 22 25 f0       	mov    0xf02522cd,%al
f010b63c:	83 c8 60             	or     $0x60,%eax
f010b63f:	a2 cd 22 25 f0       	mov    %al,0xf02522cd
f010b644:	a0 cd 22 25 f0       	mov    0xf02522cd,%al
f010b649:	83 c8 80             	or     $0xffffff80,%eax
f010b64c:	a2 cd 22 25 f0       	mov    %al,0xf02522cd
f010b651:	b8 ba c6 10 f0       	mov    $0xf010c6ba,%eax
f010b656:	c1 e8 10             	shr    $0x10,%eax
f010b659:	66 a3 ce 22 25 f0    	mov    %ax,0xf02522ce
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b65f:	b8 be c6 10 f0       	mov    $0xf010c6be,%eax
f010b664:	66 a3 e0 22 25 f0    	mov    %ax,0xf02522e0
f010b66a:	66 c7 05 e2 22 25 f0 	movw   $0x8,0xf02522e2
f010b671:	08 00 
f010b673:	a0 e4 22 25 f0       	mov    0xf02522e4,%al
f010b678:	83 e0 e0             	and    $0xffffffe0,%eax
f010b67b:	a2 e4 22 25 f0       	mov    %al,0xf02522e4
f010b680:	a0 e4 22 25 f0       	mov    0xf02522e4,%al
f010b685:	83 e0 1f             	and    $0x1f,%eax
f010b688:	a2 e4 22 25 f0       	mov    %al,0xf02522e4
f010b68d:	a0 e5 22 25 f0       	mov    0xf02522e5,%al
f010b692:	83 e0 f0             	and    $0xfffffff0,%eax
f010b695:	83 c8 0e             	or     $0xe,%eax
f010b698:	a2 e5 22 25 f0       	mov    %al,0xf02522e5
f010b69d:	a0 e5 22 25 f0       	mov    0xf02522e5,%al
f010b6a2:	83 e0 ef             	and    $0xffffffef,%eax
f010b6a5:	a2 e5 22 25 f0       	mov    %al,0xf02522e5
f010b6aa:	a0 e5 22 25 f0       	mov    0xf02522e5,%al
f010b6af:	83 c8 60             	or     $0x60,%eax
f010b6b2:	a2 e5 22 25 f0       	mov    %al,0xf02522e5
f010b6b7:	a0 e5 22 25 f0       	mov    0xf02522e5,%al
f010b6bc:	83 c8 80             	or     $0xffffff80,%eax
f010b6bf:	a2 e5 22 25 f0       	mov    %al,0xf02522e5
f010b6c4:	b8 be c6 10 f0       	mov    $0xf010c6be,%eax
f010b6c9:	c1 e8 10             	shr    $0x10,%eax
f010b6cc:	66 a3 e6 22 25 f0    	mov    %ax,0xf02522e6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b6d2:	b8 c4 c6 10 f0       	mov    $0xf010c6c4,%eax
f010b6d7:	66 a3 e8 22 25 f0    	mov    %ax,0xf02522e8
f010b6dd:	66 c7 05 ea 22 25 f0 	movw   $0x8,0xf02522ea
f010b6e4:	08 00 
f010b6e6:	a0 ec 22 25 f0       	mov    0xf02522ec,%al
f010b6eb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6ee:	a2 ec 22 25 f0       	mov    %al,0xf02522ec
f010b6f3:	a0 ec 22 25 f0       	mov    0xf02522ec,%al
f010b6f8:	83 e0 1f             	and    $0x1f,%eax
f010b6fb:	a2 ec 22 25 f0       	mov    %al,0xf02522ec
f010b700:	a0 ed 22 25 f0       	mov    0xf02522ed,%al
f010b705:	83 e0 f0             	and    $0xfffffff0,%eax
f010b708:	83 c8 0e             	or     $0xe,%eax
f010b70b:	a2 ed 22 25 f0       	mov    %al,0xf02522ed
f010b710:	a0 ed 22 25 f0       	mov    0xf02522ed,%al
f010b715:	83 e0 ef             	and    $0xffffffef,%eax
f010b718:	a2 ed 22 25 f0       	mov    %al,0xf02522ed
f010b71d:	a0 ed 22 25 f0       	mov    0xf02522ed,%al
f010b722:	83 c8 60             	or     $0x60,%eax
f010b725:	a2 ed 22 25 f0       	mov    %al,0xf02522ed
f010b72a:	a0 ed 22 25 f0       	mov    0xf02522ed,%al
f010b72f:	83 c8 80             	or     $0xffffff80,%eax
f010b732:	a2 ed 22 25 f0       	mov    %al,0xf02522ed
f010b737:	b8 c4 c6 10 f0       	mov    $0xf010c6c4,%eax
f010b73c:	c1 e8 10             	shr    $0x10,%eax
f010b73f:	66 a3 ee 22 25 f0    	mov    %ax,0xf02522ee
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b745:	b8 c8 c6 10 f0       	mov    $0xf010c6c8,%eax
f010b74a:	66 a3 f0 22 25 f0    	mov    %ax,0xf02522f0
f010b750:	66 c7 05 f2 22 25 f0 	movw   $0x8,0xf02522f2
f010b757:	08 00 
f010b759:	a0 f4 22 25 f0       	mov    0xf02522f4,%al
f010b75e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b761:	a2 f4 22 25 f0       	mov    %al,0xf02522f4
f010b766:	a0 f4 22 25 f0       	mov    0xf02522f4,%al
f010b76b:	83 e0 1f             	and    $0x1f,%eax
f010b76e:	a2 f4 22 25 f0       	mov    %al,0xf02522f4
f010b773:	a0 f5 22 25 f0       	mov    0xf02522f5,%al
f010b778:	83 e0 f0             	and    $0xfffffff0,%eax
f010b77b:	83 c8 0e             	or     $0xe,%eax
f010b77e:	a2 f5 22 25 f0       	mov    %al,0xf02522f5
f010b783:	a0 f5 22 25 f0       	mov    0xf02522f5,%al
f010b788:	83 e0 ef             	and    $0xffffffef,%eax
f010b78b:	a2 f5 22 25 f0       	mov    %al,0xf02522f5
f010b790:	a0 f5 22 25 f0       	mov    0xf02522f5,%al
f010b795:	83 c8 60             	or     $0x60,%eax
f010b798:	a2 f5 22 25 f0       	mov    %al,0xf02522f5
f010b79d:	a0 f5 22 25 f0       	mov    0xf02522f5,%al
f010b7a2:	83 c8 80             	or     $0xffffff80,%eax
f010b7a5:	a2 f5 22 25 f0       	mov    %al,0xf02522f5
f010b7aa:	b8 c8 c6 10 f0       	mov    $0xf010c6c8,%eax
f010b7af:	c1 e8 10             	shr    $0x10,%eax
f010b7b2:	66 a3 f6 22 25 f0    	mov    %ax,0xf02522f6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b7b8:	b8 ce c6 10 f0       	mov    $0xf010c6ce,%eax
f010b7bd:	66 a3 f8 22 25 f0    	mov    %ax,0xf02522f8
f010b7c3:	66 c7 05 fa 22 25 f0 	movw   $0x8,0xf02522fa
f010b7ca:	08 00 
f010b7cc:	a0 fc 22 25 f0       	mov    0xf02522fc,%al
f010b7d1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7d4:	a2 fc 22 25 f0       	mov    %al,0xf02522fc
f010b7d9:	a0 fc 22 25 f0       	mov    0xf02522fc,%al
f010b7de:	83 e0 1f             	and    $0x1f,%eax
f010b7e1:	a2 fc 22 25 f0       	mov    %al,0xf02522fc
f010b7e6:	a0 fd 22 25 f0       	mov    0xf02522fd,%al
f010b7eb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7ee:	83 c8 0e             	or     $0xe,%eax
f010b7f1:	a2 fd 22 25 f0       	mov    %al,0xf02522fd
f010b7f6:	a0 fd 22 25 f0       	mov    0xf02522fd,%al
f010b7fb:	83 e0 ef             	and    $0xffffffef,%eax
f010b7fe:	a2 fd 22 25 f0       	mov    %al,0xf02522fd
f010b803:	a0 fd 22 25 f0       	mov    0xf02522fd,%al
f010b808:	83 c8 60             	or     $0x60,%eax
f010b80b:	a2 fd 22 25 f0       	mov    %al,0xf02522fd
f010b810:	a0 fd 22 25 f0       	mov    0xf02522fd,%al
f010b815:	83 c8 80             	or     $0xffffff80,%eax
f010b818:	a2 fd 22 25 f0       	mov    %al,0xf02522fd
f010b81d:	b8 ce c6 10 f0       	mov    $0xf010c6ce,%eax
f010b822:	c1 e8 10             	shr    $0x10,%eax
f010b825:	66 a3 fe 22 25 f0    	mov    %ax,0xf02522fe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b82b:	b8 d4 c6 10 f0       	mov    $0xf010c6d4,%eax
f010b830:	66 a3 60 23 25 f0    	mov    %ax,0xf0252360
f010b836:	66 c7 05 62 23 25 f0 	movw   $0x8,0xf0252362
f010b83d:	08 00 
f010b83f:	a0 64 23 25 f0       	mov    0xf0252364,%al
f010b844:	83 e0 e0             	and    $0xffffffe0,%eax
f010b847:	a2 64 23 25 f0       	mov    %al,0xf0252364
f010b84c:	a0 64 23 25 f0       	mov    0xf0252364,%al
f010b851:	83 e0 1f             	and    $0x1f,%eax
f010b854:	a2 64 23 25 f0       	mov    %al,0xf0252364
f010b859:	a0 65 23 25 f0       	mov    0xf0252365,%al
f010b85e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b861:	83 c8 0e             	or     $0xe,%eax
f010b864:	a2 65 23 25 f0       	mov    %al,0xf0252365
f010b869:	a0 65 23 25 f0       	mov    0xf0252365,%al
f010b86e:	83 e0 ef             	and    $0xffffffef,%eax
f010b871:	a2 65 23 25 f0       	mov    %al,0xf0252365
f010b876:	a0 65 23 25 f0       	mov    0xf0252365,%al
f010b87b:	83 c8 60             	or     $0x60,%eax
f010b87e:	a2 65 23 25 f0       	mov    %al,0xf0252365
f010b883:	a0 65 23 25 f0       	mov    0xf0252365,%al
f010b888:	83 c8 80             	or     $0xffffff80,%eax
f010b88b:	a2 65 23 25 f0       	mov    %al,0xf0252365
f010b890:	b8 d4 c6 10 f0       	mov    $0xf010c6d4,%eax
f010b895:	c1 e8 10             	shr    $0x10,%eax
f010b898:	66 a3 66 23 25 f0    	mov    %ax,0xf0252366
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b89e:	b8 da c6 10 f0       	mov    $0xf010c6da,%eax
f010b8a3:	66 a3 68 23 25 f0    	mov    %ax,0xf0252368
f010b8a9:	66 c7 05 6a 23 25 f0 	movw   $0x8,0xf025236a
f010b8b0:	08 00 
f010b8b2:	a0 6c 23 25 f0       	mov    0xf025236c,%al
f010b8b7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8ba:	a2 6c 23 25 f0       	mov    %al,0xf025236c
f010b8bf:	a0 6c 23 25 f0       	mov    0xf025236c,%al
f010b8c4:	83 e0 1f             	and    $0x1f,%eax
f010b8c7:	a2 6c 23 25 f0       	mov    %al,0xf025236c
f010b8cc:	a0 6d 23 25 f0       	mov    0xf025236d,%al
f010b8d1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8d4:	83 c8 0e             	or     $0xe,%eax
f010b8d7:	a2 6d 23 25 f0       	mov    %al,0xf025236d
f010b8dc:	a0 6d 23 25 f0       	mov    0xf025236d,%al
f010b8e1:	83 e0 ef             	and    $0xffffffef,%eax
f010b8e4:	a2 6d 23 25 f0       	mov    %al,0xf025236d
f010b8e9:	a0 6d 23 25 f0       	mov    0xf025236d,%al
f010b8ee:	83 c8 60             	or     $0x60,%eax
f010b8f1:	a2 6d 23 25 f0       	mov    %al,0xf025236d
f010b8f6:	a0 6d 23 25 f0       	mov    0xf025236d,%al
f010b8fb:	83 c8 80             	or     $0xffffff80,%eax
f010b8fe:	a2 6d 23 25 f0       	mov    %al,0xf025236d
f010b903:	b8 da c6 10 f0       	mov    $0xf010c6da,%eax
f010b908:	c1 e8 10             	shr    $0x10,%eax
f010b90b:	66 a3 6e 23 25 f0    	mov    %ax,0xf025236e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b911:	b8 e0 c6 10 f0       	mov    $0xf010c6e0,%eax
f010b916:	66 a3 70 23 25 f0    	mov    %ax,0xf0252370
f010b91c:	66 c7 05 72 23 25 f0 	movw   $0x8,0xf0252372
f010b923:	08 00 
f010b925:	a0 74 23 25 f0       	mov    0xf0252374,%al
f010b92a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b92d:	a2 74 23 25 f0       	mov    %al,0xf0252374
f010b932:	a0 74 23 25 f0       	mov    0xf0252374,%al
f010b937:	83 e0 1f             	and    $0x1f,%eax
f010b93a:	a2 74 23 25 f0       	mov    %al,0xf0252374
f010b93f:	a0 75 23 25 f0       	mov    0xf0252375,%al
f010b944:	83 e0 f0             	and    $0xfffffff0,%eax
f010b947:	83 c8 0e             	or     $0xe,%eax
f010b94a:	a2 75 23 25 f0       	mov    %al,0xf0252375
f010b94f:	a0 75 23 25 f0       	mov    0xf0252375,%al
f010b954:	83 e0 ef             	and    $0xffffffef,%eax
f010b957:	a2 75 23 25 f0       	mov    %al,0xf0252375
f010b95c:	a0 75 23 25 f0       	mov    0xf0252375,%al
f010b961:	83 c8 60             	or     $0x60,%eax
f010b964:	a2 75 23 25 f0       	mov    %al,0xf0252375
f010b969:	a0 75 23 25 f0       	mov    0xf0252375,%al
f010b96e:	83 c8 80             	or     $0xffffff80,%eax
f010b971:	a2 75 23 25 f0       	mov    %al,0xf0252375
f010b976:	b8 e0 c6 10 f0       	mov    $0xf010c6e0,%eax
f010b97b:	c1 e8 10             	shr    $0x10,%eax
f010b97e:	66 a3 76 23 25 f0    	mov    %ax,0xf0252376
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b984:	b8 e6 c6 10 f0       	mov    $0xf010c6e6,%eax
f010b989:	66 a3 78 23 25 f0    	mov    %ax,0xf0252378
f010b98f:	66 c7 05 7a 23 25 f0 	movw   $0x8,0xf025237a
f010b996:	08 00 
f010b998:	a0 7c 23 25 f0       	mov    0xf025237c,%al
f010b99d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9a0:	a2 7c 23 25 f0       	mov    %al,0xf025237c
f010b9a5:	a0 7c 23 25 f0       	mov    0xf025237c,%al
f010b9aa:	83 e0 1f             	and    $0x1f,%eax
f010b9ad:	a2 7c 23 25 f0       	mov    %al,0xf025237c
f010b9b2:	a0 7d 23 25 f0       	mov    0xf025237d,%al
f010b9b7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9ba:	83 c8 0e             	or     $0xe,%eax
f010b9bd:	a2 7d 23 25 f0       	mov    %al,0xf025237d
f010b9c2:	a0 7d 23 25 f0       	mov    0xf025237d,%al
f010b9c7:	83 e0 ef             	and    $0xffffffef,%eax
f010b9ca:	a2 7d 23 25 f0       	mov    %al,0xf025237d
f010b9cf:	a0 7d 23 25 f0       	mov    0xf025237d,%al
f010b9d4:	83 c8 60             	or     $0x60,%eax
f010b9d7:	a2 7d 23 25 f0       	mov    %al,0xf025237d
f010b9dc:	a0 7d 23 25 f0       	mov    0xf025237d,%al
f010b9e1:	83 c8 80             	or     $0xffffff80,%eax
f010b9e4:	a2 7d 23 25 f0       	mov    %al,0xf025237d
f010b9e9:	b8 e6 c6 10 f0       	mov    $0xf010c6e6,%eax
f010b9ee:	c1 e8 10             	shr    $0x10,%eax
f010b9f1:	66 a3 7e 23 25 f0    	mov    %ax,0xf025237e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010b9f7:	b8 ec c6 10 f0       	mov    $0xf010c6ec,%eax
f010b9fc:	66 a3 80 23 25 f0    	mov    %ax,0xf0252380
f010ba02:	66 c7 05 82 23 25 f0 	movw   $0x8,0xf0252382
f010ba09:	08 00 
f010ba0b:	a0 84 23 25 f0       	mov    0xf0252384,%al
f010ba10:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba13:	a2 84 23 25 f0       	mov    %al,0xf0252384
f010ba18:	a0 84 23 25 f0       	mov    0xf0252384,%al
f010ba1d:	83 e0 1f             	and    $0x1f,%eax
f010ba20:	a2 84 23 25 f0       	mov    %al,0xf0252384
f010ba25:	a0 85 23 25 f0       	mov    0xf0252385,%al
f010ba2a:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba2d:	83 c8 0e             	or     $0xe,%eax
f010ba30:	a2 85 23 25 f0       	mov    %al,0xf0252385
f010ba35:	a0 85 23 25 f0       	mov    0xf0252385,%al
f010ba3a:	83 e0 ef             	and    $0xffffffef,%eax
f010ba3d:	a2 85 23 25 f0       	mov    %al,0xf0252385
f010ba42:	a0 85 23 25 f0       	mov    0xf0252385,%al
f010ba47:	83 c8 60             	or     $0x60,%eax
f010ba4a:	a2 85 23 25 f0       	mov    %al,0xf0252385
f010ba4f:	a0 85 23 25 f0       	mov    0xf0252385,%al
f010ba54:	83 c8 80             	or     $0xffffff80,%eax
f010ba57:	a2 85 23 25 f0       	mov    %al,0xf0252385
f010ba5c:	b8 ec c6 10 f0       	mov    $0xf010c6ec,%eax
f010ba61:	c1 e8 10             	shr    $0x10,%eax
f010ba64:	66 a3 86 23 25 f0    	mov    %ax,0xf0252386
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010ba6a:	b8 f2 c6 10 f0       	mov    $0xf010c6f2,%eax
f010ba6f:	66 a3 88 23 25 f0    	mov    %ax,0xf0252388
f010ba75:	66 c7 05 8a 23 25 f0 	movw   $0x8,0xf025238a
f010ba7c:	08 00 
f010ba7e:	a0 8c 23 25 f0       	mov    0xf025238c,%al
f010ba83:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba86:	a2 8c 23 25 f0       	mov    %al,0xf025238c
f010ba8b:	a0 8c 23 25 f0       	mov    0xf025238c,%al
f010ba90:	83 e0 1f             	and    $0x1f,%eax
f010ba93:	a2 8c 23 25 f0       	mov    %al,0xf025238c
f010ba98:	a0 8d 23 25 f0       	mov    0xf025238d,%al
f010ba9d:	83 e0 f0             	and    $0xfffffff0,%eax
f010baa0:	83 c8 0e             	or     $0xe,%eax
f010baa3:	a2 8d 23 25 f0       	mov    %al,0xf025238d
f010baa8:	a0 8d 23 25 f0       	mov    0xf025238d,%al
f010baad:	83 e0 ef             	and    $0xffffffef,%eax
f010bab0:	a2 8d 23 25 f0       	mov    %al,0xf025238d
f010bab5:	a0 8d 23 25 f0       	mov    0xf025238d,%al
f010baba:	83 c8 60             	or     $0x60,%eax
f010babd:	a2 8d 23 25 f0       	mov    %al,0xf025238d
f010bac2:	a0 8d 23 25 f0       	mov    0xf025238d,%al
f010bac7:	83 c8 80             	or     $0xffffff80,%eax
f010baca:	a2 8d 23 25 f0       	mov    %al,0xf025238d
f010bacf:	b8 f2 c6 10 f0       	mov    $0xf010c6f2,%eax
f010bad4:	c1 e8 10             	shr    $0x10,%eax
f010bad7:	66 a3 8e 23 25 f0    	mov    %ax,0xf025238e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010badd:	b8 f8 c6 10 f0       	mov    $0xf010c6f8,%eax
f010bae2:	66 a3 90 23 25 f0    	mov    %ax,0xf0252390
f010bae8:	66 c7 05 92 23 25 f0 	movw   $0x8,0xf0252392
f010baef:	08 00 
f010baf1:	a0 94 23 25 f0       	mov    0xf0252394,%al
f010baf6:	83 e0 e0             	and    $0xffffffe0,%eax
f010baf9:	a2 94 23 25 f0       	mov    %al,0xf0252394
f010bafe:	a0 94 23 25 f0       	mov    0xf0252394,%al
f010bb03:	83 e0 1f             	and    $0x1f,%eax
f010bb06:	a2 94 23 25 f0       	mov    %al,0xf0252394
f010bb0b:	a0 95 23 25 f0       	mov    0xf0252395,%al
f010bb10:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb13:	83 c8 0e             	or     $0xe,%eax
f010bb16:	a2 95 23 25 f0       	mov    %al,0xf0252395
f010bb1b:	a0 95 23 25 f0       	mov    0xf0252395,%al
f010bb20:	83 e0 ef             	and    $0xffffffef,%eax
f010bb23:	a2 95 23 25 f0       	mov    %al,0xf0252395
f010bb28:	a0 95 23 25 f0       	mov    0xf0252395,%al
f010bb2d:	83 c8 60             	or     $0x60,%eax
f010bb30:	a2 95 23 25 f0       	mov    %al,0xf0252395
f010bb35:	a0 95 23 25 f0       	mov    0xf0252395,%al
f010bb3a:	83 c8 80             	or     $0xffffff80,%eax
f010bb3d:	a2 95 23 25 f0       	mov    %al,0xf0252395
f010bb42:	b8 f8 c6 10 f0       	mov    $0xf010c6f8,%eax
f010bb47:	c1 e8 10             	shr    $0x10,%eax
f010bb4a:	66 a3 96 23 25 f0    	mov    %ax,0xf0252396
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bb50:	b8 fe c6 10 f0       	mov    $0xf010c6fe,%eax
f010bb55:	66 a3 98 23 25 f0    	mov    %ax,0xf0252398
f010bb5b:	66 c7 05 9a 23 25 f0 	movw   $0x8,0xf025239a
f010bb62:	08 00 
f010bb64:	a0 9c 23 25 f0       	mov    0xf025239c,%al
f010bb69:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb6c:	a2 9c 23 25 f0       	mov    %al,0xf025239c
f010bb71:	a0 9c 23 25 f0       	mov    0xf025239c,%al
f010bb76:	83 e0 1f             	and    $0x1f,%eax
f010bb79:	a2 9c 23 25 f0       	mov    %al,0xf025239c
f010bb7e:	a0 9d 23 25 f0       	mov    0xf025239d,%al
f010bb83:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb86:	83 c8 0e             	or     $0xe,%eax
f010bb89:	a2 9d 23 25 f0       	mov    %al,0xf025239d
f010bb8e:	a0 9d 23 25 f0       	mov    0xf025239d,%al
f010bb93:	83 e0 ef             	and    $0xffffffef,%eax
f010bb96:	a2 9d 23 25 f0       	mov    %al,0xf025239d
f010bb9b:	a0 9d 23 25 f0       	mov    0xf025239d,%al
f010bba0:	83 c8 60             	or     $0x60,%eax
f010bba3:	a2 9d 23 25 f0       	mov    %al,0xf025239d
f010bba8:	a0 9d 23 25 f0       	mov    0xf025239d,%al
f010bbad:	83 c8 80             	or     $0xffffff80,%eax
f010bbb0:	a2 9d 23 25 f0       	mov    %al,0xf025239d
f010bbb5:	b8 fe c6 10 f0       	mov    $0xf010c6fe,%eax
f010bbba:	c1 e8 10             	shr    $0x10,%eax
f010bbbd:	66 a3 9e 23 25 f0    	mov    %ax,0xf025239e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bbc3:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010bbc8:	66 a3 a0 23 25 f0    	mov    %ax,0xf02523a0
f010bbce:	66 c7 05 a2 23 25 f0 	movw   $0x8,0xf02523a2
f010bbd5:	08 00 
f010bbd7:	a0 a4 23 25 f0       	mov    0xf02523a4,%al
f010bbdc:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbdf:	a2 a4 23 25 f0       	mov    %al,0xf02523a4
f010bbe4:	a0 a4 23 25 f0       	mov    0xf02523a4,%al
f010bbe9:	83 e0 1f             	and    $0x1f,%eax
f010bbec:	a2 a4 23 25 f0       	mov    %al,0xf02523a4
f010bbf1:	a0 a5 23 25 f0       	mov    0xf02523a5,%al
f010bbf6:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbf9:	83 c8 0e             	or     $0xe,%eax
f010bbfc:	a2 a5 23 25 f0       	mov    %al,0xf02523a5
f010bc01:	a0 a5 23 25 f0       	mov    0xf02523a5,%al
f010bc06:	83 e0 ef             	and    $0xffffffef,%eax
f010bc09:	a2 a5 23 25 f0       	mov    %al,0xf02523a5
f010bc0e:	a0 a5 23 25 f0       	mov    0xf02523a5,%al
f010bc13:	83 c8 60             	or     $0x60,%eax
f010bc16:	a2 a5 23 25 f0       	mov    %al,0xf02523a5
f010bc1b:	a0 a5 23 25 f0       	mov    0xf02523a5,%al
f010bc20:	83 c8 80             	or     $0xffffff80,%eax
f010bc23:	a2 a5 23 25 f0       	mov    %al,0xf02523a5
f010bc28:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010bc2d:	c1 e8 10             	shr    $0x10,%eax
f010bc30:	66 a3 a6 23 25 f0    	mov    %ax,0xf02523a6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bc36:	b8 0a c7 10 f0       	mov    $0xf010c70a,%eax
f010bc3b:	66 a3 a8 23 25 f0    	mov    %ax,0xf02523a8
f010bc41:	66 c7 05 aa 23 25 f0 	movw   $0x8,0xf02523aa
f010bc48:	08 00 
f010bc4a:	a0 ac 23 25 f0       	mov    0xf02523ac,%al
f010bc4f:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc52:	a2 ac 23 25 f0       	mov    %al,0xf02523ac
f010bc57:	a0 ac 23 25 f0       	mov    0xf02523ac,%al
f010bc5c:	83 e0 1f             	and    $0x1f,%eax
f010bc5f:	a2 ac 23 25 f0       	mov    %al,0xf02523ac
f010bc64:	a0 ad 23 25 f0       	mov    0xf02523ad,%al
f010bc69:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc6c:	83 c8 0e             	or     $0xe,%eax
f010bc6f:	a2 ad 23 25 f0       	mov    %al,0xf02523ad
f010bc74:	a0 ad 23 25 f0       	mov    0xf02523ad,%al
f010bc79:	83 e0 ef             	and    $0xffffffef,%eax
f010bc7c:	a2 ad 23 25 f0       	mov    %al,0xf02523ad
f010bc81:	a0 ad 23 25 f0       	mov    0xf02523ad,%al
f010bc86:	83 c8 60             	or     $0x60,%eax
f010bc89:	a2 ad 23 25 f0       	mov    %al,0xf02523ad
f010bc8e:	a0 ad 23 25 f0       	mov    0xf02523ad,%al
f010bc93:	83 c8 80             	or     $0xffffff80,%eax
f010bc96:	a2 ad 23 25 f0       	mov    %al,0xf02523ad
f010bc9b:	b8 0a c7 10 f0       	mov    $0xf010c70a,%eax
f010bca0:	c1 e8 10             	shr    $0x10,%eax
f010bca3:	66 a3 ae 23 25 f0    	mov    %ax,0xf02523ae
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bca9:	b8 10 c7 10 f0       	mov    $0xf010c710,%eax
f010bcae:	66 a3 b0 23 25 f0    	mov    %ax,0xf02523b0
f010bcb4:	66 c7 05 b2 23 25 f0 	movw   $0x8,0xf02523b2
f010bcbb:	08 00 
f010bcbd:	a0 b4 23 25 f0       	mov    0xf02523b4,%al
f010bcc2:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcc5:	a2 b4 23 25 f0       	mov    %al,0xf02523b4
f010bcca:	a0 b4 23 25 f0       	mov    0xf02523b4,%al
f010bccf:	83 e0 1f             	and    $0x1f,%eax
f010bcd2:	a2 b4 23 25 f0       	mov    %al,0xf02523b4
f010bcd7:	a0 b5 23 25 f0       	mov    0xf02523b5,%al
f010bcdc:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcdf:	83 c8 0e             	or     $0xe,%eax
f010bce2:	a2 b5 23 25 f0       	mov    %al,0xf02523b5
f010bce7:	a0 b5 23 25 f0       	mov    0xf02523b5,%al
f010bcec:	83 e0 ef             	and    $0xffffffef,%eax
f010bcef:	a2 b5 23 25 f0       	mov    %al,0xf02523b5
f010bcf4:	a0 b5 23 25 f0       	mov    0xf02523b5,%al
f010bcf9:	83 c8 60             	or     $0x60,%eax
f010bcfc:	a2 b5 23 25 f0       	mov    %al,0xf02523b5
f010bd01:	a0 b5 23 25 f0       	mov    0xf02523b5,%al
f010bd06:	83 c8 80             	or     $0xffffff80,%eax
f010bd09:	a2 b5 23 25 f0       	mov    %al,0xf02523b5
f010bd0e:	b8 10 c7 10 f0       	mov    $0xf010c710,%eax
f010bd13:	c1 e8 10             	shr    $0x10,%eax
f010bd16:	66 a3 b6 23 25 f0    	mov    %ax,0xf02523b6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bd1c:	b8 16 c7 10 f0       	mov    $0xf010c716,%eax
f010bd21:	66 a3 b8 23 25 f0    	mov    %ax,0xf02523b8
f010bd27:	66 c7 05 ba 23 25 f0 	movw   $0x8,0xf02523ba
f010bd2e:	08 00 
f010bd30:	a0 bc 23 25 f0       	mov    0xf02523bc,%al
f010bd35:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd38:	a2 bc 23 25 f0       	mov    %al,0xf02523bc
f010bd3d:	a0 bc 23 25 f0       	mov    0xf02523bc,%al
f010bd42:	83 e0 1f             	and    $0x1f,%eax
f010bd45:	a2 bc 23 25 f0       	mov    %al,0xf02523bc
f010bd4a:	a0 bd 23 25 f0       	mov    0xf02523bd,%al
f010bd4f:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd52:	83 c8 0e             	or     $0xe,%eax
f010bd55:	a2 bd 23 25 f0       	mov    %al,0xf02523bd
f010bd5a:	a0 bd 23 25 f0       	mov    0xf02523bd,%al
f010bd5f:	83 e0 ef             	and    $0xffffffef,%eax
f010bd62:	a2 bd 23 25 f0       	mov    %al,0xf02523bd
f010bd67:	a0 bd 23 25 f0       	mov    0xf02523bd,%al
f010bd6c:	83 c8 60             	or     $0x60,%eax
f010bd6f:	a2 bd 23 25 f0       	mov    %al,0xf02523bd
f010bd74:	a0 bd 23 25 f0       	mov    0xf02523bd,%al
f010bd79:	83 c8 80             	or     $0xffffff80,%eax
f010bd7c:	a2 bd 23 25 f0       	mov    %al,0xf02523bd
f010bd81:	b8 16 c7 10 f0       	mov    $0xf010c716,%eax
f010bd86:	c1 e8 10             	shr    $0x10,%eax
f010bd89:	66 a3 be 23 25 f0    	mov    %ax,0xf02523be
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bd8f:	b8 1c c7 10 f0       	mov    $0xf010c71c,%eax
f010bd94:	66 a3 c0 23 25 f0    	mov    %ax,0xf02523c0
f010bd9a:	66 c7 05 c2 23 25 f0 	movw   $0x8,0xf02523c2
f010bda1:	08 00 
f010bda3:	a0 c4 23 25 f0       	mov    0xf02523c4,%al
f010bda8:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdab:	a2 c4 23 25 f0       	mov    %al,0xf02523c4
f010bdb0:	a0 c4 23 25 f0       	mov    0xf02523c4,%al
f010bdb5:	83 e0 1f             	and    $0x1f,%eax
f010bdb8:	a2 c4 23 25 f0       	mov    %al,0xf02523c4
f010bdbd:	a0 c5 23 25 f0       	mov    0xf02523c5,%al
f010bdc2:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdc5:	83 c8 0e             	or     $0xe,%eax
f010bdc8:	a2 c5 23 25 f0       	mov    %al,0xf02523c5
f010bdcd:	a0 c5 23 25 f0       	mov    0xf02523c5,%al
f010bdd2:	83 e0 ef             	and    $0xffffffef,%eax
f010bdd5:	a2 c5 23 25 f0       	mov    %al,0xf02523c5
f010bdda:	a0 c5 23 25 f0       	mov    0xf02523c5,%al
f010bddf:	83 c8 60             	or     $0x60,%eax
f010bde2:	a2 c5 23 25 f0       	mov    %al,0xf02523c5
f010bde7:	a0 c5 23 25 f0       	mov    0xf02523c5,%al
f010bdec:	83 c8 80             	or     $0xffffff80,%eax
f010bdef:	a2 c5 23 25 f0       	mov    %al,0xf02523c5
f010bdf4:	b8 1c c7 10 f0       	mov    $0xf010c71c,%eax
f010bdf9:	c1 e8 10             	shr    $0x10,%eax
f010bdfc:	66 a3 c6 23 25 f0    	mov    %ax,0xf02523c6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010be02:	b8 22 c7 10 f0       	mov    $0xf010c722,%eax
f010be07:	66 a3 c8 23 25 f0    	mov    %ax,0xf02523c8
f010be0d:	66 c7 05 ca 23 25 f0 	movw   $0x8,0xf02523ca
f010be14:	08 00 
f010be16:	a0 cc 23 25 f0       	mov    0xf02523cc,%al
f010be1b:	83 e0 e0             	and    $0xffffffe0,%eax
f010be1e:	a2 cc 23 25 f0       	mov    %al,0xf02523cc
f010be23:	a0 cc 23 25 f0       	mov    0xf02523cc,%al
f010be28:	83 e0 1f             	and    $0x1f,%eax
f010be2b:	a2 cc 23 25 f0       	mov    %al,0xf02523cc
f010be30:	a0 cd 23 25 f0       	mov    0xf02523cd,%al
f010be35:	83 e0 f0             	and    $0xfffffff0,%eax
f010be38:	83 c8 0e             	or     $0xe,%eax
f010be3b:	a2 cd 23 25 f0       	mov    %al,0xf02523cd
f010be40:	a0 cd 23 25 f0       	mov    0xf02523cd,%al
f010be45:	83 e0 ef             	and    $0xffffffef,%eax
f010be48:	a2 cd 23 25 f0       	mov    %al,0xf02523cd
f010be4d:	a0 cd 23 25 f0       	mov    0xf02523cd,%al
f010be52:	83 c8 60             	or     $0x60,%eax
f010be55:	a2 cd 23 25 f0       	mov    %al,0xf02523cd
f010be5a:	a0 cd 23 25 f0       	mov    0xf02523cd,%al
f010be5f:	83 c8 80             	or     $0xffffff80,%eax
f010be62:	a2 cd 23 25 f0       	mov    %al,0xf02523cd
f010be67:	b8 22 c7 10 f0       	mov    $0xf010c722,%eax
f010be6c:	c1 e8 10             	shr    $0x10,%eax
f010be6f:	66 a3 ce 23 25 f0    	mov    %ax,0xf02523ce
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010be75:	b8 28 c7 10 f0       	mov    $0xf010c728,%eax
f010be7a:	66 a3 d0 23 25 f0    	mov    %ax,0xf02523d0
f010be80:	66 c7 05 d2 23 25 f0 	movw   $0x8,0xf02523d2
f010be87:	08 00 
f010be89:	a0 d4 23 25 f0       	mov    0xf02523d4,%al
f010be8e:	83 e0 e0             	and    $0xffffffe0,%eax
f010be91:	a2 d4 23 25 f0       	mov    %al,0xf02523d4
f010be96:	a0 d4 23 25 f0       	mov    0xf02523d4,%al
f010be9b:	83 e0 1f             	and    $0x1f,%eax
f010be9e:	a2 d4 23 25 f0       	mov    %al,0xf02523d4
f010bea3:	a0 d5 23 25 f0       	mov    0xf02523d5,%al
f010bea8:	83 e0 f0             	and    $0xfffffff0,%eax
f010beab:	83 c8 0e             	or     $0xe,%eax
f010beae:	a2 d5 23 25 f0       	mov    %al,0xf02523d5
f010beb3:	a0 d5 23 25 f0       	mov    0xf02523d5,%al
f010beb8:	83 e0 ef             	and    $0xffffffef,%eax
f010bebb:	a2 d5 23 25 f0       	mov    %al,0xf02523d5
f010bec0:	a0 d5 23 25 f0       	mov    0xf02523d5,%al
f010bec5:	83 c8 60             	or     $0x60,%eax
f010bec8:	a2 d5 23 25 f0       	mov    %al,0xf02523d5
f010becd:	a0 d5 23 25 f0       	mov    0xf02523d5,%al
f010bed2:	83 c8 80             	or     $0xffffff80,%eax
f010bed5:	a2 d5 23 25 f0       	mov    %al,0xf02523d5
f010beda:	b8 28 c7 10 f0       	mov    $0xf010c728,%eax
f010bedf:	c1 e8 10             	shr    $0x10,%eax
f010bee2:	66 a3 d6 23 25 f0    	mov    %ax,0xf02523d6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010bee8:	b8 2e c7 10 f0       	mov    $0xf010c72e,%eax
f010beed:	66 a3 d8 23 25 f0    	mov    %ax,0xf02523d8
f010bef3:	66 c7 05 da 23 25 f0 	movw   $0x8,0xf02523da
f010befa:	08 00 
f010befc:	a0 dc 23 25 f0       	mov    0xf02523dc,%al
f010bf01:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf04:	a2 dc 23 25 f0       	mov    %al,0xf02523dc
f010bf09:	a0 dc 23 25 f0       	mov    0xf02523dc,%al
f010bf0e:	83 e0 1f             	and    $0x1f,%eax
f010bf11:	a2 dc 23 25 f0       	mov    %al,0xf02523dc
f010bf16:	a0 dd 23 25 f0       	mov    0xf02523dd,%al
f010bf1b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf1e:	83 c8 0e             	or     $0xe,%eax
f010bf21:	a2 dd 23 25 f0       	mov    %al,0xf02523dd
f010bf26:	a0 dd 23 25 f0       	mov    0xf02523dd,%al
f010bf2b:	83 e0 ef             	and    $0xffffffef,%eax
f010bf2e:	a2 dd 23 25 f0       	mov    %al,0xf02523dd
f010bf33:	a0 dd 23 25 f0       	mov    0xf02523dd,%al
f010bf38:	83 c8 60             	or     $0x60,%eax
f010bf3b:	a2 dd 23 25 f0       	mov    %al,0xf02523dd
f010bf40:	a0 dd 23 25 f0       	mov    0xf02523dd,%al
f010bf45:	83 c8 80             	or     $0xffffff80,%eax
f010bf48:	a2 dd 23 25 f0       	mov    %al,0xf02523dd
f010bf4d:	b8 2e c7 10 f0       	mov    $0xf010c72e,%eax
f010bf52:	c1 e8 10             	shr    $0x10,%eax
f010bf55:	66 a3 de 23 25 f0    	mov    %ax,0xf02523de



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bf5b:	c7 05 84 2a 25 f0 00 	movl   $0xefc00000,0xf0252a84
f010bf62:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bf65:	66 c7 05 88 2a 25 f0 	movw   $0x10,0xf0252a88
f010bf6c:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bf6e:	66 c7 05 88 c9 18 f0 	movw   $0x68,0xf018c988
f010bf75:	68 00 
f010bf77:	b8 80 2a 25 f0       	mov    $0xf0252a80,%eax
f010bf7c:	66 a3 8a c9 18 f0    	mov    %ax,0xf018c98a
f010bf82:	b8 80 2a 25 f0       	mov    $0xf0252a80,%eax
f010bf87:	c1 e8 10             	shr    $0x10,%eax
f010bf8a:	a2 8c c9 18 f0       	mov    %al,0xf018c98c
f010bf8f:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bf94:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf97:	83 c8 09             	or     $0x9,%eax
f010bf9a:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bf9f:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bfa4:	83 c8 10             	or     $0x10,%eax
f010bfa7:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bfac:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bfb1:	83 e0 9f             	and    $0xffffff9f,%eax
f010bfb4:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bfb9:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bfbe:	83 c8 80             	or     $0xffffff80,%eax
f010bfc1:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bfc6:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bfcb:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfce:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bfd3:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bfd8:	83 e0 ef             	and    $0xffffffef,%eax
f010bfdb:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bfe0:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bfe5:	83 e0 df             	and    $0xffffffdf,%eax
f010bfe8:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bfed:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bff2:	83 c8 40             	or     $0x40,%eax
f010bff5:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bffa:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bfff:	83 e0 7f             	and    $0x7f,%eax
f010c002:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010c007:	b8 80 2a 25 f0       	mov    $0xf0252a80,%eax
f010c00c:	c1 e8 18             	shr    $0x18,%eax
f010c00f:	a2 8f c9 18 f0       	mov    %al,0xf018c98f
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c014:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010c019:	83 e0 ef             	and    $0xffffffef,%eax
f010c01c:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010c021:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c027:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c02b:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c02e:	0f 01 1d 50 ca 18 f0 	lidtl  0xf018ca50
}
f010c035:	90                   	nop
f010c036:	c9                   	leave  
f010c037:	c3                   	ret    

f010c038 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c038:	55                   	push   %ebp
f010c039:	89 e5                	mov    %esp,%ebp
f010c03b:	53                   	push   %ebx
f010c03c:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c03f:	83 ec 08             	sub    $0x8,%esp
f010c042:	ff 75 08             	pushl  0x8(%ebp)
f010c045:	68 fb 2b 13 f0       	push   $0xf0132bfb
f010c04a:	e8 e2 4d ff ff       	call   f0100e31 <cprintf>
f010c04f:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c052:	8b 45 08             	mov    0x8(%ebp),%eax
f010c055:	83 ec 0c             	sub    $0xc,%esp
f010c058:	50                   	push   %eax
f010c059:	e8 fd 00 00 00       	call   f010c15b <print_regs>
f010c05e:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c061:	8b 45 08             	mov    0x8(%ebp),%eax
f010c064:	8b 40 20             	mov    0x20(%eax),%eax
f010c067:	0f b7 c0             	movzwl %ax,%eax
f010c06a:	83 ec 08             	sub    $0x8,%esp
f010c06d:	50                   	push   %eax
f010c06e:	68 0d 2c 13 f0       	push   $0xf0132c0d
f010c073:	e8 b9 4d ff ff       	call   f0100e31 <cprintf>
f010c078:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c07b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c07e:	8b 40 24             	mov    0x24(%eax),%eax
f010c081:	0f b7 c0             	movzwl %ax,%eax
f010c084:	83 ec 08             	sub    $0x8,%esp
f010c087:	50                   	push   %eax
f010c088:	68 20 2c 13 f0       	push   $0xf0132c20
f010c08d:	e8 9f 4d ff ff       	call   f0100e31 <cprintf>
f010c092:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c095:	8b 45 08             	mov    0x8(%ebp),%eax
f010c098:	8b 58 28             	mov    0x28(%eax),%ebx
f010c09b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c09e:	8b 40 28             	mov    0x28(%eax),%eax
f010c0a1:	83 ec 0c             	sub    $0xc,%esp
f010c0a4:	50                   	push   %eax
f010c0a5:	e8 d0 ee ff ff       	call   f010af7a <trapname>
f010c0aa:	83 c4 10             	add    $0x10,%esp
f010c0ad:	89 c2                	mov    %eax,%edx
f010c0af:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0b2:	8b 40 28             	mov    0x28(%eax),%eax
f010c0b5:	53                   	push   %ebx
f010c0b6:	52                   	push   %edx
f010c0b7:	50                   	push   %eax
f010c0b8:	68 33 2c 13 f0       	push   $0xf0132c33
f010c0bd:	e8 6f 4d ff ff       	call   f0100e31 <cprintf>
f010c0c2:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c0c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0c8:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c0cb:	83 ec 08             	sub    $0x8,%esp
f010c0ce:	50                   	push   %eax
f010c0cf:	68 4a 2c 13 f0       	push   $0xf0132c4a
f010c0d4:	e8 58 4d ff ff       	call   f0100e31 <cprintf>
f010c0d9:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c0dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0df:	8b 40 30             	mov    0x30(%eax),%eax
f010c0e2:	83 ec 08             	sub    $0x8,%esp
f010c0e5:	50                   	push   %eax
f010c0e6:	68 59 2c 13 f0       	push   $0xf0132c59
f010c0eb:	e8 41 4d ff ff       	call   f0100e31 <cprintf>
f010c0f0:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c0f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0f6:	8b 40 34             	mov    0x34(%eax),%eax
f010c0f9:	0f b7 c0             	movzwl %ax,%eax
f010c0fc:	83 ec 08             	sub    $0x8,%esp
f010c0ff:	50                   	push   %eax
f010c100:	68 68 2c 13 f0       	push   $0xf0132c68
f010c105:	e8 27 4d ff ff       	call   f0100e31 <cprintf>
f010c10a:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c10d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c110:	8b 40 38             	mov    0x38(%eax),%eax
f010c113:	83 ec 08             	sub    $0x8,%esp
f010c116:	50                   	push   %eax
f010c117:	68 7b 2c 13 f0       	push   $0xf0132c7b
f010c11c:	e8 10 4d ff ff       	call   f0100e31 <cprintf>
f010c121:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c124:	8b 45 08             	mov    0x8(%ebp),%eax
f010c127:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c12a:	83 ec 08             	sub    $0x8,%esp
f010c12d:	50                   	push   %eax
f010c12e:	68 8a 2c 13 f0       	push   $0xf0132c8a
f010c133:	e8 f9 4c ff ff       	call   f0100e31 <cprintf>
f010c138:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c13b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c13e:	8b 40 40             	mov    0x40(%eax),%eax
f010c141:	0f b7 c0             	movzwl %ax,%eax
f010c144:	83 ec 08             	sub    $0x8,%esp
f010c147:	50                   	push   %eax
f010c148:	68 99 2c 13 f0       	push   $0xf0132c99
f010c14d:	e8 df 4c ff ff       	call   f0100e31 <cprintf>
f010c152:	83 c4 10             	add    $0x10,%esp
}
f010c155:	90                   	nop
f010c156:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c159:	c9                   	leave  
f010c15a:	c3                   	ret    

f010c15b <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c15b:	55                   	push   %ebp
f010c15c:	89 e5                	mov    %esp,%ebp
f010c15e:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c161:	8b 45 08             	mov    0x8(%ebp),%eax
f010c164:	8b 00                	mov    (%eax),%eax
f010c166:	83 ec 08             	sub    $0x8,%esp
f010c169:	50                   	push   %eax
f010c16a:	68 ac 2c 13 f0       	push   $0xf0132cac
f010c16f:	e8 bd 4c ff ff       	call   f0100e31 <cprintf>
f010c174:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c177:	8b 45 08             	mov    0x8(%ebp),%eax
f010c17a:	8b 40 04             	mov    0x4(%eax),%eax
f010c17d:	83 ec 08             	sub    $0x8,%esp
f010c180:	50                   	push   %eax
f010c181:	68 bb 2c 13 f0       	push   $0xf0132cbb
f010c186:	e8 a6 4c ff ff       	call   f0100e31 <cprintf>
f010c18b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c18e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c191:	8b 40 08             	mov    0x8(%eax),%eax
f010c194:	83 ec 08             	sub    $0x8,%esp
f010c197:	50                   	push   %eax
f010c198:	68 ca 2c 13 f0       	push   $0xf0132cca
f010c19d:	e8 8f 4c ff ff       	call   f0100e31 <cprintf>
f010c1a2:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c1a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1a8:	8b 40 0c             	mov    0xc(%eax),%eax
f010c1ab:	83 ec 08             	sub    $0x8,%esp
f010c1ae:	50                   	push   %eax
f010c1af:	68 d9 2c 13 f0       	push   $0xf0132cd9
f010c1b4:	e8 78 4c ff ff       	call   f0100e31 <cprintf>
f010c1b9:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c1bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1bf:	8b 40 10             	mov    0x10(%eax),%eax
f010c1c2:	83 ec 08             	sub    $0x8,%esp
f010c1c5:	50                   	push   %eax
f010c1c6:	68 e8 2c 13 f0       	push   $0xf0132ce8
f010c1cb:	e8 61 4c ff ff       	call   f0100e31 <cprintf>
f010c1d0:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c1d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d6:	8b 40 14             	mov    0x14(%eax),%eax
f010c1d9:	83 ec 08             	sub    $0x8,%esp
f010c1dc:	50                   	push   %eax
f010c1dd:	68 f7 2c 13 f0       	push   $0xf0132cf7
f010c1e2:	e8 4a 4c ff ff       	call   f0100e31 <cprintf>
f010c1e7:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c1ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ed:	8b 40 18             	mov    0x18(%eax),%eax
f010c1f0:	83 ec 08             	sub    $0x8,%esp
f010c1f3:	50                   	push   %eax
f010c1f4:	68 06 2d 13 f0       	push   $0xf0132d06
f010c1f9:	e8 33 4c ff ff       	call   f0100e31 <cprintf>
f010c1fe:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c201:	8b 45 08             	mov    0x8(%ebp),%eax
f010c204:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c207:	83 ec 08             	sub    $0x8,%esp
f010c20a:	50                   	push   %eax
f010c20b:	68 15 2d 13 f0       	push   $0xf0132d15
f010c210:	e8 1c 4c ff ff       	call   f0100e31 <cprintf>
f010c215:	83 c4 10             	add    $0x10,%esp
}
f010c218:	90                   	nop
f010c219:	c9                   	leave  
f010c21a:	c3                   	ret    

f010c21b <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c21b:	55                   	push   %ebp
f010c21c:	89 e5                	mov    %esp,%ebp
f010c21e:	57                   	push   %edi
f010c21f:	56                   	push   %esi
f010c220:	53                   	push   %ebx
f010c221:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c224:	8b 45 08             	mov    0x8(%ebp),%eax
f010c227:	8b 40 28             	mov    0x28(%eax),%eax
f010c22a:	83 f8 0e             	cmp    $0xe,%eax
f010c22d:	75 29                	jne    f010c258 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c22f:	83 ec 0c             	sub    $0xc,%esp
f010c232:	6a 01                	push   $0x1
f010c234:	e8 b9 14 00 00       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f010c239:	83 c4 10             	add    $0x10,%esp
f010c23c:	85 c0                	test   %eax,%eax
f010c23e:	74 05                	je     f010c245 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c240:	e8 62 a1 ff ff       	call   f01063a7 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c245:	83 ec 0c             	sub    $0xc,%esp
f010c248:	ff 75 08             	pushl  0x8(%ebp)
f010c24b:	e8 51 02 00 00       	call   f010c4a1 <fault_handler>
f010c250:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c253:	e9 bb 00 00 00       	jmp    f010c313 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c258:	8b 45 08             	mov    0x8(%ebp),%eax
f010c25b:	8b 40 28             	mov    0x28(%eax),%eax
f010c25e:	83 f8 30             	cmp    $0x30,%eax
f010c261:	75 42                	jne    f010c2a5 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c263:	8b 45 08             	mov    0x8(%ebp),%eax
f010c266:	8b 78 04             	mov    0x4(%eax),%edi
f010c269:	8b 45 08             	mov    0x8(%ebp),%eax
f010c26c:	8b 30                	mov    (%eax),%esi
f010c26e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c271:	8b 58 10             	mov    0x10(%eax),%ebx
f010c274:	8b 45 08             	mov    0x8(%ebp),%eax
f010c277:	8b 48 18             	mov    0x18(%eax),%ecx
f010c27a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c27d:	8b 50 14             	mov    0x14(%eax),%edx
f010c280:	8b 45 08             	mov    0x8(%ebp),%eax
f010c283:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c286:	83 ec 08             	sub    $0x8,%esp
f010c289:	57                   	push   %edi
f010c28a:	56                   	push   %esi
f010c28b:	53                   	push   %ebx
f010c28c:	51                   	push   %ecx
f010c28d:	52                   	push   %edx
f010c28e:	50                   	push   %eax
f010c28f:	e8 a8 0b 00 00       	call   f010ce3c <syscall>
f010c294:	83 c4 20             	add    $0x20,%esp
f010c297:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c29a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c29d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c2a0:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c2a3:	eb 6e                	jmp    f010c313 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c2a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a8:	8b 40 28             	mov    0x28(%eax),%eax
f010c2ab:	83 f8 08             	cmp    $0x8,%eax
f010c2ae:	75 17                	jne    f010c2c7 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c2b0:	83 ec 04             	sub    $0x4,%esp
f010c2b3:	68 24 2d 13 f0       	push   $0xf0132d24
f010c2b8:	68 e7 00 00 00       	push   $0xe7
f010c2bd:	68 33 2d 13 f0       	push   $0xf0132d33
f010c2c2:	e8 e9 3e ff ff       	call   f01001b0 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c2c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ca:	8b 40 28             	mov    0x28(%eax),%eax
f010c2cd:	83 f8 20             	cmp    $0x20,%eax
f010c2d0:	75 07                	jne    f010c2d9 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c2d2:	e8 93 a0 ff ff       	call   f010636a <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c2d7:	eb 3a                	jmp    f010c313 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c2d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2dc:	8b 40 34             	mov    0x34(%eax),%eax
f010c2df:	66 83 f8 08          	cmp    $0x8,%ax
f010c2e3:	75 17                	jne    f010c2fc <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c2e5:	83 ec 04             	sub    $0x4,%esp
f010c2e8:	68 44 2d 13 f0       	push   $0xf0132d44
f010c2ed:	68 f4 00 00 00       	push   $0xf4
f010c2f2:	68 33 2d 13 f0       	push   $0xf0132d33
f010c2f7:	e8 b4 3e ff ff       	call   f01001b0 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c2fc:	83 ec 04             	sub    $0x4,%esp
f010c2ff:	68 60 2d 13 f0       	push   $0xf0132d60
f010c304:	68 f8 00 00 00       	push   $0xf8
f010c309:	68 33 2d 13 f0       	push   $0xf0132d33
f010c30e:	e8 9d 3e ff ff       	call   f01001b0 <_panic>

			return;
		}
	}
	return;
}
f010c313:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c316:	5b                   	pop    %ebx
f010c317:	5e                   	pop    %esi
f010c318:	5f                   	pop    %edi
f010c319:	5d                   	pop    %ebp
f010c31a:	c3                   	ret    

f010c31b <trap>:

void trap(struct Trapframe *tf)
{
f010c31b:	55                   	push   %ebp
f010c31c:	89 e5                	mov    %esp,%ebp
f010c31e:	57                   	push   %edi
f010c31f:	56                   	push   %esi
f010c320:	53                   	push   %ebx
f010c321:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c324:	e8 45 87 ff ff       	call   f0104a6e <kclock_stop>

	int userTrap = 0;
f010c329:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c330:	8b 45 08             	mov    0x8(%ebp),%eax
f010c333:	8b 40 34             	mov    0x34(%eax),%eax
f010c336:	0f b7 c0             	movzwl %ax,%eax
f010c339:	83 e0 03             	and    $0x3,%eax
f010c33c:	83 f8 03             	cmp    $0x3,%eax
f010c33f:	75 49                	jne    f010c38a <trap+0x6f>
		assert(curenv);
f010c341:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c346:	85 c0                	test   %eax,%eax
f010c348:	75 19                	jne    f010c363 <trap+0x48>
f010c34a:	68 7f 2d 13 f0       	push   $0xf0132d7f
f010c34f:	68 86 2d 13 f0       	push   $0xf0132d86
f010c354:	68 06 01 00 00       	push   $0x106
f010c359:	68 33 2d 13 f0       	push   $0xf0132d33
f010c35e:	e8 4d 3e ff ff       	call   f01001b0 <_panic>
		curenv->env_tf = *tf;
f010c363:	8b 15 34 22 25 f0    	mov    0xf0252234,%edx
f010c369:	8b 45 08             	mov    0x8(%ebp),%eax
f010c36c:	89 c3                	mov    %eax,%ebx
f010c36e:	b8 11 00 00 00       	mov    $0x11,%eax
f010c373:	89 d7                	mov    %edx,%edi
f010c375:	89 de                	mov    %ebx,%esi
f010c377:	89 c1                	mov    %eax,%ecx
f010c379:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c37b:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c380:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c383:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c38a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c38d:	8b 40 28             	mov    0x28(%eax),%eax
f010c390:	83 f8 20             	cmp    $0x20,%eax
f010c393:	75 40                	jne    f010c3d5 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c395:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c399:	0f 84 a6 00 00 00    	je     f010c445 <trap+0x12a>
		{
			assert(curenv);
f010c39f:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c3a4:	85 c0                	test   %eax,%eax
f010c3a6:	75 19                	jne    f010c3c1 <trap+0xa6>
f010c3a8:	68 7f 2d 13 f0       	push   $0xf0132d7f
f010c3ad:	68 86 2d 13 f0       	push   $0xf0132d86
f010c3b2:	68 12 01 00 00       	push   $0x112
f010c3b7:	68 33 2d 13 f0       	push   $0xf0132d33
f010c3bc:	e8 ef 3d ff ff       	call   f01001b0 <_panic>
			curenv->nClocks++ ;
f010c3c1:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c3c6:	8b 90 9c da 01 00    	mov    0x1da9c(%eax),%edx
f010c3cc:	42                   	inc    %edx
f010c3cd:	89 90 9c da 01 00    	mov    %edx,0x1da9c(%eax)
f010c3d3:	eb 70                	jmp    f010c445 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c3d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3d8:	8b 40 28             	mov    0x28(%eax),%eax
f010c3db:	83 f8 0e             	cmp    $0xe,%eax
f010c3de:	75 65                	jne    f010c445 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c3e0:	a0 e8 2a 25 f0       	mov    0xf0252ae8,%al
f010c3e5:	84 c0                	test   %al,%al
f010c3e7:	74 5c                	je     f010c445 <trap+0x12a>
			if (userTrap){
f010c3e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c3ed:	74 2c                	je     f010c41b <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c3ef:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c3f4:	8b 15 34 22 25 f0    	mov    0xf0252234,%edx
f010c3fa:	8b 52 30             	mov    0x30(%edx),%edx
f010c3fd:	89 d1                	mov    %edx,%ecx
f010c3ff:	8a 15 e8 2a 25 f0    	mov    0xf0252ae8,%dl
f010c405:	0f b6 d2             	movzbl %dl,%edx
f010c408:	01 ca                	add    %ecx,%edx
f010c40a:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c40d:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c412:	83 ec 0c             	sub    $0xc,%esp
f010c415:	50                   	push   %eax
f010c416:	e8 d3 d4 ff ff       	call   f01098ee <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c41b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c41e:	8b 40 30             	mov    0x30(%eax),%eax
f010c421:	89 c2                	mov    %eax,%edx
f010c423:	a0 e8 2a 25 f0       	mov    0xf0252ae8,%al
f010c428:	0f b6 c0             	movzbl %al,%eax
f010c42b:	01 d0                	add    %edx,%eax
f010c42d:	89 c2                	mov    %eax,%edx
f010c42f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c432:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c435:	e8 5f 86 ff ff       	call   f0104a99 <kclock_resume>
				env_pop_tf(tf);
f010c43a:	83 ec 0c             	sub    $0xc,%esp
f010c43d:	ff 75 08             	pushl  0x8(%ebp)
f010c440:	e8 fb d5 ff ff       	call   f0109a40 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c445:	83 ec 0c             	sub    $0xc,%esp
f010c448:	ff 75 08             	pushl  0x8(%ebp)
f010c44b:	e8 cb fd ff ff       	call   f010c21b <trap_dispatch>
f010c450:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c453:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c457:	74 3d                	je     f010c496 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c459:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c45e:	85 c0                	test   %eax,%eax
f010c460:	74 0d                	je     f010c46f <trap+0x154>
f010c462:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c467:	8b 40 54             	mov    0x54(%eax),%eax
f010c46a:	83 f8 02             	cmp    $0x2,%eax
f010c46d:	74 19                	je     f010c488 <trap+0x16d>
f010c46f:	68 9c 2d 13 f0       	push   $0xf0132d9c
f010c474:	68 86 2d 13 f0       	push   $0xf0132d86
f010c479:	68 27 01 00 00       	push   $0x127
f010c47e:	68 33 2d 13 f0       	push   $0xf0132d33
f010c483:	e8 28 3d ff ff       	call   f01001b0 <_panic>
		env_run(curenv);
f010c488:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c48d:	83 ec 0c             	sub    $0xc,%esp
f010c490:	50                   	push   %eax
f010c491:	e8 58 d4 ff ff       	call   f01098ee <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c496:	83 ec 0c             	sub    $0xc,%esp
f010c499:	ff 75 08             	pushl  0x8(%ebp)
f010c49c:	e8 9f d5 ff ff       	call   f0109a40 <env_pop_tf>

f010c4a1 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c4a1:	55                   	push   %ebp
f010c4a2:	89 e5                	mov    %esp,%ebp
f010c4a4:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c4a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c4ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4b1:	8b 40 34             	mov    0x34(%eax),%eax
f010c4b4:	0f b7 c0             	movzwl %ax,%eax
f010c4b7:	83 e0 03             	and    $0x3,%eax
f010c4ba:	83 f8 03             	cmp    $0x3,%eax
f010c4bd:	75 07                	jne    f010c4c6 <fault_handler+0x25>
		userTrap = 1;
f010c4bf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c4c6:	0f 20 d0             	mov    %cr2,%eax
f010c4c9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c4cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c4cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c4d2:	a1 60 2a 25 f0       	mov    0xf0252a60,%eax
f010c4d7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c4da:	75 2b                	jne    f010c507 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c4dc:	a0 64 2a 25 f0       	mov    0xf0252a64,%al
f010c4e1:	40                   	inc    %eax
f010c4e2:	a2 64 2a 25 f0       	mov    %al,0xf0252a64
		if (num_repeated_fault == 3)
f010c4e7:	a0 64 2a 25 f0       	mov    0xf0252a64,%al
f010c4ec:	3c 03                	cmp    $0x3,%al
f010c4ee:	75 1e                	jne    f010c50e <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c4f0:	ff 75 ec             	pushl  -0x14(%ebp)
f010c4f3:	68 cc 2d 13 f0       	push   $0xf0132dcc
f010c4f8:	68 4a 01 00 00       	push   $0x14a
f010c4fd:	68 33 2d 13 f0       	push   $0xf0132d33
f010c502:	e8 a9 3c ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c507:	c6 05 64 2a 25 f0 00 	movb   $0x0,0xf0252a64
	}
	last_fault_va = fault_va ;
f010c50e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c511:	a3 60 2a 25 f0       	mov    %eax,0xf0252a60
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c516:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c51a:	75 29                	jne    f010c545 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c51c:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c523:	77 40                	ja     f010c565 <fault_handler+0xc4>
f010c525:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c52c:	76 37                	jbe    f010c565 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c52e:	83 ec 04             	sub    $0x4,%esp
f010c531:	68 18 2e 13 f0       	push   $0xf0132e18
f010c536:	68 56 01 00 00       	push   $0x156
f010c53b:	68 33 2d 13 f0       	push   $0xf0132d33
f010c540:	e8 6b 3c ff ff       	call   f01001b0 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c545:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c54c:	76 17                	jbe    f010c565 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c54e:	83 ec 04             	sub    $0x4,%esp
f010c551:	68 3c 2e 13 f0       	push   $0xf0132e3c
f010c556:	68 5c 01 00 00       	push   $0x15c
f010c55b:	68 33 2d 13 f0       	push   $0xf0132d33
f010c560:	e8 4b 3c ff ff       	call   f01001b0 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c565:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c56a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c56d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c570:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c576:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c579:	c1 ea 16             	shr    $0x16,%edx
f010c57c:	c1 e2 02             	shl    $0x2,%edx
f010c57f:	01 d0                	add    %edx,%eax
f010c581:	8b 00                	mov    (%eax),%eax
f010c583:	83 e0 01             	and    $0x1,%eax
f010c586:	85 c0                	test   %eax,%eax
f010c588:	75 28                	jne    f010c5b2 <fault_handler+0x111>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c58a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c58d:	8b 80 78 da 01 00    	mov    0x1da78(%eax),%eax
f010c593:	8d 50 01             	lea    0x1(%eax),%edx
f010c596:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c599:	89 90 78 da 01 00    	mov    %edx,0x1da78(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c59f:	83 ec 08             	sub    $0x8,%esp
f010c5a2:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5a5:	ff 75 e8             	pushl  -0x18(%ebp)
f010c5a8:	e8 2a 12 00 00       	call   f010d7d7 <table_fault_handler>
f010c5ad:	83 c4 10             	add    $0x10,%esp
f010c5b0:	eb 7e                	jmp    f010c630 <fault_handler+0x18f>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c5b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5b5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c5bb:	83 ec 08             	sub    $0x8,%esp
f010c5be:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5c1:	50                   	push   %eax
f010c5c2:	e8 be ba ff ff       	call   f0108085 <pt_get_page_permissions>
f010c5c7:	83 c4 10             	add    $0x10,%esp
f010c5ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c5cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c5d0:	83 e0 01             	and    $0x1,%eax
f010c5d3:	85 c0                	test   %eax,%eax
f010c5d5:	74 17                	je     f010c5ee <fault_handler+0x14d>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c5d7:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5da:	68 60 2e 13 f0       	push   $0xf0132e60
f010c5df:	68 7b 01 00 00       	push   $0x17b
f010c5e4:	68 33 2d 13 f0       	push   $0xf0132d33
f010c5e9:	e8 c2 3b ff ff       	call   f01001b0 <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c5ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5f1:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f010c5f7:	8d 50 01             	lea    0x1(%eax),%edx
f010c5fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5fd:	89 90 74 da 01 00    	mov    %edx,0x1da74(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c603:	e8 ad 11 00 00       	call   f010d7b5 <isBufferingEnabled>
f010c608:	84 c0                	test   %al,%al
f010c60a:	74 13                	je     f010c61f <fault_handler+0x17e>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c60c:	83 ec 08             	sub    $0x8,%esp
f010c60f:	ff 75 ec             	pushl  -0x14(%ebp)
f010c612:	ff 75 e8             	pushl  -0x18(%ebp)
f010c615:	e8 60 12 00 00       	call   f010d87a <__page_fault_handler_with_buffering>
f010c61a:	83 c4 10             	add    $0x10,%esp
f010c61d:	eb 11                	jmp    f010c630 <fault_handler+0x18f>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c61f:	83 ec 08             	sub    $0x8,%esp
f010c622:	ff 75 ec             	pushl  -0x14(%ebp)
f010c625:	ff 75 e8             	pushl  -0x18(%ebp)
f010c628:	e8 cf 11 00 00       	call   f010d7fc <page_fault_handler>
f010c62d:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c630:	0f 20 d8             	mov    %cr3,%eax
f010c633:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c636:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c639:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c63c:	90                   	nop
f010c63d:	c9                   	leave  
f010c63e:	c3                   	ret    
f010c63f:	90                   	nop

f010c640 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c640:	6a 0e                	push   $0xe
f010c642:	e9 ed 00 00 00       	jmp    f010c734 <_alltraps>
f010c647:	90                   	nop

f010c648 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c648:	6a 00                	push   $0x0
f010c64a:	6a 30                	push   $0x30
f010c64c:	e9 e3 00 00 00       	jmp    f010c734 <_alltraps>
f010c651:	90                   	nop

f010c652 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c652:	6a 08                	push   $0x8
f010c654:	e9 db 00 00 00       	jmp    f010c734 <_alltraps>
f010c659:	90                   	nop

f010c65a <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c65a:	6a 00                	push   $0x0
f010c65c:	6a 00                	push   $0x0
f010c65e:	e9 d1 00 00 00       	jmp    f010c734 <_alltraps>
f010c663:	90                   	nop

f010c664 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c664:	6a 00                	push   $0x0
f010c666:	6a 01                	push   $0x1
f010c668:	e9 c7 00 00 00       	jmp    f010c734 <_alltraps>
f010c66d:	90                   	nop

f010c66e <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c66e:	6a 00                	push   $0x0
f010c670:	6a 02                	push   $0x2
f010c672:	e9 bd 00 00 00       	jmp    f010c734 <_alltraps>
f010c677:	90                   	nop

f010c678 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c678:	6a 00                	push   $0x0
f010c67a:	6a 03                	push   $0x3
f010c67c:	e9 b3 00 00 00       	jmp    f010c734 <_alltraps>
f010c681:	90                   	nop

f010c682 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c682:	6a 00                	push   $0x0
f010c684:	6a 04                	push   $0x4
f010c686:	e9 a9 00 00 00       	jmp    f010c734 <_alltraps>
f010c68b:	90                   	nop

f010c68c <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c68c:	6a 00                	push   $0x0
f010c68e:	6a 05                	push   $0x5
f010c690:	e9 9f 00 00 00       	jmp    f010c734 <_alltraps>
f010c695:	90                   	nop

f010c696 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c696:	6a 00                	push   $0x0
f010c698:	6a 06                	push   $0x6
f010c69a:	e9 95 00 00 00       	jmp    f010c734 <_alltraps>
f010c69f:	90                   	nop

f010c6a0 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c6a0:	6a 00                	push   $0x0
f010c6a2:	6a 07                	push   $0x7
f010c6a4:	e9 8b 00 00 00       	jmp    f010c734 <_alltraps>
f010c6a9:	90                   	nop

f010c6aa <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c6aa:	6a 0a                	push   $0xa
f010c6ac:	e9 83 00 00 00       	jmp    f010c734 <_alltraps>
f010c6b1:	90                   	nop

f010c6b2 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c6b2:	6a 0b                	push   $0xb
f010c6b4:	eb 7e                	jmp    f010c734 <_alltraps>

f010c6b6 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c6b6:	6a 0c                	push   $0xc
f010c6b8:	eb 7a                	jmp    f010c734 <_alltraps>

f010c6ba <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c6ba:	6a 0d                	push   $0xd
f010c6bc:	eb 76                	jmp    f010c734 <_alltraps>

f010c6be <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c6be:	6a 00                	push   $0x0
f010c6c0:	6a 10                	push   $0x10
f010c6c2:	eb 70                	jmp    f010c734 <_alltraps>

f010c6c4 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c6c4:	6a 11                	push   $0x11
f010c6c6:	eb 6c                	jmp    f010c734 <_alltraps>

f010c6c8 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c6c8:	6a 00                	push   $0x0
f010c6ca:	6a 12                	push   $0x12
f010c6cc:	eb 66                	jmp    f010c734 <_alltraps>

f010c6ce <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c6ce:	6a 00                	push   $0x0
f010c6d0:	6a 13                	push   $0x13
f010c6d2:	eb 60                	jmp    f010c734 <_alltraps>

f010c6d4 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c6d4:	6a 00                	push   $0x0
f010c6d6:	6a 20                	push   $0x20
f010c6d8:	eb 5a                	jmp    f010c734 <_alltraps>

f010c6da <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c6da:	6a 00                	push   $0x0
f010c6dc:	6a 21                	push   $0x21
f010c6de:	eb 54                	jmp    f010c734 <_alltraps>

f010c6e0 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c6e0:	6a 00                	push   $0x0
f010c6e2:	6a 22                	push   $0x22
f010c6e4:	eb 4e                	jmp    f010c734 <_alltraps>

f010c6e6 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c6e6:	6a 00                	push   $0x0
f010c6e8:	6a 23                	push   $0x23
f010c6ea:	eb 48                	jmp    f010c734 <_alltraps>

f010c6ec <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c6ec:	6a 00                	push   $0x0
f010c6ee:	6a 24                	push   $0x24
f010c6f0:	eb 42                	jmp    f010c734 <_alltraps>

f010c6f2 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c6f2:	6a 00                	push   $0x0
f010c6f4:	6a 25                	push   $0x25
f010c6f6:	eb 3c                	jmp    f010c734 <_alltraps>

f010c6f8 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c6f8:	6a 00                	push   $0x0
f010c6fa:	6a 26                	push   $0x26
f010c6fc:	eb 36                	jmp    f010c734 <_alltraps>

f010c6fe <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c6fe:	6a 00                	push   $0x0
f010c700:	6a 27                	push   $0x27
f010c702:	eb 30                	jmp    f010c734 <_alltraps>

f010c704 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c704:	6a 00                	push   $0x0
f010c706:	6a 28                	push   $0x28
f010c708:	eb 2a                	jmp    f010c734 <_alltraps>

f010c70a <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c70a:	6a 00                	push   $0x0
f010c70c:	6a 29                	push   $0x29
f010c70e:	eb 24                	jmp    f010c734 <_alltraps>

f010c710 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c710:	6a 00                	push   $0x0
f010c712:	6a 2a                	push   $0x2a
f010c714:	eb 1e                	jmp    f010c734 <_alltraps>

f010c716 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c716:	6a 00                	push   $0x0
f010c718:	6a 2b                	push   $0x2b
f010c71a:	eb 18                	jmp    f010c734 <_alltraps>

f010c71c <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c71c:	6a 00                	push   $0x0
f010c71e:	6a 2c                	push   $0x2c
f010c720:	eb 12                	jmp    f010c734 <_alltraps>

f010c722 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c722:	6a 00                	push   $0x0
f010c724:	6a 2d                	push   $0x2d
f010c726:	eb 0c                	jmp    f010c734 <_alltraps>

f010c728 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c728:	6a 00                	push   $0x0
f010c72a:	6a 2e                	push   $0x2e
f010c72c:	eb 06                	jmp    f010c734 <_alltraps>

f010c72e <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c72e:	6a 00                	push   $0x0
f010c730:	6a 2f                	push   $0x2f
f010c732:	eb 00                	jmp    f010c734 <_alltraps>

f010c734 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c734:	1e                   	push   %ds
push %es
f010c735:	06                   	push   %es
pushal
f010c736:	60                   	pusha  

mov $(GD_KD), %ax
f010c737:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c73b:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c73d:	8e c0                	mov    %eax,%es

push %esp
f010c73f:	54                   	push   %esp

call trap
f010c740:	e8 d6 fb ff ff       	call   f010c31b <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c745:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c746:	61                   	popa   
pop %es
f010c747:	07                   	pop    %es
pop %ds
f010c748:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c749:	83 c4 08             	add    $0x8,%esp

iret
f010c74c:	cf                   	iret   

f010c74d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c74d:	55                   	push   %ebp
f010c74e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c750:	8b 45 08             	mov    0x8(%ebp),%eax
f010c753:	8b 15 d0 ae 2b f0    	mov    0xf02baed0,%edx
f010c759:	29 d0                	sub    %edx,%eax
f010c75b:	c1 f8 02             	sar    $0x2,%eax
f010c75e:	89 c2                	mov    %eax,%edx
f010c760:	89 d0                	mov    %edx,%eax
f010c762:	c1 e0 03             	shl    $0x3,%eax
f010c765:	01 d0                	add    %edx,%eax
f010c767:	c1 e0 03             	shl    $0x3,%eax
f010c76a:	01 d0                	add    %edx,%eax
f010c76c:	c1 e0 03             	shl    $0x3,%eax
f010c76f:	01 d0                	add    %edx,%eax
f010c771:	c1 e0 03             	shl    $0x3,%eax
f010c774:	01 d0                	add    %edx,%eax
f010c776:	89 c1                	mov    %eax,%ecx
f010c778:	c1 e1 0f             	shl    $0xf,%ecx
f010c77b:	01 c8                	add    %ecx,%eax
f010c77d:	c1 e0 03             	shl    $0x3,%eax
f010c780:	01 d0                	add    %edx,%eax
f010c782:	f7 d8                	neg    %eax
}
f010c784:	5d                   	pop    %ebp
f010c785:	c3                   	ret    

f010c786 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c786:	55                   	push   %ebp
f010c787:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c789:	ff 75 08             	pushl  0x8(%ebp)
f010c78c:	e8 bc ff ff ff       	call   f010c74d <to_frame_number>
f010c791:	83 c4 04             	add    $0x4,%esp
f010c794:	c1 e0 0c             	shl    $0xc,%eax
}
f010c797:	c9                   	leave  
f010c798:	c3                   	ret    

f010c799 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c799:	55                   	push   %ebp
f010c79a:	89 e5                	mov    %esp,%ebp
f010c79c:	83 ec 18             	sub    $0x18,%esp
f010c79f:	8b 45 10             	mov    0x10(%ebp),%eax
f010c7a2:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c7a5:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c7a9:	74 23                	je     f010c7ce <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c7ab:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c7b0:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c7b3:	8b 15 34 22 25 f0    	mov    0xf0252234,%edx
f010c7b9:	83 c2 5c             	add    $0x5c,%edx
f010c7bc:	83 ec 04             	sub    $0x4,%esp
f010c7bf:	50                   	push   %eax
f010c7c0:	52                   	push   %edx
f010c7c1:	68 50 30 13 f0       	push   $0xf0133050
f010c7c6:	e8 66 46 ff ff       	call   f0100e31 <cprintf>
f010c7cb:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c7ce:	83 ec 04             	sub    $0x4,%esp
f010c7d1:	ff 75 08             	pushl  0x8(%ebp)
f010c7d4:	ff 75 0c             	pushl  0xc(%ebp)
f010c7d7:	68 59 30 13 f0       	push   $0xf0133059
f010c7dc:	e8 50 46 ff ff       	call   f0100e31 <cprintf>
f010c7e1:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c7e4:	90                   	nop
f010c7e5:	c9                   	leave  
f010c7e6:	c3                   	ret    

f010c7e7 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c7e7:	55                   	push   %ebp
f010c7e8:	89 e5                	mov    %esp,%ebp
f010c7ea:	83 ec 18             	sub    $0x18,%esp
f010c7ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7f0:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c7f3:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c7f7:	83 ec 08             	sub    $0x8,%esp
f010c7fa:	50                   	push   %eax
f010c7fb:	68 5e 30 13 f0       	push   $0xf013305e
f010c800:	e8 2c 46 ff ff       	call   f0100e31 <cprintf>
f010c805:	83 c4 10             	add    $0x10,%esp
}
f010c808:	90                   	nop
f010c809:	c9                   	leave  
f010c80a:	c3                   	ret    

f010c80b <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c80b:	55                   	push   %ebp
f010c80c:	89 e5                	mov    %esp,%ebp
f010c80e:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c811:	e8 51 44 ff ff       	call   f0100c67 <cons_getc2>
f010c816:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c819:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c81c:	c9                   	leave  
f010c81d:	c3                   	ret    

f010c81e <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c81e:	55                   	push   %ebp
f010c81f:	89 e5                	mov    %esp,%ebp
f010c821:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c824:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c829:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c82c:	83 ec 0c             	sub    $0xc,%esp
f010c82f:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c832:	50                   	push   %eax
f010c833:	e8 8f aa ff ff       	call   f01072c7 <allocate_frame>
f010c838:	83 c4 10             	add    $0x10,%esp
f010c83b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c83e:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c842:	75 08                	jne    f010c84c <__sys_allocate_page+0x2e>
		return r ;
f010c844:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c847:	e9 d3 00 00 00       	jmp    f010c91f <__sys_allocate_page+0x101>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c84c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c84f:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c854:	77 0c                	ja     f010c862 <__sys_allocate_page+0x44>
f010c856:	8b 45 08             	mov    0x8(%ebp),%eax
f010c859:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c85e:	85 c0                	test   %eax,%eax
f010c860:	74 0a                	je     f010c86c <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c862:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c867:	e9 b3 00 00 00       	jmp    f010c91f <__sys_allocate_page+0x101>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c86c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c86f:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c874:	83 f8 04             	cmp    $0x4,%eax
f010c877:	74 0a                	je     f010c883 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c879:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c87e:	e9 9c 00 00 00       	jmp    f010c91f <__sys_allocate_page+0x101>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c883:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c886:	83 ec 0c             	sub    $0xc,%esp
f010c889:	50                   	push   %eax
f010c88a:	e8 f7 fe ff ff       	call   f010c786 <to_physical_address>
f010c88f:	83 c4 10             	add    $0x10,%esp
f010c892:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c895:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c898:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c89b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c89e:	c1 e8 0c             	shr    $0xc,%eax
f010c8a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c8a4:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f010c8a9:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c8ac:	72 17                	jb     f010c8c5 <__sys_allocate_page+0xa7>
f010c8ae:	ff 75 e8             	pushl  -0x18(%ebp)
f010c8b1:	68 64 30 13 f0       	push   $0xf0133064
f010c8b6:	68 8d 00 00 00       	push   $0x8d
f010c8bb:	68 93 30 13 f0       	push   $0xf0133093
f010c8c0:	e8 eb 38 ff ff       	call   f01001b0 <_panic>
f010c8c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c8c8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c8cd:	83 ec 04             	sub    $0x4,%esp
f010c8d0:	68 00 10 00 00       	push   $0x1000
f010c8d5:	6a 00                	push   $0x0
f010c8d7:	50                   	push   %eax
f010c8d8:	e8 c1 26 02 00       	call   f012ef9e <memset>
f010c8dd:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c8e0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c8e3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c8e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c8e9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c8ef:	ff 75 0c             	pushl  0xc(%ebp)
f010c8f2:	51                   	push   %ecx
f010c8f3:	52                   	push   %edx
f010c8f4:	50                   	push   %eax
f010c8f5:	e8 68 ad ff ff       	call   f0107662 <map_frame>
f010c8fa:	83 c4 10             	add    $0x10,%esp
f010c8fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c900:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c904:	75 14                	jne    f010c91a <__sys_allocate_page+0xfc>
	{
		decrement_references(ptr_frame_info);
f010c906:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c909:	83 ec 0c             	sub    $0xc,%esp
f010c90c:	50                   	push   %eax
f010c90d:	e8 47 ab ff ff       	call   f0107459 <decrement_references>
f010c912:	83 c4 10             	add    $0x10,%esp
		return r;
f010c915:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c918:	eb 05                	jmp    f010c91f <__sys_allocate_page+0x101>
	}
	return 0 ;
f010c91a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c91f:	c9                   	leave  
f010c920:	c3                   	ret    

f010c921 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c921:	55                   	push   %ebp
f010c922:	89 e5                	mov    %esp,%ebp
f010c924:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c927:	83 ec 04             	sub    $0x4,%esp
f010c92a:	68 a7 30 13 f0       	push   $0xf01330a7
f010c92f:	68 b4 00 00 00       	push   $0xb4
f010c934:	68 93 30 13 f0       	push   $0xf0133093
f010c939:	e8 72 38 ff ff       	call   f01001b0 <_panic>

f010c93e <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c93e:	55                   	push   %ebp
f010c93f:	89 e5                	mov    %esp,%ebp
f010c941:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c944:	83 ec 04             	sub    $0x4,%esp
f010c947:	68 c8 30 13 f0       	push   $0xf01330c8
f010c94c:	68 c5 00 00 00       	push   $0xc5
f010c951:	68 93 30 13 f0       	push   $0xf0133093
f010c956:	e8 55 38 ff ff       	call   f01001b0 <_panic>

f010c95b <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c95b:	55                   	push   %ebp
f010c95c:	89 e5                	mov    %esp,%ebp
f010c95e:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c961:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010c966:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c96c:	83 ec 04             	sub    $0x4,%esp
f010c96f:	ff 75 0c             	pushl  0xc(%ebp)
f010c972:	ff 75 08             	pushl  0x8(%ebp)
f010c975:	50                   	push   %eax
f010c976:	e8 36 c2 ff ff       	call   f0108bb1 <calculate_required_frames>
f010c97b:	83 c4 10             	add    $0x10,%esp
}
f010c97e:	c9                   	leave  
f010c97f:	c3                   	ret    

f010c980 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c980:	55                   	push   %ebp
f010c981:	89 e5                	mov    %esp,%ebp
f010c983:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c986:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c989:	83 ec 0c             	sub    $0xc,%esp
f010c98c:	50                   	push   %eax
f010c98d:	e8 40 af ff ff       	call   f01078d2 <calculate_available_frames>
f010c992:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c995:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c998:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c99b:	01 d0                	add    %edx,%eax
}
f010c99d:	c9                   	leave  
f010c99e:	c3                   	ret    

f010c99f <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c99f:	55                   	push   %ebp
f010c9a0:	89 e5                	mov    %esp,%ebp
f010c9a2:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9a5:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9a8:	83 ec 0c             	sub    $0xc,%esp
f010c9ab:	50                   	push   %eax
f010c9ac:	e8 21 af ff ff       	call   f01078d2 <calculate_available_frames>
f010c9b1:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c9b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c9b7:	c9                   	leave  
f010c9b8:	c3                   	ret    

f010c9b9 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c9b9:	55                   	push   %ebp
f010c9ba:	89 e5                	mov    %esp,%ebp
f010c9bc:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9c2:	83 ec 0c             	sub    $0xc,%esp
f010c9c5:	50                   	push   %eax
f010c9c6:	e8 07 af ff ff       	call   f01078d2 <calculate_available_frames>
f010c9cb:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c9ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c9d1:	c9                   	leave  
f010c9d2:	c3                   	ret    

f010c9d3 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c9d3:	55                   	push   %ebp
f010c9d4:	89 e5                	mov    %esp,%ebp
f010c9d6:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c9d9:	83 ec 0c             	sub    $0xc,%esp
f010c9dc:	ff 75 08             	pushl  0x8(%ebp)
f010c9df:	e8 f0 12 02 00       	call   f012dcd4 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c9e4:	83 c4 10             	add    $0x10,%esp
}
f010c9e7:	c9                   	leave  
f010c9e8:	c3                   	ret    

f010c9e9 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c9e9:	55                   	push   %ebp
f010c9ea:	89 e5                	mov    %esp,%ebp
f010c9ec:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c9ef:	e8 38 12 02 00       	call   f012dc2c <scarce_memory>
}
f010c9f4:	90                   	nop
f010c9f5:	c9                   	leave  
f010c9f6:	c3                   	ret    

f010c9f7 <sys_clearFFL>:

void sys_clearFFL()
{
f010c9f7:	55                   	push   %ebp
f010c9f8:	89 e5                	mov    %esp,%ebp
f010c9fa:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c9fd:	a1 a4 ae 2b f0       	mov    0xf02baea4,%eax
f010ca02:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010ca05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca0c:	eb 12                	jmp    f010ca20 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010ca0e:	83 ec 0c             	sub    $0xc,%esp
f010ca11:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca14:	50                   	push   %eax
f010ca15:	e8 ad a8 ff ff       	call   f01072c7 <allocate_frame>
f010ca1a:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca1d:	ff 45 f4             	incl   -0xc(%ebp)
f010ca20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca23:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ca26:	7c e6                	jl     f010ca0e <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ca28:	90                   	nop
f010ca29:	c9                   	leave  
f010ca2a:	c3                   	ret    

f010ca2b <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010ca2b:	55                   	push   %ebp
f010ca2c:	89 e5                	mov    %esp,%ebp
f010ca2e:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010ca31:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010ca36:	83 ec 0c             	sub    $0xc,%esp
f010ca39:	50                   	push   %eax
f010ca3a:	e8 10 7b ff ff       	call   f010454f <pf_calculate_allocated_pages>
f010ca3f:	83 c4 10             	add    $0x10,%esp
}
f010ca42:	c9                   	leave  
f010ca43:	c3                   	ret    

f010ca44 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010ca44:	55                   	push   %ebp
f010ca45:	89 e5                	mov    %esp,%ebp
f010ca47:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010ca4a:	e8 66 0d 00 00       	call   f010d7b5 <isBufferingEnabled>
f010ca4f:	84 c0                	test   %al,%al
f010ca51:	74 19                	je     f010ca6c <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010ca53:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010ca58:	83 ec 04             	sub    $0x4,%esp
f010ca5b:	ff 75 0c             	pushl  0xc(%ebp)
f010ca5e:	ff 75 08             	pushl  0x8(%ebp)
f010ca61:	50                   	push   %eax
f010ca62:	e8 80 c1 ff ff       	call   f0108be7 <__free_user_mem_with_buffering>
f010ca67:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010ca6a:	eb 18                	jmp    f010ca84 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010ca6c:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010ca71:	83 ec 04             	sub    $0x4,%esp
f010ca74:	ff 75 0c             	pushl  0xc(%ebp)
f010ca77:	ff 75 08             	pushl  0x8(%ebp)
f010ca7a:	50                   	push   %eax
f010ca7b:	e8 59 c1 ff ff       	call   f0108bd9 <free_user_mem>
f010ca80:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010ca83:	90                   	nop
}
f010ca84:	c9                   	leave  
f010ca85:	c3                   	ret    

f010ca86 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010ca86:	55                   	push   %ebp
f010ca87:	89 e5                	mov    %esp,%ebp
f010ca89:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010ca8c:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010ca91:	83 ec 04             	sub    $0x4,%esp
f010ca94:	ff 75 0c             	pushl  0xc(%ebp)
f010ca97:	ff 75 08             	pushl  0x8(%ebp)
f010ca9a:	50                   	push   %eax
f010ca9b:	e8 2b c1 ff ff       	call   f0108bcb <allocate_user_mem>
f010caa0:	83 c4 10             	add    $0x10,%esp
	return;
f010caa3:	90                   	nop
}
f010caa4:	c9                   	leave  
f010caa5:	c3                   	ret    

f010caa6 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010caa6:	55                   	push   %ebp
f010caa7:	89 e5                	mov    %esp,%ebp
f010caa9:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010caac:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cab1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010cab7:	ff 75 10             	pushl  0x10(%ebp)
f010caba:	ff 75 0c             	pushl  0xc(%ebp)
f010cabd:	ff 75 08             	pushl  0x8(%ebp)
f010cac0:	50                   	push   %eax
f010cac1:	e8 b7 c0 ff ff       	call   f0108b7d <allocate_chunk>
f010cac6:	83 c4 10             	add    $0x10,%esp
	return;
f010cac9:	90                   	nop
}
f010caca:	c9                   	leave  
f010cacb:	c3                   	ret    

f010cacc <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cacc:	55                   	push   %ebp
f010cacd:	89 e5                	mov    %esp,%ebp
f010cacf:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cad2:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cad7:	ff 75 10             	pushl  0x10(%ebp)
f010cada:	ff 75 0c             	pushl  0xc(%ebp)
f010cadd:	ff 75 08             	pushl  0x8(%ebp)
f010cae0:	50                   	push   %eax
f010cae1:	e8 1e c1 ff ff       	call   f0108c04 <move_user_mem>
f010cae6:	83 c4 10             	add    $0x10,%esp
	return;
f010cae9:	90                   	nop
}
f010caea:	c9                   	leave  
f010caeb:	c3                   	ret    

f010caec <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010caec:	55                   	push   %ebp
f010caed:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010caef:	a1 ac ae 2b f0       	mov    0xf02baeac,%eax
}
f010caf4:	5d                   	pop    %ebp
f010caf5:	c3                   	ret    

f010caf6 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010caf6:	55                   	push   %ebp
f010caf7:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010caf9:	8b 45 08             	mov    0x8(%ebp),%eax
f010cafc:	a3 ac ae 2b f0       	mov    %eax,0xf02baeac
}
f010cb01:	90                   	nop
f010cb02:	5d                   	pop    %ebp
f010cb03:	c3                   	ret    

f010cb04 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cb04:	55                   	push   %ebp
f010cb05:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cb07:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cb0c:	8b 15 34 22 25 f0    	mov    0xf0252234,%edx
f010cb12:	8b 52 38             	mov    0x38(%edx),%edx
f010cb15:	80 e6 fd             	and    $0xfd,%dh
f010cb18:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb1b:	90                   	nop
f010cb1c:	5d                   	pop    %ebp
f010cb1d:	c3                   	ret    

f010cb1e <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cb1e:	55                   	push   %ebp
f010cb1f:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cb21:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cb26:	8b 15 34 22 25 f0    	mov    0xf0252234,%edx
f010cb2c:	8b 52 38             	mov    0x38(%edx),%edx
f010cb2f:	80 ce 02             	or     $0x2,%dh
f010cb32:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb35:	90                   	nop
f010cb36:	5d                   	pop    %ebp
f010cb37:	c3                   	ret    

f010cb38 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cb38:	55                   	push   %ebp
f010cb39:	89 e5                	mov    %esp,%ebp
f010cb3b:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cb3e:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cb43:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cb46:	83 ec 04             	sub    $0x4,%esp
f010cb49:	ff 75 0c             	pushl  0xc(%ebp)
f010cb4c:	ff 75 08             	pushl  0x8(%ebp)
f010cb4f:	50                   	push   %eax
f010cb50:	e8 f8 0f 00 00       	call   f010db4d <createSemaphore>
f010cb55:	83 c4 10             	add    $0x10,%esp
}
f010cb58:	c9                   	leave  
f010cb59:	c3                   	ret    

f010cb5a <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cb5a:	55                   	push   %ebp
f010cb5b:	89 e5                	mov    %esp,%ebp
f010cb5d:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cb60:	83 ec 08             	sub    $0x8,%esp
f010cb63:	ff 75 0c             	pushl  0xc(%ebp)
f010cb66:	ff 75 08             	pushl  0x8(%ebp)
f010cb69:	e8 fc 0f 00 00       	call   f010db6a <waitSemaphore>
f010cb6e:	83 c4 10             	add    $0x10,%esp
}
f010cb71:	90                   	nop
f010cb72:	c9                   	leave  
f010cb73:	c3                   	ret    

f010cb74 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cb74:	55                   	push   %ebp
f010cb75:	89 e5                	mov    %esp,%ebp
f010cb77:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cb7a:	83 ec 08             	sub    $0x8,%esp
f010cb7d:	ff 75 0c             	pushl  0xc(%ebp)
f010cb80:	ff 75 08             	pushl  0x8(%ebp)
f010cb83:	e8 ff 0f 00 00       	call   f010db87 <signalSemaphore>
f010cb88:	83 c4 10             	add    $0x10,%esp
}
f010cb8b:	90                   	nop
f010cb8c:	c9                   	leave  
f010cb8d:	c3                   	ret    

f010cb8e <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cb8e:	55                   	push   %ebp
f010cb8f:	89 e5                	mov    %esp,%ebp
f010cb91:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cb94:	83 ec 08             	sub    $0x8,%esp
f010cb97:	ff 75 0c             	pushl  0xc(%ebp)
f010cb9a:	ff 75 08             	pushl  0x8(%ebp)
f010cb9d:	e8 51 0e 00 00       	call   f010d9f3 <get_semaphore_object_ID>
f010cba2:	83 c4 10             	add    $0x10,%esp
f010cba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cba8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cbac:	78 06                	js     f010cbb4 <sys_getSemaphoreValue+0x26>
f010cbae:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010cbb2:	7e 19                	jle    f010cbcd <sys_getSemaphoreValue+0x3f>
f010cbb4:	68 e8 30 13 f0       	push   $0xf01330e8
f010cbb9:	68 0d 31 13 f0       	push   $0xf013310d
f010cbbe:	68 4d 01 00 00       	push   $0x14d
f010cbc3:	68 93 30 13 f0       	push   $0xf0133093
f010cbc8:	e8 e3 35 ff ff       	call   f01001b0 <_panic>

	return semaphores[semID].value ;
f010cbcd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cbd0:	89 d0                	mov    %edx,%eax
f010cbd2:	c1 e0 02             	shl    $0x2,%eax
f010cbd5:	01 d0                	add    %edx,%eax
f010cbd7:	01 c0                	add    %eax,%eax
f010cbd9:	01 d0                	add    %edx,%eax
f010cbdb:	01 c0                	add    %eax,%eax
f010cbdd:	01 d0                	add    %edx,%eax
f010cbdf:	c1 e0 02             	shl    $0x2,%eax
f010cbe2:	05 f4 8a 2b f0       	add    $0xf02b8af4,%eax
f010cbe7:	8b 00                	mov    (%eax),%eax
}
f010cbe9:	c9                   	leave  
f010cbea:	c3                   	ret    

f010cbeb <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cbeb:	55                   	push   %ebp
f010cbec:	89 e5                	mov    %esp,%ebp
f010cbee:	83 ec 18             	sub    $0x18,%esp
f010cbf1:	8b 45 10             	mov    0x10(%ebp),%eax
f010cbf4:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010cbf7:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010cbfb:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cc00:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc03:	83 ec 0c             	sub    $0xc,%esp
f010cc06:	ff 75 14             	pushl  0x14(%ebp)
f010cc09:	52                   	push   %edx
f010cc0a:	ff 75 0c             	pushl  0xc(%ebp)
f010cc0d:	ff 75 08             	pushl  0x8(%ebp)
f010cc10:	50                   	push   %eax
f010cc11:	e8 4d b2 ff ff       	call   f0107e63 <createSharedObject>
f010cc16:	83 c4 20             	add    $0x20,%esp
}
f010cc19:	c9                   	leave  
f010cc1a:	c3                   	ret    

f010cc1b <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010cc1b:	55                   	push   %ebp
f010cc1c:	89 e5                	mov    %esp,%ebp
f010cc1e:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010cc21:	83 ec 08             	sub    $0x8,%esp
f010cc24:	ff 75 0c             	pushl  0xc(%ebp)
f010cc27:	ff 75 08             	pushl  0x8(%ebp)
f010cc2a:	e8 57 b2 ff ff       	call   f0107e86 <getSizeOfSharedObject>
f010cc2f:	83 c4 10             	add    $0x10,%esp
}
f010cc32:	c9                   	leave  
f010cc33:	c3                   	ret    

f010cc34 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cc34:	55                   	push   %ebp
f010cc35:	89 e5                	mov    %esp,%ebp
f010cc37:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cc3a:	83 ec 04             	sub    $0x4,%esp
f010cc3d:	ff 75 10             	pushl  0x10(%ebp)
f010cc40:	ff 75 0c             	pushl  0xc(%ebp)
f010cc43:	ff 75 08             	pushl  0x8(%ebp)
f010cc46:	e8 58 b2 ff ff       	call   f0107ea3 <getSharedObject>
f010cc4b:	83 c4 10             	add    $0x10,%esp
}
f010cc4e:	c9                   	leave  
f010cc4f:	c3                   	ret    

f010cc50 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cc50:	55                   	push   %ebp
f010cc51:	89 e5                	mov    %esp,%ebp
f010cc53:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010cc56:	83 ec 08             	sub    $0x8,%esp
f010cc59:	ff 75 0c             	pushl  0xc(%ebp)
f010cc5c:	ff 75 08             	pushl  0x8(%ebp)
f010cc5f:	e8 5c b2 ff ff       	call   f0107ec0 <freeSharedObject>
f010cc64:	83 c4 10             	add    $0x10,%esp
}
f010cc67:	c9                   	leave  
f010cc68:	c3                   	ret    

f010cc69 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010cc69:	55                   	push   %ebp
f010cc6a:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010cc6c:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010cc71:	5d                   	pop    %ebp
f010cc72:	c3                   	ret    

f010cc73 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010cc73:	55                   	push   %ebp
f010cc74:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010cc76:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cc7b:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cc7e:	5d                   	pop    %ebp
f010cc7f:	c3                   	ret    

f010cc80 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cc80:	55                   	push   %ebp
f010cc81:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cc83:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cc88:	89 c2                	mov    %eax,%edx
f010cc8a:	a1 30 22 25 f0       	mov    0xf0252230,%eax
f010cc8f:	29 c2                	sub    %eax,%edx
f010cc91:	89 d0                	mov    %edx,%eax
f010cc93:	c1 f8 05             	sar    $0x5,%eax
f010cc96:	89 c2                	mov    %eax,%edx
f010cc98:	89 d0                	mov    %edx,%eax
f010cc9a:	c1 e0 03             	shl    $0x3,%eax
f010cc9d:	01 d0                	add    %edx,%eax
f010cc9f:	01 c0                	add    %eax,%eax
f010cca1:	01 d0                	add    %edx,%eax
f010cca3:	c1 e0 06             	shl    $0x6,%eax
f010cca6:	01 d0                	add    %edx,%eax
f010cca8:	89 c1                	mov    %eax,%ecx
f010ccaa:	c1 e1 04             	shl    $0x4,%ecx
f010ccad:	01 c8                	add    %ecx,%eax
f010ccaf:	c1 e0 03             	shl    $0x3,%eax
f010ccb2:	01 d0                	add    %edx,%eax
f010ccb4:	01 c0                	add    %eax,%eax
f010ccb6:	01 d0                	add    %edx,%eax
f010ccb8:	89 c1                	mov    %eax,%ecx
f010ccba:	c1 e1 04             	shl    $0x4,%ecx
f010ccbd:	01 c8                	add    %ecx,%eax
f010ccbf:	c1 e0 03             	shl    $0x3,%eax
f010ccc2:	01 d0                	add    %edx,%eax
f010ccc4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010cccb:	01 d0                	add    %edx,%eax
}
f010cccd:	5d                   	pop    %ebp
f010ccce:	c3                   	ret    

f010cccf <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cccf:	55                   	push   %ebp
f010ccd0:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010ccd2:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010ccd7:	8b 40 50             	mov    0x50(%eax),%eax
}
f010ccda:	5d                   	pop    %ebp
f010ccdb:	c3                   	ret    

f010ccdc <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010ccdc:	55                   	push   %ebp
f010ccdd:	89 e5                	mov    %esp,%ebp
f010ccdf:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cce2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cce6:	75 0a                	jne    f010ccf2 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cce8:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cced:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ccf0:	eb 22                	jmp    f010cd14 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010ccf2:	83 ec 04             	sub    $0x4,%esp
f010ccf5:	6a 00                	push   $0x0
f010ccf7:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010ccfa:	50                   	push   %eax
f010ccfb:	ff 75 08             	pushl  0x8(%ebp)
f010ccfe:	e8 6d cc ff ff       	call   f0109970 <envid2env>
f010cd03:	83 c4 10             	add    $0x10,%esp
f010cd06:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cd09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cd0d:	79 05                	jns    f010cd14 <sys_destroy_env+0x38>
	{
		return r;
f010cd0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd12:	eb 5e                	jmp    f010cd72 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cd14:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cd17:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cd1c:	39 c2                	cmp    %eax,%edx
f010cd1e:	75 1b                	jne    f010cd3b <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cd20:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cd25:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd28:	83 ec 08             	sub    $0x8,%esp
f010cd2b:	50                   	push   %eax
f010cd2c:	68 22 31 13 f0       	push   $0xf0133122
f010cd31:	e8 fb 40 ff ff       	call   f0100e31 <cprintf>
f010cd36:	83 c4 10             	add    $0x10,%esp
f010cd39:	eb 20                	jmp    f010cd5b <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cd3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd3e:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cd41:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f010cd46:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd49:	83 ec 04             	sub    $0x4,%esp
f010cd4c:	52                   	push   %edx
f010cd4d:	50                   	push   %eax
f010cd4e:	68 3d 31 13 f0       	push   $0xf013313d
f010cd53:	e8 d9 40 ff ff       	call   f0100e31 <cprintf>
f010cd58:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cd5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd5e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd61:	83 ec 0c             	sub    $0xc,%esp
f010cd64:	50                   	push   %eax
f010cd65:	e8 49 88 ff ff       	call   f01055b3 <sched_kill_env>
f010cd6a:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cd6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cd72:	c9                   	leave  
f010cd73:	c3                   	ret    

f010cd74 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cd74:	55                   	push   %ebp
f010cd75:	89 e5                	mov    %esp,%ebp
f010cd77:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cd7a:	e8 d2 cb ff ff       	call   f0109951 <env_exit>
	//env_run_cmd_prmpt();
}
f010cd7f:	90                   	nop
f010cd80:	c9                   	leave  
f010cd81:	c3                   	ret    

f010cd82 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cd82:	55                   	push   %ebp
f010cd83:	89 e5                	mov    %esp,%ebp
f010cd85:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cd88:	ff 75 14             	pushl  0x14(%ebp)
f010cd8b:	ff 75 10             	pushl  0x10(%ebp)
f010cd8e:	ff 75 0c             	pushl  0xc(%ebp)
f010cd91:	ff 75 08             	pushl  0x8(%ebp)
f010cd94:	e8 d4 be ff ff       	call   f0108c6d <env_create>
f010cd99:	83 c4 10             	add    $0x10,%esp
f010cd9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cd9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cda3:	75 07                	jne    f010cdac <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cda5:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010cdaa:	eb 14                	jmp    f010cdc0 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010cdac:	83 ec 0c             	sub    $0xc,%esp
f010cdaf:	ff 75 f4             	pushl  -0xc(%ebp)
f010cdb2:	e8 1e 85 ff ff       	call   f01052d5 <sched_new_env>
f010cdb7:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010cdba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cdbd:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cdc0:	c9                   	leave  
f010cdc1:	c3                   	ret    

f010cdc2 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010cdc2:	55                   	push   %ebp
f010cdc3:	89 e5                	mov    %esp,%ebp
f010cdc5:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010cdc8:	8b 45 08             	mov    0x8(%ebp),%eax
f010cdcb:	83 ec 0c             	sub    $0xc,%esp
f010cdce:	50                   	push   %eax
f010cdcf:	e8 1e 85 ff ff       	call   f01052f2 <sched_run_env>
f010cdd4:	83 c4 10             	add    $0x10,%esp
}
f010cdd7:	90                   	nop
f010cdd8:	c9                   	leave  
f010cdd9:	c3                   	ret    

f010cdda <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010cdda:	55                   	push   %ebp
f010cddb:	89 e5                	mov    %esp,%ebp
f010cddd:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010cde0:	0f 31                	rdtsc  
f010cde2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cde5:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010cde8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cdeb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdee:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cdf1:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010cdf4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cdf7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cdfa:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cdfd:	89 01                	mov    %eax,(%ecx)
f010cdff:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ce02:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce05:	c9                   	leave  
f010ce06:	c2 04 00             	ret    $0x4

f010ce09 <sys_rcr2>:

uint32 sys_rcr2()
{
f010ce09:	55                   	push   %ebp
f010ce0a:	89 e5                	mov    %esp,%ebp
f010ce0c:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010ce0f:	0f 20 d0             	mov    %cr2,%eax
f010ce12:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010ce15:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010ce18:	90                   	nop
}
f010ce19:	c9                   	leave  
f010ce1a:	c3                   	ret    

f010ce1b <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010ce1b:	55                   	push   %ebp
f010ce1c:	89 e5                	mov    %esp,%ebp
f010ce1e:	83 ec 04             	sub    $0x4,%esp
f010ce21:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce24:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010ce27:	8a 45 fc             	mov    -0x4(%ebp),%al
f010ce2a:	a2 e8 2a 25 f0       	mov    %al,0xf0252ae8
}
f010ce2f:	90                   	nop
f010ce30:	c9                   	leave  
f010ce31:	c3                   	ret    

f010ce32 <sys_sbrk>:
/**********************************/
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/
void* sys_sbrk(int increment)
{
f010ce32:	55                   	push   %ebp
f010ce33:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #08] [2] USER HEAP - Block Allocator - sys_sbrk() [Kernel Side]
	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f010ce35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	 * 		You might have to undo any operations you have done so far in this case.
	 */
	struct Env* env = curenv; //the current running Environment to adjust its break limit


}
f010ce3a:	5d                   	pop    %ebp
f010ce3b:	c3                   	ret    

f010ce3c <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010ce3c:	55                   	push   %ebp
f010ce3d:	89 e5                	mov    %esp,%ebp
f010ce3f:	56                   	push   %esi
f010ce40:	53                   	push   %ebx
f010ce41:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010ce44:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
f010ce48:	0f 87 0f 04 00 00    	ja     f010d25d <syscall+0x421>
f010ce4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce51:	c1 e0 02             	shl    $0x2,%eax
f010ce54:	05 58 31 13 f0       	add    $0xf0133158,%eax
f010ce59:	8b 00                	mov    (%eax),%eax
f010ce5b:	ff e0                	jmp    *%eax
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here

	//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010ce5d:	8b 45 14             	mov    0x14(%ebp),%eax
f010ce60:	0f b6 d0             	movzbl %al,%edx
f010ce63:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce66:	83 ec 04             	sub    $0x4,%esp
f010ce69:	52                   	push   %edx
f010ce6a:	ff 75 10             	pushl  0x10(%ebp)
f010ce6d:	50                   	push   %eax
f010ce6e:	e8 26 f9 ff ff       	call   f010c799 <sys_cputs>
f010ce73:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce76:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce7b:	e9 e2 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010ce80:	e8 86 f9 ff ff       	call   f010c80b <sys_cgetc>
f010ce85:	e9 d8 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010ce8a:	83 ec 08             	sub    $0x8,%esp
f010ce8d:	ff 75 10             	pushl  0x10(%ebp)
f010ce90:	ff 75 0c             	pushl  0xc(%ebp)
f010ce93:	e8 c3 fa ff ff       	call   f010c95b <sys_calculate_required_frames>
f010ce98:	83 c4 10             	add    $0x10,%esp
f010ce9b:	e9 c2 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010cea0:	e8 db fa ff ff       	call   f010c980 <sys_calculate_free_frames>
f010cea5:	e9 b8 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010ceaa:	e8 f0 fa ff ff       	call   f010c99f <sys_calculate_modified_frames>
f010ceaf:	e9 ae 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010ceb4:	e8 00 fb ff ff       	call   f010c9b9 <sys_calculate_notmod_frames>
f010ceb9:	e9 a4 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010cebe:	e8 68 fb ff ff       	call   f010ca2b <sys_pf_calculate_allocated_pages>
f010cec3:	e9 9a 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010cec8:	83 ec 0c             	sub    $0xc,%esp
f010cecb:	ff 75 0c             	pushl  0xc(%ebp)
f010cece:	e8 00 fb ff ff       	call   f010c9d3 <sys_calculate_pages_tobe_removed_ready_exit>
f010ced3:	83 c4 10             	add    $0x10,%esp
f010ced6:	e9 87 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010cedb:	e8 09 fb ff ff       	call   f010c9e9 <sys_scarce_memory>
		return 0;
f010cee0:	b8 00 00 00 00       	mov    $0x0,%eax
f010cee5:	e9 78 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010ceea:	83 ec 04             	sub    $0x4,%esp
f010ceed:	ff 75 14             	pushl  0x14(%ebp)
f010cef0:	ff 75 10             	pushl  0x10(%ebp)
f010cef3:	ff 75 0c             	pushl  0xc(%ebp)
f010cef6:	e8 ab fb ff ff       	call   f010caa6 <sys_allocate_chunk>
f010cefb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cefe:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf03:	e9 5a 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010cf08:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf0b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf0e:	83 ec 08             	sub    $0x8,%esp
f010cf11:	52                   	push   %edx
f010cf12:	50                   	push   %eax
f010cf13:	e8 06 f9 ff ff       	call   f010c81e <__sys_allocate_page>
f010cf18:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf1b:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf20:	e9 3d 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cf25:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cf28:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cf2b:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cf2e:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf31:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf34:	83 ec 0c             	sub    $0xc,%esp
f010cf37:	56                   	push   %esi
f010cf38:	53                   	push   %ebx
f010cf39:	51                   	push   %ecx
f010cf3a:	52                   	push   %edx
f010cf3b:	50                   	push   %eax
f010cf3c:	e8 e0 f9 ff ff       	call   f010c921 <__sys_map_frame>
f010cf41:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cf44:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf49:	e9 14 03 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cf4e:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf51:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf54:	83 ec 08             	sub    $0x8,%esp
f010cf57:	52                   	push   %edx
f010cf58:	50                   	push   %eax
f010cf59:	e8 e0 f9 ff ff       	call   f010c93e <__sys_unmap_frame>
f010cf5e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf61:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf66:	e9 f7 02 00 00       	jmp    f010d262 <syscall+0x426>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010cf6b:	e8 94 fb ff ff       	call   f010cb04 <sys_disable_interrupt>
		return 0;
f010cf70:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf75:	e9 e8 02 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010cf7a:	e8 9f fb ff ff       	call   f010cb1e <sys_enable_interrupt>
		return 0;
f010cf7f:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf84:	e9 d9 02 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010cf89:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf8c:	0f be c0             	movsbl %al,%eax
f010cf8f:	83 ec 0c             	sub    $0xc,%esp
f010cf92:	50                   	push   %eax
f010cf93:	e8 4f f8 ff ff       	call   f010c7e7 <sys_cputc>
f010cf98:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf9b:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfa0:	e9 bd 02 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010cfa5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfa8:	0f be c0             	movsbl %al,%eax
f010cfab:	83 ec 0c             	sub    $0xc,%esp
f010cfae:	50                   	push   %eax
f010cfaf:	e8 43 fa ff ff       	call   f010c9f7 <sys_clearFFL>
f010cfb4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfb7:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfbc:	e9 a1 02 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010cfc1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfc4:	83 ec 08             	sub    $0x8,%esp
f010cfc7:	ff 75 10             	pushl  0x10(%ebp)
f010cfca:	50                   	push   %eax
f010cfcb:	e8 68 fb ff ff       	call   f010cb38 <sys_createSemaphore>
f010cfd0:	83 c4 10             	add    $0x10,%esp
f010cfd3:	e9 8a 02 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010cfd8:	8b 55 10             	mov    0x10(%ebp),%edx
f010cfdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfde:	83 ec 08             	sub    $0x8,%esp
f010cfe1:	52                   	push   %edx
f010cfe2:	50                   	push   %eax
f010cfe3:	e8 72 fb ff ff       	call   f010cb5a <sys_waitSemaphore>
f010cfe8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfeb:	b8 00 00 00 00       	mov    $0x0,%eax
f010cff0:	e9 6d 02 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010cff5:	8b 55 10             	mov    0x10(%ebp),%edx
f010cff8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cffb:	83 ec 08             	sub    $0x8,%esp
f010cffe:	52                   	push   %edx
f010cfff:	50                   	push   %eax
f010d000:	e8 6f fb ff ff       	call   f010cb74 <sys_signalSemaphore>
f010d005:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d008:	b8 00 00 00 00       	mov    $0x0,%eax
f010d00d:	e9 50 02 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d012:	8b 55 10             	mov    0x10(%ebp),%edx
f010d015:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d018:	83 ec 08             	sub    $0x8,%esp
f010d01b:	52                   	push   %edx
f010d01c:	50                   	push   %eax
f010d01d:	e8 6c fb ff ff       	call   f010cb8e <sys_getSemaphoreValue>
f010d022:	83 c4 10             	add    $0x10,%esp
f010d025:	e9 38 02 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d02a:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d02d:	8b 45 14             	mov    0x14(%ebp),%eax
f010d030:	0f b6 d0             	movzbl %al,%edx
f010d033:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d036:	51                   	push   %ecx
f010d037:	52                   	push   %edx
f010d038:	ff 75 10             	pushl  0x10(%ebp)
f010d03b:	50                   	push   %eax
f010d03c:	e8 aa fb ff ff       	call   f010cbeb <sys_createSharedObject>
f010d041:	83 c4 10             	add    $0x10,%esp
f010d044:	e9 19 02 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d049:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d04c:	8b 55 10             	mov    0x10(%ebp),%edx
f010d04f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d052:	83 ec 04             	sub    $0x4,%esp
f010d055:	51                   	push   %ecx
f010d056:	52                   	push   %edx
f010d057:	50                   	push   %eax
f010d058:	e8 d7 fb ff ff       	call   f010cc34 <sys_getSharedObject>
f010d05d:	83 c4 10             	add    $0x10,%esp
f010d060:	e9 fd 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d065:	8b 55 10             	mov    0x10(%ebp),%edx
f010d068:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d06b:	83 ec 08             	sub    $0x8,%esp
f010d06e:	52                   	push   %edx
f010d06f:	50                   	push   %eax
f010d070:	e8 db fb ff ff       	call   f010cc50 <sys_freeSharedObject>
f010d075:	83 c4 10             	add    $0x10,%esp
f010d078:	e9 e5 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d07d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d080:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d083:	83 ec 08             	sub    $0x8,%esp
f010d086:	52                   	push   %edx
f010d087:	50                   	push   %eax
f010d088:	e8 8e fb ff ff       	call   f010cc1b <sys_getSizeOfSharedObject>
f010d08d:	83 c4 10             	add    $0x10,%esp
f010d090:	e9 cd 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d095:	e8 cf fb ff ff       	call   f010cc69 <sys_getMaxShares>
f010d09a:	e9 c3 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d09f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0a2:	ff 75 18             	pushl  0x18(%ebp)
f010d0a5:	ff 75 14             	pushl  0x14(%ebp)
f010d0a8:	ff 75 10             	pushl  0x10(%ebp)
f010d0ab:	50                   	push   %eax
f010d0ac:	e8 d1 fc ff ff       	call   f010cd82 <sys_create_env>
f010d0b1:	83 c4 10             	add    $0x10,%esp
f010d0b4:	e9 a9 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d0b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0bc:	83 ec 0c             	sub    $0xc,%esp
f010d0bf:	50                   	push   %eax
f010d0c0:	e8 fd fc ff ff       	call   f010cdc2 <sys_run_env>
f010d0c5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d0c8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0cd:	e9 90 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d0d2:	e8 a9 fb ff ff       	call   f010cc80 <sys_getenvindex>
f010d0d7:	e9 86 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d0dc:	e8 92 fb ff ff       	call   f010cc73 <sys_getenvid>
f010d0e1:	e9 7c 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d0e6:	e8 e4 fb ff ff       	call   f010cccf <sys_getparentenvid>
f010d0eb:	e9 72 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d0f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0f3:	83 ec 0c             	sub    $0xc,%esp
f010d0f6:	50                   	push   %eax
f010d0f7:	e8 e0 fb ff ff       	call   f010ccdc <sys_destroy_env>
f010d0fc:	83 c4 10             	add    $0x10,%esp
f010d0ff:	e9 5e 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d104:	e8 6b fc ff ff       	call   f010cd74 <sys_exit_env>
		return 0;
f010d109:	b8 00 00 00 00       	mov    $0x0,%eax
f010d10e:	e9 4f 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d113:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d116:	83 ec 0c             	sub    $0xc,%esp
f010d119:	50                   	push   %eax
f010d11a:	e8 bb fc ff ff       	call   f010cdda <sys_get_virtual_time>
f010d11f:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d122:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d125:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d128:	8b 45 10             	mov    0x10(%ebp),%eax
f010d12b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d12e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d131:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d134:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d136:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d139:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d13c:	89 10                	mov    %edx,(%eax)
		return 0;
f010d13e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d143:	e9 1a 01 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d148:	83 ec 04             	sub    $0x4,%esp
f010d14b:	ff 75 14             	pushl  0x14(%ebp)
f010d14e:	ff 75 10             	pushl  0x10(%ebp)
f010d151:	ff 75 0c             	pushl  0xc(%ebp)
f010d154:	e8 73 f9 ff ff       	call   f010cacc <sys_move_user_mem>
f010d159:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d15c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d161:	e9 fc 00 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d166:	e8 9e fc ff ff       	call   f010ce09 <sys_rcr2>
f010d16b:	e9 f2 00 00 00       	jmp    f010d262 <syscall+0x426>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d170:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d173:	0f b6 c0             	movzbl %al,%eax
f010d176:	83 ec 0c             	sub    $0xc,%esp
f010d179:	50                   	push   %eax
f010d17a:	e8 9c fc ff ff       	call   f010ce1b <sys_bypassPageFault>
f010d17f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d182:	b8 00 00 00 00       	mov    $0x0,%eax
f010d187:	e9 d6 00 00 00       	jmp    f010d262 <syscall+0x426>

	case SYS_rsttst:
		rsttst();
f010d18c:	e8 63 08 02 00       	call   f012d9f4 <rsttst>
		return 0;
f010d191:	b8 00 00 00 00       	mov    $0x0,%eax
f010d196:	e9 c7 00 00 00       	jmp    f010d262 <syscall+0x426>
	case SYS_inctst:
		inctst();
f010d19b:	e8 64 08 02 00       	call   f012da04 <inctst>
		return 0;
f010d1a0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1a5:	e9 b8 00 00 00       	jmp    f010d262 <syscall+0x426>
	case SYS_chktst:
		chktst(a1);
f010d1aa:	83 ec 0c             	sub    $0xc,%esp
f010d1ad:	ff 75 0c             	pushl  0xc(%ebp)
f010d1b0:	e8 4e 09 02 00       	call   f012db03 <chktst>
f010d1b5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1b8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1bd:	e9 a0 00 00 00       	jmp    f010d262 <syscall+0x426>
	case SYS_gettst:
		return gettst();
f010d1c2:	e8 4e 08 02 00       	call   f012da15 <gettst>
f010d1c7:	e9 96 00 00 00       	jmp    f010d262 <syscall+0x426>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d1cc:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d1cf:	8b 45 18             	mov    0x18(%ebp),%eax
f010d1d2:	0f be c0             	movsbl %al,%eax
f010d1d5:	83 ec 0c             	sub    $0xc,%esp
f010d1d8:	52                   	push   %edx
f010d1d9:	50                   	push   %eax
f010d1da:	ff 75 14             	pushl  0x14(%ebp)
f010d1dd:	ff 75 10             	pushl  0x10(%ebp)
f010d1e0:	ff 75 0c             	pushl  0xc(%ebp)
f010d1e3:	e8 37 08 02 00       	call   f012da1f <tst>
f010d1e8:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d1eb:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1f0:	eb 70                	jmp    f010d262 <syscall+0x426>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d1f2:	e8 f5 f8 ff ff       	call   f010caec <sys_get_heap_strategy>
f010d1f7:	eb 69                	jmp    f010d262 <syscall+0x426>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d1f9:	83 ec 0c             	sub    $0xc,%esp
f010d1fc:	ff 75 0c             	pushl  0xc(%ebp)
f010d1ff:	e8 f2 f8 ff ff       	call   f010caf6 <sys_set_uheap_strategy>
f010d204:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d207:	b8 00 00 00 00       	mov    $0x0,%eax
f010d20c:	eb 54                	jmp    f010d262 <syscall+0x426>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d20e:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d211:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d214:	8b 55 10             	mov    0x10(%ebp),%edx
f010d217:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d21a:	53                   	push   %ebx
f010d21b:	51                   	push   %ecx
f010d21c:	52                   	push   %edx
f010d21d:	50                   	push   %eax
f010d21e:	e8 a3 46 00 00       	call   f01118c6 <sys_check_LRU_lists>
f010d223:	83 c4 10             	add    $0x10,%esp
f010d226:	eb 3a                	jmp    f010d262 <syscall+0x426>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d228:	8b 55 10             	mov    0x10(%ebp),%edx
f010d22b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d22e:	83 ec 08             	sub    $0x8,%esp
f010d231:	52                   	push   %edx
f010d232:	50                   	push   %eax
f010d233:	e8 10 48 00 00       	call   f0111a48 <sys_check_LRU_lists_free>
f010d238:	83 c4 10             	add    $0x10,%esp
f010d23b:	eb 25                	jmp    f010d262 <syscall+0x426>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010d23d:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d240:	8b 55 10             	mov    0x10(%ebp),%edx
f010d243:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d246:	51                   	push   %ecx
f010d247:	ff 75 14             	pushl  0x14(%ebp)
f010d24a:	52                   	push   %edx
f010d24b:	50                   	push   %eax
f010d24c:	e8 62 49 00 00       	call   f0111bb3 <sys_check_WS_list>
f010d251:	83 c4 10             	add    $0x10,%esp
f010d254:	eb 0c                	jmp    f010d262 <syscall+0x426>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d256:	b8 03 00 00 00       	mov    $0x3,%eax
f010d25b:	eb 05                	jmp    f010d262 <syscall+0x426>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d25d:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d262:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d265:	5b                   	pop    %ebx
f010d266:	5e                   	pop    %esi
f010d267:	5d                   	pop    %ebp
f010d268:	c3                   	ret    

f010d269 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d269:	55                   	push   %ebp
f010d26a:	89 e5                	mov    %esp,%ebp
f010d26c:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d26f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d272:	8b 00                	mov    (%eax),%eax
f010d274:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d277:	8b 45 10             	mov    0x10(%ebp),%eax
f010d27a:	8b 00                	mov    (%eax),%eax
f010d27c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d27f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d286:	e9 ca 00 00 00       	jmp    f010d355 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d28b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d28e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d291:	01 d0                	add    %edx,%eax
f010d293:	89 c2                	mov    %eax,%edx
f010d295:	c1 ea 1f             	shr    $0x1f,%edx
f010d298:	01 d0                	add    %edx,%eax
f010d29a:	d1 f8                	sar    %eax
f010d29c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d29f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2a2:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d2a5:	eb 03                	jmp    f010d2aa <stab_binsearch+0x41>
			m--;
f010d2a7:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d2aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2ad:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d2b0:	7c 1e                	jl     f010d2d0 <stab_binsearch+0x67>
f010d2b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d2b5:	89 d0                	mov    %edx,%eax
f010d2b7:	01 c0                	add    %eax,%eax
f010d2b9:	01 d0                	add    %edx,%eax
f010d2bb:	c1 e0 02             	shl    $0x2,%eax
f010d2be:	89 c2                	mov    %eax,%edx
f010d2c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2c3:	01 d0                	add    %edx,%eax
f010d2c5:	8a 40 04             	mov    0x4(%eax),%al
f010d2c8:	0f b6 c0             	movzbl %al,%eax
f010d2cb:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d2ce:	75 d7                	jne    f010d2a7 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d2d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2d3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d2d6:	7d 09                	jge    f010d2e1 <stab_binsearch+0x78>
			l = true_m + 1;
f010d2d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2db:	40                   	inc    %eax
f010d2dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d2df:	eb 74                	jmp    f010d355 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d2e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d2e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d2eb:	89 d0                	mov    %edx,%eax
f010d2ed:	01 c0                	add    %eax,%eax
f010d2ef:	01 d0                	add    %edx,%eax
f010d2f1:	c1 e0 02             	shl    $0x2,%eax
f010d2f4:	89 c2                	mov    %eax,%edx
f010d2f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2f9:	01 d0                	add    %edx,%eax
f010d2fb:	8b 40 08             	mov    0x8(%eax),%eax
f010d2fe:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d301:	73 11                	jae    f010d314 <stab_binsearch+0xab>
			*region_left = m;
f010d303:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d306:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d309:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d30b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d30e:	40                   	inc    %eax
f010d30f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d312:	eb 41                	jmp    f010d355 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d314:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d317:	89 d0                	mov    %edx,%eax
f010d319:	01 c0                	add    %eax,%eax
f010d31b:	01 d0                	add    %edx,%eax
f010d31d:	c1 e0 02             	shl    $0x2,%eax
f010d320:	89 c2                	mov    %eax,%edx
f010d322:	8b 45 08             	mov    0x8(%ebp),%eax
f010d325:	01 d0                	add    %edx,%eax
f010d327:	8b 40 08             	mov    0x8(%eax),%eax
f010d32a:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d32d:	76 14                	jbe    f010d343 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d32f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d332:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d335:	8b 45 10             	mov    0x10(%ebp),%eax
f010d338:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d33a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d33d:	48                   	dec    %eax
f010d33e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d341:	eb 12                	jmp    f010d355 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d343:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d346:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d349:	89 10                	mov    %edx,(%eax)
			l = m;
f010d34b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d34e:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d351:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d355:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d358:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d35b:	0f 8e 2a ff ff ff    	jle    f010d28b <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d361:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d365:	75 0f                	jne    f010d376 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d367:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d36a:	8b 00                	mov    (%eax),%eax
f010d36c:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d36f:	8b 45 10             	mov    0x10(%ebp),%eax
f010d372:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d374:	eb 3d                	jmp    f010d3b3 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d376:	8b 45 10             	mov    0x10(%ebp),%eax
f010d379:	8b 00                	mov    (%eax),%eax
f010d37b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d37e:	eb 03                	jmp    f010d383 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d380:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d383:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d386:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d388:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d38b:	7d 1e                	jge    f010d3ab <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d38d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d390:	89 d0                	mov    %edx,%eax
f010d392:	01 c0                	add    %eax,%eax
f010d394:	01 d0                	add    %edx,%eax
f010d396:	c1 e0 02             	shl    $0x2,%eax
f010d399:	89 c2                	mov    %eax,%edx
f010d39b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d39e:	01 d0                	add    %edx,%eax
f010d3a0:	8a 40 04             	mov    0x4(%eax),%al
f010d3a3:	0f b6 c0             	movzbl %al,%eax
f010d3a6:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d3a9:	75 d5                	jne    f010d380 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d3ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3ae:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d3b1:	89 10                	mov    %edx,(%eax)
	}
}
f010d3b3:	90                   	nop
f010d3b4:	c9                   	leave  
f010d3b5:	c3                   	ret    

f010d3b6 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d3b6:	55                   	push   %ebp
f010d3b7:	89 e5                	mov    %esp,%ebp
f010d3b9:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d3bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3bf:	c7 00 18 32 13 f0    	movl   $0xf0133218,(%eax)
	info->eip_line = 0;
f010d3c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3c8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d3cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3d2:	c7 40 08 18 32 13 f0 	movl   $0xf0133218,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d3d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3dc:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d3e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3e6:	8b 55 08             	mov    0x8(%ebp),%edx
f010d3e9:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d3ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3ef:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d3f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3f9:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d3fe:	76 1e                	jbe    f010d41e <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d400:	c7 45 f4 bc b2 13 f0 	movl   $0xf013b2bc,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d407:	c7 45 f0 ec 6c 17 f0 	movl   $0xf0176cec,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d40e:	c7 45 ec ed 6c 17 f0 	movl   $0xf0176ced,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d415:	c7 45 e8 18 3a 18 f0 	movl   $0xf0183a18,-0x18(%ebp)
f010d41c:	eb 2a                	jmp    f010d448 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d41e:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d425:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d428:	8b 00                	mov    (%eax),%eax
f010d42a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d42d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d430:	8b 40 04             	mov    0x4(%eax),%eax
f010d433:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d436:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d439:	8b 40 08             	mov    0x8(%eax),%eax
f010d43c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d43f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d442:	8b 40 0c             	mov    0xc(%eax),%eax
f010d445:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d448:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d44b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d44e:	76 0a                	jbe    f010d45a <debuginfo_eip+0xa4>
f010d450:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d453:	48                   	dec    %eax
f010d454:	8a 00                	mov    (%eax),%al
f010d456:	84 c0                	test   %al,%al
f010d458:	74 0a                	je     f010d464 <debuginfo_eip+0xae>
		return -1;
f010d45a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d45f:	e9 01 02 00 00       	jmp    f010d665 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d464:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d46b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d46e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d471:	29 c2                	sub    %eax,%edx
f010d473:	89 d0                	mov    %edx,%eax
f010d475:	c1 f8 02             	sar    $0x2,%eax
f010d478:	89 c2                	mov    %eax,%edx
f010d47a:	89 d0                	mov    %edx,%eax
f010d47c:	c1 e0 02             	shl    $0x2,%eax
f010d47f:	01 d0                	add    %edx,%eax
f010d481:	c1 e0 02             	shl    $0x2,%eax
f010d484:	01 d0                	add    %edx,%eax
f010d486:	c1 e0 02             	shl    $0x2,%eax
f010d489:	01 d0                	add    %edx,%eax
f010d48b:	89 c1                	mov    %eax,%ecx
f010d48d:	c1 e1 08             	shl    $0x8,%ecx
f010d490:	01 c8                	add    %ecx,%eax
f010d492:	89 c1                	mov    %eax,%ecx
f010d494:	c1 e1 10             	shl    $0x10,%ecx
f010d497:	01 c8                	add    %ecx,%eax
f010d499:	01 c0                	add    %eax,%eax
f010d49b:	01 d0                	add    %edx,%eax
f010d49d:	48                   	dec    %eax
f010d49e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d4a1:	ff 75 08             	pushl  0x8(%ebp)
f010d4a4:	6a 64                	push   $0x64
f010d4a6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d4a9:	50                   	push   %eax
f010d4aa:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d4ad:	50                   	push   %eax
f010d4ae:	ff 75 f4             	pushl  -0xc(%ebp)
f010d4b1:	e8 b3 fd ff ff       	call   f010d269 <stab_binsearch>
f010d4b6:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d4b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d4bc:	85 c0                	test   %eax,%eax
f010d4be:	75 0a                	jne    f010d4ca <debuginfo_eip+0x114>
		return -1;
f010d4c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d4c5:	e9 9b 01 00 00       	jmp    f010d665 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d4ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d4cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d4d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d4d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d4d6:	ff 75 08             	pushl  0x8(%ebp)
f010d4d9:	6a 24                	push   $0x24
f010d4db:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d4de:	50                   	push   %eax
f010d4df:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d4e2:	50                   	push   %eax
f010d4e3:	ff 75 f4             	pushl  -0xc(%ebp)
f010d4e6:	e8 7e fd ff ff       	call   f010d269 <stab_binsearch>
f010d4eb:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d4ee:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d4f1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d4f4:	39 c2                	cmp    %eax,%edx
f010d4f6:	0f 8f 86 00 00 00    	jg     f010d582 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d4fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d4ff:	89 c2                	mov    %eax,%edx
f010d501:	89 d0                	mov    %edx,%eax
f010d503:	01 c0                	add    %eax,%eax
f010d505:	01 d0                	add    %edx,%eax
f010d507:	c1 e0 02             	shl    $0x2,%eax
f010d50a:	89 c2                	mov    %eax,%edx
f010d50c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d50f:	01 d0                	add    %edx,%eax
f010d511:	8b 00                	mov    (%eax),%eax
f010d513:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d516:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d519:	29 d1                	sub    %edx,%ecx
f010d51b:	89 ca                	mov    %ecx,%edx
f010d51d:	39 d0                	cmp    %edx,%eax
f010d51f:	73 22                	jae    f010d543 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d521:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d524:	89 c2                	mov    %eax,%edx
f010d526:	89 d0                	mov    %edx,%eax
f010d528:	01 c0                	add    %eax,%eax
f010d52a:	01 d0                	add    %edx,%eax
f010d52c:	c1 e0 02             	shl    $0x2,%eax
f010d52f:	89 c2                	mov    %eax,%edx
f010d531:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d534:	01 d0                	add    %edx,%eax
f010d536:	8b 10                	mov    (%eax),%edx
f010d538:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d53b:	01 c2                	add    %eax,%edx
f010d53d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d540:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d543:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d546:	89 c2                	mov    %eax,%edx
f010d548:	89 d0                	mov    %edx,%eax
f010d54a:	01 c0                	add    %eax,%eax
f010d54c:	01 d0                	add    %edx,%eax
f010d54e:	c1 e0 02             	shl    $0x2,%eax
f010d551:	89 c2                	mov    %eax,%edx
f010d553:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d556:	01 d0                	add    %edx,%eax
f010d558:	8b 50 08             	mov    0x8(%eax),%edx
f010d55b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d55e:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d561:	8b 55 08             	mov    0x8(%ebp),%edx
f010d564:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d567:	8b 40 10             	mov    0x10(%eax),%eax
f010d56a:	29 c2                	sub    %eax,%edx
f010d56c:	89 d0                	mov    %edx,%eax
f010d56e:	c1 f8 02             	sar    $0x2,%eax
f010d571:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d574:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d577:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d57a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d57d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d580:	eb 15                	jmp    f010d597 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d582:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d585:	8b 55 08             	mov    0x8(%ebp),%edx
f010d588:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d58b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d58e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d591:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d594:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d597:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d59a:	8b 40 08             	mov    0x8(%eax),%eax
f010d59d:	83 ec 08             	sub    $0x8,%esp
f010d5a0:	6a 3a                	push   $0x3a
f010d5a2:	50                   	push   %eax
f010d5a3:	e8 ca 19 02 00       	call   f012ef72 <strfind>
f010d5a8:	83 c4 10             	add    $0x10,%esp
f010d5ab:	89 c2                	mov    %eax,%edx
f010d5ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5b0:	8b 40 08             	mov    0x8(%eax),%eax
f010d5b3:	29 c2                	sub    %eax,%edx
f010d5b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5b8:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d5bb:	eb 03                	jmp    f010d5c0 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d5bd:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d5c0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d5c3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d5c6:	7c 4e                	jl     f010d616 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d5c8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d5cb:	89 d0                	mov    %edx,%eax
f010d5cd:	01 c0                	add    %eax,%eax
f010d5cf:	01 d0                	add    %edx,%eax
f010d5d1:	c1 e0 02             	shl    $0x2,%eax
f010d5d4:	89 c2                	mov    %eax,%edx
f010d5d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5d9:	01 d0                	add    %edx,%eax
f010d5db:	8a 40 04             	mov    0x4(%eax),%al
f010d5de:	3c 84                	cmp    $0x84,%al
f010d5e0:	74 34                	je     f010d616 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d5e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d5e5:	89 d0                	mov    %edx,%eax
f010d5e7:	01 c0                	add    %eax,%eax
f010d5e9:	01 d0                	add    %edx,%eax
f010d5eb:	c1 e0 02             	shl    $0x2,%eax
f010d5ee:	89 c2                	mov    %eax,%edx
f010d5f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5f3:	01 d0                	add    %edx,%eax
f010d5f5:	8a 40 04             	mov    0x4(%eax),%al
f010d5f8:	3c 64                	cmp    $0x64,%al
f010d5fa:	75 c1                	jne    f010d5bd <debuginfo_eip+0x207>
f010d5fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d5ff:	89 d0                	mov    %edx,%eax
f010d601:	01 c0                	add    %eax,%eax
f010d603:	01 d0                	add    %edx,%eax
f010d605:	c1 e0 02             	shl    $0x2,%eax
f010d608:	89 c2                	mov    %eax,%edx
f010d60a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d60d:	01 d0                	add    %edx,%eax
f010d60f:	8b 40 08             	mov    0x8(%eax),%eax
f010d612:	85 c0                	test   %eax,%eax
f010d614:	74 a7                	je     f010d5bd <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d616:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d619:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d61c:	7c 42                	jl     f010d660 <debuginfo_eip+0x2aa>
f010d61e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d621:	89 d0                	mov    %edx,%eax
f010d623:	01 c0                	add    %eax,%eax
f010d625:	01 d0                	add    %edx,%eax
f010d627:	c1 e0 02             	shl    $0x2,%eax
f010d62a:	89 c2                	mov    %eax,%edx
f010d62c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d62f:	01 d0                	add    %edx,%eax
f010d631:	8b 00                	mov    (%eax),%eax
f010d633:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d636:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d639:	29 d1                	sub    %edx,%ecx
f010d63b:	89 ca                	mov    %ecx,%edx
f010d63d:	39 d0                	cmp    %edx,%eax
f010d63f:	73 1f                	jae    f010d660 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d641:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d644:	89 d0                	mov    %edx,%eax
f010d646:	01 c0                	add    %eax,%eax
f010d648:	01 d0                	add    %edx,%eax
f010d64a:	c1 e0 02             	shl    $0x2,%eax
f010d64d:	89 c2                	mov    %eax,%edx
f010d64f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d652:	01 d0                	add    %edx,%eax
f010d654:	8b 10                	mov    (%eax),%edx
f010d656:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d659:	01 c2                	add    %eax,%edx
f010d65b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d65e:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d660:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d665:	c9                   	leave  
f010d666:	c3                   	ret    

f010d667 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d667:	55                   	push   %ebp
f010d668:	89 e5                	mov    %esp,%ebp
f010d66a:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d66d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d671:	74 1c                	je     f010d68f <setPageReplacmentAlgorithmLRU+0x28>
f010d673:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d677:	74 16                	je     f010d68f <setPageReplacmentAlgorithmLRU+0x28>
f010d679:	68 24 32 13 f0       	push   $0xf0133224
f010d67e:	68 6e 32 13 f0       	push   $0xf013326e
f010d683:	6a 18                	push   $0x18
f010d685:	68 83 32 13 f0       	push   $0xf0133283
f010d68a:	e8 21 2b ff ff       	call   f01001b0 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d68f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d692:	a3 fc ae 2b f0       	mov    %eax,0xf02baefc
}
f010d697:	90                   	nop
f010d698:	c9                   	leave  
f010d699:	c3                   	ret    

f010d69a <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d69a:	55                   	push   %ebp
f010d69b:	89 e5                	mov    %esp,%ebp
f010d69d:	c7 05 fc ae 2b f0 03 	movl   $0x3,0xf02baefc
f010d6a4:	00 00 00 
f010d6a7:	90                   	nop
f010d6a8:	5d                   	pop    %ebp
f010d6a9:	c3                   	ret    

f010d6aa <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d6aa:	55                   	push   %ebp
f010d6ab:	89 e5                	mov    %esp,%ebp
f010d6ad:	c7 05 fc ae 2b f0 04 	movl   $0x4,0xf02baefc
f010d6b4:	00 00 00 
f010d6b7:	90                   	nop
f010d6b8:	5d                   	pop    %ebp
f010d6b9:	c3                   	ret    

f010d6ba <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d6ba:	55                   	push   %ebp
f010d6bb:	89 e5                	mov    %esp,%ebp
f010d6bd:	c7 05 fc ae 2b f0 05 	movl   $0x5,0xf02baefc
f010d6c4:	00 00 00 
f010d6c7:	90                   	nop
f010d6c8:	5d                   	pop    %ebp
f010d6c9:	c3                   	ret    

f010d6ca <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d6ca:	55                   	push   %ebp
f010d6cb:	89 e5                	mov    %esp,%ebp
f010d6cd:	c7 05 fc ae 2b f0 07 	movl   $0x7,0xf02baefc
f010d6d4:	00 00 00 
f010d6d7:	90                   	nop
f010d6d8:	5d                   	pop    %ebp
f010d6d9:	c3                   	ret    

f010d6da <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d6da:	55                   	push   %ebp
f010d6db:	89 e5                	mov    %esp,%ebp
f010d6dd:	c7 05 fc ae 2b f0 06 	movl   $0x6,0xf02baefc
f010d6e4:	00 00 00 
f010d6e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6ea:	a3 1c 2b 25 f0       	mov    %eax,0xf0252b1c
f010d6ef:	90                   	nop
f010d6f0:	5d                   	pop    %ebp
f010d6f1:	c3                   	ret    

f010d6f2 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d6f2:	55                   	push   %ebp
f010d6f3:	89 e5                	mov    %esp,%ebp
f010d6f5:	8b 15 fc ae 2b f0    	mov    0xf02baefc,%edx
f010d6fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6fe:	39 c2                	cmp    %eax,%edx
f010d700:	0f 94 c0             	sete   %al
f010d703:	0f b6 c0             	movzbl %al,%eax
f010d706:	5d                   	pop    %ebp
f010d707:	c3                   	ret    

f010d708 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d708:	55                   	push   %ebp
f010d709:	89 e5                	mov    %esp,%ebp
f010d70b:	a1 fc ae 2b f0       	mov    0xf02baefc,%eax
f010d710:	83 f8 03             	cmp    $0x3,%eax
f010d713:	75 07                	jne    f010d71c <isPageReplacmentAlgorithmCLOCK+0x14>
f010d715:	b8 01 00 00 00       	mov    $0x1,%eax
f010d71a:	eb 05                	jmp    f010d721 <isPageReplacmentAlgorithmCLOCK+0x19>
f010d71c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d721:	5d                   	pop    %ebp
f010d722:	c3                   	ret    

f010d723 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d723:	55                   	push   %ebp
f010d724:	89 e5                	mov    %esp,%ebp
f010d726:	a1 fc ae 2b f0       	mov    0xf02baefc,%eax
f010d72b:	83 f8 04             	cmp    $0x4,%eax
f010d72e:	75 07                	jne    f010d737 <isPageReplacmentAlgorithmFIFO+0x14>
f010d730:	b8 01 00 00 00       	mov    $0x1,%eax
f010d735:	eb 05                	jmp    f010d73c <isPageReplacmentAlgorithmFIFO+0x19>
f010d737:	b8 00 00 00 00       	mov    $0x0,%eax
f010d73c:	5d                   	pop    %ebp
f010d73d:	c3                   	ret    

f010d73e <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d73e:	55                   	push   %ebp
f010d73f:	89 e5                	mov    %esp,%ebp
f010d741:	a1 fc ae 2b f0       	mov    0xf02baefc,%eax
f010d746:	83 f8 05             	cmp    $0x5,%eax
f010d749:	75 07                	jne    f010d752 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d74b:	b8 01 00 00 00       	mov    $0x1,%eax
f010d750:	eb 05                	jmp    f010d757 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d752:	b8 00 00 00 00       	mov    $0x0,%eax
f010d757:	5d                   	pop    %ebp
f010d758:	c3                   	ret    

f010d759 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d759:	55                   	push   %ebp
f010d75a:	89 e5                	mov    %esp,%ebp
f010d75c:	a1 fc ae 2b f0       	mov    0xf02baefc,%eax
f010d761:	83 f8 07             	cmp    $0x7,%eax
f010d764:	75 07                	jne    f010d76d <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d766:	b8 01 00 00 00       	mov    $0x1,%eax
f010d76b:	eb 05                	jmp    f010d772 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d76d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d772:	5d                   	pop    %ebp
f010d773:	c3                   	ret    

f010d774 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d774:	55                   	push   %ebp
f010d775:	89 e5                	mov    %esp,%ebp
f010d777:	a1 fc ae 2b f0       	mov    0xf02baefc,%eax
f010d77c:	83 f8 06             	cmp    $0x6,%eax
f010d77f:	75 07                	jne    f010d788 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d781:	b8 01 00 00 00       	mov    $0x1,%eax
f010d786:	eb 05                	jmp    f010d78d <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d788:	b8 00 00 00 00       	mov    $0x0,%eax
f010d78d:	5d                   	pop    %ebp
f010d78e:	c3                   	ret    

f010d78f <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d78f:	55                   	push   %ebp
f010d790:	89 e5                	mov    %esp,%ebp
f010d792:	8b 45 08             	mov    0x8(%ebp),%eax
f010d795:	a3 cc ae 2b f0       	mov    %eax,0xf02baecc
f010d79a:	90                   	nop
f010d79b:	5d                   	pop    %ebp
f010d79c:	c3                   	ret    

f010d79d <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d79d:	55                   	push   %ebp
f010d79e:	89 e5                	mov    %esp,%ebp
f010d7a0:	a1 cc ae 2b f0       	mov    0xf02baecc,%eax
f010d7a5:	5d                   	pop    %ebp
f010d7a6:	c3                   	ret    

f010d7a7 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d7a7:	55                   	push   %ebp
f010d7a8:	89 e5                	mov    %esp,%ebp
f010d7aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7ad:	a3 14 af 2b f0       	mov    %eax,0xf02baf14
f010d7b2:	90                   	nop
f010d7b3:	5d                   	pop    %ebp
f010d7b4:	c3                   	ret    

f010d7b5 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d7b5:	55                   	push   %ebp
f010d7b6:	89 e5                	mov    %esp,%ebp
f010d7b8:	a1 14 af 2b f0       	mov    0xf02baf14,%eax
f010d7bd:	5d                   	pop    %ebp
f010d7be:	c3                   	ret    

f010d7bf <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d7bf:	55                   	push   %ebp
f010d7c0:	89 e5                	mov    %esp,%ebp
f010d7c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7c5:	a3 24 af 2b f0       	mov    %eax,0xf02baf24
f010d7ca:	90                   	nop
f010d7cb:	5d                   	pop    %ebp
f010d7cc:	c3                   	ret    

f010d7cd <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d7cd:	55                   	push   %ebp
f010d7ce:	89 e5                	mov    %esp,%ebp
f010d7d0:	a1 24 af 2b f0       	mov    0xf02baf24,%eax
f010d7d5:	5d                   	pop    %ebp
f010d7d6:	c3                   	ret    

f010d7d7 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d7d7:	55                   	push   %ebp
f010d7d8:	89 e5                	mov    %esp,%ebp
f010d7da:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d7dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7e0:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d7e6:	83 ec 04             	sub    $0x4,%esp
f010d7e9:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d7ec:	52                   	push   %edx
f010d7ed:	ff 75 0c             	pushl  0xc(%ebp)
f010d7f0:	50                   	push   %eax
f010d7f1:	e8 b9 9d ff ff       	call   f01075af <__static_cpt>
f010d7f6:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d7f9:	90                   	nop
f010d7fa:	c9                   	leave  
f010d7fb:	c3                   	ret    

f010d7fc <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d7fc:	55                   	push   %ebp
f010d7fd:	89 e5                	mov    %esp,%ebp
f010d7ff:	83 ec 18             	sub    $0x18,%esp
	uint32 wsSize = env_page_ws_get_size(curenv);
f010d802:	83 ec 0c             	sub    $0xc,%esp
f010d805:	ff 75 08             	pushl  0x8(%ebp)
f010d808:	e8 ea a9 ff ff       	call   f01081f7 <env_page_ws_get_size>
f010d80d:	83 c4 10             	add    $0x10,%esp
f010d810:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(wsSize < (curenv->page_WS_max_size))
f010d813:	8b 45 08             	mov    0x8(%ebp),%eax
f010d816:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010d81c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d81f:	76 14                	jbe    f010d835 <page_fault_handler+0x39>
	{
		//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
f010d821:	83 ec 04             	sub    $0x4,%esp
f010d824:	68 a0 32 13 f0       	push   $0xf01332a0
f010d829:	6a 55                	push   $0x55
f010d82b:	68 83 32 13 f0       	push   $0xf0133283
f010d830:	e8 7b 29 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010d835:	e8 e9 fe ff ff       	call   f010d723 <isPageReplacmentAlgorithmFIFO>
f010d83a:	85 c0                	test   %eax,%eax
f010d83c:	74 14                	je     f010d852 <page_fault_handler+0x56>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010d83e:	83 ec 04             	sub    $0x4,%esp
f010d841:	68 dc 32 13 f0       	push   $0xf01332dc
f010d846:	6a 61                	push   $0x61
f010d848:	68 83 32 13 f0       	push   $0xf0133283
f010d84d:	e8 5e 29 ff ff       	call   f01001b0 <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010d852:	83 ec 0c             	sub    $0xc,%esp
f010d855:	6a 02                	push   $0x2
f010d857:	e8 96 fe ff ff       	call   f010d6f2 <isPageReplacmentAlgorithmLRU>
f010d85c:	83 c4 10             	add    $0x10,%esp
f010d85f:	85 c0                	test   %eax,%eax
f010d861:	74 14                	je     f010d877 <page_fault_handler+0x7b>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010d863:	83 ec 04             	sub    $0x4,%esp
f010d866:	68 20 33 13 f0       	push   $0xf0133320
f010d86b:	6a 67                	push   $0x67
f010d86d:	68 83 32 13 f0       	push   $0xf0133283
f010d872:	e8 39 29 ff ff       	call   f01001b0 <_panic>

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010d877:	90                   	nop
f010d878:	c9                   	leave  
f010d879:	c3                   	ret    

f010d87a <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d87a:	55                   	push   %ebp
f010d87b:	89 e5                	mov    %esp,%ebp
f010d87d:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d880:	83 ec 04             	sub    $0x4,%esp
f010d883:	68 64 33 13 f0       	push   $0xf0133364
f010d888:	6a 70                	push   $0x70
f010d88a:	68 83 32 13 f0       	push   $0xf0133283
f010d88f:	e8 1c 29 ff ff       	call   f01001b0 <_panic>

f010d894 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d894:	55                   	push   %ebp
f010d895:	89 e5                	mov    %esp,%ebp
f010d897:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d89a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d8a1:	e9 aa 00 00 00       	jmp    f010d950 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d8a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d8a9:	89 d0                	mov    %edx,%eax
f010d8ab:	c1 e0 02             	shl    $0x2,%eax
f010d8ae:	01 d0                	add    %edx,%eax
f010d8b0:	01 c0                	add    %eax,%eax
f010d8b2:	01 d0                	add    %edx,%eax
f010d8b4:	01 c0                	add    %eax,%eax
f010d8b6:	01 d0                	add    %edx,%eax
f010d8b8:	c1 e0 02             	shl    $0x2,%eax
f010d8bb:	05 a0 8a 2b f0       	add    $0xf02b8aa0,%eax
f010d8c0:	83 ec 04             	sub    $0x4,%esp
f010d8c3:	6a 5c                	push   $0x5c
f010d8c5:	6a 00                	push   $0x0
f010d8c7:	50                   	push   %eax
f010d8c8:	e8 d1 16 02 00       	call   f012ef9e <memset>
f010d8cd:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d8d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d8d3:	89 d0                	mov    %edx,%eax
f010d8d5:	c1 e0 02             	shl    $0x2,%eax
f010d8d8:	01 d0                	add    %edx,%eax
f010d8da:	01 c0                	add    %eax,%eax
f010d8dc:	01 d0                	add    %edx,%eax
f010d8de:	01 c0                	add    %eax,%eax
f010d8e0:	01 d0                	add    %edx,%eax
f010d8e2:	c1 e0 02             	shl    $0x2,%eax
f010d8e5:	05 f8 8a 2b f0       	add    $0xf02b8af8,%eax
f010d8ea:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d8ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d8f0:	89 d0                	mov    %edx,%eax
f010d8f2:	c1 e0 02             	shl    $0x2,%eax
f010d8f5:	01 d0                	add    %edx,%eax
f010d8f7:	01 c0                	add    %eax,%eax
f010d8f9:	01 d0                	add    %edx,%eax
f010d8fb:	01 c0                	add    %eax,%eax
f010d8fd:	01 d0                	add    %edx,%eax
f010d8ff:	c1 e0 02             	shl    $0x2,%eax
f010d902:	05 e4 8a 2b f0       	add    $0xf02b8ae4,%eax
f010d907:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d90d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d910:	89 d0                	mov    %edx,%eax
f010d912:	c1 e0 02             	shl    $0x2,%eax
f010d915:	01 d0                	add    %edx,%eax
f010d917:	01 c0                	add    %eax,%eax
f010d919:	01 d0                	add    %edx,%eax
f010d91b:	01 c0                	add    %eax,%eax
f010d91d:	01 d0                	add    %edx,%eax
f010d91f:	c1 e0 02             	shl    $0x2,%eax
f010d922:	05 e8 8a 2b f0       	add    $0xf02b8ae8,%eax
f010d927:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d92d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d930:	89 d0                	mov    %edx,%eax
f010d932:	c1 e0 02             	shl    $0x2,%eax
f010d935:	01 d0                	add    %edx,%eax
f010d937:	01 c0                	add    %eax,%eax
f010d939:	01 d0                	add    %edx,%eax
f010d93b:	01 c0                	add    %eax,%eax
f010d93d:	01 d0                	add    %edx,%eax
f010d93f:	c1 e0 02             	shl    $0x2,%eax
f010d942:	05 f0 8a 2b f0       	add    $0xf02b8af0,%eax
f010d947:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d94d:	ff 45 f4             	incl   -0xc(%ebp)
f010d950:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d954:	0f 8e 4c ff ff ff    	jle    f010d8a6 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d95a:	90                   	nop
f010d95b:	c9                   	leave  
f010d95c:	c3                   	ret    

f010d95d <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d95d:	55                   	push   %ebp
f010d95e:	89 e5                	mov    %esp,%ebp
f010d960:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010d963:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d96a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010d971:	eb 2b                	jmp    f010d99e <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d973:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010d976:	89 d0                	mov    %edx,%eax
f010d978:	c1 e0 02             	shl    $0x2,%eax
f010d97b:	01 d0                	add    %edx,%eax
f010d97d:	01 c0                	add    %eax,%eax
f010d97f:	01 d0                	add    %edx,%eax
f010d981:	01 c0                	add    %eax,%eax
f010d983:	01 d0                	add    %edx,%eax
f010d985:	c1 e0 02             	shl    $0x2,%eax
f010d988:	05 f8 8a 2b f0       	add    $0xf02b8af8,%eax
f010d98d:	8a 00                	mov    (%eax),%al
f010d98f:	84 c0                	test   %al,%al
f010d991:	74 08                	je     f010d99b <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d993:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d996:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010d999:	eb 09                	jmp    f010d9a4 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d99b:	ff 45 f8             	incl   -0x8(%ebp)
f010d99e:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)
f010d9a2:	7e cf                	jle    f010d973 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d9a4:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010d9a8:	75 07                	jne    f010d9b1 <allocate_semaphore_object+0x54>
	{
		return E_NO_SEMAPHORE ;
f010d9aa:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010d9af:	eb 40                	jmp    f010d9f1 <allocate_semaphore_object+0x94>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d9b1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d9b4:	89 d0                	mov    %edx,%eax
f010d9b6:	c1 e0 02             	shl    $0x2,%eax
f010d9b9:	01 d0                	add    %edx,%eax
f010d9bb:	01 c0                	add    %eax,%eax
f010d9bd:	01 d0                	add    %edx,%eax
f010d9bf:	01 c0                	add    %eax,%eax
f010d9c1:	01 d0                	add    %edx,%eax
f010d9c3:	c1 e0 02             	shl    $0x2,%eax
f010d9c6:	8d 90 a0 8a 2b f0    	lea    -0xfd47560(%eax),%edx
f010d9cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9cf:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010d9d1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d9d4:	89 d0                	mov    %edx,%eax
f010d9d6:	c1 e0 02             	shl    $0x2,%eax
f010d9d9:	01 d0                	add    %edx,%eax
f010d9db:	01 c0                	add    %eax,%eax
f010d9dd:	01 d0                	add    %edx,%eax
f010d9df:	01 c0                	add    %eax,%eax
f010d9e1:	01 d0                	add    %edx,%eax
f010d9e3:	c1 e0 02             	shl    $0x2,%eax
f010d9e6:	05 f8 8a 2b f0       	add    $0xf02b8af8,%eax
f010d9eb:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010d9ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d9f1:	c9                   	leave  
f010d9f2:	c3                   	ret    

f010d9f3 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010d9f3:	55                   	push   %ebp
f010d9f4:	89 e5                	mov    %esp,%ebp
f010d9f6:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010d9f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010da00:	eb 7a                	jmp    f010da7c <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010da02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da05:	89 d0                	mov    %edx,%eax
f010da07:	c1 e0 02             	shl    $0x2,%eax
f010da0a:	01 d0                	add    %edx,%eax
f010da0c:	01 c0                	add    %eax,%eax
f010da0e:	01 d0                	add    %edx,%eax
f010da10:	01 c0                	add    %eax,%eax
f010da12:	01 d0                	add    %edx,%eax
f010da14:	c1 e0 02             	shl    $0x2,%eax
f010da17:	05 f8 8a 2b f0       	add    $0xf02b8af8,%eax
f010da1c:	8a 00                	mov    (%eax),%al
f010da1e:	84 c0                	test   %al,%al
f010da20:	75 56                	jne    f010da78 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010da22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da25:	89 d0                	mov    %edx,%eax
f010da27:	c1 e0 02             	shl    $0x2,%eax
f010da2a:	01 d0                	add    %edx,%eax
f010da2c:	01 c0                	add    %eax,%eax
f010da2e:	01 d0                	add    %edx,%eax
f010da30:	01 c0                	add    %eax,%eax
f010da32:	01 d0                	add    %edx,%eax
f010da34:	c1 e0 02             	shl    $0x2,%eax
f010da37:	05 a0 8a 2b f0       	add    $0xf02b8aa0,%eax
f010da3c:	8b 00                	mov    (%eax),%eax
f010da3e:	3b 45 08             	cmp    0x8(%ebp),%eax
f010da41:	75 36                	jne    f010da79 <get_semaphore_object_ID+0x86>
f010da43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da46:	89 d0                	mov    %edx,%eax
f010da48:	c1 e0 02             	shl    $0x2,%eax
f010da4b:	01 d0                	add    %edx,%eax
f010da4d:	01 c0                	add    %eax,%eax
f010da4f:	01 d0                	add    %edx,%eax
f010da51:	01 c0                	add    %eax,%eax
f010da53:	01 d0                	add    %edx,%eax
f010da55:	c1 e0 02             	shl    $0x2,%eax
f010da58:	05 a0 8a 2b f0       	add    $0xf02b8aa0,%eax
f010da5d:	83 c0 04             	add    $0x4,%eax
f010da60:	83 ec 08             	sub    $0x8,%esp
f010da63:	50                   	push   %eax
f010da64:	ff 75 0c             	pushl  0xc(%ebp)
f010da67:	e8 50 14 02 00       	call   f012eebc <strcmp>
f010da6c:	83 c4 10             	add    $0x10,%esp
f010da6f:	85 c0                	test   %eax,%eax
f010da71:	75 06                	jne    f010da79 <get_semaphore_object_ID+0x86>
		{
			return i;
f010da73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da76:	eb 0f                	jmp    f010da87 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010da78:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010da79:	ff 45 f4             	incl   -0xc(%ebp)
f010da7c:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010da80:	7e 80                	jle    f010da02 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010da82:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010da87:	c9                   	leave  
f010da88:	c3                   	ret    

f010da89 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010da89:	55                   	push   %ebp
f010da8a:	89 e5                	mov    %esp,%ebp
f010da8c:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010da8f:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010da93:	76 0a                	jbe    f010da9f <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010da95:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010da9a:	e9 ac 00 00 00       	jmp    f010db4b <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010da9f:	8b 55 08             	mov    0x8(%ebp),%edx
f010daa2:	89 d0                	mov    %edx,%eax
f010daa4:	c1 e0 02             	shl    $0x2,%eax
f010daa7:	01 d0                	add    %edx,%eax
f010daa9:	01 c0                	add    %eax,%eax
f010daab:	01 d0                	add    %edx,%eax
f010daad:	01 c0                	add    %eax,%eax
f010daaf:	01 d0                	add    %edx,%eax
f010dab1:	c1 e0 02             	shl    $0x2,%eax
f010dab4:	05 a0 8a 2b f0       	add    $0xf02b8aa0,%eax
f010dab9:	83 ec 04             	sub    $0x4,%esp
f010dabc:	6a 5c                	push   $0x5c
f010dabe:	6a 00                	push   $0x0
f010dac0:	50                   	push   %eax
f010dac1:	e8 d8 14 02 00       	call   f012ef9e <memset>
f010dac6:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010dac9:	8b 55 08             	mov    0x8(%ebp),%edx
f010dacc:	89 d0                	mov    %edx,%eax
f010dace:	c1 e0 02             	shl    $0x2,%eax
f010dad1:	01 d0                	add    %edx,%eax
f010dad3:	01 c0                	add    %eax,%eax
f010dad5:	01 d0                	add    %edx,%eax
f010dad7:	01 c0                	add    %eax,%eax
f010dad9:	01 d0                	add    %edx,%eax
f010dadb:	c1 e0 02             	shl    $0x2,%eax
f010dade:	05 f8 8a 2b f0       	add    $0xf02b8af8,%eax
f010dae3:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010dae6:	8b 55 08             	mov    0x8(%ebp),%edx
f010dae9:	89 d0                	mov    %edx,%eax
f010daeb:	c1 e0 02             	shl    $0x2,%eax
f010daee:	01 d0                	add    %edx,%eax
f010daf0:	01 c0                	add    %eax,%eax
f010daf2:	01 d0                	add    %edx,%eax
f010daf4:	01 c0                	add    %eax,%eax
f010daf6:	01 d0                	add    %edx,%eax
f010daf8:	c1 e0 02             	shl    $0x2,%eax
f010dafb:	05 e4 8a 2b f0       	add    $0xf02b8ae4,%eax
f010db00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db06:	8b 55 08             	mov    0x8(%ebp),%edx
f010db09:	89 d0                	mov    %edx,%eax
f010db0b:	c1 e0 02             	shl    $0x2,%eax
f010db0e:	01 d0                	add    %edx,%eax
f010db10:	01 c0                	add    %eax,%eax
f010db12:	01 d0                	add    %edx,%eax
f010db14:	01 c0                	add    %eax,%eax
f010db16:	01 d0                	add    %edx,%eax
f010db18:	c1 e0 02             	shl    $0x2,%eax
f010db1b:	05 e8 8a 2b f0       	add    $0xf02b8ae8,%eax
f010db20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db26:	8b 55 08             	mov    0x8(%ebp),%edx
f010db29:	89 d0                	mov    %edx,%eax
f010db2b:	c1 e0 02             	shl    $0x2,%eax
f010db2e:	01 d0                	add    %edx,%eax
f010db30:	01 c0                	add    %eax,%eax
f010db32:	01 d0                	add    %edx,%eax
f010db34:	01 c0                	add    %eax,%eax
f010db36:	01 d0                	add    %edx,%eax
f010db38:	c1 e0 02             	shl    $0x2,%eax
f010db3b:	05 f0 8a 2b f0       	add    $0xf02b8af0,%eax
f010db40:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010db46:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010db4b:	c9                   	leave  
f010db4c:	c3                   	ret    

f010db4d <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010db4d:	55                   	push   %ebp
f010db4e:	89 e5                	mov    %esp,%ebp
f010db50:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010db53:	83 ec 04             	sub    $0x4,%esp
f010db56:	68 88 33 13 f0       	push   $0xf0133388
f010db5b:	68 95 00 00 00       	push   $0x95
f010db60:	68 b6 33 13 f0       	push   $0xf01333b6
f010db65:	e8 46 26 ff ff       	call   f01001b0 <_panic>

f010db6a <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010db6a:	55                   	push   %ebp
f010db6b:	89 e5                	mov    %esp,%ebp
f010db6d:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010db70:	83 ec 04             	sub    $0x4,%esp
f010db73:	68 d4 33 13 f0       	push   $0xf01333d4
f010db78:	68 9e 00 00 00       	push   $0x9e
f010db7d:	68 b6 33 13 f0       	push   $0xf01333b6
f010db82:	e8 29 26 ff ff       	call   f01001b0 <_panic>

f010db87 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010db87:	55                   	push   %ebp
f010db88:	89 e5                	mov    %esp,%ebp
f010db8a:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010db8d:	83 ec 04             	sub    $0x4,%esp
f010db90:	68 00 34 13 f0       	push   $0xf0133400
f010db95:	68 a6 00 00 00       	push   $0xa6
f010db9a:	68 b6 33 13 f0       	push   $0xf01333b6
f010db9f:	e8 0c 26 ff ff       	call   f01001b0 <_panic>

f010dba4 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010dba4:	55                   	push   %ebp
f010dba5:	89 e5                	mov    %esp,%ebp
f010dba7:	c7 05 d8 ae 2b f0 01 	movl   $0x1,0xf02baed8
f010dbae:	00 00 00 
f010dbb1:	90                   	nop
f010dbb2:	5d                   	pop    %ebp
f010dbb3:	c3                   	ret    

f010dbb4 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010dbb4:	55                   	push   %ebp
f010dbb5:	89 e5                	mov    %esp,%ebp
f010dbb7:	c7 05 d8 ae 2b f0 02 	movl   $0x2,0xf02baed8
f010dbbe:	00 00 00 
f010dbc1:	90                   	nop
f010dbc2:	5d                   	pop    %ebp
f010dbc3:	c3                   	ret    

f010dbc4 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010dbc4:	55                   	push   %ebp
f010dbc5:	89 e5                	mov    %esp,%ebp
f010dbc7:	c7 05 d8 ae 2b f0 03 	movl   $0x3,0xf02baed8
f010dbce:	00 00 00 
f010dbd1:	90                   	nop
f010dbd2:	5d                   	pop    %ebp
f010dbd3:	c3                   	ret    

f010dbd4 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010dbd4:	55                   	push   %ebp
f010dbd5:	89 e5                	mov    %esp,%ebp
f010dbd7:	a1 d8 ae 2b f0       	mov    0xf02baed8,%eax
f010dbdc:	83 f8 01             	cmp    $0x1,%eax
f010dbdf:	75 04                	jne    f010dbe5 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010dbe1:	b0 01                	mov    $0x1,%al
f010dbe3:	eb 02                	jmp    f010dbe7 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010dbe5:	b0 00                	mov    $0x0,%al
f010dbe7:	5d                   	pop    %ebp
f010dbe8:	c3                   	ret    

f010dbe9 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010dbe9:	55                   	push   %ebp
f010dbea:	89 e5                	mov    %esp,%ebp
f010dbec:	a1 d8 ae 2b f0       	mov    0xf02baed8,%eax
f010dbf1:	83 f8 02             	cmp    $0x2,%eax
f010dbf4:	75 04                	jne    f010dbfa <isKHeapPlacementStrategyBESTFIT+0x11>
f010dbf6:	b0 01                	mov    $0x1,%al
f010dbf8:	eb 02                	jmp    f010dbfc <isKHeapPlacementStrategyBESTFIT+0x13>
f010dbfa:	b0 00                	mov    $0x0,%al
f010dbfc:	5d                   	pop    %ebp
f010dbfd:	c3                   	ret    

f010dbfe <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010dbfe:	55                   	push   %ebp
f010dbff:	89 e5                	mov    %esp,%ebp
f010dc01:	a1 d8 ae 2b f0       	mov    0xf02baed8,%eax
f010dc06:	83 f8 03             	cmp    $0x3,%eax
f010dc09:	75 04                	jne    f010dc0f <isKHeapPlacementStrategyNEXTFIT+0x11>
f010dc0b:	b0 01                	mov    $0x1,%al
f010dc0d:	eb 02                	jmp    f010dc11 <isKHeapPlacementStrategyNEXTFIT+0x13>
f010dc0f:	b0 00                	mov    $0x0,%al
f010dc11:	5d                   	pop    %ebp
f010dc12:	c3                   	ret    

f010dc13 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010dc13:	55                   	push   %ebp
f010dc14:	89 e5                	mov    %esp,%ebp
f010dc16:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dc19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dc20:	eb 26                	jmp    f010dc48 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010dc22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc25:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010dc2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc2f:	01 c2                	add    %eax,%edx
f010dc31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc34:	40                   	inc    %eax
f010dc35:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010dc3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc3f:	01 c8                	add    %ecx,%eax
f010dc41:	8b 00                	mov    (%eax),%eax
f010dc43:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dc45:	ff 45 f4             	incl   -0xc(%ebp)
f010dc48:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc4b:	48                   	dec    %eax
f010dc4c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dc4f:	7f d1                	jg     f010dc22 <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010dc51:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010dc54:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010dc5b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010dc62:	eb 35                	jmp    f010dc99 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010dc64:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dc67:	89 d0                	mov    %edx,%eax
f010dc69:	01 c0                	add    %eax,%eax
f010dc6b:	01 d0                	add    %edx,%eax
f010dc6d:	c1 e0 02             	shl    $0x2,%eax
f010dc70:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f010dc75:	8b 10                	mov    (%eax),%edx
f010dc77:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc7a:	8b 00                	mov    (%eax),%eax
f010dc7c:	83 ec 08             	sub    $0x8,%esp
f010dc7f:	52                   	push   %edx
f010dc80:	50                   	push   %eax
f010dc81:	e8 36 12 02 00       	call   f012eebc <strcmp>
f010dc86:	83 c4 10             	add    $0x10,%esp
f010dc89:	85 c0                	test   %eax,%eax
f010dc8b:	75 09                	jne    f010dc96 <tst_handler+0x83>
		{
			test_found = 1;
f010dc8d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010dc94:	eb 0f                	jmp    f010dca5 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010dc96:	ff 45 ec             	incl   -0x14(%ebp)
f010dc99:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dc9c:	a1 fc ca 18 f0       	mov    0xf018cafc,%eax
f010dca1:	39 c2                	cmp    %eax,%edx
f010dca3:	72 bf                	jb     f010dc64 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010dca5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010dca9:	74 29                	je     f010dcd4 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010dcab:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dcae:	89 d0                	mov    %edx,%eax
f010dcb0:	01 c0                	add    %eax,%eax
f010dcb2:	01 d0                	add    %edx,%eax
f010dcb4:	c1 e0 02             	shl    $0x2,%eax
f010dcb7:	05 68 ca 18 f0       	add    $0xf018ca68,%eax
f010dcbc:	8b 00                	mov    (%eax),%eax
f010dcbe:	83 ec 08             	sub    $0x8,%esp
f010dcc1:	ff 75 0c             	pushl  0xc(%ebp)
f010dcc4:	ff 75 08             	pushl  0x8(%ebp)
f010dcc7:	ff d0                	call   *%eax
f010dcc9:	83 c4 10             	add    $0x10,%esp
f010dccc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010dccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dcd2:	eb 1b                	jmp    f010dcef <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010dcd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcd7:	8b 00                	mov    (%eax),%eax
f010dcd9:	83 ec 08             	sub    $0x8,%esp
f010dcdc:	50                   	push   %eax
f010dcdd:	68 b4 36 13 f0       	push   $0xf01336b4
f010dce2:	e8 4a 31 ff ff       	call   f0100e31 <cprintf>
f010dce7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dcea:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010dcef:	c9                   	leave  
f010dcf0:	c3                   	ret    

f010dcf1 <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010dcf1:	55                   	push   %ebp
f010dcf2:	89 e5                	mov    %esp,%ebp
f010dcf4:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010dcf7:	e8 3d 70 01 00       	call   f0124d39 <test_three_creation_functions>
	return 0;
f010dcfc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd01:	c9                   	leave  
f010dd02:	c3                   	ret    

f010dd03 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010dd03:	55                   	push   %ebp
f010dd04:	89 e5                	mov    %esp,%ebp
f010dd06:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010dd09:	e8 ff 91 00 00       	call   f0116f0d <test_priority_normal_and_higher>
	return 0;
f010dd0e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd13:	c9                   	leave  
f010dd14:	c3                   	ret    

f010dd15 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010dd15:	55                   	push   %ebp
f010dd16:	89 e5                	mov    %esp,%ebp
f010dd18:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010dd1b:	e8 57 9c 00 00       	call   f0117977 <test_priority_normal_and_lower>
	return 0;
f010dd20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd25:	c9                   	leave  
f010dd26:	c3                   	ret    

f010dd27 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010dd27:	55                   	push   %ebp
f010dd28:	89 e5                	mov    %esp,%ebp
f010dd2a:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010dd2d:	e8 1b 72 01 00       	call   f0124f4d <test_kfreeall>
	return 0;
f010dd32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd37:	c9                   	leave  
f010dd38:	c3                   	ret    

f010dd39 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010dd39:	55                   	push   %ebp
f010dd3a:	89 e5                	mov    %esp,%ebp
f010dd3c:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010dd3f:	e8 a3 86 01 00       	call   f01263e7 <test_kexpand>
	return 0;
f010dd44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd49:	c9                   	leave  
f010dd4a:	c3                   	ret    

f010dd4b <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010dd4b:	55                   	push   %ebp
f010dd4c:	89 e5                	mov    %esp,%ebp
f010dd4e:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010dd51:	e8 62 92 01 00       	call   f0126fb8 <test_kshrink>
	return 0;
f010dd56:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd5b:	c9                   	leave  
f010dd5c:	c3                   	ret    

f010dd5d <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010dd5d:	55                   	push   %ebp
f010dd5e:	89 e5                	mov    %esp,%ebp
f010dd60:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010dd63:	e8 57 9f 01 00       	call   f0127cbf <test_kfreelast>
	return 0;
f010dd68:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd6d:	c9                   	leave  
f010dd6e:	c3                   	ret    

f010dd6f <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010dd6f:	55                   	push   %ebp
f010dd70:	89 e5                	mov    %esp,%ebp
f010dd72:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010dd75:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd78:	83 c0 04             	add    $0x4,%eax
f010dd7b:	8b 00                	mov    (%eax),%eax
f010dd7d:	83 ec 04             	sub    $0x4,%esp
f010dd80:	6a 0a                	push   $0xa
f010dd82:	6a 00                	push   $0x0
f010dd84:	50                   	push   %eax
f010dd85:	e8 86 13 02 00       	call   f012f110 <strtol>
f010dd8a:	83 c4 10             	add    $0x10,%esp
f010dd8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010dd90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010dd97:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010dd9e:	a1 84 8a 2b f0       	mov    0xf02b8a84,%eax
f010dda3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dda6:	eb 3b                	jmp    f010dde3 <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010dda8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ddab:	83 c0 5c             	add    $0x5c,%eax
f010ddae:	83 ec 08             	sub    $0x8,%esp
f010ddb1:	68 c7 36 13 f0       	push   $0xf01336c7
f010ddb6:	50                   	push   %eax
f010ddb7:	e8 00 11 02 00       	call   f012eebc <strcmp>
f010ddbc:	83 c4 10             	add    $0x10,%esp
f010ddbf:	85 c0                	test   %eax,%eax
f010ddc1:	75 12                	jne    f010ddd5 <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010ddc3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ddc7:	74 07                	je     f010ddd0 <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010ddc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010ddd0:	ff 45 f4             	incl   -0xc(%ebp)
f010ddd3:	eb 06                	jmp    f010dddb <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010ddd5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ddd9:	74 31                	je     f010de0c <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010dddb:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f010dde0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dde3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010dde7:	74 08                	je     f010ddf1 <tst_sc_MLFQ+0x82>
f010dde9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ddec:	8b 40 44             	mov    0x44(%eax),%eax
f010ddef:	eb 05                	jmp    f010ddf6 <tst_sc_MLFQ+0x87>
f010ddf1:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddf6:	a3 8c 8a 2b f0       	mov    %eax,0xf02b8a8c
f010ddfb:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f010de00:	85 c0                	test   %eax,%eax
f010de02:	75 a4                	jne    f010dda8 <tst_sc_MLFQ+0x39>
f010de04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010de08:	75 9e                	jne    f010dda8 <tst_sc_MLFQ+0x39>
f010de0a:	eb 01                	jmp    f010de0d <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010de0c:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010de0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de10:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010de13:	75 12                	jne    f010de27 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010de15:	83 ec 0c             	sub    $0xc,%esp
f010de18:	68 d0 36 13 f0       	push   $0xf01336d0
f010de1d:	e8 0f 30 ff ff       	call   f0100e31 <cprintf>
f010de22:	83 c4 10             	add    $0x10,%esp
f010de25:	eb 17                	jmp    f010de3e <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010de27:	83 ec 04             	sub    $0x4,%esp
f010de2a:	68 09 37 13 f0       	push   $0xf0133709
f010de2f:	68 94 00 00 00       	push   $0x94
f010de34:	68 1f 37 13 f0       	push   $0xf013371f
f010de39:	e8 72 23 ff ff       	call   f01001b0 <_panic>
	}
	return 0;
f010de3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de43:	c9                   	leave  
f010de44:	c3                   	ret    

f010de45 <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010de45:	55                   	push   %ebp
f010de46:	89 e5                	mov    %esp,%ebp
f010de48:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010de4b:	e8 80 3d 00 00       	call   f0111bd0 <TestAutoCompleteCommand>
f010de50:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010de53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de58:	c9                   	leave  
f010de59:	c3                   	ret    

f010de5a <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010de5a:	55                   	push   %ebp
f010de5b:	89 e5                	mov    %esp,%ebp
f010de5d:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010de60:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010de64:	74 1a                	je     f010de80 <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010de66:	83 ec 0c             	sub    $0xc,%esp
f010de69:	68 38 37 13 f0       	push   $0xf0133738
f010de6e:	e8 be 2f ff ff       	call   f0100e31 <cprintf>
f010de73:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de76:	b8 00 00 00 00       	mov    $0x0,%eax
f010de7b:	e9 2f 01 00 00       	jmp    f010dfaf <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010de80:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de83:	83 c0 04             	add    $0x4,%eax
f010de86:	8b 00                	mov    (%eax),%eax
f010de88:	83 ec 08             	sub    $0x8,%esp
f010de8b:	68 75 37 13 f0       	push   $0xf0133775
f010de90:	50                   	push   %eax
f010de91:	e8 26 10 02 00       	call   f012eebc <strcmp>
f010de96:	83 c4 10             	add    $0x10,%esp
f010de99:	85 c0                	test   %eax,%eax
f010de9b:	75 0a                	jne    f010dea7 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010de9d:	e8 80 06 00 00       	call   f010e522 <test_initialize_dynamic_allocator>
f010dea2:	e9 03 01 00 00       	jmp    f010dfaa <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010dea7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010deaa:	83 c0 04             	add    $0x4,%eax
f010dead:	8b 00                	mov    (%eax),%eax
f010deaf:	83 ec 08             	sub    $0x8,%esp
f010deb2:	68 7a 37 13 f0       	push   $0xf013377a
f010deb7:	50                   	push   %eax
f010deb8:	e8 ff 0f 02 00       	call   f012eebc <strcmp>
f010debd:	83 c4 10             	add    $0x10,%esp
f010dec0:	85 c0                	test   %eax,%eax
f010dec2:	75 0a                	jne    f010dece <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010dec4:	e8 a1 0a 00 00       	call   f010e96a <test_alloc_block_FF>
f010dec9:	e9 dc 00 00 00       	jmp    f010dfaa <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010dece:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ded1:	83 c0 04             	add    $0x4,%eax
f010ded4:	8b 00                	mov    (%eax),%eax
f010ded6:	83 ec 08             	sub    $0x8,%esp
f010ded9:	68 82 37 13 f0       	push   $0xf0133782
f010dede:	50                   	push   %eax
f010dedf:	e8 d8 0f 02 00       	call   f012eebc <strcmp>
f010dee4:	83 c4 10             	add    $0x10,%esp
f010dee7:	85 c0                	test   %eax,%eax
f010dee9:	75 0a                	jne    f010def5 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010deeb:	e8 84 0e 00 00       	call   f010ed74 <test_alloc_block_BF>
f010def0:	e9 b5 00 00 00       	jmp    f010dfaa <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010def5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010def8:	83 c0 04             	add    $0x4,%eax
f010defb:	8b 00                	mov    (%eax),%eax
f010defd:	83 ec 08             	sub    $0x8,%esp
f010df00:	68 8a 37 13 f0       	push   $0xf013378a
f010df05:	50                   	push   %eax
f010df06:	e8 b1 0f 02 00       	call   f012eebc <strcmp>
f010df0b:	83 c4 10             	add    $0x10,%esp
f010df0e:	85 c0                	test   %eax,%eax
f010df10:	75 0a                	jne    f010df1c <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010df12:	e8 b3 12 00 00       	call   f010f1ca <test_alloc_block_NF>
f010df17:	e9 8e 00 00 00       	jmp    f010dfaa <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010df1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df1f:	83 c0 04             	add    $0x4,%eax
f010df22:	8b 00                	mov    (%eax),%eax
f010df24:	83 ec 08             	sub    $0x8,%esp
f010df27:	68 92 37 13 f0       	push   $0xf0133792
f010df2c:	50                   	push   %eax
f010df2d:	e8 8a 0f 02 00       	call   f012eebc <strcmp>
f010df32:	83 c4 10             	add    $0x10,%esp
f010df35:	85 c0                	test   %eax,%eax
f010df37:	75 07                	jne    f010df40 <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010df39:	e8 92 12 00 00       	call   f010f1d0 <test_free_block_FF>
f010df3e:	eb 6a                	jmp    f010dfaa <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010df40:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df43:	83 c0 04             	add    $0x4,%eax
f010df46:	8b 00                	mov    (%eax),%eax
f010df48:	83 ec 08             	sub    $0x8,%esp
f010df4b:	68 99 37 13 f0       	push   $0xf0133799
f010df50:	50                   	push   %eax
f010df51:	e8 66 0f 02 00       	call   f012eebc <strcmp>
f010df56:	83 c4 10             	add    $0x10,%esp
f010df59:	85 c0                	test   %eax,%eax
f010df5b:	75 07                	jne    f010df64 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010df5d:	e8 d3 20 00 00       	call   f0110035 <test_free_block_BF>
f010df62:	eb 46                	jmp    f010dfaa <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010df64:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df67:	83 c0 04             	add    $0x4,%eax
f010df6a:	8b 00                	mov    (%eax),%eax
f010df6c:	83 ec 08             	sub    $0x8,%esp
f010df6f:	68 a0 37 13 f0       	push   $0xf01337a0
f010df74:	50                   	push   %eax
f010df75:	e8 42 0f 02 00       	call   f012eebc <strcmp>
f010df7a:	83 c4 10             	add    $0x10,%esp
f010df7d:	85 c0                	test   %eax,%eax
f010df7f:	75 07                	jne    f010df88 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010df81:	e8 c1 2e 00 00       	call   f0110e47 <test_free_block_NF>
f010df86:	eb 22                	jmp    f010dfaa <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010df88:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df8b:	83 c0 04             	add    $0x4,%eax
f010df8e:	8b 00                	mov    (%eax),%eax
f010df90:	83 ec 08             	sub    $0x8,%esp
f010df93:	68 a7 37 13 f0       	push   $0xf01337a7
f010df98:	50                   	push   %eax
f010df99:	e8 1e 0f 02 00       	call   f012eebc <strcmp>
f010df9e:	83 c4 10             	add    $0x10,%esp
f010dfa1:	85 c0                	test   %eax,%eax
f010dfa3:	75 05                	jne    f010dfaa <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010dfa5:	e8 ba 2e 00 00       	call   f0110e64 <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010dfaa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dfaf:	c9                   	leave  
f010dfb0:	c3                   	ret    

f010dfb1 <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010dfb1:	55                   	push   %ebp
f010dfb2:	89 e5                	mov    %esp,%ebp
f010dfb4:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010dfb7:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dfbb:	74 1a                	je     f010dfd7 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010dfbd:	83 ec 0c             	sub    $0xc,%esp
f010dfc0:	68 b4 37 13 f0       	push   $0xf01337b4
f010dfc5:	e8 67 2e ff ff       	call   f0100e31 <cprintf>
f010dfca:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfcd:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfd2:	e9 e1 00 00 00       	jmp    f010e0b8 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010dfd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfda:	83 c0 04             	add    $0x4,%eax
f010dfdd:	8b 00                	mov    (%eax),%eax
f010dfdf:	83 ec 08             	sub    $0x8,%esp
f010dfe2:	68 ed 37 13 f0       	push   $0xf01337ed
f010dfe7:	50                   	push   %eax
f010dfe8:	e8 cf 0e 02 00       	call   f012eebc <strcmp>
f010dfed:	83 c4 10             	add    $0x10,%esp
f010dff0:	85 c0                	test   %eax,%eax
f010dff2:	75 0a                	jne    f010dffe <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010dff4:	e8 dd 42 00 00       	call   f01122d6 <test_cut_paste_pages>
f010dff9:	e9 b5 00 00 00       	jmp    f010e0b3 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010dffe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e001:	83 c0 04             	add    $0x4,%eax
f010e004:	8b 00                	mov    (%eax),%eax
f010e006:	83 ec 08             	sub    $0x8,%esp
f010e009:	68 f6 37 13 f0       	push   $0xf01337f6
f010e00e:	50                   	push   %eax
f010e00f:	e8 a8 0e 02 00       	call   f012eebc <strcmp>
f010e014:	83 c4 10             	add    $0x10,%esp
f010e017:	85 c0                	test   %eax,%eax
f010e019:	75 0a                	jne    f010e025 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010e01b:	e8 07 4d 00 00       	call   f0112d27 <test_copy_paste_chunk>
f010e020:	e9 8e 00 00 00       	jmp    f010e0b3 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010e025:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e028:	83 c0 04             	add    $0x4,%eax
f010e02b:	8b 00                	mov    (%eax),%eax
f010e02d:	83 ec 08             	sub    $0x8,%esp
f010e030:	68 00 38 13 f0       	push   $0xf0133800
f010e035:	50                   	push   %eax
f010e036:	e8 81 0e 02 00       	call   f012eebc <strcmp>
f010e03b:	83 c4 10             	add    $0x10,%esp
f010e03e:	85 c0                	test   %eax,%eax
f010e040:	75 07                	jne    f010e049 <tst_chunks+0x98>
	{
		test_share_chunk();
f010e042:	e8 e4 5d 00 00       	call   f0113e2b <test_share_chunk>
f010e047:	eb 6a                	jmp    f010e0b3 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010e049:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e04c:	83 c0 04             	add    $0x4,%eax
f010e04f:	8b 00                	mov    (%eax),%eax
f010e051:	83 ec 08             	sub    $0x8,%esp
f010e054:	68 06 38 13 f0       	push   $0xf0133806
f010e059:	50                   	push   %eax
f010e05a:	e8 5d 0e 02 00       	call   f012eebc <strcmp>
f010e05f:	83 c4 10             	add    $0x10,%esp
f010e062:	85 c0                	test   %eax,%eax
f010e064:	75 07                	jne    f010e06d <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010e066:	e8 ee 67 00 00       	call   f0114859 <test_allocate_chunk>
f010e06b:	eb 46                	jmp    f010e0b3 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010e06d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e070:	83 c0 04             	add    $0x4,%eax
f010e073:	8b 00                	mov    (%eax),%eax
f010e075:	83 ec 08             	sub    $0x8,%esp
f010e078:	68 0f 38 13 f0       	push   $0xf013380f
f010e07d:	50                   	push   %eax
f010e07e:	e8 39 0e 02 00       	call   f012eebc <strcmp>
f010e083:	83 c4 10             	add    $0x10,%esp
f010e086:	85 c0                	test   %eax,%eax
f010e088:	75 07                	jne    f010e091 <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010e08a:	e8 d7 70 00 00       	call   f0115166 <test_calculate_required_frames>
f010e08f:	eb 22                	jmp    f010e0b3 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010e091:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e094:	83 c0 04             	add    $0x4,%eax
f010e097:	8b 00                	mov    (%eax),%eax
f010e099:	83 ec 08             	sub    $0x8,%esp
f010e09c:	68 1e 38 13 f0       	push   $0xf013381e
f010e0a1:	50                   	push   %eax
f010e0a2:	e8 15 0e 02 00       	call   f012eebc <strcmp>
f010e0a7:	83 c4 10             	add    $0x10,%esp
f010e0aa:	85 c0                	test   %eax,%eax
f010e0ac:	75 05                	jne    f010e0b3 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010e0ae:	e8 2d 79 00 00       	call   f01159e0 <test_calculate_allocated_space>
	}
	return 0;
f010e0b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e0b8:	c9                   	leave  
f010e0b9:	c3                   	ret    

f010e0ba <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010e0ba:	55                   	push   %ebp
f010e0bb:	89 e5                	mov    %esp,%ebp
f010e0bd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e0c0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e0c4:	74 1a                	je     f010e0e0 <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010e0c6:	83 ec 0c             	sub    $0xc,%esp
f010e0c9:	68 30 38 13 f0       	push   $0xf0133830
f010e0ce:	e8 5e 2d ff ff       	call   f0100e31 <cprintf>
f010e0d3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e0d6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0db:	e9 ba 00 00 00       	jmp    f010e19a <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010e0e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0e3:	83 c0 04             	add    $0x4,%eax
f010e0e6:	8b 00                	mov    (%eax),%eax
f010e0e8:	83 ec 08             	sub    $0x8,%esp
f010e0eb:	68 66 38 13 f0       	push   $0xf0133866
f010e0f0:	50                   	push   %eax
f010e0f1:	e8 c6 0d 02 00       	call   f012eebc <strcmp>
f010e0f6:	83 c4 10             	add    $0x10,%esp
f010e0f9:	85 c0                	test   %eax,%eax
f010e0fb:	75 0a                	jne    f010e107 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010e0fd:	e8 53 3c 00 00       	call   f0111d55 <test_pt_set_page_permissions>
f010e102:	e9 8e 00 00 00       	jmp    f010e195 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010e107:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e10a:	83 c0 04             	add    $0x4,%eax
f010e10d:	8b 00                	mov    (%eax),%eax
f010e10f:	83 ec 08             	sub    $0x8,%esp
f010e112:	68 6e 38 13 f0       	push   $0xf013386e
f010e117:	50                   	push   %eax
f010e118:	e8 9f 0d 02 00       	call   f012eebc <strcmp>
f010e11d:	83 c4 10             	add    $0x10,%esp
f010e120:	85 c0                	test   %eax,%eax
f010e122:	75 07                	jne    f010e12b <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010e124:	e8 8f 3e 00 00       	call   f0111fb8 <test_pt_set_page_permissions_invalid_va>
f010e129:	eb 6a                	jmp    f010e195 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010e12b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e12e:	83 c0 04             	add    $0x4,%eax
f010e131:	8b 00                	mov    (%eax),%eax
f010e133:	83 ec 08             	sub    $0x8,%esp
f010e136:	68 76 38 13 f0       	push   $0xf0133876
f010e13b:	50                   	push   %eax
f010e13c:	e8 7b 0d 02 00       	call   f012eebc <strcmp>
f010e141:	83 c4 10             	add    $0x10,%esp
f010e144:	85 c0                	test   %eax,%eax
f010e146:	75 07                	jne    f010e14f <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010e148:	e8 b4 3e 00 00       	call   f0112001 <test_pt_get_page_permissions>
f010e14d:	eb 46                	jmp    f010e195 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010e14f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e152:	83 c0 04             	add    $0x4,%eax
f010e155:	8b 00                	mov    (%eax),%eax
f010e157:	83 ec 08             	sub    $0x8,%esp
f010e15a:	68 7e 38 13 f0       	push   $0xf013387e
f010e15f:	50                   	push   %eax
f010e160:	e8 57 0d 02 00       	call   f012eebc <strcmp>
f010e165:	83 c4 10             	add    $0x10,%esp
f010e168:	85 c0                	test   %eax,%eax
f010e16a:	75 07                	jne    f010e173 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010e16c:	e8 d4 3f 00 00       	call   f0112145 <test_pt_clear_page_table_entry>
f010e171:	eb 22                	jmp    f010e195 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010e173:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e176:	83 c0 04             	add    $0x4,%eax
f010e179:	8b 00                	mov    (%eax),%eax
f010e17b:	83 ec 08             	sub    $0x8,%esp
f010e17e:	68 85 38 13 f0       	push   $0xf0133885
f010e183:	50                   	push   %eax
f010e184:	e8 33 0d 02 00       	call   f012eebc <strcmp>
f010e189:	83 c4 10             	add    $0x10,%esp
f010e18c:	85 c0                	test   %eax,%eax
f010e18e:	75 05                	jne    f010e195 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010e190:	e8 09 41 00 00       	call   f011229e <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010e195:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e19a:	c9                   	leave  
f010e19b:	c3                   	ret    

f010e19c <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010e19c:	55                   	push   %ebp
f010e19d:	89 e5                	mov    %esp,%ebp
f010e19f:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010e1a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1a5:	83 c0 08             	add    $0x8,%eax
f010e1a8:	8b 00                	mov    (%eax),%eax
f010e1aa:	83 ec 08             	sub    $0x8,%esp
f010e1ad:	68 8c 38 13 f0       	push   $0xf013388c
f010e1b2:	50                   	push   %eax
f010e1b3:	e8 04 0d 02 00       	call   f012eebc <strcmp>
f010e1b8:	83 c4 10             	add    $0x10,%esp
f010e1bb:	85 c0                	test   %eax,%eax
f010e1bd:	75 20                	jne    f010e1df <tst_kheap+0x43>
f010e1bf:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010e1c3:	74 1a                	je     f010e1df <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010e1c5:	83 ec 0c             	sub    $0xc,%esp
f010e1c8:	68 94 38 13 f0       	push   $0xf0133894
f010e1cd:	e8 5f 2c ff ff       	call   f0100e31 <cprintf>
f010e1d2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e1d5:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1da:	e9 41 03 00 00       	jmp    f010e520 <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010e1df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1e2:	83 c0 08             	add    $0x8,%eax
f010e1e5:	8b 00                	mov    (%eax),%eax
f010e1e7:	83 ec 08             	sub    $0x8,%esp
f010e1ea:	68 8c 38 13 f0       	push   $0xf013388c
f010e1ef:	50                   	push   %eax
f010e1f0:	e8 c7 0c 02 00       	call   f012eebc <strcmp>
f010e1f5:	83 c4 10             	add    $0x10,%esp
f010e1f8:	85 c0                	test   %eax,%eax
f010e1fa:	74 20                	je     f010e21c <tst_kheap+0x80>
f010e1fc:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010e200:	74 1a                	je     f010e21c <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010e202:	83 ec 0c             	sub    $0xc,%esp
f010e205:	68 e4 38 13 f0       	push   $0xf01338e4
f010e20a:	e8 22 2c ff ff       	call   f0100e31 <cprintf>
f010e20f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e212:	b8 00 00 00 00       	mov    $0x0,%eax
f010e217:	e9 04 03 00 00       	jmp    f010e520 <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010e21c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e21f:	83 c0 04             	add    $0x4,%eax
f010e222:	8b 00                	mov    (%eax),%eax
f010e224:	83 ec 08             	sub    $0x8,%esp
f010e227:	68 29 39 13 f0       	push   $0xf0133929
f010e22c:	50                   	push   %eax
f010e22d:	e8 8a 0c 02 00       	call   f012eebc <strcmp>
f010e232:	83 c4 10             	add    $0x10,%esp
f010e235:	85 c0                	test   %eax,%eax
f010e237:	74 1d                	je     f010e256 <tst_kheap+0xba>
f010e239:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e23c:	83 c0 04             	add    $0x4,%eax
f010e23f:	8b 00                	mov    (%eax),%eax
f010e241:	83 ec 08             	sub    $0x8,%esp
f010e244:	68 2c 39 13 f0       	push   $0xf013392c
f010e249:	50                   	push   %eax
f010e24a:	e8 6d 0c 02 00       	call   f012eebc <strcmp>
f010e24f:	83 c4 10             	add    $0x10,%esp
f010e252:	85 c0                	test   %eax,%eax
f010e254:	75 1a                	jne    f010e270 <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010e256:	e8 49 f9 ff ff       	call   f010dba4 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010e25b:	83 ec 0c             	sub    $0xc,%esp
f010e25e:	68 30 39 13 f0       	push   $0xf0133930
f010e263:	e8 c9 2b ff ff       	call   f0100e31 <cprintf>
f010e268:	83 c4 10             	add    $0x10,%esp
f010e26b:	e9 a0 00 00 00       	jmp    f010e310 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010e270:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e273:	83 c0 04             	add    $0x4,%eax
f010e276:	8b 00                	mov    (%eax),%eax
f010e278:	83 ec 08             	sub    $0x8,%esp
f010e27b:	68 5d 39 13 f0       	push   $0xf013395d
f010e280:	50                   	push   %eax
f010e281:	e8 36 0c 02 00       	call   f012eebc <strcmp>
f010e286:	83 c4 10             	add    $0x10,%esp
f010e289:	85 c0                	test   %eax,%eax
f010e28b:	74 1d                	je     f010e2aa <tst_kheap+0x10e>
f010e28d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e290:	83 c0 04             	add    $0x4,%eax
f010e293:	8b 00                	mov    (%eax),%eax
f010e295:	83 ec 08             	sub    $0x8,%esp
f010e298:	68 60 39 13 f0       	push   $0xf0133960
f010e29d:	50                   	push   %eax
f010e29e:	e8 19 0c 02 00       	call   f012eebc <strcmp>
f010e2a3:	83 c4 10             	add    $0x10,%esp
f010e2a6:	85 c0                	test   %eax,%eax
f010e2a8:	75 17                	jne    f010e2c1 <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010e2aa:	e8 05 f9 ff ff       	call   f010dbb4 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010e2af:	83 ec 0c             	sub    $0xc,%esp
f010e2b2:	68 64 39 13 f0       	push   $0xf0133964
f010e2b7:	e8 75 2b ff ff       	call   f0100e31 <cprintf>
f010e2bc:	83 c4 10             	add    $0x10,%esp
f010e2bf:	eb 4f                	jmp    f010e310 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010e2c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2c4:	83 c0 04             	add    $0x4,%eax
f010e2c7:	8b 00                	mov    (%eax),%eax
f010e2c9:	83 ec 08             	sub    $0x8,%esp
f010e2cc:	68 90 39 13 f0       	push   $0xf0133990
f010e2d1:	50                   	push   %eax
f010e2d2:	e8 e5 0b 02 00       	call   f012eebc <strcmp>
f010e2d7:	83 c4 10             	add    $0x10,%esp
f010e2da:	85 c0                	test   %eax,%eax
f010e2dc:	74 1d                	je     f010e2fb <tst_kheap+0x15f>
f010e2de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2e1:	83 c0 04             	add    $0x4,%eax
f010e2e4:	8b 00                	mov    (%eax),%eax
f010e2e6:	83 ec 08             	sub    $0x8,%esp
f010e2e9:	68 93 39 13 f0       	push   $0xf0133993
f010e2ee:	50                   	push   %eax
f010e2ef:	e8 c8 0b 02 00       	call   f012eebc <strcmp>
f010e2f4:	83 c4 10             	add    $0x10,%esp
f010e2f7:	85 c0                	test   %eax,%eax
f010e2f9:	75 15                	jne    f010e310 <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010e2fb:	e8 c4 f8 ff ff       	call   f010dbc4 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010e300:	83 ec 0c             	sub    $0xc,%esp
f010e303:	68 98 39 13 f0       	push   $0xf0133998
f010e308:	e8 24 2b ff ff       	call   f0100e31 <cprintf>
f010e30d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010e310:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e313:	83 c0 08             	add    $0x8,%eax
f010e316:	8b 00                	mov    (%eax),%eax
f010e318:	83 ec 08             	sub    $0x8,%esp
f010e31b:	68 8c 38 13 f0       	push   $0xf013388c
f010e320:	50                   	push   %eax
f010e321:	e8 96 0b 02 00       	call   f012eebc <strcmp>
f010e326:	83 c4 10             	add    $0x10,%esp
f010e329:	85 c0                	test   %eax,%eax
f010e32b:	0f 85 13 01 00 00    	jne    f010e444 <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010e331:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e334:	83 c0 0c             	add    $0xc,%eax
f010e337:	8b 00                	mov    (%eax),%eax
f010e339:	83 ec 04             	sub    $0x4,%esp
f010e33c:	6a 0a                	push   $0xa
f010e33e:	6a 00                	push   $0x0
f010e340:	50                   	push   %eax
f010e341:	e8 ca 0d 02 00       	call   f012f110 <strtol>
f010e346:	83 c4 10             	add    $0x10,%esp
f010e349:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010e34c:	e8 83 f8 ff ff       	call   f010dbd4 <isKHeapPlacementStrategyFIRSTFIT>
f010e351:	84 c0                	test   %al,%al
f010e353:	74 54                	je     f010e3a9 <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010e355:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e359:	75 1a                	jne    f010e375 <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010e35b:	83 ec 0c             	sub    $0xc,%esp
f010e35e:	68 c4 39 13 f0       	push   $0xf01339c4
f010e363:	e8 c9 2a ff ff       	call   f0100e31 <cprintf>
f010e368:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e36b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e370:	e9 ab 01 00 00       	jmp    f010e520 <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010e375:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e379:	75 0a                	jne    f010e385 <tst_kheap+0x1e9>
				test_kmalloc();
f010e37b:	e8 59 a0 00 00       	call   f01183d9 <test_kmalloc>
f010e380:	e9 b5 00 00 00       	jmp    f010e43a <tst_kheap+0x29e>
			else if (testNum == 2)
f010e385:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e389:	75 0a                	jne    f010e395 <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010e38b:	e8 96 e2 00 00       	call   f011c626 <test_kmalloc_firstfit1>
f010e390:	e9 a5 00 00 00       	jmp    f010e43a <tst_kheap+0x29e>
			else if (testNum == 3)
f010e395:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e399:	0f 85 9b 00 00 00    	jne    f010e43a <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010e39f:	e8 30 f3 00 00       	call   f011d6d4 <test_kmalloc_firstfit2>
f010e3a4:	e9 91 00 00 00       	jmp    f010e43a <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010e3a9:	e8 3b f8 ff ff       	call   f010dbe9 <isKHeapPlacementStrategyBESTFIT>
f010e3ae:	84 c0                	test   %al,%al
f010e3b0:	74 47                	je     f010e3f9 <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010e3b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e3b6:	75 1a                	jne    f010e3d2 <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010e3b8:	83 ec 0c             	sub    $0xc,%esp
f010e3bb:	68 14 3a 13 f0       	push   $0xf0133a14
f010e3c0:	e8 6c 2a ff ff       	call   f0100e31 <cprintf>
f010e3c5:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e3c8:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3cd:	e9 4e 01 00 00       	jmp    f010e520 <tst_kheap+0x384>
			}
			if (testNum == 1)
f010e3d2:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e3d6:	75 07                	jne    f010e3df <tst_kheap+0x243>
				test_kmalloc();
f010e3d8:	e8 fc 9f 00 00       	call   f01183d9 <test_kmalloc>
f010e3dd:	eb 5b                	jmp    f010e43a <tst_kheap+0x29e>
			else if (testNum == 2)
f010e3df:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e3e3:	75 07                	jne    f010e3ec <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010e3e5:	e8 b8 c2 00 00       	call   f011a6a2 <test_kmalloc_bestfit1>
f010e3ea:	eb 4e                	jmp    f010e43a <tst_kheap+0x29e>
			else if (testNum == 3)
f010e3ec:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e3f0:	75 48                	jne    f010e43a <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010e3f2:	e8 43 d2 00 00       	call   f011b63a <test_kmalloc_bestfit2>
f010e3f7:	eb 41                	jmp    f010e43a <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010e3f9:	e8 00 f8 ff ff       	call   f010dbfe <isKHeapPlacementStrategyNEXTFIT>
f010e3fe:	84 c0                	test   %al,%al
f010e400:	74 38                	je     f010e43a <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010e402:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e406:	75 1a                	jne    f010e422 <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010e408:	83 ec 0c             	sub    $0xc,%esp
f010e40b:	68 64 3a 13 f0       	push   $0xf0133a64
f010e410:	e8 1c 2a ff ff       	call   f0100e31 <cprintf>
f010e415:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e418:	b8 00 00 00 00       	mov    $0x0,%eax
f010e41d:	e9 fe 00 00 00       	jmp    f010e520 <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010e422:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e426:	75 07                	jne    f010e42f <tst_kheap+0x293>
				test_kmalloc();
f010e428:	e8 ac 9f 00 00       	call   f01183d9 <test_kmalloc>
f010e42d:	eb 0b                	jmp    f010e43a <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010e42f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e433:	75 05                	jne    f010e43a <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010e435:	e8 ab af 00 00       	call   f01193e5 <test_kmalloc_nextfit>
		}
		return 0;
f010e43a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e43f:	e9 dc 00 00 00       	jmp    f010e520 <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010e444:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e447:	83 c0 08             	add    $0x8,%eax
f010e44a:	8b 00                	mov    (%eax),%eax
f010e44c:	83 ec 08             	sub    $0x8,%esp
f010e44f:	68 b2 3a 13 f0       	push   $0xf0133ab2
f010e454:	50                   	push   %eax
f010e455:	e8 62 0a 02 00       	call   f012eebc <strcmp>
f010e45a:	83 c4 10             	add    $0x10,%esp
f010e45d:	85 c0                	test   %eax,%eax
f010e45f:	75 28                	jne    f010e489 <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010e461:	e8 83 f7 ff ff       	call   f010dbe9 <isKHeapPlacementStrategyBESTFIT>
f010e466:	84 c0                	test   %al,%al
f010e468:	75 09                	jne    f010e473 <tst_kheap+0x2d7>
f010e46a:	e8 65 f7 ff ff       	call   f010dbd4 <isKHeapPlacementStrategyFIRSTFIT>
f010e46f:	84 c0                	test   %al,%al
f010e471:	74 07                	je     f010e47a <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010e473:	e8 15 2f 01 00       	call   f012138d <test_kfree_bestfirstfit>
f010e478:	eb 05                	jmp    f010e47f <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010e47a:	e8 1c 11 01 00       	call   f011f59b <test_kfree>
		}
		return 0;
f010e47f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e484:	e9 97 00 00 00       	jmp    f010e520 <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010e489:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e48c:	83 c0 08             	add    $0x8,%eax
f010e48f:	8b 00                	mov    (%eax),%eax
f010e491:	83 ec 08             	sub    $0x8,%esp
f010e494:	68 b8 3a 13 f0       	push   $0xf0133ab8
f010e499:	50                   	push   %eax
f010e49a:	e8 1d 0a 02 00       	call   f012eebc <strcmp>
f010e49f:	83 c4 10             	add    $0x10,%esp
f010e4a2:	85 c0                	test   %eax,%eax
f010e4a4:	75 0c                	jne    f010e4b2 <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010e4a6:	e8 8c 46 01 00       	call   f0122b37 <test_kheap_phys_addr>
		return 0;
f010e4ab:	b8 00 00 00 00       	mov    $0x0,%eax
f010e4b0:	eb 6e                	jmp    f010e520 <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010e4b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4b5:	83 c0 08             	add    $0x8,%eax
f010e4b8:	8b 00                	mov    (%eax),%eax
f010e4ba:	83 ec 08             	sub    $0x8,%esp
f010e4bd:	68 c2 3a 13 f0       	push   $0xf0133ac2
f010e4c2:	50                   	push   %eax
f010e4c3:	e8 f4 09 02 00       	call   f012eebc <strcmp>
f010e4c8:	83 c4 10             	add    $0x10,%esp
f010e4cb:	85 c0                	test   %eax,%eax
f010e4cd:	75 0c                	jne    f010e4db <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010e4cf:	e8 a1 57 01 00       	call   f0123c75 <test_kheap_virt_addr>
		return 0;
f010e4d4:	b8 00 00 00 00       	mov    $0x0,%eax
f010e4d9:	eb 45                	jmp    f010e520 <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010e4db:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4de:	83 c0 08             	add    $0x8,%eax
f010e4e1:	8b 00                	mov    (%eax),%eax
f010e4e3:	83 ec 08             	sub    $0x8,%esp
f010e4e6:	68 cc 3a 13 f0       	push   $0xf0133acc
f010e4eb:	50                   	push   %eax
f010e4ec:	e8 cb 09 02 00       	call   f012eebc <strcmp>
f010e4f1:	83 c4 10             	add    $0x10,%esp
f010e4f4:	85 c0                	test   %eax,%eax
f010e4f6:	75 23                	jne    f010e51b <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010e4f8:	e8 01 f7 ff ff       	call   f010dbfe <isKHeapPlacementStrategyNEXTFIT>
f010e4fd:	84 c0                	test   %al,%al
f010e4ff:	74 05                	je     f010e506 <tst_kheap+0x36a>
		{
			test_krealloc();
f010e501:	e8 12 b9 01 00       	call   f0129e18 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010e506:	e8 de f6 ff ff       	call   f010dbe9 <isKHeapPlacementStrategyBESTFIT>
f010e50b:	84 c0                	test   %al,%al
f010e50d:	74 05                	je     f010e514 <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010e50f:	e8 98 d6 01 00       	call   f012bbac <test_krealloc_BF>
		}
		return 0;
f010e514:	b8 00 00 00 00       	mov    $0x0,%eax
f010e519:	eb 05                	jmp    f010e520 <tst_kheap+0x384>
	}
	return 0;
f010e51b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e520:	c9                   	leave  
f010e521:	c3                   	ret    

f010e522 <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010e522:	55                   	push   %ebp
f010e523:	89 e5                	mov    %esp,%ebp
f010e525:	83 ec 18             	sub    $0x18,%esp
	return;
#endif


	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010e528:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010e52f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e532:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010e538:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e53b:	83 c0 04             	add    $0x4,%eax
f010e53e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010e544:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e54b:	83 ec 08             	sub    $0x8,%esp
f010e54e:	ff 75 f0             	pushl  -0x10(%ebp)
f010e551:	68 00 00 00 f6       	push   $0xf6000000
f010e556:	e8 8b 13 02 00       	call   f012f8e6 <initialize_dynamic_allocator>
f010e55b:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	struct BlockMetaData *metaDataBegin = (struct BlockMetaData *) KERNEL_HEAP_START ;
f010e55e:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	if (metaDataBegin->is_free != 1 || metaDataBegin->size != initAllocatedSpace)
f010e565:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e568:	8a 40 04             	mov    0x4(%eax),%al
f010e56b:	3c 01                	cmp    $0x1,%al
f010e56d:	75 0a                	jne    f010e579 <test_initialize_dynamic_allocator+0x57>
f010e56f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e572:	8b 00                	mov    (%eax),%eax
f010e574:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e577:	74 14                	je     f010e58d <test_initialize_dynamic_allocator+0x6b>
	{
		panic("Content of Meta data are not set correctly");
f010e579:	83 ec 04             	sub    $0x4,%esp
f010e57c:	68 d8 3a 13 f0       	push   $0xf0133ad8
f010e581:	6a 29                	push   $0x29
f010e583:	68 04 3b 13 f0       	push   $0xf0133b04
f010e588:	e8 23 1c ff ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010e58d:	83 ec 0c             	sub    $0xc,%esp
f010e590:	68 28 3b 13 f0       	push   $0xf0133b28
f010e595:	e8 97 28 ff ff       	call   f0100e31 <cprintf>
f010e59a:	83 c4 10             	add    $0x10,%esp
}
f010e59d:	90                   	nop
f010e59e:	c9                   	leave  
f010e59f:	c3                   	ret    

f010e5a0 <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010e5a0:	55                   	push   %ebp
f010e5a1:	89 e5                	mov    %esp,%ebp
f010e5a3:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010e5a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010e5ad:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010e5b4:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e5bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e5be:	83 ec 08             	sub    $0x8,%esp
f010e5c1:	50                   	push   %eax
f010e5c2:	68 00 00 00 f6       	push   $0xf6000000
f010e5c7:	e8 1a 13 02 00       	call   f012f8e6 <initialize_dynamic_allocator>
f010e5cc:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e5cf:	83 ec 0c             	sub    $0xc,%esp
f010e5d2:	68 78 3b 13 f0       	push   $0xf0133b78
f010e5d7:	e8 55 28 ff ff       	call   f0100e31 <cprintf>
f010e5dc:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010e5df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010e5e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e5e9:	89 c2                	mov    %eax,%edx
f010e5eb:	01 d2                	add    %edx,%edx
f010e5ed:	01 d0                	add    %edx,%eax
f010e5ef:	83 ec 08             	sub    $0x8,%esp
f010e5f2:	ff 75 08             	pushl  0x8(%ebp)
f010e5f5:	50                   	push   %eax
f010e5f6:	e8 d2 11 02 00       	call   f012f7cd <alloc_block>
f010e5fb:	83 c4 10             	add    $0x10,%esp
f010e5fe:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e601:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e605:	74 17                	je     f010e61e <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010e607:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e60e:	83 ec 0c             	sub    $0xc,%esp
f010e611:	68 b4 3b 13 f0       	push   $0xf0133bb4
f010e616:	e8 16 28 ff ff       	call   f0100e31 <cprintf>
f010e61b:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010e61e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e621:	83 ec 08             	sub    $0x8,%esp
f010e624:	ff 75 08             	pushl  0x8(%ebp)
f010e627:	50                   	push   %eax
f010e628:	e8 a0 11 02 00       	call   f012f7cd <alloc_block>
f010e62d:	83 c4 10             	add    $0x10,%esp
f010e630:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e633:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e637:	74 17                	je     f010e650 <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010e639:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e640:	83 ec 0c             	sub    $0xc,%esp
f010e643:	68 0c 3c 13 f0       	push   $0xf0133c0c
f010e648:	e8 e4 27 ff ff       	call   f0100e31 <cprintf>
f010e64d:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e650:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e654:	74 04                	je     f010e65a <test_initial_alloc+0xba>
	{
		eval += 5;
f010e656:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010e65a:	83 ec 0c             	sub    $0xc,%esp
f010e65d:	68 64 3c 13 f0       	push   $0xf0133c64
f010e662:	e8 ca 27 ff ff       	call   f0100e31 <cprintf>
f010e667:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e66a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010e671:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e678:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010e67f:	eb 2a                	jmp    f010e6ab <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010e681:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e684:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f010e68b:	89 d0                	mov    %edx,%eax
f010e68d:	c1 e0 02             	shl    $0x2,%eax
f010e690:	01 d0                	add    %edx,%eax
f010e692:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e699:	01 d0                	add    %edx,%eax
f010e69b:	c1 e0 03             	shl    $0x3,%eax
f010e69e:	89 c2                	mov    %eax,%edx
f010e6a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e6a3:	01 d0                	add    %edx,%eax
f010e6a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010e6a8:	ff 45 e8             	incl   -0x18(%ebp)
f010e6ab:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010e6af:	7e d0                	jle    f010e681 <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010e6b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e6b4:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010e6b7:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010e6ba:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e6be:	7f 17                	jg     f010e6d7 <test_initial_alloc+0x137>
	{
		is_correct = 0;
f010e6c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010e6c7:	83 ec 0c             	sub    $0xc,%esp
f010e6ca:	68 b0 3c 13 f0       	push   $0xf0133cb0
f010e6cf:	e8 5d 27 ff ff       	call   f0100e31 <cprintf>
f010e6d4:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010e6d7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010e6de:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e6e5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e6ec:	e9 fc 00 00 00       	jmp    f010e7ed <test_initial_alloc+0x24d>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e6f1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010e6f8:	e9 e0 00 00 00       	jmp    f010e7dd <test_initial_alloc+0x23d>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010e6fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e700:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e707:	83 e8 10             	sub    $0x10,%eax
f010e70a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e70d:	83 ec 08             	sub    $0x8,%esp
f010e710:	ff 75 08             	pushl  0x8(%ebp)
f010e713:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e716:	e8 b2 10 02 00       	call   f012f7cd <alloc_block>
f010e71b:	83 c4 10             	add    $0x10,%esp
f010e71e:	89 c2                	mov    %eax,%edx
f010e720:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e723:	89 14 85 40 94 2d f0 	mov    %edx,-0xfd26bc0(,%eax,4)
f010e72a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e72d:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010e734:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010e737:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e73a:	d1 e8                	shr    %eax
f010e73c:	89 c2                	mov    %eax,%edx
f010e73e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e741:	01 c2                	add    %eax,%edx
f010e743:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e746:	89 14 85 40 c0 2d f0 	mov    %edx,-0xfd23fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010e74d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e750:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e753:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e756:	01 c2                	add    %eax,%edx
f010e758:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e75b:	89 14 85 40 aa 2d f0 	mov    %edx,-0xfd255c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e762:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e766:	74 0b                	je     f010e773 <test_initial_alloc+0x1d3>
f010e768:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e76b:	83 c0 10             	add    $0x10,%eax
f010e76e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e771:	74 27                	je     f010e79a <test_initial_alloc+0x1fa>
			{
				if (is_correct)
f010e773:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e777:	74 21                	je     f010e79a <test_initial_alloc+0x1fa>
				{
					is_correct = 0;
f010e779:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData() ,va);
f010e780:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e783:	83 c0 10             	add    $0x10,%eax
f010e786:	ff 75 cc             	pushl  -0x34(%ebp)
f010e789:	50                   	push   %eax
f010e78a:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e78d:	68 2c 3d 13 f0       	push   $0xf0133d2c
f010e792:	e8 9a 26 ff ff       	call   f0100e31 <cprintf>
f010e797:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010e79a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e79d:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e7a4:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010e7a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7aa:	8b 14 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%edx
f010e7b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7b4:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010e7b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7ba:	8b 14 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%edx
f010e7c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7c4:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010e7c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7ca:	8b 14 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%edx
f010e7d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7d4:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010e7d7:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e7da:	ff 45 d8             	incl   -0x28(%ebp)
f010e7dd:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010e7e4:	0f 8e 13 ff ff ff    	jle    f010e6fd <test_initial_alloc+0x15d>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e7ea:	ff 45 dc             	incl   -0x24(%ebp)
f010e7ed:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e7f1:	0f 8e fa fe ff ff    	jle    f010e6f1 <test_initial_alloc+0x151>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010e7f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e7fb:	74 04                	je     f010e801 <test_initial_alloc+0x261>
	{
		eval += 20;
f010e7fd:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e801:	83 ec 0c             	sub    $0xc,%esp
f010e804:	68 90 3d 13 f0       	push   $0xf0133d90
f010e809:	e8 23 26 ff ff       	call   f0100e31 <cprintf>
f010e80e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e811:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData();
f010e818:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e81b:	83 e8 10             	sub    $0x10,%eax
f010e81e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e821:	83 ec 08             	sub    $0x8,%esp
f010e824:	ff 75 08             	pushl  0x8(%ebp)
f010e827:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e82a:	e8 9e 0f 02 00       	call   f012f7cd <alloc_block>
f010e82f:	83 c4 10             	add    $0x10,%esp
f010e832:	89 c2                	mov    %eax,%edx
f010e834:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e837:	89 14 85 40 94 2d f0 	mov    %edx,-0xfd26bc0(,%eax,4)
f010e83e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e841:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010e848:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010e84b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e84e:	d1 e8                	shr    %eax
f010e850:	89 c2                	mov    %eax,%edx
f010e852:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e855:	01 c2                	add    %eax,%edx
f010e857:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e85a:	89 14 85 40 c0 2d f0 	mov    %edx,-0xfd23fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010e861:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e864:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e867:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e86a:	01 c2                	add    %eax,%edx
f010e86c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e86f:	89 14 85 40 aa 2d f0 	mov    %edx,-0xfd255c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e876:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e87a:	74 0b                	je     f010e887 <test_initial_alloc+0x2e7>
f010e87c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e87f:	83 c0 10             	add    $0x10,%eax
f010e882:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e885:	74 17                	je     f010e89e <test_initial_alloc+0x2fe>
	{
		is_correct = 0;
f010e887:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC - alloc_block_xx return wrong address.\n");
f010e88e:	83 ec 0c             	sub    $0xc,%esp
f010e891:	68 dc 3d 13 f0       	push   $0xf0133ddc
f010e896:	e8 96 25 ff ff       	call   f0100e31 <cprintf>
f010e89b:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010e89e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8a1:	8b 14 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%edx
f010e8a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8ab:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010e8ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8b1:	8b 14 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%edx
f010e8b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8bb:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010e8be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8c1:	8b 14 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%edx
f010e8c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8cb:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010e8ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e8d2:	74 04                	je     f010e8d8 <test_initial_alloc+0x338>
	{
		eval += 5;
f010e8d4:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010e8d8:	83 ec 0c             	sub    $0xc,%esp
f010e8db:	68 24 3e 13 f0       	push   $0xf0133e24
f010e8e0:	e8 4c 25 ff ff       	call   f0100e31 <cprintf>
f010e8e5:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e8e8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010e8ef:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010e8f6:	eb 5b                	jmp    f010e953 <test_initial_alloc+0x3b3>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010e8f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e8fb:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010e902:	66 8b 00             	mov    (%eax),%ax
f010e905:	98                   	cwtl   
f010e906:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e909:	75 26                	jne    f010e931 <test_initial_alloc+0x391>
f010e90b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e90e:	8b 04 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%eax
f010e915:	66 8b 00             	mov    (%eax),%ax
f010e918:	98                   	cwtl   
f010e919:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e91c:	75 13                	jne    f010e931 <test_initial_alloc+0x391>
f010e91e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e921:	8b 04 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%eax
f010e928:	66 8b 00             	mov    (%eax),%ax
f010e92b:	98                   	cwtl   
f010e92c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e92f:	74 1f                	je     f010e950 <test_initial_alloc+0x3b0>
		{
			is_correct = 0;
f010e931:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010e938:	83 ec 04             	sub    $0x4,%esp
f010e93b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e93e:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e941:	68 58 3e 13 f0       	push   $0xf0133e58
f010e946:	e8 e6 24 ff ff       	call   f0100e31 <cprintf>
f010e94b:	83 c4 10             	add    $0x10,%esp
			break;
f010e94e:	eb 0b                	jmp    f010e95b <test_initial_alloc+0x3bb>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010e950:	ff 45 d4             	incl   -0x2c(%ebp)
f010e953:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e956:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010e959:	7c 9d                	jl     f010e8f8 <test_initial_alloc+0x358>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010e95b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e95f:	74 04                	je     f010e965 <test_initial_alloc+0x3c5>
	{
		eval += 10;
f010e961:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010e965:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e968:	c9                   	leave  
f010e969:	c3                   	ret    

f010e96a <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e96a:	55                   	push   %ebp
f010e96b:	89 e5                	mov    %esp,%ebp
f010e96d:	57                   	push   %edi
f010e96e:	56                   	push   %esi
f010e96f:	53                   	push   %ebx
f010e970:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010e976:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010e97d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010e984:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010e98b:	83 ec 0c             	sub    $0xc,%esp
f010e98e:	68 a8 3e 13 f0       	push   $0xf0133ea8
f010e993:	e8 99 24 ff ff       	call   f0100e31 <cprintf>
f010e998:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010e99b:	83 ec 0c             	sub    $0xc,%esp
f010e99e:	68 e4 3e 13 f0       	push   $0xf0133ee4
f010e9a3:	e8 89 24 ff ff       	call   f0100e31 <cprintf>
f010e9a8:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010e9ab:	83 ec 0c             	sub    $0xc,%esp
f010e9ae:	68 a8 3e 13 f0       	push   $0xf0133ea8
f010e9b3:	e8 79 24 ff ff       	call   f0100e31 <cprintf>
f010e9b8:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010e9bb:	83 ec 0c             	sub    $0xc,%esp
f010e9be:	6a 01                	push   $0x1
f010e9c0:	e8 db fb ff ff       	call   f010e5a0 <test_initial_alloc>
f010e9c5:	83 c4 10             	add    $0x10,%esp
f010e9c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010e9cb:	83 ec 0c             	sub    $0xc,%esp
f010e9ce:	68 20 3f 13 f0       	push   $0xf0133f20
f010e9d3:	e8 59 24 ff ff       	call   f0100e31 <cprintf>
f010e9d8:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010e9db:	83 ec 0c             	sub    $0xc,%esp
f010e9de:	68 58 3f 13 f0       	push   $0xf0133f58
f010e9e3:	e8 49 24 ff ff       	call   f0100e31 <cprintf>
f010e9e8:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010e9eb:	83 ec 0c             	sub    $0xc,%esp
f010e9ee:	68 20 3f 13 f0       	push   $0xf0133f20
f010e9f3:	e8 39 24 ff ff       	call   f0100e31 <cprintf>
f010e9f8:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010e9fb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ea02:	eb 2c                	jmp    f010ea30 <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ea04:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ea07:	89 d0                	mov    %edx,%eax
f010ea09:	c1 e0 02             	shl    $0x2,%eax
f010ea0c:	01 d0                	add    %edx,%eax
f010ea0e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ea15:	01 d0                	add    %edx,%eax
f010ea17:	c1 e0 03             	shl    $0x3,%eax
f010ea1a:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010ea21:	83 ec 0c             	sub    $0xc,%esp
f010ea24:	50                   	push   %eax
f010ea25:	e8 6f 0f 02 00       	call   f012f999 <free_block>
f010ea2a:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ea2d:	ff 45 dc             	incl   -0x24(%ebp)
f010ea30:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ea34:	7e ce                	jle    f010ea04 <test_alloc_block_FF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ea36:	83 ec 0c             	sub    $0xc,%esp
f010ea39:	68 78 3b 13 f0       	push   $0xf0133b78
f010ea3e:	e8 ee 23 ff ff       	call   f0100e31 <cprintf>
f010ea43:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ea46:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010ea4d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010ea54:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010ea5b:	eb 1f                	jmp    f010ea7c <test_alloc_block_FF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010ea5d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ea60:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010ea67:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ea6a:	76 0d                	jbe    f010ea79 <test_alloc_block_FF+0x10f>
			maxSize = allocSizes[i] ;
f010ea6c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ea6f:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010ea76:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010ea79:	ff 45 d4             	incl   -0x2c(%ebp)
f010ea7c:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010ea80:	7e db                	jle    f010ea5d <test_alloc_block_FF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010ea82:	83 ec 08             	sub    $0x8,%esp
f010ea85:	6a 01                	push   $0x1
f010ea87:	ff 75 d8             	pushl  -0x28(%ebp)
f010ea8a:	e8 3e 0d 02 00       	call   f012f7cd <alloc_block>
f010ea8f:	83 c4 10             	add    $0x10,%esp
f010ea92:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010ea95:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ea99:	74 17                	je     f010eab2 <test_alloc_block_FF+0x148>
	{
		is_correct = 0;
f010ea9b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f010eaa2:	83 ec 0c             	sub    $0xc,%esp
f010eaa5:	68 90 3f 13 f0       	push   $0xf0133f90
f010eaaa:	e8 82 23 ff ff       	call   f0100e31 <cprintf>
f010eaaf:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010eab2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eab6:	74 04                	je     f010eabc <test_alloc_block_FF+0x152>
	{
		eval += 10;
f010eab8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010eabc:	83 ec 0c             	sub    $0xc,%esp
f010eabf:	68 08 40 13 f0       	push   $0xf0134008
f010eac4:	e8 68 23 ff ff       	call   f0100e31 <cprintf>
f010eac9:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eacc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f010ead3:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010ead6:	bb c8 41 13 f0       	mov    $0xf01341c8,%ebx
f010eadb:	ba 03 00 00 00       	mov    $0x3,%edx
f010eae0:	89 c7                	mov    %eax,%edi
f010eae2:	89 de                	mov    %ebx,%esi
f010eae4:	89 d1                	mov    %edx,%ecx
f010eae6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010eae8:	a1 00 a7 2d f0       	mov    0xf02da700,%eax
f010eaed:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
f010eaf0:	c7 45 a4 10 00 00 f6 	movl   $0xf6000010,-0x5c(%ebp)
f010eaf7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eafa:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010eafd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010eb00:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010eb05:	89 45 ac             	mov    %eax,-0x54(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010eb08:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010eb0f:	e9 c6 00 00 00       	jmp    f010ebda <test_alloc_block_FF+0x270>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010eb14:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb17:	8b 44 85 b0          	mov    -0x50(%ebp,%eax,4),%eax
f010eb1b:	83 e8 10             	sub    $0x10,%eax
f010eb1e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f010eb21:	83 ec 08             	sub    $0x8,%esp
f010eb24:	6a 01                	push   $0x1
f010eb26:	ff 75 c4             	pushl  -0x3c(%ebp)
f010eb29:	e8 9f 0c 02 00       	call   f012f7cd <alloc_block>
f010eb2e:	83 c4 10             	add    $0x10,%esp
f010eb31:	89 c2                	mov    %eax,%edx
f010eb33:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb36:	89 54 85 94          	mov    %edx,-0x6c(%ebp,%eax,4)
f010eb3a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb3d:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eb41:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010eb44:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010eb47:	d1 e8                	shr    %eax
f010eb49:	89 c2                	mov    %eax,%edx
f010eb4b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eb4e:	01 c2                	add    %eax,%edx
f010eb50:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb53:	89 54 85 84          	mov    %edx,-0x7c(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010eb57:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010eb5a:	8d 50 fe             	lea    -0x2(%eax),%edx
f010eb5d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eb60:	01 c2                	add    %eax,%edx
f010eb62:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb65:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010eb6c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb6f:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eb73:	85 c0                	test   %eax,%eax
f010eb75:	74 12                	je     f010eb89 <test_alloc_block_FF+0x21f>
f010eb77:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb7a:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010eb7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb81:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010eb85:	39 c2                	cmp    %eax,%edx
f010eb87:	74 27                	je     f010ebb0 <test_alloc_block_FF+0x246>
		{
			is_correct = 0;
f010eb89:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010eb90:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb93:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010eb97:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb9a:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010eb9e:	52                   	push   %edx
f010eb9f:	50                   	push   %eax
f010eba0:	ff 75 d0             	pushl  -0x30(%ebp)
f010eba3:	68 64 40 13 f0       	push   $0xf0134064
f010eba8:	e8 84 22 ff ff       	call   f0100e31 <cprintf>
f010ebad:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010ebb0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebb3:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ebb7:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010ebbc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebbf:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ebc3:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010ebc8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebcb:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ebd2:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010ebd7:	ff 45 d0             	incl   -0x30(%ebp)
f010ebda:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f010ebde:	0f 8e 30 ff ff ff    	jle    f010eb14 <test_alloc_block_FF+0x1aa>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f010ebe4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ebe8:	74 04                	je     f010ebee <test_alloc_block_FF+0x284>
	{
		eval += 15;
f010ebea:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010ebee:	83 ec 0c             	sub    $0xc,%esp
f010ebf1:	68 90 3d 13 f0       	push   $0xf0133d90
f010ebf6:	e8 36 22 ff ff       	call   f0100e31 <cprintf>
f010ebfb:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ebfe:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData();
f010ec05:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f010ec0c:	83 ec 08             	sub    $0x8,%esp
f010ec0f:	6a 01                	push   $0x1
f010ec11:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ec14:	e8 b4 0b 02 00       	call   f012f7cd <alloc_block>
f010ec19:	83 c4 10             	add    $0x10,%esp
f010ec1c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010ec1f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ec22:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f010ec25:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec28:	d1 e8                	shr    %eax
f010ec2a:	89 c2                	mov    %eax,%edx
f010ec2c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec2f:	01 d0                	add    %edx,%eax
f010ec31:	89 45 90             	mov    %eax,-0x70(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f010ec34:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec37:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ec3a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec3d:	01 d0                	add    %edx,%eax
f010ec3f:	89 45 80             	mov    %eax,-0x80(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + testSizes[0] + testSizes[2] + sizeOfMetaData()) ;
f010ec42:	8b 55 b0             	mov    -0x50(%ebp),%edx
f010ec45:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ec48:	01 d0                	add    %edx,%eax
f010ec4a:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010ec4f:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va == NULL || (va != expected))
f010ec52:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ec56:	74 08                	je     f010ec60 <test_alloc_block_FF+0x2f6>
f010ec58:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec5b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010ec5e:	74 1d                	je     f010ec7d <test_alloc_block_FF+0x313>
	{
		is_correct = 0;
f010ec60:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f010ec67:	83 ec 04             	sub    $0x4,%esp
f010ec6a:	ff 75 c8             	pushl  -0x38(%ebp)
f010ec6d:	ff 75 bc             	pushl  -0x44(%ebp)
f010ec70:	68 c8 40 13 f0       	push   $0xf01340c8
f010ec75:	e8 b7 21 ff ff       	call   f0100e31 <cprintf>
f010ec7a:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfFFTests]) = 353 ;
f010ec7d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ec80:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f010ec85:	8b 45 90             	mov    -0x70(%ebp),%eax
f010ec88:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f010ec8d:	8b 45 80             	mov    -0x80(%ebp),%eax
f010ec90:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010ec95:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ec99:	74 04                	je     f010ec9f <test_alloc_block_FF+0x335>
	{
		eval += 15;
f010ec9b:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010ec9f:	83 ec 0c             	sub    $0xc,%esp
f010eca2:	68 24 3e 13 f0       	push   $0xf0133e24
f010eca7:	e8 85 21 ff ff       	call   f0100e31 <cprintf>
f010ecac:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ecaf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f010ecb6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010ecbd:	e9 82 00 00 00       	jmp    f010ed44 <test_alloc_block_FF+0x3da>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010ecc2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ecc5:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ecc9:	66 8b 00             	mov    (%eax),%ax
f010eccc:	66 3d 61 01          	cmp    $0x161,%ax
f010ecd0:	75 23                	jne    f010ecf5 <test_alloc_block_FF+0x38b>
f010ecd2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ecd5:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ecd9:	66 8b 00             	mov    (%eax),%ax
f010ecdc:	66 3d 61 01          	cmp    $0x161,%ax
f010ece0:	75 13                	jne    f010ecf5 <test_alloc_block_FF+0x38b>
f010ece2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ece5:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ecec:	66 8b 00             	mov    (%eax),%ax
f010ecef:	66 3d 61 01          	cmp    $0x161,%ax
f010ecf3:	74 4c                	je     f010ed41 <test_alloc_block_FF+0x3d7>
		{
			is_correct = 0;
f010ecf5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010ecfc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ecff:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ed06:	66 8b 00             	mov    (%eax),%ax
f010ed09:	0f bf c8             	movswl %ax,%ecx
f010ed0c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed0f:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ed13:	66 8b 00             	mov    (%eax),%ax
f010ed16:	0f bf d0             	movswl %ax,%edx
f010ed19:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed1c:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ed20:	66 8b 00             	mov    (%eax),%ax
f010ed23:	98                   	cwtl   
f010ed24:	83 ec 08             	sub    $0x8,%esp
f010ed27:	51                   	push   %ecx
f010ed28:	52                   	push   %edx
f010ed29:	50                   	push   %eax
f010ed2a:	68 61 01 00 00       	push   $0x161
f010ed2f:	ff 75 cc             	pushl  -0x34(%ebp)
f010ed32:	68 28 41 13 f0       	push   $0xf0134128
f010ed37:	e8 f5 20 ff ff       	call   f0100e31 <cprintf>
f010ed3c:	83 c4 20             	add    $0x20,%esp
			break;
f010ed3f:	eb 0d                	jmp    f010ed4e <test_alloc_block_FF+0x3e4>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f010ed41:	ff 45 cc             	incl   -0x34(%ebp)
f010ed44:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f010ed48:	0f 8e 74 ff ff ff    	jle    f010ecc2 <test_alloc_block_FF+0x358>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010ed4e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ed52:	74 04                	je     f010ed58 <test_alloc_block_FF+0x3ee>
	{
		eval += 20;
f010ed54:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f010ed58:	83 ec 08             	sub    $0x8,%esp
f010ed5b:	ff 75 e4             	pushl  -0x1c(%ebp)
f010ed5e:	68 94 41 13 f0       	push   $0xf0134194
f010ed63:	e8 c9 20 ff ff       	call   f0100e31 <cprintf>
f010ed68:	83 c4 10             	add    $0x10,%esp
}
f010ed6b:	90                   	nop
f010ed6c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ed6f:	5b                   	pop    %ebx
f010ed70:	5e                   	pop    %esi
f010ed71:	5f                   	pop    %edi
f010ed72:	5d                   	pop    %ebp
f010ed73:	c3                   	ret    

f010ed74 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010ed74:	55                   	push   %ebp
f010ed75:	89 e5                	mov    %esp,%ebp
f010ed77:	57                   	push   %edi
f010ed78:	56                   	push   %esi
f010ed79:	53                   	push   %ebx
f010ed7a:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010ed80:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ed87:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ed8e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=================================================\n") ;
f010ed95:	83 ec 0c             	sub    $0xc,%esp
f010ed98:	68 d4 41 13 f0       	push   $0xf01341d4
f010ed9d:	e8 8f 20 ff ff       	call   f0100e31 <cprintf>
f010eda2:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY\n") ;
f010eda5:	83 ec 0c             	sub    $0xc,%esp
f010eda8:	68 08 42 13 f0       	push   $0xf0134208
f010edad:	e8 7f 20 ff ff       	call   f0100e31 <cprintf>
f010edb2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010edb5:	83 ec 0c             	sub    $0xc,%esp
f010edb8:	68 d4 41 13 f0       	push   $0xf01341d4
f010edbd:	e8 6f 20 ff ff       	call   f0100e31 <cprintf>
f010edc2:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f010edc5:	83 ec 0c             	sub    $0xc,%esp
f010edc8:	6a 03                	push   $0x3
f010edca:	e8 d1 f7 ff ff       	call   f010e5a0 <test_initial_alloc>
f010edcf:	83 c4 10             	add    $0x10,%esp
f010edd2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("=================================================\n") ;
f010edd5:	83 ec 0c             	sub    $0xc,%esp
f010edd8:	68 d4 41 13 f0       	push   $0xf01341d4
f010eddd:	e8 4f 20 ff ff       	call   f0100e31 <cprintf>
f010ede2:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
f010ede5:	83 ec 0c             	sub    $0xc,%esp
f010ede8:	68 3c 42 13 f0       	push   $0xf013423c
f010eded:	e8 3f 20 ff ff       	call   f0100e31 <cprintf>
f010edf2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010edf5:	83 ec 0c             	sub    $0xc,%esp
f010edf8:	68 d4 41 13 f0       	push   $0xf01341d4
f010edfd:	e8 2f 20 ff ff       	call   f0100e31 <cprintf>
f010ee02:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ee05:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ee0c:	eb 2c                	jmp    f010ee3a <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ee0e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ee11:	89 d0                	mov    %edx,%eax
f010ee13:	c1 e0 02             	shl    $0x2,%eax
f010ee16:	01 d0                	add    %edx,%eax
f010ee18:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ee1f:	01 d0                	add    %edx,%eax
f010ee21:	c1 e0 03             	shl    $0x3,%eax
f010ee24:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010ee2b:	83 ec 0c             	sub    $0xc,%esp
f010ee2e:	50                   	push   %eax
f010ee2f:	e8 65 0b 02 00       	call   f012f999 <free_block>
f010ee34:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
	cprintf("=================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ee37:	ff 45 dc             	incl   -0x24(%ebp)
f010ee3a:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ee3e:	7e ce                	jle    f010ee0e <test_alloc_block_BF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ee40:	83 ec 0c             	sub    $0xc,%esp
f010ee43:	68 78 3b 13 f0       	push   $0xf0133b78
f010ee48:	e8 e4 1f ff ff       	call   f0100e31 <cprintf>
f010ee4d:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ee50:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010ee57:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010ee5e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010ee65:	eb 1f                	jmp    f010ee86 <test_alloc_block_BF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010ee67:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ee6a:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010ee71:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ee74:	76 0d                	jbe    f010ee83 <test_alloc_block_BF+0x10f>
			maxSize = allocSizes[i] ;
f010ee76:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ee79:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010ee80:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010ee83:	ff 45 d4             	incl   -0x2c(%ebp)
f010ee86:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010ee8a:	7e db                	jle    f010ee67 <test_alloc_block_BF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f010ee8c:	83 ec 08             	sub    $0x8,%esp
f010ee8f:	6a 03                	push   $0x3
f010ee91:	ff 75 d8             	pushl  -0x28(%ebp)
f010ee94:	e8 34 09 02 00       	call   f012f7cd <alloc_block>
f010ee99:	83 c4 10             	add    $0x10,%esp
f010ee9c:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010ee9f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010eea3:	74 17                	je     f010eebc <test_alloc_block_BF+0x148>
	{
		is_correct = 0;
f010eea5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f010eeac:	83 ec 0c             	sub    $0xc,%esp
f010eeaf:	68 70 42 13 f0       	push   $0xf0134270
f010eeb4:	e8 78 1f ff ff       	call   f0100e31 <cprintf>
f010eeb9:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010eebc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eec0:	74 04                	je     f010eec6 <test_alloc_block_BF+0x152>
	{
		eval += 10;
f010eec2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010eec6:	83 ec 0c             	sub    $0xc,%esp
f010eec9:	68 08 40 13 f0       	push   $0xf0134008
f010eece:	e8 5e 1f ff ff       	call   f0100e31 <cprintf>
f010eed3:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eed6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {/*only 1 can fit*/4*kilo + kilo/2, /*many can fit*/ 1*kilo + kilo/4, 4*sizeof(short) + sizeOfMetaData(), kilo/2, /*only 1 can fit (@head)*/3*kilo } ;
f010eedd:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010eee0:	bb 94 44 13 f0       	mov    $0xf0134494,%ebx
f010eee5:	ba 05 00 00 00       	mov    $0x5,%edx
f010eeea:	89 c7                	mov    %eax,%edi
f010eeec:	89 de                	mov    %ebx,%esi
f010eeee:	89 d1                	mov    %edx,%ecx
f010eef0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st12B = (uint32)startVAs[3*allocCntPerSize];
f010eef2:	a1 a0 9d 2d f0       	mov    0xf02d9da0,%eax
f010eef7:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f010eefa:	a1 c0 a0 2d f0       	mov    0xf02da0c0,%eax
f010eeff:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010ef02:	a1 00 a7 2d f0       	mov    0xf02da700,%eax
f010ef07:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
f010ef0a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ef0d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010ef10:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ef13:	89 45 90             	mov    %eax,-0x70(%ebp)
f010ef16:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ef19:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010ef1c:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010ef1f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ef22:	01 d0                	add    %edx,%eax
f010ef24:	89 45 98             	mov    %eax,-0x68(%ebp)
f010ef27:	c7 45 9c 10 00 00 f6 	movl   $0xf6000010,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010ef2e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010ef35:	e9 de 00 00 00       	jmp    f010f018 <test_alloc_block_BF+0x2a4>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010ef3a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef3d:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f010ef41:	83 e8 10             	sub    $0x10,%eax
f010ef44:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f010ef47:	83 ec 08             	sub    $0x8,%esp
f010ef4a:	6a 03                	push   $0x3
f010ef4c:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ef4f:	e8 79 08 02 00       	call   f012f7cd <alloc_block>
f010ef54:	83 c4 10             	add    $0x10,%esp
f010ef57:	89 c2                	mov    %eax,%edx
f010ef59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef5c:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
f010ef63:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef66:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ef6d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010ef70:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ef73:	d1 e8                	shr    %eax
f010ef75:	89 c2                	mov    %eax,%edx
f010ef77:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ef7a:	01 c2                	add    %eax,%edx
f010ef7c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef7f:	89 94 85 5c ff ff ff 	mov    %edx,-0xa4(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010ef86:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ef89:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ef8c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ef8f:	01 c2                	add    %eax,%edx
f010ef91:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef94:	89 94 85 44 ff ff ff 	mov    %edx,-0xbc(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010ef9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef9e:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010efa5:	85 c0                	test   %eax,%eax
f010efa7:	74 15                	je     f010efbe <test_alloc_block_BF+0x24a>
f010efa9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efac:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010efb3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efb6:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010efba:	39 c2                	cmp    %eax,%edx
f010efbc:	74 2a                	je     f010efe8 <test_alloc_block_BF+0x274>
		{
			is_correct = 0;
f010efbe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #6.%d: WRONG BF ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010efc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efc8:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010efcf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efd2:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010efd6:	52                   	push   %edx
f010efd7:	50                   	push   %eax
f010efd8:	ff 75 d0             	pushl  -0x30(%ebp)
f010efdb:	68 e8 42 13 f0       	push   $0xf01342e8
f010efe0:	e8 4c 1e ff ff       	call   f0100e31 <cprintf>
f010efe5:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010efe8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efeb:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010eff2:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010eff7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010effa:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f001:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010f006:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f009:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f010:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f015:	ff 45 d0             	incl   -0x30(%ebp)
f010f018:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f010f01c:	0f 8e 18 ff ff ff    	jle    f010ef3a <test_alloc_block_BF+0x1c6>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct)
f010f022:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f026:	74 04                	je     f010f02c <test_alloc_block_BF+0x2b8>
	{
		eval += 15;
f010f028:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f010f02c:	83 ec 0c             	sub    $0xc,%esp
f010f02f:	68 4c 43 13 f0       	push   $0xf013434c
f010f034:	e8 f8 1d ff ff       	call   f0100e31 <cprintf>
f010f039:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f03c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData();
f010f043:	c7 45 c4 f0 00 00 00 	movl   $0xf0,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f010f04a:	83 ec 08             	sub    $0x8,%esp
f010f04d:	6a 03                	push   $0x3
f010f04f:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f052:	e8 76 07 02 00       	call   f012f7cd <alloc_block>
f010f057:	83 c4 10             	add    $0x10,%esp
f010f05a:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f05d:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f060:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f010f063:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f066:	d1 e8                	shr    %eax
f010f068:	89 c2                	mov    %eax,%edx
f010f06a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f06d:	01 d0                	add    %edx,%eax
f010f06f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f010f075:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f078:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f07b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f07e:	01 d0                	add    %edx,%eax
f010f080:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
	//Check returned va
	void* expected = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f010f086:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f089:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f08c:	01 c2                	add    %eax,%edx
f010f08e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f091:	01 d0                	add    %edx,%eax
f010f093:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(va == NULL || (va != expected))
f010f096:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f09a:	74 08                	je     f010f0a4 <test_alloc_block_BF+0x330>
f010f09c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f09f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f0a2:	74 1d                	je     f010f0c1 <test_alloc_block_BF+0x34d>
	{
		is_correct = 0;
f010f0a4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #7: WRONG BF ALLOC - alloc_block_BF return wrong address. expected %x, actual %x\n", expected, va);
f010f0ab:	83 ec 04             	sub    $0x4,%esp
f010f0ae:	ff 75 c8             	pushl  -0x38(%ebp)
f010f0b1:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f0b4:	68 90 43 13 f0       	push   $0xf0134390
f010f0b9:	e8 73 1d ff ff       	call   f0100e31 <cprintf>
f010f0be:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfBFTests]) = 353 ;
f010f0c1:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f0c4:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f010f0c9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f0cf:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f010f0d4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f0da:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010f0df:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f0e3:	74 04                	je     f010f0e9 <test_alloc_block_BF+0x375>
	{
		eval += 15;
f010f0e5:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010f0e9:	83 ec 0c             	sub    $0xc,%esp
f010f0ec:	68 24 3e 13 f0       	push   $0xf0133e24
f010f0f1:	e8 3b 1d ff ff       	call   f0100e31 <cprintf>
f010f0f6:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f0f9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfBFTests; ++i)
f010f100:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010f107:	e9 8e 00 00 00       	jmp    f010f19a <test_alloc_block_BF+0x426>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010f10c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f10f:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f116:	66 8b 00             	mov    (%eax),%ax
f010f119:	66 3d 61 01          	cmp    $0x161,%ax
f010f11d:	75 26                	jne    f010f145 <test_alloc_block_BF+0x3d1>
f010f11f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f122:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f129:	66 8b 00             	mov    (%eax),%ax
f010f12c:	66 3d 61 01          	cmp    $0x161,%ax
f010f130:	75 13                	jne    f010f145 <test_alloc_block_BF+0x3d1>
f010f132:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f135:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f13c:	66 8b 00             	mov    (%eax),%ax
f010f13f:	66 3d 61 01          	cmp    $0x161,%ax
f010f143:	74 52                	je     f010f197 <test_alloc_block_BF+0x423>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f010f145:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010f14c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f14f:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f156:	66 8b 00             	mov    (%eax),%ax
f010f159:	0f bf c8             	movswl %ax,%ecx
f010f15c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f15f:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f166:	66 8b 00             	mov    (%eax),%ax
f010f169:	0f bf d0             	movswl %ax,%edx
f010f16c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f16f:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f176:	66 8b 00             	mov    (%eax),%ax
f010f179:	98                   	cwtl   
f010f17a:	83 ec 08             	sub    $0x8,%esp
f010f17d:	51                   	push   %ecx
f010f17e:	52                   	push   %edx
f010f17f:	50                   	push   %eax
f010f180:	68 61 01 00 00       	push   $0x161
f010f185:	ff 75 cc             	pushl  -0x34(%ebp)
f010f188:	68 f4 43 13 f0       	push   $0xf01343f4
f010f18d:	e8 9f 1c ff ff       	call   f0100e31 <cprintf>
f010f192:	83 c4 20             	add    $0x20,%esp
			break;
f010f195:	eb 0d                	jmp    f010f1a4 <test_alloc_block_BF+0x430>
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfBFTests; ++i)
f010f197:	ff 45 cc             	incl   -0x34(%ebp)
f010f19a:	83 7d cc 05          	cmpl   $0x5,-0x34(%ebp)
f010f19e:	0f 8e 68 ff ff ff    	jle    f010f10c <test_alloc_block_BF+0x398>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010f1a4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f1a8:	74 04                	je     f010f1ae <test_alloc_block_BF+0x43a>
	{
		eval += 20;
f010f1aa:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f010f1ae:	83 ec 08             	sub    $0x8,%esp
f010f1b1:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f1b4:	68 60 44 13 f0       	push   $0xf0134460
f010f1b9:	e8 73 1c ff ff       	call   f0100e31 <cprintf>
f010f1be:	83 c4 10             	add    $0x10,%esp
}
f010f1c1:	90                   	nop
f010f1c2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f1c5:	5b                   	pop    %ebx
f010f1c6:	5e                   	pop    %esi
f010f1c7:	5f                   	pop    %edi
f010f1c8:	5d                   	pop    %ebp
f010f1c9:	c3                   	ret    

f010f1ca <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f1ca:	55                   	push   %ebp
f010f1cb:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010f1cd:	90                   	nop
f010f1ce:	5d                   	pop    %ebp
f010f1cf:	c3                   	ret    

f010f1d0 <test_free_block_FF>:

void test_free_block_FF()
{
f010f1d0:	55                   	push   %ebp
f010f1d1:	89 e5                	mov    %esp,%ebp
f010f1d3:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010f1d6:	83 ec 0c             	sub    $0xc,%esp
f010f1d9:	68 a8 44 13 f0       	push   $0xf01344a8
f010f1de:	e8 4e 1c ff ff       	call   f0100e31 <cprintf>
f010f1e3:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010f1e6:	83 ec 0c             	sub    $0xc,%esp
f010f1e9:	68 e8 44 13 f0       	push   $0xf01344e8
f010f1ee:	e8 3e 1c ff ff       	call   f0100e31 <cprintf>
f010f1f3:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010f1f6:	83 ec 0c             	sub    $0xc,%esp
f010f1f9:	68 a8 44 13 f0       	push   $0xf01344a8
f010f1fe:	e8 2e 1c ff ff       	call   f0100e31 <cprintf>
f010f203:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f010f206:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f010f20d:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010f214:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f217:	83 ec 08             	sub    $0x8,%esp
f010f21a:	50                   	push   %eax
f010f21b:	68 00 00 00 f6       	push   $0xf6000000
f010f220:	e8 c1 06 02 00       	call   f012f8e6 <initialize_dynamic_allocator>
f010f225:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010f228:	83 ec 0c             	sub    $0xc,%esp
f010f22b:	68 28 45 13 f0       	push   $0xf0134528
f010f230:	e8 fc 1b ff ff       	call   f0100e31 <cprintf>
f010f235:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010f238:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f23f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010f246:	eb 2a                	jmp    f010f272 <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010f248:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f24b:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f010f252:	89 d0                	mov    %edx,%eax
f010f254:	c1 e0 02             	shl    $0x2,%eax
f010f257:	01 d0                	add    %edx,%eax
f010f259:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f260:	01 d0                	add    %edx,%eax
f010f262:	c1 e0 03             	shl    $0x3,%eax
f010f265:	89 c2                	mov    %eax,%edx
f010f267:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f26a:	01 d0                	add    %edx,%eax
f010f26c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010f26f:	ff 45 e8             	incl   -0x18(%ebp)
f010f272:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010f276:	7e d0                	jle    f010f248 <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010f278:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f27b:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010f27e:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f010f281:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f285:	7f 17                	jg     f010f29e <test_free_block_FF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010f287:	83 ec 04             	sub    $0x4,%esp
f010f28a:	68 80 45 13 f0       	push   $0xf0134580
f010f28f:	68 fe 01 00 00       	push   $0x1fe
f010f294:	68 04 3b 13 f0       	push   $0xf0133b04
f010f299:	e8 12 0f ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010f29e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010f2a5:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f2ac:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010f2b3:	e9 f8 00 00 00       	jmp    f010f3b0 <test_free_block_FF+0x1e0>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f2b8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010f2bf:	e9 dc 00 00 00       	jmp    f010f3a0 <test_free_block_FF+0x1d0>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010f2c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2c7:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010f2ce:	83 e8 10             	sub    $0x10,%eax
f010f2d1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f2d4:	83 ec 08             	sub    $0x8,%esp
f010f2d7:	6a 01                	push   $0x1
f010f2d9:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f2dc:	e8 ec 04 02 00       	call   f012f7cd <alloc_block>
f010f2e1:	83 c4 10             	add    $0x10,%esp
f010f2e4:	89 c2                	mov    %eax,%edx
f010f2e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f2e9:	89 14 85 40 94 2d f0 	mov    %edx,-0xfd26bc0(,%eax,4)
f010f2f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f2f3:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f2fa:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010f2fd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f300:	d1 e8                	shr    %eax
f010f302:	89 c2                	mov    %eax,%edx
f010f304:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f307:	01 c2                	add    %eax,%edx
f010f309:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f30c:	89 14 85 40 c0 2d f0 	mov    %edx,-0xfd23fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010f313:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f316:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f319:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f31c:	01 c2                	add    %eax,%edx
f010f31e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f321:	89 14 85 40 aa 2d f0 	mov    %edx,-0xfd255c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f328:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f32c:	74 0b                	je     f010f339 <test_free_block_FF+0x169>
f010f32e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f331:	83 c0 10             	add    $0x10,%eax
f010f334:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f337:	74 24                	je     f010f35d <test_free_block_FF+0x18d>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010f339:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f33c:	83 c0 10             	add    $0x10,%eax
f010f33f:	83 ec 08             	sub    $0x8,%esp
f010f342:	ff 75 c0             	pushl  -0x40(%ebp)
f010f345:	50                   	push   %eax
f010f346:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f349:	68 f8 45 13 f0       	push   $0xf01345f8
f010f34e:	68 0d 02 00 00       	push   $0x20d
f010f353:	68 04 3b 13 f0       	push   $0xf0133b04
f010f358:	e8 53 0e ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010f35d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f360:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010f367:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010f36a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f36d:	8b 14 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%edx
f010f374:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f377:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010f37a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f37d:	8b 14 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%edx
f010f384:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f387:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010f38a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f38d:	8b 14 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%edx
f010f394:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f397:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010f39a:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f39d:	ff 45 d8             	incl   -0x28(%ebp)
f010f3a0:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010f3a7:	0f 8e 17 ff ff ff    	jle    f010f2c4 <test_free_block_FF+0xf4>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f3ad:	ff 45 dc             	incl   -0x24(%ebp)
f010f3b0:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f3b4:	0f 8e fe fe ff ff    	jle    f010f2b8 <test_free_block_FF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010f3ba:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f3bd:	83 e8 10             	sub    $0x10,%eax
f010f3c0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f3c3:	83 ec 08             	sub    $0x8,%esp
f010f3c6:	6a 01                	push   $0x1
f010f3c8:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f3cb:	e8 fd 03 02 00       	call   f012f7cd <alloc_block>
f010f3d0:	83 c4 10             	add    $0x10,%esp
f010f3d3:	89 c2                	mov    %eax,%edx
f010f3d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3d8:	89 14 85 40 94 2d f0 	mov    %edx,-0xfd26bc0(,%eax,4)
f010f3df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3e2:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f3e9:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010f3ec:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f3ef:	d1 e8                	shr    %eax
f010f3f1:	89 c2                	mov    %eax,%edx
f010f3f3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f3f6:	01 c2                	add    %eax,%edx
f010f3f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3fb:	89 14 85 40 c0 2d f0 	mov    %edx,-0xfd23fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010f402:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f405:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f408:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f40b:	01 c2                	add    %eax,%edx
f010f40d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f410:	89 14 85 40 aa 2d f0 	mov    %edx,-0xfd255c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f417:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f41b:	74 0b                	je     f010f428 <test_free_block_FF+0x258>
f010f41d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f420:	83 c0 10             	add    $0x10,%eax
f010f423:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f426:	74 17                	je     f010f43f <test_free_block_FF+0x26f>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f010f428:	83 ec 04             	sub    $0x4,%esp
f010f42b:	68 5c 46 13 f0       	push   $0xf013465c
f010f430:	68 1e 02 00 00       	push   $0x21e
f010f435:	68 04 3b 13 f0       	push   $0xf0133b04
f010f43a:	e8 71 0d ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010f43f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f442:	8b 14 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%edx
f010f449:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f44c:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010f44f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f452:	8b 14 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%edx
f010f459:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f45c:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010f45f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f462:	8b 14 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%edx
f010f469:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f46c:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010f46f:	83 ec 0c             	sub    $0xc,%esp
f010f472:	68 a4 46 13 f0       	push   $0xf01346a4
f010f477:	e8 b5 19 ff ff       	call   f0100e31 <cprintf>
f010f47c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f47f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010f486:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f48d:	eb 5b                	jmp    f010f4ea <test_free_block_FF+0x31a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010f48f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f492:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f499:	66 8b 00             	mov    (%eax),%ax
f010f49c:	98                   	cwtl   
f010f49d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f4a0:	75 26                	jne    f010f4c8 <test_free_block_FF+0x2f8>
f010f4a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f4a5:	8b 04 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%eax
f010f4ac:	66 8b 00             	mov    (%eax),%ax
f010f4af:	98                   	cwtl   
f010f4b0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f4b3:	75 13                	jne    f010f4c8 <test_free_block_FF+0x2f8>
f010f4b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f4b8:	8b 04 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%eax
f010f4bf:	66 8b 00             	mov    (%eax),%ax
f010f4c2:	98                   	cwtl   
f010f4c3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f4c6:	74 1f                	je     f010f4e7 <test_free_block_FF+0x317>
		{
			is_correct = 0;
f010f4c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010f4cf:	83 ec 04             	sub    $0x4,%esp
f010f4d2:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f4d5:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f4d8:	68 d8 46 13 f0       	push   $0xf01346d8
f010f4dd:	e8 4f 19 ff ff       	call   f0100e31 <cprintf>
f010f4e2:	83 c4 10             	add    $0x10,%esp
			break;
f010f4e5:	eb 0b                	jmp    f010f4f2 <test_free_block_FF+0x322>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010f4e7:	ff 45 d4             	incl   -0x2c(%ebp)
f010f4ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f4ed:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f4f0:	7c 9d                	jl     f010f48f <test_free_block_FF+0x2bf>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010f4f2:	83 ec 0c             	sub    $0xc,%esp
f010f4f5:	68 28 47 13 f0       	push   $0xf0134728
f010f4fa:	e8 32 19 ff ff       	call   f0100e31 <cprintf>
f010f4ff:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f502:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f509:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f510:	e9 e4 00 00 00       	jmp    f010f5f9 <test_free_block_FF+0x429>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010f515:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f518:	89 d0                	mov    %edx,%eax
f010f51a:	c1 e0 02             	shl    $0x2,%eax
f010f51d:	01 d0                	add    %edx,%eax
f010f51f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f526:	01 d0                	add    %edx,%eax
f010f528:	c1 e0 03             	shl    $0x3,%eax
f010f52b:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f532:	83 ec 0c             	sub    $0xc,%esp
f010f535:	50                   	push   %eax
f010f536:	e8 5e 04 02 00       	call   f012f999 <free_block>
f010f53b:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f010f53e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f541:	89 d0                	mov    %edx,%eax
f010f543:	c1 e0 02             	shl    $0x2,%eax
f010f546:	01 d0                	add    %edx,%eax
f010f548:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f54f:	01 d0                	add    %edx,%eax
f010f551:	c1 e0 03             	shl    $0x3,%eax
f010f554:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f55b:	83 ec 0c             	sub    $0xc,%esp
f010f55e:	50                   	push   %eax
f010f55f:	e8 3c 02 02 00       	call   f012f7a0 <get_block_size>
f010f564:	83 c4 10             	add    $0x10,%esp
f010f567:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f010f56a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f56d:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010f574:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010f577:	74 2b                	je     f010f5a4 <test_free_block_FF+0x3d4>
		{
			if (is_correct)
f010f579:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f57d:	74 25                	je     f010f5a4 <test_free_block_FF+0x3d4>
			{
				is_correct = 0;
f010f57f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f010f586:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f589:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010f590:	ff 75 bc             	pushl  -0x44(%ebp)
f010f593:	50                   	push   %eax
f010f594:	ff 75 d0             	pushl  -0x30(%ebp)
f010f597:	68 58 47 13 f0       	push   $0xf0134758
f010f59c:	e8 90 18 ff ff       	call   f0100e31 <cprintf>
f010f5a1:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f010f5a4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f5a7:	89 d0                	mov    %edx,%eax
f010f5a9:	c1 e0 02             	shl    $0x2,%eax
f010f5ac:	01 d0                	add    %edx,%eax
f010f5ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f5b5:	01 d0                	add    %edx,%eax
f010f5b7:	c1 e0 03             	shl    $0x3,%eax
f010f5ba:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f5c1:	83 ec 0c             	sub    $0xc,%esp
f010f5c4:	50                   	push   %eax
f010f5c5:	e8 ec 01 02 00       	call   f012f7b6 <is_free_block>
f010f5ca:	83 c4 10             	add    $0x10,%esp
f010f5cd:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f010f5d0:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f010f5d4:	74 20                	je     f010f5f6 <test_free_block_FF+0x426>
		{
			if (is_correct)
f010f5d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f5da:	74 1a                	je     f010f5f6 <test_free_block_FF+0x426>
			{
				is_correct = 0;
f010f5dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
f010f5e3:	83 ec 08             	sub    $0x8,%esp
f010f5e6:	ff 75 d0             	pushl  -0x30(%ebp)
f010f5e9:	68 bc 47 13 f0       	push   $0xf01347bc
f010f5ee:	e8 3e 18 ff ff       	call   f0100e31 <cprintf>
f010f5f3:	83 c4 10             	add    $0x10,%esp
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f5f6:	ff 45 d0             	incl   -0x30(%ebp)
f010f5f9:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f010f5fd:	0f 8e 12 ff ff ff    	jle    f010f515 <test_free_block_FF+0x345>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
			}
		}
	}
	if (is_correct)
f010f603:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f607:	74 04                	je     f010f60d <test_free_block_FF+0x43d>
	{
		eval += 10;
f010f609:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f010f60d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f010f614:	a1 20 aa 2d f0       	mov    0xf02daa20,%eax
f010f619:	83 ec 0c             	sub    $0xc,%esp
f010f61c:	50                   	push   %eax
f010f61d:	e8 77 03 02 00       	call   f012f999 <free_block>
f010f622:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f625:	a1 20 aa 2d f0       	mov    0xf02daa20,%eax
f010f62a:	83 ec 0c             	sub    $0xc,%esp
f010f62d:	50                   	push   %eax
f010f62e:	e8 6d 01 02 00       	call   f012f7a0 <get_block_size>
f010f633:	83 c4 10             	add    $0x10,%esp
f010f636:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize)
f010f639:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f63c:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010f63f:	74 1d                	je     f010f65e <test_free_block_FF+0x48e>
	{
		is_correct = 0;
f010f641:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f010f648:	83 ec 04             	sub    $0x4,%esp
f010f64b:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f64e:	ff 75 c8             	pushl  -0x38(%ebp)
f010f651:	68 14 48 13 f0       	push   $0xf0134814
f010f656:	e8 d6 17 ff ff       	call   f0100e31 <cprintf>
f010f65b:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f65e:	a1 20 aa 2d f0       	mov    0xf02daa20,%eax
f010f663:	83 ec 0c             	sub    $0xc,%esp
f010f666:	50                   	push   %eax
f010f667:	e8 4a 01 02 00       	call   f012f7b6 <is_free_block>
f010f66c:	83 c4 10             	add    $0x10,%esp
f010f66f:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f672:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f676:	74 17                	je     f010f68f <test_free_block_FF+0x4bf>
	{
		is_correct = 0;
f010f678:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f67f:	83 ec 0c             	sub    $0xc,%esp
f010f682:	68 74 48 13 f0       	push   $0xf0134874
f010f687:	e8 a5 17 ff ff       	call   f0100e31 <cprintf>
f010f68c:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f010f68f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f692:	83 e8 10             	sub    $0x10,%eax
f010f695:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f698:	83 ec 08             	sub    $0x8,%esp
f010f69b:	6a 01                	push   $0x1
f010f69d:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f6a0:	e8 28 01 02 00       	call   f012f7cd <alloc_block>
f010f6a5:	83 c4 10             	add    $0x10,%esp
f010f6a8:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f6ab:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f6af:	74 0b                	je     f010f6bc <test_free_block_FF+0x4ec>
f010f6b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f6b4:	83 c0 10             	add    $0x10,%eax
f010f6b7:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f6ba:	74 17                	je     f010f6d3 <test_free_block_FF+0x503>
	{
		is_correct = 0;
f010f6bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f6c3:	83 ec 0c             	sub    $0xc,%esp
f010f6c6:	68 cc 48 13 f0       	push   $0xf01348cc
f010f6cb:	e8 61 17 ff ff       	call   f0100e31 <cprintf>
f010f6d0:	83 c4 10             	add    $0x10,%esp
	}
	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f010f6d3:	a1 1c aa 2d f0       	mov    0xf02daa1c,%eax
f010f6d8:	83 ec 0c             	sub    $0xc,%esp
f010f6db:	50                   	push   %eax
f010f6dc:	e8 b8 02 02 00       	call   f012f999 <free_block>
f010f6e1:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f010f6e4:	a1 1c aa 2d f0       	mov    0xf02daa1c,%eax
f010f6e9:	83 ec 0c             	sub    $0xc,%esp
f010f6ec:	50                   	push   %eax
f010f6ed:	e8 ae 00 02 00       	call   f012f7a0 <get_block_size>
f010f6f2:	83 c4 10             	add    $0x10,%esp
f010f6f5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f010f6f8:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f010f6fd:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f700:	74 20                	je     f010f722 <test_free_block_FF+0x552>
	{
		is_correct = 0;
f010f702:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f010f709:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f010f70e:	83 ec 04             	sub    $0x4,%esp
f010f711:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f714:	50                   	push   %eax
f010f715:	68 18 49 13 f0       	push   $0xf0134918
f010f71a:	e8 12 17 ff ff       	call   f0100e31 <cprintf>
f010f71f:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f010f722:	a1 1c aa 2d f0       	mov    0xf02daa1c,%eax
f010f727:	83 ec 0c             	sub    $0xc,%esp
f010f72a:	50                   	push   %eax
f010f72b:	e8 86 00 02 00       	call   f012f7b6 <is_free_block>
f010f730:	83 c4 10             	add    $0x10,%esp
f010f733:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f736:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f73a:	74 17                	je     f010f753 <test_free_block_FF+0x583>
	{
		is_correct = 0;
f010f73c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f743:	83 ec 0c             	sub    $0xc,%esp
f010f746:	68 78 49 13 f0       	push   $0xf0134978
f010f74b:	e8 e1 16 ff ff       	call   f0100e31 <cprintf>
f010f750:	83 c4 10             	add    $0x10,%esp
	}
	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f010f753:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f758:	83 e8 10             	sub    $0x10,%eax
f010f75b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f75e:	83 ec 08             	sub    $0x8,%esp
f010f761:	6a 01                	push   $0x1
f010f763:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f766:	e8 62 00 02 00       	call   f012f7cd <alloc_block>
f010f76b:	83 c4 10             	add    $0x10,%esp
f010f76e:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f010f771:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f775:	74 09                	je     f010f780 <test_free_block_FF+0x5b0>
f010f777:	81 7d c0 10 00 00 f6 	cmpl   $0xf6000010,-0x40(%ebp)
f010f77e:	74 17                	je     f010f797 <test_free_block_FF+0x5c7>
	{
		is_correct = 0;
f010f780:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f787:	83 ec 0c             	sub    $0xc,%esp
f010f78a:	68 d0 49 13 f0       	push   $0xf01349d0
f010f78f:	e8 9d 16 ff ff       	call   f0100e31 <cprintf>
f010f794:	83 c4 10             	add    $0x10,%esp
	}
	//Free 2nd block
	free_block(startVAs[1]);
f010f797:	a1 44 94 2d f0       	mov    0xf02d9444,%eax
f010f79c:	83 ec 0c             	sub    $0xc,%esp
f010f79f:	50                   	push   %eax
f010f7a0:	e8 f4 01 02 00       	call   f012f999 <free_block>
f010f7a5:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f010f7a8:	a1 44 94 2d f0       	mov    0xf02d9444,%eax
f010f7ad:	83 ec 0c             	sub    $0xc,%esp
f010f7b0:	50                   	push   %eax
f010f7b1:	e8 ea ff 01 00       	call   f012f7a0 <get_block_size>
f010f7b6:	83 c4 10             	add    $0x10,%esp
f010f7b9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0])
f010f7bc:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f7c1:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f7c4:	74 20                	je     f010f7e6 <test_free_block_FF+0x616>
	{
		is_correct = 0;
f010f7c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f010f7cd:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f7d2:	83 ec 04             	sub    $0x4,%esp
f010f7d5:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f7d8:	50                   	push   %eax
f010f7d9:	68 1c 4a 13 f0       	push   $0xf0134a1c
f010f7de:	e8 4e 16 ff ff       	call   f0100e31 <cprintf>
f010f7e3:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f010f7e6:	a1 44 94 2d f0       	mov    0xf02d9444,%eax
f010f7eb:	83 ec 0c             	sub    $0xc,%esp
f010f7ee:	50                   	push   %eax
f010f7ef:	e8 c2 ff 01 00       	call   f012f7b6 <is_free_block>
f010f7f4:	83 c4 10             	add    $0x10,%esp
f010f7f7:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f7fa:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f7fe:	74 17                	je     f010f817 <test_free_block_FF+0x647>
	{
		is_correct = 0;
f010f800:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f807:	83 ec 0c             	sub    $0xc,%esp
f010f80a:	68 7c 4a 13 f0       	push   $0xf0134a7c
f010f80f:	e8 1d 16 ff ff       	call   f0100e31 <cprintf>
f010f814:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f817:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f81b:	74 04                	je     f010f821 <test_free_block_FF+0x651>
	{
		eval += 10;
f010f81d:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f010f821:	83 ec 0c             	sub    $0xc,%esp
f010f824:	68 d4 4a 13 f0       	push   $0xf0134ad4
f010f829:	e8 03 16 ff ff       	call   f0100e31 <cprintf>
f010f82e:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f010f831:	83 ec 0c             	sub    $0xc,%esp
f010f834:	68 10 4b 13 f0       	push   $0xf0134b10
f010f839:	e8 f3 15 ff ff       	call   f0100e31 <cprintf>
f010f83e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f841:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f010f848:	c7 45 ac 78 05 00 00 	movl   $0x578,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f84f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f852:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f859:	83 ec 0c             	sub    $0xc,%esp
f010f85c:	50                   	push   %eax
f010f85d:	e8 37 01 02 00       	call   f012f999 <free_block>
f010f862:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f865:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f868:	48                   	dec    %eax
f010f869:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f870:	83 ec 0c             	sub    $0xc,%esp
f010f873:	50                   	push   %eax
f010f874:	e8 27 ff 01 00       	call   f012f7a0 <get_block_size>
f010f879:	83 c4 10             	add    $0x10,%esp
f010f87c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f010f87f:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f010f885:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f888:	01 d0                	add    %edx,%eax
f010f88a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f88d:	74 26                	je     f010f8b5 <test_free_block_FF+0x6e5>
	{
		is_correct = 0;
f010f88f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f010f896:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f010f89c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f89f:	01 d0                	add    %edx,%eax
f010f8a1:	83 ec 04             	sub    $0x4,%esp
f010f8a4:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f8a7:	50                   	push   %eax
f010f8a8:	68 28 4b 13 f0       	push   $0xf0134b28
f010f8ad:	e8 7f 15 ff ff       	call   f0100e31 <cprintf>
f010f8b2:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f8b5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8b8:	48                   	dec    %eax
f010f8b9:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f8c0:	83 ec 0c             	sub    $0xc,%esp
f010f8c3:	50                   	push   %eax
f010f8c4:	e8 ed fe 01 00       	call   f012f7b6 <is_free_block>
f010f8c9:	83 c4 10             	add    $0x10,%esp
f010f8cc:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f8cf:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f8d3:	74 17                	je     f010f8ec <test_free_block_FF+0x71c>
	{
		is_correct = 0;
f010f8d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f8dc:	83 ec 0c             	sub    $0xc,%esp
f010f8df:	68 88 4b 13 f0       	push   $0xf0134b88
f010f8e4:	e8 48 15 ff ff       	call   f0100e31 <cprintf>
f010f8e9:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010f8ec:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8ef:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f8f6:	83 ec 0c             	sub    $0xc,%esp
f010f8f9:	50                   	push   %eax
f010f8fa:	e8 a1 fe 01 00       	call   f012f7a0 <get_block_size>
f010f8ff:	83 c4 10             	add    $0x10,%esp
f010f902:	85 c0                	test   %eax,%eax
f010f904:	75 1a                	jne    f010f920 <test_free_block_FF+0x750>
f010f906:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f909:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f910:	83 ec 0c             	sub    $0xc,%esp
f010f913:	50                   	push   %eax
f010f914:	e8 9d fe 01 00       	call   f012f7b6 <is_free_block>
f010f919:	83 c4 10             	add    $0x10,%esp
f010f91c:	84 c0                	test   %al,%al
f010f91e:	74 17                	je     f010f937 <test_free_block_FF+0x767>
	{
		is_correct = 0;
f010f920:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f927:	83 ec 0c             	sub    $0xc,%esp
f010f92a:	68 e0 4b 13 f0       	push   $0xf0134be0
f010f92f:	e8 fd 14 ff ff       	call   f0100e31 <cprintf>
f010f934:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f010f937:	83 ec 0c             	sub    $0xc,%esp
f010f93a:	68 4a 4c 13 f0       	push   $0xf0134c4a
f010f93f:	e8 ed 14 ff ff       	call   f0100e31 <cprintf>
f010f944:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f010f947:	c7 45 ac 91 01 00 00 	movl   $0x191,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f94e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f951:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f958:	83 ec 0c             	sub    $0xc,%esp
f010f95b:	50                   	push   %eax
f010f95c:	e8 38 00 02 00       	call   f012f999 <free_block>
f010f961:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f964:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f967:	48                   	dec    %eax
f010f968:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f96f:	83 ec 0c             	sub    $0xc,%esp
f010f972:	50                   	push   %eax
f010f973:	e8 28 fe 01 00       	call   f012f7a0 <get_block_size>
f010f978:	83 c4 10             	add    $0x10,%esp
f010f97b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f010f97e:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f010f984:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f010f989:	01 d0                	add    %edx,%eax
f010f98b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f98e:	74 28                	je     f010f9b8 <test_free_block_FF+0x7e8>
	{
		is_correct = 0;
f010f990:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f010f997:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f010f99d:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f010f9a2:	01 d0                	add    %edx,%eax
f010f9a4:	83 ec 04             	sub    $0x4,%esp
f010f9a7:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f9aa:	50                   	push   %eax
f010f9ab:	68 64 4c 13 f0       	push   $0xf0134c64
f010f9b0:	e8 7c 14 ff ff       	call   f0100e31 <cprintf>
f010f9b5:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f9b8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9bb:	48                   	dec    %eax
f010f9bc:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f9c3:	83 ec 0c             	sub    $0xc,%esp
f010f9c6:	50                   	push   %eax
f010f9c7:	e8 ea fd 01 00       	call   f012f7b6 <is_free_block>
f010f9cc:	83 c4 10             	add    $0x10,%esp
f010f9cf:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f9d2:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f9d6:	74 17                	je     f010f9ef <test_free_block_FF+0x81f>
	{
		is_correct = 0;
f010f9d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f9df:	83 ec 0c             	sub    $0xc,%esp
f010f9e2:	68 c4 4c 13 f0       	push   $0xf0134cc4
f010f9e7:	e8 45 14 ff ff       	call   f0100e31 <cprintf>
f010f9ec:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010f9ef:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9f2:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010f9f9:	83 ec 0c             	sub    $0xc,%esp
f010f9fc:	50                   	push   %eax
f010f9fd:	e8 9e fd 01 00       	call   f012f7a0 <get_block_size>
f010fa02:	83 c4 10             	add    $0x10,%esp
f010fa05:	85 c0                	test   %eax,%eax
f010fa07:	75 1a                	jne    f010fa23 <test_free_block_FF+0x853>
f010fa09:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa0c:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fa13:	83 ec 0c             	sub    $0xc,%esp
f010fa16:	50                   	push   %eax
f010fa17:	e8 9a fd 01 00       	call   f012f7b6 <is_free_block>
f010fa1c:	83 c4 10             	add    $0x10,%esp
f010fa1f:	84 c0                	test   %al,%al
f010fa21:	74 17                	je     f010fa3a <test_free_block_FF+0x86a>
	{
		is_correct = 0;
f010fa23:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fa2a:	83 ec 0c             	sub    $0xc,%esp
f010fa2d:	68 1c 4d 13 f0       	push   $0xf0134d1c
f010fa32:	e8 fa 13 ff ff       	call   f0100e31 <cprintf>
f010fa37:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fa3a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fa3e:	74 04                	je     f010fa44 <test_free_block_FF+0x874>
	{
		eval += 15;
f010fa40:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f010fa44:	83 ec 0c             	sub    $0xc,%esp
f010fa47:	68 88 4d 13 f0       	push   $0xf0134d88
f010fa4c:	e8 e0 13 ff ff       	call   f0100e31 <cprintf>
f010fa51:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f010fa54:	83 ec 0c             	sub    $0xc,%esp
f010fa57:	68 c0 4d 13 f0       	push   $0xf0134dc0
f010fa5c:	e8 d0 13 ff ff       	call   f0100e31 <cprintf>
f010fa61:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fa64:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f010fa6b:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fa72:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa75:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fa7c:	83 ec 0c             	sub    $0xc,%esp
f010fa7f:	50                   	push   %eax
f010fa80:	e8 14 ff 01 00       	call   f012f999 <free_block>
f010fa85:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fa88:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa8b:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fa92:	83 ec 0c             	sub    $0xc,%esp
f010fa95:	50                   	push   %eax
f010fa96:	e8 05 fd 01 00       	call   f012f7a0 <get_block_size>
f010fa9b:	83 c4 10             	add    $0x10,%esp
f010fa9e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f010faa1:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010faa7:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010faac:	01 d0                	add    %edx,%eax
f010faae:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fab1:	74 28                	je     f010fadb <test_free_block_FF+0x90b>
	{
		is_correct = 0;
f010fab3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f010faba:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010fac0:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010fac5:	01 d0                	add    %edx,%eax
f010fac7:	83 ec 04             	sub    $0x4,%esp
f010faca:	ff 75 b4             	pushl  -0x4c(%ebp)
f010facd:	50                   	push   %eax
f010face:	68 64 4c 13 f0       	push   $0xf0134c64
f010fad3:	e8 59 13 ff ff       	call   f0100e31 <cprintf>
f010fad8:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fadb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fade:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fae5:	83 ec 0c             	sub    $0xc,%esp
f010fae8:	50                   	push   %eax
f010fae9:	e8 c8 fc 01 00       	call   f012f7b6 <is_free_block>
f010faee:	83 c4 10             	add    $0x10,%esp
f010faf1:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010faf4:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010faf8:	74 17                	je     f010fb11 <test_free_block_FF+0x941>
	{
		is_correct = 0;
f010fafa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fb01:	83 ec 0c             	sub    $0xc,%esp
f010fb04:	68 c4 4c 13 f0       	push   $0xf0134cc4
f010fb09:	e8 23 13 ff ff       	call   f0100e31 <cprintf>
f010fb0e:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fb11:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb14:	40                   	inc    %eax
f010fb15:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fb1c:	83 ec 0c             	sub    $0xc,%esp
f010fb1f:	50                   	push   %eax
f010fb20:	e8 7b fc 01 00       	call   f012f7a0 <get_block_size>
f010fb25:	83 c4 10             	add    $0x10,%esp
f010fb28:	85 c0                	test   %eax,%eax
f010fb2a:	75 1b                	jne    f010fb47 <test_free_block_FF+0x977>
f010fb2c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb2f:	40                   	inc    %eax
f010fb30:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fb37:	83 ec 0c             	sub    $0xc,%esp
f010fb3a:	50                   	push   %eax
f010fb3b:	e8 76 fc 01 00       	call   f012f7b6 <is_free_block>
f010fb40:	83 c4 10             	add    $0x10,%esp
f010fb43:	84 c0                	test   %al,%al
f010fb45:	74 17                	je     f010fb5e <test_free_block_FF+0x98e>
	{
		is_correct = 0;
f010fb47:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fb4e:	83 ec 0c             	sub    $0xc,%esp
f010fb51:	68 1c 4d 13 f0       	push   $0xf0134d1c
f010fb56:	e8 d6 12 ff ff       	call   f0100e31 <cprintf>
f010fb5b:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f010fb5e:	83 ec 0c             	sub    $0xc,%esp
f010fb61:	68 d5 4d 13 f0       	push   $0xf0134dd5
f010fb66:	e8 c6 12 ff ff       	call   f0100e31 <cprintf>
f010fb6b:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f010fb6e:	c7 45 ac c7 00 00 00 	movl   $0xc7,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fb75:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb78:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fb7f:	83 ec 0c             	sub    $0xc,%esp
f010fb82:	50                   	push   %eax
f010fb83:	e8 11 fe 01 00       	call   f012f999 <free_block>
f010fb88:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fb8b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb8e:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fb95:	83 ec 0c             	sub    $0xc,%esp
f010fb98:	50                   	push   %eax
f010fb99:	e8 02 fc 01 00       	call   f012f7a0 <get_block_size>
f010fb9e:	83 c4 10             	add    $0x10,%esp
f010fba1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f010fba4:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010fbaa:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f010fbaf:	01 d0                	add    %edx,%eax
f010fbb1:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fbb4:	74 28                	je     f010fbde <test_free_block_FF+0xa0e>
	{
		is_correct = 0;
f010fbb6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f010fbbd:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010fbc3:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f010fbc8:	01 d0                	add    %edx,%eax
f010fbca:	83 ec 04             	sub    $0x4,%esp
f010fbcd:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fbd0:	50                   	push   %eax
f010fbd1:	68 f0 4d 13 f0       	push   $0xf0134df0
f010fbd6:	e8 56 12 ff ff       	call   f0100e31 <cprintf>
f010fbdb:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fbde:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbe1:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fbe8:	83 ec 0c             	sub    $0xc,%esp
f010fbeb:	50                   	push   %eax
f010fbec:	e8 c5 fb 01 00       	call   f012f7b6 <is_free_block>
f010fbf1:	83 c4 10             	add    $0x10,%esp
f010fbf4:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fbf7:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fbfb:	74 17                	je     f010fc14 <test_free_block_FF+0xa44>
	{
		is_correct = 0;
f010fbfd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fc04:	83 ec 0c             	sub    $0xc,%esp
f010fc07:	68 54 4e 13 f0       	push   $0xf0134e54
f010fc0c:	e8 20 12 ff ff       	call   f0100e31 <cprintf>
f010fc11:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fc14:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc17:	40                   	inc    %eax
f010fc18:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fc1f:	83 ec 0c             	sub    $0xc,%esp
f010fc22:	50                   	push   %eax
f010fc23:	e8 78 fb 01 00       	call   f012f7a0 <get_block_size>
f010fc28:	83 c4 10             	add    $0x10,%esp
f010fc2b:	85 c0                	test   %eax,%eax
f010fc2d:	75 1b                	jne    f010fc4a <test_free_block_FF+0xa7a>
f010fc2f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc32:	40                   	inc    %eax
f010fc33:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fc3a:	83 ec 0c             	sub    $0xc,%esp
f010fc3d:	50                   	push   %eax
f010fc3e:	e8 73 fb 01 00       	call   f012f7b6 <is_free_block>
f010fc43:	83 c4 10             	add    $0x10,%esp
f010fc46:	84 c0                	test   %al,%al
f010fc48:	74 17                	je     f010fc61 <test_free_block_FF+0xa91>
	{
		is_correct = 0;
f010fc4a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fc51:	83 ec 0c             	sub    $0xc,%esp
f010fc54:	68 ac 4e 13 f0       	push   $0xf0134eac
f010fc59:	e8 d3 11 ff ff       	call   f0100e31 <cprintf>
f010fc5e:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fc61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fc65:	74 04                	je     f010fc6b <test_free_block_FF+0xa9b>
	{
		eval += 15;
f010fc67:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f010fc6b:	83 ec 0c             	sub    $0xc,%esp
f010fc6e:	68 18 4f 13 f0       	push   $0xf0134f18
f010fc73:	e8 b9 11 ff ff       	call   f0100e31 <cprintf>
f010fc78:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fc7b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f010fc82:	c7 45 ac 1e 03 00 00 	movl   $0x31e,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fc89:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc8c:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fc93:	83 ec 0c             	sub    $0xc,%esp
f010fc96:	50                   	push   %eax
f010fc97:	e8 fd fc 01 00       	call   f012f999 <free_block>
f010fc9c:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f010fc9f:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fca6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fca9:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fcb0:	83 ec 0c             	sub    $0xc,%esp
f010fcb3:	50                   	push   %eax
f010fcb4:	e8 e0 fc 01 00       	call   f012f999 <free_block>
f010fcb9:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fcbc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fcbf:	48                   	dec    %eax
f010fcc0:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fcc7:	83 ec 0c             	sub    $0xc,%esp
f010fcca:	50                   	push   %eax
f010fccb:	e8 d0 fa 01 00       	call   f012f7a0 <get_block_size>
f010fcd0:	83 c4 10             	add    $0x10,%esp
f010fcd3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f010fcd6:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f010fcdc:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f010fce1:	01 c2                	add    %eax,%edx
f010fce3:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f010fce8:	01 d0                	add    %edx,%eax
f010fcea:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fced:	74 2f                	je     f010fd1e <test_free_block_FF+0xb4e>
	{
		is_correct = 0;
f010fcef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f010fcf6:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f010fcfc:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f010fd01:	01 c2                	add    %eax,%edx
f010fd03:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f010fd08:	01 d0                	add    %edx,%eax
f010fd0a:	83 ec 04             	sub    $0x4,%esp
f010fd0d:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fd10:	50                   	push   %eax
f010fd11:	68 58 4f 13 f0       	push   $0xf0134f58
f010fd16:	e8 16 11 ff ff       	call   f0100e31 <cprintf>
f010fd1b:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fd1e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd21:	48                   	dec    %eax
f010fd22:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fd29:	83 ec 0c             	sub    $0xc,%esp
f010fd2c:	50                   	push   %eax
f010fd2d:	e8 84 fa 01 00       	call   f012f7b6 <is_free_block>
f010fd32:	83 c4 10             	add    $0x10,%esp
f010fd35:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fd38:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fd3c:	74 17                	je     f010fd55 <test_free_block_FF+0xb85>
	{
		is_correct = 0;
f010fd3e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fd45:	83 ec 0c             	sub    $0xc,%esp
f010fd48:	68 bc 4f 13 f0       	push   $0xf0134fbc
f010fd4d:	e8 df 10 ff ff       	call   f0100e31 <cprintf>
f010fd52:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fd55:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd58:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fd5f:	83 ec 0c             	sub    $0xc,%esp
f010fd62:	50                   	push   %eax
f010fd63:	e8 38 fa 01 00       	call   f012f7a0 <get_block_size>
f010fd68:	83 c4 10             	add    $0x10,%esp
f010fd6b:	85 c0                	test   %eax,%eax
f010fd6d:	75 50                	jne    f010fdbf <test_free_block_FF+0xbef>
f010fd6f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd72:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fd79:	83 ec 0c             	sub    $0xc,%esp
f010fd7c:	50                   	push   %eax
f010fd7d:	e8 34 fa 01 00       	call   f012f7b6 <is_free_block>
f010fd82:	83 c4 10             	add    $0x10,%esp
f010fd85:	84 c0                	test   %al,%al
f010fd87:	75 36                	jne    f010fdbf <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fd89:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd8c:	40                   	inc    %eax
f010fd8d:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fd94:	83 ec 0c             	sub    $0xc,%esp
f010fd97:	50                   	push   %eax
f010fd98:	e8 03 fa 01 00       	call   f012f7a0 <get_block_size>
f010fd9d:	83 c4 10             	add    $0x10,%esp
	if (block_status != 1)
	{
		is_correct = 0;
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fda0:	85 c0                	test   %eax,%eax
f010fda2:	75 1b                	jne    f010fdbf <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fda4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fda7:	40                   	inc    %eax
f010fda8:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f010fdaf:	83 ec 0c             	sub    $0xc,%esp
f010fdb2:	50                   	push   %eax
f010fdb3:	e8 fe f9 01 00       	call   f012f7b6 <is_free_block>
f010fdb8:	83 c4 10             	add    $0x10,%esp
f010fdbb:	84 c0                	test   %al,%al
f010fdbd:	74 17                	je     f010fdd6 <test_free_block_FF+0xc06>
	{
		is_correct = 0;
f010fdbf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fdc6:	83 ec 0c             	sub    $0xc,%esp
f010fdc9:	68 14 50 13 f0       	push   $0xf0135014
f010fdce:	e8 5e 10 ff ff       	call   f0100e31 <cprintf>
f010fdd3:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fdd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fdda:	74 04                	je     f010fde0 <test_free_block_FF+0xc10>
	{
		eval += 20;
f010fddc:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f010fde0:	83 ec 0c             	sub    $0xc,%esp
f010fde3:	68 80 50 13 f0       	push   $0xf0135080
f010fde8:	e8 44 10 ff ff       	call   f0100e31 <cprintf>
f010fded:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f010fdf0:	83 ec 0c             	sub    $0xc,%esp
f010fdf3:	68 c4 50 13 f0       	push   $0xf01350c4
f010fdf8:	e8 34 10 ff ff       	call   f0100e31 <cprintf>
f010fdfd:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fe00:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData();
f010fe07:	c7 45 c4 f0 13 00 00 	movl   $0x13f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fe0e:	83 ec 08             	sub    $0x8,%esp
f010fe11:	6a 01                	push   $0x1
f010fe13:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fe16:	e8 b2 f9 01 00       	call   f012f7cd <alloc_block>
f010fe1b:	83 c4 10             	add    $0x10,%esp
f010fe1e:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f010fe21:	c7 45 a8 10 00 00 f6 	movl   $0xf6000010,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fe28:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fe2c:	74 08                	je     f010fe36 <test_free_block_FF+0xc66>
f010fe2e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fe31:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fe34:	74 1d                	je     f010fe53 <test_free_block_FF+0xc83>
	{
		is_correct = 0;
f010fe36:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fe3d:	83 ec 04             	sub    $0x4,%esp
f010fe40:	ff 75 c0             	pushl  -0x40(%ebp)
f010fe43:	ff 75 a8             	pushl  -0x58(%ebp)
f010fe46:	68 ec 50 13 f0       	push   $0xf01350ec
f010fe4b:	e8 e1 0f ff ff       	call   f0100e31 <cprintf>
f010fe50:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData();
f010fe53:	c7 45 c4 f0 0b 00 00 	movl   $0xbf0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fe5a:	83 ec 08             	sub    $0x8,%esp
f010fe5d:	6a 01                	push   $0x1
f010fe5f:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fe62:	e8 66 f9 01 00       	call   f012f7cd <alloc_block>
f010fe67:	83 c4 10             	add    $0x10,%esp
f010fe6a:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f010fe6d:	c7 45 a8 10 14 00 f6 	movl   $0xf6001410,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fe74:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fe78:	74 08                	je     f010fe82 <test_free_block_FF+0xcb2>
f010fe7a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fe7d:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fe80:	74 1d                	je     f010fe9f <test_free_block_FF+0xccf>
	{
		is_correct = 0;
f010fe82:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fe89:	83 ec 04             	sub    $0x4,%esp
f010fe8c:	ff 75 c0             	pushl  -0x40(%ebp)
f010fe8f:	ff 75 a8             	pushl  -0x58(%ebp)
f010fe92:	68 50 51 13 f0       	push   $0xf0135150
f010fe97:	e8 95 0f ff ff       	call   f0100e31 <cprintf>
f010fe9c:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f010fe9f:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fea6:	83 ec 08             	sub    $0x8,%esp
f010fea9:	6a 01                	push   $0x1
f010feab:	ff 75 c4             	pushl  -0x3c(%ebp)
f010feae:	e8 1a f9 01 00       	call   f012f7cd <alloc_block>
f010feb3:	83 c4 10             	add    $0x10,%esp
f010feb6:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f010feb9:	a1 5c 97 2d f0       	mov    0xf02d975c,%eax
f010febe:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fec1:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fec5:	74 08                	je     f010fecf <test_free_block_FF+0xcff>
f010fec7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010feca:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fecd:	74 1d                	je     f010feec <test_free_block_FF+0xd1c>
	{
		is_correct = 0;
f010fecf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fed6:	83 ec 04             	sub    $0x4,%esp
f010fed9:	ff 75 c0             	pushl  -0x40(%ebp)
f010fedc:	ff 75 a8             	pushl  -0x58(%ebp)
f010fedf:	68 b4 51 13 f0       	push   $0xf01351b4
f010fee4:	e8 48 0f ff ff       	call   f0100e31 <cprintf>
f010fee9:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010feec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fef0:	74 04                	je     f010fef6 <test_free_block_FF+0xd26>
	{
		eval += 10;
f010fef2:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f010fef6:	83 ec 0c             	sub    $0xc,%esp
f010fef9:	68 18 52 13 f0       	push   $0xf0135218
f010fefe:	e8 2e 0f ff ff       	call   f0100e31 <cprintf>
f010ff03:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ff06:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f010ff0d:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ff14:	83 ec 08             	sub    $0x8,%esp
f010ff17:	6a 01                	push   $0x1
f010ff19:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ff1c:	e8 ac f8 01 00       	call   f012f7cd <alloc_block>
f010ff21:	83 c4 10             	add    $0x10,%esp
f010ff24:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f010ff27:	a1 b8 a0 2d f0       	mov    0xf02da0b8,%eax
f010ff2c:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ff2f:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ff33:	74 08                	je     f010ff3d <test_free_block_FF+0xd6d>
f010ff35:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ff38:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ff3b:	74 1d                	je     f010ff5a <test_free_block_FF+0xd8a>
	{
		is_correct = 0;
f010ff3d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ff44:	83 ec 04             	sub    $0x4,%esp
f010ff47:	ff 75 c0             	pushl  -0x40(%ebp)
f010ff4a:	ff 75 a8             	pushl  -0x58(%ebp)
f010ff4d:	68 48 52 13 f0       	push   $0xf0135248
f010ff52:	e8 da 0e ff ff       	call   f0100e31 <cprintf>
f010ff57:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ff5a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff5e:	74 04                	je     f010ff64 <test_free_block_FF+0xd94>
	{
		eval += 10;
f010ff60:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f010ff64:	83 ec 0c             	sub    $0xc,%esp
f010ff67:	68 ac 52 13 f0       	push   $0xf01352ac
f010ff6c:	e8 c0 0e ff ff       	call   f0100e31 <cprintf>
f010ff71:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ff74:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData();
f010ff7b:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ff82:	83 ec 08             	sub    $0x8,%esp
f010ff85:	6a 01                	push   $0x1
f010ff87:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ff8a:	e8 3e f8 01 00       	call   f012f7cd <alloc_block>
f010ff8f:	83 c4 10             	add    $0x10,%esp
f010ff92:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f010ff95:	a1 80 9a 2d f0       	mov    0xf02d9a80,%eax
f010ff9a:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ff9d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ffa1:	74 08                	je     f010ffab <test_free_block_FF+0xddb>
f010ffa3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ffa6:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ffa9:	74 1d                	je     f010ffc8 <test_free_block_FF+0xdf8>
	{
		is_correct = 0;
f010ffab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ffb2:	83 ec 04             	sub    $0x4,%esp
f010ffb5:	ff 75 c0             	pushl  -0x40(%ebp)
f010ffb8:	ff 75 a8             	pushl  -0x58(%ebp)
f010ffbb:	68 48 52 13 f0       	push   $0xf0135248
f010ffc0:	e8 6c 0e ff ff       	call   f0100e31 <cprintf>
f010ffc5:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData();
f010ffc8:	c7 45 c4 f0 1f 00 00 	movl   $0x1ff0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ffcf:	83 ec 08             	sub    $0x8,%esp
f010ffd2:	6a 01                	push   $0x1
f010ffd4:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ffd7:	e8 f1 f7 01 00       	call   f012f7cd <alloc_block>
f010ffdc:	83 c4 10             	add    $0x10,%esp
f010ffdf:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f010ffe2:	a1 1c aa 2d f0       	mov    0xf02daa1c,%eax
f010ffe7:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ffea:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ffee:	74 08                	je     f010fff8 <test_free_block_FF+0xe28>
f010fff0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fff3:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fff6:	74 1d                	je     f0110015 <test_free_block_FF+0xe45>
	{
		is_correct = 0;
f010fff8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ffff:	83 ec 04             	sub    $0x4,%esp
f0110002:	ff 75 c0             	pushl  -0x40(%ebp)
f0110005:	ff 75 a8             	pushl  -0x58(%ebp)
f0110008:	68 d4 52 13 f0       	push   $0xf01352d4
f011000d:	e8 1f 0e ff ff       	call   f0100e31 <cprintf>
f0110012:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110015:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110019:	74 04                	je     f011001f <test_free_block_FF+0xe4f>
	{
		eval += 10;
f011001b:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f011001f:	83 ec 08             	sub    $0x8,%esp
f0110022:	ff 75 f4             	pushl  -0xc(%ebp)
f0110025:	68 38 53 13 f0       	push   $0xf0135338
f011002a:	e8 02 0e ff ff       	call   f0100e31 <cprintf>
f011002f:	83 c4 10             	add    $0x10,%esp

}
f0110032:	90                   	nop
f0110033:	c9                   	leave  
f0110034:	c3                   	ret    

f0110035 <test_free_block_BF>:

void test_free_block_BF()
{
f0110035:	55                   	push   %ebp
f0110036:	89 e5                	mov    %esp,%ebp
f0110038:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f011003b:	83 ec 0c             	sub    $0xc,%esp
f011003e:	68 a8 44 13 f0       	push   $0xf01344a8
f0110043:	e8 e9 0d ff ff       	call   f0100e31 <cprintf>
f0110048:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f011004b:	83 ec 0c             	sub    $0xc,%esp
f011004e:	68 e8 44 13 f0       	push   $0xf01344e8
f0110053:	e8 d9 0d ff ff       	call   f0100e31 <cprintf>
f0110058:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f011005b:	83 ec 0c             	sub    $0xc,%esp
f011005e:	68 a8 44 13 f0       	push   $0xf01344a8
f0110063:	e8 c9 0d ff ff       	call   f0100e31 <cprintf>
f0110068:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f011006b:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110072:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110075:	83 ec 08             	sub    $0x8,%esp
f0110078:	50                   	push   %eax
f0110079:	68 00 00 00 f6       	push   $0xf6000000
f011007e:	e8 63 f8 01 00       	call   f012f8e6 <initialize_dynamic_allocator>
f0110083:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f0110086:	83 ec 0c             	sub    $0xc,%esp
f0110089:	68 28 45 13 f0       	push   $0xf0134528
f011008e:	e8 9e 0d ff ff       	call   f0100e31 <cprintf>
f0110093:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f0110096:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f011009d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01100a4:	eb 2a                	jmp    f01100d0 <test_free_block_BF+0x9b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01100a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01100a9:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f01100b0:	89 d0                	mov    %edx,%eax
f01100b2:	c1 e0 02             	shl    $0x2,%eax
f01100b5:	01 d0                	add    %edx,%eax
f01100b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01100be:	01 d0                	add    %edx,%eax
f01100c0:	c1 e0 03             	shl    $0x3,%eax
f01100c3:	89 c2                	mov    %eax,%edx
f01100c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01100c8:	01 d0                	add    %edx,%eax
f01100ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f01100cd:	ff 45 f0             	incl   -0x10(%ebp)
f01100d0:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f01100d4:	7e d0                	jle    f01100a6 <test_free_block_BF+0x71>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f01100d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01100d9:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01100dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f01100df:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f01100e3:	7f 17                	jg     f01100fc <test_free_block_BF+0xc7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f01100e5:	83 ec 04             	sub    $0x4,%esp
f01100e8:	68 80 45 13 f0       	push   $0xf0134580
f01100ed:	68 90 03 00 00       	push   $0x390
f01100f2:	68 04 3b 13 f0       	push   $0xf0133b04
f01100f7:	e8 b4 00 ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f01100fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110103:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011010a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0110111:	e9 f8 00 00 00       	jmp    f011020e <test_free_block_BF+0x1d9>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110116:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011011d:	e9 dc 00 00 00       	jmp    f01101fe <test_free_block_BF+0x1c9>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110122:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110125:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f011012c:	83 e8 10             	sub    $0x10,%eax
f011012f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0110132:	83 ec 08             	sub    $0x8,%esp
f0110135:	6a 03                	push   $0x3
f0110137:	ff 75 cc             	pushl  -0x34(%ebp)
f011013a:	e8 8e f6 01 00       	call   f012f7cd <alloc_block>
f011013f:	83 c4 10             	add    $0x10,%esp
f0110142:	89 c2                	mov    %eax,%edx
f0110144:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110147:	89 14 85 40 94 2d f0 	mov    %edx,-0xfd26bc0(,%eax,4)
f011014e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110151:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110158:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f011015b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011015e:	d1 e8                	shr    %eax
f0110160:	89 c2                	mov    %eax,%edx
f0110162:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110165:	01 c2                	add    %eax,%edx
f0110167:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011016a:	89 14 85 40 c0 2d f0 	mov    %edx,-0xfd23fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0110171:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110174:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110177:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011017a:	01 c2                	add    %eax,%edx
f011017c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011017f:	89 14 85 40 aa 2d f0 	mov    %edx,-0xfd255c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110186:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f011018a:	74 0b                	je     f0110197 <test_free_block_BF+0x162>
f011018c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011018f:	83 c0 10             	add    $0x10,%eax
f0110192:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0110195:	74 24                	je     f01101bb <test_free_block_BF+0x186>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0110197:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011019a:	83 c0 10             	add    $0x10,%eax
f011019d:	83 ec 08             	sub    $0x8,%esp
f01101a0:	ff 75 c8             	pushl  -0x38(%ebp)
f01101a3:	50                   	push   %eax
f01101a4:	ff 75 ec             	pushl  -0x14(%ebp)
f01101a7:	68 74 53 13 f0       	push   $0xf0135374
f01101ac:	68 9f 03 00 00       	push   $0x39f
f01101b1:	68 04 3b 13 f0       	push   $0xf0133b04
f01101b6:	e8 f5 ff fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f01101bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01101be:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f01101c5:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f01101c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101cb:	8b 14 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%edx
f01101d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101d5:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f01101d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101db:	8b 14 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%edx
f01101e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101e5:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f01101e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101eb:	8b 14 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%edx
f01101f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101f5:	66 89 02             	mov    %ax,(%edx)
			idx++;
f01101f8:	ff 45 ec             	incl   -0x14(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01101fb:	ff 45 e0             	incl   -0x20(%ebp)
f01101fe:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f0110205:	0f 8e 17 ff ff ff    	jle    f0110122 <test_free_block_BF+0xed>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011020b:	ff 45 e4             	incl   -0x1c(%ebp)
f011020e:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f0110212:	0f 8e fe fe ff ff    	jle    f0110116 <test_free_block_BF+0xe1>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f0110218:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011021b:	83 e8 10             	sub    $0x10,%eax
f011021e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0110221:	83 ec 08             	sub    $0x8,%esp
f0110224:	6a 03                	push   $0x3
f0110226:	ff 75 cc             	pushl  -0x34(%ebp)
f0110229:	e8 9f f5 01 00       	call   f012f7cd <alloc_block>
f011022e:	83 c4 10             	add    $0x10,%esp
f0110231:	89 c2                	mov    %eax,%edx
f0110233:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110236:	89 14 85 40 94 2d f0 	mov    %edx,-0xfd26bc0(,%eax,4)
f011023d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110240:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110247:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f011024a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011024d:	d1 e8                	shr    %eax
f011024f:	89 c2                	mov    %eax,%edx
f0110251:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110254:	01 c2                	add    %eax,%edx
f0110256:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110259:	89 14 85 40 c0 2d f0 	mov    %edx,-0xfd23fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0110260:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110263:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110266:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110269:	01 c2                	add    %eax,%edx
f011026b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011026e:	89 14 85 40 aa 2d f0 	mov    %edx,-0xfd255c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110275:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110279:	74 0b                	je     f0110286 <test_free_block_BF+0x251>
f011027b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011027e:	83 c0 10             	add    $0x10,%eax
f0110281:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0110284:	74 17                	je     f011029d <test_free_block_BF+0x268>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_BF return wrong address.");
f0110286:	83 ec 04             	sub    $0x4,%esp
f0110289:	68 d8 53 13 f0       	push   $0xf01353d8
f011028e:	68 b0 03 00 00       	push   $0x3b0
f0110293:	68 04 3b 13 f0       	push   $0xf0133b04
f0110298:	e8 13 ff fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f011029d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102a0:	8b 14 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%edx
f01102a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102aa:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f01102ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102b0:	8b 14 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%edx
f01102b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102ba:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f01102bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102c0:	8b 14 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%edx
f01102c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102ca:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f01102cd:	83 ec 0c             	sub    $0xc,%esp
f01102d0:	68 a4 46 13 f0       	push   $0xf01346a4
f01102d5:	e8 57 0b ff ff       	call   f0100e31 <cprintf>
f01102da:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f01102dd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01102e4:	eb 59                	jmp    f011033f <test_free_block_BF+0x30a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01102e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01102e9:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01102f0:	66 8b 00             	mov    (%eax),%ax
f01102f3:	98                   	cwtl   
f01102f4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01102f7:	75 26                	jne    f011031f <test_free_block_BF+0x2ea>
f01102f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01102fc:	8b 04 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%eax
f0110303:	66 8b 00             	mov    (%eax),%ax
f0110306:	98                   	cwtl   
f0110307:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011030a:	75 13                	jne    f011031f <test_free_block_BF+0x2ea>
f011030c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011030f:	8b 04 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%eax
f0110316:	66 8b 00             	mov    (%eax),%ax
f0110319:	98                   	cwtl   
f011031a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011031d:	74 1d                	je     f011033c <test_free_block_BF+0x307>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f011031f:	83 ec 0c             	sub    $0xc,%esp
f0110322:	ff 75 dc             	pushl  -0x24(%ebp)
f0110325:	ff 75 dc             	pushl  -0x24(%ebp)
f0110328:	68 20 54 13 f0       	push   $0xf0135420
f011032d:	68 bc 03 00 00       	push   $0x3bc
f0110332:	68 04 3b 13 f0       	push   $0xf0133b04
f0110337:	e8 74 fe fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f011033c:	ff 45 dc             	incl   -0x24(%ebp)
f011033f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110342:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110345:	7c 9f                	jl     f01102e6 <test_free_block_BF+0x2b1>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110347:	83 ec 0c             	sub    $0xc,%esp
f011034a:	68 28 47 13 f0       	push   $0xf0134728
f011034f:	e8 dd 0a ff ff       	call   f0100e31 <cprintf>
f0110354:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110357:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011035e:	e9 d8 00 00 00       	jmp    f011043b <test_free_block_BF+0x406>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0110363:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110366:	89 d0                	mov    %edx,%eax
f0110368:	c1 e0 02             	shl    $0x2,%eax
f011036b:	01 d0                	add    %edx,%eax
f011036d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110374:	01 d0                	add    %edx,%eax
f0110376:	c1 e0 03             	shl    $0x3,%eax
f0110379:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110380:	83 ec 0c             	sub    $0xc,%esp
f0110383:	50                   	push   %eax
f0110384:	e8 10 f6 01 00       	call   f012f999 <free_block>
f0110389:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f011038c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011038f:	89 d0                	mov    %edx,%eax
f0110391:	c1 e0 02             	shl    $0x2,%eax
f0110394:	01 d0                	add    %edx,%eax
f0110396:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011039d:	01 d0                	add    %edx,%eax
f011039f:	c1 e0 03             	shl    $0x3,%eax
f01103a2:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01103a9:	83 ec 0c             	sub    $0xc,%esp
f01103ac:	50                   	push   %eax
f01103ad:	e8 ee f3 01 00       	call   f012f7a0 <get_block_size>
f01103b2:	83 c4 10             	add    $0x10,%esp
f01103b5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (block_size != allocSizes[i])
f01103b8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01103bb:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f01103c2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01103c5:	74 28                	je     f01103ef <test_free_block_BF+0x3ba>
			panic("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f01103c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01103ca:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f01103d1:	83 ec 08             	sub    $0x8,%esp
f01103d4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01103d7:	50                   	push   %eax
f01103d8:	ff 75 d8             	pushl  -0x28(%ebp)
f01103db:	68 70 54 13 f0       	push   $0xf0135470
f01103e0:	68 c9 03 00 00       	push   $0x3c9
f01103e5:	68 04 3b 13 f0       	push   $0xf0133b04
f01103ea:	e8 c1 fd fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f01103ef:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01103f2:	89 d0                	mov    %edx,%eax
f01103f4:	c1 e0 02             	shl    $0x2,%eax
f01103f7:	01 d0                	add    %edx,%eax
f01103f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110400:	01 d0                	add    %edx,%eax
f0110402:	c1 e0 03             	shl    $0x3,%eax
f0110405:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011040c:	83 ec 0c             	sub    $0xc,%esp
f011040f:	50                   	push   %eax
f0110410:	e8 a1 f3 01 00       	call   f012f7b6 <is_free_block>
f0110415:	83 c4 10             	add    $0x10,%esp
f0110418:	88 45 c3             	mov    %al,-0x3d(%ebp)
		if (block_status != 1)
f011041b:	80 7d c3 01          	cmpb   $0x1,-0x3d(%ebp)
f011041f:	74 17                	je     f0110438 <test_free_block_BF+0x403>
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f0110421:	ff 75 d8             	pushl  -0x28(%ebp)
f0110424:	68 d0 54 13 f0       	push   $0xf01354d0
f0110429:	68 cc 03 00 00       	push   $0x3cc
f011042e:	68 04 3b 13 f0       	push   $0xf0133b04
f0110433:	e8 78 fd fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110438:	ff 45 d8             	incl   -0x28(%ebp)
f011043b:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f011043f:	0f 8e 1e ff ff ff    	jle    f0110363 <test_free_block_BF+0x32e>
		if (block_status != 1)
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0110445:	a1 20 aa 2d f0       	mov    0xf02daa20,%eax
f011044a:	83 ec 0c             	sub    $0xc,%esp
f011044d:	50                   	push   %eax
f011044e:	e8 46 f5 01 00       	call   f012f999 <free_block>
f0110453:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f0110456:	a1 20 aa 2d f0       	mov    0xf02daa20,%eax
f011045b:	83 ec 0c             	sub    $0xc,%esp
f011045e:	50                   	push   %eax
f011045f:	e8 3c f3 01 00       	call   f012f7a0 <get_block_size>
f0110464:	83 c4 10             	add    $0x10,%esp
f0110467:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize)
f011046a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011046d:	39 45 bc             	cmp    %eax,-0x44(%ebp)
f0110470:	74 1d                	je     f011048f <test_free_block_BF+0x45a>
		panic("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize,block_size);
f0110472:	83 ec 0c             	sub    $0xc,%esp
f0110475:	ff 75 bc             	pushl  -0x44(%ebp)
f0110478:	ff 75 d0             	pushl  -0x30(%ebp)
f011047b:	68 28 55 13 f0       	push   $0xf0135528
f0110480:	68 d3 03 00 00       	push   $0x3d3
f0110485:	68 04 3b 13 f0       	push   $0xf0133b04
f011048a:	e8 21 fd fe ff       	call   f01001b0 <_panic>
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f011048f:	a1 20 aa 2d f0       	mov    0xf02daa20,%eax
f0110494:	83 ec 0c             	sub    $0xc,%esp
f0110497:	50                   	push   %eax
f0110498:	e8 19 f3 01 00       	call   f012f7b6 <is_free_block>
f011049d:	83 c4 10             	add    $0x10,%esp
f01104a0:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01104a3:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01104a7:	74 17                	je     f01104c0 <test_free_block_BF+0x48b>
		panic("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01104a9:	83 ec 04             	sub    $0x4,%esp
f01104ac:	68 88 55 13 f0       	push   $0xf0135588
f01104b1:	68 d6 03 00 00       	push   $0x3d6
f01104b6:	68 04 3b 13 f0       	push   $0xf0133b04
f01104bb:	e8 f0 fc fe ff       	call   f01001b0 <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f01104c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01104c3:	83 e8 10             	sub    $0x10,%eax
f01104c6:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01104c9:	83 ec 08             	sub    $0x8,%esp
f01104cc:	6a 03                	push   $0x3
f01104ce:	ff 75 cc             	pushl  -0x34(%ebp)
f01104d1:	e8 f7 f2 01 00       	call   f012f7cd <alloc_block>
f01104d6:	83 c4 10             	add    $0x10,%esp
f01104d9:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01104dc:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01104e0:	74 0b                	je     f01104ed <test_free_block_BF+0x4b8>
f01104e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01104e5:	83 c0 10             	add    $0x10,%eax
f01104e8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01104eb:	74 17                	je     f0110504 <test_free_block_BF+0x4cf>
		panic("test_free_block #6.3: WRONG ALLOC - alloc_block_BF return wrong address.");
f01104ed:	83 ec 04             	sub    $0x4,%esp
f01104f0:	68 dc 55 13 f0       	push   $0xf01355dc
f01104f5:	68 dd 03 00 00       	push   $0x3dd
f01104fa:	68 04 3b 13 f0       	push   $0xf0133b04
f01104ff:	e8 ac fc fe ff       	call   f01001b0 <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110504:	a1 1c aa 2d f0       	mov    0xf02daa1c,%eax
f0110509:	83 ec 0c             	sub    $0xc,%esp
f011050c:	50                   	push   %eax
f011050d:	e8 87 f4 01 00       	call   f012f999 <free_block>
f0110512:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f0110515:	a1 1c aa 2d f0       	mov    0xf02daa1c,%eax
f011051a:	83 ec 0c             	sub    $0xc,%esp
f011051d:	50                   	push   %eax
f011051e:	e8 7d f2 01 00       	call   f012f7a0 <get_block_size>
f0110523:	83 c4 10             	add    $0x10,%esp
f0110526:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f0110529:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f011052e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110531:	74 20                	je     f0110553 <test_free_block_BF+0x51e>
		panic("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[numOfAllocs-1],block_size);
f0110533:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f0110538:	83 ec 0c             	sub    $0xc,%esp
f011053b:	ff 75 bc             	pushl  -0x44(%ebp)
f011053e:	50                   	push   %eax
f011053f:	68 28 56 13 f0       	push   $0xf0135628
f0110544:	68 e3 03 00 00       	push   $0x3e3
f0110549:	68 04 3b 13 f0       	push   $0xf0133b04
f011054e:	e8 5d fc fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f0110553:	a1 1c aa 2d f0       	mov    0xf02daa1c,%eax
f0110558:	83 ec 0c             	sub    $0xc,%esp
f011055b:	50                   	push   %eax
f011055c:	e8 55 f2 01 00       	call   f012f7b6 <is_free_block>
f0110561:	83 c4 10             	add    $0x10,%esp
f0110564:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110567:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f011056b:	74 17                	je     f0110584 <test_free_block_BF+0x54f>
		panic("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011056d:	83 ec 04             	sub    $0x4,%esp
f0110570:	68 88 56 13 f0       	push   $0xf0135688
f0110575:	68 e6 03 00 00       	push   $0x3e6
f011057a:	68 04 3b 13 f0       	push   $0xf0133b04
f011057f:	e8 2c fc fe ff       	call   f01001b0 <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f0110584:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f0110589:	83 e8 10             	sub    $0x10,%eax
f011058c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011058f:	83 ec 08             	sub    $0x8,%esp
f0110592:	6a 03                	push   $0x3
f0110594:	ff 75 cc             	pushl  -0x34(%ebp)
f0110597:	e8 31 f2 01 00       	call   f012f7cd <alloc_block>
f011059c:	83 c4 10             	add    $0x10,%esp
f011059f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f01105a2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01105a6:	74 09                	je     f01105b1 <test_free_block_BF+0x57c>
f01105a8:	81 7d c8 10 00 00 f6 	cmpl   $0xf6000010,-0x38(%ebp)
f01105af:	74 17                	je     f01105c8 <test_free_block_BF+0x593>
		panic("test_free_block #7.1: WRONG ALLOC - alloc_block_BF return wrong address.");
f01105b1:	83 ec 04             	sub    $0x4,%esp
f01105b4:	68 dc 56 13 f0       	push   $0xf01356dc
f01105b9:	68 ed 03 00 00       	push   $0x3ed
f01105be:	68 04 3b 13 f0       	push   $0xf0133b04
f01105c3:	e8 e8 fb fe ff       	call   f01001b0 <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f01105c8:	a1 44 94 2d f0       	mov    0xf02d9444,%eax
f01105cd:	83 ec 0c             	sub    $0xc,%esp
f01105d0:	50                   	push   %eax
f01105d1:	e8 c3 f3 01 00       	call   f012f999 <free_block>
f01105d6:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f01105d9:	a1 44 94 2d f0       	mov    0xf02d9444,%eax
f01105de:	83 ec 0c             	sub    $0xc,%esp
f01105e1:	50                   	push   %eax
f01105e2:	e8 b9 f1 01 00       	call   f012f7a0 <get_block_size>
f01105e7:	83 c4 10             	add    $0x10,%esp
f01105ea:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0])
f01105ed:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f01105f2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01105f5:	74 20                	je     f0110617 <test_free_block_BF+0x5e2>
		panic("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0],block_size);
f01105f7:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f01105fc:	83 ec 0c             	sub    $0xc,%esp
f01105ff:	ff 75 bc             	pushl  -0x44(%ebp)
f0110602:	50                   	push   %eax
f0110603:	68 28 57 13 f0       	push   $0xf0135728
f0110608:	68 f3 03 00 00       	push   $0x3f3
f011060d:	68 04 3b 13 f0       	push   $0xf0133b04
f0110612:	e8 99 fb fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[1]) ;
f0110617:	a1 44 94 2d f0       	mov    0xf02d9444,%eax
f011061c:	83 ec 0c             	sub    $0xc,%esp
f011061f:	50                   	push   %eax
f0110620:	e8 91 f1 01 00       	call   f012f7b6 <is_free_block>
f0110625:	83 c4 10             	add    $0x10,%esp
f0110628:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f011062b:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f011062f:	74 17                	je     f0110648 <test_free_block_BF+0x613>
		panic("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110631:	83 ec 04             	sub    $0x4,%esp
f0110634:	68 88 57 13 f0       	push   $0xf0135788
f0110639:	68 f6 03 00 00       	push   $0x3f6
f011063e:	68 04 3b 13 f0       	push   $0xf0133b04
f0110643:	e8 68 fb fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0110648:	83 ec 0c             	sub    $0xc,%esp
f011064b:	68 d4 4a 13 f0       	push   $0xf0134ad4
f0110650:	e8 dc 07 ff ff       	call   f0100e31 <cprintf>
f0110655:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0110658:	83 ec 0c             	sub    $0xc,%esp
f011065b:	68 10 4b 13 f0       	push   $0xf0134b10
f0110660:	e8 cc 07 ff ff       	call   f0100e31 <cprintf>
f0110665:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0110668:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011066f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110672:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110679:	83 ec 0c             	sub    $0xc,%esp
f011067c:	50                   	push   %eax
f011067d:	e8 17 f3 01 00       	call   f012f999 <free_block>
f0110682:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110685:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110688:	48                   	dec    %eax
f0110689:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110690:	83 ec 0c             	sub    $0xc,%esp
f0110693:	50                   	push   %eax
f0110694:	e8 07 f1 01 00       	call   f012f7a0 <get_block_size>
f0110699:	83 c4 10             	add    $0x10,%esp
f011069c:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f011069f:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f01106a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106a8:	01 d0                	add    %edx,%eax
f01106aa:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01106ad:	74 26                	je     f01106d5 <test_free_block_BF+0x6a0>
		panic("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize + allocSizes[numOfAllocs-1],block_size);
f01106af:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f01106b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106b8:	01 d0                	add    %edx,%eax
f01106ba:	83 ec 0c             	sub    $0xc,%esp
f01106bd:	ff 75 bc             	pushl  -0x44(%ebp)
f01106c0:	50                   	push   %eax
f01106c1:	68 dc 57 13 f0       	push   $0xf01357dc
f01106c6:	68 01 04 00 00       	push   $0x401
f01106cb:	68 04 3b 13 f0       	push   $0xf0133b04
f01106d0:	e8 db fa fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01106d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01106d8:	48                   	dec    %eax
f01106d9:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01106e0:	83 ec 0c             	sub    $0xc,%esp
f01106e3:	50                   	push   %eax
f01106e4:	e8 cd f0 01 00       	call   f012f7b6 <is_free_block>
f01106e9:	83 c4 10             	add    $0x10,%esp
f01106ec:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01106ef:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01106f3:	74 17                	je     f011070c <test_free_block_BF+0x6d7>
		panic("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01106f5:	83 ec 04             	sub    $0x4,%esp
f01106f8:	68 3c 58 13 f0       	push   $0xf013583c
f01106fd:	68 04 04 00 00       	push   $0x404
f0110702:	68 04 3b 13 f0       	push   $0xf0133b04
f0110707:	e8 a4 fa fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f011070c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011070f:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110716:	83 ec 0c             	sub    $0xc,%esp
f0110719:	50                   	push   %eax
f011071a:	e8 81 f0 01 00       	call   f012f7a0 <get_block_size>
f011071f:	83 c4 10             	add    $0x10,%esp
f0110722:	85 c0                	test   %eax,%eax
f0110724:	75 1a                	jne    f0110740 <test_free_block_BF+0x70b>
f0110726:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110729:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110730:	83 ec 0c             	sub    $0xc,%esp
f0110733:	50                   	push   %eax
f0110734:	e8 7d f0 01 00       	call   f012f7b6 <is_free_block>
f0110739:	83 c4 10             	add    $0x10,%esp
f011073c:	84 c0                	test   %al,%al
f011073e:	74 17                	je     f0110757 <test_free_block_BF+0x722>
		panic("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110740:	83 ec 04             	sub    $0x4,%esp
f0110743:	68 90 58 13 f0       	push   $0xf0135890
f0110748:	68 07 04 00 00       	push   $0x407
f011074d:	68 04 3b 13 f0       	push   $0xf0133b04
f0110752:	e8 59 fa fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0110757:	83 ec 0c             	sub    $0xc,%esp
f011075a:	68 4a 4c 13 f0       	push   $0xf0134c4a
f011075f:	e8 cd 06 ff ff       	call   f0100e31 <cprintf>
f0110764:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0110767:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011076e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110771:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110778:	83 ec 0c             	sub    $0xc,%esp
f011077b:	50                   	push   %eax
f011077c:	e8 18 f2 01 00       	call   f012f999 <free_block>
f0110781:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110784:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110787:	48                   	dec    %eax
f0110788:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011078f:	83 ec 0c             	sub    $0xc,%esp
f0110792:	50                   	push   %eax
f0110793:	e8 08 f0 01 00       	call   f012f7a0 <get_block_size>
f0110798:	83 c4 10             	add    $0x10,%esp
f011079b:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f011079e:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f01107a4:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f01107a9:	01 d0                	add    %edx,%eax
f01107ab:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01107ae:	74 28                	je     f01107d8 <test_free_block_BF+0x7a3>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[2] + allocSizes[2],block_size);
f01107b0:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f01107b6:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f01107bb:	01 d0                	add    %edx,%eax
f01107bd:	83 ec 0c             	sub    $0xc,%esp
f01107c0:	ff 75 bc             	pushl  -0x44(%ebp)
f01107c3:	50                   	push   %eax
f01107c4:	68 fc 58 13 f0       	push   $0xf01358fc
f01107c9:	68 10 04 00 00       	push   $0x410
f01107ce:	68 04 3b 13 f0       	push   $0xf0133b04
f01107d3:	e8 d8 f9 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01107d8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107db:	48                   	dec    %eax
f01107dc:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01107e3:	83 ec 0c             	sub    $0xc,%esp
f01107e6:	50                   	push   %eax
f01107e7:	e8 ca ef 01 00       	call   f012f7b6 <is_free_block>
f01107ec:	83 c4 10             	add    $0x10,%esp
f01107ef:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01107f2:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01107f6:	74 17                	je     f011080f <test_free_block_BF+0x7da>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01107f8:	83 ec 04             	sub    $0x4,%esp
f01107fb:	68 5c 59 13 f0       	push   $0xf013595c
f0110800:	68 13 04 00 00       	push   $0x413
f0110805:	68 04 3b 13 f0       	push   $0xf0133b04
f011080a:	e8 a1 f9 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f011080f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110812:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110819:	83 ec 0c             	sub    $0xc,%esp
f011081c:	50                   	push   %eax
f011081d:	e8 7e ef 01 00       	call   f012f7a0 <get_block_size>
f0110822:	83 c4 10             	add    $0x10,%esp
f0110825:	85 c0                	test   %eax,%eax
f0110827:	75 1a                	jne    f0110843 <test_free_block_BF+0x80e>
f0110829:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011082c:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110833:	83 ec 0c             	sub    $0xc,%esp
f0110836:	50                   	push   %eax
f0110837:	e8 7a ef 01 00       	call   f012f7b6 <is_free_block>
f011083c:	83 c4 10             	add    $0x10,%esp
f011083f:	84 c0                	test   %al,%al
f0110841:	74 17                	je     f011085a <test_free_block_BF+0x825>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110843:	83 ec 04             	sub    $0x4,%esp
f0110846:	68 b0 59 13 f0       	push   $0xf01359b0
f011084b:	68 16 04 00 00       	push   $0x416
f0110850:	68 04 3b 13 f0       	push   $0xf0133b04
f0110855:	e8 56 f9 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f011085a:	83 ec 0c             	sub    $0xc,%esp
f011085d:	68 88 4d 13 f0       	push   $0xf0134d88
f0110862:	e8 ca 05 ff ff       	call   f0100e31 <cprintf>
f0110867:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f011086a:	83 ec 0c             	sub    $0xc,%esp
f011086d:	68 c0 4d 13 f0       	push   $0xf0134dc0
f0110872:	e8 ba 05 ff ff       	call   f0100e31 <cprintf>
f0110877:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f011087a:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110881:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110884:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011088b:	83 ec 0c             	sub    $0xc,%esp
f011088e:	50                   	push   %eax
f011088f:	e8 05 f1 01 00       	call   f012f999 <free_block>
f0110894:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110897:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011089a:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01108a1:	83 ec 0c             	sub    $0xc,%esp
f01108a4:	50                   	push   %eax
f01108a5:	e8 f6 ee 01 00       	call   f012f7a0 <get_block_size>
f01108aa:	83 c4 10             	add    $0x10,%esp
f01108ad:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f01108b0:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f01108b6:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f01108bb:	01 d0                	add    %edx,%eax
f01108bd:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01108c0:	74 28                	je     f01108ea <test_free_block_BF+0x8b5>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[0],block_size);
f01108c2:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f01108c8:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f01108cd:	01 d0                	add    %edx,%eax
f01108cf:	83 ec 0c             	sub    $0xc,%esp
f01108d2:	ff 75 bc             	pushl  -0x44(%ebp)
f01108d5:	50                   	push   %eax
f01108d6:	68 fc 58 13 f0       	push   $0xf01358fc
f01108db:	68 20 04 00 00       	push   $0x420
f01108e0:	68 04 3b 13 f0       	push   $0xf0133b04
f01108e5:	e8 c6 f8 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f01108ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108ed:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01108f4:	83 ec 0c             	sub    $0xc,%esp
f01108f7:	50                   	push   %eax
f01108f8:	e8 b9 ee 01 00       	call   f012f7b6 <is_free_block>
f01108fd:	83 c4 10             	add    $0x10,%esp
f0110900:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110903:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110907:	74 17                	je     f0110920 <test_free_block_BF+0x8eb>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110909:	83 ec 04             	sub    $0x4,%esp
f011090c:	68 5c 59 13 f0       	push   $0xf013595c
f0110911:	68 23 04 00 00       	push   $0x423
f0110916:	68 04 3b 13 f0       	push   $0xf0133b04
f011091b:	e8 90 f8 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110920:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110923:	40                   	inc    %eax
f0110924:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011092b:	83 ec 0c             	sub    $0xc,%esp
f011092e:	50                   	push   %eax
f011092f:	e8 6c ee 01 00       	call   f012f7a0 <get_block_size>
f0110934:	83 c4 10             	add    $0x10,%esp
f0110937:	85 c0                	test   %eax,%eax
f0110939:	75 1b                	jne    f0110956 <test_free_block_BF+0x921>
f011093b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011093e:	40                   	inc    %eax
f011093f:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110946:	83 ec 0c             	sub    $0xc,%esp
f0110949:	50                   	push   %eax
f011094a:	e8 67 ee 01 00       	call   f012f7b6 <is_free_block>
f011094f:	83 c4 10             	add    $0x10,%esp
f0110952:	84 c0                	test   %al,%al
f0110954:	74 17                	je     f011096d <test_free_block_BF+0x938>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110956:	83 ec 04             	sub    $0x4,%esp
f0110959:	68 b0 59 13 f0       	push   $0xf01359b0
f011095e:	68 26 04 00 00       	push   $0x426
f0110963:	68 04 3b 13 f0       	push   $0xf0133b04
f0110968:	e8 43 f8 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f011096d:	83 ec 0c             	sub    $0xc,%esp
f0110970:	68 d5 4d 13 f0       	push   $0xf0134dd5
f0110975:	e8 b7 04 ff ff       	call   f0100e31 <cprintf>
f011097a:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f011097d:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110984:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110987:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011098e:	83 ec 0c             	sub    $0xc,%esp
f0110991:	50                   	push   %eax
f0110992:	e8 02 f0 01 00       	call   f012f999 <free_block>
f0110997:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f011099a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011099d:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01109a4:	83 ec 0c             	sub    $0xc,%esp
f01109a7:	50                   	push   %eax
f01109a8:	e8 f3 ed 01 00       	call   f012f7a0 <get_block_size>
f01109ad:	83 c4 10             	add    $0x10,%esp
f01109b0:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f01109b3:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f01109b9:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f01109be:	01 d0                	add    %edx,%eax
f01109c0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01109c3:	74 28                	je     f01109ed <test_free_block_BF+0x9b8>
		panic("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[1],block_size);
f01109c5:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f01109cb:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f01109d0:	01 d0                	add    %edx,%eax
f01109d2:	83 ec 0c             	sub    $0xc,%esp
f01109d5:	ff 75 bc             	pushl  -0x44(%ebp)
f01109d8:	50                   	push   %eax
f01109d9:	68 1c 5a 13 f0       	push   $0xf0135a1c
f01109de:	68 2f 04 00 00       	push   $0x42f
f01109e3:	68 04 3b 13 f0       	push   $0xf0133b04
f01109e8:	e8 c3 f7 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f01109ed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109f0:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01109f7:	83 ec 0c             	sub    $0xc,%esp
f01109fa:	50                   	push   %eax
f01109fb:	e8 b6 ed 01 00       	call   f012f7b6 <is_free_block>
f0110a00:	83 c4 10             	add    $0x10,%esp
f0110a03:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110a06:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110a0a:	74 17                	je     f0110a23 <test_free_block_BF+0x9ee>
		panic("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110a0c:	83 ec 04             	sub    $0x4,%esp
f0110a0f:	68 7c 5a 13 f0       	push   $0xf0135a7c
f0110a14:	68 32 04 00 00       	push   $0x432
f0110a19:	68 04 3b 13 f0       	push   $0xf0133b04
f0110a1e:	e8 8d f7 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110a23:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a26:	40                   	inc    %eax
f0110a27:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110a2e:	83 ec 0c             	sub    $0xc,%esp
f0110a31:	50                   	push   %eax
f0110a32:	e8 69 ed 01 00       	call   f012f7a0 <get_block_size>
f0110a37:	83 c4 10             	add    $0x10,%esp
f0110a3a:	85 c0                	test   %eax,%eax
f0110a3c:	75 1b                	jne    f0110a59 <test_free_block_BF+0xa24>
f0110a3e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a41:	40                   	inc    %eax
f0110a42:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110a49:	83 ec 0c             	sub    $0xc,%esp
f0110a4c:	50                   	push   %eax
f0110a4d:	e8 64 ed 01 00       	call   f012f7b6 <is_free_block>
f0110a52:	83 c4 10             	add    $0x10,%esp
f0110a55:	84 c0                	test   %al,%al
f0110a57:	74 17                	je     f0110a70 <test_free_block_BF+0xa3b>
		panic("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110a59:	83 ec 04             	sub    $0x4,%esp
f0110a5c:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0110a61:	68 35 04 00 00       	push   $0x435
f0110a66:	68 04 3b 13 f0       	push   $0xf0133b04
f0110a6b:	e8 40 f7 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0110a70:	83 ec 0c             	sub    $0xc,%esp
f0110a73:	68 18 4f 13 f0       	push   $0xf0134f18
f0110a78:	e8 b4 03 ff ff       	call   f0100e31 <cprintf>
f0110a7d:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0110a80:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110a87:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a8a:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110a91:	83 ec 0c             	sub    $0xc,%esp
f0110a94:	50                   	push   %eax
f0110a95:	e8 ff ee 01 00       	call   f012f999 <free_block>
f0110a9a:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0110a9d:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110aa4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110aa7:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110aae:	83 ec 0c             	sub    $0xc,%esp
f0110ab1:	50                   	push   %eax
f0110ab2:	e8 e2 ee 01 00       	call   f012f999 <free_block>
f0110ab7:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110aba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110abd:	48                   	dec    %eax
f0110abe:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110ac5:	83 ec 0c             	sub    $0xc,%esp
f0110ac8:	50                   	push   %eax
f0110ac9:	e8 d2 ec 01 00       	call   f012f7a0 <get_block_size>
f0110ace:	83 c4 10             	add    $0x10,%esp
f0110ad1:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f0110ad4:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f0110ada:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f0110adf:	01 c2                	add    %eax,%edx
f0110ae1:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f0110ae6:	01 d0                	add    %edx,%eax
f0110ae8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110aeb:	74 2f                	je     f0110b1c <test_free_block_BF+0xae7>
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f0110aed:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f0110af3:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f0110af8:	01 c2                	add    %eax,%edx
f0110afa:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f0110aff:	01 d0                	add    %edx,%eax
f0110b01:	83 ec 0c             	sub    $0xc,%esp
f0110b04:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b07:	50                   	push   %eax
f0110b08:	68 40 5b 13 f0       	push   $0xf0135b40
f0110b0d:	68 41 04 00 00       	push   $0x441
f0110b12:	68 04 3b 13 f0       	push   $0xf0133b04
f0110b17:	e8 94 f6 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110b1c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b1f:	48                   	dec    %eax
f0110b20:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110b27:	83 ec 0c             	sub    $0xc,%esp
f0110b2a:	50                   	push   %eax
f0110b2b:	e8 86 ec 01 00       	call   f012f7b6 <is_free_block>
f0110b30:	83 c4 10             	add    $0x10,%esp
f0110b33:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110b36:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110b3a:	74 17                	je     f0110b53 <test_free_block_BF+0xb1e>
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110b3c:	83 ec 04             	sub    $0x4,%esp
f0110b3f:	68 a0 5b 13 f0       	push   $0xf0135ba0
f0110b44:	68 44 04 00 00       	push   $0x444
f0110b49:	68 04 3b 13 f0       	push   $0xf0133b04
f0110b4e:	e8 5d f6 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110b53:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b56:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110b5d:	83 ec 0c             	sub    $0xc,%esp
f0110b60:	50                   	push   %eax
f0110b61:	e8 3a ec 01 00       	call   f012f7a0 <get_block_size>
f0110b66:	83 c4 10             	add    $0x10,%esp
f0110b69:	85 c0                	test   %eax,%eax
f0110b6b:	75 50                	jne    f0110bbd <test_free_block_BF+0xb88>
f0110b6d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b70:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110b77:	83 ec 0c             	sub    $0xc,%esp
f0110b7a:	50                   	push   %eax
f0110b7b:	e8 36 ec 01 00       	call   f012f7b6 <is_free_block>
f0110b80:	83 c4 10             	add    $0x10,%esp
f0110b83:	84 c0                	test   %al,%al
f0110b85:	75 36                	jne    f0110bbd <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110b87:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b8a:	40                   	inc    %eax
f0110b8b:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110b92:	83 ec 0c             	sub    $0xc,%esp
f0110b95:	50                   	push   %eax
f0110b96:	e8 05 ec 01 00       	call   f012f7a0 <get_block_size>
f0110b9b:	83 c4 10             	add    $0x10,%esp
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
	block_status = is_free_block(startVAs[blockIndex-1]) ;
	if (block_status != 1)
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110b9e:	85 c0                	test   %eax,%eax
f0110ba0:	75 1b                	jne    f0110bbd <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110ba2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ba5:	40                   	inc    %eax
f0110ba6:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110bad:	83 ec 0c             	sub    $0xc,%esp
f0110bb0:	50                   	push   %eax
f0110bb1:	e8 00 ec 01 00       	call   f012f7b6 <is_free_block>
f0110bb6:	83 c4 10             	add    $0x10,%esp
f0110bb9:	84 c0                	test   %al,%al
f0110bbb:	74 17                	je     f0110bd4 <test_free_block_BF+0xb9f>
		panic("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110bbd:	83 ec 04             	sub    $0x4,%esp
f0110bc0:	68 f8 5b 13 f0       	push   $0xf0135bf8
f0110bc5:	68 48 04 00 00       	push   $0x448
f0110bca:	68 04 3b 13 f0       	push   $0xf0133b04
f0110bcf:	e8 dc f5 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f0110bd4:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)

	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData() ;
f0110bdb:	c7 45 cc f0 1b 00 00 	movl   $0x1bf0,-0x34(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0110be2:	83 ec 08             	sub    $0x8,%esp
f0110be5:	6a 03                	push   $0x3
f0110be7:	ff 75 cc             	pushl  -0x34(%ebp)
f0110bea:	e8 de eb 01 00       	call   f012f7cd <alloc_block>
f0110bef:	83 c4 10             	add    $0x10,%esp
f0110bf2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0110bf5:	a1 00 a7 2d f0       	mov    0xf02da700,%eax
f0110bfa:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if(va == NULL || (va != expected))
f0110bfd:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110c01:	74 08                	je     f0110c0b <test_free_block_BF+0xbd6>
f0110c03:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110c06:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110c09:	74 1d                	je     f0110c28 <test_free_block_BF+0xbf3>
			panic("test_free_block #12.0: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110c0b:	83 ec 0c             	sub    $0xc,%esp
f0110c0e:	ff 75 c8             	pushl  -0x38(%ebp)
f0110c11:	ff 75 b0             	pushl  -0x50(%ebp)
f0110c14:	68 64 5c 13 f0       	push   $0xf0135c64
f0110c19:	68 55 04 00 00       	push   $0x455
f0110c1e:	68 04 3b 13 f0       	push   $0xf0133b04
f0110c23:	e8 88 f5 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0110c28:	83 ec 0c             	sub    $0xc,%esp
f0110c2b:	68 80 50 13 f0       	push   $0xf0135080
f0110c30:	e8 fc 01 ff ff       	call   f0100e31 <cprintf>
f0110c35:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0110c38:	83 ec 0c             	sub    $0xc,%esp
f0110c3b:	68 c8 5c 13 f0       	push   $0xf0135cc8
f0110c40:	e8 ec 01 ff ff       	call   f0100e31 <cprintf>
f0110c45:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData();
f0110c48:	c7 45 cc f0 07 00 00 	movl   $0x7f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110c4f:	83 ec 08             	sub    $0x8,%esp
f0110c52:	6a 03                	push   $0x3
f0110c54:	ff 75 cc             	pushl  -0x34(%ebp)
f0110c57:	e8 71 eb 01 00       	call   f012f7cd <alloc_block>
f0110c5c:	83 c4 10             	add    $0x10,%esp
f0110c5f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0110c62:	a1 80 9a 2d f0       	mov    0xf02d9a80,%eax
f0110c67:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110c6a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110c6e:	74 08                	je     f0110c78 <test_free_block_BF+0xc43>
f0110c70:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110c73:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110c76:	74 1d                	je     f0110c95 <test_free_block_BF+0xc60>
		panic("test_free_block #12.1: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110c78:	83 ec 0c             	sub    $0xc,%esp
f0110c7b:	ff 75 c8             	pushl  -0x38(%ebp)
f0110c7e:	ff 75 b0             	pushl  -0x50(%ebp)
f0110c81:	68 f0 5c 13 f0       	push   $0xf0135cf0
f0110c86:	68 60 04 00 00       	push   $0x460
f0110c8b:	68 04 3b 13 f0       	push   $0xf0133b04
f0110c90:	e8 1b f5 fe ff       	call   f01001b0 <_panic>

	actualSize = 8*kilo;
f0110c95:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110c9c:	83 ec 08             	sub    $0x8,%esp
f0110c9f:	6a 03                	push   $0x3
f0110ca1:	ff 75 cc             	pushl  -0x34(%ebp)
f0110ca4:	e8 24 eb 01 00       	call   f012f7cd <alloc_block>
f0110ca9:	83 c4 10             	add    $0x10,%esp
f0110cac:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110caf:	a1 1c aa 2d f0       	mov    0xf02daa1c,%eax
f0110cb4:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110cb7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110cbb:	74 08                	je     f0110cc5 <test_free_block_BF+0xc90>
f0110cbd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110cc0:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110cc3:	74 1d                	je     f0110ce2 <test_free_block_BF+0xcad>
		panic("test_free_block #12.2: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110cc5:	83 ec 0c             	sub    $0xc,%esp
f0110cc8:	ff 75 c8             	pushl  -0x38(%ebp)
f0110ccb:	ff 75 b0             	pushl  -0x50(%ebp)
f0110cce:	68 54 5d 13 f0       	push   $0xf0135d54
f0110cd3:	68 67 04 00 00       	push   $0x467
f0110cd8:	68 04 3b 13 f0       	push   $0xf0133b04
f0110cdd:	e8 ce f4 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0110ce2:	83 ec 0c             	sub    $0xc,%esp
f0110ce5:	68 18 52 13 f0       	push   $0xf0135218
f0110cea:	e8 42 01 ff ff       	call   f0100e31 <cprintf>
f0110cef:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f0110cf2:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110cf9:	83 ec 08             	sub    $0x8,%esp
f0110cfc:	6a 03                	push   $0x3
f0110cfe:	ff 75 cc             	pushl  -0x34(%ebp)
f0110d01:	e8 c7 ea 01 00       	call   f012f7cd <alloc_block>
f0110d06:	83 c4 10             	add    $0x10,%esp
f0110d09:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f0110d0c:	a1 b8 a0 2d f0       	mov    0xf02da0b8,%eax
f0110d11:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110d14:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110d18:	74 08                	je     f0110d22 <test_free_block_BF+0xced>
f0110d1a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d1d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110d20:	74 1d                	je     f0110d3f <test_free_block_BF+0xd0a>
		panic("test_free_block #12.3: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110d22:	83 ec 0c             	sub    $0xc,%esp
f0110d25:	ff 75 c8             	pushl  -0x38(%ebp)
f0110d28:	ff 75 b0             	pushl  -0x50(%ebp)
f0110d2b:	68 b8 5d 13 f0       	push   $0xf0135db8
f0110d30:	68 6f 04 00 00       	push   $0x46f
f0110d35:	68 04 3b 13 f0       	push   $0xf0133b04
f0110d3a:	e8 71 f4 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.3: in block coalesces with NEXT\n\n") ;
f0110d3f:	83 ec 0c             	sub    $0xc,%esp
f0110d42:	68 1c 5e 13 f0       	push   $0xf0135e1c
f0110d47:	e8 e5 00 ff ff       	call   f0100e31 <cprintf>
f0110d4c:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f0110d4f:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110d56:	83 ec 08             	sub    $0x8,%esp
f0110d59:	6a 03                	push   $0x3
f0110d5b:	ff 75 cc             	pushl  -0x34(%ebp)
f0110d5e:	e8 6a ea 01 00       	call   f012f7cd <alloc_block>
f0110d63:	83 c4 10             	add    $0x10,%esp
f0110d66:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0110d69:	a1 5c 97 2d f0       	mov    0xf02d975c,%eax
f0110d6e:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110d71:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110d75:	74 08                	je     f0110d7f <test_free_block_BF+0xd4a>
f0110d77:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d7a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110d7d:	74 1d                	je     f0110d9c <test_free_block_BF+0xd67>
		panic("test_free_block #12.4: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110d7f:	83 ec 0c             	sub    $0xc,%esp
f0110d82:	ff 75 c8             	pushl  -0x38(%ebp)
f0110d85:	ff 75 b0             	pushl  -0x50(%ebp)
f0110d88:	68 44 5e 13 f0       	push   $0xf0135e44
f0110d8d:	68 77 04 00 00       	push   $0x477
f0110d92:	68 04 3b 13 f0       	push   $0xf0133b04
f0110d97:	e8 14 f4 fe ff       	call   f01001b0 <_panic>

	actualSize = 5*kilo - sizeOfMetaData();
f0110d9c:	c7 45 cc f0 13 00 00 	movl   $0x13f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110da3:	83 ec 08             	sub    $0x8,%esp
f0110da6:	6a 03                	push   $0x3
f0110da8:	ff 75 cc             	pushl  -0x34(%ebp)
f0110dab:	e8 1d ea 01 00       	call   f012f7cd <alloc_block>
f0110db0:	83 c4 10             	add    $0x10,%esp
f0110db3:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f0110db6:	c7 45 b0 10 00 00 f6 	movl   $0xf6000010,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110dbd:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110dc1:	74 08                	je     f0110dcb <test_free_block_BF+0xd96>
f0110dc3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110dc6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110dc9:	74 1d                	je     f0110de8 <test_free_block_BF+0xdb3>
		panic("test_free_block #12.5: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110dcb:	83 ec 0c             	sub    $0xc,%esp
f0110dce:	ff 75 c8             	pushl  -0x38(%ebp)
f0110dd1:	ff 75 b0             	pushl  -0x50(%ebp)
f0110dd4:	68 a8 5e 13 f0       	push   $0xf0135ea8
f0110dd9:	68 7e 04 00 00       	push   $0x47e
f0110dde:	68 04 3b 13 f0       	push   $0xf0133b04
f0110de3:	e8 c8 f3 fe ff       	call   f01001b0 <_panic>

	actualSize = 3*kilo - sizeOfMetaData();
f0110de8:	c7 45 cc f0 0b 00 00 	movl   $0xbf0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110def:	83 ec 08             	sub    $0x8,%esp
f0110df2:	6a 03                	push   $0x3
f0110df4:	ff 75 cc             	pushl  -0x34(%ebp)
f0110df7:	e8 d1 e9 01 00       	call   f012f7cd <alloc_block>
f0110dfc:	83 c4 10             	add    $0x10,%esp
f0110dff:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f0110e02:	c7 45 b0 10 14 00 f6 	movl   $0xf6001410,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110e09:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e0d:	74 08                	je     f0110e17 <test_free_block_BF+0xde2>
f0110e0f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e12:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e15:	74 1d                	je     f0110e34 <test_free_block_BF+0xdff>
		panic("test_free_block #12.6: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e17:	83 ec 0c             	sub    $0xc,%esp
f0110e1a:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e1d:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e20:	68 0c 5f 13 f0       	push   $0xf0135f0c
f0110e25:	68 85 04 00 00       	push   $0x485
f0110e2a:	68 04 3b 13 f0       	push   $0xf0133b04
f0110e2f:	e8 7c f3 fe ff       	call   f01001b0 <_panic>


	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f0110e34:	83 ec 0c             	sub    $0xc,%esp
f0110e37:	68 70 5f 13 f0       	push   $0xf0135f70
f0110e3c:	e8 f0 ff fe ff       	call   f0100e31 <cprintf>
f0110e41:	83 c4 10             	add    $0x10,%esp

}
f0110e44:	90                   	nop
f0110e45:	c9                   	leave  
f0110e46:	c3                   	ret    

f0110e47 <test_free_block_NF>:

void test_free_block_NF()
{
f0110e47:	55                   	push   %ebp
f0110e48:	89 e5                	mov    %esp,%ebp
f0110e4a:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0110e4d:	83 ec 04             	sub    $0x4,%esp
f0110e50:	68 b9 5f 13 f0       	push   $0xf0135fb9
f0110e55:	68 8e 04 00 00       	push   $0x48e
f0110e5a:	68 04 3b 13 f0       	push   $0xf0133b04
f0110e5f:	e8 4c f3 fe ff       	call   f01001b0 <_panic>

f0110e64 <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f0110e64:	55                   	push   %ebp
f0110e65:	89 e5                	mov    %esp,%ebp
f0110e67:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f0110e6a:	83 ec 0c             	sub    $0xc,%esp
f0110e6d:	68 cc 5f 13 f0       	push   $0xf0135fcc
f0110e72:	e8 ba ff fe ff       	call   f0100e31 <cprintf>
f0110e77:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f0110e7a:	83 ec 0c             	sub    $0xc,%esp
f0110e7d:	68 04 60 13 f0       	push   $0xf0136004
f0110e82:	e8 aa ff fe ff       	call   f0100e31 <cprintf>
f0110e87:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f0110e8a:	83 ec 0c             	sub    $0xc,%esp
f0110e8d:	68 3c 60 13 f0       	push   $0xf013603c
f0110e92:	e8 9a ff fe ff       	call   f0100e31 <cprintf>
f0110e97:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0110e9a:	83 ec 0c             	sub    $0xc,%esp
f0110e9d:	68 cc 5f 13 f0       	push   $0xf0135fcc
f0110ea2:	e8 8a ff fe ff       	call   f0100e31 <cprintf>
f0110ea7:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'23.MS1 - #9] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	int eval = 0;
f0110eaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f0110eb1:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110eb8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110ebb:	83 ec 08             	sub    $0x8,%esp
f0110ebe:	50                   	push   %eax
f0110ebf:	68 00 00 00 f6       	push   $0xf6000000
f0110ec4:	e8 1d ea 01 00       	call   f012f8e6 <initialize_dynamic_allocator>
f0110ec9:	83 c4 10             	add    $0x10,%esp
	void * va ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0110ecc:	83 ec 0c             	sub    $0xc,%esp
f0110ecf:	68 74 60 13 f0       	push   $0xf0136074
f0110ed4:	e8 58 ff fe ff       	call   f0100e31 <cprintf>
f0110ed9:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110edc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f0110ee3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110eea:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0110ef1:	eb 2a                	jmp    f0110f1d <test_realloc_block_FF+0xb9>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110ef6:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f0110efd:	89 d0                	mov    %edx,%eax
f0110eff:	c1 e0 02             	shl    $0x2,%eax
f0110f02:	01 d0                	add    %edx,%eax
f0110f04:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110f0b:	01 d0                	add    %edx,%eax
f0110f0d:	c1 e0 03             	shl    $0x3,%eax
f0110f10:	89 c2                	mov    %eax,%edx
f0110f12:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f15:	01 d0                	add    %edx,%eax
f0110f17:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110f1a:	ff 45 e8             	incl   -0x18(%ebp)
f0110f1d:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f0110f21:	7e d0                	jle    f0110ef3 <test_realloc_block_FF+0x8f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110f23:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110f26:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0110f29:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f0110f2c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0110f30:	7f 17                	jg     f0110f49 <test_realloc_block_FF+0xe5>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110f32:	83 ec 04             	sub    $0x4,%esp
f0110f35:	68 a4 60 13 f0       	push   $0xf01360a4
f0110f3a:	68 b5 04 00 00       	push   $0x4b5
f0110f3f:	68 04 3b 13 f0       	push   $0xf0133b04
f0110f44:	e8 67 f2 fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f0110f49:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110f50:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110f57:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110f5e:	e9 f8 00 00 00       	jmp    f011105b <test_realloc_block_FF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110f63:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110f6a:	e9 dc 00 00 00       	jmp    f011104b <test_realloc_block_FF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110f6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110f72:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110f79:	83 e8 10             	sub    $0x10,%eax
f0110f7c:	89 45 c0             	mov    %eax,-0x40(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0110f7f:	83 ec 08             	sub    $0x8,%esp
f0110f82:	ff 75 c0             	pushl  -0x40(%ebp)
f0110f85:	6a 00                	push   $0x0
f0110f87:	e8 41 eb 01 00       	call   f012facd <realloc_block_FF>
f0110f8c:	83 c4 10             	add    $0x10,%esp
f0110f8f:	89 c2                	mov    %eax,%edx
f0110f91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110f94:	89 14 85 40 94 2d f0 	mov    %edx,-0xfd26bc0(,%eax,4)
f0110f9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110f9e:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0110fa5:	89 45 bc             	mov    %eax,-0x44(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110fa8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110fab:	d1 e8                	shr    %eax
f0110fad:	89 c2                	mov    %eax,%edx
f0110faf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110fb2:	01 c2                	add    %eax,%edx
f0110fb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110fb7:	89 14 85 40 c0 2d f0 	mov    %edx,-0xfd23fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0110fbe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110fc1:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110fc4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110fc7:	01 c2                	add    %eax,%edx
f0110fc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110fcc:	89 14 85 40 aa 2d f0 	mov    %edx,-0xfd255c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110fd3:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0110fd7:	74 0b                	je     f0110fe4 <test_realloc_block_FF+0x180>
f0110fd9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110fdc:	83 c0 10             	add    $0x10,%eax
f0110fdf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110fe2:	74 24                	je     f0111008 <test_realloc_block_FF+0x1a4>
				panic("test_realloc_block_FF #1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0110fe4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110fe7:	83 c0 10             	add    $0x10,%eax
f0110fea:	83 ec 08             	sub    $0x8,%esp
f0110fed:	ff 75 bc             	pushl  -0x44(%ebp)
f0110ff0:	50                   	push   %eax
f0110ff1:	ff 75 e4             	pushl  -0x1c(%ebp)
f0110ff4:	68 24 61 13 f0       	push   $0xf0136124
f0110ff9:	68 c4 04 00 00       	push   $0x4c4
f0110ffe:	68 04 3b 13 f0       	push   $0xf0133b04
f0111003:	e8 a8 f1 fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0111008:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011100b:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0111012:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0111015:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111018:	8b 14 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%edx
f011101f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111022:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0111025:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111028:	8b 14 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%edx
f011102f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111032:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0111035:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111038:	8b 14 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%edx
f011103f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111042:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0111045:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0111048:	ff 45 d8             	incl   -0x28(%ebp)
f011104b:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f0111052:	0f 8e 17 ff ff ff    	jle    f0110f6f <test_realloc_block_FF+0x10b>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0111058:	ff 45 dc             	incl   -0x24(%ebp)
f011105b:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f011105f:	0f 8e fe fe ff ff    	jle    f0110f63 <test_realloc_block_FF+0xff>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f0111065:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111068:	83 e8 10             	sub    $0x10,%eax
f011106b:	89 45 c0             	mov    %eax,-0x40(%ebp)
	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f011106e:	83 ec 08             	sub    $0x8,%esp
f0111071:	ff 75 c0             	pushl  -0x40(%ebp)
f0111074:	6a 00                	push   $0x0
f0111076:	e8 52 ea 01 00       	call   f012facd <realloc_block_FF>
f011107b:	83 c4 10             	add    $0x10,%esp
f011107e:	89 c2                	mov    %eax,%edx
f0111080:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111083:	89 14 85 40 94 2d f0 	mov    %edx,-0xfd26bc0(,%eax,4)
f011108a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011108d:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111094:	89 45 bc             	mov    %eax,-0x44(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0111097:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011109a:	d1 e8                	shr    %eax
f011109c:	89 c2                	mov    %eax,%edx
f011109e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01110a1:	01 c2                	add    %eax,%edx
f01110a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110a6:	89 14 85 40 c0 2d f0 	mov    %edx,-0xfd23fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01110ad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01110b0:	8d 50 fe             	lea    -0x2(%eax),%edx
f01110b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01110b6:	01 c2                	add    %eax,%edx
f01110b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110bb:	89 14 85 40 aa 2d f0 	mov    %edx,-0xfd255c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01110c2:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01110c6:	74 0b                	je     f01110d3 <test_realloc_block_FF+0x26f>
f01110c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01110cb:	83 c0 10             	add    $0x10,%eax
f01110ce:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01110d1:	74 17                	je     f01110ea <test_realloc_block_FF+0x286>
		panic("test_realloc_block_FF #2: WRONG ALLOC - it return wrong address.");
f01110d3:	83 ec 04             	sub    $0x4,%esp
f01110d6:	68 80 61 13 f0       	push   $0xf0136180
f01110db:	68 d5 04 00 00       	push   $0x4d5
f01110e0:	68 04 3b 13 f0       	push   $0xf0133b04
f01110e5:	e8 c6 f0 fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f01110ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110ed:	8b 14 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%edx
f01110f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110f7:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f01110fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110fd:	8b 14 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%edx
f0111104:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111107:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f011110a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011110d:	8b 14 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%edx
f0111114:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111117:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f011111a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0111121:	eb 59                	jmp    f011117c <test_realloc_block_FF+0x318>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0111123:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111126:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011112d:	66 8b 00             	mov    (%eax),%ax
f0111130:	98                   	cwtl   
f0111131:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111134:	75 26                	jne    f011115c <test_realloc_block_FF+0x2f8>
f0111136:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111139:	8b 04 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%eax
f0111140:	66 8b 00             	mov    (%eax),%ax
f0111143:	98                   	cwtl   
f0111144:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111147:	75 13                	jne    f011115c <test_realloc_block_FF+0x2f8>
f0111149:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011114c:	8b 04 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%eax
f0111153:	66 8b 00             	mov    (%eax),%ax
f0111156:	98                   	cwtl   
f0111157:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011115a:	74 1d                	je     f0111179 <test_realloc_block_FF+0x315>
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f011115c:	83 ec 0c             	sub    $0xc,%esp
f011115f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111162:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111165:	68 c4 61 13 f0       	push   $0xf01361c4
f011116a:	68 df 04 00 00       	push   $0x4df
f011116f:	68 04 3b 13 f0       	push   $0xf0133b04
f0111174:	e8 37 f0 fe ff       	call   f01001b0 <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111179:	ff 45 d4             	incl   -0x2c(%ebp)
f011117c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011117f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111182:	7c 9f                	jl     f0111123 <test_realloc_block_FF+0x2bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f0111184:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111188:	74 04                	je     f011118e <test_realloc_block_FF+0x32a>
	{
		eval += 10;
f011118a:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f011118e:	83 ec 0c             	sub    $0xc,%esp
f0111191:	68 1c 62 13 f0       	push   $0xf013621c
f0111196:	e8 96 fc fe ff       	call   f0100e31 <cprintf>
f011119b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011119e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01111a5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01111ac:	e9 fa 00 00 00       	jmp    f01112ab <test_realloc_block_FF+0x447>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f01111b1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01111b4:	89 d0                	mov    %edx,%eax
f01111b6:	c1 e0 02             	shl    $0x2,%eax
f01111b9:	01 d0                	add    %edx,%eax
f01111bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01111c2:	01 d0                	add    %edx,%eax
f01111c4:	c1 e0 03             	shl    $0x3,%eax
f01111c7:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01111ce:	83 ec 08             	sub    $0x8,%esp
f01111d1:	6a 00                	push   $0x0
f01111d3:	50                   	push   %eax
f01111d4:	e8 f4 e8 01 00       	call   f012facd <realloc_block_FF>
f01111d9:	83 c4 10             	add    $0x10,%esp
f01111dc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f01111df:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01111e2:	89 d0                	mov    %edx,%eax
f01111e4:	c1 e0 02             	shl    $0x2,%eax
f01111e7:	01 d0                	add    %edx,%eax
f01111e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01111f0:	01 d0                	add    %edx,%eax
f01111f2:	c1 e0 03             	shl    $0x3,%eax
f01111f5:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01111fc:	83 ec 0c             	sub    $0xc,%esp
f01111ff:	50                   	push   %eax
f0111200:	e8 9b e5 01 00       	call   f012f7a0 <get_block_size>
f0111205:	83 c4 10             	add    $0x10,%esp
f0111208:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (block_size != allocSizes[i])
f011120b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011120e:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0111215:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0111218:	74 28                	je     f0111242 <test_realloc_block_FF+0x3de>
			panic("test_realloc_block_FF #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f011121a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011121d:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0111224:	83 ec 08             	sub    $0x8,%esp
f0111227:	ff 75 b8             	pushl  -0x48(%ebp)
f011122a:	50                   	push   %eax
f011122b:	ff 75 d0             	pushl  -0x30(%ebp)
f011122e:	68 4c 62 13 f0       	push   $0xf013624c
f0111233:	68 f3 04 00 00       	push   $0x4f3
f0111238:	68 04 3b 13 f0       	push   $0xf0133b04
f011123d:	e8 6e ef fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f0111242:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0111245:	89 d0                	mov    %edx,%eax
f0111247:	c1 e0 02             	shl    $0x2,%eax
f011124a:	01 d0                	add    %edx,%eax
f011124c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111253:	01 d0                	add    %edx,%eax
f0111255:	c1 e0 03             	shl    $0x3,%eax
f0111258:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011125f:	83 ec 0c             	sub    $0xc,%esp
f0111262:	50                   	push   %eax
f0111263:	e8 4e e5 01 00       	call   f012f7b6 <is_free_block>
f0111268:	83 c4 10             	add    $0x10,%esp
f011126b:	88 45 b7             	mov    %al,-0x49(%ebp)
		if (block_status != 1)
f011126e:	80 7d b7 01          	cmpb   $0x1,-0x49(%ebp)
f0111272:	74 17                	je     f011128b <test_realloc_block_FF+0x427>
			panic("test_realloc_block_FF #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f0111274:	ff 75 d0             	pushl  -0x30(%ebp)
f0111277:	68 b4 62 13 f0       	push   $0xf01362b4
f011127c:	68 f6 04 00 00       	push   $0x4f6
f0111281:	68 04 3b 13 f0       	push   $0xf0133b04
f0111286:	e8 25 ef fe ff       	call   f01001b0 <_panic>
		if(va != NULL)
f011128b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011128f:	74 17                	je     f01112a8 <test_realloc_block_FF+0x444>
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
f0111291:	ff 75 d0             	pushl  -0x30(%ebp)
f0111294:	68 10 63 13 f0       	push   $0xf0136310
f0111299:	68 f8 04 00 00       	push   $0x4f8
f011129e:	68 04 3b 13 f0       	push   $0xf0133b04
f01112a3:	e8 08 ef fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01112a8:	ff 45 d0             	incl   -0x30(%ebp)
f01112ab:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f01112af:	0f 8e fc fe ff ff    	jle    f01111b1 <test_realloc_block_FF+0x34d>
		if(va != NULL)
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f01112b5:	83 ec 08             	sub    $0x8,%esp
f01112b8:	6a 00                	push   $0x0
f01112ba:	6a 00                	push   $0x0
f01112bc:	e8 0c e8 01 00       	call   f012facd <realloc_block_FF>
f01112c1:	83 c4 10             	add    $0x10,%esp
f01112c4:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va != NULL)
f01112c7:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01112cb:	74 17                	je     f01112e4 <test_realloc_block_FF+0x480>
		panic("test_realloc_block_FF #7: it should return NULL.");
f01112cd:	83 ec 04             	sub    $0x4,%esp
f01112d0:	68 44 63 13 f0       	push   $0xf0136344
f01112d5:	68 fe 04 00 00       	push   $0x4fe
f01112da:	68 04 3b 13 f0       	push   $0xf0133b04
f01112df:	e8 cc ee fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01112e4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01112eb:	eb 6b                	jmp    f0111358 <test_realloc_block_FF+0x4f4>
	{
		if (i % allocCntPerSize == 0)
f01112ed:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01112f0:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f01112f5:	99                   	cltd   
f01112f6:	f7 f9                	idiv   %ecx
f01112f8:	89 d0                	mov    %edx,%eax
f01112fa:	85 c0                	test   %eax,%eax
f01112fc:	74 56                	je     f0111354 <test_realloc_block_FF+0x4f0>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01112fe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111301:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111308:	66 8b 00             	mov    (%eax),%ax
f011130b:	98                   	cwtl   
f011130c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011130f:	75 26                	jne    f0111337 <test_realloc_block_FF+0x4d3>
f0111311:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111314:	8b 04 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%eax
f011131b:	66 8b 00             	mov    (%eax),%ax
f011131e:	98                   	cwtl   
f011131f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111322:	75 13                	jne    f0111337 <test_realloc_block_FF+0x4d3>
f0111324:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111327:	8b 04 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%eax
f011132e:	66 8b 00             	mov    (%eax),%ax
f0111331:	98                   	cwtl   
f0111332:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111335:	74 1e                	je     f0111355 <test_realloc_block_FF+0x4f1>
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111337:	83 ec 0c             	sub    $0xc,%esp
f011133a:	ff 75 cc             	pushl  -0x34(%ebp)
f011133d:	ff 75 cc             	pushl  -0x34(%ebp)
f0111340:	68 78 63 13 f0       	push   $0xf0136378
f0111345:	68 06 05 00 00       	push   $0x506
f011134a:	68 04 3b 13 f0       	push   $0xf0133b04
f011134f:	e8 5c ee fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{
		if (i % allocCntPerSize == 0)
			continue;
f0111354:	90                   	nop
	va = realloc_block_FF(NULL, 0);
	if(va != NULL)
		panic("test_realloc_block_FF #7: it should return NULL.");
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111355:	ff 45 cc             	incl   -0x34(%ebp)
f0111358:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011135b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011135e:	7c 8d                	jl     f01112ed <test_realloc_block_FF+0x489>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f0111360:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111364:	74 04                	je     f011136a <test_realloc_block_FF+0x506>
	{
		eval += 10;
f0111366:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f011136a:	83 ec 0c             	sub    $0xc,%esp
f011136d:	68 d0 63 13 f0       	push   $0xf01363d0
f0111372:	e8 ba fa fe ff       	call   f0100e31 <cprintf>
f0111377:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, expected_size, newBlockIndex;
	void* expected_va = NULL;
f011137a:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f0111381:	83 ec 0c             	sub    $0xc,%esp
f0111384:	68 08 64 13 f0       	push   $0xf0136408
f0111389:	e8 a3 fa fe ff       	call   f0100e31 <cprintf>
f011138e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111391:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f0111398:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f011139f:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f01113a4:	8b 15 10 cb 18 f0    	mov    0xf018cb10,%edx
f01113aa:	d1 ea                	shr    %edx
f01113ac:	01 d0                	add    %edx,%eax
f01113ae:	83 e8 10             	sub    $0x10,%eax
f01113b1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01113b4:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01113b7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01113ba:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01113c1:	83 ec 08             	sub    $0x8,%esp
f01113c4:	52                   	push   %edx
f01113c5:	50                   	push   %eax
f01113c6:	e8 02 e7 01 00       	call   f012facd <realloc_block_FF>
f01113cb:	83 c4 10             	add    $0x10,%esp
f01113ce:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f01113d1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01113d5:	74 0f                	je     f01113e6 <test_realloc_block_FF+0x582>
f01113d7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01113da:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01113e1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01113e4:	74 25                	je     f011140b <test_realloc_block_FF+0x5a7>
		{
			is_correct = 0;
f01113e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01113ed:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01113f0:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01113f7:	83 ec 04             	sub    $0x4,%esp
f01113fa:	ff 75 bc             	pushl  -0x44(%ebp)
f01113fd:	50                   	push   %eax
f01113fe:	68 40 64 13 f0       	push   $0xf0136440
f0111403:	e8 29 fa fe ff       	call   f0100e31 <cprintf>
f0111408:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f011140b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011140e:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111415:	83 ec 0c             	sub    $0xc,%esp
f0111418:	50                   	push   %eax
f0111419:	e8 82 e3 01 00       	call   f012f7a0 <get_block_size>
f011141e:	83 c4 10             	add    $0x10,%esp
f0111421:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111424:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111427:	8d 50 10             	lea    0x10(%eax),%edx
f011142a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011142d:	39 c2                	cmp    %eax,%edx
f011142f:	74 21                	je     f0111452 <test_realloc_block_FF+0x5ee>
		{
			is_correct = 0;
f0111431:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111438:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011143b:	83 c0 10             	add    $0x10,%eax
f011143e:	83 ec 04             	sub    $0x4,%esp
f0111441:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111444:	50                   	push   %eax
f0111445:	68 a0 64 13 f0       	push   $0xf01364a0
f011144a:	e8 e2 f9 fe ff       	call   f0100e31 <cprintf>
f011144f:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111452:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111455:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011145c:	83 ec 0c             	sub    $0xc,%esp
f011145f:	50                   	push   %eax
f0111460:	e8 51 e3 01 00       	call   f012f7b6 <is_free_block>
f0111465:	83 c4 10             	add    $0x10,%esp
f0111468:	0f be c0             	movsbl %al,%eax
f011146b:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f011146e:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111472:	74 17                	je     f011148b <test_realloc_block_FF+0x627>
		{
			is_correct = 0;
f0111474:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f011147b:	83 ec 0c             	sub    $0xc,%esp
f011147e:	68 0c 65 13 f0       	push   $0xf013650c
f0111483:	e8 a9 f9 fe ff       	call   f0100e31 <cprintf>
f0111488:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011148b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011148e:	40                   	inc    %eax
f011148f:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111496:	83 ec 0c             	sub    $0xc,%esp
f0111499:	50                   	push   %eax
f011149a:	e8 01 e3 01 00       	call   f012f7a0 <get_block_size>
f011149f:	83 c4 10             	add    $0x10,%esp
f01114a2:	85 c0                	test   %eax,%eax
f01114a4:	75 1b                	jne    f01114c1 <test_realloc_block_FF+0x65d>
f01114a6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114a9:	40                   	inc    %eax
f01114aa:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01114b1:	83 ec 0c             	sub    $0xc,%esp
f01114b4:	50                   	push   %eax
f01114b5:	e8 fc e2 01 00       	call   f012f7b6 <is_free_block>
f01114ba:	83 c4 10             	add    $0x10,%esp
f01114bd:	84 c0                	test   %al,%al
f01114bf:	74 17                	je     f01114d8 <test_realloc_block_FF+0x674>
		{
			is_correct = 0;
f01114c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f01114c8:	83 ec 0c             	sub    $0xc,%esp
f01114cb:	68 6c 65 13 f0       	push   $0xf013656c
f01114d0:	e8 5c f9 fe ff       	call   f0100e31 <cprintf>
f01114d5:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f01114d8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114db:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01114e2:	66 8b 00             	mov    (%eax),%ax
f01114e5:	98                   	cwtl   
f01114e6:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01114e9:	75 26                	jne    f0111511 <test_realloc_block_FF+0x6ad>
f01114eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114ee:	8b 04 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%eax
f01114f5:	66 8b 00             	mov    (%eax),%ax
f01114f8:	98                   	cwtl   
f01114f9:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01114fc:	75 13                	jne    f0111511 <test_realloc_block_FF+0x6ad>
f01114fe:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111501:	8b 04 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%eax
f0111508:	66 8b 00             	mov    (%eax),%ax
f011150b:	98                   	cwtl   
f011150c:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011150f:	74 1a                	je     f011152b <test_realloc_block_FF+0x6c7>
		{
			is_correct = 0;
f0111511:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111518:	83 ec 08             	sub    $0x8,%esp
f011151b:	ff 75 ac             	pushl  -0x54(%ebp)
f011151e:	68 e0 65 13 f0       	push   $0xf01365e0
f0111523:	e8 09 f9 fe ff       	call   f0100e31 <cprintf>
f0111528:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f011152b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011152f:	74 04                	je     f0111535 <test_realloc_block_FF+0x6d1>
	{
		eval += 25;
f0111531:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f0111535:	83 ec 0c             	sub    $0xc,%esp
f0111538:	68 40 66 13 f0       	push   $0xf0136640
f011153d:	e8 ef f8 fe ff       	call   f0100e31 <cprintf>
f0111542:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111545:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f011154c:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f0111553:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f0111558:	8b 15 10 cb 18 f0    	mov    0xf018cb10,%edx
f011155e:	d1 ea                	shr    %edx
f0111560:	01 d0                	add    %edx,%eax
f0111562:	83 e8 10             	sub    $0x10,%eax
f0111565:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111568:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011156b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011156e:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111575:	83 ec 08             	sub    $0x8,%esp
f0111578:	52                   	push   %edx
f0111579:	50                   	push   %eax
f011157a:	e8 4e e5 01 00       	call   f012facd <realloc_block_FF>
f011157f:	83 c4 10             	add    $0x10,%esp
f0111582:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111585:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111589:	74 0f                	je     f011159a <test_realloc_block_FF+0x736>
f011158b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011158e:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111595:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111598:	74 25                	je     f01115bf <test_realloc_block_FF+0x75b>
		{
			is_correct = 0;
f011159a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01115a1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01115a4:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01115ab:	83 ec 04             	sub    $0x4,%esp
f01115ae:	ff 75 bc             	pushl  -0x44(%ebp)
f01115b1:	50                   	push   %eax
f01115b2:	68 7c 66 13 f0       	push   $0xf013667c
f01115b7:	e8 75 f8 fe ff       	call   f0100e31 <cprintf>
f01115bc:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f01115bf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01115c2:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01115c9:	83 ec 0c             	sub    $0xc,%esp
f01115cc:	50                   	push   %eax
f01115cd:	e8 ce e1 01 00       	call   f012f7a0 <get_block_size>
f01115d2:	83 c4 10             	add    $0x10,%esp
f01115d5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f01115d8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01115db:	8d 50 10             	lea    0x10(%eax),%edx
f01115de:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01115e1:	39 c2                	cmp    %eax,%edx
f01115e3:	74 21                	je     f0111606 <test_realloc_block_FF+0x7a2>
		{
			is_correct = 0;
f01115e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f01115ec:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01115ef:	83 c0 10             	add    $0x10,%eax
f01115f2:	83 ec 04             	sub    $0x4,%esp
f01115f5:	ff 75 a4             	pushl  -0x5c(%ebp)
f01115f8:	50                   	push   %eax
f01115f9:	68 dc 66 13 f0       	push   $0xf01366dc
f01115fe:	e8 2e f8 fe ff       	call   f0100e31 <cprintf>
f0111603:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111606:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111609:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111610:	83 ec 0c             	sub    $0xc,%esp
f0111613:	50                   	push   %eax
f0111614:	e8 9d e1 01 00       	call   f012f7b6 <is_free_block>
f0111619:	83 c4 10             	add    $0x10,%esp
f011161c:	0f be c0             	movsbl %al,%eax
f011161f:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111622:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111626:	74 17                	je     f011163f <test_realloc_block_FF+0x7db>
		{
			is_correct = 0;
f0111628:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f011162f:	83 ec 0c             	sub    $0xc,%esp
f0111632:	68 4c 67 13 f0       	push   $0xf013674c
f0111637:	e8 f5 f7 fe ff       	call   f0100e31 <cprintf>
f011163c:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011163f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111642:	40                   	inc    %eax
f0111643:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011164a:	83 ec 0c             	sub    $0xc,%esp
f011164d:	50                   	push   %eax
f011164e:	e8 4d e1 01 00       	call   f012f7a0 <get_block_size>
f0111653:	83 c4 10             	add    $0x10,%esp
f0111656:	85 c0                	test   %eax,%eax
f0111658:	75 1b                	jne    f0111675 <test_realloc_block_FF+0x811>
f011165a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011165d:	40                   	inc    %eax
f011165e:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111665:	83 ec 0c             	sub    $0xc,%esp
f0111668:	50                   	push   %eax
f0111669:	e8 48 e1 01 00       	call   f012f7b6 <is_free_block>
f011166e:	83 c4 10             	add    $0x10,%esp
f0111671:	84 c0                	test   %al,%al
f0111673:	74 17                	je     f011168c <test_realloc_block_FF+0x828>
		{
			is_correct = 0;
f0111675:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f011167c:	83 ec 0c             	sub    $0xc,%esp
f011167f:	68 ac 67 13 f0       	push   $0xf01367ac
f0111684:	e8 a8 f7 fe ff       	call   f0100e31 <cprintf>
f0111689:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f011168c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011168f:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111696:	66 8b 00             	mov    (%eax),%ax
f0111699:	98                   	cwtl   
f011169a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011169d:	75 26                	jne    f01116c5 <test_realloc_block_FF+0x861>
f011169f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116a2:	8b 04 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%eax
f01116a9:	66 8b 00             	mov    (%eax),%ax
f01116ac:	98                   	cwtl   
f01116ad:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01116b0:	75 13                	jne    f01116c5 <test_realloc_block_FF+0x861>
f01116b2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116b5:	8b 04 85 40 aa 2d f0 	mov    -0xfd255c0(,%eax,4),%eax
f01116bc:	66 8b 00             	mov    (%eax),%ax
f01116bf:	98                   	cwtl   
f01116c0:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01116c3:	74 1a                	je     f01116df <test_realloc_block_FF+0x87b>
		{
			is_correct = 0;
f01116c5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01116cc:	83 ec 08             	sub    $0x8,%esp
f01116cf:	ff 75 ac             	pushl  -0x54(%ebp)
f01116d2:	68 20 68 13 f0       	push   $0xf0136820
f01116d7:	e8 55 f7 fe ff       	call   f0100e31 <cprintf>
f01116dc:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f01116df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01116e3:	74 04                	je     f01116e9 <test_realloc_block_FF+0x885>
	{
		eval += 25;
f01116e5:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[4] Test realloc with decreased sizes
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f01116e9:	83 ec 0c             	sub    $0xc,%esp
f01116ec:	68 80 68 13 f0       	push   $0xf0136880
f01116f1:	e8 3b f7 fe ff       	call   f0100e31 <cprintf>
f01116f6:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f01116f9:	83 ec 0c             	sub    $0xc,%esp
f01116fc:	68 b8 68 13 f0       	push   $0xf01368b8
f0111701:	e8 2b f7 fe ff       	call   f0100e31 <cprintf>
f0111706:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111709:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f0111710:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
		old_size = allocSizes[0] /*4KB*/;
f0111717:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f011171c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		new_size = old_size - 1*kilo - sizeOfMetaData();
f011171f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111722:	2d 10 04 00 00       	sub    $0x410,%eax
f0111727:	89 45 a8             	mov    %eax,-0x58(%ebp)
		//cprintf("REALLOCATE to size %d\n",new_size ) ;
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f011172a:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011172d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111730:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111737:	83 ec 08             	sub    $0x8,%esp
f011173a:	52                   	push   %edx
f011173b:	50                   	push   %eax
f011173c:	e8 8c e3 01 00       	call   f012facd <realloc_block_FF>
f0111741:	83 c4 10             	add    $0x10,%esp
f0111744:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111747:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011174b:	74 0f                	je     f011175c <test_realloc_block_FF+0x8f8>
f011174d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111750:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111757:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011175a:	74 25                	je     f0111781 <test_realloc_block_FF+0x91d>
		{
			is_correct = 0;
f011175c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f0111763:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111766:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011176d:	83 ec 04             	sub    $0x4,%esp
f0111770:	ff 75 bc             	pushl  -0x44(%ebp)
f0111773:	50                   	push   %eax
f0111774:	68 e4 68 13 f0       	push   $0xf01368e4
f0111779:	e8 b3 f6 fe ff       	call   f0100e31 <cprintf>
f011177e:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111781:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111784:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f011178b:	83 ec 0c             	sub    $0xc,%esp
f011178e:	50                   	push   %eax
f011178f:	e8 0c e0 01 00       	call   f012f7a0 <get_block_size>
f0111794:	83 c4 10             	add    $0x10,%esp
f0111797:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f011179a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011179d:	8d 50 10             	lea    0x10(%eax),%edx
f01117a0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01117a3:	39 c2                	cmp    %eax,%edx
f01117a5:	74 21                	je     f01117c8 <test_realloc_block_FF+0x964>
		{
			is_correct = 0;
f01117a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f01117ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01117b1:	83 c0 10             	add    $0x10,%eax
f01117b4:	83 ec 04             	sub    $0x4,%esp
f01117b7:	ff 75 a4             	pushl  -0x5c(%ebp)
f01117ba:	50                   	push   %eax
f01117bb:	68 44 69 13 f0       	push   $0xf0136944
f01117c0:	e8 6c f6 fe ff       	call   f0100e31 <cprintf>
f01117c5:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f01117c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117cb:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f01117d2:	83 ec 0c             	sub    $0xc,%esp
f01117d5:	50                   	push   %eax
f01117d6:	e8 db df 01 00       	call   f012f7b6 <is_free_block>
f01117db:	83 c4 10             	add    $0x10,%esp
f01117de:	0f be c0             	movsbl %al,%eax
f01117e1:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f01117e4:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01117e8:	74 17                	je     f0111801 <test_realloc_block_FF+0x99d>
		{
			is_correct = 0;
f01117ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f01117f1:	83 ec 0c             	sub    $0xc,%esp
f01117f4:	68 b4 69 13 f0       	push   $0xf01369b4
f01117f9:	e8 33 f6 fe ff       	call   f0100e31 <cprintf>
f01117fe:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockMetaData *newBlkMetaData = (struct BlockMetaData *)(va + new_size);
f0111801:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111804:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111807:	01 d0                	add    %edx,%eax
f0111809:	89 45 98             	mov    %eax,-0x68(%ebp)
		expected_size = 1*kilo ;
f011180c:	c7 45 94 00 04 00 00 	movl   $0x400,-0x6c(%ebp)
		if (newBlkMetaData->size != expected_size || newBlkMetaData->is_free != 1)
f0111813:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111816:	8b 10                	mov    (%eax),%edx
f0111818:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011181b:	39 c2                	cmp    %eax,%edx
f011181d:	75 0a                	jne    f0111829 <test_realloc_block_FF+0x9c5>
f011181f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111822:	8a 40 04             	mov    0x4(%eax),%al
f0111825:	3c 01                	cmp    $0x1,%al
f0111827:	74 20                	je     f0111849 <test_realloc_block_FF+0x9e5>
		{
			is_correct = 0;
f0111829:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.4: WRONG REALLOC! newly created block is not correct... check it!. Expected %d, Actual %d\n", expected_size, newBlkMetaData->size);
f0111830:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111833:	8b 00                	mov    (%eax),%eax
f0111835:	83 ec 04             	sub    $0x4,%esp
f0111838:	50                   	push   %eax
f0111839:	ff 75 94             	pushl  -0x6c(%ebp)
f011183c:	68 14 6a 13 f0       	push   $0xf0136a14
f0111841:	e8 eb f5 fe ff       	call   f0100e31 <cprintf>
f0111846:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0111849:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011184c:	8b 04 85 40 94 2d f0 	mov    -0xfd26bc0(,%eax,4),%eax
f0111853:	66 8b 00             	mov    (%eax),%ax
f0111856:	98                   	cwtl   
f0111857:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011185a:	75 13                	jne    f011186f <test_realloc_block_FF+0xa0b>
f011185c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011185f:	8b 04 85 40 c0 2d f0 	mov    -0xfd23fc0(,%eax,4),%eax
f0111866:	66 8b 00             	mov    (%eax),%ax
f0111869:	98                   	cwtl   
f011186a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011186d:	74 1a                	je     f0111889 <test_realloc_block_FF+0xa25>
		{
			is_correct = 0;
f011186f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111876:	83 ec 08             	sub    $0x8,%esp
f0111879:	ff 75 ac             	pushl  -0x54(%ebp)
f011187c:	68 8c 6a 13 f0       	push   $0xf0136a8c
f0111881:	e8 ab f5 fe ff       	call   f0100e31 <cprintf>
f0111886:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111889:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011188d:	74 04                	je     f0111893 <test_realloc_block_FF+0xa2f>
	{
		eval += 30;
f011188f:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)
	}


	cprintf("test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0111893:	83 ec 08             	sub    $0x8,%esp
f0111896:	ff 75 f4             	pushl  -0xc(%ebp)
f0111899:	68 ec 6a 13 f0       	push   $0xf0136aec
f011189e:	e8 8e f5 fe ff       	call   f0100e31 <cprintf>
f01118a3:	83 c4 10             	add    $0x10,%esp

}
f01118a6:	90                   	nop
f01118a7:	c9                   	leave  
f01118a8:	c3                   	ret    

f01118a9 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f01118a9:	55                   	push   %ebp
f01118aa:	89 e5                	mov    %esp,%ebp
f01118ac:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f01118af:	83 ec 04             	sub    $0x4,%esp
f01118b2:	68 2b 6b 13 f0       	push   $0xf0136b2b
f01118b7:	68 ae 05 00 00       	push   $0x5ae
f01118bc:	68 04 3b 13 f0       	push   $0xf0133b04
f01118c1:	e8 ea e8 fe ff       	call   f01001b0 <_panic>

f01118c6 <sys_check_LRU_lists>:
#include <kern/tests/test_working_set.h>
#include <kern/proc/user_environment.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f01118c6:	55                   	push   %ebp
f01118c7:	89 e5                	mov    %esp,%ebp
f01118c9:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f01118cc:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f01118d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f01118d4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f01118db:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f01118e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01118e6:	0f 84 a5 00 00 00    	je     f0111991 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f01118ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f01118f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01118f6:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f01118fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01118ff:	eb 4a                	jmp    f011194b <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f0111901:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111904:	8b 00                	mov    (%eax),%eax
f0111906:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111909:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011190c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111911:	89 c2                	mov    %eax,%edx
f0111913:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111916:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011191d:	8b 45 08             	mov    0x8(%ebp),%eax
f0111920:	01 c8                	add    %ecx,%eax
f0111922:	8b 00                	mov    (%eax),%eax
f0111924:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111927:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011192a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011192f:	39 c2                	cmp    %eax,%edx
f0111931:	74 09                	je     f011193c <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f0111933:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f011193a:	eb 3e                	jmp    f011197a <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f011193c:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f011193f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111942:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111948:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011194b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011194f:	74 08                	je     f0111959 <sys_check_LRU_lists+0x93>
f0111951:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111954:	8b 40 10             	mov    0x10(%eax),%eax
f0111957:	eb 05                	jmp    f011195e <sys_check_LRU_lists+0x98>
f0111959:	b8 00 00 00 00       	mov    $0x0,%eax
f011195e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111961:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111967:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011196a:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111970:	85 c0                	test   %eax,%eax
f0111972:	75 8d                	jne    f0111901 <sys_check_LRU_lists+0x3b>
f0111974:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111978:	75 87                	jne    f0111901 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f011197a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011197d:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0111983:	8b 45 10             	mov    0x10(%ebp),%eax
f0111986:	39 c2                	cmp    %eax,%edx
f0111988:	74 07                	je     f0111991 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f011198a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f0111991:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0111995:	0f 84 a5 00 00 00    	je     f0111a40 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f011199b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01119a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119a5:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01119ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01119ae:	eb 4a                	jmp    f01119fa <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f01119b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01119b3:	8b 00                	mov    (%eax),%eax
f01119b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01119b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01119bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01119c0:	89 c2                	mov    %eax,%edx
f01119c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01119c5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01119cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01119cf:	01 c8                	add    %ecx,%eax
f01119d1:	8b 00                	mov    (%eax),%eax
f01119d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01119d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01119d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01119de:	39 c2                	cmp    %eax,%edx
f01119e0:	74 09                	je     f01119eb <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f01119e2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f01119e9:	eb 3e                	jmp    f0111a29 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f01119eb:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01119ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119f1:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01119f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01119fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01119fe:	74 08                	je     f0111a08 <sys_check_LRU_lists+0x142>
f0111a00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111a03:	8b 40 10             	mov    0x10(%eax),%eax
f0111a06:	eb 05                	jmp    f0111a0d <sys_check_LRU_lists+0x147>
f0111a08:	b8 00 00 00 00       	mov    $0x0,%eax
f0111a0d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111a10:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111a16:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a19:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111a1f:	85 c0                	test   %eax,%eax
f0111a21:	75 8d                	jne    f01119b0 <sys_check_LRU_lists+0xea>
f0111a23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111a27:	75 87                	jne    f01119b0 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0111a29:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a2c:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0111a32:	8b 45 14             	mov    0x14(%ebp),%eax
f0111a35:	39 c2                	cmp    %eax,%edx
f0111a37:	74 07                	je     f0111a40 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f0111a39:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f0111a40:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111a43:	23 45 f8             	and    -0x8(%ebp),%eax
}
f0111a46:	c9                   	leave  
f0111a47:	c3                   	ret    

f0111a48 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0111a48:	55                   	push   %ebp
f0111a49:	89 e5                	mov    %esp,%ebp
f0111a4b:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111a4e:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f0111a53:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f0111a56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111a5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a60:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111a66:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111a69:	eb 65                	jmp    f0111ad0 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f0111a6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111a72:	eb 3a                	jmp    f0111aae <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111a74:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111a77:	8b 00                	mov    (%eax),%eax
f0111a79:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111a7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111a7f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111a84:	89 c2                	mov    %eax,%edx
f0111a86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111a89:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111a90:	8b 45 08             	mov    0x8(%ebp),%eax
f0111a93:	01 c8                	add    %ecx,%eax
f0111a95:	8b 00                	mov    (%eax),%eax
f0111a97:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111a9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111a9d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111aa2:	39 c2                	cmp    %eax,%edx
f0111aa4:	75 05                	jne    f0111aab <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f0111aa6:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111aa9:	eb 0b                	jmp    f0111ab6 <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0111aab:	ff 45 f4             	incl   -0xc(%ebp)
f0111aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111ab1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111ab4:	7c be                	jl     f0111a74 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111ab6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111aba:	7e 08                	jle    f0111ac4 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f0111abc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111abf:	e9 ed 00 00 00       	jmp    f0111bb1 <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111ac4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111ac7:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111acd:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111ad0:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111ad4:	74 08                	je     f0111ade <sys_check_LRU_lists_free+0x96>
f0111ad6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111ad9:	8b 40 10             	mov    0x10(%eax),%eax
f0111adc:	eb 05                	jmp    f0111ae3 <sys_check_LRU_lists_free+0x9b>
f0111ade:	b8 00 00 00 00       	mov    $0x0,%eax
f0111ae3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111ae6:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111aec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111aef:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111af5:	85 c0                	test   %eax,%eax
f0111af7:	0f 85 6e ff ff ff    	jne    f0111a6b <sys_check_LRU_lists_free+0x23>
f0111afd:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111b01:	0f 85 64 ff ff ff    	jne    f0111a6b <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111b07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b0a:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111b10:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111b13:	eb 62                	jmp    f0111b77 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f0111b15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0111b1c:	eb 3a                	jmp    f0111b58 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111b1e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111b21:	8b 00                	mov    (%eax),%eax
f0111b23:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0111b26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111b29:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b2e:	89 c2                	mov    %eax,%edx
f0111b30:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111b33:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111b3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0111b3d:	01 c8                	add    %ecx,%eax
f0111b3f:	8b 00                	mov    (%eax),%eax
f0111b41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111b44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111b47:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b4c:	39 c2                	cmp    %eax,%edx
f0111b4e:	75 05                	jne    f0111b55 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f0111b50:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111b53:	eb 0b                	jmp    f0111b60 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f0111b55:	ff 45 f0             	incl   -0x10(%ebp)
f0111b58:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111b5b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111b5e:	7c be                	jl     f0111b1e <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111b60:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111b64:	7e 05                	jle    f0111b6b <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f0111b66:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111b69:	eb 46                	jmp    f0111bb1 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111b6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b6e:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111b74:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111b77:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111b7b:	74 08                	je     f0111b85 <sys_check_LRU_lists_free+0x13d>
f0111b7d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111b80:	8b 40 10             	mov    0x10(%eax),%eax
f0111b83:	eb 05                	jmp    f0111b8a <sys_check_LRU_lists_free+0x142>
f0111b85:	b8 00 00 00 00       	mov    $0x0,%eax
f0111b8a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111b8d:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111b93:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b96:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111b9c:	85 c0                	test   %eax,%eax
f0111b9e:	0f 85 71 ff ff ff    	jne    f0111b15 <sys_check_LRU_lists_free+0xcd>
f0111ba4:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111ba8:	0f 85 67 ff ff ff    	jne    f0111b15 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f0111bae:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0111bb1:	c9                   	leave  
f0111bb2:	c3                   	ret    

f0111bb3 <sys_check_WS_list>:

//2023
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_in_order)
{
f0111bb3:	55                   	push   %ebp
f0111bb4:	89 e5                	mov    %esp,%ebp
f0111bb6:	83 ec 08             	sub    $0x8,%esp
			}
		}
	}
	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f0111bb9:	83 ec 04             	sub    $0x4,%esp
f0111bbc:	68 40 6b 13 f0       	push   $0xf0136b40
f0111bc1:	68 9c 00 00 00       	push   $0x9c
f0111bc6:	68 8b 6b 13 f0       	push   $0xf0136b8b
f0111bcb:	e8 e0 e5 fe ff       	call   f01001b0 <_panic>

f0111bd0 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111bd0:	55                   	push   %ebp
f0111bd1:	89 e5                	mov    %esp,%ebp
f0111bd3:	57                   	push   %edi
f0111bd4:	56                   	push   %esi
f0111bd5:	53                   	push   %ebx
f0111bd6:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111bdc:	83 ec 0c             	sub    $0xc,%esp
f0111bdf:	68 ac 6b 13 f0       	push   $0xf0136bac
f0111be4:	e8 48 f2 fe ff       	call   f0100e31 <cprintf>
f0111be9:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0111bec:	83 ec 0c             	sub    $0xc,%esp
f0111bef:	68 d0 6b 13 f0       	push   $0xf0136bd0
f0111bf4:	e8 38 f2 fe ff       	call   f0100e31 <cprintf>
f0111bf9:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111bfc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111c03:	83 ec 0c             	sub    $0xc,%esp
f0111c06:	68 ec 6b 13 f0       	push   $0xf0136bec
f0111c0b:	e8 21 f2 fe ff       	call   f0100e31 <cprintf>
f0111c10:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111c13:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111c16:	bb a6 6c 13 f0       	mov    $0xf0136ca6,%ebx
f0111c1b:	ba 03 00 00 00       	mov    $0x3,%edx
f0111c20:	89 c7                	mov    %eax,%edi
f0111c22:	89 de                	mov    %ebx,%esi
f0111c24:	89 d1                	mov    %edx,%ecx
f0111c26:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111c28:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111c2b:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111c30:	b8 00 00 00 00       	mov    $0x0,%eax
f0111c35:	89 d7                	mov    %edx,%edi
f0111c37:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111c39:	83 ec 0c             	sub    $0xc,%esp
f0111c3c:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111c3f:	50                   	push   %eax
f0111c40:	e8 7e ff fe ff       	call   f0101bc3 <execute_command>
f0111c45:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111c48:	83 ec 0c             	sub    $0xc,%esp
f0111c4b:	68 1a 6c 13 f0       	push   $0xf0136c1a
f0111c50:	e8 dc f1 fe ff       	call   f0100e31 <cprintf>
f0111c55:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111c58:	83 ec 0c             	sub    $0xc,%esp
f0111c5b:	68 30 6c 13 f0       	push   $0xf0136c30
f0111c60:	e8 cc f1 fe ff       	call   f0100e31 <cprintf>
f0111c65:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111c68:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111c6f:	65 00 00 
f0111c72:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111c78:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111c7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111c82:	89 d7                	mov    %edx,%edi
f0111c84:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111c86:	83 ec 0c             	sub    $0xc,%esp
f0111c89:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111c8f:	50                   	push   %eax
f0111c90:	e8 2e ff fe ff       	call   f0101bc3 <execute_command>
f0111c95:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111c98:	83 ec 0c             	sub    $0xc,%esp
f0111c9b:	68 1a 6c 13 f0       	push   $0xf0136c1a
f0111ca0:	e8 8c f1 fe ff       	call   f0100e31 <cprintf>
f0111ca5:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111ca8:	83 ec 0c             	sub    $0xc,%esp
f0111cab:	68 58 6c 13 f0       	push   $0xf0136c58
f0111cb0:	e8 7c f1 fe ff       	call   f0100e31 <cprintf>
f0111cb5:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111cb8:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111cbf:	75 00 00 
f0111cc2:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111cc8:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111ccd:	b8 00 00 00 00       	mov    $0x0,%eax
f0111cd2:	89 d7                	mov    %edx,%edi
f0111cd4:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0111cd6:	83 ec 0c             	sub    $0xc,%esp
f0111cd9:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111cdf:	50                   	push   %eax
f0111ce0:	e8 de fe fe ff       	call   f0101bc3 <execute_command>
f0111ce5:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111ce8:	83 ec 0c             	sub    $0xc,%esp
f0111ceb:	68 1a 6c 13 f0       	push   $0xf0136c1a
f0111cf0:	e8 3c f1 fe ff       	call   f0100e31 <cprintf>
f0111cf5:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111cf8:	83 ec 0c             	sub    $0xc,%esp
f0111cfb:	68 80 6c 13 f0       	push   $0xf0136c80
f0111d00:	e8 2c f1 fe ff       	call   f0100e31 <cprintf>
f0111d05:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0111d08:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111d0f:	6d 6d 00 
f0111d12:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0111d18:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111d1d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d22:	89 d7                	mov    %edx,%edi
f0111d24:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111d26:	83 ec 0c             	sub    $0xc,%esp
f0111d29:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111d2f:	50                   	push   %eax
f0111d30:	e8 8e fe fe ff       	call   f0101bc3 <execute_command>
f0111d35:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111d38:	83 ec 0c             	sub    $0xc,%esp
f0111d3b:	68 1a 6c 13 f0       	push   $0xf0136c1a
f0111d40:	e8 ec f0 fe ff       	call   f0100e31 <cprintf>
f0111d45:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111d48:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111d4d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111d50:	5b                   	pop    %ebx
f0111d51:	5e                   	pop    %esi
f0111d52:	5f                   	pop    %edi
f0111d53:	5d                   	pop    %ebp
f0111d54:	c3                   	ret    

f0111d55 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111d55:	55                   	push   %ebp
f0111d56:	89 e5                	mov    %esp,%ebp
f0111d58:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111d5b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111d62:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111d69:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111d70:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111d75:	ff 75 ec             	pushl  -0x14(%ebp)
f0111d78:	ff 75 f0             	pushl  -0x10(%ebp)
f0111d7b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d7e:	50                   	push   %eax
f0111d7f:	e8 3d 62 ff ff       	call   f0107fc1 <pt_set_page_permissions>
f0111d84:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111d87:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111d8c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111d8f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111d92:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d95:	50                   	push   %eax
f0111d96:	e8 b8 4d 00 00       	call   f0116b53 <CP>
f0111d9b:	83 c4 10             	add    $0x10,%esp
f0111d9e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111da1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111da5:	74 14                	je     f0111dbb <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111da7:	83 ec 04             	sub    $0x4,%esp
f0111daa:	68 0c 6d 13 f0       	push   $0xf0136d0c
f0111daf:	6a 5a                	push   $0x5a
f0111db1:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0111db6:	e8 f5 e3 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111dbb:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0111dc2:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111dc9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111dd0:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111dd5:	ff 75 ec             	pushl  -0x14(%ebp)
f0111dd8:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ddb:	ff 75 f4             	pushl  -0xc(%ebp)
f0111dde:	50                   	push   %eax
f0111ddf:	e8 dd 61 ff ff       	call   f0107fc1 <pt_set_page_permissions>
f0111de4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111de7:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111dec:	ff 75 ec             	pushl  -0x14(%ebp)
f0111def:	ff 75 f0             	pushl  -0x10(%ebp)
f0111df2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111df5:	50                   	push   %eax
f0111df6:	e8 58 4d 00 00       	call   f0116b53 <CP>
f0111dfb:	83 c4 10             	add    $0x10,%esp
f0111dfe:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111e01:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111e05:	74 14                	je     f0111e1b <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111e07:	83 ec 04             	sub    $0x4,%esp
f0111e0a:	68 4c 6d 13 f0       	push   $0xf0136d4c
f0111e0f:	6a 66                	push   $0x66
f0111e11:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0111e16:	e8 95 e3 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0111e1b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111e22:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111e29:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e30:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111e35:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e38:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e3b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e3e:	50                   	push   %eax
f0111e3f:	e8 7d 61 ff ff       	call   f0107fc1 <pt_set_page_permissions>
f0111e44:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e47:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111e4c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e4f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e52:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e55:	50                   	push   %eax
f0111e56:	e8 f8 4c 00 00       	call   f0116b53 <CP>
f0111e5b:	83 c4 10             	add    $0x10,%esp
f0111e5e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111e61:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111e65:	74 14                	je     f0111e7b <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111e67:	83 ec 04             	sub    $0x4,%esp
f0111e6a:	68 70 6d 13 f0       	push   $0xf0136d70
f0111e6f:	6a 71                	push   $0x71
f0111e71:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0111e76:	e8 35 e3 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111e7b:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111e82:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111e89:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e90:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111e95:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e98:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e9e:	50                   	push   %eax
f0111e9f:	e8 1d 61 ff ff       	call   f0107fc1 <pt_set_page_permissions>
f0111ea4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ea7:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111eac:	ff 75 ec             	pushl  -0x14(%ebp)
f0111eaf:	ff 75 f0             	pushl  -0x10(%ebp)
f0111eb2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111eb5:	50                   	push   %eax
f0111eb6:	e8 98 4c 00 00       	call   f0116b53 <CP>
f0111ebb:	83 c4 10             	add    $0x10,%esp
f0111ebe:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111ec1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111ec5:	74 14                	je     f0111edb <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111ec7:	83 ec 04             	sub    $0x4,%esp
f0111eca:	68 94 6d 13 f0       	push   $0xf0136d94
f0111ecf:	6a 7d                	push   $0x7d
f0111ed1:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0111ed6:	e8 d5 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111edb:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111ee2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111ee9:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ef0:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111ef5:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ef8:	ff 75 f0             	pushl  -0x10(%ebp)
f0111efb:	ff 75 f4             	pushl  -0xc(%ebp)
f0111efe:	50                   	push   %eax
f0111eff:	e8 bd 60 ff ff       	call   f0107fc1 <pt_set_page_permissions>
f0111f04:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f07:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111f0c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f0f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f12:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f15:	50                   	push   %eax
f0111f16:	e8 38 4c 00 00       	call   f0116b53 <CP>
f0111f1b:	83 c4 10             	add    $0x10,%esp
f0111f1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111f21:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111f25:	74 17                	je     f0111f3e <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111f27:	83 ec 04             	sub    $0x4,%esp
f0111f2a:	68 b8 6d 13 f0       	push   $0xf0136db8
f0111f2f:	68 89 00 00 00       	push   $0x89
f0111f34:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0111f39:	e8 72 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111f3e:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111f45:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111f4c:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f53:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111f58:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f5b:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f5e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f61:	50                   	push   %eax
f0111f62:	e8 5a 60 ff ff       	call   f0107fc1 <pt_set_page_permissions>
f0111f67:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f6a:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111f6f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f72:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f75:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f78:	50                   	push   %eax
f0111f79:	e8 d5 4b 00 00       	call   f0116b53 <CP>
f0111f7e:	83 c4 10             	add    $0x10,%esp
f0111f81:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111f84:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111f88:	74 17                	je     f0111fa1 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111f8a:	83 ec 04             	sub    $0x4,%esp
f0111f8d:	68 dc 6d 13 f0       	push   $0xf0136ddc
f0111f92:	68 95 00 00 00       	push   $0x95
f0111f97:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0111f9c:	e8 0f e2 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111fa1:	83 ec 0c             	sub    $0xc,%esp
f0111fa4:	68 08 6e 13 f0       	push   $0xf0136e08
f0111fa9:	e8 83 ee fe ff       	call   f0100e31 <cprintf>
f0111fae:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111fb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111fb6:	c9                   	leave  
f0111fb7:	c3                   	ret    

f0111fb8 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111fb8:	55                   	push   %ebp
f0111fb9:	89 e5                	mov    %esp,%ebp
f0111fbb:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111fbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111fc5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111fcc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111fd3:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0111fd8:	ff 75 ec             	pushl  -0x14(%ebp)
f0111fdb:	ff 75 f0             	pushl  -0x10(%ebp)
f0111fde:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fe1:	50                   	push   %eax
f0111fe2:	e8 da 5f ff ff       	call   f0107fc1 <pt_set_page_permissions>
f0111fe7:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111fea:	83 ec 04             	sub    $0x4,%esp
f0111fed:	68 58 6e 13 f0       	push   $0xf0136e58
f0111ff2:	68 a2 00 00 00       	push   $0xa2
f0111ff7:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0111ffc:	e8 af e1 fe ff       	call   f01001b0 <_panic>

f0112001 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0112001:	55                   	push   %ebp
f0112002:	89 e5                	mov    %esp,%ebp
f0112004:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0112007:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f011200e:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0112013:	83 ec 08             	sub    $0x8,%esp
f0112016:	ff 75 f4             	pushl  -0xc(%ebp)
f0112019:	50                   	push   %eax
f011201a:	e8 66 60 ff ff       	call   f0108085 <pt_get_page_permissions>
f011201f:	83 c4 10             	add    $0x10,%esp
f0112022:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0112025:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0112029:	74 17                	je     f0112042 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f011202b:	83 ec 04             	sub    $0x4,%esp
f011202e:	68 f4 6e 13 f0       	push   $0xf0136ef4
f0112033:	68 b0 00 00 00       	push   $0xb0
f0112038:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011203d:	e8 6e e1 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0112042:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112049:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f011204e:	83 ec 08             	sub    $0x8,%esp
f0112051:	ff 75 f4             	pushl  -0xc(%ebp)
f0112054:	50                   	push   %eax
f0112055:	e8 2b 60 ff ff       	call   f0108085 <pt_get_page_permissions>
f011205a:	83 c4 10             	add    $0x10,%esp
f011205d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0112060:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112064:	74 17                	je     f011207d <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0112066:	83 ec 04             	sub    $0x4,%esp
f0112069:	68 18 6f 13 f0       	push   $0xf0136f18
f011206e:	68 b8 00 00 00       	push   $0xb8
f0112073:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112078:	e8 33 e1 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f011207d:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112084:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0112089:	83 ec 08             	sub    $0x8,%esp
f011208c:	ff 75 f4             	pushl  -0xc(%ebp)
f011208f:	50                   	push   %eax
f0112090:	e8 f0 5f ff ff       	call   f0108085 <pt_get_page_permissions>
f0112095:	83 c4 10             	add    $0x10,%esp
f0112098:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011209b:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011209f:	74 17                	je     f01120b8 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01120a1:	83 ec 04             	sub    $0x4,%esp
f01120a4:	68 3c 6f 13 f0       	push   $0xf0136f3c
f01120a9:	68 c0 00 00 00       	push   $0xc0
f01120ae:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01120b3:	e8 f8 e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF1000000;
f01120b8:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01120bf:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01120c4:	83 ec 08             	sub    $0x8,%esp
f01120c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01120ca:	50                   	push   %eax
f01120cb:	e8 b5 5f ff ff       	call   f0108085 <pt_get_page_permissions>
f01120d0:	83 c4 10             	add    $0x10,%esp
f01120d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01120d6:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01120da:	74 17                	je     f01120f3 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01120dc:	83 ec 04             	sub    $0x4,%esp
f01120df:	68 60 6f 13 f0       	push   $0xf0136f60
f01120e4:	68 c7 00 00 00       	push   $0xc7
f01120e9:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01120ee:	e8 bd e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f01120f3:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01120fa:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01120ff:	83 ec 08             	sub    $0x8,%esp
f0112102:	ff 75 f4             	pushl  -0xc(%ebp)
f0112105:	50                   	push   %eax
f0112106:	e8 7a 5f ff ff       	call   f0108085 <pt_get_page_permissions>
f011210b:	83 c4 10             	add    $0x10,%esp
f011210e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0112111:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0112115:	74 17                	je     f011212e <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0112117:	83 ec 04             	sub    $0x4,%esp
f011211a:	68 84 6f 13 f0       	push   $0xf0136f84
f011211f:	68 ce 00 00 00       	push   $0xce
f0112124:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112129:	e8 82 e0 fe ff       	call   f01001b0 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f011212e:	83 ec 0c             	sub    $0xc,%esp
f0112131:	68 a8 6f 13 f0       	push   $0xf0136fa8
f0112136:	e8 f6 ec fe ff       	call   f0100e31 <cprintf>
f011213b:	83 c4 10             	add    $0x10,%esp
	return 0;
f011213e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112143:	c9                   	leave  
f0112144:	c3                   	ret    

f0112145 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0112145:	55                   	push   %ebp
f0112146:	89 e5                	mov    %esp,%ebp
f0112148:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f011214b:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112152:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0112157:	83 ec 08             	sub    $0x8,%esp
f011215a:	ff 75 f4             	pushl  -0xc(%ebp)
f011215d:	50                   	push   %eax
f011215e:	e8 6b 5f ff ff       	call   f01080ce <pt_clear_page_table_entry>
f0112163:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0112166:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f011216b:	83 ec 08             	sub    $0x8,%esp
f011216e:	ff 75 f4             	pushl  -0xc(%ebp)
f0112171:	50                   	push   %eax
f0112172:	e8 38 49 00 00       	call   f0116aaf <CE>
f0112177:	83 c4 10             	add    $0x10,%esp
f011217a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011217d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0112181:	74 17                	je     f011219a <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0112183:	83 ec 04             	sub    $0x4,%esp
f0112186:	68 f0 6f 13 f0       	push   $0xf0136ff0
f011218b:	68 de 00 00 00       	push   $0xde
f0112190:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112195:	e8 16 e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f011219a:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01121a1:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01121a6:	83 ec 08             	sub    $0x8,%esp
f01121a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01121ac:	50                   	push   %eax
f01121ad:	e8 1c 5f ff ff       	call   f01080ce <pt_clear_page_table_entry>
f01121b2:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01121b5:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01121ba:	83 ec 08             	sub    $0x8,%esp
f01121bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01121c0:	50                   	push   %eax
f01121c1:	e8 e9 48 00 00       	call   f0116aaf <CE>
f01121c6:	83 c4 10             	add    $0x10,%esp
f01121c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01121cc:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01121d0:	74 17                	je     f01121e9 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f01121d2:	83 ec 04             	sub    $0x4,%esp
f01121d5:	68 1c 70 13 f0       	push   $0xf013701c
f01121da:	68 e6 00 00 00       	push   $0xe6
f01121df:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01121e4:	e8 c7 df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f01121e9:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01121f0:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01121f5:	83 ec 08             	sub    $0x8,%esp
f01121f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01121fb:	50                   	push   %eax
f01121fc:	e8 cd 5e ff ff       	call   f01080ce <pt_clear_page_table_entry>
f0112201:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112204:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0112209:	83 ec 08             	sub    $0x8,%esp
f011220c:	ff 75 f4             	pushl  -0xc(%ebp)
f011220f:	50                   	push   %eax
f0112210:	e8 9a 48 00 00       	call   f0116aaf <CE>
f0112215:	83 c4 10             	add    $0x10,%esp
f0112218:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011221b:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011221f:	74 17                	je     f0112238 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0112221:	83 ec 04             	sub    $0x4,%esp
f0112224:	68 48 70 13 f0       	push   $0xf0137048
f0112229:	68 ee 00 00 00       	push   $0xee
f011222e:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112233:	e8 78 df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0000000;
f0112238:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011223f:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0112244:	83 ec 08             	sub    $0x8,%esp
f0112247:	ff 75 f4             	pushl  -0xc(%ebp)
f011224a:	50                   	push   %eax
f011224b:	e8 7e 5e ff ff       	call   f01080ce <pt_clear_page_table_entry>
f0112250:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112253:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0112258:	83 ec 08             	sub    $0x8,%esp
f011225b:	ff 75 f4             	pushl  -0xc(%ebp)
f011225e:	50                   	push   %eax
f011225f:	e8 4b 48 00 00       	call   f0116aaf <CE>
f0112264:	83 c4 10             	add    $0x10,%esp
f0112267:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011226a:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011226e:	74 17                	je     f0112287 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0112270:	83 ec 04             	sub    $0x4,%esp
f0112273:	68 74 70 13 f0       	push   $0xf0137074
f0112278:	68 f6 00 00 00       	push   $0xf6
f011227d:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112282:	e8 29 df fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0112287:	83 ec 0c             	sub    $0xc,%esp
f011228a:	68 a0 70 13 f0       	push   $0xf01370a0
f011228f:	e8 9d eb fe ff       	call   f0100e31 <cprintf>
f0112294:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112297:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011229c:	c9                   	leave  
f011229d:	c3                   	ret    

f011229e <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f011229e:	55                   	push   %ebp
f011229f:	89 e5                	mov    %esp,%ebp
f01122a1:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01122a4:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01122ab:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01122b0:	83 ec 08             	sub    $0x8,%esp
f01122b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01122b6:	50                   	push   %eax
f01122b7:	e8 12 5e ff ff       	call   f01080ce <pt_clear_page_table_entry>
f01122bc:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f01122bf:	83 ec 04             	sub    $0x4,%esp
f01122c2:	68 ec 70 13 f0       	push   $0xf01370ec
f01122c7:	68 01 01 00 00       	push   $0x101
f01122cc:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01122d1:	e8 da de fe ff       	call   f01001b0 <_panic>

f01122d6 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f01122d6:	55                   	push   %ebp
f01122d7:	89 e5                	mov    %esp,%ebp
f01122d9:	57                   	push   %edi
f01122da:	56                   	push   %esi
f01122db:	53                   	push   %ebx
f01122dc:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01122e2:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01122e8:	bb 30 74 13 f0       	mov    $0xf0137430,%ebx
f01122ed:	ba 0f 00 00 00       	mov    $0xf,%edx
f01122f2:	89 c7                	mov    %eax,%edi
f01122f4:	89 de                	mov    %ebx,%esi
f01122f6:	89 d1                	mov    %edx,%ecx
f01122f8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01122fa:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0112300:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112305:	b0 00                	mov    $0x0,%al
f0112307:	89 d7                	mov    %edx,%edi
f0112309:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011230b:	6a 00                	push   $0x0
f011230d:	6a 0a                	push   $0xa
f011230f:	6a 14                	push   $0x14
f0112311:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112317:	50                   	push   %eax
f0112318:	e8 50 69 ff ff       	call   f0108c6d <env_create>
f011231d:	83 c4 10             	add    $0x10,%esp
f0112320:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112323:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112326:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011232c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011232f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112332:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112338:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f011233b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011233e:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112341:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0112348:	75 70 20 
f011234b:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0112352:	00 00 00 
f0112355:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f011235b:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112360:	b8 00 00 00 00       	mov    $0x0,%eax
f0112365:	89 d7                	mov    %edx,%edi
f0112367:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112369:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011236c:	8b 40 4c             	mov    0x4c(%eax),%eax
f011236f:	83 ec 08             	sub    $0x8,%esp
f0112372:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112378:	52                   	push   %edx
f0112379:	50                   	push   %eax
f011237a:	e8 d7 ce 01 00       	call   f012f256 <ltostr>
f011237f:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112382:	83 ec 04             	sub    $0x4,%esp
f0112385:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011238b:	50                   	push   %eax
f011238c:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0112392:	50                   	push   %eax
f0112393:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112399:	50                   	push   %eax
f011239a:	e8 af cf 01 00       	call   f012f34e <strcconcat>
f011239f:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f01123a2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f01123a9:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01123b0:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f01123b7:	83 ec 0c             	sub    $0xc,%esp
f01123ba:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123bd:	e8 ee 48 00 00       	call   f0116cb0 <ClearUserSpace>
f01123c2:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f01123c5:	83 ec 04             	sub    $0x4,%esp
f01123c8:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01123ce:	50                   	push   %eax
f01123cf:	68 82 71 13 f0       	push   $0xf0137182
f01123d4:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123da:	50                   	push   %eax
f01123db:	e8 6e cf 01 00       	call   f012f34e <strcconcat>
f01123e0:	83 c4 10             	add    $0x10,%esp
f01123e3:	83 ec 0c             	sub    $0xc,%esp
f01123e6:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01123ec:	50                   	push   %eax
f01123ed:	e8 d1 f7 fe ff       	call   f0101bc3 <execute_command>
f01123f2:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01123f5:	83 ec 04             	sub    $0x4,%esp
f01123f8:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01123fe:	50                   	push   %eax
f01123ff:	68 8d 71 13 f0       	push   $0xf013718d
f0112404:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011240a:	50                   	push   %eax
f011240b:	e8 3e cf 01 00       	call   f012f34e <strcconcat>
f0112410:	83 c4 10             	add    $0x10,%esp
f0112413:	83 ec 0c             	sub    $0xc,%esp
f0112416:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011241c:	50                   	push   %eax
f011241d:	e8 a1 f7 fe ff       	call   f0101bc3 <execute_command>
f0112422:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0112425:	83 ec 04             	sub    $0x4,%esp
f0112428:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011242e:	50                   	push   %eax
f011242f:	68 98 71 13 f0       	push   $0xf0137198
f0112434:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011243a:	50                   	push   %eax
f011243b:	e8 0e cf 01 00       	call   f012f34e <strcconcat>
f0112440:	83 c4 10             	add    $0x10,%esp
f0112443:	83 ec 0c             	sub    $0xc,%esp
f0112446:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011244c:	50                   	push   %eax
f011244d:	e8 71 f7 fe ff       	call   f0101bc3 <execute_command>
f0112452:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0112455:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011245c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011245f:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0112462:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112469:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011246c:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011246f:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112476:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112479:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011247c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011247f:	83 ec 08             	sub    $0x8,%esp
f0112482:	50                   	push   %eax
f0112483:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112486:	e8 8c 47 00 00       	call   f0116c17 <GP>
f011248b:	83 c4 10             	add    $0x10,%esp
f011248e:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0112491:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112498:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011249f:	e8 dc a4 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01124a4:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f01124a7:	83 ec 0c             	sub    $0xc,%esp
f01124aa:	68 a4 71 13 f0       	push   $0xf01371a4
f01124af:	e8 7d e9 fe ff       	call   f0100e31 <cprintf>
f01124b4:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f01124b7:	6a 03                	push   $0x3
f01124b9:	68 00 00 90 02       	push   $0x2900000
f01124be:	68 00 00 80 02       	push   $0x2800000
f01124c3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124c6:	e8 64 66 ff ff       	call   f0108b2f <cut_paste_pages>
f01124cb:	83 c4 10             	add    $0x10,%esp
f01124ce:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f01124d1:	e8 aa a4 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01124d6:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f01124d9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f01124e0:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01124e4:	75 08                	jne    f01124ee <test_cut_paste_pages+0x218>
f01124e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124e9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01124ec:	74 2b                	je     f0112519 <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01124ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124f1:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01124f4:	83 ec 0c             	sub    $0xc,%esp
f01124f7:	50                   	push   %eax
f01124f8:	ff 75 b4             	pushl  -0x4c(%ebp)
f01124fb:	68 d4 71 13 f0       	push   $0xf01371d4
f0112500:	68 3a 01 00 00       	push   $0x13a
f0112505:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011250a:	e8 af de fe ff       	call   f01003be <_warn>
f011250f:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112512:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0112519:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011251d:	74 04                	je     f0112523 <test_cut_paste_pages+0x24d>
f011251f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112523:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011252a:	83 ec 08             	sub    $0x8,%esp
f011252d:	6a 00                	push   $0x0
f011252f:	6a 01                	push   $0x1
f0112531:	6a 00                	push   $0x0
f0112533:	68 ff 0f 00 00       	push   $0xfff
f0112538:	ff 75 bc             	pushl  -0x44(%ebp)
f011253b:	6a 01                	push   $0x1
f011253d:	68 00 30 00 00       	push   $0x3000
f0112542:	68 00 00 90 02       	push   $0x2900000
f0112547:	68 00 00 80 02       	push   $0x2800000
f011254c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011254f:	e8 90 47 00 00       	call   f0116ce4 <CCP>
f0112554:	83 c4 30             	add    $0x30,%esp
f0112557:	83 f8 01             	cmp    $0x1,%eax
f011255a:	74 21                	je     f011257d <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011255c:	83 ec 04             	sub    $0x4,%esp
f011255f:	68 28 72 13 f0       	push   $0xf0137228
f0112564:	68 42 01 00 00       	push   $0x142
f0112569:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011256e:	e8 4b de fe ff       	call   f01003be <_warn>
f0112573:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112576:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011257d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112581:	74 04                	je     f0112587 <test_cut_paste_pages+0x2b1>
f0112583:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112587:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011258e:	83 ec 04             	sub    $0x4,%esp
f0112591:	6a 00                	push   $0x0
f0112593:	68 00 00 90 02       	push   $0x2900000
f0112598:	ff 75 d4             	pushl  -0x2c(%ebp)
f011259b:	e8 d5 41 00 00       	call   f0116775 <CB>
f01125a0:	83 c4 10             	add    $0x10,%esp
f01125a3:	85 c0                	test   %eax,%eax
f01125a5:	0f 84 f6 00 00 00    	je     f01126a1 <test_cut_paste_pages+0x3cb>
f01125ab:	83 ec 04             	sub    $0x4,%esp
f01125ae:	6a 00                	push   $0x0
f01125b0:	68 00 10 90 02       	push   $0x2901000
f01125b5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125b8:	e8 b8 41 00 00       	call   f0116775 <CB>
f01125bd:	83 c4 10             	add    $0x10,%esp
f01125c0:	85 c0                	test   %eax,%eax
f01125c2:	0f 84 d9 00 00 00    	je     f01126a1 <test_cut_paste_pages+0x3cb>
f01125c8:	83 ec 04             	sub    $0x4,%esp
f01125cb:	6a 00                	push   $0x0
f01125cd:	68 00 20 90 02       	push   $0x2902000
f01125d2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125d5:	e8 9b 41 00 00       	call   f0116775 <CB>
f01125da:	83 c4 10             	add    $0x10,%esp
f01125dd:	85 c0                	test   %eax,%eax
f01125df:	0f 84 bc 00 00 00    	je     f01126a1 <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f01125e5:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01125ec:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01125f3:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01125fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125fd:	8a 00                	mov    (%eax),%al
f01125ff:	3c 61                	cmp    $0x61,%al
f0112601:	75 12                	jne    f0112615 <test_cut_paste_pages+0x33f>
f0112603:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112606:	8a 00                	mov    (%eax),%al
f0112608:	3c 62                	cmp    $0x62,%al
f011260a:	75 09                	jne    f0112615 <test_cut_paste_pages+0x33f>
f011260c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011260f:	8a 00                	mov    (%eax),%al
f0112611:	3c 63                	cmp    $0x63,%al
f0112613:	74 21                	je     f0112636 <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112615:	83 ec 04             	sub    $0x4,%esp
f0112618:	68 74 72 13 f0       	push   $0xf0137274
f011261d:	68 4f 01 00 00       	push   $0x14f
f0112622:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112627:	e8 92 dd fe ff       	call   f01003be <_warn>
f011262c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011262f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112636:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011263a:	74 04                	je     f0112640 <test_cut_paste_pages+0x36a>
f011263c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112640:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112647:	83 ec 04             	sub    $0x4,%esp
f011264a:	6a 01                	push   $0x1
f011264c:	68 00 10 90 02       	push   $0x2901000
f0112651:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112654:	e8 1c 41 00 00       	call   f0116775 <CB>
f0112659:	83 c4 10             	add    $0x10,%esp
f011265c:	85 c0                	test   %eax,%eax
f011265e:	74 41                	je     f01126a1 <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f0112660:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112663:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0112666:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112669:	8a 00                	mov    (%eax),%al
f011266b:	3c 79                	cmp    $0x79,%al
f011266d:	74 21                	je     f0112690 <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011266f:	83 ec 04             	sub    $0x4,%esp
f0112672:	68 74 72 13 f0       	push   $0xf0137274
f0112677:	68 5a 01 00 00       	push   $0x15a
f011267c:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112681:	e8 38 dd fe ff       	call   f01003be <_warn>
f0112686:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112689:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112690:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112694:	74 04                	je     f011269a <test_cut_paste_pages+0x3c4>
f0112696:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011269a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01126a1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01126a4:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01126a7:	6a 02                	push   $0x2
f01126a9:	68 00 f0 bf 02       	push   $0x2bff000
f01126ae:	68 00 10 90 02       	push   $0x2901000
f01126b3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126b6:	e8 74 64 ff ff       	call   f0108b2f <cut_paste_pages>
f01126bb:	83 c4 10             	add    $0x10,%esp
f01126be:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01126c1:	e8 ba a2 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01126c6:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f01126c9:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01126cd:	75 0b                	jne    f01126da <test_cut_paste_pages+0x404>
f01126cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126d2:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01126d5:	83 f8 01             	cmp    $0x1,%eax
f01126d8:	74 2b                	je     f0112705 <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01126da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126dd:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01126e0:	83 ec 0c             	sub    $0xc,%esp
f01126e3:	50                   	push   %eax
f01126e4:	ff 75 b4             	pushl  -0x4c(%ebp)
f01126e7:	68 d4 71 13 f0       	push   $0xf01371d4
f01126ec:	68 6b 01 00 00       	push   $0x16b
f01126f1:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01126f6:	e8 c3 dc fe ff       	call   f01003be <_warn>
f01126fb:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01126fe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112705:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112709:	74 04                	je     f011270f <test_cut_paste_pages+0x439>
f011270b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011270f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112716:	83 ec 08             	sub    $0x8,%esp
f0112719:	6a 00                	push   $0x0
f011271b:	6a 01                	push   $0x1
f011271d:	6a 00                	push   $0x0
f011271f:	68 ff 0f 00 00       	push   $0xfff
f0112724:	ff 75 bc             	pushl  -0x44(%ebp)
f0112727:	6a 01                	push   $0x1
f0112729:	68 00 20 00 00       	push   $0x2000
f011272e:	68 00 f0 bf 02       	push   $0x2bff000
f0112733:	68 00 10 90 02       	push   $0x2901000
f0112738:	ff 75 d4             	pushl  -0x2c(%ebp)
f011273b:	e8 a4 45 00 00       	call   f0116ce4 <CCP>
f0112740:	83 c4 30             	add    $0x30,%esp
f0112743:	83 f8 01             	cmp    $0x1,%eax
f0112746:	74 21                	je     f0112769 <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112748:	83 ec 04             	sub    $0x4,%esp
f011274b:	68 28 72 13 f0       	push   $0xf0137228
f0112750:	68 73 01 00 00       	push   $0x173
f0112755:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011275a:	e8 5f dc fe ff       	call   f01003be <_warn>
f011275f:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112762:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112769:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011276d:	74 04                	je     f0112773 <test_cut_paste_pages+0x49d>
f011276f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112773:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f011277a:	83 ec 04             	sub    $0x4,%esp
f011277d:	6a 00                	push   $0x0
f011277f:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112784:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112787:	e8 e9 3f 00 00       	call   f0116775 <CB>
f011278c:	83 c4 10             	add    $0x10,%esp
f011278f:	85 c0                	test   %eax,%eax
f0112791:	74 6b                	je     f01127fe <test_cut_paste_pages+0x528>
f0112793:	83 ec 04             	sub    $0x4,%esp
f0112796:	6a 00                	push   $0x0
f0112798:	68 ff 0f c0 02       	push   $0x2c00fff
f011279d:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127a0:	e8 d0 3f 00 00       	call   f0116775 <CB>
f01127a5:	83 c4 10             	add    $0x10,%esp
f01127a8:	85 c0                	test   %eax,%eax
f01127aa:	74 52                	je     f01127fe <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f01127ac:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f01127b3:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f01127ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01127bd:	8a 00                	mov    (%eax),%al
f01127bf:	3c 79                	cmp    $0x79,%al
f01127c1:	75 09                	jne    f01127cc <test_cut_paste_pages+0x4f6>
f01127c3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01127c6:	8a 00                	mov    (%eax),%al
f01127c8:	3c 63                	cmp    $0x63,%al
f01127ca:	74 21                	je     f01127ed <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01127cc:	83 ec 04             	sub    $0x4,%esp
f01127cf:	68 74 72 13 f0       	push   $0xf0137274
f01127d4:	68 7f 01 00 00       	push   $0x17f
f01127d9:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01127de:	e8 db db fe ff       	call   f01003be <_warn>
f01127e3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01127e6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01127ed:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127f1:	74 04                	je     f01127f7 <test_cut_paste_pages+0x521>
f01127f3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01127f7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01127fe:	83 ec 0c             	sub    $0xc,%esp
f0112801:	68 ad 72 13 f0       	push   $0xf01372ad
f0112806:	e8 26 e6 fe ff       	call   f0100e31 <cprintf>
f011280b:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f011280e:	83 ec 0c             	sub    $0xc,%esp
f0112811:	68 bc 72 13 f0       	push   $0xf01372bc
f0112816:	e8 16 e6 fe ff       	call   f0100e31 <cprintf>
f011281b:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f011281e:	83 ec 04             	sub    $0x4,%esp
f0112821:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112827:	50                   	push   %eax
f0112828:	68 e5 72 13 f0       	push   $0xf01372e5
f011282d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112833:	50                   	push   %eax
f0112834:	e8 15 cb 01 00       	call   f012f34e <strcconcat>
f0112839:	83 c4 10             	add    $0x10,%esp
f011283c:	83 ec 0c             	sub    $0xc,%esp
f011283f:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112845:	50                   	push   %eax
f0112846:	e8 78 f3 fe ff       	call   f0101bc3 <execute_command>
f011284b:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f011284e:	83 ec 04             	sub    $0x4,%esp
f0112851:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112857:	50                   	push   %eax
f0112858:	68 f0 72 13 f0       	push   $0xf01372f0
f011285d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112863:	50                   	push   %eax
f0112864:	e8 e5 ca 01 00       	call   f012f34e <strcconcat>
f0112869:	83 c4 10             	add    $0x10,%esp
f011286c:	83 ec 0c             	sub    $0xc,%esp
f011286f:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112875:	50                   	push   %eax
f0112876:	e8 48 f3 fe ff       	call   f0101bc3 <execute_command>
f011287b:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f011287e:	83 ec 04             	sub    $0x4,%esp
f0112881:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112887:	50                   	push   %eax
f0112888:	68 fb 72 13 f0       	push   $0xf01372fb
f011288d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112893:	50                   	push   %eax
f0112894:	e8 b5 ca 01 00       	call   f012f34e <strcconcat>
f0112899:	83 c4 10             	add    $0x10,%esp
f011289c:	83 ec 0c             	sub    $0xc,%esp
f011289f:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01128a5:	50                   	push   %eax
f01128a6:	e8 18 f3 fe ff       	call   f0101bc3 <execute_command>
f01128ab:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f01128ae:	83 ec 04             	sub    $0x4,%esp
f01128b1:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01128b7:	50                   	push   %eax
f01128b8:	68 06 73 13 f0       	push   $0xf0137306
f01128bd:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01128c3:	50                   	push   %eax
f01128c4:	e8 85 ca 01 00       	call   f012f34e <strcconcat>
f01128c9:	83 c4 10             	add    $0x10,%esp
f01128cc:	83 ec 0c             	sub    $0xc,%esp
f01128cf:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01128d5:	50                   	push   %eax
f01128d6:	e8 e8 f2 fe ff       	call   f0101bc3 <execute_command>
f01128db:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f01128de:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01128e5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128e8:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01128eb:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01128f2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128f5:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01128f8:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01128ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112902:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112905:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f011290c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011290f:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112912:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112919:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011291c:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f011291f:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112926:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112929:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f011292c:	83 ec 08             	sub    $0x8,%esp
f011292f:	68 00 00 c0 01       	push   $0x1c00000
f0112934:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112937:	e8 db 42 00 00       	call   f0116c17 <GP>
f011293c:	83 c4 10             	add    $0x10,%esp
f011293f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112942:	83 ec 08             	sub    $0x8,%esp
f0112945:	68 00 00 40 01       	push   $0x1400000
f011294a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011294d:	e8 c5 42 00 00       	call   f0116c17 <GP>
f0112952:	83 c4 10             	add    $0x10,%esp
f0112955:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112958:	e8 23 a0 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011295d:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0112960:	6a 01                	push   $0x1
f0112962:	68 00 00 40 01       	push   $0x1400000
f0112967:	68 00 00 c0 01       	push   $0x1c00000
f011296c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011296f:	e8 bb 61 ff ff       	call   f0108b2f <cut_paste_pages>
f0112974:	83 c4 10             	add    $0x10,%esp
f0112977:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011297a:	e8 01 a0 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011297f:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112982:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112986:	75 08                	jne    f0112990 <test_cut_paste_pages+0x6ba>
f0112988:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011298b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011298e:	74 2b                	je     f01129bb <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112990:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112993:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112996:	83 ec 0c             	sub    $0xc,%esp
f0112999:	50                   	push   %eax
f011299a:	ff 75 b4             	pushl  -0x4c(%ebp)
f011299d:	68 14 73 13 f0       	push   $0xf0137314
f01129a2:	68 a2 01 00 00       	push   $0x1a2
f01129a7:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01129ac:	e8 0d da fe ff       	call   f01003be <_warn>
f01129b1:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01129b4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01129bb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129bf:	74 04                	je     f01129c5 <test_cut_paste_pages+0x6ef>
f01129c1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01129c5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f01129cc:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f01129d3:	83 ec 08             	sub    $0x8,%esp
f01129d6:	6a 00                	push   $0x0
f01129d8:	68 ff 0f 00 00       	push   $0xfff
f01129dd:	ff 75 a4             	pushl  -0x5c(%ebp)
f01129e0:	68 ff 0f 00 00       	push   $0xfff
f01129e5:	ff 75 a0             	pushl  -0x60(%ebp)
f01129e8:	6a 01                	push   $0x1
f01129ea:	68 00 10 00 00       	push   $0x1000
f01129ef:	68 00 00 40 01       	push   $0x1400000
f01129f4:	68 00 00 c0 01       	push   $0x1c00000
f01129f9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129fc:	e8 e3 42 00 00       	call   f0116ce4 <CCP>
f0112a01:	83 c4 30             	add    $0x30,%esp
f0112a04:	83 f8 01             	cmp    $0x1,%eax
f0112a07:	74 28                	je     f0112a31 <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112a09:	83 ec 04             	sub    $0x4,%esp
f0112a0c:	68 28 72 13 f0       	push   $0xf0137228
f0112a11:	68 ab 01 00 00       	push   $0x1ab
f0112a16:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112a1b:	e8 9e d9 fe ff       	call   f01003be <_warn>
f0112a20:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112a23:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112a2a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112a31:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a35:	74 04                	je     f0112a3b <test_cut_paste_pages+0x765>
f0112a37:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112a3b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112a42:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112a46:	0f 84 92 00 00 00    	je     f0112ade <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f0112a4c:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112a53:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112a5a:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112a61:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112a68:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112a6f:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112a76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112a79:	8a 00                	mov    (%eax),%al
f0112a7b:	3c 61                	cmp    $0x61,%al
f0112a7d:	75 2d                	jne    f0112aac <test_cut_paste_pages+0x7d6>
f0112a7f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112a82:	8a 00                	mov    (%eax),%al
f0112a84:	3c 78                	cmp    $0x78,%al
f0112a86:	75 24                	jne    f0112aac <test_cut_paste_pages+0x7d6>
f0112a88:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112a8b:	8a 00                	mov    (%eax),%al
f0112a8d:	3c 62                	cmp    $0x62,%al
f0112a8f:	75 1b                	jne    f0112aac <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112a91:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112a94:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112a96:	3c 79                	cmp    $0x79,%al
f0112a98:	75 12                	jne    f0112aac <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112a9a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a9d:	8a 00                	mov    (%eax),%al
f0112a9f:	3c 63                	cmp    $0x63,%al
f0112aa1:	75 09                	jne    f0112aac <test_cut_paste_pages+0x7d6>
f0112aa3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112aa6:	8a 00                	mov    (%eax),%al
f0112aa8:	3c 7a                	cmp    $0x7a,%al
f0112aaa:	74 21                	je     f0112acd <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112aac:	83 ec 04             	sub    $0x4,%esp
f0112aaf:	68 74 72 13 f0       	push   $0xf0137274
f0112ab4:	68 bd 01 00 00       	push   $0x1bd
f0112ab9:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112abe:	e8 fb d8 fe ff       	call   f01003be <_warn>
f0112ac3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ac6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112acd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ad1:	74 04                	je     f0112ad7 <test_cut_paste_pages+0x801>
f0112ad3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ad7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112ade:	e8 9d 9e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0112ae3:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112ae6:	6a 03                	push   $0x3
f0112ae8:	68 00 f0 bf 01       	push   $0x1bff000
f0112aed:	68 00 00 40 01       	push   $0x1400000
f0112af2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112af5:	e8 35 60 ff ff       	call   f0108b2f <cut_paste_pages>
f0112afa:	83 c4 10             	add    $0x10,%esp
f0112afd:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112b00:	e8 7b 9e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0112b05:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112b08:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112b0c:	75 08                	jne    f0112b16 <test_cut_paste_pages+0x840>
f0112b0e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b11:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112b14:	74 2b                	je     f0112b41 <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112b16:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b19:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112b1c:	83 ec 0c             	sub    $0xc,%esp
f0112b1f:	50                   	push   %eax
f0112b20:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112b23:	68 14 73 13 f0       	push   $0xf0137314
f0112b28:	68 cc 01 00 00       	push   $0x1cc
f0112b2d:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112b32:	e8 87 d8 fe ff       	call   f01003be <_warn>
f0112b37:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112b3a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112b41:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b45:	74 04                	je     f0112b4b <test_cut_paste_pages+0x875>
f0112b47:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112b4b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112b52:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112b59:	83 ec 04             	sub    $0x4,%esp
f0112b5c:	6a 00                	push   $0x0
f0112b5e:	68 00 00 40 01       	push   $0x1400000
f0112b63:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b66:	e8 0a 3c 00 00       	call   f0116775 <CB>
f0112b6b:	83 c4 10             	add    $0x10,%esp
f0112b6e:	83 f8 01             	cmp    $0x1,%eax
f0112b71:	0f 85 80 00 00 00    	jne    f0112bf7 <test_cut_paste_pages+0x921>
f0112b77:	83 ec 04             	sub    $0x4,%esp
f0112b7a:	6a 00                	push   $0x0
f0112b7c:	68 00 10 40 01       	push   $0x1401000
f0112b81:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b84:	e8 ec 3b 00 00       	call   f0116775 <CB>
f0112b89:	83 c4 10             	add    $0x10,%esp
f0112b8c:	83 f8 01             	cmp    $0x1,%eax
f0112b8f:	75 66                	jne    f0112bf7 <test_cut_paste_pages+0x921>
f0112b91:	83 ec 04             	sub    $0x4,%esp
f0112b94:	6a 00                	push   $0x0
f0112b96:	68 00 20 40 01       	push   $0x1402000
f0112b9b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b9e:	e8 d2 3b 00 00       	call   f0116775 <CB>
f0112ba3:	83 c4 10             	add    $0x10,%esp
f0112ba6:	83 f8 01             	cmp    $0x1,%eax
f0112ba9:	75 4c                	jne    f0112bf7 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112bab:	83 ec 04             	sub    $0x4,%esp
f0112bae:	6a 00                	push   $0x0
f0112bb0:	68 00 f0 bf 01       	push   $0x1bff000
f0112bb5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bb8:	e8 b8 3b 00 00       	call   f0116775 <CB>
f0112bbd:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112bc0:	85 c0                	test   %eax,%eax
f0112bc2:	75 33                	jne    f0112bf7 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112bc4:	83 ec 04             	sub    $0x4,%esp
f0112bc7:	6a 00                	push   $0x0
f0112bc9:	68 00 00 c0 01       	push   $0x1c00000
f0112bce:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bd1:	e8 9f 3b 00 00       	call   f0116775 <CB>
f0112bd6:	83 c4 10             	add    $0x10,%esp
f0112bd9:	83 f8 01             	cmp    $0x1,%eax
f0112bdc:	75 19                	jne    f0112bf7 <test_cut_paste_pages+0x921>
f0112bde:	83 ec 04             	sub    $0x4,%esp
f0112be1:	6a 00                	push   $0x0
f0112be3:	68 00 10 c0 01       	push   $0x1c01000
f0112be8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112beb:	e8 85 3b 00 00       	call   f0116775 <CB>
f0112bf0:	83 c4 10             	add    $0x10,%esp
f0112bf3:	85 c0                	test   %eax,%eax
f0112bf5:	74 28                	je     f0112c1f <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112bf7:	83 ec 04             	sub    $0x4,%esp
f0112bfa:	68 74 73 13 f0       	push   $0xf0137374
f0112bff:	68 d5 01 00 00       	push   $0x1d5
f0112c04:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112c09:	e8 b0 d7 fe ff       	call   f01003be <_warn>
f0112c0e:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112c11:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112c18:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112c1f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c23:	74 04                	je     f0112c29 <test_cut_paste_pages+0x953>
f0112c25:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112c29:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112c30:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112c34:	0f 84 99 00 00 00    	je     f0112cd3 <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f0112c3a:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112c41:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112c48:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112c4f:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112c56:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112c5d:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c64:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c67:	8a 00                	mov    (%eax),%al
f0112c69:	3c 61                	cmp    $0x61,%al
f0112c6b:	75 2d                	jne    f0112c9a <test_cut_paste_pages+0x9c4>
f0112c6d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112c70:	8a 00                	mov    (%eax),%al
f0112c72:	3c 78                	cmp    $0x78,%al
f0112c74:	75 24                	jne    f0112c9a <test_cut_paste_pages+0x9c4>
f0112c76:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112c79:	8a 00                	mov    (%eax),%al
f0112c7b:	3c 62                	cmp    $0x62,%al
f0112c7d:	75 1b                	jne    f0112c9a <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c7f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112c82:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c84:	3c 79                	cmp    $0x79,%al
f0112c86:	75 12                	jne    f0112c9a <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c88:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c8b:	8a 00                	mov    (%eax),%al
f0112c8d:	3c 63                	cmp    $0x63,%al
f0112c8f:	75 09                	jne    f0112c9a <test_cut_paste_pages+0x9c4>
f0112c91:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112c94:	8a 00                	mov    (%eax),%al
f0112c96:	3c 7a                	cmp    $0x7a,%al
f0112c98:	74 28                	je     f0112cc2 <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f0112c9a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112ca1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112ca8:	83 ec 04             	sub    $0x4,%esp
f0112cab:	68 74 72 13 f0       	push   $0xf0137274
f0112cb0:	68 e9 01 00 00       	push   $0x1e9
f0112cb5:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0112cba:	e8 ff d6 fe ff       	call   f01003be <_warn>
f0112cbf:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112cc2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112cc6:	74 04                	je     f0112ccc <test_cut_paste_pages+0x9f6>
f0112cc8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ccc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112cd3:	83 ec 0c             	sub    $0xc,%esp
f0112cd6:	68 ad 73 13 f0       	push   $0xf01373ad
f0112cdb:	e8 51 e1 fe ff       	call   f0100e31 <cprintf>
f0112ce0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112ce3:	83 ec 08             	sub    $0x8,%esp
f0112ce6:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112ce9:	68 bc 73 13 f0       	push   $0xf01373bc
f0112cee:	e8 3e e1 fe ff       	call   f0100e31 <cprintf>
f0112cf3:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112cf6:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112cfa:	75 10                	jne    f0112d0c <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112cfc:	83 ec 0c             	sub    $0xc,%esp
f0112cff:	68 f0 73 13 f0       	push   $0xf01373f0
f0112d04:	e8 28 e1 fe ff       	call   f0100e31 <cprintf>
f0112d09:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112d0c:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f0112d11:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112d14:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112d17:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112d1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112d1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112d22:	5b                   	pop    %ebx
f0112d23:	5e                   	pop    %esi
f0112d24:	5f                   	pop    %edi
f0112d25:	5d                   	pop    %ebp
f0112d26:	c3                   	ret    

f0112d27 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112d27:	55                   	push   %ebp
f0112d28:	89 e5                	mov    %esp,%ebp
f0112d2a:	57                   	push   %edi
f0112d2b:	56                   	push   %esi
f0112d2c:	53                   	push   %ebx
f0112d2d:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112d33:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112d39:	bb 30 74 13 f0       	mov    $0xf0137430,%ebx
f0112d3e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d43:	89 c7                	mov    %eax,%edi
f0112d45:	89 de                	mov    %ebx,%esi
f0112d47:	89 d1                	mov    %edx,%ecx
f0112d49:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d4b:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112d51:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112d56:	b0 00                	mov    $0x0,%al
f0112d58:	89 d7                	mov    %edx,%edi
f0112d5a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112d5c:	6a 00                	push   $0x0
f0112d5e:	6a 0a                	push   $0xa
f0112d60:	6a 14                	push   $0x14
f0112d62:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112d68:	50                   	push   %eax
f0112d69:	e8 ff 5e ff ff       	call   f0108c6d <env_create>
f0112d6e:	83 c4 10             	add    $0x10,%esp
f0112d71:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112d74:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d77:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112d7d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112d80:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d83:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112d89:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112d8f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112d95:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112d98:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112d9f:	75 70 20 
f0112da2:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112da9:	00 00 00 
f0112dac:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112db2:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112db7:	b8 00 00 00 00       	mov    $0x0,%eax
f0112dbc:	89 d7                	mov    %edx,%edi
f0112dbe:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112dc0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112dc3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112dc6:	83 ec 08             	sub    $0x8,%esp
f0112dc9:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112dcf:	52                   	push   %edx
f0112dd0:	50                   	push   %eax
f0112dd1:	e8 80 c4 01 00       	call   f012f256 <ltostr>
f0112dd6:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112dd9:	83 ec 04             	sub    $0x4,%esp
f0112ddc:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112de2:	50                   	push   %eax
f0112de3:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112de9:	50                   	push   %eax
f0112dea:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112df0:	50                   	push   %eax
f0112df1:	e8 58 c5 01 00       	call   f012f34e <strcconcat>
f0112df6:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112df9:	83 ec 0c             	sub    $0xc,%esp
f0112dfc:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112dff:	e8 ac 3e 00 00       	call   f0116cb0 <ClearUserSpace>
f0112e04:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112e07:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112e0e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112e15:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112e1c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112e23:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112e2a:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112e31:	83 ec 0c             	sub    $0xc,%esp
f0112e34:	68 64 74 13 f0       	push   $0xf0137464
f0112e39:	e8 f3 df fe ff       	call   f0100e31 <cprintf>
f0112e3e:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112e41:	83 ec 04             	sub    $0x4,%esp
f0112e44:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e4a:	50                   	push   %eax
f0112e4b:	68 9a 74 13 f0       	push   $0xf013749a
f0112e50:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e56:	50                   	push   %eax
f0112e57:	e8 f2 c4 01 00       	call   f012f34e <strcconcat>
f0112e5c:	83 c4 10             	add    $0x10,%esp
f0112e5f:	83 ec 0c             	sub    $0xc,%esp
f0112e62:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e68:	50                   	push   %eax
f0112e69:	e8 55 ed fe ff       	call   f0101bc3 <execute_command>
f0112e6e:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112e71:	83 ec 04             	sub    $0x4,%esp
f0112e74:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e7a:	50                   	push   %eax
f0112e7b:	68 9f 74 13 f0       	push   $0xf013749f
f0112e80:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e86:	50                   	push   %eax
f0112e87:	e8 c2 c4 01 00       	call   f012f34e <strcconcat>
f0112e8c:	83 c4 10             	add    $0x10,%esp
f0112e8f:	83 ec 0c             	sub    $0xc,%esp
f0112e92:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e98:	50                   	push   %eax
f0112e99:	e8 25 ed fe ff       	call   f0101bc3 <execute_command>
f0112e9e:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112ea1:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112ea7:	bb a5 77 13 f0       	mov    $0xf01377a5,%ebx
f0112eac:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112eb1:	89 c7                	mov    %eax,%edi
f0112eb3:	89 de                	mov    %ebx,%esi
f0112eb5:	89 d1                	mov    %edx,%ecx
f0112eb7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112eb9:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112ebf:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ec4:	b0 00                	mov    $0x0,%al
f0112ec6:	89 d7                	mov    %edx,%edi
f0112ec8:	f3 aa                	rep stos %al,%es:(%edi)
f0112eca:	83 ec 0c             	sub    $0xc,%esp
f0112ecd:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112ed3:	50                   	push   %eax
f0112ed4:	e8 ea ec fe ff       	call   f0101bc3 <execute_command>
f0112ed9:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112edc:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112ee2:	bb 09 78 13 f0       	mov    $0xf0137809,%ebx
f0112ee7:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112eec:	89 c7                	mov    %eax,%edi
f0112eee:	89 de                	mov    %ebx,%esi
f0112ef0:	89 d1                	mov    %edx,%ecx
f0112ef2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ef4:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112efa:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112eff:	b0 00                	mov    $0x0,%al
f0112f01:	89 d7                	mov    %edx,%edi
f0112f03:	f3 aa                	rep stos %al,%es:(%edi)
f0112f05:	83 ec 0c             	sub    $0xc,%esp
f0112f08:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f0e:	50                   	push   %eax
f0112f0f:	e8 af ec fe ff       	call   f0101bc3 <execute_command>
f0112f14:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112f17:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f1d:	bb 6d 78 13 f0       	mov    $0xf013786d,%ebx
f0112f22:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f27:	89 c7                	mov    %eax,%edi
f0112f29:	89 de                	mov    %ebx,%esi
f0112f2b:	89 d1                	mov    %edx,%ecx
f0112f2d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f2f:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112f35:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f3a:	b0 00                	mov    $0x0,%al
f0112f3c:	89 d7                	mov    %edx,%edi
f0112f3e:	f3 aa                	rep stos %al,%es:(%edi)
f0112f40:	83 ec 0c             	sub    $0xc,%esp
f0112f43:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f49:	50                   	push   %eax
f0112f4a:	e8 74 ec fe ff       	call   f0101bc3 <execute_command>
f0112f4f:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112f52:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f58:	bb d1 78 13 f0       	mov    $0xf01378d1,%ebx
f0112f5d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f62:	89 c7                	mov    %eax,%edi
f0112f64:	89 de                	mov    %ebx,%esi
f0112f66:	89 d1                	mov    %edx,%ecx
f0112f68:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f6a:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112f70:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f75:	b0 00                	mov    $0x0,%al
f0112f77:	89 d7                	mov    %edx,%edi
f0112f79:	f3 aa                	rep stos %al,%es:(%edi)
f0112f7b:	83 ec 0c             	sub    $0xc,%esp
f0112f7e:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f84:	50                   	push   %eax
f0112f85:	e8 39 ec fe ff       	call   f0101bc3 <execute_command>
f0112f8a:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112f8d:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112f93:	bb 35 79 13 f0       	mov    $0xf0137935,%ebx
f0112f98:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f9d:	89 c7                	mov    %eax,%edi
f0112f9f:	89 de                	mov    %ebx,%esi
f0112fa1:	89 d1                	mov    %edx,%ecx
f0112fa3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fa5:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112fab:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fb0:	b0 00                	mov    $0x0,%al
f0112fb2:	89 d7                	mov    %edx,%edi
f0112fb4:	f3 aa                	rep stos %al,%es:(%edi)
f0112fb6:	83 ec 0c             	sub    $0xc,%esp
f0112fb9:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112fbf:	50                   	push   %eax
f0112fc0:	e8 fe eb fe ff       	call   f0101bc3 <execute_command>
f0112fc5:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112fc8:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112fce:	bb 99 79 13 f0       	mov    $0xf0137999,%ebx
f0112fd3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fd8:	89 c7                	mov    %eax,%edi
f0112fda:	89 de                	mov    %ebx,%esi
f0112fdc:	89 d1                	mov    %edx,%ecx
f0112fde:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fe0:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112fe6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112feb:	b0 00                	mov    $0x0,%al
f0112fed:	89 d7                	mov    %edx,%edi
f0112fef:	f3 aa                	rep stos %al,%es:(%edi)
f0112ff1:	83 ec 0c             	sub    $0xc,%esp
f0112ff4:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112ffa:	50                   	push   %eax
f0112ffb:	e8 c3 eb fe ff       	call   f0101bc3 <execute_command>
f0113000:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0113003:	83 ec 04             	sub    $0x4,%esp
f0113006:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011300c:	50                   	push   %eax
f011300d:	68 a7 74 13 f0       	push   $0xf01374a7
f0113012:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113018:	50                   	push   %eax
f0113019:	e8 30 c3 01 00       	call   f012f34e <strcconcat>
f011301e:	83 c4 10             	add    $0x10,%esp
f0113021:	83 ec 0c             	sub    $0xc,%esp
f0113024:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011302a:	50                   	push   %eax
f011302b:	e8 93 eb fe ff       	call   f0101bc3 <execute_command>
f0113030:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0113033:	83 ec 04             	sub    $0x4,%esp
f0113036:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011303c:	50                   	push   %eax
f011303d:	68 b1 74 13 f0       	push   $0xf01374b1
f0113042:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113048:	50                   	push   %eax
f0113049:	e8 00 c3 01 00       	call   f012f34e <strcconcat>
f011304e:	83 c4 10             	add    $0x10,%esp
f0113051:	83 ec 0c             	sub    $0xc,%esp
f0113054:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011305a:	50                   	push   %eax
f011305b:	e8 63 eb fe ff       	call   f0101bc3 <execute_command>
f0113060:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0113063:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113069:	bb fd 79 13 f0       	mov    $0xf01379fd,%ebx
f011306e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113073:	89 c7                	mov    %eax,%edi
f0113075:	89 de                	mov    %ebx,%esi
f0113077:	89 d1                	mov    %edx,%ecx
f0113079:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011307b:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113081:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113086:	b0 00                	mov    $0x0,%al
f0113088:	89 d7                	mov    %edx,%edi
f011308a:	f3 aa                	rep stos %al,%es:(%edi)
f011308c:	83 ec 0c             	sub    $0xc,%esp
f011308f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113095:	50                   	push   %eax
f0113096:	e8 28 eb fe ff       	call   f0101bc3 <execute_command>
f011309b:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f011309e:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01130a4:	bb 61 7a 13 f0       	mov    $0xf0137a61,%ebx
f01130a9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130ae:	89 c7                	mov    %eax,%edi
f01130b0:	89 de                	mov    %ebx,%esi
f01130b2:	89 d1                	mov    %edx,%ecx
f01130b4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130b6:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01130bc:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130c1:	b0 00                	mov    $0x0,%al
f01130c3:	89 d7                	mov    %edx,%edi
f01130c5:	f3 aa                	rep stos %al,%es:(%edi)
f01130c7:	83 ec 0c             	sub    $0xc,%esp
f01130ca:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01130d0:	50                   	push   %eax
f01130d1:	e8 ed ea fe ff       	call   f0101bc3 <execute_command>
f01130d6:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f01130d9:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01130df:	bb c5 7a 13 f0       	mov    $0xf0137ac5,%ebx
f01130e4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130e9:	89 c7                	mov    %eax,%edi
f01130eb:	89 de                	mov    %ebx,%esi
f01130ed:	89 d1                	mov    %edx,%ecx
f01130ef:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130f1:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01130f7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130fc:	b0 00                	mov    $0x0,%al
f01130fe:	89 d7                	mov    %edx,%edi
f0113100:	f3 aa                	rep stos %al,%es:(%edi)
f0113102:	83 ec 0c             	sub    $0xc,%esp
f0113105:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011310b:	50                   	push   %eax
f011310c:	e8 b2 ea fe ff       	call   f0101bc3 <execute_command>
f0113111:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0113114:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011311b:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0113122:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0113129:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0113130:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0113137:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f011313e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0113145:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f011314c:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0113153:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f011315a:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0113161:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0113168:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011316b:	8a 00                	mov    (%eax),%al
f011316d:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0113173:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113176:	8a 00                	mov    (%eax),%al
f0113178:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f011317e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113181:	8a 00                	mov    (%eax),%al
f0113183:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113189:	e8 f2 97 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011318e:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0113191:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113194:	89 d0                	mov    %edx,%eax
f0113196:	01 c0                	add    %eax,%eax
f0113198:	01 d0                	add    %edx,%eax
f011319a:	01 c0                	add    %eax,%eax
f011319c:	50                   	push   %eax
f011319d:	68 00 00 10 00       	push   $0x100000
f01131a2:	6a 00                	push   $0x0
f01131a4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01131a7:	e8 9d 59 ff ff       	call   f0108b49 <copy_paste_chunk>
f01131ac:	83 c4 10             	add    $0x10,%esp
f01131af:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01131b2:	e8 c9 97 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01131b7:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01131ba:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01131c1:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f01131c5:	75 08                	jne    f01131cf <test_copy_paste_chunk+0x4a8>
f01131c7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131ca:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01131cd:	74 2b                	je     f01131fa <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01131cf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131d2:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01131d5:	83 ec 0c             	sub    $0xc,%esp
f01131d8:	50                   	push   %eax
f01131d9:	ff 75 88             	pushl  -0x78(%ebp)
f01131dc:	68 c0 74 13 f0       	push   $0xf01374c0
f01131e1:	68 3c 02 00 00       	push   $0x23c
f01131e6:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01131eb:	e8 ce d1 fe ff       	call   f01003be <_warn>
f01131f0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01131f3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01131fa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01131fe:	74 04                	je     f0113204 <test_copy_paste_chunk+0x4dd>
f0113200:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113204:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f011320b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011320e:	8a 00                	mov    (%eax),%al
f0113210:	3c 61                	cmp    $0x61,%al
f0113212:	75 75                	jne    f0113289 <test_copy_paste_chunk+0x562>
f0113214:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113217:	8a 00                	mov    (%eax),%al
f0113219:	3c 78                	cmp    $0x78,%al
f011321b:	75 6c                	jne    f0113289 <test_copy_paste_chunk+0x562>
f011321d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113220:	8a 00                	mov    (%eax),%al
f0113222:	3c 62                	cmp    $0x62,%al
f0113224:	75 63                	jne    f0113289 <test_copy_paste_chunk+0x562>
f0113226:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113229:	8a 00                	mov    (%eax),%al
f011322b:	3c 79                	cmp    $0x79,%al
f011322d:	75 5a                	jne    f0113289 <test_copy_paste_chunk+0x562>
f011322f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113232:	8a 00                	mov    (%eax),%al
f0113234:	3c 63                	cmp    $0x63,%al
f0113236:	75 51                	jne    f0113289 <test_copy_paste_chunk+0x562>
f0113238:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011323b:	8a 00                	mov    (%eax),%al
f011323d:	3c 7a                	cmp    $0x7a,%al
f011323f:	75 48                	jne    f0113289 <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0113241:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113244:	8a 00                	mov    (%eax),%al
f0113246:	3c 64                	cmp    $0x64,%al
f0113248:	75 3f                	jne    f0113289 <test_copy_paste_chunk+0x562>
f011324a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011324d:	8a 10                	mov    (%eax),%dl
f011324f:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0113255:	38 c2                	cmp    %al,%dl
f0113257:	75 30                	jne    f0113289 <test_copy_paste_chunk+0x562>
f0113259:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011325c:	8a 00                	mov    (%eax),%al
f011325e:	3c 65                	cmp    $0x65,%al
f0113260:	75 27                	jne    f0113289 <test_copy_paste_chunk+0x562>
f0113262:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113265:	8a 10                	mov    (%eax),%dl
f0113267:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f011326d:	38 c2                	cmp    %al,%dl
f011326f:	75 18                	jne    f0113289 <test_copy_paste_chunk+0x562>
f0113271:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113274:	8a 00                	mov    (%eax),%al
f0113276:	3c 66                	cmp    $0x66,%al
f0113278:	75 0f                	jne    f0113289 <test_copy_paste_chunk+0x562>
f011327a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011327d:	8a 10                	mov    (%eax),%dl
f011327f:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113285:	38 c2                	cmp    %al,%dl
f0113287:	74 21                	je     f01132aa <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113289:	83 ec 04             	sub    $0x4,%esp
f011328c:	68 24 75 13 f0       	push   $0xf0137524
f0113291:	68 45 02 00 00       	push   $0x245
f0113296:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011329b:	e8 1e d1 fe ff       	call   f01003be <_warn>
f01132a0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132a3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01132aa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01132ae:	74 04                	je     f01132b4 <test_copy_paste_chunk+0x58d>
f01132b0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01132b4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f01132bb:	83 ec 0c             	sub    $0xc,%esp
f01132be:	68 5e 75 13 f0       	push   $0xf013755e
f01132c3:	e8 69 db fe ff       	call   f0100e31 <cprintf>
f01132c8:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f01132cb:	83 ec 0c             	sub    $0xc,%esp
f01132ce:	68 70 75 13 f0       	push   $0xf0137570
f01132d3:	e8 59 db fe ff       	call   f0100e31 <cprintf>
f01132d8:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f01132db:	83 ec 04             	sub    $0x4,%esp
f01132de:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01132e4:	50                   	push   %eax
f01132e5:	68 a6 75 13 f0       	push   $0xf01375a6
f01132ea:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01132f0:	50                   	push   %eax
f01132f1:	e8 58 c0 01 00       	call   f012f34e <strcconcat>
f01132f6:	83 c4 10             	add    $0x10,%esp
f01132f9:	83 ec 0c             	sub    $0xc,%esp
f01132fc:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113302:	50                   	push   %eax
f0113303:	e8 bb e8 fe ff       	call   f0101bc3 <execute_command>
f0113308:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f011330b:	83 ec 04             	sub    $0x4,%esp
f011330e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113314:	50                   	push   %eax
f0113315:	68 b0 75 13 f0       	push   $0xf01375b0
f011331a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113320:	50                   	push   %eax
f0113321:	e8 28 c0 01 00       	call   f012f34e <strcconcat>
f0113326:	83 c4 10             	add    $0x10,%esp
f0113329:	83 ec 0c             	sub    $0xc,%esp
f011332c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113332:	50                   	push   %eax
f0113333:	e8 8b e8 fe ff       	call   f0101bc3 <execute_command>
f0113338:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f011333b:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113341:	bb 29 7b 13 f0       	mov    $0xf0137b29,%ebx
f0113346:	ba 0f 00 00 00       	mov    $0xf,%edx
f011334b:	89 c7                	mov    %eax,%edi
f011334d:	89 de                	mov    %ebx,%esi
f011334f:	89 d1                	mov    %edx,%ecx
f0113351:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113353:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113359:	b9 55 00 00 00       	mov    $0x55,%ecx
f011335e:	b0 00                	mov    $0x0,%al
f0113360:	89 d7                	mov    %edx,%edi
f0113362:	f3 aa                	rep stos %al,%es:(%edi)
f0113364:	83 ec 0c             	sub    $0xc,%esp
f0113367:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011336d:	50                   	push   %eax
f011336e:	e8 50 e8 fe ff       	call   f0101bc3 <execute_command>
f0113373:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0113376:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011337c:	bb 8d 7b 13 f0       	mov    $0xf0137b8d,%ebx
f0113381:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113386:	89 c7                	mov    %eax,%edi
f0113388:	89 de                	mov    %ebx,%esi
f011338a:	89 d1                	mov    %edx,%ecx
f011338c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011338e:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0113394:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113399:	b0 00                	mov    $0x0,%al
f011339b:	89 d7                	mov    %edx,%edi
f011339d:	f3 aa                	rep stos %al,%es:(%edi)
f011339f:	83 ec 0c             	sub    $0xc,%esp
f01133a2:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01133a8:	50                   	push   %eax
f01133a9:	e8 15 e8 fe ff       	call   f0101bc3 <execute_command>
f01133ae:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f01133b1:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01133b7:	bb f1 7b 13 f0       	mov    $0xf0137bf1,%ebx
f01133bc:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133c1:	89 c7                	mov    %eax,%edi
f01133c3:	89 de                	mov    %ebx,%esi
f01133c5:	89 d1                	mov    %edx,%ecx
f01133c7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133c9:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01133cf:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133d4:	b0 00                	mov    $0x0,%al
f01133d6:	89 d7                	mov    %edx,%edi
f01133d8:	f3 aa                	rep stos %al,%es:(%edi)
f01133da:	83 ec 0c             	sub    $0xc,%esp
f01133dd:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01133e3:	50                   	push   %eax
f01133e4:	e8 da e7 fe ff       	call   f0101bc3 <execute_command>
f01133e9:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f01133ec:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01133f2:	bb 55 7c 13 f0       	mov    $0xf0137c55,%ebx
f01133f7:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133fc:	89 c7                	mov    %eax,%edi
f01133fe:	89 de                	mov    %ebx,%esi
f0113400:	89 d1                	mov    %edx,%ecx
f0113402:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113404:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011340a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011340f:	b0 00                	mov    $0x0,%al
f0113411:	89 d7                	mov    %edx,%edi
f0113413:	f3 aa                	rep stos %al,%es:(%edi)
f0113415:	83 ec 0c             	sub    $0xc,%esp
f0113418:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011341e:	50                   	push   %eax
f011341f:	e8 9f e7 fe ff       	call   f0101bc3 <execute_command>
f0113424:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0113427:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011342d:	bb b9 7c 13 f0       	mov    $0xf0137cb9,%ebx
f0113432:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113437:	89 c7                	mov    %eax,%edi
f0113439:	89 de                	mov    %ebx,%esi
f011343b:	89 d1                	mov    %edx,%ecx
f011343d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011343f:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113445:	b9 55 00 00 00       	mov    $0x55,%ecx
f011344a:	b0 00                	mov    $0x0,%al
f011344c:	89 d7                	mov    %edx,%edi
f011344e:	f3 aa                	rep stos %al,%es:(%edi)
f0113450:	83 ec 0c             	sub    $0xc,%esp
f0113453:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113459:	50                   	push   %eax
f011345a:	e8 64 e7 fe ff       	call   f0101bc3 <execute_command>
f011345f:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0113462:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113468:	bb 1d 7d 13 f0       	mov    $0xf0137d1d,%ebx
f011346d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113472:	89 c7                	mov    %eax,%edi
f0113474:	89 de                	mov    %ebx,%esi
f0113476:	89 d1                	mov    %edx,%ecx
f0113478:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011347a:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113480:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113485:	b0 00                	mov    $0x0,%al
f0113487:	89 d7                	mov    %edx,%edi
f0113489:	f3 aa                	rep stos %al,%es:(%edi)
f011348b:	83 ec 0c             	sub    $0xc,%esp
f011348e:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113494:	50                   	push   %eax
f0113495:	e8 29 e7 fe ff       	call   f0101bc3 <execute_command>
f011349a:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f011349d:	83 ec 04             	sub    $0x4,%esp
f01134a0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134a6:	50                   	push   %eax
f01134a7:	68 ba 75 13 f0       	push   $0xf01375ba
f01134ac:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134b2:	50                   	push   %eax
f01134b3:	e8 96 be 01 00       	call   f012f34e <strcconcat>
f01134b8:	83 c4 10             	add    $0x10,%esp
f01134bb:	83 ec 0c             	sub    $0xc,%esp
f01134be:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134c4:	50                   	push   %eax
f01134c5:	e8 f9 e6 fe ff       	call   f0101bc3 <execute_command>
f01134ca:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01134cd:	83 ec 04             	sub    $0x4,%esp
f01134d0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134d6:	50                   	push   %eax
f01134d7:	68 c4 75 13 f0       	push   $0xf01375c4
f01134dc:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134e2:	50                   	push   %eax
f01134e3:	e8 66 be 01 00       	call   f012f34e <strcconcat>
f01134e8:	83 c4 10             	add    $0x10,%esp
f01134eb:	83 ec 0c             	sub    $0xc,%esp
f01134ee:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134f4:	50                   	push   %eax
f01134f5:	e8 c9 e6 fe ff       	call   f0101bc3 <execute_command>
f01134fa:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01134fd:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113503:	bb 81 7d 13 f0       	mov    $0xf0137d81,%ebx
f0113508:	ba 0f 00 00 00       	mov    $0xf,%edx
f011350d:	89 c7                	mov    %eax,%edi
f011350f:	89 de                	mov    %ebx,%esi
f0113511:	89 d1                	mov    %edx,%ecx
f0113513:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113515:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011351b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113520:	b0 00                	mov    $0x0,%al
f0113522:	89 d7                	mov    %edx,%edi
f0113524:	f3 aa                	rep stos %al,%es:(%edi)
f0113526:	83 ec 0c             	sub    $0xc,%esp
f0113529:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011352f:	50                   	push   %eax
f0113530:	e8 8e e6 fe ff       	call   f0101bc3 <execute_command>
f0113535:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113538:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011353e:	bb e5 7d 13 f0       	mov    $0xf0137de5,%ebx
f0113543:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113548:	89 c7                	mov    %eax,%edi
f011354a:	89 de                	mov    %ebx,%esi
f011354c:	89 d1                	mov    %edx,%ecx
f011354e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113550:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113556:	b9 55 00 00 00       	mov    $0x55,%ecx
f011355b:	b0 00                	mov    $0x0,%al
f011355d:	89 d7                	mov    %edx,%edi
f011355f:	f3 aa                	rep stos %al,%es:(%edi)
f0113561:	83 ec 0c             	sub    $0xc,%esp
f0113564:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011356a:	50                   	push   %eax
f011356b:	e8 53 e6 fe ff       	call   f0101bc3 <execute_command>
f0113570:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0113573:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113579:	bb 49 7e 13 f0       	mov    $0xf0137e49,%ebx
f011357e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113583:	89 c7                	mov    %eax,%edi
f0113585:	89 de                	mov    %ebx,%esi
f0113587:	89 d1                	mov    %edx,%ecx
f0113589:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011358b:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113591:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113596:	b0 00                	mov    $0x0,%al
f0113598:	89 d7                	mov    %edx,%edi
f011359a:	f3 aa                	rep stos %al,%es:(%edi)
f011359c:	83 ec 0c             	sub    $0xc,%esp
f011359f:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01135a5:	50                   	push   %eax
f01135a6:	e8 18 e6 fe ff       	call   f0101bc3 <execute_command>
f01135ab:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f01135ae:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f01135b5:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f01135bc:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01135c3:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f01135ca:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f01135d1:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f01135d8:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f01135df:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f01135e6:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01135ed:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01135f4:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01135fb:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113602:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113605:	8a 00                	mov    (%eax),%al
f0113607:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011360d:	e8 6e 93 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0113612:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0113615:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113618:	89 d0                	mov    %edx,%eax
f011361a:	01 c0                	add    %eax,%eax
f011361c:	01 d0                	add    %edx,%eax
f011361e:	01 c0                	add    %eax,%eax
f0113620:	50                   	push   %eax
f0113621:	68 00 00 40 00       	push   $0x400000
f0113626:	68 00 00 20 00       	push   $0x200000
f011362b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011362e:	e8 16 55 ff ff       	call   f0108b49 <copy_paste_chunk>
f0113633:	83 c4 10             	add    $0x10,%esp
f0113636:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113639:	e8 42 93 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011363e:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113641:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113648:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011364c:	75 08                	jne    f0113656 <test_copy_paste_chunk+0x92f>
f011364e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113651:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113654:	74 2b                	je     f0113681 <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113656:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113659:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011365c:	83 ec 0c             	sub    $0xc,%esp
f011365f:	50                   	push   %eax
f0113660:	ff 75 80             	pushl  -0x80(%ebp)
f0113663:	68 d0 75 13 f0       	push   $0xf01375d0
f0113668:	68 75 02 00 00       	push   $0x275
f011366d:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113672:	e8 47 cd fe ff       	call   f01003be <_warn>
f0113677:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011367a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113681:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113685:	74 04                	je     f011368b <test_copy_paste_chunk+0x964>
f0113687:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011368b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0113692:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0113699:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011369c:	83 ec 08             	sub    $0x8,%esp
f011369f:	6a 01                	push   $0x1
f01136a1:	6a 07                	push   $0x7
f01136a3:	6a 07                	push   $0x7
f01136a5:	6a 07                	push   $0x7
f01136a7:	6a 07                	push   $0x7
f01136a9:	6a 01                	push   $0x1
f01136ab:	68 00 20 00 00       	push   $0x2000
f01136b0:	68 00 00 40 00       	push   $0x400000
f01136b5:	68 00 00 20 00       	push   $0x200000
f01136ba:	ff 75 d4             	pushl  -0x2c(%ebp)
f01136bd:	e8 22 36 00 00       	call   f0116ce4 <CCP>
f01136c2:	83 c4 30             	add    $0x30,%esp
f01136c5:	83 f8 01             	cmp    $0x1,%eax
f01136c8:	74 2b                	je     f01136f5 <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f01136ca:	83 ec 04             	sub    $0x4,%esp
f01136cd:	68 24 76 13 f0       	push   $0xf0137624
f01136d2:	68 7e 02 00 00       	push   $0x27e
f01136d7:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01136dc:	e8 dd cc fe ff       	call   f01003be <_warn>
f01136e1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01136e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01136eb:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01136f2:	00 00 00 
		}
		if (correct) eval += 5 ;
f01136f5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01136f9:	74 04                	je     f01136ff <test_copy_paste_chunk+0x9d8>
f01136fb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136ff:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113706:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113709:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f011370c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011370f:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113712:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113715:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113718:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011371b:	8a 00                	mov    (%eax),%al
f011371d:	3c 61                	cmp    $0x61,%al
f011371f:	75 69                	jne    f011378a <test_copy_paste_chunk+0xa63>
f0113721:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113724:	8a 00                	mov    (%eax),%al
f0113726:	3c 61                	cmp    $0x61,%al
f0113728:	75 60                	jne    f011378a <test_copy_paste_chunk+0xa63>
f011372a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011372d:	8a 00                	mov    (%eax),%al
f011372f:	3c 79                	cmp    $0x79,%al
f0113731:	75 57                	jne    f011378a <test_copy_paste_chunk+0xa63>
f0113733:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113736:	8a 00                	mov    (%eax),%al
f0113738:	3c 62                	cmp    $0x62,%al
f011373a:	75 4e                	jne    f011378a <test_copy_paste_chunk+0xa63>
f011373c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011373f:	8a 00                	mov    (%eax),%al
f0113741:	3c 63                	cmp    $0x63,%al
f0113743:	75 45                	jne    f011378a <test_copy_paste_chunk+0xa63>
f0113745:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113748:	8a 00                	mov    (%eax),%al
f011374a:	3c 7a                	cmp    $0x7a,%al
f011374c:	75 3c                	jne    f011378a <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011374e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113751:	8a 00                	mov    (%eax),%al
f0113753:	3c 77                	cmp    $0x77,%al
f0113755:	75 33                	jne    f011378a <test_copy_paste_chunk+0xa63>
f0113757:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011375a:	8a 00                	mov    (%eax),%al
f011375c:	3c 64                	cmp    $0x64,%al
f011375e:	75 2a                	jne    f011378a <test_copy_paste_chunk+0xa63>
f0113760:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113763:	8a 00                	mov    (%eax),%al
f0113765:	3c 65                	cmp    $0x65,%al
f0113767:	75 21                	jne    f011378a <test_copy_paste_chunk+0xa63>
f0113769:	8b 45 98             	mov    -0x68(%ebp),%eax
f011376c:	8a 00                	mov    (%eax),%al
f011376e:	3c 65                	cmp    $0x65,%al
f0113770:	75 18                	jne    f011378a <test_copy_paste_chunk+0xa63>
f0113772:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113775:	8a 00                	mov    (%eax),%al
f0113777:	3c 66                	cmp    $0x66,%al
f0113779:	75 0f                	jne    f011378a <test_copy_paste_chunk+0xa63>
f011377b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011377e:	8a 10                	mov    (%eax),%dl
f0113780:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113786:	38 c2                	cmp    %al,%dl
f0113788:	74 21                	je     f01137ab <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011378a:	83 ec 04             	sub    $0x4,%esp
f011378d:	68 24 75 13 f0       	push   $0xf0137524
f0113792:	68 8c 02 00 00       	push   $0x28c
f0113797:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011379c:	e8 1d cc fe ff       	call   f01003be <_warn>
f01137a1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137a4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01137ab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137af:	74 04                	je     f01137b5 <test_copy_paste_chunk+0xa8e>
f01137b1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01137b5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f01137bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01137bf:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01137c2:	e8 b9 91 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01137c7:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f01137ca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137cd:	89 c2                	mov    %eax,%edx
f01137cf:	01 d2                	add    %edx,%edx
f01137d1:	01 d0                	add    %edx,%eax
f01137d3:	50                   	push   %eax
f01137d4:	68 00 08 20 00       	push   $0x200800
f01137d9:	68 00 08 40 00       	push   $0x400800
f01137de:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137e1:	e8 63 53 ff ff       	call   f0108b49 <copy_paste_chunk>
f01137e6:	83 c4 10             	add    $0x10,%esp
f01137e9:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01137ec:	e8 8f 91 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01137f1:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01137f4:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01137f8:	75 08                	jne    f0113802 <test_copy_paste_chunk+0xadb>
f01137fa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01137fd:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113800:	74 2b                	je     f011382d <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113802:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113805:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113808:	83 ec 0c             	sub    $0xc,%esp
f011380b:	50                   	push   %eax
f011380c:	ff 75 80             	pushl  -0x80(%ebp)
f011380f:	68 d0 75 13 f0       	push   $0xf01375d0
f0113814:	68 9c 02 00 00       	push   $0x29c
f0113819:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011381e:	e8 9b cb fe ff       	call   f01003be <_warn>
f0113823:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113826:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011382d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113831:	74 04                	je     f0113837 <test_copy_paste_chunk+0xb10>
f0113833:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113837:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011383e:	83 ec 08             	sub    $0x8,%esp
f0113841:	6a 01                	push   $0x1
f0113843:	6a 07                	push   $0x7
f0113845:	6a 07                	push   $0x7
f0113847:	6a 07                	push   $0x7
f0113849:	6a 07                	push   $0x7
f011384b:	6a 01                	push   $0x1
f011384d:	68 00 20 00 00       	push   $0x2000
f0113852:	68 00 00 20 00       	push   $0x200000
f0113857:	68 00 00 40 00       	push   $0x400000
f011385c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011385f:	e8 80 34 00 00       	call   f0116ce4 <CCP>
f0113864:	83 c4 30             	add    $0x30,%esp
f0113867:	83 f8 01             	cmp    $0x1,%eax
f011386a:	74 21                	je     f011388d <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011386c:	83 ec 04             	sub    $0x4,%esp
f011386f:	68 70 76 13 f0       	push   $0xf0137670
f0113874:	68 a4 02 00 00       	push   $0x2a4
f0113879:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011387e:	e8 3b cb fe ff       	call   f01003be <_warn>
f0113883:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113886:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011388d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113891:	74 04                	je     f0113897 <test_copy_paste_chunk+0xb70>
f0113893:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113897:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011389e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138a1:	8a 00                	mov    (%eax),%al
f01138a3:	3c 61                	cmp    $0x61,%al
f01138a5:	75 69                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
f01138a7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01138aa:	8a 00                	mov    (%eax),%al
f01138ac:	3c 61                	cmp    $0x61,%al
f01138ae:	75 60                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
f01138b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138b3:	8a 00                	mov    (%eax),%al
f01138b5:	3c 79                	cmp    $0x79,%al
f01138b7:	75 57                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
f01138b9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01138bc:	8a 00                	mov    (%eax),%al
f01138be:	3c 62                	cmp    $0x62,%al
f01138c0:	75 4e                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
f01138c2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01138c5:	8a 00                	mov    (%eax),%al
f01138c7:	3c 7a                	cmp    $0x7a,%al
f01138c9:	75 45                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
f01138cb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01138ce:	8a 00                	mov    (%eax),%al
f01138d0:	3c 7a                	cmp    $0x7a,%al
f01138d2:	75 3c                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01138d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01138d7:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01138d9:	3c 64                	cmp    $0x64,%al
f01138db:	75 33                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01138dd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01138e0:	8a 00                	mov    (%eax),%al
f01138e2:	3c 64                	cmp    $0x64,%al
f01138e4:	75 2a                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
f01138e6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01138e9:	8a 00                	mov    (%eax),%al
f01138eb:	3c 65                	cmp    $0x65,%al
f01138ed:	75 21                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
f01138ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f01138f2:	8a 00                	mov    (%eax),%al
f01138f4:	3c 78                	cmp    $0x78,%al
f01138f6:	75 18                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
f01138f8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01138fb:	8a 00                	mov    (%eax),%al
f01138fd:	3c 66                	cmp    $0x66,%al
f01138ff:	75 0f                	jne    f0113910 <test_copy_paste_chunk+0xbe9>
f0113901:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113904:	8a 10                	mov    (%eax),%dl
f0113906:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011390c:	38 c2                	cmp    %al,%dl
f011390e:	74 21                	je     f0113931 <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113910:	83 ec 04             	sub    $0x4,%esp
f0113913:	68 24 75 13 f0       	push   $0xf0137524
f0113918:	68 ad 02 00 00       	push   $0x2ad
f011391d:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113922:	e8 97 ca fe ff       	call   f01003be <_warn>
f0113927:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011392a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113931:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113935:	74 04                	je     f011393b <test_copy_paste_chunk+0xc14>
f0113937:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011393b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0113942:	83 ec 0c             	sub    $0xc,%esp
f0113945:	68 bb 76 13 f0       	push   $0xf01376bb
f011394a:	e8 e2 d4 fe ff       	call   f0100e31 <cprintf>
f011394f:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0113952:	83 ec 0c             	sub    $0xc,%esp
f0113955:	68 cc 76 13 f0       	push   $0xf01376cc
f011395a:	e8 d2 d4 fe ff       	call   f0100e31 <cprintf>
f011395f:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0113962:	83 ec 04             	sub    $0x4,%esp
f0113965:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011396b:	50                   	push   %eax
f011396c:	68 00 77 13 f0       	push   $0xf0137700
f0113971:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113977:	50                   	push   %eax
f0113978:	e8 d1 b9 01 00       	call   f012f34e <strcconcat>
f011397d:	83 c4 10             	add    $0x10,%esp
f0113980:	83 ec 0c             	sub    $0xc,%esp
f0113983:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113989:	50                   	push   %eax
f011398a:	e8 34 e2 fe ff       	call   f0101bc3 <execute_command>
f011398f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113992:	83 ec 04             	sub    $0x4,%esp
f0113995:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011399b:	50                   	push   %eax
f011399c:	68 0a 77 13 f0       	push   $0xf013770a
f01139a1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01139a7:	50                   	push   %eax
f01139a8:	e8 a1 b9 01 00       	call   f012f34e <strcconcat>
f01139ad:	83 c4 10             	add    $0x10,%esp
f01139b0:	83 ec 0c             	sub    $0xc,%esp
f01139b3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139b9:	50                   	push   %eax
f01139ba:	e8 04 e2 fe ff       	call   f0101bc3 <execute_command>
f01139bf:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f01139c2:	83 ec 04             	sub    $0x4,%esp
f01139c5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139cb:	50                   	push   %eax
f01139cc:	68 14 77 13 f0       	push   $0xf0137714
f01139d1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01139d7:	50                   	push   %eax
f01139d8:	e8 71 b9 01 00       	call   f012f34e <strcconcat>
f01139dd:	83 c4 10             	add    $0x10,%esp
f01139e0:	83 ec 0c             	sub    $0xc,%esp
f01139e3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139e9:	50                   	push   %eax
f01139ea:	e8 d4 e1 fe ff       	call   f0101bc3 <execute_command>
f01139ef:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01139f2:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01139f8:	bb ad 7e 13 f0       	mov    $0xf0137ead,%ebx
f01139fd:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a02:	89 c7                	mov    %eax,%edi
f0113a04:	89 de                	mov    %ebx,%esi
f0113a06:	89 d1                	mov    %edx,%ecx
f0113a08:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a0a:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113a10:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a15:	b0 00                	mov    $0x0,%al
f0113a17:	89 d7                	mov    %edx,%edi
f0113a19:	f3 aa                	rep stos %al,%es:(%edi)
f0113a1b:	83 ec 0c             	sub    $0xc,%esp
f0113a1e:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113a24:	50                   	push   %eax
f0113a25:	e8 99 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a2a:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113a2d:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113a33:	bb 11 7f 13 f0       	mov    $0xf0137f11,%ebx
f0113a38:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a3d:	89 c7                	mov    %eax,%edi
f0113a3f:	89 de                	mov    %ebx,%esi
f0113a41:	89 d1                	mov    %edx,%ecx
f0113a43:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a45:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113a4b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a50:	b0 00                	mov    $0x0,%al
f0113a52:	89 d7                	mov    %edx,%edi
f0113a54:	f3 aa                	rep stos %al,%es:(%edi)
f0113a56:	83 ec 0c             	sub    $0xc,%esp
f0113a59:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113a5f:	50                   	push   %eax
f0113a60:	e8 5e e1 fe ff       	call   f0101bc3 <execute_command>
f0113a65:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113a68:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113a6e:	bb 75 7f 13 f0       	mov    $0xf0137f75,%ebx
f0113a73:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a78:	89 c7                	mov    %eax,%edi
f0113a7a:	89 de                	mov    %ebx,%esi
f0113a7c:	89 d1                	mov    %edx,%ecx
f0113a7e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a80:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113a86:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a8b:	b0 00                	mov    $0x0,%al
f0113a8d:	89 d7                	mov    %edx,%edi
f0113a8f:	f3 aa                	rep stos %al,%es:(%edi)
f0113a91:	83 ec 0c             	sub    $0xc,%esp
f0113a94:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113a9a:	50                   	push   %eax
f0113a9b:	e8 23 e1 fe ff       	call   f0101bc3 <execute_command>
f0113aa0:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113aa3:	e8 d8 8e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0113aa8:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113aab:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113aae:	89 d0                	mov    %edx,%eax
f0113ab0:	01 c0                	add    %eax,%eax
f0113ab2:	01 d0                	add    %edx,%eax
f0113ab4:	c1 e0 02             	shl    $0x2,%eax
f0113ab7:	50                   	push   %eax
f0113ab8:	68 00 00 90 00       	push   $0x900000
f0113abd:	68 00 00 80 00       	push   $0x800000
f0113ac2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ac5:	e8 7f 50 ff ff       	call   f0108b49 <copy_paste_chunk>
f0113aca:	83 c4 10             	add    $0x10,%esp
f0113acd:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ad3:	e8 a8 8e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0113ad8:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113adb:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113ae2:	75 0b                	jne    f0113aef <test_copy_paste_chunk+0xdc8>
f0113ae4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113ae7:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113aea:	83 f8 03             	cmp    $0x3,%eax
f0113aed:	74 2e                	je     f0113b1d <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113aef:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113af2:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113af5:	83 ec 0c             	sub    $0xc,%esp
f0113af8:	50                   	push   %eax
f0113af9:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113aff:	68 d0 75 13 f0       	push   $0xf01375d0
f0113b04:	68 cb 02 00 00       	push   $0x2cb
f0113b09:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113b0e:	e8 ab c8 fe ff       	call   f01003be <_warn>
f0113b13:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b16:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113b1d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b21:	74 04                	je     f0113b27 <test_copy_paste_chunk+0xe00>
f0113b23:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b27:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113b2e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113b35:	83 ec 08             	sub    $0x8,%esp
f0113b38:	6a 01                	push   $0x1
f0113b3a:	6a 07                	push   $0x7
f0113b3c:	6a 07                	push   $0x7
f0113b3e:	6a 07                	push   $0x7
f0113b40:	6a 07                	push   $0x7
f0113b42:	6a 01                	push   $0x1
f0113b44:	68 00 30 00 00       	push   $0x3000
f0113b49:	68 00 00 90 00       	push   $0x900000
f0113b4e:	68 00 00 80 00       	push   $0x800000
f0113b53:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b56:	e8 89 31 00 00       	call   f0116ce4 <CCP>
f0113b5b:	83 c4 30             	add    $0x30,%esp
f0113b5e:	83 f8 01             	cmp    $0x1,%eax
f0113b61:	74 28                	je     f0113b8b <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113b63:	83 ec 04             	sub    $0x4,%esp
f0113b66:	68 70 76 13 f0       	push   $0xf0137670
f0113b6b:	68 d4 02 00 00       	push   $0x2d4
f0113b70:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113b75:	e8 44 c8 fe ff       	call   f01003be <_warn>
f0113b7a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b7d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113b84:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113b8b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b8f:	74 04                	je     f0113b95 <test_copy_paste_chunk+0xe6e>
f0113b91:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b95:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113b9c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113ba0:	0f 84 9e 00 00 00    	je     f0113c44 <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113ba6:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113bad:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113bb4:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113bbb:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113bc2:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113bc9:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113bd0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113bd3:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113bd6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113bd9:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113bdc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113bdf:	8a 00                	mov    (%eax),%al
f0113be1:	3c 61                	cmp    $0x61,%al
f0113be3:	75 2d                	jne    f0113c12 <test_copy_paste_chunk+0xeeb>
f0113be5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113be8:	8a 00                	mov    (%eax),%al
f0113bea:	3c 61                	cmp    $0x61,%al
f0113bec:	75 24                	jne    f0113c12 <test_copy_paste_chunk+0xeeb>
f0113bee:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113bf1:	8a 00                	mov    (%eax),%al
f0113bf3:	3c 79                	cmp    $0x79,%al
f0113bf5:	75 1b                	jne    f0113c12 <test_copy_paste_chunk+0xeeb>
f0113bf7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113bfa:	8a 00                	mov    (%eax),%al
f0113bfc:	3c 62                	cmp    $0x62,%al
f0113bfe:	75 12                	jne    f0113c12 <test_copy_paste_chunk+0xeeb>
f0113c00:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113c03:	8a 00                	mov    (%eax),%al
f0113c05:	3c 63                	cmp    $0x63,%al
f0113c07:	75 09                	jne    f0113c12 <test_copy_paste_chunk+0xeeb>
f0113c09:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113c0c:	8a 00                	mov    (%eax),%al
f0113c0e:	3c 7a                	cmp    $0x7a,%al
f0113c10:	74 21                	je     f0113c33 <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113c12:	83 ec 04             	sub    $0x4,%esp
f0113c15:	68 24 75 13 f0       	push   $0xf0137524
f0113c1a:	68 e6 02 00 00       	push   $0x2e6
f0113c1f:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113c24:	e8 95 c7 fe ff       	call   f01003be <_warn>
f0113c29:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113c2c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113c33:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c37:	74 04                	je     f0113c3d <test_copy_paste_chunk+0xf16>
f0113c39:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113c3d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113c44:	e8 37 8d ff ff       	call   f010c980 <sys_calculate_free_frames>
f0113c49:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113c4c:	6a 00                	push   $0x0
f0113c4e:	6a 02                	push   $0x2
f0113c50:	68 00 10 90 00       	push   $0x901000
f0113c55:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c58:	e8 c9 2b 00 00       	call   f0116826 <SB>
f0113c5d:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113c60:	6a 00                	push   $0x0
f0113c62:	6a 02                	push   $0x2
f0113c64:	68 00 20 90 00       	push   $0x902000
f0113c69:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c6c:	e8 b5 2b 00 00       	call   f0116826 <SB>
f0113c71:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113c74:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113c77:	c1 e0 03             	shl    $0x3,%eax
f0113c7a:	50                   	push   %eax
f0113c7b:	68 00 f0 bf 00       	push   $0xbff000
f0113c80:	68 00 10 90 00       	push   $0x901000
f0113c85:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c88:	e8 bc 4e ff ff       	call   f0108b49 <copy_paste_chunk>
f0113c8d:	83 c4 10             	add    $0x10,%esp
f0113c90:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c96:	e8 e5 8c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0113c9b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113c9e:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113ca5:	75 0b                	jne    f0113cb2 <test_copy_paste_chunk+0xf8b>
f0113ca7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113caa:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113cad:	83 f8 03             	cmp    $0x3,%eax
f0113cb0:	74 2e                	je     f0113ce0 <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113cb2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113cb5:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113cb8:	83 ec 0c             	sub    $0xc,%esp
f0113cbb:	50                   	push   %eax
f0113cbc:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113cc2:	68 d0 75 13 f0       	push   $0xf01375d0
f0113cc7:	68 f6 02 00 00       	push   $0x2f6
f0113ccc:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113cd1:	e8 e8 c6 fe ff       	call   f01003be <_warn>
f0113cd6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113cd9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113ce0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113ce4:	74 04                	je     f0113cea <test_copy_paste_chunk+0xfc3>
f0113ce6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113cea:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113cf1:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113cf8:	83 ec 08             	sub    $0x8,%esp
f0113cfb:	6a 01                	push   $0x1
f0113cfd:	6a 07                	push   $0x7
f0113cff:	6a 03                	push   $0x3
f0113d01:	6a 07                	push   $0x7
f0113d03:	6a 03                	push   $0x3
f0113d05:	6a 01                	push   $0x1
f0113d07:	68 00 20 00 00       	push   $0x2000
f0113d0c:	68 00 f0 bf 00       	push   $0xbff000
f0113d11:	68 00 10 90 00       	push   $0x901000
f0113d16:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113d19:	e8 c6 2f 00 00       	call   f0116ce4 <CCP>
f0113d1e:	83 c4 30             	add    $0x30,%esp
f0113d21:	83 f8 01             	cmp    $0x1,%eax
f0113d24:	74 28                	je     f0113d4e <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113d26:	83 ec 04             	sub    $0x4,%esp
f0113d29:	68 70 76 13 f0       	push   $0xf0137670
f0113d2e:	68 ff 02 00 00       	push   $0x2ff
f0113d33:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113d38:	e8 81 c6 fe ff       	call   f01003be <_warn>
f0113d3d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d40:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113d47:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113d4e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d52:	74 04                	je     f0113d58 <test_copy_paste_chunk+0x1031>
f0113d54:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113d58:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113d5f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113d63:	74 72                	je     f0113dd7 <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113d65:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113d6c:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113d73:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113d7a:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113d81:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d84:	8a 00                	mov    (%eax),%al
f0113d86:	3c 62                	cmp    $0x62,%al
f0113d88:	75 1b                	jne    f0113da5 <test_copy_paste_chunk+0x107e>
f0113d8a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113d8d:	8a 00                	mov    (%eax),%al
f0113d8f:	3c 62                	cmp    $0x62,%al
f0113d91:	75 12                	jne    f0113da5 <test_copy_paste_chunk+0x107e>
f0113d93:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d96:	8a 00                	mov    (%eax),%al
f0113d98:	3c 7a                	cmp    $0x7a,%al
f0113d9a:	75 09                	jne    f0113da5 <test_copy_paste_chunk+0x107e>
f0113d9c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113d9f:	8a 00                	mov    (%eax),%al
f0113da1:	3c 7a                	cmp    $0x7a,%al
f0113da3:	74 21                	je     f0113dc6 <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113da5:	83 ec 04             	sub    $0x4,%esp
f0113da8:	68 24 75 13 f0       	push   $0xf0137524
f0113dad:	68 0b 03 00 00       	push   $0x30b
f0113db2:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113db7:	e8 02 c6 fe ff       	call   f01003be <_warn>
f0113dbc:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113dbf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113dc6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113dca:	74 04                	je     f0113dd0 <test_copy_paste_chunk+0x10a9>
f0113dcc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113dd0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113dd7:	83 ec 0c             	sub    $0xc,%esp
f0113dda:	68 1e 77 13 f0       	push   $0xf013771e
f0113ddf:	e8 4d d0 fe ff       	call   f0100e31 <cprintf>
f0113de4:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113de7:	83 ec 08             	sub    $0x8,%esp
f0113dea:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113ded:	68 30 77 13 f0       	push   $0xf0137730
f0113df2:	e8 3a d0 fe ff       	call   f0100e31 <cprintf>
f0113df7:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113dfa:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113dfe:	75 10                	jne    f0113e10 <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113e00:	83 ec 0c             	sub    $0xc,%esp
f0113e03:	68 64 77 13 f0       	push   $0xf0137764
f0113e08:	e8 24 d0 fe ff       	call   f0100e31 <cprintf>
f0113e0d:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113e10:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f0113e15:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113e18:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e1b:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113e1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113e23:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113e26:	5b                   	pop    %ebx
f0113e27:	5e                   	pop    %esi
f0113e28:	5f                   	pop    %edi
f0113e29:	5d                   	pop    %ebp
f0113e2a:	c3                   	ret    

f0113e2b <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113e2b:	55                   	push   %ebp
f0113e2c:	89 e5                	mov    %esp,%ebp
f0113e2e:	57                   	push   %edi
f0113e2f:	56                   	push   %esi
f0113e30:	53                   	push   %ebx
f0113e31:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113e37:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113e3d:	bb 30 74 13 f0       	mov    $0xf0137430,%ebx
f0113e42:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113e47:	89 c7                	mov    %eax,%edi
f0113e49:	89 de                	mov    %ebx,%esi
f0113e4b:	89 d1                	mov    %edx,%ecx
f0113e4d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113e4f:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113e55:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113e5a:	b0 00                	mov    $0x0,%al
f0113e5c:	89 d7                	mov    %edx,%edi
f0113e5e:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113e60:	6a 00                	push   $0x0
f0113e62:	6a 0a                	push   $0xa
f0113e64:	6a 14                	push   $0x14
f0113e66:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113e6c:	50                   	push   %eax
f0113e6d:	e8 fb 4d ff ff       	call   f0108c6d <env_create>
f0113e72:	83 c4 10             	add    $0x10,%esp
f0113e75:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113e78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e7b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0113e81:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113e84:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e87:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0113e8d:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113e90:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113e93:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113e96:	83 ec 0c             	sub    $0xc,%esp
f0113e99:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e9c:	e8 0f 2e 00 00       	call   f0116cb0 <ClearUserSpace>
f0113ea1:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113ea4:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113eab:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113eb2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113eb9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113ebd:	83 ec 0c             	sub    $0xc,%esp
f0113ec0:	68 dc 7f 13 f0       	push   $0xf0137fdc
f0113ec5:	e8 67 cf fe ff       	call   f0100e31 <cprintf>
f0113eca:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113ecd:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0113ed4:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113edb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113ede:	8a 00                	mov    (%eax),%al
f0113ee0:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113ee6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113ee9:	8a 00                	mov    (%eax),%al
f0113eeb:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ef1:	e8 8a 8a ff ff       	call   f010c980 <sys_calculate_free_frames>
f0113ef6:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113ef9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113efc:	89 d0                	mov    %edx,%eax
f0113efe:	01 c0                	add    %eax,%eax
f0113f00:	01 d0                	add    %edx,%eax
f0113f02:	01 c0                	add    %eax,%eax
f0113f04:	83 ec 0c             	sub    $0xc,%esp
f0113f07:	6a 02                	push   $0x2
f0113f09:	50                   	push   %eax
f0113f0a:	68 00 40 10 f0       	push   $0xf0104000
f0113f0f:	68 00 00 10 f0       	push   $0xf0100000
f0113f14:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f17:	e8 47 4c ff ff       	call   f0108b63 <share_chunk>
f0113f1c:	83 c4 20             	add    $0x20,%esp
f0113f1f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113f22:	e8 59 8a ff ff       	call   f010c980 <sys_calculate_free_frames>
f0113f27:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113f2a:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113f2e:	75 08                	jne    f0113f38 <test_share_chunk+0x10d>
f0113f30:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f33:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113f36:	74 28                	je     f0113f60 <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113f38:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f3b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f3e:	83 ec 0c             	sub    $0xc,%esp
f0113f41:	50                   	push   %eax
f0113f42:	ff 75 b0             	pushl  -0x50(%ebp)
f0113f45:	68 08 80 13 f0       	push   $0xf0138008
f0113f4a:	68 47 03 00 00       	push   $0x347
f0113f4f:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113f54:	e8 65 c4 fe ff       	call   f01003be <_warn>
f0113f59:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f5c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f60:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f64:	74 04                	je     f0113f6a <test_share_chunk+0x13f>
f0113f66:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f6a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113f6e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f71:	c1 e0 03             	shl    $0x3,%eax
f0113f74:	83 ec 08             	sub    $0x8,%esp
f0113f77:	68 fd 00 00 00       	push   $0xfd
f0113f7c:	6a 07                	push   $0x7
f0113f7e:	6a 03                	push   $0x3
f0113f80:	6a 07                	push   $0x7
f0113f82:	6a 03                	push   $0x3
f0113f84:	6a 01                	push   $0x1
f0113f86:	50                   	push   %eax
f0113f87:	68 00 40 10 f0       	push   $0xf0104000
f0113f8c:	68 00 00 10 f0       	push   $0xf0100000
f0113f91:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f94:	e8 4b 2d 00 00       	call   f0116ce4 <CCP>
f0113f99:	83 c4 30             	add    $0x30,%esp
f0113f9c:	85 c0                	test   %eax,%eax
f0113f9e:	75 1e                	jne    f0113fbe <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113fa0:	83 ec 04             	sub    $0x4,%esp
f0113fa3:	68 64 80 13 f0       	push   $0xf0138064
f0113fa8:	68 4f 03 00 00       	push   $0x34f
f0113fad:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113fb2:	e8 07 c4 fe ff       	call   f01003be <_warn>
f0113fb7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113fba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fbe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fc2:	74 04                	je     f0113fc8 <test_share_chunk+0x19d>
f0113fc4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113fc8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113fcb:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113fce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113fd1:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113fd4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113fd7:	8a 00                	mov    (%eax),%al
f0113fd9:	3c 41                	cmp    $0x41,%al
f0113fdb:	75 09                	jne    f0113fe6 <test_share_chunk+0x1bb>
f0113fdd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113fe0:	8a 00                	mov    (%eax),%al
f0113fe2:	3c 42                	cmp    $0x42,%al
f0113fe4:	74 1e                	je     f0114004 <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113fe6:	83 ec 04             	sub    $0x4,%esp
f0113fe9:	68 ac 80 13 f0       	push   $0xf01380ac
f0113fee:	68 59 03 00 00       	push   $0x359
f0113ff3:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0113ff8:	e8 c1 c3 fe ff       	call   f01003be <_warn>
f0113ffd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114000:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114004:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114008:	74 04                	je     f011400e <test_share_chunk+0x1e3>
f011400a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011400e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0114012:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0114018:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011401b:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f011401d:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0114023:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114026:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0114028:	83 ec 0c             	sub    $0xc,%esp
f011402b:	68 e1 80 13 f0       	push   $0xf01380e1
f0114030:	e8 fc cd fe ff       	call   f0100e31 <cprintf>
f0114035:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0114038:	83 ec 0c             	sub    $0xc,%esp
f011403b:	68 f0 80 13 f0       	push   $0xf01380f0
f0114040:	e8 ec cd fe ff       	call   f0100e31 <cprintf>
f0114045:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114048:	e8 33 89 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011404d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114050:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114053:	c1 e0 05             	shl    $0x5,%eax
f0114056:	83 ec 0c             	sub    $0xc,%esp
f0114059:	68 02 0e 00 00       	push   $0xe02
f011405e:	50                   	push   %eax
f011405f:	68 00 00 00 40       	push   $0x40000000
f0114064:	68 00 00 00 f0       	push   $0xf0000000
f0114069:	ff 75 cc             	pushl  -0x34(%ebp)
f011406c:	e8 f2 4a ff ff       	call   f0108b63 <share_chunk>
f0114071:	83 c4 20             	add    $0x20,%esp
f0114074:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114077:	e8 04 89 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011407c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f011407f:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114083:	75 1f                	jne    f01140a4 <test_share_chunk+0x279>
f0114085:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114088:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011408b:	89 c1                	mov    %eax,%ecx
f011408d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114090:	c1 e0 05             	shl    $0x5,%eax
f0114093:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114096:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011409d:	99                   	cltd   
f011409e:	f7 fb                	idiv   %ebx
f01140a0:	39 c1                	cmp    %eax,%ecx
f01140a2:	74 28                	je     f01140cc <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01140a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140a7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01140aa:	83 ec 0c             	sub    $0xc,%esp
f01140ad:	50                   	push   %eax
f01140ae:	ff 75 a8             	pushl  -0x58(%ebp)
f01140b1:	68 2c 81 13 f0       	push   $0xf013812c
f01140b6:	68 71 03 00 00       	push   $0x371
f01140bb:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01140c0:	e8 f9 c2 fe ff       	call   f01003be <_warn>
f01140c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140d0:	74 04                	je     f01140d6 <test_share_chunk+0x2ab>
f01140d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01140da:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01140e1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140e4:	c1 e0 05             	shl    $0x5,%eax
f01140e7:	83 ec 08             	sub    $0x8,%esp
f01140ea:	6a 02                	push   $0x2
f01140ec:	6a 07                	push   $0x7
f01140ee:	6a 03                	push   $0x3
f01140f0:	68 07 0e 00 00       	push   $0xe07
f01140f5:	68 03 0e 00 00       	push   $0xe03
f01140fa:	6a ff                	push   $0xffffffff
f01140fc:	50                   	push   %eax
f01140fd:	68 00 00 00 40       	push   $0x40000000
f0114102:	68 00 00 00 f0       	push   $0xf0000000
f0114107:	ff 75 cc             	pushl  -0x34(%ebp)
f011410a:	e8 d5 2b 00 00       	call   f0116ce4 <CCP>
f011410f:	83 c4 30             	add    $0x30,%esp
f0114112:	85 c0                	test   %eax,%eax
f0114114:	75 25                	jne    f011413b <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114116:	83 ec 04             	sub    $0x4,%esp
f0114119:	68 64 80 13 f0       	push   $0xf0138064
f011411e:	68 7a 03 00 00       	push   $0x37a
f0114123:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114128:	e8 91 c2 fe ff       	call   f01003be <_warn>
f011412d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114130:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114134:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011413b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011413e:	89 d0                	mov    %edx,%eax
f0114140:	01 c0                	add    %eax,%eax
f0114142:	01 d0                	add    %edx,%eax
f0114144:	c1 e0 02             	shl    $0x2,%eax
f0114147:	83 ec 08             	sub    $0x8,%esp
f011414a:	6a 02                	push   $0x2
f011414c:	6a 07                	push   $0x7
f011414e:	6a 03                	push   $0x3
f0114150:	68 07 0e 00 00       	push   $0xe07
f0114155:	68 03 0e 00 00       	push   $0xe03
f011415a:	6a 02                	push   $0x2
f011415c:	50                   	push   %eax
f011415d:	68 00 00 00 40       	push   $0x40000000
f0114162:	68 00 00 00 f0       	push   $0xf0000000
f0114167:	ff 75 cc             	pushl  -0x34(%ebp)
f011416a:	e8 75 2b 00 00       	call   f0116ce4 <CCP>
f011416f:	83 c4 30             	add    $0x30,%esp
f0114172:	85 c0                	test   %eax,%eax
f0114174:	75 1e                	jne    f0114194 <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114176:	83 ec 04             	sub    $0x4,%esp
f0114179:	68 64 80 13 f0       	push   $0xf0138064
f011417e:	68 81 03 00 00       	push   $0x381
f0114183:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114188:	e8 31 c2 fe ff       	call   f01003be <_warn>
f011418d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114190:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114194:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114198:	74 04                	je     f011419e <test_share_chunk+0x373>
f011419a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011419e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f01141a2:	b8 3c d6 2d f0       	mov    $0xf02dd63c,%eax
f01141a7:	05 00 00 00 10       	add    $0x10000000,%eax
f01141ac:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01141af:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01141b2:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f01141b7:	83 ec 08             	sub    $0x8,%esp
f01141ba:	6a 02                	push   $0x2
f01141bc:	6a 07                	push   $0x7
f01141be:	6a 03                	push   $0x3
f01141c0:	68 07 0e 00 00       	push   $0xe07
f01141c5:	68 03 0e 00 00       	push   $0xe03
f01141ca:	6a 02                	push   $0x2
f01141cc:	50                   	push   %eax
f01141cd:	68 00 00 0a 40       	push   $0x400a0000
f01141d2:	68 00 00 0a f0       	push   $0xf00a0000
f01141d7:	ff 75 cc             	pushl  -0x34(%ebp)
f01141da:	e8 05 2b 00 00       	call   f0116ce4 <CCP>
f01141df:	83 c4 30             	add    $0x30,%esp
f01141e2:	85 c0                	test   %eax,%eax
f01141e4:	75 1e                	jne    f0114204 <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01141e6:	83 ec 04             	sub    $0x4,%esp
f01141e9:	68 64 80 13 f0       	push   $0xf0138064
f01141ee:	68 8b 03 00 00       	push   $0x38b
f01141f3:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01141f8:	e8 c1 c1 fe ff       	call   f01003be <_warn>
f01141fd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114200:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114204:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114208:	74 04                	je     f011420e <test_share_chunk+0x3e3>
f011420a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011420e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114212:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114216:	0f 84 a4 00 00 00    	je     f01142c0 <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f011421c:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0114223:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114226:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0114229:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0114230:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114233:	8a 00                	mov    (%eax),%al
f0114235:	3c 41                	cmp    $0x41,%al
f0114237:	75 09                	jne    f0114242 <test_share_chunk+0x417>
f0114239:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011423c:	8a 00                	mov    (%eax),%al
f011423e:	3c 41                	cmp    $0x41,%al
f0114240:	74 1e                	je     f0114260 <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114242:	83 ec 04             	sub    $0x4,%esp
f0114245:	68 ac 80 13 f0       	push   $0xf01380ac
f011424a:	68 98 03 00 00       	push   $0x398
f011424f:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114254:	e8 65 c1 fe ff       	call   f01003be <_warn>
f0114259:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011425c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114260:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114264:	74 04                	je     f011426a <test_share_chunk+0x43f>
f0114266:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011426a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f011426e:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0114275:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114278:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f011427b:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0114282:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114285:	8a 00                	mov    (%eax),%al
f0114287:	3c 43                	cmp    $0x43,%al
f0114289:	75 09                	jne    f0114294 <test_share_chunk+0x469>
f011428b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011428e:	8a 00                	mov    (%eax),%al
f0114290:	3c 43                	cmp    $0x43,%al
f0114292:	74 1e                	je     f01142b2 <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114294:	83 ec 04             	sub    $0x4,%esp
f0114297:	68 ac 80 13 f0       	push   $0xf01380ac
f011429c:	68 a3 03 00 00       	push   $0x3a3
f01142a1:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01142a6:	e8 13 c1 fe ff       	call   f01003be <_warn>
f01142ab:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01142ae:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01142b2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142b6:	74 04                	je     f01142bc <test_share_chunk+0x491>
f01142b8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01142bc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01142c0:	83 ec 0c             	sub    $0xc,%esp
f01142c3:	68 bb 76 13 f0       	push   $0xf01376bb
f01142c8:	e8 64 cb fe ff       	call   f0100e31 <cprintf>
f01142cd:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f01142d0:	83 ec 0c             	sub    $0xc,%esp
f01142d3:	68 7c 81 13 f0       	push   $0xf013817c
f01142d8:	e8 54 cb fe ff       	call   f0100e31 <cprintf>
f01142dd:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01142e0:	e8 9b 86 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01142e5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f01142e8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01142eb:	89 d0                	mov    %edx,%eax
f01142ed:	c1 e0 03             	shl    $0x3,%eax
f01142f0:	01 d0                	add    %edx,%eax
f01142f2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01142f9:	01 d0                	add    %edx,%eax
f01142fb:	c1 e0 03             	shl    $0x3,%eax
f01142fe:	83 ec 0c             	sub    $0xc,%esp
f0114301:	6a 06                	push   $0x6
f0114303:	50                   	push   %eax
f0114304:	6a 00                	push   $0x0
f0114306:	68 00 00 00 40       	push   $0x40000000
f011430b:	ff 75 cc             	pushl  -0x34(%ebp)
f011430e:	e8 50 48 ff ff       	call   f0108b63 <share_chunk>
f0114313:	83 c4 20             	add    $0x20,%esp
f0114316:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114319:	e8 62 86 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011431e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114321:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0114325:	75 0b                	jne    f0114332 <test_share_chunk+0x507>
f0114327:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011432a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011432d:	83 f8 01             	cmp    $0x1,%eax
f0114330:	74 28                	je     f011435a <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114332:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114335:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114338:	83 ec 0c             	sub    $0xc,%esp
f011433b:	50                   	push   %eax
f011433c:	ff 75 a0             	pushl  -0x60(%ebp)
f011433f:	68 2c 81 13 f0       	push   $0xf013812c
f0114344:	68 b9 03 00 00       	push   $0x3b9
f0114349:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011434e:	e8 6b c0 fe ff       	call   f01003be <_warn>
f0114353:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114356:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011435a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011435e:	74 04                	je     f0114364 <test_share_chunk+0x539>
f0114360:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114364:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114368:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011436f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114372:	05 00 80 02 00       	add    $0x28000,%eax
f0114377:	c1 e0 02             	shl    $0x2,%eax
f011437a:	83 ec 08             	sub    $0x8,%esp
f011437d:	6a 02                	push   $0x2
f011437f:	6a 07                	push   $0x7
f0114381:	6a 03                	push   $0x3
f0114383:	6a 07                	push   $0x7
f0114385:	6a 07                	push   $0x7
f0114387:	6a ff                	push   $0xffffffff
f0114389:	50                   	push   %eax
f011438a:	6a 00                	push   $0x0
f011438c:	68 00 00 00 40       	push   $0x40000000
f0114391:	ff 75 cc             	pushl  -0x34(%ebp)
f0114394:	e8 4b 29 00 00       	call   f0116ce4 <CCP>
f0114399:	83 c4 30             	add    $0x30,%esp
f011439c:	85 c0                	test   %eax,%eax
f011439e:	75 25                	jne    f01143c5 <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143a0:	83 ec 04             	sub    $0x4,%esp
f01143a3:	68 64 80 13 f0       	push   $0xf0138064
f01143a8:	68 c2 03 00 00       	push   $0x3c2
f01143ad:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01143b2:	e8 07 c0 fe ff       	call   f01003be <_warn>
f01143b7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01143be:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01143c5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01143c8:	89 d0                	mov    %edx,%eax
f01143ca:	01 c0                	add    %eax,%eax
f01143cc:	01 d0                	add    %edx,%eax
f01143ce:	c1 e0 02             	shl    $0x2,%eax
f01143d1:	83 ec 08             	sub    $0x8,%esp
f01143d4:	6a 02                	push   $0x2
f01143d6:	6a 07                	push   $0x7
f01143d8:	6a 03                	push   $0x3
f01143da:	6a 07                	push   $0x7
f01143dc:	6a 07                	push   $0x7
f01143de:	6a 03                	push   $0x3
f01143e0:	50                   	push   %eax
f01143e1:	6a 00                	push   $0x0
f01143e3:	68 00 00 00 40       	push   $0x40000000
f01143e8:	ff 75 cc             	pushl  -0x34(%ebp)
f01143eb:	e8 f4 28 00 00       	call   f0116ce4 <CCP>
f01143f0:	83 c4 30             	add    $0x30,%esp
f01143f3:	85 c0                	test   %eax,%eax
f01143f5:	75 1e                	jne    f0114415 <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143f7:	83 ec 04             	sub    $0x4,%esp
f01143fa:	68 64 80 13 f0       	push   $0xf0138064
f01143ff:	68 c9 03 00 00       	push   $0x3c9
f0114404:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114409:	e8 b0 bf fe ff       	call   f01003be <_warn>
f011440e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114411:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114415:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114419:	74 04                	je     f011441f <test_share_chunk+0x5f4>
f011441b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011441f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114423:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114426:	89 d0                	mov    %edx,%eax
f0114428:	01 c0                	add    %eax,%eax
f011442a:	01 d0                	add    %edx,%eax
f011442c:	c1 e0 02             	shl    $0x2,%eax
f011442f:	f7 d8                	neg    %eax
f0114431:	05 00 00 0a 00       	add    $0xa0000,%eax
f0114436:	83 ec 08             	sub    $0x8,%esp
f0114439:	6a 02                	push   $0x2
f011443b:	6a 07                	push   $0x7
f011443d:	6a 03                	push   $0x3
f011443f:	6a 07                	push   $0x7
f0114441:	6a 07                	push   $0x7
f0114443:	6a 02                	push   $0x2
f0114445:	50                   	push   %eax
f0114446:	68 00 30 00 00       	push   $0x3000
f011444b:	68 00 30 00 40       	push   $0x40003000
f0114450:	ff 75 cc             	pushl  -0x34(%ebp)
f0114453:	e8 8c 28 00 00       	call   f0116ce4 <CCP>
f0114458:	83 c4 30             	add    $0x30,%esp
f011445b:	85 c0                	test   %eax,%eax
f011445d:	75 1e                	jne    f011447d <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011445f:	83 ec 04             	sub    $0x4,%esp
f0114462:	68 64 80 13 f0       	push   $0xf0138064
f0114467:	68 d1 03 00 00       	push   $0x3d1
f011446c:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114471:	e8 48 bf fe ff       	call   f01003be <_warn>
f0114476:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114479:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011447d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114481:	74 04                	je     f0114487 <test_share_chunk+0x65c>
f0114483:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114487:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011448b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011448e:	c1 e0 02             	shl    $0x2,%eax
f0114491:	83 ec 08             	sub    $0x8,%esp
f0114494:	6a 02                	push   $0x2
f0114496:	6a 07                	push   $0x7
f0114498:	6a 03                	push   $0x3
f011449a:	6a 07                	push   $0x7
f011449c:	6a 07                	push   $0x7
f011449e:	6a 03                	push   $0x3
f01144a0:	50                   	push   %eax
f01144a1:	68 00 00 0a 00       	push   $0xa0000
f01144a6:	68 00 00 0a 40       	push   $0x400a0000
f01144ab:	ff 75 cc             	pushl  -0x34(%ebp)
f01144ae:	e8 31 28 00 00       	call   f0116ce4 <CCP>
f01144b3:	83 c4 30             	add    $0x30,%esp
f01144b6:	85 c0                	test   %eax,%eax
f01144b8:	75 1e                	jne    f01144d8 <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01144ba:	83 ec 04             	sub    $0x4,%esp
f01144bd:	68 64 80 13 f0       	push   $0xf0138064
f01144c2:	68 d9 03 00 00       	push   $0x3d9
f01144c7:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01144cc:	e8 ed be fe ff       	call   f01003be <_warn>
f01144d1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01144d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144dc:	74 04                	je     f01144e2 <test_share_chunk+0x6b7>
f01144de:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01144e6:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01144ea:	0f 84 92 00 00 00    	je     f0114582 <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f01144f0:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01144f7:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01144fe:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114505:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011450c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011450f:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0114512:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0114519:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114520:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114523:	8a 00                	mov    (%eax),%al
f0114525:	3c 41                	cmp    $0x41,%al
f0114527:	75 2d                	jne    f0114556 <test_share_chunk+0x72b>
f0114529:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011452c:	8a 00                	mov    (%eax),%al
f011452e:	3c 41                	cmp    $0x41,%al
f0114530:	75 24                	jne    f0114556 <test_share_chunk+0x72b>
f0114532:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114535:	8a 00                	mov    (%eax),%al
f0114537:	3c 41                	cmp    $0x41,%al
f0114539:	75 1b                	jne    f0114556 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011453b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011453e:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114540:	3c 44                	cmp    $0x44,%al
f0114542:	75 12                	jne    f0114556 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114544:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114547:	8a 00                	mov    (%eax),%al
f0114549:	3c 44                	cmp    $0x44,%al
f011454b:	75 09                	jne    f0114556 <test_share_chunk+0x72b>
f011454d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114550:	8a 00                	mov    (%eax),%al
f0114552:	3c 44                	cmp    $0x44,%al
f0114554:	74 1e                	je     f0114574 <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114556:	83 ec 04             	sub    $0x4,%esp
f0114559:	68 ac 80 13 f0       	push   $0xf01380ac
f011455e:	68 eb 03 00 00       	push   $0x3eb
f0114563:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114568:	e8 51 be fe ff       	call   f01003be <_warn>
f011456d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114570:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114574:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114578:	74 04                	je     f011457e <test_share_chunk+0x753>
f011457a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011457e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114582:	83 ec 0c             	sub    $0xc,%esp
f0114585:	68 1e 77 13 f0       	push   $0xf013771e
f011458a:	e8 a2 c8 fe ff       	call   f0100e31 <cprintf>
f011458f:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0114592:	83 ec 0c             	sub    $0xc,%esp
f0114595:	68 b8 81 13 f0       	push   $0xf01381b8
f011459a:	e8 92 c8 fe ff       	call   f0100e31 <cprintf>
f011459f:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01145a2:	e8 d9 83 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01145a7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f01145aa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145ad:	89 d0                	mov    %edx,%eax
f01145af:	01 c0                	add    %eax,%eax
f01145b1:	01 d0                	add    %edx,%eax
f01145b3:	01 c0                	add    %eax,%eax
f01145b5:	01 d0                	add    %edx,%eax
f01145b7:	83 ec 0c             	sub    $0xc,%esp
f01145ba:	6a 04                	push   $0x4
f01145bc:	50                   	push   %eax
f01145bd:	68 00 fc 3f 00       	push   $0x3ffc00
f01145c2:	68 00 fc 09 00       	push   $0x9fc00
f01145c7:	ff 75 cc             	pushl  -0x34(%ebp)
f01145ca:	e8 94 45 ff ff       	call   f0108b63 <share_chunk>
f01145cf:	83 c4 20             	add    $0x20,%esp
f01145d2:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01145d5:	e8 a6 83 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01145da:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01145dd:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f01145e1:	75 0b                	jne    f01145ee <test_share_chunk+0x7c3>
f01145e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145e6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01145e9:	83 f8 01             	cmp    $0x1,%eax
f01145ec:	74 28                	je     f0114616 <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01145ee:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145f1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01145f4:	83 ec 0c             	sub    $0xc,%esp
f01145f7:	50                   	push   %eax
f01145f8:	ff 75 8c             	pushl  -0x74(%ebp)
f01145fb:	68 2c 81 13 f0       	push   $0xf013812c
f0114600:	68 01 04 00 00       	push   $0x401
f0114605:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011460a:	e8 af bd fe ff       	call   f01003be <_warn>
f011460f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114612:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114616:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011461a:	74 04                	je     f0114620 <test_share_chunk+0x7f5>
f011461c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114620:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114624:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011462b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011462e:	89 d0                	mov    %edx,%eax
f0114630:	01 c0                	add    %eax,%eax
f0114632:	01 d0                	add    %edx,%eax
f0114634:	c1 e0 02             	shl    $0x2,%eax
f0114637:	83 ec 08             	sub    $0x8,%esp
f011463a:	6a 02                	push   $0x2
f011463c:	6a 07                	push   $0x7
f011463e:	6a 07                	push   $0x7
f0114640:	6a 07                	push   $0x7
f0114642:	6a 05                	push   $0x5
f0114644:	6a ff                	push   $0xffffffff
f0114646:	50                   	push   %eax
f0114647:	68 00 f0 3f 00       	push   $0x3ff000
f011464c:	68 00 f0 09 00       	push   $0x9f000
f0114651:	ff 75 cc             	pushl  -0x34(%ebp)
f0114654:	e8 8b 26 00 00       	call   f0116ce4 <CCP>
f0114659:	83 c4 30             	add    $0x30,%esp
f011465c:	85 c0                	test   %eax,%eax
f011465e:	75 25                	jne    f0114685 <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114660:	83 ec 04             	sub    $0x4,%esp
f0114663:	68 64 80 13 f0       	push   $0xf0138064
f0114668:	68 0a 04 00 00       	push   $0x40a
f011466d:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114672:	e8 47 bd fe ff       	call   f01003be <_warn>
f0114677:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011467a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011467e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114685:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114689:	74 04                	je     f011468f <test_share_chunk+0x864>
f011468b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011468f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114693:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114696:	c1 e0 02             	shl    $0x2,%eax
f0114699:	83 ec 08             	sub    $0x8,%esp
f011469c:	6a 02                	push   $0x2
f011469e:	6a 07                	push   $0x7
f01146a0:	6a 07                	push   $0x7
f01146a2:	6a 07                	push   $0x7
f01146a4:	6a 05                	push   $0x5
f01146a6:	6a 03                	push   $0x3
f01146a8:	50                   	push   %eax
f01146a9:	68 00 f0 3f 00       	push   $0x3ff000
f01146ae:	68 00 f0 09 00       	push   $0x9f000
f01146b3:	ff 75 cc             	pushl  -0x34(%ebp)
f01146b6:	e8 29 26 00 00       	call   f0116ce4 <CCP>
f01146bb:	83 c4 30             	add    $0x30,%esp
f01146be:	85 c0                	test   %eax,%eax
f01146c0:	75 1e                	jne    f01146e0 <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01146c2:	83 ec 04             	sub    $0x4,%esp
f01146c5:	68 64 80 13 f0       	push   $0xf0138064
f01146ca:	68 13 04 00 00       	push   $0x413
f01146cf:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01146d4:	e8 e5 bc fe ff       	call   f01003be <_warn>
f01146d9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146dc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146e0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146e4:	74 04                	je     f01146ea <test_share_chunk+0x8bf>
f01146e6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146ea:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01146ee:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146f1:	c1 e0 03             	shl    $0x3,%eax
f01146f4:	83 ec 08             	sub    $0x8,%esp
f01146f7:	6a 02                	push   $0x2
f01146f9:	6a 07                	push   $0x7
f01146fb:	6a 07                	push   $0x7
f01146fd:	6a 07                	push   $0x7
f01146ff:	6a 05                	push   $0x5
f0114701:	6a 04                	push   $0x4
f0114703:	50                   	push   %eax
f0114704:	68 00 00 40 00       	push   $0x400000
f0114709:	68 00 00 0a 00       	push   $0xa0000
f011470e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114711:	e8 ce 25 00 00       	call   f0116ce4 <CCP>
f0114716:	83 c4 30             	add    $0x30,%esp
f0114719:	85 c0                	test   %eax,%eax
f011471b:	75 1e                	jne    f011473b <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011471d:	83 ec 04             	sub    $0x4,%esp
f0114720:	68 64 80 13 f0       	push   $0xf0138064
f0114725:	68 1b 04 00 00       	push   $0x41b
f011472a:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011472f:	e8 8a bc fe ff       	call   f01003be <_warn>
f0114734:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114737:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011473b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011473f:	74 04                	je     f0114745 <test_share_chunk+0x91a>
f0114741:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114745:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114749:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011474d:	0f 84 b2 00 00 00    	je     f0114805 <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f0114753:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f011475a:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0114761:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0114768:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f011476f:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114776:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f011477d:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114784:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011478b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011478e:	8a 00                	mov    (%eax),%al
f0114790:	3c 44                	cmp    $0x44,%al
f0114792:	75 45                	jne    f01147d9 <test_share_chunk+0x9ae>
f0114794:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114797:	8a 00                	mov    (%eax),%al
f0114799:	3c 44                	cmp    $0x44,%al
f011479b:	75 3c                	jne    f01147d9 <test_share_chunk+0x9ae>
f011479d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01147a0:	8a 00                	mov    (%eax),%al
f01147a2:	3c 44                	cmp    $0x44,%al
f01147a4:	75 33                	jne    f01147d9 <test_share_chunk+0x9ae>
f01147a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01147a9:	8a 00                	mov    (%eax),%al
f01147ab:	3c 44                	cmp    $0x44,%al
f01147ad:	75 2a                	jne    f01147d9 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01147af:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01147b2:	8a 10                	mov    (%eax),%dl
f01147b4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01147b7:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01147b9:	38 c2                	cmp    %al,%dl
f01147bb:	75 1c                	jne    f01147d9 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01147bd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01147c0:	8a 10                	mov    (%eax),%dl
f01147c2:	8b 45 88             	mov    -0x78(%ebp),%eax
f01147c5:	8a 00                	mov    (%eax),%al
f01147c7:	38 c2                	cmp    %al,%dl
f01147c9:	75 0e                	jne    f01147d9 <test_share_chunk+0x9ae>
f01147cb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01147ce:	8a 10                	mov    (%eax),%dl
f01147d0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01147d3:	8a 00                	mov    (%eax),%al
f01147d5:	38 c2                	cmp    %al,%dl
f01147d7:	74 1e                	je     f01147f7 <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01147d9:	83 ec 04             	sub    $0x4,%esp
f01147dc:	68 ac 80 13 f0       	push   $0xf01380ac
f01147e1:	68 30 04 00 00       	push   $0x430
f01147e6:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01147eb:	e8 ce bb fe ff       	call   f01003be <_warn>
f01147f0:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01147f3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01147f7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147fb:	74 04                	je     f0114801 <test_share_chunk+0x9d6>
f01147fd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114801:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114805:	83 ec 0c             	sub    $0xc,%esp
f0114808:	68 f0 81 13 f0       	push   $0xf01381f0
f011480d:	e8 1f c6 fe ff       	call   f0100e31 <cprintf>
f0114812:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114815:	83 ec 08             	sub    $0x8,%esp
f0114818:	ff 75 e4             	pushl  -0x1c(%ebp)
f011481b:	68 00 82 13 f0       	push   $0xf0138200
f0114820:	e8 0c c6 fe ff       	call   f0100e31 <cprintf>
f0114825:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114828:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011482c:	75 10                	jne    f011483e <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f011482e:	83 ec 0c             	sub    $0xc,%esp
f0114831:	68 30 82 13 f0       	push   $0xf0138230
f0114836:	e8 f6 c5 fe ff       	call   f0100e31 <cprintf>
f011483b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011483e:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f0114843:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114846:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114849:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011484c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114851:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114854:	5b                   	pop    %ebx
f0114855:	5e                   	pop    %esi
f0114856:	5f                   	pop    %edi
f0114857:	5d                   	pop    %ebp
f0114858:	c3                   	ret    

f0114859 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0114859:	55                   	push   %ebp
f011485a:	89 e5                	mov    %esp,%ebp
f011485c:	57                   	push   %edi
f011485d:	56                   	push   %esi
f011485e:	53                   	push   %ebx
f011485f:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114865:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011486b:	bb 30 74 13 f0       	mov    $0xf0137430,%ebx
f0114870:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114875:	89 c7                	mov    %eax,%edi
f0114877:	89 de                	mov    %ebx,%esi
f0114879:	89 d1                	mov    %edx,%ecx
f011487b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011487d:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114883:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114888:	b0 00                	mov    $0x0,%al
f011488a:	89 d7                	mov    %edx,%edi
f011488c:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011488e:	6a 00                	push   $0x0
f0114890:	6a 0a                	push   $0xa
f0114892:	6a 14                	push   $0x14
f0114894:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011489a:	50                   	push   %eax
f011489b:	e8 cd 43 ff ff       	call   f0108c6d <env_create>
f01148a0:	83 c4 10             	add    $0x10,%esp
f01148a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01148a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148a9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01148af:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01148b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148b5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01148bb:	89 45 90             	mov    %eax,-0x70(%ebp)
f01148be:	8b 45 90             	mov    -0x70(%ebp),%eax
f01148c1:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01148c4:	83 ec 0c             	sub    $0xc,%esp
f01148c7:	ff 75 cc             	pushl  -0x34(%ebp)
f01148ca:	e8 e1 23 00 00       	call   f0116cb0 <ClearUserSpace>
f01148cf:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01148d2:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01148d9:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f01148e0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f01148e7:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f01148eb:	83 ec 0c             	sub    $0xc,%esp
f01148ee:	68 6c 82 13 f0       	push   $0xf013826c
f01148f3:	e8 39 c5 fe ff       	call   f0100e31 <cprintf>
f01148f8:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f01148fb:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114902:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f0114909:	eb 03                	jmp    f011490e <test_allocate_chunk+0xb5>
f011490b:	ff 4d e4             	decl   -0x1c(%ebp)
f011490e:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114915:	76 09                	jbe    f0114920 <test_allocate_chunk+0xc7>
f0114917:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011491a:	8a 00                	mov    (%eax),%al
f011491c:	84 c0                	test   %al,%al
f011491e:	74 eb                	je     f011490b <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f0114920:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114927:	75 06                	jne    f011492f <test_allocate_chunk+0xd6>
f0114929:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011492c:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f011492f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114932:	8a 00                	mov    (%eax),%al
f0114934:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f011493a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011493d:	8a 00                	mov    (%eax),%al
f011493f:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0114945:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114948:	8a 00                	mov    (%eax),%al
f011494a:	0f be c0             	movsbl %al,%eax
f011494d:	83 ec 08             	sub    $0x8,%esp
f0114950:	50                   	push   %eax
f0114951:	68 96 82 13 f0       	push   $0xf0138296
f0114956:	e8 d6 c4 fe ff       	call   f0100e31 <cprintf>
f011495b:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f011495e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114961:	8a 00                	mov    (%eax),%al
f0114963:	0f be c0             	movsbl %al,%eax
f0114966:	83 ec 08             	sub    $0x8,%esp
f0114969:	50                   	push   %eax
f011496a:	68 a2 82 13 f0       	push   $0xf01382a2
f011496f:	e8 bd c4 fe ff       	call   f0100e31 <cprintf>
f0114974:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114977:	83 ec 08             	sub    $0x8,%esp
f011497a:	68 00 f0 bf ef       	push   $0xefbff000
f011497f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114982:	e8 90 22 00 00       	call   f0116c17 <GP>
f0114987:	83 c4 10             	add    $0x10,%esp
f011498a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011498d:	e8 ee 7f ff ff       	call   f010c980 <sys_calculate_free_frames>
f0114992:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114995:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114998:	c1 e0 02             	shl    $0x2,%eax
f011499b:	6a 02                	push   $0x2
f011499d:	50                   	push   %eax
f011499e:	68 00 f0 bf ef       	push   $0xefbff000
f01149a3:	ff 75 cc             	pushl  -0x34(%ebp)
f01149a6:	e8 d2 41 ff ff       	call   f0108b7d <allocate_chunk>
f01149ab:	83 c4 10             	add    $0x10,%esp
f01149ae:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01149b1:	e8 ca 7f ff ff       	call   f010c980 <sys_calculate_free_frames>
f01149b6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01149b9:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01149bd:	75 08                	jne    f01149c7 <test_allocate_chunk+0x16e>
f01149bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149c2:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01149c5:	74 2a                	je     f01149f1 <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01149c7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149ca:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01149cd:	83 ec 08             	sub    $0x8,%esp
f01149d0:	6a 00                	push   $0x0
f01149d2:	50                   	push   %eax
f01149d3:	ff 75 b0             	pushl  -0x50(%ebp)
f01149d6:	68 b0 82 13 f0       	push   $0xf01382b0
f01149db:	68 70 04 00 00       	push   $0x470
f01149e0:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01149e5:	e8 d4 b9 fe ff       	call   f01003be <_warn>
f01149ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149ed:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01149f1:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01149f5:	74 04                	je     f01149fb <test_allocate_chunk+0x1a2>
f01149f7:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01149fb:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01149ff:	e8 7c 7f ff ff       	call   f010c980 <sys_calculate_free_frames>
f0114a04:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114a07:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a0a:	01 c0                	add    %eax,%eax
f0114a0c:	89 c1                	mov    %eax,%ecx
f0114a0e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a11:	89 d0                	mov    %edx,%eax
f0114a13:	c1 e0 02             	shl    $0x2,%eax
f0114a16:	01 d0                	add    %edx,%eax
f0114a18:	f7 d8                	neg    %eax
f0114a1a:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114a1f:	6a 02                	push   $0x2
f0114a21:	51                   	push   %ecx
f0114a22:	50                   	push   %eax
f0114a23:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a26:	e8 52 41 ff ff       	call   f0108b7d <allocate_chunk>
f0114a2b:	83 c4 10             	add    $0x10,%esp
f0114a2e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114a31:	e8 4a 7f ff ff       	call   f010c980 <sys_calculate_free_frames>
f0114a36:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114a39:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114a3d:	75 08                	jne    f0114a47 <test_allocate_chunk+0x1ee>
f0114a3f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a42:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114a45:	74 2a                	je     f0114a71 <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114a47:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a4a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a4d:	83 ec 08             	sub    $0x8,%esp
f0114a50:	6a 00                	push   $0x0
f0114a52:	50                   	push   %eax
f0114a53:	ff 75 b0             	pushl  -0x50(%ebp)
f0114a56:	68 b0 82 13 f0       	push   $0xf01382b0
f0114a5b:	68 7e 04 00 00       	push   $0x47e
f0114a60:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114a65:	e8 54 b9 fe ff       	call   f01003be <_warn>
f0114a6a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a6d:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114a71:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114a75:	74 04                	je     f0114a7b <test_allocate_chunk+0x222>
f0114a77:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114a7b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114a7f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a82:	c1 e0 02             	shl    $0x2,%eax
f0114a85:	83 ec 08             	sub    $0x8,%esp
f0114a88:	6a 03                	push   $0x3
f0114a8a:	6a 00                	push   $0x0
f0114a8c:	6a 00                	push   $0x0
f0114a8e:	68 ff 0f 00 00       	push   $0xfff
f0114a93:	ff 75 b8             	pushl  -0x48(%ebp)
f0114a96:	6a 01                	push   $0x1
f0114a98:	50                   	push   %eax
f0114a99:	68 00 f0 bf ef       	push   $0xefbff000
f0114a9e:	6a 00                	push   $0x0
f0114aa0:	ff 75 cc             	pushl  -0x34(%ebp)
f0114aa3:	e8 3c 22 00 00       	call   f0116ce4 <CCP>
f0114aa8:	83 c4 30             	add    $0x30,%esp
f0114aab:	85 c0                	test   %eax,%eax
f0114aad:	75 1e                	jne    f0114acd <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114aaf:	83 ec 04             	sub    $0x4,%esp
f0114ab2:	68 18 83 13 f0       	push   $0xf0138318
f0114ab7:	68 86 04 00 00       	push   $0x486
f0114abc:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114ac1:	e8 f8 b8 fe ff       	call   f01003be <_warn>
f0114ac6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114ac9:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114acd:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ad1:	74 04                	je     f0114ad7 <test_allocate_chunk+0x27e>
f0114ad3:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114ad7:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114adb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114ade:	8a 10                	mov    (%eax),%dl
f0114ae0:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114ae6:	38 c2                	cmp    %al,%dl
f0114ae8:	75 0f                	jne    f0114af9 <test_allocate_chunk+0x2a0>
f0114aea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114aed:	8a 10                	mov    (%eax),%dl
f0114aef:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114af5:	38 c2                	cmp    %al,%dl
f0114af7:	74 1e                	je     f0114b17 <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114af9:	83 ec 04             	sub    $0x4,%esp
f0114afc:	68 64 83 13 f0       	push   $0xf0138364
f0114b01:	68 8e 04 00 00       	push   $0x48e
f0114b06:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114b0b:	e8 ae b8 fe ff       	call   f01003be <_warn>
f0114b10:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b13:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114b17:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114b1b:	74 04                	je     f0114b21 <test_allocate_chunk+0x2c8>
f0114b1d:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114b21:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114b25:	83 ec 0c             	sub    $0xc,%esp
f0114b28:	68 e1 80 13 f0       	push   $0xf01380e1
f0114b2d:	e8 ff c2 fe ff       	call   f0100e31 <cprintf>
f0114b32:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114b35:	83 ec 0c             	sub    $0xc,%esp
f0114b38:	68 9c 83 13 f0       	push   $0xf013839c
f0114b3d:	e8 ef c2 fe ff       	call   f0100e31 <cprintf>
f0114b42:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114b45:	e8 36 7e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0114b4a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114b4d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b50:	c1 e0 05             	shl    $0x5,%eax
f0114b53:	68 02 0e 00 00       	push   $0xe02
f0114b58:	50                   	push   %eax
f0114b59:	6a 00                	push   $0x0
f0114b5b:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b5e:	e8 1a 40 ff ff       	call   f0108b7d <allocate_chunk>
f0114b63:	83 c4 10             	add    $0x10,%esp
f0114b66:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114b69:	e8 12 7e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0114b6e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114b71:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114b75:	75 36                	jne    f0114bad <test_allocate_chunk+0x354>
f0114b77:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b7a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b7d:	89 c1                	mov    %eax,%ecx
f0114b7f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b82:	c1 e0 05             	shl    $0x5,%eax
f0114b85:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114b88:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b8f:	99                   	cltd   
f0114b90:	f7 fe                	idiv   %esi
f0114b92:	89 c3                	mov    %eax,%ebx
f0114b94:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b97:	c1 e0 05             	shl    $0x5,%eax
f0114b9a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114b9d:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ba4:	99                   	cltd   
f0114ba5:	f7 fe                	idiv   %esi
f0114ba7:	01 d8                	add    %ebx,%eax
f0114ba9:	39 c1                	cmp    %eax,%ecx
f0114bab:	74 54                	je     f0114c01 <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114bad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bb0:	c1 e0 05             	shl    $0x5,%eax
f0114bb3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114bb6:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114bbd:	99                   	cltd   
f0114bbe:	f7 ff                	idiv   %edi
f0114bc0:	89 c1                	mov    %eax,%ecx
f0114bc2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bc5:	c1 e0 05             	shl    $0x5,%eax
f0114bc8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114bcb:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114bd2:	99                   	cltd   
f0114bd3:	f7 fe                	idiv   %esi
f0114bd5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114bd8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bdb:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114bde:	83 ec 08             	sub    $0x8,%esp
f0114be1:	52                   	push   %edx
f0114be2:	50                   	push   %eax
f0114be3:	ff 75 a8             	pushl  -0x58(%ebp)
f0114be6:	68 dc 83 13 f0       	push   $0xf01383dc
f0114beb:	68 a3 04 00 00       	push   $0x4a3
f0114bf0:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114bf5:	e8 c4 b7 fe ff       	call   f01003be <_warn>
f0114bfa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114bfd:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114c01:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c05:	74 04                	je     f0114c0b <test_allocate_chunk+0x3b2>
f0114c07:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114c0b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114c0f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114c16:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c19:	c1 e0 05             	shl    $0x5,%eax
f0114c1c:	83 ec 08             	sub    $0x8,%esp
f0114c1f:	6a 03                	push   $0x3
f0114c21:	6a 00                	push   $0x0
f0114c23:	6a 00                	push   $0x0
f0114c25:	68 07 0e 00 00       	push   $0xe07
f0114c2a:	68 03 0e 00 00       	push   $0xe03
f0114c2f:	6a 01                	push   $0x1
f0114c31:	50                   	push   %eax
f0114c32:	6a 00                	push   $0x0
f0114c34:	6a 00                	push   $0x0
f0114c36:	ff 75 cc             	pushl  -0x34(%ebp)
f0114c39:	e8 a6 20 00 00       	call   f0116ce4 <CCP>
f0114c3e:	83 c4 30             	add    $0x30,%esp
f0114c41:	85 c0                	test   %eax,%eax
f0114c43:	75 25                	jne    f0114c6a <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114c45:	83 ec 04             	sub    $0x4,%esp
f0114c48:	68 18 83 13 f0       	push   $0xf0138318
f0114c4d:	68 ac 04 00 00       	push   $0x4ac
f0114c52:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114c57:	e8 62 b7 fe ff       	call   f01003be <_warn>
f0114c5c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114c5f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114c63:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114c6a:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c6e:	74 04                	je     f0114c74 <test_allocate_chunk+0x41b>
f0114c70:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114c74:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114c78:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114c7c:	74 5a                	je     f0114cd8 <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114c7e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c81:	01 c0                	add    %eax,%eax
f0114c83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114c86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c89:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114c8c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c8f:	01 c0                	add    %eax,%eax
f0114c91:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114c94:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114c97:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114c9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c9d:	8a 00                	mov    (%eax),%al
f0114c9f:	3c 4b                	cmp    $0x4b,%al
f0114ca1:	75 09                	jne    f0114cac <test_allocate_chunk+0x453>
f0114ca3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ca6:	8a 00                	mov    (%eax),%al
f0114ca8:	3c 4d                	cmp    $0x4d,%al
f0114caa:	74 1e                	je     f0114cca <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114cac:	83 ec 04             	sub    $0x4,%esp
f0114caf:	68 64 83 13 f0       	push   $0xf0138364
f0114cb4:	68 ba 04 00 00       	push   $0x4ba
f0114cb9:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114cbe:	e8 fb b6 fe ff       	call   f01003be <_warn>
f0114cc3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114cc6:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114cca:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114cce:	74 04                	je     f0114cd4 <test_allocate_chunk+0x47b>
f0114cd0:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114cd4:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114cd8:	83 ec 0c             	sub    $0xc,%esp
f0114cdb:	68 bb 76 13 f0       	push   $0xf01376bb
f0114ce0:	e8 4c c1 fe ff       	call   f0100e31 <cprintf>
f0114ce5:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114ce8:	83 ec 0c             	sub    $0xc,%esp
f0114ceb:	68 3c 84 13 f0       	push   $0xf013843c
f0114cf0:	e8 3c c1 fe ff       	call   f0100e31 <cprintf>
f0114cf5:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114cf8:	e8 83 7c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0114cfd:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114d00:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d03:	c1 e0 06             	shl    $0x6,%eax
f0114d06:	89 c2                	mov    %eax,%edx
f0114d08:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d0b:	c1 e0 05             	shl    $0x5,%eax
f0114d0e:	6a 00                	push   $0x0
f0114d10:	52                   	push   %edx
f0114d11:	50                   	push   %eax
f0114d12:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d15:	e8 63 3e ff ff       	call   f0108b7d <allocate_chunk>
f0114d1a:	83 c4 10             	add    $0x10,%esp
f0114d1d:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114d20:	e8 5b 7c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0114d25:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114d28:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114d2c:	75 36                	jne    f0114d64 <test_allocate_chunk+0x50b>
f0114d2e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d31:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d34:	89 c1                	mov    %eax,%ecx
f0114d36:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d39:	c1 e0 06             	shl    $0x6,%eax
f0114d3c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114d3f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114d46:	99                   	cltd   
f0114d47:	f7 ff                	idiv   %edi
f0114d49:	89 c3                	mov    %eax,%ebx
f0114d4b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d4e:	c1 e0 06             	shl    $0x6,%eax
f0114d51:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d54:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114d5b:	99                   	cltd   
f0114d5c:	f7 fe                	idiv   %esi
f0114d5e:	01 d8                	add    %ebx,%eax
f0114d60:	39 c1                	cmp    %eax,%ecx
f0114d62:	74 54                	je     f0114db8 <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114d64:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d67:	c1 e0 06             	shl    $0x6,%eax
f0114d6a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114d6d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114d74:	99                   	cltd   
f0114d75:	f7 fb                	idiv   %ebx
f0114d77:	89 c1                	mov    %eax,%ecx
f0114d79:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d7c:	c1 e0 06             	shl    $0x6,%eax
f0114d7f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d82:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114d89:	99                   	cltd   
f0114d8a:	f7 ff                	idiv   %edi
f0114d8c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114d8f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d92:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d95:	83 ec 08             	sub    $0x8,%esp
f0114d98:	52                   	push   %edx
f0114d99:	50                   	push   %eax
f0114d9a:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114d9d:	68 dc 83 13 f0       	push   $0xf01383dc
f0114da2:	68 d0 04 00 00       	push   $0x4d0
f0114da7:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114dac:	e8 0d b6 fe ff       	call   f01003be <_warn>
f0114db1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114db4:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114db8:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114dbc:	74 04                	je     f0114dc2 <test_allocate_chunk+0x569>
f0114dbe:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114dc2:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114dc6:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114dcd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dd0:	c1 e0 06             	shl    $0x6,%eax
f0114dd3:	89 c2                	mov    %eax,%edx
f0114dd5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dd8:	c1 e0 05             	shl    $0x5,%eax
f0114ddb:	83 ec 08             	sub    $0x8,%esp
f0114dde:	6a 03                	push   $0x3
f0114de0:	6a 00                	push   $0x0
f0114de2:	6a 00                	push   $0x0
f0114de4:	68 07 0e 00 00       	push   $0xe07
f0114de9:	6a 01                	push   $0x1
f0114deb:	6a 01                	push   $0x1
f0114ded:	52                   	push   %edx
f0114dee:	50                   	push   %eax
f0114def:	6a 00                	push   $0x0
f0114df1:	ff 75 cc             	pushl  -0x34(%ebp)
f0114df4:	e8 eb 1e 00 00       	call   f0116ce4 <CCP>
f0114df9:	83 c4 30             	add    $0x30,%esp
f0114dfc:	85 c0                	test   %eax,%eax
f0114dfe:	75 25                	jne    f0114e25 <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114e00:	83 ec 04             	sub    $0x4,%esp
f0114e03:	68 18 83 13 f0       	push   $0xf0138318
f0114e08:	68 d9 04 00 00       	push   $0x4d9
f0114e0d:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114e12:	e8 a7 b5 fe ff       	call   f01003be <_warn>
f0114e17:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114e1a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114e1e:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114e25:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114e29:	74 04                	je     f0114e2f <test_allocate_chunk+0x5d6>
f0114e2b:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114e2f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114e33:	83 ec 0c             	sub    $0xc,%esp
f0114e36:	68 1e 77 13 f0       	push   $0xf013771e
f0114e3b:	e8 f1 bf fe ff       	call   f0100e31 <cprintf>
f0114e40:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114e43:	83 ec 0c             	sub    $0xc,%esp
f0114e46:	68 7c 84 13 f0       	push   $0xf013847c
f0114e4b:	e8 e1 bf fe ff       	call   f0100e31 <cprintf>
f0114e50:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114e53:	e8 28 7b ff ff       	call   f010c980 <sys_calculate_free_frames>
f0114e58:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114e5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e5e:	c1 e0 06             	shl    $0x6,%eax
f0114e61:	68 06 0e 00 00       	push   $0xe06
f0114e66:	50                   	push   %eax
f0114e67:	68 00 00 00 80       	push   $0x80000000
f0114e6c:	ff 75 cc             	pushl  -0x34(%ebp)
f0114e6f:	e8 09 3d ff ff       	call   f0108b7d <allocate_chunk>
f0114e74:	83 c4 10             	add    $0x10,%esp
f0114e77:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114e7a:	e8 01 7b ff ff       	call   f010c980 <sys_calculate_free_frames>
f0114e7f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114e82:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114e86:	75 36                	jne    f0114ebe <test_allocate_chunk+0x665>
f0114e88:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e8b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e8e:	89 c1                	mov    %eax,%ecx
f0114e90:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e93:	c1 e0 06             	shl    $0x6,%eax
f0114e96:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114e99:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114ea0:	99                   	cltd   
f0114ea1:	f7 fb                	idiv   %ebx
f0114ea3:	89 c3                	mov    %eax,%ebx
f0114ea5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ea8:	c1 e0 06             	shl    $0x6,%eax
f0114eab:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114eae:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114eb5:	99                   	cltd   
f0114eb6:	f7 fe                	idiv   %esi
f0114eb8:	01 d8                	add    %ebx,%eax
f0114eba:	39 c1                	cmp    %eax,%ecx
f0114ebc:	74 54                	je     f0114f12 <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114ebe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ec1:	c1 e0 06             	shl    $0x6,%eax
f0114ec4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ec7:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114ece:	99                   	cltd   
f0114ecf:	f7 ff                	idiv   %edi
f0114ed1:	89 c1                	mov    %eax,%ecx
f0114ed3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ed6:	c1 e0 06             	shl    $0x6,%eax
f0114ed9:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114edc:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114ee3:	99                   	cltd   
f0114ee4:	f7 fb                	idiv   %ebx
f0114ee6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114ee9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114eec:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114eef:	83 ec 08             	sub    $0x8,%esp
f0114ef2:	52                   	push   %edx
f0114ef3:	50                   	push   %eax
f0114ef4:	ff 75 9c             	pushl  -0x64(%ebp)
f0114ef7:	68 dc 83 13 f0       	push   $0xf01383dc
f0114efc:	68 ef 04 00 00       	push   $0x4ef
f0114f01:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114f06:	e8 b3 b4 fe ff       	call   f01003be <_warn>
f0114f0b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f0e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114f12:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114f16:	74 04                	je     f0114f1c <test_allocate_chunk+0x6c3>
f0114f18:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114f1c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114f20:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114f27:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f2a:	c1 e0 06             	shl    $0x6,%eax
f0114f2d:	83 ec 08             	sub    $0x8,%esp
f0114f30:	6a 03                	push   $0x3
f0114f32:	6a 00                	push   $0x0
f0114f34:	6a 00                	push   $0x0
f0114f36:	68 07 0e 00 00       	push   $0xe07
f0114f3b:	68 07 0e 00 00       	push   $0xe07
f0114f40:	6a 01                	push   $0x1
f0114f42:	50                   	push   %eax
f0114f43:	68 00 00 00 80       	push   $0x80000000
f0114f48:	6a 00                	push   $0x0
f0114f4a:	ff 75 cc             	pushl  -0x34(%ebp)
f0114f4d:	e8 92 1d 00 00       	call   f0116ce4 <CCP>
f0114f52:	83 c4 30             	add    $0x30,%esp
f0114f55:	85 c0                	test   %eax,%eax
f0114f57:	75 25                	jne    f0114f7e <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114f59:	83 ec 04             	sub    $0x4,%esp
f0114f5c:	68 18 83 13 f0       	push   $0xf0138318
f0114f61:	68 f8 04 00 00       	push   $0x4f8
f0114f66:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114f6b:	e8 4e b4 fe ff       	call   f01003be <_warn>
f0114f70:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114f73:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114f77:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0114f7e:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114f82:	74 04                	je     f0114f88 <test_allocate_chunk+0x72f>
f0114f84:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114f88:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114f8c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114f90:	74 6f                	je     f0115001 <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114f92:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114f95:	01 c0                	add    %eax,%eax
f0114f97:	05 00 00 00 80       	add    $0x80000000,%eax
f0114f9c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114f9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114fa2:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114fa5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114fa8:	89 d0                	mov    %edx,%eax
f0114faa:	c1 e0 02             	shl    $0x2,%eax
f0114fad:	01 d0                	add    %edx,%eax
f0114faf:	01 c0                	add    %eax,%eax
f0114fb1:	01 d0                	add    %edx,%eax
f0114fb3:	01 c0                	add    %eax,%eax
f0114fb5:	05 00 00 00 80       	add    $0x80000000,%eax
f0114fba:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114fbd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114fc0:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114fc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114fc6:	8a 00                	mov    (%eax),%al
f0114fc8:	3c 4b                	cmp    $0x4b,%al
f0114fca:	75 09                	jne    f0114fd5 <test_allocate_chunk+0x77c>
f0114fcc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114fcf:	8a 00                	mov    (%eax),%al
f0114fd1:	3c 4d                	cmp    $0x4d,%al
f0114fd3:	74 1e                	je     f0114ff3 <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114fd5:	83 ec 04             	sub    $0x4,%esp
f0114fd8:	68 64 83 13 f0       	push   $0xf0138364
f0114fdd:	68 06 05 00 00       	push   $0x506
f0114fe2:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0114fe7:	e8 d2 b3 fe ff       	call   f01003be <_warn>
f0114fec:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114fef:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114ff3:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ff7:	74 04                	je     f0114ffd <test_allocate_chunk+0x7a4>
f0114ff9:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114ffd:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0115001:	83 ec 0c             	sub    $0xc,%esp
f0115004:	68 f0 81 13 f0       	push   $0xf01381f0
f0115009:	e8 23 be fe ff       	call   f0100e31 <cprintf>
f011500e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0115011:	83 ec 0c             	sub    $0xc,%esp
f0115014:	68 b8 84 13 f0       	push   $0xf01384b8
f0115019:	e8 13 be fe ff       	call   f0100e31 <cprintf>
f011501e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115021:	e8 5a 79 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0115026:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0115029:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011502c:	89 d0                	mov    %edx,%eax
f011502e:	01 c0                	add    %eax,%eax
f0115030:	01 d0                	add    %edx,%eax
f0115032:	01 c0                	add    %eax,%eax
f0115034:	01 d0                	add    %edx,%eax
f0115036:	68 04 0e 00 00       	push   $0xe04
f011503b:	50                   	push   %eax
f011503c:	68 00 fc 3f 40       	push   $0x403ffc00
f0115041:	ff 75 cc             	pushl  -0x34(%ebp)
f0115044:	e8 34 3b ff ff       	call   f0108b7d <allocate_chunk>
f0115049:	83 c4 10             	add    $0x10,%esp
f011504c:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011504f:	e8 2c 79 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0115054:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0115057:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f011505b:	75 0b                	jne    f0115068 <test_allocate_chunk+0x80f>
f011505d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115060:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115063:	83 f8 05             	cmp    $0x5,%eax
f0115066:	74 2a                	je     f0115092 <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0115068:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011506b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011506e:	83 ec 08             	sub    $0x8,%esp
f0115071:	6a 05                	push   $0x5
f0115073:	50                   	push   %eax
f0115074:	ff 75 98             	pushl  -0x68(%ebp)
f0115077:	68 dc 83 13 f0       	push   $0xf01383dc
f011507c:	68 1d 05 00 00       	push   $0x51d
f0115081:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115086:	e8 33 b3 fe ff       	call   f01003be <_warn>
f011508b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011508e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0115092:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115096:	74 04                	je     f011509c <test_allocate_chunk+0x843>
f0115098:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011509c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01150a0:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01150a7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01150aa:	89 d0                	mov    %edx,%eax
f01150ac:	01 c0                	add    %eax,%eax
f01150ae:	01 d0                	add    %edx,%eax
f01150b0:	c1 e0 02             	shl    $0x2,%eax
f01150b3:	83 ec 08             	sub    $0x8,%esp
f01150b6:	6a 03                	push   $0x3
f01150b8:	6a 00                	push   $0x0
f01150ba:	6a 00                	push   $0x0
f01150bc:	68 07 0e 00 00       	push   $0xe07
f01150c1:	68 05 0e 00 00       	push   $0xe05
f01150c6:	6a 01                	push   $0x1
f01150c8:	50                   	push   %eax
f01150c9:	68 00 f0 3f 40       	push   $0x403ff000
f01150ce:	6a 00                	push   $0x0
f01150d0:	ff 75 cc             	pushl  -0x34(%ebp)
f01150d3:	e8 0c 1c 00 00       	call   f0116ce4 <CCP>
f01150d8:	83 c4 30             	add    $0x30,%esp
f01150db:	85 c0                	test   %eax,%eax
f01150dd:	75 25                	jne    f0115104 <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01150df:	83 ec 04             	sub    $0x4,%esp
f01150e2:	68 18 83 13 f0       	push   $0xf0138318
f01150e7:	68 26 05 00 00       	push   $0x526
f01150ec:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01150f1:	e8 c8 b2 fe ff       	call   f01003be <_warn>
f01150f6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01150f9:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f01150fd:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0115104:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115108:	74 04                	je     f011510e <test_allocate_chunk+0x8b5>
f011510a:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011510e:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0115112:	83 ec 0c             	sub    $0xc,%esp
f0115115:	68 ef 84 13 f0       	push   $0xf01384ef
f011511a:	e8 12 bd fe ff       	call   f0100e31 <cprintf>
f011511f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0115122:	83 ec 08             	sub    $0x8,%esp
f0115125:	ff 75 e0             	pushl  -0x20(%ebp)
f0115128:	68 00 85 13 f0       	push   $0xf0138500
f011512d:	e8 ff bc fe ff       	call   f0100e31 <cprintf>
f0115132:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115135:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0115139:	75 10                	jne    f011514b <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f011513b:	83 ec 0c             	sub    $0xc,%esp
f011513e:	68 34 85 13 f0       	push   $0xf0138534
f0115143:	e8 e9 bc fe ff       	call   f0100e31 <cprintf>
f0115148:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011514b:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f0115150:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0115153:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115156:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115159:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011515e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115161:	5b                   	pop    %ebx
f0115162:	5e                   	pop    %esi
f0115163:	5f                   	pop    %edi
f0115164:	5d                   	pop    %ebp
f0115165:	c3                   	ret    

f0115166 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0115166:	55                   	push   %ebp
f0115167:	89 e5                	mov    %esp,%ebp
f0115169:	57                   	push   %edi
f011516a:	56                   	push   %esi
f011516b:	53                   	push   %ebx
f011516c:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115172:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115175:	bb 30 74 13 f0       	mov    $0xf0137430,%ebx
f011517a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011517f:	89 c7                	mov    %eax,%edi
f0115181:	89 de                	mov    %ebx,%esi
f0115183:	89 d1                	mov    %edx,%ecx
f0115185:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115187:	8d 55 9d             	lea    -0x63(%ebp),%edx
f011518a:	b9 23 00 00 00       	mov    $0x23,%ecx
f011518f:	b0 00                	mov    $0x0,%al
f0115191:	89 d7                	mov    %edx,%edi
f0115193:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115195:	6a 00                	push   $0x0
f0115197:	6a 0a                	push   $0xa
f0115199:	6a 14                	push   $0x14
f011519b:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011519e:	50                   	push   %eax
f011519f:	e8 c9 3a ff ff       	call   f0108c6d <env_create>
f01151a4:	83 c4 10             	add    $0x10,%esp
f01151a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01151aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01151ad:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01151b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01151b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01151b9:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01151bf:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01151c2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01151c5:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01151c8:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01151cf:	75 70 20 
f01151d2:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01151d9:	00 00 00 
f01151dc:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01151df:	b9 03 00 00 00       	mov    $0x3,%ecx
f01151e4:	b8 00 00 00 00       	mov    $0x0,%eax
f01151e9:	89 d7                	mov    %edx,%edi
f01151eb:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01151ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01151f0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01151f3:	83 ec 08             	sub    $0x8,%esp
f01151f6:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01151fc:	52                   	push   %edx
f01151fd:	50                   	push   %eax
f01151fe:	e8 53 a0 01 00       	call   f012f256 <ltostr>
f0115203:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115206:	83 ec 04             	sub    $0x4,%esp
f0115209:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011520f:	50                   	push   %eax
f0115210:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115216:	50                   	push   %eax
f0115217:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011521d:	50                   	push   %eax
f011521e:	e8 2b a1 01 00       	call   f012f34e <strcconcat>
f0115223:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115226:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011522d:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115234:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f011523b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0115242:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0115246:	83 ec 0c             	sub    $0xc,%esp
f0115249:	ff 75 d8             	pushl  -0x28(%ebp)
f011524c:	e8 5f 1a 00 00       	call   f0116cb0 <ClearUserSpace>
f0115251:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115254:	83 ec 0c             	sub    $0xc,%esp
f0115257:	68 74 85 13 f0       	push   $0xf0138574
f011525c:	e8 d0 bb fe ff       	call   f0100e31 <cprintf>
f0115261:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115264:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115267:	c1 e0 03             	shl    $0x3,%eax
f011526a:	83 ec 04             	sub    $0x4,%esp
f011526d:	50                   	push   %eax
f011526e:	6a 00                	push   $0x0
f0115270:	ff 75 d8             	pushl  -0x28(%ebp)
f0115273:	e8 39 39 ff ff       	call   f0108bb1 <calculate_required_frames>
f0115278:	83 c4 10             	add    $0x10,%esp
f011527b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011527e:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115282:	74 23                	je     f01152a7 <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115284:	83 ec 0c             	sub    $0xc,%esp
f0115287:	6a 03                	push   $0x3
f0115289:	ff 75 c8             	pushl  -0x38(%ebp)
f011528c:	68 a8 85 13 f0       	push   $0xf01385a8
f0115291:	68 5f 05 00 00       	push   $0x55f
f0115296:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011529b:	e8 1e b1 fe ff       	call   f01003be <_warn>
f01152a0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152a3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152a7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152ab:	74 04                	je     f01152b1 <test_calculate_required_frames+0x14b>
f01152ad:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152b1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01152b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152b8:	c1 e0 02             	shl    $0x2,%eax
f01152bb:	83 ec 04             	sub    $0x4,%esp
f01152be:	50                   	push   %eax
f01152bf:	6a 00                	push   $0x0
f01152c1:	ff 75 d8             	pushl  -0x28(%ebp)
f01152c4:	e8 e8 38 ff ff       	call   f0108bb1 <calculate_required_frames>
f01152c9:	83 c4 10             	add    $0x10,%esp
f01152cc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f01152cf:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f01152d6:	74 26                	je     f01152fe <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f01152d8:	83 ec 0c             	sub    $0xc,%esp
f01152db:	68 01 04 00 00       	push   $0x401
f01152e0:	ff 75 c8             	pushl  -0x38(%ebp)
f01152e3:	68 a8 85 13 f0       	push   $0xf01385a8
f01152e8:	68 69 05 00 00       	push   $0x569
f01152ed:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01152f2:	e8 c7 b0 fe ff       	call   f01003be <_warn>
f01152f7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115302:	74 04                	je     f0115308 <test_calculate_required_frames+0x1a2>
f0115304:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115308:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011530c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011530f:	c1 e0 0a             	shl    $0xa,%eax
f0115312:	83 ec 04             	sub    $0x4,%esp
f0115315:	50                   	push   %eax
f0115316:	6a 00                	push   $0x0
f0115318:	ff 75 d8             	pushl  -0x28(%ebp)
f011531b:	e8 91 38 ff ff       	call   f0108bb1 <calculate_required_frames>
f0115320:	83 c4 10             	add    $0x10,%esp
f0115323:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0115326:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115329:	c1 e0 0a             	shl    $0xa,%eax
f011532c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011532f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115336:	99                   	cltd   
f0115337:	f7 fb                	idiv   %ebx
f0115339:	89 c1                	mov    %eax,%ecx
f011533b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011533e:	c1 e0 0a             	shl    $0xa,%eax
f0115341:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115344:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011534b:	99                   	cltd   
f011534c:	f7 fe                	idiv   %esi
f011534e:	01 c8                	add    %ecx,%eax
f0115350:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115353:	74 4c                	je     f01153a1 <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0115355:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115358:	c1 e0 0a             	shl    $0xa,%eax
f011535b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011535e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115365:	99                   	cltd   
f0115366:	f7 fb                	idiv   %ebx
f0115368:	89 c1                	mov    %eax,%ecx
f011536a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011536d:	c1 e0 0a             	shl    $0xa,%eax
f0115370:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115373:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011537a:	99                   	cltd   
f011537b:	f7 fe                	idiv   %esi
f011537d:	01 c8                	add    %ecx,%eax
f011537f:	83 ec 0c             	sub    $0xc,%esp
f0115382:	50                   	push   %eax
f0115383:	ff 75 c8             	pushl  -0x38(%ebp)
f0115386:	68 a8 85 13 f0       	push   $0xf01385a8
f011538b:	68 73 05 00 00       	push   $0x573
f0115390:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115395:	e8 24 b0 fe ff       	call   f01003be <_warn>
f011539a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011539d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153a1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153a5:	74 04                	je     f01153ab <test_calculate_required_frames+0x245>
f01153a7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153ab:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01153af:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01153b2:	89 d0                	mov    %edx,%eax
f01153b4:	01 c0                	add    %eax,%eax
f01153b6:	01 d0                	add    %edx,%eax
f01153b8:	01 c0                	add    %eax,%eax
f01153ba:	83 ec 04             	sub    $0x4,%esp
f01153bd:	50                   	push   %eax
f01153be:	68 00 10 00 00       	push   $0x1000
f01153c3:	ff 75 d8             	pushl  -0x28(%ebp)
f01153c6:	e8 e6 37 ff ff       	call   f0108bb1 <calculate_required_frames>
f01153cb:	83 c4 10             	add    $0x10,%esp
f01153ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01153d1:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01153d5:	74 23                	je     f01153fa <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01153d7:	83 ec 0c             	sub    $0xc,%esp
f01153da:	6a 03                	push   $0x3
f01153dc:	ff 75 c8             	pushl  -0x38(%ebp)
f01153df:	68 a8 85 13 f0       	push   $0xf01385a8
f01153e4:	68 7f 05 00 00       	push   $0x57f
f01153e9:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01153ee:	e8 cb af fe ff       	call   f01003be <_warn>
f01153f3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153f6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153fa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153fe:	74 04                	je     f0115404 <test_calculate_required_frames+0x29e>
f0115400:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115404:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115408:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011540b:	89 c2                	mov    %eax,%edx
f011540d:	01 d2                	add    %edx,%edx
f011540f:	01 d0                	add    %edx,%eax
f0115411:	83 ec 04             	sub    $0x4,%esp
f0115414:	50                   	push   %eax
f0115415:	68 00 18 00 00       	push   $0x1800
f011541a:	ff 75 d8             	pushl  -0x28(%ebp)
f011541d:	e8 8f 37 ff ff       	call   f0108bb1 <calculate_required_frames>
f0115422:	83 c4 10             	add    $0x10,%esp
f0115425:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115428:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011542c:	74 23                	je     f0115451 <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011542e:	83 ec 0c             	sub    $0xc,%esp
f0115431:	6a 03                	push   $0x3
f0115433:	ff 75 c8             	pushl  -0x38(%ebp)
f0115436:	68 a8 85 13 f0       	push   $0xf01385a8
f011543b:	68 89 05 00 00       	push   $0x589
f0115440:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115445:	e8 74 af fe ff       	call   f01003be <_warn>
f011544a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011544d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115451:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115455:	74 04                	je     f011545b <test_calculate_required_frames+0x2f5>
f0115457:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011545b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011545f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115462:	89 d0                	mov    %edx,%eax
f0115464:	c1 e0 02             	shl    $0x2,%eax
f0115467:	01 d0                	add    %edx,%eax
f0115469:	01 c0                	add    %eax,%eax
f011546b:	83 ec 04             	sub    $0x4,%esp
f011546e:	50                   	push   %eax
f011546f:	68 00 00 40 00       	push   $0x400000
f0115474:	ff 75 d8             	pushl  -0x28(%ebp)
f0115477:	e8 35 37 ff ff       	call   f0108bb1 <calculate_required_frames>
f011547c:	83 c4 10             	add    $0x10,%esp
f011547f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0115482:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0115489:	74 26                	je     f01154b1 <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011548b:	83 ec 0c             	sub    $0xc,%esp
f011548e:	68 03 0a 00 00       	push   $0xa03
f0115493:	ff 75 c8             	pushl  -0x38(%ebp)
f0115496:	68 a8 85 13 f0       	push   $0xf01385a8
f011549b:	68 93 05 00 00       	push   $0x593
f01154a0:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01154a5:	e8 14 af fe ff       	call   f01003be <_warn>
f01154aa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154b5:	74 04                	je     f01154bb <test_calculate_required_frames+0x355>
f01154b7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01154bf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01154c2:	01 c0                	add    %eax,%eax
f01154c4:	83 ec 04             	sub    $0x4,%esp
f01154c7:	50                   	push   %eax
f01154c8:	68 00 00 70 00       	push   $0x700000
f01154cd:	ff 75 d8             	pushl  -0x28(%ebp)
f01154d0:	e8 dc 36 ff ff       	call   f0108bb1 <calculate_required_frames>
f01154d5:	83 c4 10             	add    $0x10,%esp
f01154d8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01154db:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01154e2:	74 26                	je     f011550a <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01154e4:	83 ec 0c             	sub    $0xc,%esp
f01154e7:	68 02 02 00 00       	push   $0x202
f01154ec:	ff 75 c8             	pushl  -0x38(%ebp)
f01154ef:	68 a8 85 13 f0       	push   $0xf01385a8
f01154f4:	68 9f 05 00 00       	push   $0x59f
f01154f9:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01154fe:	e8 bb ae fe ff       	call   f01003be <_warn>
f0115503:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115506:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011550a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011550e:	74 04                	je     f0115514 <test_calculate_required_frames+0x3ae>
f0115510:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115514:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115518:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011551b:	83 ec 04             	sub    $0x4,%esp
f011551e:	50                   	push   %eax
f011551f:	68 ff ff 3f 00       	push   $0x3fffff
f0115524:	ff 75 d8             	pushl  -0x28(%ebp)
f0115527:	e8 85 36 ff ff       	call   f0108bb1 <calculate_required_frames>
f011552c:	83 c4 10             	add    $0x10,%esp
f011552f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0115532:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115536:	74 23                	je     f011555b <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115538:	83 ec 0c             	sub    $0xc,%esp
f011553b:	6a 04                	push   $0x4
f011553d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115540:	68 a8 85 13 f0       	push   $0xf01385a8
f0115545:	68 a9 05 00 00       	push   $0x5a9
f011554a:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011554f:	e8 6a ae fe ff       	call   f01003be <_warn>
f0115554:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115557:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011555b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011555f:	74 04                	je     f0115565 <test_calculate_required_frames+0x3ff>
f0115561:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115565:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115569:	83 ec 0c             	sub    $0xc,%esp
f011556c:	68 e1 80 13 f0       	push   $0xf01380e1
f0115571:	e8 bb b8 fe ff       	call   f0100e31 <cprintf>
f0115576:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115579:	83 ec 0c             	sub    $0xc,%esp
f011557c:	68 00 86 13 f0       	push   $0xf0138600
f0115581:	e8 ab b8 fe ff       	call   f0100e31 <cprintf>
f0115586:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115589:	83 ec 04             	sub    $0x4,%esp
f011558c:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115592:	50                   	push   %eax
f0115593:	68 9a 74 13 f0       	push   $0xf013749a
f0115598:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011559e:	50                   	push   %eax
f011559f:	e8 aa 9d 01 00       	call   f012f34e <strcconcat>
f01155a4:	83 c4 10             	add    $0x10,%esp
f01155a7:	83 ec 0c             	sub    $0xc,%esp
f01155aa:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01155b0:	50                   	push   %eax
f01155b1:	e8 0d c6 fe ff       	call   f0101bc3 <execute_command>
f01155b6:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01155b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01155bc:	c1 e0 03             	shl    $0x3,%eax
f01155bf:	83 ec 04             	sub    $0x4,%esp
f01155c2:	50                   	push   %eax
f01155c3:	6a 00                	push   $0x0
f01155c5:	ff 75 d8             	pushl  -0x28(%ebp)
f01155c8:	e8 e4 35 ff ff       	call   f0108bb1 <calculate_required_frames>
f01155cd:	83 c4 10             	add    $0x10,%esp
f01155d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01155d3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01155da:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01155dd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01155e0:	74 24                	je     f0115606 <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01155e2:	83 ec 0c             	sub    $0xc,%esp
f01155e5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01155e8:	ff 75 c8             	pushl  -0x38(%ebp)
f01155eb:	68 a8 85 13 f0       	push   $0xf01385a8
f01155f0:	68 bd 05 00 00       	push   $0x5bd
f01155f5:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01155fa:	e8 bf ad fe ff       	call   f01003be <_warn>
f01155ff:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115602:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115606:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011560a:	74 04                	je     f0115610 <test_calculate_required_frames+0x4aa>
f011560c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115610:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115614:	83 ec 04             	sub    $0x4,%esp
f0115617:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011561d:	50                   	push   %eax
f011561e:	68 a7 74 13 f0       	push   $0xf01374a7
f0115623:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115629:	50                   	push   %eax
f011562a:	e8 1f 9d 01 00       	call   f012f34e <strcconcat>
f011562f:	83 c4 10             	add    $0x10,%esp
f0115632:	83 ec 0c             	sub    $0xc,%esp
f0115635:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011563b:	50                   	push   %eax
f011563c:	e8 82 c5 fe ff       	call   f0101bc3 <execute_command>
f0115641:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115644:	83 ec 04             	sub    $0x4,%esp
f0115647:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011564d:	50                   	push   %eax
f011564e:	68 34 86 13 f0       	push   $0xf0138634
f0115653:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115659:	50                   	push   %eax
f011565a:	e8 ef 9c 01 00       	call   f012f34e <strcconcat>
f011565f:	83 c4 10             	add    $0x10,%esp
f0115662:	83 ec 0c             	sub    $0xc,%esp
f0115665:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011566b:	50                   	push   %eax
f011566c:	e8 52 c5 fe ff       	call   f0101bc3 <execute_command>
f0115671:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115674:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115677:	c1 e0 03             	shl    $0x3,%eax
f011567a:	83 ec 04             	sub    $0x4,%esp
f011567d:	50                   	push   %eax
f011567e:	6a 00                	push   $0x0
f0115680:	ff 75 d8             	pushl  -0x28(%ebp)
f0115683:	e8 29 35 ff ff       	call   f0108bb1 <calculate_required_frames>
f0115688:	83 c4 10             	add    $0x10,%esp
f011568b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f011568e:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0115695:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115698:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011569b:	74 24                	je     f01156c1 <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011569d:	83 ec 0c             	sub    $0xc,%esp
f01156a0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01156a3:	ff 75 c8             	pushl  -0x38(%ebp)
f01156a6:	68 a8 85 13 f0       	push   $0xf01385a8
f01156ab:	68 cb 05 00 00       	push   $0x5cb
f01156b0:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01156b5:	e8 04 ad fe ff       	call   f01003be <_warn>
f01156ba:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156bd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01156c1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156c5:	74 04                	je     f01156cb <test_calculate_required_frames+0x565>
f01156c7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01156cb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01156cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156d2:	c1 e0 0a             	shl    $0xa,%eax
f01156d5:	83 ec 04             	sub    $0x4,%esp
f01156d8:	50                   	push   %eax
f01156d9:	6a 00                	push   $0x0
f01156db:	ff 75 d8             	pushl  -0x28(%ebp)
f01156de:	e8 ce 34 ff ff       	call   f0108bb1 <calculate_required_frames>
f01156e3:	83 c4 10             	add    $0x10,%esp
f01156e6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01156e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156ec:	c1 e0 0a             	shl    $0xa,%eax
f01156ef:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01156f2:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01156f9:	99                   	cltd   
f01156fa:	f7 fb                	idiv   %ebx
f01156fc:	89 c1                	mov    %eax,%ecx
f01156fe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115701:	c1 e0 0a             	shl    $0xa,%eax
f0115704:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115707:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011570e:	99                   	cltd   
f011570f:	f7 fe                	idiv   %esi
f0115711:	01 c8                	add    %ecx,%eax
f0115713:	83 e8 05             	sub    $0x5,%eax
f0115716:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115719:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011571c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011571f:	74 24                	je     f0115745 <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115721:	83 ec 0c             	sub    $0xc,%esp
f0115724:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115727:	ff 75 c8             	pushl  -0x38(%ebp)
f011572a:	68 a8 85 13 f0       	push   $0xf01385a8
f011572f:	68 d6 05 00 00       	push   $0x5d6
f0115734:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115739:	e8 80 ac fe ff       	call   f01003be <_warn>
f011573e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115741:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115745:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115749:	74 04                	je     f011574f <test_calculate_required_frames+0x5e9>
f011574b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011574f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115753:	83 ec 04             	sub    $0x4,%esp
f0115756:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011575c:	50                   	push   %eax
f011575d:	68 40 86 13 f0       	push   $0xf0138640
f0115762:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115768:	50                   	push   %eax
f0115769:	e8 e0 9b 01 00       	call   f012f34e <strcconcat>
f011576e:	83 c4 10             	add    $0x10,%esp
f0115771:	83 ec 0c             	sub    $0xc,%esp
f0115774:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011577a:	50                   	push   %eax
f011577b:	e8 43 c4 fe ff       	call   f0101bc3 <execute_command>
f0115780:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115783:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115786:	89 c2                	mov    %eax,%edx
f0115788:	01 d2                	add    %edx,%edx
f011578a:	01 d0                	add    %edx,%eax
f011578c:	83 ec 04             	sub    $0x4,%esp
f011578f:	50                   	push   %eax
f0115790:	68 00 18 00 00       	push   $0x1800
f0115795:	ff 75 d8             	pushl  -0x28(%ebp)
f0115798:	e8 14 34 ff ff       	call   f0108bb1 <calculate_required_frames>
f011579d:	83 c4 10             	add    $0x10,%esp
f01157a0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01157a3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01157aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01157ad:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01157b0:	74 24                	je     f01157d6 <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01157b2:	83 ec 0c             	sub    $0xc,%esp
f01157b5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01157b8:	ff 75 c8             	pushl  -0x38(%ebp)
f01157bb:	68 a8 85 13 f0       	push   $0xf01385a8
f01157c0:	68 e5 05 00 00       	push   $0x5e5
f01157c5:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01157ca:	e8 ef ab fe ff       	call   f01003be <_warn>
f01157cf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157d2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01157d6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157da:	74 04                	je     f01157e0 <test_calculate_required_frames+0x67a>
f01157dc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157e0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01157e4:	83 ec 04             	sub    $0x4,%esp
f01157e7:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01157ed:	50                   	push   %eax
f01157ee:	68 00 77 13 f0       	push   $0xf0137700
f01157f3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157f9:	50                   	push   %eax
f01157fa:	e8 4f 9b 01 00       	call   f012f34e <strcconcat>
f01157ff:	83 c4 10             	add    $0x10,%esp
f0115802:	83 ec 0c             	sub    $0xc,%esp
f0115805:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011580b:	50                   	push   %eax
f011580c:	e8 b2 c3 fe ff       	call   f0101bc3 <execute_command>
f0115811:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115814:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115817:	89 d0                	mov    %edx,%eax
f0115819:	c1 e0 02             	shl    $0x2,%eax
f011581c:	01 d0                	add    %edx,%eax
f011581e:	01 c0                	add    %eax,%eax
f0115820:	83 ec 04             	sub    $0x4,%esp
f0115823:	50                   	push   %eax
f0115824:	68 00 00 40 00       	push   $0x400000
f0115829:	ff 75 d8             	pushl  -0x28(%ebp)
f011582c:	e8 80 33 ff ff       	call   f0108bb1 <calculate_required_frames>
f0115831:	83 c4 10             	add    $0x10,%esp
f0115834:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115837:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f011583e:	74 26                	je     f0115866 <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115840:	83 ec 0c             	sub    $0xc,%esp
f0115843:	68 03 0a 00 00       	push   $0xa03
f0115848:	ff 75 c8             	pushl  -0x38(%ebp)
f011584b:	68 a8 85 13 f0       	push   $0xf01385a8
f0115850:	68 f1 05 00 00       	push   $0x5f1
f0115855:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011585a:	e8 5f ab fe ff       	call   f01003be <_warn>
f011585f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115862:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115866:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011586a:	74 04                	je     f0115870 <test_calculate_required_frames+0x70a>
f011586c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115870:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115874:	83 ec 04             	sub    $0x4,%esp
f0115877:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011587d:	50                   	push   %eax
f011587e:	68 0a 77 13 f0       	push   $0xf013770a
f0115883:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115889:	50                   	push   %eax
f011588a:	e8 bf 9a 01 00       	call   f012f34e <strcconcat>
f011588f:	83 c4 10             	add    $0x10,%esp
f0115892:	83 ec 0c             	sub    $0xc,%esp
f0115895:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011589b:	50                   	push   %eax
f011589c:	e8 22 c3 fe ff       	call   f0101bc3 <execute_command>
f01158a1:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01158a4:	83 ec 04             	sub    $0x4,%esp
f01158a7:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01158ad:	50                   	push   %eax
f01158ae:	68 48 86 13 f0       	push   $0xf0138648
f01158b3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01158b9:	50                   	push   %eax
f01158ba:	e8 8f 9a 01 00       	call   f012f34e <strcconcat>
f01158bf:	83 c4 10             	add    $0x10,%esp
f01158c2:	83 ec 0c             	sub    $0xc,%esp
f01158c5:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01158cb:	50                   	push   %eax
f01158cc:	e8 f2 c2 fe ff       	call   f0101bc3 <execute_command>
f01158d1:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01158d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01158d7:	01 c0                	add    %eax,%eax
f01158d9:	83 ec 04             	sub    $0x4,%esp
f01158dc:	50                   	push   %eax
f01158dd:	68 00 00 70 00       	push   $0x700000
f01158e2:	ff 75 d8             	pushl  -0x28(%ebp)
f01158e5:	e8 c7 32 ff ff       	call   f0108bb1 <calculate_required_frames>
f01158ea:	83 c4 10             	add    $0x10,%esp
f01158ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f01158f0:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01158f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01158fa:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01158fd:	74 24                	je     f0115923 <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01158ff:	83 ec 0c             	sub    $0xc,%esp
f0115902:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115905:	ff 75 c8             	pushl  -0x38(%ebp)
f0115908:	68 a8 85 13 f0       	push   $0xf01385a8
f011590d:	68 01 06 00 00       	push   $0x601
f0115912:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115917:	e8 a2 aa fe ff       	call   f01003be <_warn>
f011591c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011591f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115923:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115927:	74 04                	je     f011592d <test_calculate_required_frames+0x7c7>
f0115929:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011592d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115931:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115934:	83 ec 04             	sub    $0x4,%esp
f0115937:	50                   	push   %eax
f0115938:	68 ff ff 3f 00       	push   $0x3fffff
f011593d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115940:	e8 6c 32 ff ff       	call   f0108bb1 <calculate_required_frames>
f0115945:	83 c4 10             	add    $0x10,%esp
f0115948:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f011594b:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115952:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115955:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115958:	74 24                	je     f011597e <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011595a:	83 ec 0c             	sub    $0xc,%esp
f011595d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115960:	ff 75 c8             	pushl  -0x38(%ebp)
f0115963:	68 a8 85 13 f0       	push   $0xf01385a8
f0115968:	68 0c 06 00 00       	push   $0x60c
f011596d:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115972:	e8 47 aa fe ff       	call   f01003be <_warn>
f0115977:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011597a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011597e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115982:	74 04                	je     f0115988 <test_calculate_required_frames+0x822>
f0115984:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115988:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011598c:	83 ec 0c             	sub    $0xc,%esp
f011598f:	68 bb 76 13 f0       	push   $0xf01376bb
f0115994:	e8 98 b4 fe ff       	call   f0100e31 <cprintf>
f0115999:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f011599c:	83 ec 08             	sub    $0x8,%esp
f011599f:	ff 75 e4             	pushl  -0x1c(%ebp)
f01159a2:	68 54 86 13 f0       	push   $0xf0138654
f01159a7:	e8 85 b4 fe ff       	call   f0100e31 <cprintf>
f01159ac:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01159af:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01159b3:	75 10                	jne    f01159c5 <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01159b5:	83 ec 0c             	sub    $0xc,%esp
f01159b8:	68 94 86 13 f0       	push   $0xf0138694
f01159bd:	e8 6f b4 fe ff       	call   f0100e31 <cprintf>
f01159c2:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01159c5:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f01159ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01159cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01159d0:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01159d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01159d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01159db:	5b                   	pop    %ebx
f01159dc:	5e                   	pop    %esi
f01159dd:	5f                   	pop    %edi
f01159de:	5d                   	pop    %ebp
f01159df:	c3                   	ret    

f01159e0 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01159e0:	55                   	push   %ebp
f01159e1:	89 e5                	mov    %esp,%ebp
f01159e3:	57                   	push   %edi
f01159e4:	56                   	push   %esi
f01159e5:	53                   	push   %ebx
f01159e6:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01159ec:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01159ef:	bb 30 74 13 f0       	mov    $0xf0137430,%ebx
f01159f4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01159f9:	89 c7                	mov    %eax,%edi
f01159fb:	89 de                	mov    %ebx,%esi
f01159fd:	89 d1                	mov    %edx,%ecx
f01159ff:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115a01:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115a04:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115a09:	b0 00                	mov    $0x0,%al
f0115a0b:	89 d7                	mov    %edx,%edi
f0115a0d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115a0f:	6a 00                	push   $0x0
f0115a11:	6a 0a                	push   $0xa
f0115a13:	6a 14                	push   $0x14
f0115a15:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115a18:	50                   	push   %eax
f0115a19:	e8 4f 32 ff ff       	call   f0108c6d <env_create>
f0115a1e:	83 c4 10             	add    $0x10,%esp
f0115a21:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115a24:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a27:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0115a2d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115a30:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a33:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0115a39:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115a3c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115a3f:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115a42:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115a49:	75 70 20 
f0115a4c:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115a53:	00 00 00 
f0115a56:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115a59:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115a5e:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a63:	89 d7                	mov    %edx,%edi
f0115a65:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115a67:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a6a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115a6d:	83 ec 08             	sub    $0x8,%esp
f0115a70:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115a76:	52                   	push   %edx
f0115a77:	50                   	push   %eax
f0115a78:	e8 d9 97 01 00       	call   f012f256 <ltostr>
f0115a7d:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115a80:	83 ec 04             	sub    $0x4,%esp
f0115a83:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115a89:	50                   	push   %eax
f0115a8a:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115a90:	50                   	push   %eax
f0115a91:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115a97:	50                   	push   %eax
f0115a98:	e8 b1 98 01 00       	call   f012f34e <strcconcat>
f0115a9d:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115aa0:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115aa7:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115aae:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115ab5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115ab9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ac0:	00 00 00 
	uint32 num_tables = 0;
f0115ac3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115aca:	00 00 00 
	ClearUserSpace(proc_directory);
f0115acd:	83 ec 0c             	sub    $0xc,%esp
f0115ad0:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ad3:	e8 d8 11 00 00       	call   f0116cb0 <ClearUserSpace>
f0115ad8:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115adb:	83 ec 0c             	sub    $0xc,%esp
f0115ade:	68 74 85 13 f0       	push   $0xf0138574
f0115ae3:	e8 49 b3 fe ff       	call   f0100e31 <cprintf>
f0115ae8:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115aeb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115aee:	c1 e0 03             	shl    $0x3,%eax
f0115af1:	89 c2                	mov    %eax,%edx
f0115af3:	83 ec 0c             	sub    $0xc,%esp
f0115af6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115afc:	50                   	push   %eax
f0115afd:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b03:	50                   	push   %eax
f0115b04:	52                   	push   %edx
f0115b05:	6a 00                	push   $0x0
f0115b07:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b0a:	e8 88 30 ff ff       	call   f0108b97 <calculate_allocated_space>
f0115b0f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b12:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b18:	85 c0                	test   %eax,%eax
f0115b1a:	74 27                	je     f0115b43 <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b1c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b22:	83 ec 0c             	sub    $0xc,%esp
f0115b25:	6a 00                	push   $0x0
f0115b27:	50                   	push   %eax
f0115b28:	68 e0 86 13 f0       	push   $0xf01386e0
f0115b2d:	68 41 06 00 00       	push   $0x641
f0115b32:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115b37:	e8 82 a8 fe ff       	call   f01003be <_warn>
f0115b3c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b3f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b43:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b49:	85 c0                	test   %eax,%eax
f0115b4b:	74 27                	je     f0115b74 <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b4d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b53:	83 ec 0c             	sub    $0xc,%esp
f0115b56:	6a 00                	push   $0x0
f0115b58:	50                   	push   %eax
f0115b59:	68 40 87 13 f0       	push   $0xf0138740
f0115b5e:	68 46 06 00 00       	push   $0x646
f0115b63:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115b68:	e8 51 a8 fe ff       	call   f01003be <_warn>
f0115b6d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b70:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b74:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b78:	74 04                	je     f0115b7e <test_calculate_allocated_space+0x19e>
f0115b7a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b7e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115b82:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b89:	00 00 00 
		num_pages = 0;
f0115b8c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b93:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115b96:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115b99:	c1 e0 02             	shl    $0x2,%eax
f0115b9c:	89 c2                	mov    %eax,%edx
f0115b9e:	83 ec 0c             	sub    $0xc,%esp
f0115ba1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ba7:	50                   	push   %eax
f0115ba8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115bae:	50                   	push   %eax
f0115baf:	52                   	push   %edx
f0115bb0:	6a 00                	push   $0x0
f0115bb2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bb5:	e8 dd 2f ff ff       	call   f0108b97 <calculate_allocated_space>
f0115bba:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115bbd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bc3:	85 c0                	test   %eax,%eax
f0115bc5:	74 27                	je     f0115bee <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115bc7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bcd:	83 ec 0c             	sub    $0xc,%esp
f0115bd0:	6a 00                	push   $0x0
f0115bd2:	50                   	push   %eax
f0115bd3:	68 e0 86 13 f0       	push   $0xf01386e0
f0115bd8:	68 52 06 00 00       	push   $0x652
f0115bdd:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115be2:	e8 d7 a7 fe ff       	call   f01003be <_warn>
f0115be7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115bee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bf4:	85 c0                	test   %eax,%eax
f0115bf6:	74 27                	je     f0115c1f <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115bf8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bfe:	83 ec 0c             	sub    $0xc,%esp
f0115c01:	6a 00                	push   $0x0
f0115c03:	50                   	push   %eax
f0115c04:	68 40 87 13 f0       	push   $0xf0138740
f0115c09:	68 57 06 00 00       	push   $0x657
f0115c0e:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115c13:	e8 a6 a7 fe ff       	call   f01003be <_warn>
f0115c18:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c1b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c1f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c23:	74 04                	je     f0115c29 <test_calculate_allocated_space+0x249>
f0115c25:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c29:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115c2d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c34:	00 00 00 
		num_pages = 0;
f0115c37:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c3e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115c41:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115c44:	c1 e0 0a             	shl    $0xa,%eax
f0115c47:	89 c2                	mov    %eax,%edx
f0115c49:	83 ec 0c             	sub    $0xc,%esp
f0115c4c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c52:	50                   	push   %eax
f0115c53:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c59:	50                   	push   %eax
f0115c5a:	52                   	push   %edx
f0115c5b:	6a 00                	push   $0x0
f0115c5d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c60:	e8 32 2f ff ff       	call   f0108b97 <calculate_allocated_space>
f0115c65:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115c68:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c6e:	85 c0                	test   %eax,%eax
f0115c70:	74 27                	je     f0115c99 <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c72:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c78:	83 ec 0c             	sub    $0xc,%esp
f0115c7b:	6a 00                	push   $0x0
f0115c7d:	50                   	push   %eax
f0115c7e:	68 e0 86 13 f0       	push   $0xf01386e0
f0115c83:	68 63 06 00 00       	push   $0x663
f0115c88:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115c8d:	e8 2c a7 fe ff       	call   f01003be <_warn>
f0115c92:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c95:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c99:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c9f:	85 c0                	test   %eax,%eax
f0115ca1:	74 27                	je     f0115cca <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ca3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ca9:	83 ec 0c             	sub    $0xc,%esp
f0115cac:	6a 00                	push   $0x0
f0115cae:	50                   	push   %eax
f0115caf:	68 40 87 13 f0       	push   $0xf0138740
f0115cb4:	68 68 06 00 00       	push   $0x668
f0115cb9:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115cbe:	e8 fb a6 fe ff       	call   f01003be <_warn>
f0115cc3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cc6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115cca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115cce:	74 04                	je     f0115cd4 <test_calculate_allocated_space+0x2f4>
f0115cd0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115cd4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115cd8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115cdf:	00 00 00 
		num_pages = 0;
f0115ce2:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ce9:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115cec:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115cef:	89 d0                	mov    %edx,%eax
f0115cf1:	01 c0                	add    %eax,%eax
f0115cf3:	01 d0                	add    %edx,%eax
f0115cf5:	01 c0                	add    %eax,%eax
f0115cf7:	05 00 10 00 00       	add    $0x1000,%eax
f0115cfc:	89 c2                	mov    %eax,%edx
f0115cfe:	83 ec 0c             	sub    $0xc,%esp
f0115d01:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d07:	50                   	push   %eax
f0115d08:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d0e:	50                   	push   %eax
f0115d0f:	52                   	push   %edx
f0115d10:	68 00 10 00 00       	push   $0x1000
f0115d15:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d18:	e8 7a 2e ff ff       	call   f0108b97 <calculate_allocated_space>
f0115d1d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115d20:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d26:	85 c0                	test   %eax,%eax
f0115d28:	74 27                	je     f0115d51 <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115d2a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d30:	83 ec 0c             	sub    $0xc,%esp
f0115d33:	6a 00                	push   $0x0
f0115d35:	50                   	push   %eax
f0115d36:	68 e0 86 13 f0       	push   $0xf01386e0
f0115d3b:	68 75 06 00 00       	push   $0x675
f0115d40:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115d45:	e8 74 a6 fe ff       	call   f01003be <_warn>
f0115d4a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d4d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d57:	85 c0                	test   %eax,%eax
f0115d59:	74 27                	je     f0115d82 <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d5b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d61:	83 ec 0c             	sub    $0xc,%esp
f0115d64:	6a 00                	push   $0x0
f0115d66:	50                   	push   %eax
f0115d67:	68 40 87 13 f0       	push   $0xf0138740
f0115d6c:	68 7a 06 00 00       	push   $0x67a
f0115d71:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115d76:	e8 43 a6 fe ff       	call   f01003be <_warn>
f0115d7b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d7e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d82:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d86:	74 04                	je     f0115d8c <test_calculate_allocated_space+0x3ac>
f0115d88:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d8c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115d90:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d97:	00 00 00 
		num_pages = 0;
f0115d9a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115da1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115da4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115da7:	89 c2                	mov    %eax,%edx
f0115da9:	01 d2                	add    %edx,%edx
f0115dab:	01 d0                	add    %edx,%eax
f0115dad:	05 00 18 00 00       	add    $0x1800,%eax
f0115db2:	89 c2                	mov    %eax,%edx
f0115db4:	83 ec 0c             	sub    $0xc,%esp
f0115db7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115dbd:	50                   	push   %eax
f0115dbe:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115dc4:	50                   	push   %eax
f0115dc5:	52                   	push   %edx
f0115dc6:	68 00 18 00 00       	push   $0x1800
f0115dcb:	ff 75 d8             	pushl  -0x28(%ebp)
f0115dce:	e8 c4 2d ff ff       	call   f0108b97 <calculate_allocated_space>
f0115dd3:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115dd6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ddc:	85 c0                	test   %eax,%eax
f0115dde:	74 27                	je     f0115e07 <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115de0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115de6:	83 ec 0c             	sub    $0xc,%esp
f0115de9:	6a 00                	push   $0x0
f0115deb:	50                   	push   %eax
f0115dec:	68 e0 86 13 f0       	push   $0xf01386e0
f0115df1:	68 86 06 00 00       	push   $0x686
f0115df6:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115dfb:	e8 be a5 fe ff       	call   f01003be <_warn>
f0115e00:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e03:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e07:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e0d:	85 c0                	test   %eax,%eax
f0115e0f:	74 27                	je     f0115e38 <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e11:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e17:	83 ec 0c             	sub    $0xc,%esp
f0115e1a:	6a 00                	push   $0x0
f0115e1c:	50                   	push   %eax
f0115e1d:	68 40 87 13 f0       	push   $0xf0138740
f0115e22:	68 8b 06 00 00       	push   $0x68b
f0115e27:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115e2c:	e8 8d a5 fe ff       	call   f01003be <_warn>
f0115e31:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e34:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e3c:	74 04                	je     f0115e42 <test_calculate_allocated_space+0x462>
f0115e3e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115e46:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e4d:	00 00 00 
		num_pages = 0;
f0115e50:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e57:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115e5a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115e5d:	89 d0                	mov    %edx,%eax
f0115e5f:	c1 e0 02             	shl    $0x2,%eax
f0115e62:	01 d0                	add    %edx,%eax
f0115e64:	01 c0                	add    %eax,%eax
f0115e66:	05 00 00 40 00       	add    $0x400000,%eax
f0115e6b:	89 c2                	mov    %eax,%edx
f0115e6d:	83 ec 0c             	sub    $0xc,%esp
f0115e70:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e76:	50                   	push   %eax
f0115e77:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e7d:	50                   	push   %eax
f0115e7e:	52                   	push   %edx
f0115e7f:	68 00 00 40 00       	push   $0x400000
f0115e84:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e87:	e8 0b 2d ff ff       	call   f0108b97 <calculate_allocated_space>
f0115e8c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e8f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e95:	85 c0                	test   %eax,%eax
f0115e97:	74 27                	je     f0115ec0 <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e99:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e9f:	83 ec 0c             	sub    $0xc,%esp
f0115ea2:	6a 00                	push   $0x0
f0115ea4:	50                   	push   %eax
f0115ea5:	68 e0 86 13 f0       	push   $0xf01386e0
f0115eaa:	68 97 06 00 00       	push   $0x697
f0115eaf:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115eb4:	e8 05 a5 fe ff       	call   f01003be <_warn>
f0115eb9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ebc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115ec0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ec6:	85 c0                	test   %eax,%eax
f0115ec8:	74 27                	je     f0115ef1 <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115eca:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ed0:	83 ec 0c             	sub    $0xc,%esp
f0115ed3:	6a 00                	push   $0x0
f0115ed5:	50                   	push   %eax
f0115ed6:	68 40 87 13 f0       	push   $0xf0138740
f0115edb:	68 9c 06 00 00       	push   $0x69c
f0115ee0:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115ee5:	e8 d4 a4 fe ff       	call   f01003be <_warn>
f0115eea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115eed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ef1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ef5:	74 04                	je     f0115efb <test_calculate_allocated_space+0x51b>
f0115ef7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115efb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115eff:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f06:	00 00 00 
		num_pages = 0;
f0115f09:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f10:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115f13:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115f16:	05 00 00 38 00       	add    $0x380000,%eax
f0115f1b:	01 c0                	add    %eax,%eax
f0115f1d:	89 c2                	mov    %eax,%edx
f0115f1f:	83 ec 0c             	sub    $0xc,%esp
f0115f22:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f28:	50                   	push   %eax
f0115f29:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f2f:	50                   	push   %eax
f0115f30:	52                   	push   %edx
f0115f31:	68 00 00 70 00       	push   $0x700000
f0115f36:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f39:	e8 59 2c ff ff       	call   f0108b97 <calculate_allocated_space>
f0115f3e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f41:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f47:	85 c0                	test   %eax,%eax
f0115f49:	74 27                	je     f0115f72 <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115f4b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f51:	83 ec 0c             	sub    $0xc,%esp
f0115f54:	6a 00                	push   $0x0
f0115f56:	50                   	push   %eax
f0115f57:	68 e0 86 13 f0       	push   $0xf01386e0
f0115f5c:	68 a9 06 00 00       	push   $0x6a9
f0115f61:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115f66:	e8 53 a4 fe ff       	call   f01003be <_warn>
f0115f6b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f6e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115f72:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f78:	85 c0                	test   %eax,%eax
f0115f7a:	74 27                	je     f0115fa3 <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115f7c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f82:	83 ec 0c             	sub    $0xc,%esp
f0115f85:	6a 00                	push   $0x0
f0115f87:	50                   	push   %eax
f0115f88:	68 40 87 13 f0       	push   $0xf0138740
f0115f8d:	68 ae 06 00 00       	push   $0x6ae
f0115f92:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0115f97:	e8 22 a4 fe ff       	call   f01003be <_warn>
f0115f9c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f9f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115fa3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115fa7:	74 04                	je     f0115fad <test_calculate_allocated_space+0x5cd>
f0115fa9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115fad:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115fb1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115fb8:	00 00 00 
		num_pages = 0;
f0115fbb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115fc2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115fc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115fc8:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115fcd:	89 c2                	mov    %eax,%edx
f0115fcf:	83 ec 0c             	sub    $0xc,%esp
f0115fd2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115fd8:	50                   	push   %eax
f0115fd9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115fdf:	50                   	push   %eax
f0115fe0:	52                   	push   %edx
f0115fe1:	68 ff ff 3f 00       	push   $0x3fffff
f0115fe6:	ff 75 d8             	pushl  -0x28(%ebp)
f0115fe9:	e8 a9 2b ff ff       	call   f0108b97 <calculate_allocated_space>
f0115fee:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ff1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ff7:	85 c0                	test   %eax,%eax
f0115ff9:	74 27                	je     f0116022 <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ffb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116001:	83 ec 0c             	sub    $0xc,%esp
f0116004:	6a 00                	push   $0x0
f0116006:	50                   	push   %eax
f0116007:	68 e0 86 13 f0       	push   $0xf01386e0
f011600c:	68 ba 06 00 00       	push   $0x6ba
f0116011:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116016:	e8 a3 a3 fe ff       	call   f01003be <_warn>
f011601b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011601e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116022:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116028:	85 c0                	test   %eax,%eax
f011602a:	74 27                	je     f0116053 <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011602c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116032:	83 ec 0c             	sub    $0xc,%esp
f0116035:	6a 00                	push   $0x0
f0116037:	50                   	push   %eax
f0116038:	68 40 87 13 f0       	push   $0xf0138740
f011603d:	68 bf 06 00 00       	push   $0x6bf
f0116042:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116047:	e8 72 a3 fe ff       	call   f01003be <_warn>
f011604c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011604f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116053:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116057:	74 04                	je     f011605d <test_calculate_allocated_space+0x67d>
f0116059:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011605d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0116061:	83 ec 0c             	sub    $0xc,%esp
f0116064:	68 e1 80 13 f0       	push   $0xf01380e1
f0116069:	e8 c3 ad fe ff       	call   f0100e31 <cprintf>
f011606e:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0116071:	83 ec 0c             	sub    $0xc,%esp
f0116074:	68 00 86 13 f0       	push   $0xf0138600
f0116079:	e8 b3 ad fe ff       	call   f0100e31 <cprintf>
f011607e:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0116081:	83 ec 04             	sub    $0x4,%esp
f0116084:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f011608a:	50                   	push   %eax
f011608b:	68 9a 74 13 f0       	push   $0xf013749a
f0116090:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116096:	50                   	push   %eax
f0116097:	e8 b2 92 01 00       	call   f012f34e <strcconcat>
f011609c:	83 c4 10             	add    $0x10,%esp
f011609f:	83 ec 0c             	sub    $0xc,%esp
f01160a2:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01160a8:	50                   	push   %eax
f01160a9:	e8 15 bb fe ff       	call   f0101bc3 <execute_command>
f01160ae:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f01160b1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01160b8:	00 00 00 
		num_pages = 0;
f01160bb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01160c2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01160c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01160c8:	c1 e0 03             	shl    $0x3,%eax
f01160cb:	89 c2                	mov    %eax,%edx
f01160cd:	83 ec 0c             	sub    $0xc,%esp
f01160d0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01160d6:	50                   	push   %eax
f01160d7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01160dd:	50                   	push   %eax
f01160de:	52                   	push   %edx
f01160df:	6a 00                	push   $0x0
f01160e1:	ff 75 d8             	pushl  -0x28(%ebp)
f01160e4:	e8 ae 2a ff ff       	call   f0108b97 <calculate_allocated_space>
f01160e9:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01160ec:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f01160f3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01160fa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116100:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116103:	74 28                	je     f011612d <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116105:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011610b:	83 ec 0c             	sub    $0xc,%esp
f011610e:	ff 75 c8             	pushl  -0x38(%ebp)
f0116111:	50                   	push   %eax
f0116112:	68 e0 86 13 f0       	push   $0xf01386e0
f0116117:	68 d6 06 00 00       	push   $0x6d6
f011611c:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116121:	e8 98 a2 fe ff       	call   f01003be <_warn>
f0116126:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116129:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011612d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116133:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116136:	74 28                	je     f0116160 <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116138:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011613e:	83 ec 0c             	sub    $0xc,%esp
f0116141:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116144:	50                   	push   %eax
f0116145:	68 40 87 13 f0       	push   $0xf0138740
f011614a:	68 db 06 00 00       	push   $0x6db
f011614f:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116154:	e8 65 a2 fe ff       	call   f01003be <_warn>
f0116159:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011615c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116160:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116164:	74 04                	je     f011616a <test_calculate_allocated_space+0x78a>
f0116166:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011616a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011616e:	83 ec 04             	sub    $0x4,%esp
f0116171:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116177:	50                   	push   %eax
f0116178:	68 a7 74 13 f0       	push   $0xf01374a7
f011617d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116183:	50                   	push   %eax
f0116184:	e8 c5 91 01 00       	call   f012f34e <strcconcat>
f0116189:	83 c4 10             	add    $0x10,%esp
f011618c:	83 ec 0c             	sub    $0xc,%esp
f011618f:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116195:	50                   	push   %eax
f0116196:	e8 28 ba fe ff       	call   f0101bc3 <execute_command>
f011619b:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011619e:	83 ec 04             	sub    $0x4,%esp
f01161a1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01161a7:	50                   	push   %eax
f01161a8:	68 34 86 13 f0       	push   $0xf0138634
f01161ad:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01161b3:	50                   	push   %eax
f01161b4:	e8 95 91 01 00       	call   f012f34e <strcconcat>
f01161b9:	83 c4 10             	add    $0x10,%esp
f01161bc:	83 ec 0c             	sub    $0xc,%esp
f01161bf:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01161c5:	50                   	push   %eax
f01161c6:	e8 f8 b9 fe ff       	call   f0101bc3 <execute_command>
f01161cb:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f01161ce:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01161d5:	00 00 00 
		num_pages = 0;
f01161d8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01161df:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f01161e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01161e5:	c1 e0 03             	shl    $0x3,%eax
f01161e8:	89 c2                	mov    %eax,%edx
f01161ea:	83 ec 0c             	sub    $0xc,%esp
f01161ed:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01161f3:	50                   	push   %eax
f01161f4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01161fa:	50                   	push   %eax
f01161fb:	52                   	push   %edx
f01161fc:	6a 00                	push   $0x0
f01161fe:	ff 75 d8             	pushl  -0x28(%ebp)
f0116201:	e8 91 29 ff ff       	call   f0108b97 <calculate_allocated_space>
f0116206:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116209:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0116210:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116217:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011621d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116220:	74 28                	je     f011624a <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116222:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116228:	83 ec 0c             	sub    $0xc,%esp
f011622b:	ff 75 c8             	pushl  -0x38(%ebp)
f011622e:	50                   	push   %eax
f011622f:	68 e0 86 13 f0       	push   $0xf01386e0
f0116234:	68 ec 06 00 00       	push   $0x6ec
f0116239:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011623e:	e8 7b a1 fe ff       	call   f01003be <_warn>
f0116243:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116246:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011624a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116250:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116253:	74 28                	je     f011627d <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116255:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011625b:	83 ec 0c             	sub    $0xc,%esp
f011625e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116261:	50                   	push   %eax
f0116262:	68 40 87 13 f0       	push   $0xf0138740
f0116267:	68 f1 06 00 00       	push   $0x6f1
f011626c:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116271:	e8 48 a1 fe ff       	call   f01003be <_warn>
f0116276:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116279:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011627d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116281:	74 04                	je     f0116287 <test_calculate_allocated_space+0x8a7>
f0116283:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116287:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011628b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116292:	00 00 00 
		num_pages = 0;
f0116295:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011629c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011629f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01162a2:	c1 e0 0a             	shl    $0xa,%eax
f01162a5:	89 c2                	mov    %eax,%edx
f01162a7:	83 ec 0c             	sub    $0xc,%esp
f01162aa:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01162b0:	50                   	push   %eax
f01162b1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01162b7:	50                   	push   %eax
f01162b8:	52                   	push   %edx
f01162b9:	6a 00                	push   $0x0
f01162bb:	ff 75 d8             	pushl  -0x28(%ebp)
f01162be:	e8 d4 28 ff ff       	call   f0108b97 <calculate_allocated_space>
f01162c3:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f01162c6:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f01162cd:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01162d4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162da:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01162dd:	74 28                	je     f0116307 <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01162df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162e5:	83 ec 0c             	sub    $0xc,%esp
f01162e8:	ff 75 c8             	pushl  -0x38(%ebp)
f01162eb:	50                   	push   %eax
f01162ec:	68 e0 86 13 f0       	push   $0xf01386e0
f01162f1:	68 ff 06 00 00       	push   $0x6ff
f01162f6:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01162fb:	e8 be a0 fe ff       	call   f01003be <_warn>
f0116300:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116303:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116307:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011630d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116310:	74 28                	je     f011633a <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116312:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116318:	83 ec 0c             	sub    $0xc,%esp
f011631b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011631e:	50                   	push   %eax
f011631f:	68 40 87 13 f0       	push   $0xf0138740
f0116324:	68 04 07 00 00       	push   $0x704
f0116329:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011632e:	e8 8b a0 fe ff       	call   f01003be <_warn>
f0116333:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116336:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011633a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011633e:	74 04                	je     f0116344 <test_calculate_allocated_space+0x964>
f0116340:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116344:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0116348:	83 ec 04             	sub    $0x4,%esp
f011634b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116351:	50                   	push   %eax
f0116352:	68 40 86 13 f0       	push   $0xf0138640
f0116357:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011635d:	50                   	push   %eax
f011635e:	e8 eb 8f 01 00       	call   f012f34e <strcconcat>
f0116363:	83 c4 10             	add    $0x10,%esp
f0116366:	83 ec 0c             	sub    $0xc,%esp
f0116369:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011636f:	50                   	push   %eax
f0116370:	e8 4e b8 fe ff       	call   f0101bc3 <execute_command>
f0116375:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0116378:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011637f:	00 00 00 
		num_pages = 0;
f0116382:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116389:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f011638c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011638f:	89 c2                	mov    %eax,%edx
f0116391:	01 d2                	add    %edx,%edx
f0116393:	01 d0                	add    %edx,%eax
f0116395:	05 00 18 00 00       	add    $0x1800,%eax
f011639a:	89 c2                	mov    %eax,%edx
f011639c:	83 ec 0c             	sub    $0xc,%esp
f011639f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01163a5:	50                   	push   %eax
f01163a6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01163ac:	50                   	push   %eax
f01163ad:	52                   	push   %edx
f01163ae:	68 00 18 00 00       	push   $0x1800
f01163b3:	ff 75 d8             	pushl  -0x28(%ebp)
f01163b6:	e8 dc 27 ff ff       	call   f0108b97 <calculate_allocated_space>
f01163bb:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01163be:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01163c5:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01163cc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163d2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01163d5:	74 28                	je     f01163ff <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01163d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163dd:	83 ec 0c             	sub    $0xc,%esp
f01163e0:	ff 75 c8             	pushl  -0x38(%ebp)
f01163e3:	50                   	push   %eax
f01163e4:	68 e0 86 13 f0       	push   $0xf01386e0
f01163e9:	68 15 07 00 00       	push   $0x715
f01163ee:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01163f3:	e8 c6 9f fe ff       	call   f01003be <_warn>
f01163f8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01163fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01163ff:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116405:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116408:	74 28                	je     f0116432 <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011640a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116410:	83 ec 0c             	sub    $0xc,%esp
f0116413:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116416:	50                   	push   %eax
f0116417:	68 40 87 13 f0       	push   $0xf0138740
f011641c:	68 1a 07 00 00       	push   $0x71a
f0116421:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116426:	e8 93 9f fe ff       	call   f01003be <_warn>
f011642b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011642e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116432:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116436:	74 04                	je     f011643c <test_calculate_allocated_space+0xa5c>
f0116438:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011643c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0116440:	83 ec 04             	sub    $0x4,%esp
f0116443:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116449:	50                   	push   %eax
f011644a:	68 00 77 13 f0       	push   $0xf0137700
f011644f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116455:	50                   	push   %eax
f0116456:	e8 f3 8e 01 00       	call   f012f34e <strcconcat>
f011645b:	83 c4 10             	add    $0x10,%esp
f011645e:	83 ec 0c             	sub    $0xc,%esp
f0116461:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116467:	50                   	push   %eax
f0116468:	e8 56 b7 fe ff       	call   f0101bc3 <execute_command>
f011646d:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0116470:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116477:	00 00 00 
		num_pages = 0;
f011647a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116481:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116484:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116487:	89 d0                	mov    %edx,%eax
f0116489:	c1 e0 02             	shl    $0x2,%eax
f011648c:	01 d0                	add    %edx,%eax
f011648e:	01 c0                	add    %eax,%eax
f0116490:	05 00 00 40 00       	add    $0x400000,%eax
f0116495:	89 c2                	mov    %eax,%edx
f0116497:	83 ec 0c             	sub    $0xc,%esp
f011649a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01164a0:	50                   	push   %eax
f01164a1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01164a7:	50                   	push   %eax
f01164a8:	52                   	push   %edx
f01164a9:	68 00 00 40 00       	push   $0x400000
f01164ae:	ff 75 d8             	pushl  -0x28(%ebp)
f01164b1:	e8 e1 26 ff ff       	call   f0108b97 <calculate_allocated_space>
f01164b6:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01164b9:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01164c0:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01164c7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01164cd:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01164d0:	74 28                	je     f01164fa <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01164d2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01164d8:	83 ec 0c             	sub    $0xc,%esp
f01164db:	ff 75 c8             	pushl  -0x38(%ebp)
f01164de:	50                   	push   %eax
f01164df:	68 e0 86 13 f0       	push   $0xf01386e0
f01164e4:	68 2a 07 00 00       	push   $0x72a
f01164e9:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01164ee:	e8 cb 9e fe ff       	call   f01003be <_warn>
f01164f3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01164f6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01164fa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116500:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116503:	74 28                	je     f011652d <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116505:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011650b:	83 ec 0c             	sub    $0xc,%esp
f011650e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116511:	50                   	push   %eax
f0116512:	68 40 87 13 f0       	push   $0xf0138740
f0116517:	68 2f 07 00 00       	push   $0x72f
f011651c:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116521:	e8 98 9e fe ff       	call   f01003be <_warn>
f0116526:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116529:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011652d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116531:	74 04                	je     f0116537 <test_calculate_allocated_space+0xb57>
f0116533:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116537:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011653b:	83 ec 04             	sub    $0x4,%esp
f011653e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116544:	50                   	push   %eax
f0116545:	68 0a 77 13 f0       	push   $0xf013770a
f011654a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116550:	50                   	push   %eax
f0116551:	e8 f8 8d 01 00       	call   f012f34e <strcconcat>
f0116556:	83 c4 10             	add    $0x10,%esp
f0116559:	83 ec 0c             	sub    $0xc,%esp
f011655c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116562:	50                   	push   %eax
f0116563:	e8 5b b6 fe ff       	call   f0101bc3 <execute_command>
f0116568:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011656b:	83 ec 04             	sub    $0x4,%esp
f011656e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116574:	50                   	push   %eax
f0116575:	68 48 86 13 f0       	push   $0xf0138648
f011657a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116580:	50                   	push   %eax
f0116581:	e8 c8 8d 01 00       	call   f012f34e <strcconcat>
f0116586:	83 c4 10             	add    $0x10,%esp
f0116589:	83 ec 0c             	sub    $0xc,%esp
f011658c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116592:	50                   	push   %eax
f0116593:	e8 2b b6 fe ff       	call   f0101bc3 <execute_command>
f0116598:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f011659b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01165a2:	00 00 00 
		num_pages = 0;
f01165a5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01165ac:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01165af:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01165b2:	05 00 00 38 00       	add    $0x380000,%eax
f01165b7:	01 c0                	add    %eax,%eax
f01165b9:	89 c2                	mov    %eax,%edx
f01165bb:	83 ec 0c             	sub    $0xc,%esp
f01165be:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01165c4:	50                   	push   %eax
f01165c5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01165cb:	50                   	push   %eax
f01165cc:	52                   	push   %edx
f01165cd:	68 00 00 70 00       	push   $0x700000
f01165d2:	ff 75 d8             	pushl  -0x28(%ebp)
f01165d5:	e8 bd 25 ff ff       	call   f0108b97 <calculate_allocated_space>
f01165da:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01165dd:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01165e4:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01165eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165f1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01165f4:	74 28                	je     f011661e <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01165f6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165fc:	83 ec 0c             	sub    $0xc,%esp
f01165ff:	ff 75 c8             	pushl  -0x38(%ebp)
f0116602:	50                   	push   %eax
f0116603:	68 e0 86 13 f0       	push   $0xf01386e0
f0116608:	68 41 07 00 00       	push   $0x741
f011660d:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116612:	e8 a7 9d fe ff       	call   f01003be <_warn>
f0116617:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011661a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011661e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116624:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116627:	74 28                	je     f0116651 <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116629:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011662f:	83 ec 0c             	sub    $0xc,%esp
f0116632:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116635:	50                   	push   %eax
f0116636:	68 40 87 13 f0       	push   $0xf0138740
f011663b:	68 46 07 00 00       	push   $0x746
f0116640:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116645:	e8 74 9d fe ff       	call   f01003be <_warn>
f011664a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011664d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116651:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116655:	74 04                	je     f011665b <test_calculate_allocated_space+0xc7b>
f0116657:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011665b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f011665f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116666:	00 00 00 
		num_pages = 0;
f0116669:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116670:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116673:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116676:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011667b:	89 c2                	mov    %eax,%edx
f011667d:	83 ec 0c             	sub    $0xc,%esp
f0116680:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116686:	50                   	push   %eax
f0116687:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011668d:	50                   	push   %eax
f011668e:	52                   	push   %edx
f011668f:	68 ff ff 3f 00       	push   $0x3fffff
f0116694:	ff 75 d8             	pushl  -0x28(%ebp)
f0116697:	e8 fb 24 ff ff       	call   f0108b97 <calculate_allocated_space>
f011669c:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011669f:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01166a6:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01166ad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01166b3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01166b6:	74 28                	je     f01166e0 <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01166b8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01166be:	83 ec 0c             	sub    $0xc,%esp
f01166c1:	ff 75 c8             	pushl  -0x38(%ebp)
f01166c4:	50                   	push   %eax
f01166c5:	68 e0 86 13 f0       	push   $0xf01386e0
f01166ca:	68 54 07 00 00       	push   $0x754
f01166cf:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01166d4:	e8 e5 9c fe ff       	call   f01003be <_warn>
f01166d9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01166dc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01166e0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166e6:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01166e9:	74 28                	je     f0116713 <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01166eb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166f1:	83 ec 0c             	sub    $0xc,%esp
f01166f4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01166f7:	50                   	push   %eax
f01166f8:	68 40 87 13 f0       	push   $0xf0138740
f01166fd:	68 59 07 00 00       	push   $0x759
f0116702:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116707:	e8 b2 9c fe ff       	call   f01003be <_warn>
f011670c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011670f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116713:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116717:	74 04                	je     f011671d <test_calculate_allocated_space+0xd3d>
f0116719:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011671d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116721:	83 ec 0c             	sub    $0xc,%esp
f0116724:	68 bb 76 13 f0       	push   $0xf01376bb
f0116729:	e8 03 a7 fe ff       	call   f0100e31 <cprintf>
f011672e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116731:	83 ec 08             	sub    $0x8,%esp
f0116734:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116737:	68 9c 87 13 f0       	push   $0xf013879c
f011673c:	e8 f0 a6 fe ff       	call   f0100e31 <cprintf>
f0116741:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116744:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116748:	75 10                	jne    f011675a <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011674a:	83 ec 0c             	sub    $0xc,%esp
f011674d:	68 dc 87 13 f0       	push   $0xf01387dc
f0116752:	e8 da a6 fe ff       	call   f0100e31 <cprintf>
f0116757:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011675a:	a1 20 af 2b f0       	mov    0xf02baf20,%eax
f011675f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116762:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116765:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116768:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011676d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116770:	5b                   	pop    %ebx
f0116771:	5e                   	pop    %esi
f0116772:	5f                   	pop    %edi
f0116773:	5d                   	pop    %ebp
f0116774:	c3                   	ret    

f0116775 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116775:	55                   	push   %ebp
f0116776:	89 e5                	mov    %esp,%ebp
f0116778:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011677b:	8b 45 10             	mov    0x10(%ebp),%eax
f011677e:	ba 01 00 00 00       	mov    $0x1,%edx
f0116783:	88 c1                	mov    %al,%cl
f0116785:	d3 e2                	shl    %cl,%edx
f0116787:	89 d0                	mov    %edx,%eax
f0116789:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011678c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011678f:	c1 e8 16             	shr    $0x16,%eax
f0116792:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116799:	8b 45 08             	mov    0x8(%ebp),%eax
f011679c:	01 d0                	add    %edx,%eax
f011679e:	8b 00                	mov    (%eax),%eax
f01167a0:	83 e0 01             	and    $0x1,%eax
f01167a3:	85 c0                	test   %eax,%eax
f01167a5:	75 07                	jne    f01167ae <CB+0x39>
f01167a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01167ac:	eb 76                	jmp    f0116824 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01167ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167b1:	c1 e8 16             	shr    $0x16,%eax
f01167b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01167be:	01 d0                	add    %edx,%eax
f01167c0:	8b 00                	mov    (%eax),%eax
f01167c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01167c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01167ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01167cd:	c1 e8 0c             	shr    $0xc,%eax
f01167d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01167d3:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f01167d8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01167db:	72 17                	jb     f01167f4 <CB+0x7f>
f01167dd:	ff 75 f0             	pushl  -0x10(%ebp)
f01167e0:	68 28 88 13 f0       	push   $0xf0138828
f01167e5:	68 74 07 00 00       	push   $0x774
f01167ea:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01167ef:	e8 bc 99 fe ff       	call   f01001b0 <_panic>
f01167f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01167f7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01167fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01167ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116802:	c1 e8 0c             	shr    $0xc,%eax
f0116805:	25 ff 03 00 00       	and    $0x3ff,%eax
f011680a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116811:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116814:	01 d0                	add    %edx,%eax
f0116816:	8b 00                	mov    (%eax),%eax
f0116818:	23 45 f4             	and    -0xc(%ebp),%eax
f011681b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011681e:	0f 94 c0             	sete   %al
f0116821:	0f b6 c0             	movzbl %al,%eax
}
f0116824:	c9                   	leave  
f0116825:	c3                   	ret    

f0116826 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116826:	55                   	push   %ebp
f0116827:	89 e5                	mov    %esp,%ebp
f0116829:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011682c:	8b 45 10             	mov    0x10(%ebp),%eax
f011682f:	ba 01 00 00 00       	mov    $0x1,%edx
f0116834:	88 c1                	mov    %al,%cl
f0116836:	d3 e2                	shl    %cl,%edx
f0116838:	89 d0                	mov    %edx,%eax
f011683a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011683d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116840:	c1 e8 16             	shr    $0x16,%eax
f0116843:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011684a:	8b 45 08             	mov    0x8(%ebp),%eax
f011684d:	01 d0                	add    %edx,%eax
f011684f:	8b 00                	mov    (%eax),%eax
f0116851:	83 e0 01             	and    $0x1,%eax
f0116854:	85 c0                	test   %eax,%eax
f0116856:	75 0a                	jne    f0116862 <SB+0x3c>
f0116858:	b8 00 00 00 00       	mov    $0x0,%eax
f011685d:	e9 cd 00 00 00       	jmp    f011692f <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116862:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116865:	c1 e8 16             	shr    $0x16,%eax
f0116868:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011686f:	8b 45 08             	mov    0x8(%ebp),%eax
f0116872:	01 d0                	add    %edx,%eax
f0116874:	8b 00                	mov    (%eax),%eax
f0116876:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011687b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011687e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116881:	c1 e8 0c             	shr    $0xc,%eax
f0116884:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116887:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f011688c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011688f:	72 17                	jb     f01168a8 <SB+0x82>
f0116891:	ff 75 f0             	pushl  -0x10(%ebp)
f0116894:	68 28 88 13 f0       	push   $0xf0138828
f0116899:	68 7c 07 00 00       	push   $0x77c
f011689e:	68 2e 6d 13 f0       	push   $0xf0136d2e
f01168a3:	e8 08 99 fe ff       	call   f01001b0 <_panic>
f01168a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01168ab:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01168b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f01168b3:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f01168b7:	74 3c                	je     f01168f5 <SB+0xcf>
f01168b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168bc:	c1 e8 0c             	shr    $0xc,%eax
f01168bf:	25 ff 03 00 00       	and    $0x3ff,%eax
f01168c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01168ce:	01 d0                	add    %edx,%eax
f01168d0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01168d3:	c1 ea 0c             	shr    $0xc,%edx
f01168d6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01168dc:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01168e3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01168e6:	01 ca                	add    %ecx,%edx
f01168e8:	8b 12                	mov    (%edx),%edx
f01168ea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01168ed:	f7 d1                	not    %ecx
f01168ef:	21 ca                	and    %ecx,%edx
f01168f1:	89 10                	mov    %edx,(%eax)
f01168f3:	eb 35                	jmp    f011692a <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f01168f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168f8:	c1 e8 0c             	shr    $0xc,%eax
f01168fb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116900:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116907:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011690a:	01 c2                	add    %eax,%edx
f011690c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011690f:	c1 e8 0c             	shr    $0xc,%eax
f0116912:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116917:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011691e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116921:	01 c8                	add    %ecx,%eax
f0116923:	8b 00                	mov    (%eax),%eax
f0116925:	0b 45 f4             	or     -0xc(%ebp),%eax
f0116928:	89 02                	mov    %eax,(%edx)
	return 0;
f011692a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011692f:	c9                   	leave  
f0116930:	c3                   	ret    

f0116931 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116931:	55                   	push   %ebp
f0116932:	89 e5                	mov    %esp,%ebp
f0116934:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116937:	8b 45 0c             	mov    0xc(%ebp),%eax
f011693a:	c1 e8 16             	shr    $0x16,%eax
f011693d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116944:	8b 45 08             	mov    0x8(%ebp),%eax
f0116947:	01 d0                	add    %edx,%eax
f0116949:	8b 00                	mov    (%eax),%eax
f011694b:	83 e0 01             	and    $0x1,%eax
f011694e:	85 c0                	test   %eax,%eax
f0116950:	75 0a                	jne    f011695c <CPs+0x2b>
f0116952:	b8 00 00 00 00       	mov    $0x0,%eax
f0116957:	e9 b8 00 00 00       	jmp    f0116a14 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011695c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011695f:	c1 e8 16             	shr    $0x16,%eax
f0116962:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116969:	8b 45 08             	mov    0x8(%ebp),%eax
f011696c:	01 d0                	add    %edx,%eax
f011696e:	8b 00                	mov    (%eax),%eax
f0116970:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116975:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116978:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011697b:	c1 e8 0c             	shr    $0xc,%eax
f011697e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116981:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0116986:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116989:	72 17                	jb     f01169a2 <CPs+0x71>
f011698b:	ff 75 f0             	pushl  -0x10(%ebp)
f011698e:	68 28 88 13 f0       	push   $0xf0138828
f0116993:	68 85 07 00 00       	push   $0x785
f0116998:	68 2e 6d 13 f0       	push   $0xf0136d2e
f011699d:	e8 0e 98 fe ff       	call   f01001b0 <_panic>
f01169a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01169a5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01169aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f01169ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01169b4:	eb 53                	jmp    f0116a09 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f01169b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01169b9:	ba 01 00 00 00       	mov    $0x1,%edx
f01169be:	88 c1                	mov    %al,%cl
f01169c0:	d3 e2                	shl    %cl,%edx
f01169c2:	89 d0                	mov    %edx,%eax
f01169c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f01169c7:	8b 45 14             	mov    0x14(%ebp),%eax
f01169ca:	23 45 e4             	and    -0x1c(%ebp),%eax
f01169cd:	85 c0                	test   %eax,%eax
f01169cf:	74 34                	je     f0116a05 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f01169d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01169d4:	c1 e8 0c             	shr    $0xc,%eax
f01169d7:	25 ff 03 00 00       	and    $0x3ff,%eax
f01169dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01169e6:	01 d0                	add    %edx,%eax
f01169e8:	8b 00                	mov    (%eax),%eax
f01169ea:	33 45 10             	xor    0x10(%ebp),%eax
f01169ed:	23 45 e4             	and    -0x1c(%ebp),%eax
f01169f0:	85 c0                	test   %eax,%eax
f01169f2:	0f 94 c0             	sete   %al
f01169f5:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f01169f8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01169fc:	75 08                	jne    f0116a06 <CPs+0xd5>
f01169fe:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a03:	eb 0f                	jmp    f0116a14 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0116a05:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0116a06:	ff 45 f4             	incl   -0xc(%ebp)
f0116a09:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0116a0d:	7e a7                	jle    f01169b6 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0116a0f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116a14:	c9                   	leave  
f0116a15:	c3                   	ret    

f0116a16 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0116a16:	55                   	push   %ebp
f0116a17:	89 e5                	mov    %esp,%ebp
f0116a19:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116a1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a1f:	c1 e8 16             	shr    $0x16,%eax
f0116a22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a29:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a2c:	01 d0                	add    %edx,%eax
f0116a2e:	8b 00                	mov    (%eax),%eax
f0116a30:	83 e0 01             	and    $0x1,%eax
f0116a33:	85 c0                	test   %eax,%eax
f0116a35:	75 07                	jne    f0116a3e <CA+0x28>
f0116a37:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a3c:	eb 6f                	jmp    f0116aad <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a41:	c1 e8 16             	shr    $0x16,%eax
f0116a44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a4e:	01 d0                	add    %edx,%eax
f0116a50:	8b 00                	mov    (%eax),%eax
f0116a52:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116a57:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116a5d:	c1 e8 0c             	shr    $0xc,%eax
f0116a60:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116a63:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0116a68:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116a6b:	72 17                	jb     f0116a84 <CA+0x6e>
f0116a6d:	ff 75 f4             	pushl  -0xc(%ebp)
f0116a70:	68 28 88 13 f0       	push   $0xf0138828
f0116a75:	68 94 07 00 00       	push   $0x794
f0116a7a:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116a7f:	e8 2c 97 fe ff       	call   f01001b0 <_panic>
f0116a84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116a87:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116a8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0116a8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a92:	c1 e8 0c             	shr    $0xc,%eax
f0116a95:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116a9a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116aa4:	01 d0                	add    %edx,%eax
f0116aa6:	8b 00                	mov    (%eax),%eax
f0116aa8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0116aad:	c9                   	leave  
f0116aae:	c3                   	ret    

f0116aaf <CE>:

int CE(uint32 *_d, uint32 va)
{
f0116aaf:	55                   	push   %ebp
f0116ab0:	89 e5                	mov    %esp,%ebp
f0116ab2:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116ab5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ab8:	c1 e8 16             	shr    $0x16,%eax
f0116abb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ac2:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ac5:	01 d0                	add    %edx,%eax
f0116ac7:	8b 00                	mov    (%eax),%eax
f0116ac9:	83 e0 01             	and    $0x1,%eax
f0116acc:	85 c0                	test   %eax,%eax
f0116ace:	75 07                	jne    f0116ad7 <CE+0x28>
f0116ad0:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ad5:	eb 7a                	jmp    f0116b51 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116ad7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ada:	c1 e8 16             	shr    $0x16,%eax
f0116add:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ae4:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ae7:	01 d0                	add    %edx,%eax
f0116ae9:	8b 00                	mov    (%eax),%eax
f0116aeb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116af0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116af6:	c1 e8 0c             	shr    $0xc,%eax
f0116af9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116afc:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0116b01:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116b04:	72 17                	jb     f0116b1d <CE+0x6e>
f0116b06:	ff 75 f4             	pushl  -0xc(%ebp)
f0116b09:	68 28 88 13 f0       	push   $0xf0138828
f0116b0e:	68 9b 07 00 00       	push   $0x79b
f0116b13:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116b18:	e8 93 96 fe ff       	call   f01001b0 <_panic>
f0116b1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b20:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116b25:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116b28:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b2b:	c1 e8 0c             	shr    $0xc,%eax
f0116b2e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116b33:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116b3d:	01 d0                	add    %edx,%eax
f0116b3f:	8b 00                	mov    (%eax),%eax
f0116b41:	85 c0                	test   %eax,%eax
f0116b43:	74 07                	je     f0116b4c <CE+0x9d>
f0116b45:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b4a:	eb 05                	jmp    f0116b51 <CE+0xa2>
	return 1;
f0116b4c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116b51:	c9                   	leave  
f0116b52:	c3                   	ret    

f0116b53 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116b53:	55                   	push   %ebp
f0116b54:	89 e5                	mov    %esp,%ebp
f0116b56:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0116b59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b5c:	c1 e8 16             	shr    $0x16,%eax
f0116b5f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b66:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b69:	01 d0                	add    %edx,%eax
f0116b6b:	8b 00                	mov    (%eax),%eax
f0116b6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0116b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b73:	83 e0 01             	and    $0x1,%eax
f0116b76:	85 c0                	test   %eax,%eax
f0116b78:	0f 84 92 00 00 00    	je     f0116c10 <CP+0xbd>
	{
		uint32 *t = NULL;
f0116b7e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0116b85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b88:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116b8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116b90:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116b93:	c1 e8 0c             	shr    $0xc,%eax
f0116b96:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0116b99:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0116b9e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0116ba1:	72 17                	jb     f0116bba <CP+0x67>
f0116ba3:	ff 75 ec             	pushl  -0x14(%ebp)
f0116ba6:	68 28 88 13 f0       	push   $0xf0138828
f0116bab:	68 a7 07 00 00       	push   $0x7a7
f0116bb0:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116bb5:	e8 f6 95 fe ff       	call   f01001b0 <_panic>
f0116bba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116bbd:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116bc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0116bc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116bc8:	c1 e8 0c             	shr    $0xc,%eax
f0116bcb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116bd0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116bd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116bda:	01 d0                	add    %edx,%eax
f0116bdc:	8b 00                	mov    (%eax),%eax
f0116bde:	23 45 10             	and    0x10(%ebp),%eax
f0116be1:	3b 45 10             	cmp    0x10(%ebp),%eax
f0116be4:	75 2a                	jne    f0116c10 <CP+0xbd>
f0116be6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116be9:	c1 e8 0c             	shr    $0xc,%eax
f0116bec:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116bf1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116bf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116bfb:	01 d0                	add    %edx,%eax
f0116bfd:	8b 00                	mov    (%eax),%eax
f0116bff:	f7 d0                	not    %eax
f0116c01:	23 45 14             	and    0x14(%ebp),%eax
f0116c04:	3b 45 14             	cmp    0x14(%ebp),%eax
f0116c07:	75 07                	jne    f0116c10 <CP+0xbd>
			return 1;
f0116c09:	b8 01 00 00 00       	mov    $0x1,%eax
f0116c0e:	eb 05                	jmp    f0116c15 <CP+0xc2>
	}
	return 0;
f0116c10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116c15:	c9                   	leave  
f0116c16:	c3                   	ret    

f0116c17 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116c17:	55                   	push   %ebp
f0116c18:	89 e5                	mov    %esp,%ebp
f0116c1a:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116c1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c20:	c1 e8 16             	shr    $0x16,%eax
f0116c23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c2d:	01 d0                	add    %edx,%eax
f0116c2f:	8b 00                	mov    (%eax),%eax
f0116c31:	83 e0 01             	and    $0x1,%eax
f0116c34:	85 c0                	test   %eax,%eax
f0116c36:	75 07                	jne    f0116c3f <GP+0x28>
f0116c38:	b8 00 00 00 00       	mov    $0x0,%eax
f0116c3d:	eb 6f                	jmp    f0116cae <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c42:	c1 e8 16             	shr    $0x16,%eax
f0116c45:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c4f:	01 d0                	add    %edx,%eax
f0116c51:	8b 00                	mov    (%eax),%eax
f0116c53:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116c58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116c5e:	c1 e8 0c             	shr    $0xc,%eax
f0116c61:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116c64:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f0116c69:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116c6c:	72 17                	jb     f0116c85 <GP+0x6e>
f0116c6e:	ff 75 f4             	pushl  -0xc(%ebp)
f0116c71:	68 28 88 13 f0       	push   $0xf0138828
f0116c76:	68 b4 07 00 00       	push   $0x7b4
f0116c7b:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116c80:	e8 2b 95 fe ff       	call   f01001b0 <_panic>
f0116c85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116c88:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116c8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0116c90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c93:	c1 e8 0c             	shr    $0xc,%eax
f0116c96:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c9b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ca2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116ca5:	01 d0                	add    %edx,%eax
f0116ca7:	8b 00                	mov    (%eax),%eax
f0116ca9:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0116cae:	c9                   	leave  
f0116caf:	c3                   	ret    

f0116cb0 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0116cb0:	55                   	push   %ebp
f0116cb1:	89 e5                	mov    %esp,%ebp
f0116cb3:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116cb6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116cbd:	eb 18                	jmp    f0116cd7 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116cbf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116cc2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116cc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ccc:	01 d0                	add    %edx,%eax
f0116cce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116cd4:	ff 45 fc             	incl   -0x4(%ebp)
f0116cd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116cda:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116cdf:	76 de                	jbe    f0116cbf <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116ce1:	90                   	nop
f0116ce2:	c9                   	leave  
f0116ce3:	c3                   	ret    

f0116ce4 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116ce4:	55                   	push   %ebp
f0116ce5:	89 e5                	mov    %esp,%ebp
f0116ce7:	83 ec 38             	sub    $0x38,%esp
f0116cea:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116ced:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116cf3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116cf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0116cfb:	8b 45 10             	mov    0x10(%ebp),%eax
f0116cfe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d03:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116d06:	e9 ea 01 00 00       	jmp    f0116ef5 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0116d0b:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116d0f:	74 44                	je     f0116d55 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d14:	83 ec 04             	sub    $0x4,%esp
f0116d17:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116d1a:	52                   	push   %edx
f0116d1b:	50                   	push   %eax
f0116d1c:	ff 75 08             	pushl  0x8(%ebp)
f0116d1f:	e8 fd 09 ff ff       	call   f0107721 <get_frame_info>
f0116d24:	83 c4 10             	add    $0x10,%esp
f0116d27:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116d2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d2d:	85 c0                	test   %eax,%eax
f0116d2f:	75 24                	jne    f0116d55 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116d31:	83 ec 04             	sub    $0x4,%esp
f0116d34:	68 58 88 13 f0       	push   $0xf0138858
f0116d39:	68 cf 07 00 00       	push   $0x7cf
f0116d3e:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116d43:	e8 76 96 fe ff       	call   f01003be <_warn>
f0116d48:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116d4b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116d50:	e9 b6 01 00 00       	jmp    f0116f0b <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116d55:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116d58:	83 ec 04             	sub    $0x4,%esp
f0116d5b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116d5e:	52                   	push   %edx
f0116d5f:	50                   	push   %eax
f0116d60:	ff 75 08             	pushl  0x8(%ebp)
f0116d63:	e8 b9 09 ff ff       	call   f0107721 <get_frame_info>
f0116d68:	83 c4 10             	add    $0x10,%esp
f0116d6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116d6e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116d71:	85 c0                	test   %eax,%eax
f0116d73:	75 24                	jne    f0116d99 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116d75:	83 ec 04             	sub    $0x4,%esp
f0116d78:	68 84 88 13 f0       	push   $0xf0138884
f0116d7d:	68 d6 07 00 00       	push   $0x7d6
f0116d82:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116d87:	e8 32 96 fe ff       	call   f01003be <_warn>
f0116d8c:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116d8f:	b8 00 00 00 00       	mov    $0x0,%eax
f0116d94:	e9 72 01 00 00       	jmp    f0116f0b <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116d99:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116d9d:	75 70                	jne    f0116e0f <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116d9f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116da2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116da5:	c1 ea 0c             	shr    $0xc,%edx
f0116da8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116dae:	c1 e2 02             	shl    $0x2,%edx
f0116db1:	01 d0                	add    %edx,%eax
f0116db3:	8b 00                	mov    (%eax),%eax
f0116db5:	c1 e8 0c             	shr    $0xc,%eax
f0116db8:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116dbb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116dbe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116dc1:	c1 ea 0c             	shr    $0xc,%edx
f0116dc4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116dca:	c1 e2 02             	shl    $0x2,%edx
f0116dcd:	01 d0                	add    %edx,%eax
f0116dcf:	8b 00                	mov    (%eax),%eax
f0116dd1:	c1 e8 0c             	shr    $0xc,%eax
f0116dd4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116dd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116dda:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116ddd:	74 30                	je     f0116e0f <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116ddf:	83 ec 04             	sub    $0x4,%esp
f0116de2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116de5:	ff 75 e8             	pushl  -0x18(%ebp)
f0116de8:	ff 75 f0             	pushl  -0x10(%ebp)
f0116deb:	ff 75 f4             	pushl  -0xc(%ebp)
f0116dee:	68 b0 88 13 f0       	push   $0xf01388b0
f0116df3:	68 e0 07 00 00       	push   $0x7e0
f0116df8:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116dfd:	e8 bc 95 fe ff       	call   f01003be <_warn>
f0116e02:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e0a:	e9 fc 00 00 00       	jmp    f0116f0b <CCP+0x227>
			}
		}
		if (ref != -1)
f0116e0f:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116e13:	74 52                	je     f0116e67 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116e15:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116e19:	74 0e                	je     f0116e29 <CCP+0x145>
f0116e1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e1e:	8b 40 08             	mov    0x8(%eax),%eax
f0116e21:	0f b7 c0             	movzwl %ax,%eax
f0116e24:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116e27:	74 3e                	je     f0116e67 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116e29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116e2d:	74 0b                	je     f0116e3a <CCP+0x156>
f0116e2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e32:	8b 40 08             	mov    0x8(%eax),%eax
f0116e35:	0f b7 c0             	movzwl %ax,%eax
f0116e38:	eb 05                	jmp    f0116e3f <CCP+0x15b>
f0116e3a:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e3f:	83 ec 0c             	sub    $0xc,%esp
f0116e42:	50                   	push   %eax
f0116e43:	ff 75 f0             	pushl  -0x10(%ebp)
f0116e46:	68 0c 89 13 f0       	push   $0xf013890c
f0116e4b:	68 e8 07 00 00       	push   $0x7e8
f0116e50:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116e55:	e8 64 95 fe ff       	call   f01003be <_warn>
f0116e5a:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116e5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e62:	e9 a4 00 00 00       	jmp    f0116f0b <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116e67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116e6a:	ff 75 20             	pushl  0x20(%ebp)
f0116e6d:	ff 75 1c             	pushl  0x1c(%ebp)
f0116e70:	50                   	push   %eax
f0116e71:	ff 75 08             	pushl  0x8(%ebp)
f0116e74:	e8 b8 fa ff ff       	call   f0116931 <CPs>
f0116e79:	83 c4 10             	add    $0x10,%esp
f0116e7c:	85 c0                	test   %eax,%eax
f0116e7e:	7f 21                	jg     f0116ea1 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116e80:	83 ec 04             	sub    $0x4,%esp
f0116e83:	68 7c 89 13 f0       	push   $0xf013897c
f0116e88:	68 ee 07 00 00       	push   $0x7ee
f0116e8d:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116e92:	e8 27 95 fe ff       	call   f01003be <_warn>
f0116e97:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116e9a:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e9f:	eb 6a                	jmp    f0116f0b <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116ea1:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116ea5:	74 3a                	je     f0116ee1 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116ea7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116eaa:	ff 75 28             	pushl  0x28(%ebp)
f0116ead:	ff 75 24             	pushl  0x24(%ebp)
f0116eb0:	50                   	push   %eax
f0116eb1:	ff 75 08             	pushl  0x8(%ebp)
f0116eb4:	e8 78 fa ff ff       	call   f0116931 <CPs>
f0116eb9:	83 c4 10             	add    $0x10,%esp
f0116ebc:	85 c0                	test   %eax,%eax
f0116ebe:	7f 21                	jg     f0116ee1 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116ec0:	83 ec 04             	sub    $0x4,%esp
f0116ec3:	68 c4 89 13 f0       	push   $0xf01389c4
f0116ec8:	68 f5 07 00 00       	push   $0x7f5
f0116ecd:	68 2e 6d 13 f0       	push   $0xf0136d2e
f0116ed2:	e8 e7 94 fe ff       	call   f01003be <_warn>
f0116ed7:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116eda:	b8 00 00 00 00       	mov    $0x0,%eax
f0116edf:	eb 2a                	jmp    f0116f0b <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116ee1:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116ee5:	74 07                	je     f0116eee <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116ee7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116eee:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116ef5:	8b 55 10             	mov    0x10(%ebp),%edx
f0116ef8:	8b 45 14             	mov    0x14(%ebp),%eax
f0116efb:	01 d0                	add    %edx,%eax
f0116efd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116f00:	0f 87 05 fe ff ff    	ja     f0116d0b <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116f06:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116f0b:	c9                   	leave  
f0116f0c:	c3                   	ret    

f0116f0d <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116f0d:	55                   	push   %ebp
f0116f0e:	89 e5                	mov    %esp,%ebp
f0116f10:	57                   	push   %edi
f0116f11:	56                   	push   %esi
f0116f12:	53                   	push   %ebx
f0116f13:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0116f19:	a0 1c cb 18 f0       	mov    0xf018cb1c,%al
f0116f1e:	84 c0                	test   %al,%al
f0116f20:	0f 84 38 0a 00 00    	je     f011795e <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116f26:	c6 05 1c cb 18 f0 00 	movb   $0x0,0xf018cb1c
		char command[100] = "load fos_add 20";
f0116f2d:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116f33:	bb 80 8c 13 f0       	mov    $0xf0138c80,%ebx
f0116f38:	ba 04 00 00 00       	mov    $0x4,%edx
f0116f3d:	89 c7                	mov    %eax,%edi
f0116f3f:	89 de                	mov    %ebx,%esi
f0116f41:	89 d1                	mov    %edx,%ecx
f0116f43:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116f45:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116f4b:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116f50:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f55:	89 d7                	mov    %edx,%edi
f0116f57:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116f59:	83 ec 0c             	sub    $0xc,%esp
f0116f5c:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116f62:	50                   	push   %eax
f0116f63:	e8 5b ac fe ff       	call   f0101bc3 <execute_command>
f0116f68:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116f6b:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116f71:	bb e4 8c 13 f0       	mov    $0xf0138ce4,%ebx
f0116f76:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116f7b:	89 c7                	mov    %eax,%edi
f0116f7d:	89 de                	mov    %ebx,%esi
f0116f7f:	89 d1                	mov    %edx,%ecx
f0116f81:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116f83:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116f89:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116f8e:	b0 00                	mov    $0x0,%al
f0116f90:	89 d7                	mov    %edx,%edi
f0116f92:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116f94:	83 ec 0c             	sub    $0xc,%esp
f0116f97:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116f9d:	50                   	push   %eax
f0116f9e:	e8 20 ac fe ff       	call   f0101bc3 <execute_command>
f0116fa3:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116fa6:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116fac:	bb 48 8d 13 f0       	mov    $0xf0138d48,%ebx
f0116fb1:	ba 17 00 00 00       	mov    $0x17,%edx
f0116fb6:	89 c7                	mov    %eax,%edi
f0116fb8:	89 de                	mov    %ebx,%esi
f0116fba:	89 d1                	mov    %edx,%ecx
f0116fbc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116fbe:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116fc4:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116fc9:	b0 00                	mov    $0x0,%al
f0116fcb:	89 d7                	mov    %edx,%edi
f0116fcd:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116fcf:	83 ec 0c             	sub    $0xc,%esp
f0116fd2:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116fd8:	50                   	push   %eax
f0116fd9:	e8 e5 ab fe ff       	call   f0101bc3 <execute_command>
f0116fde:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f0116fe1:	83 ec 04             	sub    $0x4,%esp
f0116fe4:	6a 00                	push   $0x0
f0116fe6:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116fe9:	50                   	push   %eax
f0116fea:	6a 10                	push   $0x10
f0116fec:	e8 7f 29 ff ff       	call   f0109970 <envid2env>
f0116ff1:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0116ff4:	83 ec 04             	sub    $0x4,%esp
f0116ff7:	6a 00                	push   $0x0
f0116ff9:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116ffc:	50                   	push   %eax
f0116ffd:	6a 11                	push   $0x11
f0116fff:	e8 6c 29 ff ff       	call   f0109970 <envid2env>
f0117004:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0117007:	83 ec 04             	sub    $0x4,%esp
f011700a:	6a 00                	push   $0x0
f011700c:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f011700f:	50                   	push   %eax
f0117010:	6a 12                	push   $0x12
f0117012:	e8 59 29 ff ff       	call   f0109970 <envid2env>
f0117017:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011701a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011701d:	85 c0                	test   %eax,%eax
f011701f:	74 0e                	je     f011702f <test_priority_normal_and_higher+0x122>
f0117021:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117024:	85 c0                	test   %eax,%eax
f0117026:	74 07                	je     f011702f <test_priority_normal_and_higher+0x122>
f0117028:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011702b:	85 c0                	test   %eax,%eax
f011702d:	75 14                	jne    f0117043 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f011702f:	83 ec 04             	sub    $0x4,%esp
f0117032:	68 04 8a 13 f0       	push   $0xf0138a04
f0117037:	6a 29                	push   $0x29
f0117039:	68 1d 8a 13 f0       	push   $0xf0138a1d
f011703e:	e8 6d 91 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117043:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117046:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011704c:	83 f8 14             	cmp    $0x14,%eax
f011704f:	75 1c                	jne    f011706d <test_priority_normal_and_higher+0x160>
f0117051:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117054:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011705a:	83 f8 0f             	cmp    $0xf,%eax
f011705d:	75 0e                	jne    f011706d <test_priority_normal_and_higher+0x160>
f011705f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117062:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117068:	83 f8 0a             	cmp    $0xa,%eax
f011706b:	74 32                	je     f011709f <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f011706d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117070:	8b 88 7c d5 01 00    	mov    0x1d57c(%eax),%ecx
f0117076:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117079:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f011707f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117082:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117088:	83 ec 08             	sub    $0x8,%esp
f011708b:	51                   	push   %ecx
f011708c:	52                   	push   %edx
f011708d:	50                   	push   %eax
f011708e:	68 38 8a 13 f0       	push   $0xf0138a38
f0117093:	6a 2c                	push   $0x2c
f0117095:	68 1d 8a 13 f0       	push   $0xf0138a1d
f011709a:	e8 11 91 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f011709f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01170a6:	eb 47                	jmp    f01170ef <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01170a8:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f01170ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01170ae:	89 d0                	mov    %edx,%eax
f01170b0:	01 c0                	add    %eax,%eax
f01170b2:	01 d0                	add    %edx,%eax
f01170b4:	c1 e0 03             	shl    $0x3,%eax
f01170b7:	01 c8                	add    %ecx,%eax
f01170b9:	05 b8 00 00 00       	add    $0xb8,%eax
f01170be:	8b 10                	mov    (%eax),%edx
f01170c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01170c3:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01170ca:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f01170cd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01170d0:	89 d0                	mov    %edx,%eax
f01170d2:	01 c0                	add    %eax,%eax
f01170d4:	01 d0                	add    %edx,%eax
f01170d6:	c1 e0 03             	shl    $0x3,%eax
f01170d9:	01 c8                	add    %ecx,%eax
f01170db:	05 c0 00 00 00       	add    $0xc0,%eax
f01170e0:	8b 10                	mov    (%eax),%edx
f01170e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01170e5:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f01170ec:	ff 45 e4             	incl   -0x1c(%ebp)
f01170ef:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01170f3:	7e b3                	jle    f01170a8 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01170f5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01170fc:	eb 47                	jmp    f0117145 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01170fe:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117101:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117104:	89 d0                	mov    %edx,%eax
f0117106:	01 c0                	add    %eax,%eax
f0117108:	01 d0                	add    %edx,%eax
f011710a:	c1 e0 03             	shl    $0x3,%eax
f011710d:	01 c8                	add    %ecx,%eax
f011710f:	05 b8 00 00 00       	add    $0xb8,%eax
f0117114:	8b 10                	mov    (%eax),%edx
f0117116:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117119:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117120:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117123:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117126:	89 d0                	mov    %edx,%eax
f0117128:	01 c0                	add    %eax,%eax
f011712a:	01 d0                	add    %edx,%eax
f011712c:	c1 e0 03             	shl    $0x3,%eax
f011712f:	01 c8                	add    %ecx,%eax
f0117131:	05 c0 00 00 00       	add    $0xc0,%eax
f0117136:	8b 10                	mov    (%eax),%edx
f0117138:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011713b:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0117142:	ff 45 e0             	incl   -0x20(%ebp)
f0117145:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0117149:	7e b3                	jle    f01170fe <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f011714b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117152:	eb 47                	jmp    f011719b <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117154:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117157:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011715a:	89 d0                	mov    %edx,%eax
f011715c:	01 c0                	add    %eax,%eax
f011715e:	01 d0                	add    %edx,%eax
f0117160:	c1 e0 03             	shl    $0x3,%eax
f0117163:	01 c8                	add    %ecx,%eax
f0117165:	05 b8 00 00 00       	add    $0xb8,%eax
f011716a:	8b 10                	mov    (%eax),%edx
f011716c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011716f:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117176:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117179:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011717c:	89 d0                	mov    %edx,%eax
f011717e:	01 c0                	add    %eax,%eax
f0117180:	01 d0                	add    %edx,%eax
f0117182:	c1 e0 03             	shl    $0x3,%eax
f0117185:	01 c8                	add    %ecx,%eax
f0117187:	05 c0 00 00 00       	add    $0xc0,%eax
f011718c:	8b 10                	mov    (%eax),%edx
f011718e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117191:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0117198:	ff 45 dc             	incl   -0x24(%ebp)
f011719b:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011719f:	7e b3                	jle    f0117154 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01171a1:	e8 da 57 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01171a6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f01171a9:	e8 78 d4 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01171ae:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01171b1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01171b4:	83 ec 08             	sub    $0x8,%esp
f01171b7:	6a 03                	push   $0x3
f01171b9:	50                   	push   %eax
f01171ba:	e8 a8 3c ff ff       	call   f010ae67 <set_program_priority>
f01171bf:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01171c2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171c5:	83 ec 08             	sub    $0x8,%esp
f01171c8:	6a 03                	push   $0x3
f01171ca:	50                   	push   %eax
f01171cb:	e8 97 3c ff ff       	call   f010ae67 <set_program_priority>
f01171d0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01171d3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01171d6:	83 ec 08             	sub    $0x8,%esp
f01171d9:	6a 03                	push   $0x3
f01171db:	50                   	push   %eax
f01171dc:	e8 86 3c ff ff       	call   f010ae67 <set_program_priority>
f01171e1:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01171e4:	e8 3d d4 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01171e9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01171ec:	74 14                	je     f0117202 <test_priority_normal_and_higher+0x2f5>
f01171ee:	83 ec 04             	sub    $0x4,%esp
f01171f1:	68 a0 8a 13 f0       	push   $0xf0138aa0
f01171f6:	6a 48                	push   $0x48
f01171f8:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01171fd:	e8 ae 8f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117202:	e8 79 57 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117207:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011720a:	74 14                	je     f0117220 <test_priority_normal_and_higher+0x313>
f011720c:	83 ec 04             	sub    $0x4,%esp
f011720f:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0117214:	6a 49                	push   $0x49
f0117216:	68 1d 8a 13 f0       	push   $0xf0138a1d
f011721b:	e8 90 8f fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117220:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117223:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117229:	83 f8 14             	cmp    $0x14,%eax
f011722c:	75 1c                	jne    f011724a <test_priority_normal_and_higher+0x33d>
f011722e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117231:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117237:	83 f8 0f             	cmp    $0xf,%eax
f011723a:	75 0e                	jne    f011724a <test_priority_normal_and_higher+0x33d>
f011723c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011723f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117245:	83 f8 0a             	cmp    $0xa,%eax
f0117248:	74 14                	je     f011725e <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011724a:	83 ec 04             	sub    $0x4,%esp
f011724d:	68 cc 8a 13 f0       	push   $0xf0138acc
f0117252:	6a 4c                	push   $0x4c
f0117254:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117259:	e8 52 8f fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f011725e:	e8 1d 57 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117263:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117266:	e8 bb d3 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011726b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f011726e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117271:	83 ec 08             	sub    $0x8,%esp
f0117274:	6a 04                	push   $0x4
f0117276:	50                   	push   %eax
f0117277:	e8 eb 3b ff ff       	call   f010ae67 <set_program_priority>
f011727c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f011727f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117282:	83 ec 08             	sub    $0x8,%esp
f0117285:	6a 04                	push   $0x4
f0117287:	50                   	push   %eax
f0117288:	e8 da 3b ff ff       	call   f010ae67 <set_program_priority>
f011728d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117290:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117293:	83 ec 08             	sub    $0x8,%esp
f0117296:	6a 04                	push   $0x4
f0117298:	50                   	push   %eax
f0117299:	e8 c9 3b ff ff       	call   f010ae67 <set_program_priority>
f011729e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01172a1:	e8 80 d3 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01172a6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01172a9:	74 14                	je     f01172bf <test_priority_normal_and_higher+0x3b2>
f01172ab:	83 ec 04             	sub    $0x4,%esp
f01172ae:	68 a0 8a 13 f0       	push   $0xf0138aa0
f01172b3:	6a 56                	push   $0x56
f01172b5:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01172ba:	e8 f1 8e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f01172bf:	e8 bc 56 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01172c4:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01172c7:	74 14                	je     f01172dd <test_priority_normal_and_higher+0x3d0>
f01172c9:	83 ec 04             	sub    $0x4,%esp
f01172cc:	68 20 8b 13 f0       	push   $0xf0138b20
f01172d1:	6a 57                	push   $0x57
f01172d3:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01172d8:	e8 d3 8e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01172dd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172e0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172e6:	83 f8 14             	cmp    $0x14,%eax
f01172e9:	75 1c                	jne    f0117307 <test_priority_normal_and_higher+0x3fa>
f01172eb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172ee:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172f4:	83 f8 0f             	cmp    $0xf,%eax
f01172f7:	75 0e                	jne    f0117307 <test_priority_normal_and_higher+0x3fa>
f01172f9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172fc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117302:	83 f8 14             	cmp    $0x14,%eax
f0117305:	74 14                	je     f011731b <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117307:	83 ec 04             	sub    $0x4,%esp
f011730a:	68 50 8b 13 f0       	push   $0xf0138b50
f011730f:	6a 5a                	push   $0x5a
f0117311:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117316:	e8 95 8e fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f011731b:	e8 60 56 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117320:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117323:	e8 fe d2 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117328:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f011732b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011732e:	83 ec 08             	sub    $0x8,%esp
f0117331:	6a 04                	push   $0x4
f0117333:	50                   	push   %eax
f0117334:	e8 2e 3b ff ff       	call   f010ae67 <set_program_priority>
f0117339:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011733c:	e8 e5 d2 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117341:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117344:	74 14                	je     f011735a <test_priority_normal_and_higher+0x44d>
f0117346:	83 ec 04             	sub    $0x4,%esp
f0117349:	68 a0 8a 13 f0       	push   $0xf0138aa0
f011734e:	6a 62                	push   $0x62
f0117350:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117355:	e8 56 8e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011735a:	e8 21 56 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011735f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117362:	74 14                	je     f0117378 <test_priority_normal_and_higher+0x46b>
f0117364:	83 ec 04             	sub    $0x4,%esp
f0117367:	68 a0 8a 13 f0       	push   $0xf0138aa0
f011736c:	6a 63                	push   $0x63
f011736e:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117373:	e8 38 8e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117378:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011737b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117381:	83 f8 14             	cmp    $0x14,%eax
f0117384:	75 1c                	jne    f01173a2 <test_priority_normal_and_higher+0x495>
f0117386:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117389:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011738f:	83 f8 0f             	cmp    $0xf,%eax
f0117392:	75 0e                	jne    f01173a2 <test_priority_normal_and_higher+0x495>
f0117394:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117397:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011739d:	83 f8 14             	cmp    $0x14,%eax
f01173a0:	74 14                	je     f01173b6 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f01173a2:	83 ec 04             	sub    $0x4,%esp
f01173a5:	68 98 8b 13 f0       	push   $0xf0138b98
f01173aa:	6a 66                	push   $0x66
f01173ac:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01173b1:	e8 fa 8d fe ff       	call   f01001b0 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01173b6:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f01173bd:	eb 1c                	jmp    f01173db <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01173bf:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01173c2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01173c5:	89 d0                	mov    %edx,%eax
f01173c7:	01 c0                	add    %eax,%eax
f01173c9:	01 d0                	add    %edx,%eax
f01173cb:	c1 e0 03             	shl    $0x3,%eax
f01173ce:	01 c8                	add    %ecx,%eax
f01173d0:	05 bc 00 00 00       	add    $0xbc,%eax
f01173d5:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01173d8:	ff 45 d8             	incl   -0x28(%ebp)
f01173db:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f01173df:	7e de                	jle    f01173bf <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01173e1:	e8 9a 55 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01173e6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01173e9:	e8 38 d2 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01173ee:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f01173f1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01173f4:	83 ec 08             	sub    $0x8,%esp
f01173f7:	6a 04                	push   $0x4
f01173f9:	50                   	push   %eax
f01173fa:	e8 68 3a ff ff       	call   f010ae67 <set_program_priority>
f01173ff:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117402:	e8 1f d2 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117407:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011740a:	74 14                	je     f0117420 <test_priority_normal_and_higher+0x513>
f011740c:	83 ec 04             	sub    $0x4,%esp
f011740f:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0117414:	6a 73                	push   $0x73
f0117416:	68 1d 8a 13 f0       	push   $0xf0138a1d
f011741b:	e8 90 8d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117420:	e8 5b 55 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117425:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117428:	74 14                	je     f011743e <test_priority_normal_and_higher+0x531>
f011742a:	83 ec 04             	sub    $0x4,%esp
f011742d:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0117432:	6a 74                	push   $0x74
f0117434:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117439:	e8 72 8d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011743e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117441:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117447:	83 f8 14             	cmp    $0x14,%eax
f011744a:	75 1c                	jne    f0117468 <test_priority_normal_and_higher+0x55b>
f011744c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011744f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117455:	83 f8 0f             	cmp    $0xf,%eax
f0117458:	75 0e                	jne    f0117468 <test_priority_normal_and_higher+0x55b>
f011745a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011745d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117463:	83 f8 14             	cmp    $0x14,%eax
f0117466:	74 14                	je     f011747c <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f0117468:	83 ec 04             	sub    $0x4,%esp
f011746b:	68 98 8b 13 f0       	push   $0xf0138b98
f0117470:	6a 77                	push   $0x77
f0117472:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117477:	e8 34 8d fe ff       	call   f01001b0 <_panic>

		for(int i = 10; i < 15; i++)
f011747c:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0117483:	eb 1c                	jmp    f01174a1 <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117485:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117488:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011748b:	89 d0                	mov    %edx,%eax
f011748d:	01 c0                	add    %eax,%eax
f011748f:	01 d0                	add    %edx,%eax
f0117491:	c1 e0 03             	shl    $0x3,%eax
f0117494:	01 c8                	add    %ecx,%eax
f0117496:	05 bc 00 00 00       	add    $0xbc,%eax
f011749b:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f011749e:	ff 45 d4             	incl   -0x2c(%ebp)
f01174a1:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01174a5:	7e de                	jle    f0117485 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01174a7:	e8 d4 54 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01174ac:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01174af:	e8 72 d1 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01174b4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01174b7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01174ba:	83 ec 08             	sub    $0x8,%esp
f01174bd:	6a 05                	push   $0x5
f01174bf:	50                   	push   %eax
f01174c0:	e8 a2 39 ff ff       	call   f010ae67 <set_program_priority>
f01174c5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f01174c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01174cb:	83 ec 08             	sub    $0x8,%esp
f01174ce:	6a 05                	push   $0x5
f01174d0:	50                   	push   %eax
f01174d1:	e8 91 39 ff ff       	call   f010ae67 <set_program_priority>
f01174d6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01174d9:	e8 48 d1 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01174de:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01174e1:	74 17                	je     f01174fa <test_priority_normal_and_higher+0x5ed>
f01174e3:	83 ec 04             	sub    $0x4,%esp
f01174e6:	68 a0 8a 13 f0       	push   $0xf0138aa0
f01174eb:	68 82 00 00 00       	push   $0x82
f01174f0:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01174f5:	e8 b6 8c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01174fa:	e8 81 54 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01174ff:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117502:	74 17                	je     f011751b <test_priority_normal_and_higher+0x60e>
f0117504:	83 ec 04             	sub    $0x4,%esp
f0117507:	68 a0 8a 13 f0       	push   $0xf0138aa0
f011750c:	68 83 00 00 00       	push   $0x83
f0117511:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117516:	e8 95 8c fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011751b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011751e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117524:	83 f8 14             	cmp    $0x14,%eax
f0117527:	75 1c                	jne    f0117545 <test_priority_normal_and_higher+0x638>
f0117529:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011752c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117532:	83 f8 1e             	cmp    $0x1e,%eax
f0117535:	75 0e                	jne    f0117545 <test_priority_normal_and_higher+0x638>
f0117537:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011753a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117540:	83 f8 28             	cmp    $0x28,%eax
f0117543:	74 17                	je     f011755c <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f0117545:	83 ec 04             	sub    $0x4,%esp
f0117548:	68 d4 8b 13 f0       	push   $0xf0138bd4
f011754d:	68 86 00 00 00       	push   $0x86
f0117552:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117557:	e8 54 8c fe ff       	call   f01001b0 <_panic>

		for(int i = 20; i < 40; i++)
f011755c:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0117563:	eb 1c                	jmp    f0117581 <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0117565:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117568:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011756b:	89 d0                	mov    %edx,%eax
f011756d:	01 c0                	add    %eax,%eax
f011756f:	01 d0                	add    %edx,%eax
f0117571:	c1 e0 03             	shl    $0x3,%eax
f0117574:	01 c8                	add    %ecx,%eax
f0117576:	05 bc 00 00 00       	add    $0xbc,%eax
f011757b:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011757e:	ff 45 d0             	incl   -0x30(%ebp)
f0117581:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117585:	7e de                	jle    f0117565 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117587:	e8 f4 53 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011758c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011758f:	e8 92 d0 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117594:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117597:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011759a:	83 ec 08             	sub    $0x8,%esp
f011759d:	6a 05                	push   $0x5
f011759f:	50                   	push   %eax
f01175a0:	e8 c2 38 ff ff       	call   f010ae67 <set_program_priority>
f01175a5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01175a8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01175ab:	83 ec 08             	sub    $0x8,%esp
f01175ae:	6a 04                	push   $0x4
f01175b0:	50                   	push   %eax
f01175b1:	e8 b1 38 ff ff       	call   f010ae67 <set_program_priority>
f01175b6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01175b9:	e8 68 d0 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01175be:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01175c1:	74 17                	je     f01175da <test_priority_normal_and_higher+0x6cd>
f01175c3:	83 ec 04             	sub    $0x4,%esp
f01175c6:	68 a0 8a 13 f0       	push   $0xf0138aa0
f01175cb:	68 91 00 00 00       	push   $0x91
f01175d0:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01175d5:	e8 d6 8b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01175da:	e8 a1 53 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01175df:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01175e2:	74 17                	je     f01175fb <test_priority_normal_and_higher+0x6ee>
f01175e4:	83 ec 04             	sub    $0x4,%esp
f01175e7:	68 a0 8a 13 f0       	push   $0xf0138aa0
f01175ec:	68 92 00 00 00       	push   $0x92
f01175f1:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01175f6:	e8 b5 8b fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01175fb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01175fe:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117604:	83 f8 14             	cmp    $0x14,%eax
f0117607:	75 1c                	jne    f0117625 <test_priority_normal_and_higher+0x718>
f0117609:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011760c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117612:	83 f8 1e             	cmp    $0x1e,%eax
f0117615:	75 0e                	jne    f0117625 <test_priority_normal_and_higher+0x718>
f0117617:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011761a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117620:	83 f8 28             	cmp    $0x28,%eax
f0117623:	74 17                	je     f011763c <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f0117625:	83 ec 04             	sub    $0x4,%esp
f0117628:	68 d4 8b 13 f0       	push   $0xf0138bd4
f011762d:	68 95 00 00 00       	push   $0x95
f0117632:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117637:	e8 74 8b fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 30; i++)
f011763c:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0117643:	eb 1c                	jmp    f0117661 <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117645:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117648:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011764b:	89 d0                	mov    %edx,%eax
f011764d:	01 c0                	add    %eax,%eax
f011764f:	01 d0                	add    %edx,%eax
f0117651:	c1 e0 03             	shl    $0x3,%eax
f0117654:	01 c8                	add    %ecx,%eax
f0117656:	05 bc 00 00 00       	add    $0xbc,%eax
f011765b:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f011765e:	ff 45 cc             	incl   -0x34(%ebp)
f0117661:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0117665:	7e de                	jle    f0117645 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117667:	e8 14 53 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011766c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011766f:	e8 b2 cf fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117674:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117677:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011767a:	83 ec 08             	sub    $0x8,%esp
f011767d:	6a 05                	push   $0x5
f011767f:	50                   	push   %eax
f0117680:	e8 e2 37 ff ff       	call   f010ae67 <set_program_priority>
f0117685:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117688:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011768b:	83 ec 08             	sub    $0x8,%esp
f011768e:	6a 04                	push   $0x4
f0117690:	50                   	push   %eax
f0117691:	e8 d1 37 ff ff       	call   f010ae67 <set_program_priority>
f0117696:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117699:	e8 88 cf fe ff       	call   f0104626 <pf_calculate_free_frames>
f011769e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01176a1:	74 17                	je     f01176ba <test_priority_normal_and_higher+0x7ad>
f01176a3:	83 ec 04             	sub    $0x4,%esp
f01176a6:	68 a0 8a 13 f0       	push   $0xf0138aa0
f01176ab:	68 a0 00 00 00       	push   $0xa0
f01176b0:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01176b5:	e8 f6 8a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01176ba:	e8 c1 52 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01176bf:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01176c2:	74 17                	je     f01176db <test_priority_normal_and_higher+0x7ce>
f01176c4:	83 ec 04             	sub    $0x4,%esp
f01176c7:	68 a0 8a 13 f0       	push   $0xf0138aa0
f01176cc:	68 a1 00 00 00       	push   $0xa1
f01176d1:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01176d6:	e8 d5 8a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01176db:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01176de:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01176e4:	83 f8 14             	cmp    $0x14,%eax
f01176e7:	75 1c                	jne    f0117705 <test_priority_normal_and_higher+0x7f8>
f01176e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01176ec:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01176f2:	83 f8 3c             	cmp    $0x3c,%eax
f01176f5:	75 0e                	jne    f0117705 <test_priority_normal_and_higher+0x7f8>
f01176f7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01176fa:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117700:	83 f8 28             	cmp    $0x28,%eax
f0117703:	74 17                	je     f011771c <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f0117705:	83 ec 04             	sub    $0x4,%esp
f0117708:	68 d4 8b 13 f0       	push   $0xf0138bd4
f011770d:	68 a4 00 00 00       	push   $0xa4
f0117712:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117717:	e8 94 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 60; i++)
f011771c:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117723:	eb 1c                	jmp    f0117741 <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117725:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117728:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011772b:	89 d0                	mov    %edx,%eax
f011772d:	01 c0                	add    %eax,%eax
f011772f:	01 d0                	add    %edx,%eax
f0117731:	c1 e0 03             	shl    $0x3,%eax
f0117734:	01 c8                	add    %ecx,%eax
f0117736:	05 bc 00 00 00       	add    $0xbc,%eax
f011773b:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011773e:	ff 45 c8             	incl   -0x38(%ebp)
f0117741:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0117745:	7e de                	jle    f0117725 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117747:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f011774e:	eb 1c                	jmp    f011776c <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0117750:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117753:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117756:	89 d0                	mov    %edx,%eax
f0117758:	01 c0                	add    %eax,%eax
f011775a:	01 d0                	add    %edx,%eax
f011775c:	c1 e0 03             	shl    $0x3,%eax
f011775f:	01 c8                	add    %ecx,%eax
f0117761:	05 bc 00 00 00       	add    $0xbc,%eax
f0117766:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117769:	ff 45 c4             	incl   -0x3c(%ebp)
f011776c:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0117770:	7e de                	jle    f0117750 <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117772:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0117779:	eb 7d                	jmp    f01177f8 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011777b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011777e:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0117785:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117788:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011778b:	89 d0                	mov    %edx,%eax
f011778d:	01 c0                	add    %eax,%eax
f011778f:	01 d0                	add    %edx,%eax
f0117791:	c1 e0 03             	shl    $0x3,%eax
f0117794:	01 d8                	add    %ebx,%eax
f0117796:	05 b8 00 00 00       	add    $0xb8,%eax
f011779b:	8b 00                	mov    (%eax),%eax
f011779d:	39 c1                	cmp    %eax,%ecx
f011779f:	74 17                	je     f01177b8 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f01177a1:	83 ec 04             	sub    $0x4,%esp
f01177a4:	68 10 8c 13 f0       	push   $0xf0138c10
f01177a9:	68 b2 00 00 00       	push   $0xb2
f01177ae:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01177b3:	e8 f8 89 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01177b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01177bb:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01177c2:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f01177c5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01177c8:	89 d0                	mov    %edx,%eax
f01177ca:	01 c0                	add    %eax,%eax
f01177cc:	01 d0                	add    %edx,%eax
f01177ce:	c1 e0 03             	shl    $0x3,%eax
f01177d1:	01 d8                	add    %ebx,%eax
f01177d3:	05 c0 00 00 00       	add    $0xc0,%eax
f01177d8:	8b 00                	mov    (%eax),%eax
f01177da:	39 c1                	cmp    %eax,%ecx
f01177dc:	74 17                	je     f01177f5 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f01177de:	83 ec 04             	sub    $0x4,%esp
f01177e1:	68 10 8c 13 f0       	push   $0xf0138c10
f01177e6:	68 b5 00 00 00       	push   $0xb5
f01177eb:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01177f0:	e8 bb 89 fe ff       	call   f01001b0 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01177f5:	ff 45 c0             	incl   -0x40(%ebp)
f01177f8:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f01177fc:	0f 8e 79 ff ff ff    	jle    f011777b <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117802:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0117809:	eb 7d                	jmp    f0117888 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011780b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011780e:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0117815:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117818:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011781b:	89 d0                	mov    %edx,%eax
f011781d:	01 c0                	add    %eax,%eax
f011781f:	01 d0                	add    %edx,%eax
f0117821:	c1 e0 03             	shl    $0x3,%eax
f0117824:	01 d8                	add    %ebx,%eax
f0117826:	05 b8 00 00 00       	add    $0xb8,%eax
f011782b:	8b 00                	mov    (%eax),%eax
f011782d:	39 c1                	cmp    %eax,%ecx
f011782f:	74 17                	je     f0117848 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f0117831:	83 ec 04             	sub    $0x4,%esp
f0117834:	68 10 8c 13 f0       	push   $0xf0138c10
f0117839:	68 bb 00 00 00       	push   $0xbb
f011783e:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117843:	e8 68 89 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117848:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011784b:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0117852:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117855:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117858:	89 d0                	mov    %edx,%eax
f011785a:	01 c0                	add    %eax,%eax
f011785c:	01 d0                	add    %edx,%eax
f011785e:	c1 e0 03             	shl    $0x3,%eax
f0117861:	01 d8                	add    %ebx,%eax
f0117863:	05 c0 00 00 00       	add    $0xc0,%eax
f0117868:	8b 00                	mov    (%eax),%eax
f011786a:	39 c1                	cmp    %eax,%ecx
f011786c:	74 17                	je     f0117885 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f011786e:	83 ec 04             	sub    $0x4,%esp
f0117871:	68 10 8c 13 f0       	push   $0xf0138c10
f0117876:	68 be 00 00 00       	push   $0xbe
f011787b:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117880:	e8 2b 89 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117885:	ff 45 bc             	incl   -0x44(%ebp)
f0117888:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f011788c:	0f 8e 79 ff ff ff    	jle    f011780b <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117892:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0117899:	eb 7d                	jmp    f0117918 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011789b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011789e:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01178a5:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01178a8:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01178ab:	89 d0                	mov    %edx,%eax
f01178ad:	01 c0                	add    %eax,%eax
f01178af:	01 d0                	add    %edx,%eax
f01178b1:	c1 e0 03             	shl    $0x3,%eax
f01178b4:	01 d8                	add    %ebx,%eax
f01178b6:	05 b8 00 00 00       	add    $0xb8,%eax
f01178bb:	8b 00                	mov    (%eax),%eax
f01178bd:	39 c1                	cmp    %eax,%ecx
f01178bf:	74 17                	je     f01178d8 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f01178c1:	83 ec 04             	sub    $0x4,%esp
f01178c4:	68 10 8c 13 f0       	push   $0xf0138c10
f01178c9:	68 c4 00 00 00       	push   $0xc4
f01178ce:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01178d3:	e8 d8 88 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01178d8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178db:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01178e2:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01178e5:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01178e8:	89 d0                	mov    %edx,%eax
f01178ea:	01 c0                	add    %eax,%eax
f01178ec:	01 d0                	add    %edx,%eax
f01178ee:	c1 e0 03             	shl    $0x3,%eax
f01178f1:	01 d8                	add    %ebx,%eax
f01178f3:	05 c0 00 00 00       	add    $0xc0,%eax
f01178f8:	8b 00                	mov    (%eax),%eax
f01178fa:	39 c1                	cmp    %eax,%ecx
f01178fc:	74 17                	je     f0117915 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f01178fe:	83 ec 04             	sub    $0x4,%esp
f0117901:	68 10 8c 13 f0       	push   $0xf0138c10
f0117906:	68 c7 00 00 00       	push   $0xc7
f011790b:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117910:	e8 9b 88 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117915:	ff 45 b8             	incl   -0x48(%ebp)
f0117918:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f011791c:	0f 8e 79 ff ff ff    	jle    f011789b <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117922:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117929:	75 6e 61 
f011792c:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117933:	6c 00 00 
f0117936:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011793c:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117941:	b8 00 00 00 00       	mov    $0x0,%eax
f0117946:	89 d7                	mov    %edx,%edi
f0117948:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011794a:	83 ec 0c             	sub    $0xc,%esp
f011794d:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0117953:	50                   	push   %eax
f0117954:	e8 6a a2 fe ff       	call   f0101bc3 <execute_command>
f0117959:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f011795c:	eb 10                	jmp    f011796e <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011795e:	83 ec 0c             	sub    $0xc,%esp
f0117961:	68 44 8c 13 f0       	push   $0xf0138c44
f0117966:	e8 c6 94 fe ff       	call   f0100e31 <cprintf>
f011796b:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f011796e:	90                   	nop
f011796f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117972:	5b                   	pop    %ebx
f0117973:	5e                   	pop    %esi
f0117974:	5f                   	pop    %edi
f0117975:	5d                   	pop    %ebp
f0117976:	c3                   	ret    

f0117977 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117977:	55                   	push   %ebp
f0117978:	89 e5                	mov    %esp,%ebp
f011797a:	57                   	push   %edi
f011797b:	56                   	push   %esi
f011797c:	53                   	push   %ebx
f011797d:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0117983:	a0 1c cb 18 f0       	mov    0xf018cb1c,%al
f0117988:	84 c0                	test   %al,%al
f011798a:	0f 84 1b 0a 00 00    	je     f01183ab <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0117990:	c6 05 1c cb 18 f0 00 	movb   $0x0,0xf018cb1c
		char command[100] = "load fos_add 20";
f0117997:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011799d:	bb 80 8c 13 f0       	mov    $0xf0138c80,%ebx
f01179a2:	ba 04 00 00 00       	mov    $0x4,%edx
f01179a7:	89 c7                	mov    %eax,%edi
f01179a9:	89 de                	mov    %ebx,%esi
f01179ab:	89 d1                	mov    %edx,%ecx
f01179ad:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01179af:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01179b5:	b9 15 00 00 00       	mov    $0x15,%ecx
f01179ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01179bf:	89 d7                	mov    %edx,%edi
f01179c1:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01179c3:	83 ec 0c             	sub    $0xc,%esp
f01179c6:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01179cc:	50                   	push   %eax
f01179cd:	e8 f1 a1 fe ff       	call   f0101bc3 <execute_command>
f01179d2:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01179d5:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01179db:	bb 88 8f 13 f0       	mov    $0xf0138f88,%ebx
f01179e0:	ba 0d 00 00 00       	mov    $0xd,%edx
f01179e5:	89 c7                	mov    %eax,%edi
f01179e7:	89 de                	mov    %ebx,%esi
f01179e9:	89 d1                	mov    %edx,%ecx
f01179eb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01179ed:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01179f3:	b9 57 00 00 00       	mov    $0x57,%ecx
f01179f8:	b0 00                	mov    $0x0,%al
f01179fa:	89 d7                	mov    %edx,%edi
f01179fc:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01179fe:	83 ec 0c             	sub    $0xc,%esp
f0117a01:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117a07:	50                   	push   %eax
f0117a08:	e8 b6 a1 fe ff       	call   f0101bc3 <execute_command>
f0117a0d:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117a10:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117a16:	bb ec 8f 13 f0       	mov    $0xf0138fec,%ebx
f0117a1b:	ba 17 00 00 00       	mov    $0x17,%edx
f0117a20:	89 c7                	mov    %eax,%edi
f0117a22:	89 de                	mov    %ebx,%esi
f0117a24:	89 d1                	mov    %edx,%ecx
f0117a26:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117a28:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117a2e:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117a33:	b0 00                	mov    $0x0,%al
f0117a35:	89 d7                	mov    %edx,%edi
f0117a37:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117a39:	83 ec 0c             	sub    $0xc,%esp
f0117a3c:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117a42:	50                   	push   %eax
f0117a43:	e8 7b a1 fe ff       	call   f0101bc3 <execute_command>
f0117a48:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117a4b:	83 ec 04             	sub    $0x4,%esp
f0117a4e:	6a 00                	push   $0x0
f0117a50:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117a53:	50                   	push   %eax
f0117a54:	68 00 10 00 00       	push   $0x1000
f0117a59:	e8 12 1f ff ff       	call   f0109970 <envid2env>
f0117a5e:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117a61:	83 ec 04             	sub    $0x4,%esp
f0117a64:	6a 00                	push   $0x0
f0117a66:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117a69:	50                   	push   %eax
f0117a6a:	68 01 10 00 00       	push   $0x1001
f0117a6f:	e8 fc 1e ff ff       	call   f0109970 <envid2env>
f0117a74:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117a77:	83 ec 04             	sub    $0x4,%esp
f0117a7a:	6a 00                	push   $0x0
f0117a7c:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117a7f:	50                   	push   %eax
f0117a80:	68 02 10 00 00       	push   $0x1002
f0117a85:	e8 e6 1e ff ff       	call   f0109970 <envid2env>
f0117a8a:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117a8d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a90:	85 c0                	test   %eax,%eax
f0117a92:	74 0e                	je     f0117aa2 <test_priority_normal_and_lower+0x12b>
f0117a94:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a97:	85 c0                	test   %eax,%eax
f0117a99:	74 07                	je     f0117aa2 <test_priority_normal_and_lower+0x12b>
f0117a9b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117a9e:	85 c0                	test   %eax,%eax
f0117aa0:	75 17                	jne    f0117ab9 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117aa2:	83 ec 04             	sub    $0x4,%esp
f0117aa5:	68 04 8a 13 f0       	push   $0xf0138a04
f0117aaa:	68 f2 00 00 00       	push   $0xf2
f0117aaf:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117ab4:	e8 f7 86 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117ab9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117abc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ac2:	83 f8 14             	cmp    $0x14,%eax
f0117ac5:	75 1c                	jne    f0117ae3 <test_priority_normal_and_lower+0x16c>
f0117ac7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117aca:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ad0:	83 f8 1e             	cmp    $0x1e,%eax
f0117ad3:	75 0e                	jne    f0117ae3 <test_priority_normal_and_lower+0x16c>
f0117ad5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ad8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ade:	83 f8 28             	cmp    $0x28,%eax
f0117ae1:	74 17                	je     f0117afa <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f0117ae3:	83 ec 04             	sub    $0x4,%esp
f0117ae6:	68 ac 8d 13 f0       	push   $0xf0138dac
f0117aeb:	68 f5 00 00 00       	push   $0xf5
f0117af0:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117af5:	e8 b6 86 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f0117afa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117b01:	eb 47                	jmp    f0117b4a <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117b03:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117b06:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117b09:	89 d0                	mov    %edx,%eax
f0117b0b:	01 c0                	add    %eax,%eax
f0117b0d:	01 d0                	add    %edx,%eax
f0117b0f:	c1 e0 03             	shl    $0x3,%eax
f0117b12:	01 c8                	add    %ecx,%eax
f0117b14:	05 b8 00 00 00       	add    $0xb8,%eax
f0117b19:	8b 10                	mov    (%eax),%edx
f0117b1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117b1e:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117b25:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117b28:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117b2b:	89 d0                	mov    %edx,%eax
f0117b2d:	01 c0                	add    %eax,%eax
f0117b2f:	01 d0                	add    %edx,%eax
f0117b31:	c1 e0 03             	shl    $0x3,%eax
f0117b34:	01 c8                	add    %ecx,%eax
f0117b36:	05 c0 00 00 00       	add    $0xc0,%eax
f0117b3b:	8b 10                	mov    (%eax),%edx
f0117b3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117b40:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117b47:	ff 45 e4             	incl   -0x1c(%ebp)
f0117b4a:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117b4e:	7e b3                	jle    f0117b03 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117b50:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117b57:	eb 47                	jmp    f0117ba0 <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117b59:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117b5c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117b5f:	89 d0                	mov    %edx,%eax
f0117b61:	01 c0                	add    %eax,%eax
f0117b63:	01 d0                	add    %edx,%eax
f0117b65:	c1 e0 03             	shl    $0x3,%eax
f0117b68:	01 c8                	add    %ecx,%eax
f0117b6a:	05 b8 00 00 00       	add    $0xb8,%eax
f0117b6f:	8b 10                	mov    (%eax),%edx
f0117b71:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117b74:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117b7b:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117b7e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117b81:	89 d0                	mov    %edx,%eax
f0117b83:	01 c0                	add    %eax,%eax
f0117b85:	01 d0                	add    %edx,%eax
f0117b87:	c1 e0 03             	shl    $0x3,%eax
f0117b8a:	01 c8                	add    %ecx,%eax
f0117b8c:	05 c0 00 00 00       	add    $0xc0,%eax
f0117b91:	8b 10                	mov    (%eax),%edx
f0117b93:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117b96:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117b9d:	ff 45 e0             	incl   -0x20(%ebp)
f0117ba0:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117ba4:	7e b3                	jle    f0117b59 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117ba6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117bad:	eb 47                	jmp    f0117bf6 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117baf:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117bb2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117bb5:	89 d0                	mov    %edx,%eax
f0117bb7:	01 c0                	add    %eax,%eax
f0117bb9:	01 d0                	add    %edx,%eax
f0117bbb:	c1 e0 03             	shl    $0x3,%eax
f0117bbe:	01 c8                	add    %ecx,%eax
f0117bc0:	05 b8 00 00 00       	add    $0xb8,%eax
f0117bc5:	8b 10                	mov    (%eax),%edx
f0117bc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117bca:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117bd1:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117bd4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117bd7:	89 d0                	mov    %edx,%eax
f0117bd9:	01 c0                	add    %eax,%eax
f0117bdb:	01 d0                	add    %edx,%eax
f0117bdd:	c1 e0 03             	shl    $0x3,%eax
f0117be0:	01 c8                	add    %ecx,%eax
f0117be2:	05 c0 00 00 00       	add    $0xc0,%eax
f0117be7:	8b 10                	mov    (%eax),%edx
f0117be9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117bec:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117bf3:	ff 45 dc             	incl   -0x24(%ebp)
f0117bf6:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117bfa:	7e b3                	jle    f0117baf <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117bfc:	e8 7f 4d ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117c01:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117c04:	e8 1d ca fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117c09:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117c0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c0f:	83 ec 08             	sub    $0x8,%esp
f0117c12:	6a 03                	push   $0x3
f0117c14:	50                   	push   %eax
f0117c15:	e8 4d 32 ff ff       	call   f010ae67 <set_program_priority>
f0117c1a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117c1d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c20:	83 ec 08             	sub    $0x8,%esp
f0117c23:	6a 03                	push   $0x3
f0117c25:	50                   	push   %eax
f0117c26:	e8 3c 32 ff ff       	call   f010ae67 <set_program_priority>
f0117c2b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117c2e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c31:	83 ec 08             	sub    $0x8,%esp
f0117c34:	6a 03                	push   $0x3
f0117c36:	50                   	push   %eax
f0117c37:	e8 2b 32 ff ff       	call   f010ae67 <set_program_priority>
f0117c3c:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117c3f:	e8 e2 c9 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117c44:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117c47:	74 17                	je     f0117c60 <test_priority_normal_and_lower+0x2e9>
f0117c49:	83 ec 04             	sub    $0x4,%esp
f0117c4c:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0117c51:	68 11 01 00 00       	push   $0x111
f0117c56:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117c5b:	e8 50 85 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117c60:	e8 1b 4d ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117c65:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117c68:	74 17                	je     f0117c81 <test_priority_normal_and_lower+0x30a>
f0117c6a:	83 ec 04             	sub    $0x4,%esp
f0117c6d:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0117c72:	68 12 01 00 00       	push   $0x112
f0117c77:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117c7c:	e8 2f 85 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117c81:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c84:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117c8a:	83 f8 14             	cmp    $0x14,%eax
f0117c8d:	75 1c                	jne    f0117cab <test_priority_normal_and_lower+0x334>
f0117c8f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c92:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117c98:	83 f8 1e             	cmp    $0x1e,%eax
f0117c9b:	75 0e                	jne    f0117cab <test_priority_normal_and_lower+0x334>
f0117c9d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ca0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ca6:	83 f8 28             	cmp    $0x28,%eax
f0117ca9:	74 17                	je     f0117cc2 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117cab:	83 ec 04             	sub    $0x4,%esp
f0117cae:	68 cc 8a 13 f0       	push   $0xf0138acc
f0117cb3:	68 15 01 00 00       	push   $0x115
f0117cb8:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117cbd:	e8 ee 84 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117cc2:	e8 b9 4c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117cc7:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117cca:	e8 57 c9 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117ccf:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117cd2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cd5:	83 ec 08             	sub    $0x8,%esp
f0117cd8:	6a 02                	push   $0x2
f0117cda:	50                   	push   %eax
f0117cdb:	e8 87 31 ff ff       	call   f010ae67 <set_program_priority>
f0117ce0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117ce3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117ce6:	83 ec 08             	sub    $0x8,%esp
f0117ce9:	6a 02                	push   $0x2
f0117ceb:	50                   	push   %eax
f0117cec:	e8 76 31 ff ff       	call   f010ae67 <set_program_priority>
f0117cf1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117cf4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117cf7:	83 ec 08             	sub    $0x8,%esp
f0117cfa:	6a 02                	push   $0x2
f0117cfc:	50                   	push   %eax
f0117cfd:	e8 65 31 ff ff       	call   f010ae67 <set_program_priority>
f0117d02:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117d05:	e8 1c c9 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117d0a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117d0d:	74 17                	je     f0117d26 <test_priority_normal_and_lower+0x3af>
f0117d0f:	83 ec 04             	sub    $0x4,%esp
f0117d12:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0117d17:	68 1f 01 00 00       	push   $0x11f
f0117d1c:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117d21:	e8 8a 84 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117d26:	e8 55 4c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117d2b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117d2e:	74 21                	je     f0117d51 <test_priority_normal_and_lower+0x3da>
f0117d30:	e8 4b 4c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117d35:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117d38:	29 c2                	sub    %eax,%edx
f0117d3a:	89 d0                	mov    %edx,%eax
f0117d3c:	50                   	push   %eax
f0117d3d:	68 20 8b 13 f0       	push   $0xf0138b20
f0117d42:	68 20 01 00 00       	push   $0x120
f0117d47:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117d4c:	e8 5f 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117d51:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d54:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d5a:	83 f8 0a             	cmp    $0xa,%eax
f0117d5d:	75 1c                	jne    f0117d7b <test_priority_normal_and_lower+0x404>
f0117d5f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d62:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d68:	83 f8 0f             	cmp    $0xf,%eax
f0117d6b:	75 0e                	jne    f0117d7b <test_priority_normal_and_lower+0x404>
f0117d6d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d70:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d76:	83 f8 14             	cmp    $0x14,%eax
f0117d79:	74 17                	je     f0117d92 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117d7b:	83 ec 04             	sub    $0x4,%esp
f0117d7e:	68 50 8b 13 f0       	push   $0xf0138b50
f0117d83:	68 23 01 00 00       	push   $0x123
f0117d88:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117d8d:	e8 1e 84 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117d92:	e8 e9 4b ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117d97:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d9a:	e8 87 c8 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117d9f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117da2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117da5:	83 ec 08             	sub    $0x8,%esp
f0117da8:	6a 02                	push   $0x2
f0117daa:	50                   	push   %eax
f0117dab:	e8 b7 30 ff ff       	call   f010ae67 <set_program_priority>
f0117db0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117db3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117db6:	83 ec 08             	sub    $0x8,%esp
f0117db9:	6a 02                	push   $0x2
f0117dbb:	50                   	push   %eax
f0117dbc:	e8 a6 30 ff ff       	call   f010ae67 <set_program_priority>
f0117dc1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117dc4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117dc7:	83 ec 08             	sub    $0x8,%esp
f0117dca:	6a 02                	push   $0x2
f0117dcc:	50                   	push   %eax
f0117dcd:	e8 95 30 ff ff       	call   f010ae67 <set_program_priority>
f0117dd2:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117dd5:	e8 4c c8 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0117dda:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117ddd:	74 17                	je     f0117df6 <test_priority_normal_and_lower+0x47f>
f0117ddf:	83 ec 04             	sub    $0x4,%esp
f0117de2:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0117de7:	68 2d 01 00 00       	push   $0x12d
f0117dec:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117df1:	e8 ba 83 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117df6:	e8 85 4b ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117dfb:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117dfe:	74 21                	je     f0117e21 <test_priority_normal_and_lower+0x4aa>
f0117e00:	e8 7b 4b ff ff       	call   f010c980 <sys_calculate_free_frames>
f0117e05:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117e08:	29 c2                	sub    %eax,%edx
f0117e0a:	89 d0                	mov    %edx,%eax
f0117e0c:	50                   	push   %eax
f0117e0d:	68 20 8b 13 f0       	push   $0xf0138b20
f0117e12:	68 2e 01 00 00       	push   $0x12e
f0117e17:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117e1c:	e8 8f 83 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117e21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e24:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e2a:	83 f8 0a             	cmp    $0xa,%eax
f0117e2d:	75 1c                	jne    f0117e4b <test_priority_normal_and_lower+0x4d4>
f0117e2f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117e32:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e38:	83 f8 0f             	cmp    $0xf,%eax
f0117e3b:	75 0e                	jne    f0117e4b <test_priority_normal_and_lower+0x4d4>
f0117e3d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e40:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e46:	83 f8 0a             	cmp    $0xa,%eax
f0117e49:	74 17                	je     f0117e62 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117e4b:	83 ec 04             	sub    $0x4,%esp
f0117e4e:	68 50 8b 13 f0       	push   $0xf0138b50
f0117e53:	68 31 01 00 00       	push   $0x131
f0117e58:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117e5d:	e8 4e 83 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 10; i++)
f0117e62:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117e69:	eb 7d                	jmp    f0117ee8 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117e6b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117e6e:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117e75:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117e78:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117e7b:	89 d0                	mov    %edx,%eax
f0117e7d:	01 c0                	add    %eax,%eax
f0117e7f:	01 d0                	add    %edx,%eax
f0117e81:	c1 e0 03             	shl    $0x3,%eax
f0117e84:	01 d8                	add    %ebx,%eax
f0117e86:	05 b8 00 00 00       	add    $0xb8,%eax
f0117e8b:	8b 00                	mov    (%eax),%eax
f0117e8d:	39 c1                	cmp    %eax,%ecx
f0117e8f:	74 17                	je     f0117ea8 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0117e91:	83 ec 04             	sub    $0x4,%esp
f0117e94:	68 10 8c 13 f0       	push   $0xf0138c10
f0117e99:	68 36 01 00 00       	push   $0x136
f0117e9e:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117ea3:	e8 08 83 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117ea8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117eab:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117eb2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117eb5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117eb8:	89 d0                	mov    %edx,%eax
f0117eba:	01 c0                	add    %eax,%eax
f0117ebc:	01 d0                	add    %edx,%eax
f0117ebe:	c1 e0 03             	shl    $0x3,%eax
f0117ec1:	01 d8                	add    %ebx,%eax
f0117ec3:	05 c0 00 00 00       	add    $0xc0,%eax
f0117ec8:	8b 00                	mov    (%eax),%eax
f0117eca:	39 c1                	cmp    %eax,%ecx
f0117ecc:	74 17                	je     f0117ee5 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0117ece:	83 ec 04             	sub    $0x4,%esp
f0117ed1:	68 10 8c 13 f0       	push   $0xf0138c10
f0117ed6:	68 39 01 00 00       	push   $0x139
f0117edb:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117ee0:	e8 cb 82 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117ee5:	ff 45 d8             	incl   -0x28(%ebp)
f0117ee8:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117eec:	0f 8e 79 ff ff ff    	jle    f0117e6b <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117ef2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117ef9:	eb 7d                	jmp    f0117f78 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117efb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117efe:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117f05:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117f08:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117f0b:	89 d0                	mov    %edx,%eax
f0117f0d:	01 c0                	add    %eax,%eax
f0117f0f:	01 d0                	add    %edx,%eax
f0117f11:	c1 e0 03             	shl    $0x3,%eax
f0117f14:	01 d8                	add    %ebx,%eax
f0117f16:	05 b8 00 00 00       	add    $0xb8,%eax
f0117f1b:	8b 00                	mov    (%eax),%eax
f0117f1d:	39 c1                	cmp    %eax,%ecx
f0117f1f:	74 17                	je     f0117f38 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0117f21:	83 ec 04             	sub    $0x4,%esp
f0117f24:	68 10 8c 13 f0       	push   $0xf0138c10
f0117f29:	68 3f 01 00 00       	push   $0x13f
f0117f2e:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117f33:	e8 78 82 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117f38:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117f3b:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117f42:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117f45:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117f48:	89 d0                	mov    %edx,%eax
f0117f4a:	01 c0                	add    %eax,%eax
f0117f4c:	01 d0                	add    %edx,%eax
f0117f4e:	c1 e0 03             	shl    $0x3,%eax
f0117f51:	01 d8                	add    %ebx,%eax
f0117f53:	05 c0 00 00 00       	add    $0xc0,%eax
f0117f58:	8b 00                	mov    (%eax),%eax
f0117f5a:	39 c1                	cmp    %eax,%ecx
f0117f5c:	74 17                	je     f0117f75 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0117f5e:	83 ec 04             	sub    $0x4,%esp
f0117f61:	68 10 8c 13 f0       	push   $0xf0138c10
f0117f66:	68 42 01 00 00       	push   $0x142
f0117f6b:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117f70:	e8 3b 82 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117f75:	ff 45 d4             	incl   -0x2c(%ebp)
f0117f78:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117f7c:	0f 8e 79 ff ff ff    	jle    f0117efb <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117f82:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117f89:	eb 7d                	jmp    f0118008 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117f8b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117f8e:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117f95:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117f98:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117f9b:	89 d0                	mov    %edx,%eax
f0117f9d:	01 c0                	add    %eax,%eax
f0117f9f:	01 d0                	add    %edx,%eax
f0117fa1:	c1 e0 03             	shl    $0x3,%eax
f0117fa4:	01 d8                	add    %ebx,%eax
f0117fa6:	05 b8 00 00 00       	add    $0xb8,%eax
f0117fab:	8b 00                	mov    (%eax),%eax
f0117fad:	39 c1                	cmp    %eax,%ecx
f0117faf:	74 17                	je     f0117fc8 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0117fb1:	83 ec 04             	sub    $0x4,%esp
f0117fb4:	68 10 8c 13 f0       	push   $0xf0138c10
f0117fb9:	68 48 01 00 00       	push   $0x148
f0117fbe:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0117fc3:	e8 e8 81 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117fc8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117fcb:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117fd2:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117fd5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117fd8:	89 d0                	mov    %edx,%eax
f0117fda:	01 c0                	add    %eax,%eax
f0117fdc:	01 d0                	add    %edx,%eax
f0117fde:	c1 e0 03             	shl    $0x3,%eax
f0117fe1:	01 d8                	add    %ebx,%eax
f0117fe3:	05 c0 00 00 00       	add    $0xc0,%eax
f0117fe8:	8b 00                	mov    (%eax),%eax
f0117fea:	39 c1                	cmp    %eax,%ecx
f0117fec:	74 17                	je     f0118005 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f0117fee:	83 ec 04             	sub    $0x4,%esp
f0117ff1:	68 10 8c 13 f0       	push   $0xf0138c10
f0117ff6:	68 4b 01 00 00       	push   $0x14b
f0117ffb:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0118000:	e8 ab 81 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0118005:	ff 45 d0             	incl   -0x30(%ebp)
f0118008:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f011800c:	0f 8e 79 ff ff ff    	jle    f0117f8b <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0118012:	e8 69 49 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118017:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011801a:	e8 07 c6 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011801f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0118022:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118025:	83 ec 08             	sub    $0x8,%esp
f0118028:	6a 01                	push   $0x1
f011802a:	50                   	push   %eax
f011802b:	e8 37 2e ff ff       	call   f010ae67 <set_program_priority>
f0118030:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0118033:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118036:	83 ec 08             	sub    $0x8,%esp
f0118039:	6a 01                	push   $0x1
f011803b:	50                   	push   %eax
f011803c:	e8 26 2e ff ff       	call   f010ae67 <set_program_priority>
f0118041:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0118044:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118047:	83 ec 08             	sub    $0x8,%esp
f011804a:	6a 01                	push   $0x1
f011804c:	50                   	push   %eax
f011804d:	e8 15 2e ff ff       	call   f010ae67 <set_program_priority>
f0118052:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118055:	e8 cc c5 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011805a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011805d:	74 17                	je     f0118076 <test_priority_normal_and_lower+0x6ff>
f011805f:	83 ec 04             	sub    $0x4,%esp
f0118062:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0118067:	68 54 01 00 00       	push   $0x154
f011806c:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0118071:	e8 3a 81 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0118076:	e8 05 49 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011807b:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011807e:	83 f8 0d             	cmp    $0xd,%eax
f0118081:	74 17                	je     f011809a <test_priority_normal_and_lower+0x723>
f0118083:	83 ec 04             	sub    $0x4,%esp
f0118086:	68 f8 8d 13 f0       	push   $0xf0138df8
f011808b:	68 55 01 00 00       	push   $0x155
f0118090:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0118095:	e8 16 81 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011809a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011809d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01180a3:	83 f8 05             	cmp    $0x5,%eax
f01180a6:	75 1c                	jne    f01180c4 <test_priority_normal_and_lower+0x74d>
f01180a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180ab:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01180b1:	83 f8 07             	cmp    $0x7,%eax
f01180b4:	75 0e                	jne    f01180c4 <test_priority_normal_and_lower+0x74d>
f01180b6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180b9:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01180bf:	83 f8 05             	cmp    $0x5,%eax
f01180c2:	74 17                	je     f01180db <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f01180c4:	83 ec 04             	sub    $0x4,%esp
f01180c7:	68 40 8e 13 f0       	push   $0xf0138e40
f01180cc:	68 58 01 00 00       	push   $0x158
f01180d1:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01180d6:	e8 d5 80 fe ff       	call   f01001b0 <_panic>


		freeFrames = sys_calculate_free_frames();
f01180db:	e8 a0 48 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01180e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01180e3:	e8 3e c5 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01180e8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01180eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01180ee:	83 ec 08             	sub    $0x8,%esp
f01180f1:	6a 01                	push   $0x1
f01180f3:	50                   	push   %eax
f01180f4:	e8 6e 2d ff ff       	call   f010ae67 <set_program_priority>
f01180f9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01180fc:	e8 25 c5 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0118101:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0118104:	74 17                	je     f011811d <test_priority_normal_and_lower+0x7a6>
f0118106:	83 ec 04             	sub    $0x4,%esp
f0118109:	68 a0 8a 13 f0       	push   $0xf0138aa0
f011810e:	68 5e 01 00 00       	push   $0x15e
f0118113:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0118118:	e8 93 80 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f011811d:	e8 5e 48 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118122:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0118125:	83 f8 03             	cmp    $0x3,%eax
f0118128:	74 17                	je     f0118141 <test_priority_normal_and_lower+0x7ca>
f011812a:	83 ec 04             	sub    $0x4,%esp
f011812d:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0118132:	68 5f 01 00 00       	push   $0x15f
f0118137:	68 1d 8a 13 f0       	push   $0xf0138a1d
f011813c:	e8 6f 80 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0118141:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118144:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011814a:	83 f8 02             	cmp    $0x2,%eax
f011814d:	75 1c                	jne    f011816b <test_priority_normal_and_lower+0x7f4>
f011814f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118152:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118158:	83 f8 07             	cmp    $0x7,%eax
f011815b:	75 0e                	jne    f011816b <test_priority_normal_and_lower+0x7f4>
f011815d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118160:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118166:	83 f8 05             	cmp    $0x5,%eax
f0118169:	74 17                	je     f0118182 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f011816b:	83 ec 04             	sub    $0x4,%esp
f011816e:	68 d4 8b 13 f0       	push   $0xf0138bd4
f0118173:	68 62 01 00 00       	push   $0x162
f0118178:	68 1d 8a 13 f0       	push   $0xf0138a1d
f011817d:	e8 2e 80 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 2; i++)
f0118182:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0118189:	e9 83 00 00 00       	jmp    f0118211 <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011818e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118191:	83 c0 08             	add    $0x8,%eax
f0118194:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011819b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011819e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01181a1:	89 d0                	mov    %edx,%eax
f01181a3:	01 c0                	add    %eax,%eax
f01181a5:	01 d0                	add    %edx,%eax
f01181a7:	c1 e0 03             	shl    $0x3,%eax
f01181aa:	01 d8                	add    %ebx,%eax
f01181ac:	05 b8 00 00 00       	add    $0xb8,%eax
f01181b1:	8b 00                	mov    (%eax),%eax
f01181b3:	39 c1                	cmp    %eax,%ecx
f01181b5:	74 17                	je     f01181ce <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01181b7:	83 ec 04             	sub    $0x4,%esp
f01181ba:	68 70 8e 13 f0       	push   $0xf0138e70
f01181bf:	68 67 01 00 00       	push   $0x167
f01181c4:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01181c9:	e8 e2 7f fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01181ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01181d1:	83 c0 08             	add    $0x8,%eax
f01181d4:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01181db:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01181de:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01181e1:	89 d0                	mov    %edx,%eax
f01181e3:	01 c0                	add    %eax,%eax
f01181e5:	01 d0                	add    %edx,%eax
f01181e7:	c1 e0 03             	shl    $0x3,%eax
f01181ea:	01 d8                	add    %ebx,%eax
f01181ec:	05 c0 00 00 00       	add    $0xc0,%eax
f01181f1:	8b 00                	mov    (%eax),%eax
f01181f3:	39 c1                	cmp    %eax,%ecx
f01181f5:	74 17                	je     f011820e <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01181f7:	83 ec 04             	sub    $0x4,%esp
f01181fa:	68 70 8e 13 f0       	push   $0xf0138e70
f01181ff:	68 6a 01 00 00       	push   $0x16a
f0118204:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0118209:	e8 a2 7f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f011820e:	ff 45 cc             	incl   -0x34(%ebp)
f0118211:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0118215:	0f 8e 73 ff ff ff    	jle    f011818e <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011821b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0118222:	e9 83 00 00 00       	jmp    f01182aa <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0118227:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011822a:	83 c0 03             	add    $0x3,%eax
f011822d:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0118234:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118237:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011823a:	89 d0                	mov    %edx,%eax
f011823c:	01 c0                	add    %eax,%eax
f011823e:	01 d0                	add    %edx,%eax
f0118240:	c1 e0 03             	shl    $0x3,%eax
f0118243:	01 d8                	add    %ebx,%eax
f0118245:	05 b8 00 00 00       	add    $0xb8,%eax
f011824a:	8b 00                	mov    (%eax),%eax
f011824c:	39 c1                	cmp    %eax,%ecx
f011824e:	74 17                	je     f0118267 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0118250:	ff 75 c8             	pushl  -0x38(%ebp)
f0118253:	68 dc 8e 13 f0       	push   $0xf0138edc
f0118258:	68 70 01 00 00       	push   $0x170
f011825d:	68 1d 8a 13 f0       	push   $0xf0138a1d
f0118262:	e8 49 7f fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0118267:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011826a:	83 c0 03             	add    $0x3,%eax
f011826d:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0118274:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118277:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011827a:	89 d0                	mov    %edx,%eax
f011827c:	01 c0                	add    %eax,%eax
f011827e:	01 d0                	add    %edx,%eax
f0118280:	c1 e0 03             	shl    $0x3,%eax
f0118283:	01 d8                	add    %ebx,%eax
f0118285:	05 c0 00 00 00       	add    $0xc0,%eax
f011828a:	8b 00                	mov    (%eax),%eax
f011828c:	39 c1                	cmp    %eax,%ecx
f011828e:	74 17                	je     f01182a7 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118290:	83 ec 04             	sub    $0x4,%esp
f0118293:	68 70 8e 13 f0       	push   $0xf0138e70
f0118298:	68 73 01 00 00       	push   $0x173
f011829d:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01182a2:	e8 09 7f fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01182a7:	ff 45 c8             	incl   -0x38(%ebp)
f01182aa:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f01182ae:	0f 8e 73 ff ff ff    	jle    f0118227 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01182b4:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01182bb:	e9 83 00 00 00       	jmp    f0118343 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01182c0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01182c3:	83 c0 05             	add    $0x5,%eax
f01182c6:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01182cd:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01182d0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01182d3:	89 d0                	mov    %edx,%eax
f01182d5:	01 c0                	add    %eax,%eax
f01182d7:	01 d0                	add    %edx,%eax
f01182d9:	c1 e0 03             	shl    $0x3,%eax
f01182dc:	01 d8                	add    %ebx,%eax
f01182de:	05 b8 00 00 00       	add    $0xb8,%eax
f01182e3:	8b 00                	mov    (%eax),%eax
f01182e5:	39 c1                	cmp    %eax,%ecx
f01182e7:	74 17                	je     f0118300 <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01182e9:	83 ec 04             	sub    $0x4,%esp
f01182ec:	68 70 8e 13 f0       	push   $0xf0138e70
f01182f1:	68 79 01 00 00       	push   $0x179
f01182f6:	68 1d 8a 13 f0       	push   $0xf0138a1d
f01182fb:	e8 b0 7e fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0118300:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118303:	83 c0 05             	add    $0x5,%eax
f0118306:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011830d:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118310:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0118313:	89 d0                	mov    %edx,%eax
f0118315:	01 c0                	add    %eax,%eax
f0118317:	01 d0                	add    %edx,%eax
f0118319:	c1 e0 03             	shl    $0x3,%eax
f011831c:	01 d8                	add    %ebx,%eax
f011831e:	05 c0 00 00 00       	add    $0xc0,%eax
f0118323:	8b 00                	mov    (%eax),%eax
f0118325:	39 c1                	cmp    %eax,%ecx
f0118327:	74 17                	je     f0118340 <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118329:	83 ec 04             	sub    $0x4,%esp
f011832c:	68 70 8e 13 f0       	push   $0xf0138e70
f0118331:	68 7c 01 00 00       	push   $0x17c
f0118336:	68 1d 8a 13 f0       	push   $0xf0138a1d
f011833b:	e8 70 7e fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0118340:	ff 45 c4             	incl   -0x3c(%ebp)
f0118343:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0118347:	0f 8e 73 ff ff ff    	jle    f01182c0 <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f011834d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118350:	83 ec 08             	sub    $0x8,%esp
f0118353:	6a 05                	push   $0x5
f0118355:	50                   	push   %eax
f0118356:	e8 0c 2b ff ff       	call   f010ae67 <set_program_priority>
f011835b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f011835e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118361:	83 ec 08             	sub    $0x8,%esp
f0118364:	6a 05                	push   $0x5
f0118366:	50                   	push   %eax
f0118367:	e8 fb 2a ff ff       	call   f010ae67 <set_program_priority>
f011836c:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011836f:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0118376:	75 6e 61 
f0118379:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0118380:	6c 00 00 
f0118383:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0118389:	b9 17 00 00 00       	mov    $0x17,%ecx
f011838e:	b8 00 00 00 00       	mov    $0x0,%eax
f0118393:	89 d7                	mov    %edx,%edi
f0118395:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0118397:	83 ec 0c             	sub    $0xc,%esp
f011839a:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f01183a0:	50                   	push   %eax
f01183a1:	e8 1d 98 fe ff       	call   f0101bc3 <execute_command>
f01183a6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f01183a9:	eb 10                	jmp    f01183bb <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f01183ab:	83 ec 0c             	sub    $0xc,%esp
f01183ae:	68 4c 8f 13 f0       	push   $0xf0138f4c
f01183b3:	e8 79 8a fe ff       	call   f0100e31 <cprintf>
f01183b8:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f01183bb:	90                   	nop
f01183bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01183bf:	5b                   	pop    %ebx
f01183c0:	5e                   	pop    %esi
f01183c1:	5f                   	pop    %edi
f01183c2:	5d                   	pop    %ebp
f01183c3:	c3                   	ret    

f01183c4 <isKHeapPlacementStrategyNEXTFIT>:
f01183c4:	55                   	push   %ebp
f01183c5:	89 e5                	mov    %esp,%ebp
f01183c7:	a1 d8 ae 2b f0       	mov    0xf02baed8,%eax
f01183cc:	83 f8 03             	cmp    $0x3,%eax
f01183cf:	75 04                	jne    f01183d5 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01183d1:	b0 01                	mov    $0x1,%al
f01183d3:	eb 02                	jmp    f01183d7 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01183d5:	b0 00                	mov    $0x0,%al
f01183d7:	5d                   	pop    %ebp
f01183d8:	c3                   	ret    

f01183d9 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f01183d9:	55                   	push   %ebp
f01183da:	89 e5                	mov    %esp,%ebp
f01183dc:	57                   	push   %edi
f01183dd:	53                   	push   %ebx
f01183de:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f01183e4:	83 ec 0c             	sub    $0xc,%esp
f01183e7:	68 50 90 13 f0       	push   $0xf0139050
f01183ec:	e8 40 8a fe ff       	call   f0100e31 <cprintf>
f01183f1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01183f4:	83 ec 0c             	sub    $0xc,%esp
f01183f7:	68 80 90 13 f0       	push   $0xf0139080
f01183fc:	e8 30 8a fe ff       	call   f0100e31 <cprintf>
f0118401:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118404:	83 ec 0c             	sub    $0xc,%esp
f0118407:	68 50 90 13 f0       	push   $0xf0139050
f011840c:	e8 20 8a fe ff       	call   f0100e31 <cprintf>
f0118411:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118414:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0118418:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f011841c:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0118422:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0118428:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011842f:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118436:	e8 45 45 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011843b:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011843e:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f0118444:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118449:	b8 00 00 00 00       	mov    $0x0,%eax
f011844e:	89 d7                	mov    %edx,%edi
f0118450:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0118452:	e8 29 45 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118457:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011845a:	e8 c7 c1 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011845f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0118462:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0118469:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011846e:	0f b6 d0             	movzbl %al,%edx
f0118471:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118474:	01 d0                	add    %edx,%eax
f0118476:	48                   	dec    %eax
f0118477:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011847a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011847d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118482:	f7 75 d4             	divl   -0x2c(%ebp)
f0118485:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118488:	29 d0                	sub    %edx,%eax
f011848a:	89 c1                	mov    %eax,%ecx
f011848c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0118493:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118498:	0f b6 c0             	movzbl %al,%eax
f011849b:	c1 e0 04             	shl    $0x4,%eax
f011849e:	89 c2                	mov    %eax,%edx
f01184a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01184a3:	01 d0                	add    %edx,%eax
f01184a5:	48                   	dec    %eax
f01184a6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01184a9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01184ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01184b1:	f7 75 cc             	divl   -0x34(%ebp)
f01184b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01184b7:	29 d0                	sub    %edx,%eax
f01184b9:	01 c8                	add    %ecx,%eax
f01184bb:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01184c0:	29 c2                	sub    %eax,%edx
f01184c2:	89 d0                	mov    %edx,%eax
f01184c4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f01184c7:	83 ec 0c             	sub    $0xc,%esp
f01184ca:	ff 75 c4             	pushl  -0x3c(%ebp)
f01184cd:	e8 2f fa fe ff       	call   f0107f01 <kmalloc>
f01184d2:	83 c4 10             	add    $0x10,%esp
f01184d5:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f01184db:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01184e1:	85 c0                	test   %eax,%eax
f01184e3:	74 14                	je     f01184f9 <test_kmalloc+0x120>
f01184e5:	83 ec 04             	sub    $0x4,%esp
f01184e8:	68 dc 90 13 f0       	push   $0xf01390dc
f01184ed:	6a 40                	push   $0x40
f01184ef:	68 0e 91 13 f0       	push   $0xf013910e
f01184f4:	e8 b7 7c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01184f9:	e8 28 c1 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01184fe:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118501:	74 14                	je     f0118517 <test_kmalloc+0x13e>
f0118503:	83 ec 04             	sub    $0x4,%esp
f0118506:	68 28 91 13 f0       	push   $0xf0139128
f011850b:	6a 41                	push   $0x41
f011850d:	68 0e 91 13 f0       	push   $0xf013910e
f0118512:	e8 99 7c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118517:	e8 64 44 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011851c:	89 c2                	mov    %eax,%edx
f011851e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118521:	39 c2                	cmp    %eax,%edx
f0118523:	74 14                	je     f0118539 <test_kmalloc+0x160>
f0118525:	83 ec 04             	sub    $0x4,%esp
f0118528:	68 90 91 13 f0       	push   $0xf0139190
f011852d:	6a 42                	push   $0x42
f011852f:	68 0e 91 13 f0       	push   $0xf013910e
f0118534:	e8 77 7c fe ff       	call   f01001b0 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118539:	83 ec 0c             	sub    $0xc,%esp
f011853c:	68 d0 91 13 f0       	push   $0xf01391d0
f0118541:	e8 eb 88 fe ff       	call   f0100e31 <cprintf>
f0118546:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118549:	e8 32 44 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011854e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118551:	e8 d0 c0 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0118556:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118559:	83 ec 0c             	sub    $0xc,%esp
f011855c:	68 00 fc 1f 00       	push   $0x1ffc00
f0118561:	e8 9b f9 fe ff       	call   f0107f01 <kmalloc>
f0118566:	83 c4 10             	add    $0x10,%esp
f0118569:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011856f:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118575:	89 c1                	mov    %eax,%ecx
f0118577:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011857e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118583:	0f b6 d0             	movzbl %al,%edx
f0118586:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118589:	01 d0                	add    %edx,%eax
f011858b:	48                   	dec    %eax
f011858c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011858f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118592:	ba 00 00 00 00       	mov    $0x0,%edx
f0118597:	f7 75 c0             	divl   -0x40(%ebp)
f011859a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011859d:	29 d0                	sub    %edx,%eax
f011859f:	89 c3                	mov    %eax,%ebx
f01185a1:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01185a8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01185ad:	0f b6 c0             	movzbl %al,%eax
f01185b0:	c1 e0 04             	shl    $0x4,%eax
f01185b3:	89 c2                	mov    %eax,%edx
f01185b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01185b8:	01 d0                	add    %edx,%eax
f01185ba:	48                   	dec    %eax
f01185bb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01185be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01185c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01185c6:	f7 75 b8             	divl   -0x48(%ebp)
f01185c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01185cc:	29 d0                	sub    %edx,%eax
f01185ce:	01 d8                	add    %ebx,%eax
f01185d0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01185d5:	39 c1                	cmp    %eax,%ecx
f01185d7:	74 14                	je     f01185ed <test_kmalloc+0x214>
f01185d9:	83 ec 04             	sub    $0x4,%esp
f01185dc:	68 f4 91 13 f0       	push   $0xf01391f4
f01185e1:	6a 49                	push   $0x49
f01185e3:	68 0e 91 13 f0       	push   $0xf013910e
f01185e8:	e8 c3 7b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01185ed:	e8 34 c0 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01185f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01185f5:	74 14                	je     f011860b <test_kmalloc+0x232>
f01185f7:	83 ec 04             	sub    $0x4,%esp
f01185fa:	68 28 91 13 f0       	push   $0xf0139128
f01185ff:	6a 4a                	push   $0x4a
f0118601:	68 0e 91 13 f0       	push   $0xf013910e
f0118606:	e8 a5 7b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011860b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011860e:	e8 6d 43 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118613:	29 c3                	sub    %eax,%ebx
f0118615:	89 d8                	mov    %ebx,%eax
f0118617:	3d 00 02 00 00       	cmp    $0x200,%eax
f011861c:	74 14                	je     f0118632 <test_kmalloc+0x259>
f011861e:	83 ec 04             	sub    $0x4,%esp
f0118621:	68 90 91 13 f0       	push   $0xf0139190
f0118626:	6a 4b                	push   $0x4b
f0118628:	68 0e 91 13 f0       	push   $0xf013910e
f011862d:	e8 7e 7b fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118632:	e8 49 43 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118637:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011863a:	e8 e7 bf fe ff       	call   f0104626 <pf_calculate_free_frames>
f011863f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118642:	83 ec 0c             	sub    $0xc,%esp
f0118645:	68 00 fc 1f 00       	push   $0x1ffc00
f011864a:	e8 b2 f8 fe ff       	call   f0107f01 <kmalloc>
f011864f:	83 c4 10             	add    $0x10,%esp
f0118652:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118658:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011865e:	89 c1                	mov    %eax,%ecx
f0118660:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118667:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011866c:	0f b6 d0             	movzbl %al,%edx
f011866f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118672:	01 d0                	add    %edx,%eax
f0118674:	48                   	dec    %eax
f0118675:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118678:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011867b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118680:	f7 75 b0             	divl   -0x50(%ebp)
f0118683:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118686:	29 d0                	sub    %edx,%eax
f0118688:	89 c3                	mov    %eax,%ebx
f011868a:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118691:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118696:	0f b6 c0             	movzbl %al,%eax
f0118699:	c1 e0 04             	shl    $0x4,%eax
f011869c:	89 c2                	mov    %eax,%edx
f011869e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01186a1:	01 d0                	add    %edx,%eax
f01186a3:	48                   	dec    %eax
f01186a4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01186a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01186aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01186af:	f7 75 a8             	divl   -0x58(%ebp)
f01186b2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01186b5:	29 d0                	sub    %edx,%eax
f01186b7:	01 d8                	add    %ebx,%eax
f01186b9:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01186be:	39 c1                	cmp    %eax,%ecx
f01186c0:	74 14                	je     f01186d6 <test_kmalloc+0x2fd>
f01186c2:	83 ec 04             	sub    $0x4,%esp
f01186c5:	68 f4 91 13 f0       	push   $0xf01391f4
f01186ca:	6a 51                	push   $0x51
f01186cc:	68 0e 91 13 f0       	push   $0xf013910e
f01186d1:	e8 da 7a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01186d6:	e8 4b bf fe ff       	call   f0104626 <pf_calculate_free_frames>
f01186db:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01186de:	74 14                	je     f01186f4 <test_kmalloc+0x31b>
f01186e0:	83 ec 04             	sub    $0x4,%esp
f01186e3:	68 28 91 13 f0       	push   $0xf0139128
f01186e8:	6a 52                	push   $0x52
f01186ea:	68 0e 91 13 f0       	push   $0xf013910e
f01186ef:	e8 bc 7a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01186f4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01186f7:	e8 84 42 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01186fc:	29 c3                	sub    %eax,%ebx
f01186fe:	89 d8                	mov    %ebx,%eax
f0118700:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118705:	74 14                	je     f011871b <test_kmalloc+0x342>
f0118707:	83 ec 04             	sub    $0x4,%esp
f011870a:	68 90 91 13 f0       	push   $0xf0139190
f011870f:	6a 53                	push   $0x53
f0118711:	68 0e 91 13 f0       	push   $0xf013910e
f0118716:	e8 95 7a fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011871b:	e8 60 42 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118720:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118723:	e8 fe be fe ff       	call   f0104626 <pf_calculate_free_frames>
f0118728:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011872b:	83 ec 0c             	sub    $0xc,%esp
f011872e:	68 00 08 00 00       	push   $0x800
f0118733:	e8 c9 f7 fe ff       	call   f0107f01 <kmalloc>
f0118738:	83 c4 10             	add    $0x10,%esp
f011873b:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118741:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118747:	89 c1                	mov    %eax,%ecx
f0118749:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118750:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118755:	0f b6 d0             	movzbl %al,%edx
f0118758:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011875b:	01 d0                	add    %edx,%eax
f011875d:	48                   	dec    %eax
f011875e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118761:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118764:	ba 00 00 00 00       	mov    $0x0,%edx
f0118769:	f7 75 a0             	divl   -0x60(%ebp)
f011876c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011876f:	29 d0                	sub    %edx,%eax
f0118771:	89 c3                	mov    %eax,%ebx
f0118773:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011877a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011877f:	0f b6 c0             	movzbl %al,%eax
f0118782:	c1 e0 04             	shl    $0x4,%eax
f0118785:	89 c2                	mov    %eax,%edx
f0118787:	8b 45 98             	mov    -0x68(%ebp),%eax
f011878a:	01 d0                	add    %edx,%eax
f011878c:	48                   	dec    %eax
f011878d:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118790:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118793:	ba 00 00 00 00       	mov    $0x0,%edx
f0118798:	f7 75 98             	divl   -0x68(%ebp)
f011879b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011879e:	29 d0                	sub    %edx,%eax
f01187a0:	01 d8                	add    %ebx,%eax
f01187a2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01187a7:	39 c1                	cmp    %eax,%ecx
f01187a9:	74 14                	je     f01187bf <test_kmalloc+0x3e6>
f01187ab:	83 ec 04             	sub    $0x4,%esp
f01187ae:	68 f4 91 13 f0       	push   $0xf01391f4
f01187b3:	6a 59                	push   $0x59
f01187b5:	68 0e 91 13 f0       	push   $0xf013910e
f01187ba:	e8 f1 79 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01187bf:	e8 62 be fe ff       	call   f0104626 <pf_calculate_free_frames>
f01187c4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01187c7:	74 14                	je     f01187dd <test_kmalloc+0x404>
f01187c9:	83 ec 04             	sub    $0x4,%esp
f01187cc:	68 28 91 13 f0       	push   $0xf0139128
f01187d1:	6a 5a                	push   $0x5a
f01187d3:	68 0e 91 13 f0       	push   $0xf013910e
f01187d8:	e8 d3 79 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01187dd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01187e0:	e8 9b 41 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01187e5:	29 c3                	sub    %eax,%ebx
f01187e7:	89 d8                	mov    %ebx,%eax
f01187e9:	83 f8 01             	cmp    $0x1,%eax
f01187ec:	74 14                	je     f0118802 <test_kmalloc+0x429>
f01187ee:	83 ec 04             	sub    $0x4,%esp
f01187f1:	68 90 91 13 f0       	push   $0xf0139190
f01187f6:	6a 5b                	push   $0x5b
f01187f8:	68 0e 91 13 f0       	push   $0xf013910e
f01187fd:	e8 ae 79 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118802:	e8 79 41 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118807:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011880a:	e8 17 be fe ff       	call   f0104626 <pf_calculate_free_frames>
f011880f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0118812:	83 ec 0c             	sub    $0xc,%esp
f0118815:	68 00 08 00 00       	push   $0x800
f011881a:	e8 e2 f6 fe ff       	call   f0107f01 <kmalloc>
f011881f:	83 c4 10             	add    $0x10,%esp
f0118822:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118828:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011882e:	89 c1                	mov    %eax,%ecx
f0118830:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118837:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011883c:	0f b6 d0             	movzbl %al,%edx
f011883f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118842:	01 d0                	add    %edx,%eax
f0118844:	48                   	dec    %eax
f0118845:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118848:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011884b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118850:	f7 75 90             	divl   -0x70(%ebp)
f0118853:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118856:	29 d0                	sub    %edx,%eax
f0118858:	89 c3                	mov    %eax,%ebx
f011885a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118861:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118866:	0f b6 c0             	movzbl %al,%eax
f0118869:	c1 e0 04             	shl    $0x4,%eax
f011886c:	89 c2                	mov    %eax,%edx
f011886e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118871:	01 d0                	add    %edx,%eax
f0118873:	48                   	dec    %eax
f0118874:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118877:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011887a:	ba 00 00 00 00       	mov    $0x0,%edx
f011887f:	f7 75 88             	divl   -0x78(%ebp)
f0118882:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118885:	29 d0                	sub    %edx,%eax
f0118887:	01 d8                	add    %ebx,%eax
f0118889:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011888e:	39 c1                	cmp    %eax,%ecx
f0118890:	74 14                	je     f01188a6 <test_kmalloc+0x4cd>
f0118892:	83 ec 04             	sub    $0x4,%esp
f0118895:	68 f4 91 13 f0       	push   $0xf01391f4
f011889a:	6a 61                	push   $0x61
f011889c:	68 0e 91 13 f0       	push   $0xf013910e
f01188a1:	e8 0a 79 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01188a6:	e8 7b bd fe ff       	call   f0104626 <pf_calculate_free_frames>
f01188ab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01188ae:	74 14                	je     f01188c4 <test_kmalloc+0x4eb>
f01188b0:	83 ec 04             	sub    $0x4,%esp
f01188b3:	68 28 91 13 f0       	push   $0xf0139128
f01188b8:	6a 62                	push   $0x62
f01188ba:	68 0e 91 13 f0       	push   $0xf013910e
f01188bf:	e8 ec 78 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01188c4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01188c7:	e8 b4 40 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01188cc:	29 c3                	sub    %eax,%ebx
f01188ce:	89 d8                	mov    %ebx,%eax
f01188d0:	83 f8 01             	cmp    $0x1,%eax
f01188d3:	74 14                	je     f01188e9 <test_kmalloc+0x510>
f01188d5:	83 ec 04             	sub    $0x4,%esp
f01188d8:	68 90 91 13 f0       	push   $0xf0139190
f01188dd:	6a 63                	push   $0x63
f01188df:	68 0e 91 13 f0       	push   $0xf013910e
f01188e4:	e8 c7 78 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01188e9:	e8 92 40 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01188ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01188f1:	e8 30 bd fe ff       	call   f0104626 <pf_calculate_free_frames>
f01188f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01188f9:	83 ec 0c             	sub    $0xc,%esp
f01188fc:	68 00 1c 00 00       	push   $0x1c00
f0118901:	e8 fb f5 fe ff       	call   f0107f01 <kmalloc>
f0118906:	83 c4 10             	add    $0x10,%esp
f0118909:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011890f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118915:	89 c1                	mov    %eax,%ecx
f0118917:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011891e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118923:	0f b6 d0             	movzbl %al,%edx
f0118926:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118929:	01 d0                	add    %edx,%eax
f011892b:	48                   	dec    %eax
f011892c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118932:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118938:	ba 00 00 00 00       	mov    $0x0,%edx
f011893d:	f7 75 80             	divl   -0x80(%ebp)
f0118940:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118946:	29 d0                	sub    %edx,%eax
f0118948:	89 c3                	mov    %eax,%ebx
f011894a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118951:	10 00 00 
f0118954:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118959:	0f b6 c0             	movzbl %al,%eax
f011895c:	c1 e0 04             	shl    $0x4,%eax
f011895f:	89 c2                	mov    %eax,%edx
f0118961:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118967:	01 d0                	add    %edx,%eax
f0118969:	48                   	dec    %eax
f011896a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118970:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118976:	ba 00 00 00 00       	mov    $0x0,%edx
f011897b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118981:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118987:	29 d0                	sub    %edx,%eax
f0118989:	01 d8                	add    %ebx,%eax
f011898b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118990:	39 c1                	cmp    %eax,%ecx
f0118992:	74 14                	je     f01189a8 <test_kmalloc+0x5cf>
f0118994:	83 ec 04             	sub    $0x4,%esp
f0118997:	68 f4 91 13 f0       	push   $0xf01391f4
f011899c:	6a 69                	push   $0x69
f011899e:	68 0e 91 13 f0       	push   $0xf013910e
f01189a3:	e8 08 78 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189a8:	e8 79 bc fe ff       	call   f0104626 <pf_calculate_free_frames>
f01189ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01189b0:	74 14                	je     f01189c6 <test_kmalloc+0x5ed>
f01189b2:	83 ec 04             	sub    $0x4,%esp
f01189b5:	68 28 91 13 f0       	push   $0xf0139128
f01189ba:	6a 6a                	push   $0x6a
f01189bc:	68 0e 91 13 f0       	push   $0xf013910e
f01189c1:	e8 ea 77 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01189c6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01189c9:	e8 b2 3f ff ff       	call   f010c980 <sys_calculate_free_frames>
f01189ce:	29 c3                	sub    %eax,%ebx
f01189d0:	89 d8                	mov    %ebx,%eax
f01189d2:	83 f8 02             	cmp    $0x2,%eax
f01189d5:	74 14                	je     f01189eb <test_kmalloc+0x612>
f01189d7:	83 ec 04             	sub    $0x4,%esp
f01189da:	68 90 91 13 f0       	push   $0xf0139190
f01189df:	6a 6b                	push   $0x6b
f01189e1:	68 0e 91 13 f0       	push   $0xf013910e
f01189e6:	e8 c5 77 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01189eb:	e8 90 3f ff ff       	call   f010c980 <sys_calculate_free_frames>
f01189f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01189f3:	e8 2e bc fe ff       	call   f0104626 <pf_calculate_free_frames>
f01189f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01189fb:	83 ec 0c             	sub    $0xc,%esp
f01189fe:	68 00 fc 2f 00       	push   $0x2ffc00
f0118a03:	e8 f9 f4 fe ff       	call   f0107f01 <kmalloc>
f0118a08:	83 c4 10             	add    $0x10,%esp
f0118a0b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118a11:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118a17:	89 c1                	mov    %eax,%ecx
f0118a19:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118a20:	10 00 00 
f0118a23:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118a28:	0f b6 d0             	movzbl %al,%edx
f0118a2b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118a31:	01 d0                	add    %edx,%eax
f0118a33:	48                   	dec    %eax
f0118a34:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118a3a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118a40:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a45:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118a4b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118a51:	29 d0                	sub    %edx,%eax
f0118a53:	89 c3                	mov    %eax,%ebx
f0118a55:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118a5c:	10 00 00 
f0118a5f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118a64:	0f b6 c0             	movzbl %al,%eax
f0118a67:	c1 e0 04             	shl    $0x4,%eax
f0118a6a:	89 c2                	mov    %eax,%edx
f0118a6c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118a72:	01 d0                	add    %edx,%eax
f0118a74:	48                   	dec    %eax
f0118a75:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118a7b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118a81:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a86:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118a8c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118a92:	29 d0                	sub    %edx,%eax
f0118a94:	01 d8                	add    %ebx,%eax
f0118a96:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118a9b:	39 c1                	cmp    %eax,%ecx
f0118a9d:	74 14                	je     f0118ab3 <test_kmalloc+0x6da>
f0118a9f:	83 ec 04             	sub    $0x4,%esp
f0118aa2:	68 f4 91 13 f0       	push   $0xf01391f4
f0118aa7:	6a 71                	push   $0x71
f0118aa9:	68 0e 91 13 f0       	push   $0xf013910e
f0118aae:	e8 fd 76 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118ab3:	e8 6e bb fe ff       	call   f0104626 <pf_calculate_free_frames>
f0118ab8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118abb:	74 14                	je     f0118ad1 <test_kmalloc+0x6f8>
f0118abd:	83 ec 04             	sub    $0x4,%esp
f0118ac0:	68 28 91 13 f0       	push   $0xf0139128
f0118ac5:	6a 72                	push   $0x72
f0118ac7:	68 0e 91 13 f0       	push   $0xf013910e
f0118acc:	e8 df 76 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118ad1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118ad4:	e8 a7 3e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118ad9:	29 c3                	sub    %eax,%ebx
f0118adb:	89 d8                	mov    %ebx,%eax
f0118add:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118ae2:	74 14                	je     f0118af8 <test_kmalloc+0x71f>
f0118ae4:	83 ec 04             	sub    $0x4,%esp
f0118ae7:	68 90 91 13 f0       	push   $0xf0139190
f0118aec:	6a 73                	push   $0x73
f0118aee:	68 0e 91 13 f0       	push   $0xf013910e
f0118af3:	e8 b8 76 fe ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118af8:	e8 83 3e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118afd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118b00:	e8 21 bb fe ff       	call   f0104626 <pf_calculate_free_frames>
f0118b05:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118b08:	83 ec 0c             	sub    $0xc,%esp
f0118b0b:	68 00 fc 5f 00       	push   $0x5ffc00
f0118b10:	e8 ec f3 fe ff       	call   f0107f01 <kmalloc>
f0118b15:	83 c4 10             	add    $0x10,%esp
f0118b18:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118b1e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118b24:	89 c1                	mov    %eax,%ecx
f0118b26:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118b2d:	10 00 00 
f0118b30:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118b35:	0f b6 d0             	movzbl %al,%edx
f0118b38:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118b3e:	01 d0                	add    %edx,%eax
f0118b40:	48                   	dec    %eax
f0118b41:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118b47:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118b4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b52:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118b58:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118b5e:	29 d0                	sub    %edx,%eax
f0118b60:	89 c3                	mov    %eax,%ebx
f0118b62:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118b69:	10 00 00 
f0118b6c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118b71:	0f b6 c0             	movzbl %al,%eax
f0118b74:	c1 e0 04             	shl    $0x4,%eax
f0118b77:	89 c2                	mov    %eax,%edx
f0118b79:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118b7f:	01 d0                	add    %edx,%eax
f0118b81:	48                   	dec    %eax
f0118b82:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118b88:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118b8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b93:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118b99:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118b9f:	29 d0                	sub    %edx,%eax
f0118ba1:	01 d8                	add    %ebx,%eax
f0118ba3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118ba8:	39 c1                	cmp    %eax,%ecx
f0118baa:	74 14                	je     f0118bc0 <test_kmalloc+0x7e7>
f0118bac:	83 ec 04             	sub    $0x4,%esp
f0118baf:	68 f4 91 13 f0       	push   $0xf01391f4
f0118bb4:	6a 79                	push   $0x79
f0118bb6:	68 0e 91 13 f0       	push   $0xf013910e
f0118bbb:	e8 f0 75 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118bc0:	e8 61 ba fe ff       	call   f0104626 <pf_calculate_free_frames>
f0118bc5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118bc8:	74 14                	je     f0118bde <test_kmalloc+0x805>
f0118bca:	83 ec 04             	sub    $0x4,%esp
f0118bcd:	68 28 91 13 f0       	push   $0xf0139128
f0118bd2:	6a 7a                	push   $0x7a
f0118bd4:	68 0e 91 13 f0       	push   $0xf013910e
f0118bd9:	e8 d2 75 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118bde:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118be1:	e8 9a 3d ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118be6:	29 c3                	sub    %eax,%ebx
f0118be8:	89 d8                	mov    %ebx,%eax
f0118bea:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118bef:	74 14                	je     f0118c05 <test_kmalloc+0x82c>
f0118bf1:	83 ec 04             	sub    $0x4,%esp
f0118bf4:	68 90 91 13 f0       	push   $0xf0139190
f0118bf9:	6a 7b                	push   $0x7b
f0118bfb:	68 0e 91 13 f0       	push   $0xf013910e
f0118c00:	e8 ab 75 fe ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118c05:	e8 76 3d ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118c0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c0d:	e8 14 ba fe ff       	call   f0104626 <pf_calculate_free_frames>
f0118c12:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118c15:	83 ec 0c             	sub    $0xc,%esp
f0118c18:	68 00 38 00 00       	push   $0x3800
f0118c1d:	e8 df f2 fe ff       	call   f0107f01 <kmalloc>
f0118c22:	83 c4 10             	add    $0x10,%esp
f0118c25:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118c2b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118c31:	89 c1                	mov    %eax,%ecx
f0118c33:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118c3a:	10 00 00 
f0118c3d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118c42:	0f b6 d0             	movzbl %al,%edx
f0118c45:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118c4b:	01 d0                	add    %edx,%eax
f0118c4d:	48                   	dec    %eax
f0118c4e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118c54:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118c5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c5f:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118c65:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118c6b:	29 d0                	sub    %edx,%eax
f0118c6d:	89 c3                	mov    %eax,%ebx
f0118c6f:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118c76:	10 00 00 
f0118c79:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0118c7e:	0f b6 c0             	movzbl %al,%eax
f0118c81:	c1 e0 04             	shl    $0x4,%eax
f0118c84:	89 c2                	mov    %eax,%edx
f0118c86:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118c8c:	01 d0                	add    %edx,%eax
f0118c8e:	48                   	dec    %eax
f0118c8f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118c95:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118c9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ca0:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118ca6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118cac:	29 d0                	sub    %edx,%eax
f0118cae:	01 d8                	add    %ebx,%eax
f0118cb0:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118cb5:	39 c1                	cmp    %eax,%ecx
f0118cb7:	74 17                	je     f0118cd0 <test_kmalloc+0x8f7>
f0118cb9:	83 ec 04             	sub    $0x4,%esp
f0118cbc:	68 f4 91 13 f0       	push   $0xf01391f4
f0118cc1:	68 81 00 00 00       	push   $0x81
f0118cc6:	68 0e 91 13 f0       	push   $0xf013910e
f0118ccb:	e8 e0 74 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118cd0:	e8 51 b9 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0118cd5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118cd8:	74 17                	je     f0118cf1 <test_kmalloc+0x918>
f0118cda:	83 ec 04             	sub    $0x4,%esp
f0118cdd:	68 28 91 13 f0       	push   $0xf0139128
f0118ce2:	68 82 00 00 00       	push   $0x82
f0118ce7:	68 0e 91 13 f0       	push   $0xf013910e
f0118cec:	e8 bf 74 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118cf1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118cf4:	e8 87 3c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118cf9:	29 c3                	sub    %eax,%ebx
f0118cfb:	89 d8                	mov    %ebx,%eax
f0118cfd:	83 f8 04             	cmp    $0x4,%eax
f0118d00:	74 17                	je     f0118d19 <test_kmalloc+0x940>
f0118d02:	83 ec 04             	sub    $0x4,%esp
f0118d05:	68 90 91 13 f0       	push   $0xf0139190
f0118d0a:	68 83 00 00 00       	push   $0x83
f0118d0f:	68 0e 91 13 f0       	push   $0xf013910e
f0118d14:	e8 97 74 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b50%");
f0118d19:	83 ec 0c             	sub    $0xc,%esp
f0118d1c:	68 5a 92 13 f0       	push   $0xf013925a
f0118d21:	e8 0b 81 fe ff       	call   f0100e31 <cprintf>
f0118d26:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118d29:	e8 52 3c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0118d2e:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118d31:	e8 f0 b8 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0118d36:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118d39:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f0118d40:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118d43:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118d49:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f0118d4f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118d55:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118d58:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118d5a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118d60:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118d66:	01 c2                	add    %eax,%edx
f0118d68:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118d6b:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118d6d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118d73:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118d79:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f0118d80:	fd 0f 00 
			shortArr[0] = minShort;
f0118d83:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f0118d89:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118d8c:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118d8f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118d95:	01 c0                	add    %eax,%eax
f0118d97:	89 c2                	mov    %eax,%edx
f0118d99:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118d9f:	01 c2                	add    %eax,%edx
f0118da1:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118da5:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118da8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118dae:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118db4:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f0118dbb:	01 00 00 
			intArr[0] = minInt;
f0118dbe:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118dc4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118dc7:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118dc9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118dcf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118dd6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118ddc:	01 c2                	add    %eax,%edx
f0118dde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118de1:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118de3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118de9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118def:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f0118df6:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118df9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118dff:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118e02:	88 10                	mov    %dl,(%eax)
f0118e04:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0118e0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118e0d:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118e11:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e17:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118e1a:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118e1d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e23:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118e2a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e30:	01 c2                	add    %eax,%edx
f0118e32:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118e35:	88 02                	mov    %al,(%edx)
f0118e37:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e3d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118e44:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e4a:	01 c2                	add    %eax,%edx
f0118e4c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118e50:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118e54:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e5a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118e61:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e67:	01 c2                	add    %eax,%edx
f0118e69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118e6c:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118e6f:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f0118e76:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118e79:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118e7f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f0118e85:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118e8b:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118e8e:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118e90:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118e96:	89 c2                	mov    %eax,%edx
f0118e98:	c1 ea 1f             	shr    $0x1f,%edx
f0118e9b:	01 d0                	add    %edx,%eax
f0118e9d:	d1 f8                	sar    %eax
f0118e9f:	89 c2                	mov    %eax,%edx
f0118ea1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118ea7:	01 c2                	add    %eax,%edx
f0118ea9:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118eac:	88 c1                	mov    %al,%cl
f0118eae:	c0 e9 07             	shr    $0x7,%cl
f0118eb1:	01 c8                	add    %ecx,%eax
f0118eb3:	d0 f8                	sar    %al
f0118eb5:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118eb7:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0118ebd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118ec3:	01 c2                	add    %eax,%edx
f0118ec5:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118ec8:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118eca:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118ed0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118ed6:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f0118edd:	1b 00 00 
			shortArr2[0] = minShort;
f0118ee0:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0118ee6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118ee9:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118eec:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118ef2:	01 c0                	add    %eax,%eax
f0118ef4:	89 c2                	mov    %eax,%edx
f0118ef6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118efc:	01 c2                	add    %eax,%edx
f0118efe:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118f02:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118f05:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118f0b:	8a 00                	mov    (%eax),%al
f0118f0d:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118f10:	75 15                	jne    f0118f27 <test_kmalloc+0xb4e>
f0118f12:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118f18:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118f1e:	01 d0                	add    %edx,%eax
f0118f20:	8a 00                	mov    (%eax),%al
f0118f22:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118f25:	74 17                	je     f0118f3e <test_kmalloc+0xb65>
f0118f27:	83 ec 04             	sub    $0x4,%esp
f0118f2a:	68 64 92 13 f0       	push   $0xf0139264
f0118f2f:	68 b2 00 00 00       	push   $0xb2
f0118f34:	68 0e 91 13 f0       	push   $0xf013910e
f0118f39:	e8 72 72 fe ff       	call   f01001b0 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118f3e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118f44:	66 8b 00             	mov    (%eax),%ax
f0118f47:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118f4b:	75 1b                	jne    f0118f68 <test_kmalloc+0xb8f>
f0118f4d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118f53:	01 c0                	add    %eax,%eax
f0118f55:	89 c2                	mov    %eax,%edx
f0118f57:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118f5d:	01 d0                	add    %edx,%eax
f0118f5f:	66 8b 00             	mov    (%eax),%ax
f0118f62:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118f66:	74 17                	je     f0118f7f <test_kmalloc+0xba6>
f0118f68:	83 ec 04             	sub    $0x4,%esp
f0118f6b:	68 64 92 13 f0       	push   $0xf0139264
f0118f70:	68 b3 00 00 00       	push   $0xb3
f0118f75:	68 0e 91 13 f0       	push   $0xf013910e
f0118f7a:	e8 31 72 fe ff       	call   f01001b0 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118f7f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118f85:	8b 00                	mov    (%eax),%eax
f0118f87:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118f8a:	75 1c                	jne    f0118fa8 <test_kmalloc+0xbcf>
f0118f8c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118f92:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118f99:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118f9f:	01 d0                	add    %edx,%eax
f0118fa1:	8b 00                	mov    (%eax),%eax
f0118fa3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118fa6:	74 17                	je     f0118fbf <test_kmalloc+0xbe6>
f0118fa8:	83 ec 04             	sub    $0x4,%esp
f0118fab:	68 64 92 13 f0       	push   $0xf0139264
f0118fb0:	68 b4 00 00 00       	push   $0xb4
f0118fb5:	68 0e 91 13 f0       	push   $0xf013910e
f0118fba:	e8 f1 71 fe ff       	call   f01001b0 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118fbf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118fc5:	8a 00                	mov    (%eax),%al
f0118fc7:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118fca:	75 1c                	jne    f0118fe8 <test_kmalloc+0xc0f>
f0118fcc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118fd2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118fd9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118fdf:	01 d0                	add    %edx,%eax
f0118fe1:	8a 00                	mov    (%eax),%al
f0118fe3:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118fe6:	74 17                	je     f0118fff <test_kmalloc+0xc26>
f0118fe8:	83 ec 04             	sub    $0x4,%esp
f0118feb:	68 64 92 13 f0       	push   $0xf0139264
f0118ff0:	68 b6 00 00 00       	push   $0xb6
f0118ff5:	68 0e 91 13 f0       	push   $0xf013910e
f0118ffa:	e8 b1 71 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118fff:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119005:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119009:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011900d:	75 1f                	jne    f011902e <test_kmalloc+0xc55>
f011900f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119015:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011901c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119022:	01 d0                	add    %edx,%eax
f0119024:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119028:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011902c:	74 17                	je     f0119045 <test_kmalloc+0xc6c>
f011902e:	83 ec 04             	sub    $0x4,%esp
f0119031:	68 64 92 13 f0       	push   $0xf0139264
f0119036:	68 b7 00 00 00       	push   $0xb7
f011903b:	68 0e 91 13 f0       	push   $0xf013910e
f0119040:	e8 6b 71 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0119045:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011904b:	8b 40 04             	mov    0x4(%eax),%eax
f011904e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119051:	75 1d                	jne    f0119070 <test_kmalloc+0xc97>
f0119053:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119059:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119060:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119066:	01 d0                	add    %edx,%eax
f0119068:	8b 40 04             	mov    0x4(%eax),%eax
f011906b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011906e:	74 17                	je     f0119087 <test_kmalloc+0xcae>
f0119070:	83 ec 04             	sub    $0x4,%esp
f0119073:	68 64 92 13 f0       	push   $0xf0139264
f0119078:	68 b8 00 00 00       	push   $0xb8
f011907d:	68 0e 91 13 f0       	push   $0xf013910e
f0119082:	e8 29 71 fe ff       	call   f01001b0 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0119087:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011908d:	8a 00                	mov    (%eax),%al
f011908f:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0119092:	75 40                	jne    f01190d4 <test_kmalloc+0xcfb>
f0119094:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011909a:	89 c2                	mov    %eax,%edx
f011909c:	c1 ea 1f             	shr    $0x1f,%edx
f011909f:	01 d0                	add    %edx,%eax
f01190a1:	d1 f8                	sar    %eax
f01190a3:	89 c2                	mov    %eax,%edx
f01190a5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01190ab:	01 d0                	add    %edx,%eax
f01190ad:	8a 10                	mov    (%eax),%dl
f01190af:	8a 45 f2             	mov    -0xe(%ebp),%al
f01190b2:	88 c1                	mov    %al,%cl
f01190b4:	c0 e9 07             	shr    $0x7,%cl
f01190b7:	01 c8                	add    %ecx,%eax
f01190b9:	d0 f8                	sar    %al
f01190bb:	38 c2                	cmp    %al,%dl
f01190bd:	75 15                	jne    f01190d4 <test_kmalloc+0xcfb>
f01190bf:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f01190c5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01190cb:	01 d0                	add    %edx,%eax
f01190cd:	8a 00                	mov    (%eax),%al
f01190cf:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01190d2:	74 17                	je     f01190eb <test_kmalloc+0xd12>
f01190d4:	83 ec 04             	sub    $0x4,%esp
f01190d7:	68 64 92 13 f0       	push   $0xf0139264
f01190dc:	68 ba 00 00 00       	push   $0xba
f01190e1:	68 0e 91 13 f0       	push   $0xf013910e
f01190e6:	e8 c5 70 fe ff       	call   f01001b0 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01190eb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01190f1:	66 8b 00             	mov    (%eax),%ax
f01190f4:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01190f8:	75 1b                	jne    f0119115 <test_kmalloc+0xd3c>
f01190fa:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119100:	01 c0                	add    %eax,%eax
f0119102:	89 c2                	mov    %eax,%edx
f0119104:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011910a:	01 d0                	add    %edx,%eax
f011910c:	66 8b 00             	mov    (%eax),%ax
f011910f:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0119113:	74 17                	je     f011912c <test_kmalloc+0xd53>
f0119115:	83 ec 04             	sub    $0x4,%esp
f0119118:	68 64 92 13 f0       	push   $0xf0139264
f011911d:	68 bb 00 00 00       	push   $0xbb
f0119122:	68 0e 91 13 f0       	push   $0xf013910e
f0119127:	e8 84 70 fe ff       	call   f01001b0 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011912c:	e8 4f 38 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119131:	89 c2                	mov    %eax,%edx
f0119133:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119136:	39 c2                	cmp    %eax,%edx
f0119138:	74 17                	je     f0119151 <test_kmalloc+0xd78>
f011913a:	83 ec 04             	sub    $0x4,%esp
f011913d:	68 90 91 13 f0       	push   $0xf0139190
f0119142:	68 bd 00 00 00       	push   $0xbd
f0119147:	68 0e 91 13 f0       	push   $0xf013910e
f011914c:	e8 5f 70 fe ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119151:	e8 d0 b4 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119156:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0119159:	74 17                	je     f0119172 <test_kmalloc+0xd99>
f011915b:	83 ec 04             	sub    $0x4,%esp
f011915e:	68 28 91 13 f0       	push   $0xf0139128
f0119163:	68 be 00 00 00       	push   $0xbe
f0119168:	68 0e 91 13 f0       	push   $0xf013910e
f011916d:	e8 3e 70 fe ff       	call   f01001b0 <_panic>
		}

		cprintf("\b\b\b80%");
f0119172:	83 ec 0c             	sub    $0xc,%esp
f0119175:	68 99 92 13 f0       	push   $0xf0139299
f011917a:	e8 b2 7c fe ff       	call   f0100e31 <cprintf>
f011917f:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0119182:	e8 f9 37 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119187:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011918a:	e8 97 b4 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011918f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0119192:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0119199:	10 00 00 
f011919c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01191a1:	0f b6 d0             	movzbl %al,%edx
f01191a4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01191aa:	01 d0                	add    %edx,%eax
f01191ac:	48                   	dec    %eax
f01191ad:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01191b3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01191b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01191be:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01191c4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01191ca:	29 d0                	sub    %edx,%eax
f01191cc:	89 c1                	mov    %eax,%ecx
f01191ce:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01191d5:	10 00 00 
f01191d8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01191dd:	0f b6 c0             	movzbl %al,%eax
f01191e0:	c1 e0 04             	shl    $0x4,%eax
f01191e3:	89 c2                	mov    %eax,%edx
f01191e5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01191eb:	01 d0                	add    %edx,%eax
f01191ed:	48                   	dec    %eax
f01191ee:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01191f4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01191fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01191ff:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119205:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011920b:	29 d0                	sub    %edx,%eax
f011920d:	01 c8                	add    %ecx,%eax
f011920f:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0119214:	29 c2                	sub    %eax,%edx
f0119216:	89 d0                	mov    %edx,%eax
f0119218:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011921e:	83 ec 0c             	sub    $0xc,%esp
f0119221:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f0119227:	e8 d5 ec fe ff       	call   f0107f01 <kmalloc>
f011922c:	83 c4 10             	add    $0x10,%esp
f011922f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0119235:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011923b:	85 c0                	test   %eax,%eax
f011923d:	74 17                	je     f0119256 <test_kmalloc+0xe7d>
f011923f:	83 ec 04             	sub    $0x4,%esp
f0119242:	68 dc 90 13 f0       	push   $0xf01390dc
f0119247:	68 c8 00 00 00       	push   $0xc8
f011924c:	68 0e 91 13 f0       	push   $0xf013910e
f0119251:	e8 5a 6f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119256:	e8 cb b3 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011925b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011925e:	74 17                	je     f0119277 <test_kmalloc+0xe9e>
f0119260:	83 ec 04             	sub    $0x4,%esp
f0119263:	68 28 91 13 f0       	push   $0xf0139128
f0119268:	68 c9 00 00 00       	push   $0xc9
f011926d:	68 0e 91 13 f0       	push   $0xf013910e
f0119272:	e8 39 6f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119277:	e8 04 37 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011927c:	89 c2                	mov    %eax,%edx
f011927e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119281:	39 c2                	cmp    %eax,%edx
f0119283:	74 17                	je     f011929c <test_kmalloc+0xec3>
f0119285:	83 ec 04             	sub    $0x4,%esp
f0119288:	68 90 91 13 f0       	push   $0xf0139190
f011928d:	68 ca 00 00 00       	push   $0xca
f0119292:	68 0e 91 13 f0       	push   $0xf013910e
f0119297:	e8 14 6f fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b90%");
f011929c:	83 ec 0c             	sub    $0xc,%esp
f011929f:	68 a0 92 13 f0       	push   $0xf01392a0
f01192a4:	e8 88 7b fe ff       	call   f0100e31 <cprintf>
f01192a9:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f01192ac:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01192b2:	05 00 40 00 00       	add    $0x4000,%eax
f01192b7:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01192bd:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01192c4:	10 00 00 
f01192c7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01192cc:	0f b6 d0             	movzbl %al,%edx
f01192cf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01192d5:	01 d0                	add    %edx,%eax
f01192d7:	48                   	dec    %eax
f01192d8:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01192de:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01192e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01192e9:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01192ef:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01192f5:	29 d0                	sub    %edx,%eax
f01192f7:	89 c1                	mov    %eax,%ecx
f01192f9:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119300:	10 00 00 
f0119303:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119308:	0f b6 c0             	movzbl %al,%eax
f011930b:	c1 e0 04             	shl    $0x4,%eax
f011930e:	89 c2                	mov    %eax,%edx
f0119310:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119316:	01 d0                	add    %edx,%eax
f0119318:	48                   	dec    %eax
f0119319:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011931f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119325:	ba 00 00 00 00       	mov    $0x0,%edx
f011932a:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119330:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119336:	29 d0                	sub    %edx,%eax
f0119338:	01 c8                	add    %ecx,%eax
f011933a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011933f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0119342:	eb 6a                	jmp    f01193ae <test_kmalloc+0xfd5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0119344:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0119349:	83 ec 04             	sub    $0x4,%esp
f011934c:	8d 95 94 fe ff ff    	lea    -0x16c(%ebp),%edx
f0119352:	52                   	push   %edx
f0119353:	ff 75 f4             	pushl  -0xc(%ebp)
f0119356:	50                   	push   %eax
f0119357:	e8 2d e1 fe ff       	call   f0107489 <get_page_table>
f011935c:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011935f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119365:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119368:	c1 ea 0c             	shr    $0xc,%edx
f011936b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0119371:	c1 e2 02             	shl    $0x2,%edx
f0119374:	01 d0                	add    %edx,%eax
f0119376:	8b 00                	mov    (%eax),%eax
f0119378:	25 ff 0f 00 00       	and    $0xfff,%eax
f011937d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0119383:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119389:	83 e0 04             	and    $0x4,%eax
f011938c:	85 c0                	test   %eax,%eax
f011938e:	74 17                	je     f01193a7 <test_kmalloc+0xfce>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0119390:	83 ec 04             	sub    $0x4,%esp
f0119393:	68 a8 92 13 f0       	push   $0xf01392a8
f0119398:	68 d7 00 00 00       	push   $0xd7
f011939d:	68 0e 91 13 f0       	push   $0xf013910e
f01193a2:	e8 09 6e fe ff       	call   f01001b0 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01193a7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01193ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01193b1:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f01193b7:	72 8b                	jb     f0119344 <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01193b9:	83 ec 0c             	sub    $0xc,%esp
f01193bc:	68 f2 92 13 f0       	push   $0xf01392f2
f01193c1:	e8 6b 7a fe ff       	call   f0100e31 <cprintf>
f01193c6:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01193c9:	83 ec 0c             	sub    $0xc,%esp
f01193cc:	68 fc 92 13 f0       	push   $0xf01392fc
f01193d1:	e8 5b 7a fe ff       	call   f0100e31 <cprintf>
f01193d6:	83 c4 10             	add    $0x10,%esp

	return 1;
f01193d9:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01193de:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01193e1:	5b                   	pop    %ebx
f01193e2:	5f                   	pop    %edi
f01193e3:	5d                   	pop    %ebp
f01193e4:	c3                   	ret    

f01193e5 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f01193e5:	55                   	push   %ebp
f01193e6:	89 e5                	mov    %esp,%ebp
f01193e8:	57                   	push   %edi
f01193e9:	53                   	push   %ebx
f01193ea:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f01193f0:	83 ec 0c             	sub    $0xc,%esp
f01193f3:	68 50 90 13 f0       	push   $0xf0139050
f01193f8:	e8 34 7a fe ff       	call   f0100e31 <cprintf>
f01193fd:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119400:	83 ec 0c             	sub    $0xc,%esp
f0119403:	68 80 90 13 f0       	push   $0xf0139080
f0119408:	e8 24 7a fe ff       	call   f0100e31 <cprintf>
f011940d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119410:	83 ec 0c             	sub    $0xc,%esp
f0119413:	68 50 90 13 f0       	push   $0xf0139050
f0119418:	e8 14 7a fe ff       	call   f0100e31 <cprintf>
f011941d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0119420:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f0119426:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011942b:	b8 00 00 00 00       	mov    $0x0,%eax
f0119430:	89 d7                	mov    %edx,%edi
f0119432:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0119434:	83 ec 0c             	sub    $0xc,%esp
f0119437:	68 38 93 13 f0       	push   $0xf0139338
f011943c:	e8 f0 79 fe ff       	call   f0100e31 <cprintf>
f0119441:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0119444:	e8 37 35 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119449:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011944c:	e8 d5 b1 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119451:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119454:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011945b:	eb 1f                	jmp    f011947c <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011945d:	83 ec 0c             	sub    $0xc,%esp
f0119460:	68 00 00 20 00       	push   $0x200000
f0119465:	e8 97 ea fe ff       	call   f0107f01 <kmalloc>
f011946a:	83 c4 10             	add    $0x10,%esp
f011946d:	89 c2                	mov    %eax,%edx
f011946f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119472:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119479:	ff 45 f4             	incl   -0xc(%ebp)
f011947c:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0119480:	7e db                	jle    f011945d <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0119482:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0119489:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011948e:	0f b6 d0             	movzbl %al,%edx
f0119491:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119494:	01 d0                	add    %edx,%eax
f0119496:	48                   	dec    %eax
f0119497:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011949a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011949d:	ba 00 00 00 00       	mov    $0x0,%edx
f01194a2:	f7 75 e8             	divl   -0x18(%ebp)
f01194a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01194a8:	29 d0                	sub    %edx,%eax
f01194aa:	89 c1                	mov    %eax,%ecx
f01194ac:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f01194b3:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01194b8:	0f b6 c0             	movzbl %al,%eax
f01194bb:	c1 e0 04             	shl    $0x4,%eax
f01194be:	89 c2                	mov    %eax,%edx
f01194c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01194c3:	01 d0                	add    %edx,%eax
f01194c5:	48                   	dec    %eax
f01194c6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01194c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01194cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01194d1:	f7 75 e0             	divl   -0x20(%ebp)
f01194d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01194d7:	29 d0                	sub    %edx,%eax
f01194d9:	01 c8                	add    %ecx,%eax
f01194db:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f01194e0:	29 c2                	sub    %eax,%edx
f01194e2:	89 d0                	mov    %edx,%eax
f01194e4:	83 ec 0c             	sub    $0xc,%esp
f01194e7:	50                   	push   %eax
f01194e8:	e8 14 ea fe ff       	call   f0107f01 <kmalloc>
f01194ed:	83 c4 10             	add    $0x10,%esp
f01194f0:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01194f6:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f01194fc:	89 c1                	mov    %eax,%ecx
f01194fe:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119505:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011950a:	0f b6 d0             	movzbl %al,%edx
f011950d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119510:	01 d0                	add    %edx,%eax
f0119512:	48                   	dec    %eax
f0119513:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0119516:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119519:	ba 00 00 00 00       	mov    $0x0,%edx
f011951e:	f7 75 d8             	divl   -0x28(%ebp)
f0119521:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119524:	29 d0                	sub    %edx,%eax
f0119526:	89 c3                	mov    %eax,%ebx
f0119528:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f011952f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119534:	0f b6 c0             	movzbl %al,%eax
f0119537:	c1 e0 04             	shl    $0x4,%eax
f011953a:	89 c2                	mov    %eax,%edx
f011953c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011953f:	01 d0                	add    %edx,%eax
f0119541:	48                   	dec    %eax
f0119542:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0119545:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119548:	ba 00 00 00 00       	mov    $0x0,%edx
f011954d:	f7 75 d0             	divl   -0x30(%ebp)
f0119550:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119553:	29 d0                	sub    %edx,%eax
f0119555:	01 d8                	add    %ebx,%eax
f0119557:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011955c:	39 c1                	cmp    %eax,%ecx
f011955e:	0f 85 4f 03 00 00    	jne    f01198b3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119564:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011956a:	89 c1                	mov    %eax,%ecx
f011956c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0119573:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119578:	0f b6 d0             	movzbl %al,%edx
f011957b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011957e:	01 d0                	add    %edx,%eax
f0119580:	48                   	dec    %eax
f0119581:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0119584:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119587:	ba 00 00 00 00       	mov    $0x0,%edx
f011958c:	f7 75 c8             	divl   -0x38(%ebp)
f011958f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119592:	29 d0                	sub    %edx,%eax
f0119594:	89 c3                	mov    %eax,%ebx
f0119596:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011959d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01195a2:	0f b6 c0             	movzbl %al,%eax
f01195a5:	c1 e0 04             	shl    $0x4,%eax
f01195a8:	89 c2                	mov    %eax,%edx
f01195aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01195ad:	01 d0                	add    %edx,%eax
f01195af:	48                   	dec    %eax
f01195b0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01195b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01195b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01195bb:	f7 75 c0             	divl   -0x40(%ebp)
f01195be:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01195c1:	29 d0                	sub    %edx,%eax
f01195c3:	01 d8                	add    %ebx,%eax
f01195c5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01195ca:	39 c1                	cmp    %eax,%ecx
f01195cc:	0f 85 e1 02 00 00    	jne    f01198b3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01195d2:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f01195d8:	89 c1                	mov    %eax,%ecx
f01195da:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01195e1:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01195e6:	0f b6 d0             	movzbl %al,%edx
f01195e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01195ec:	01 d0                	add    %edx,%eax
f01195ee:	48                   	dec    %eax
f01195ef:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01195f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01195f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01195fa:	f7 75 b8             	divl   -0x48(%ebp)
f01195fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119600:	29 d0                	sub    %edx,%eax
f0119602:	89 c3                	mov    %eax,%ebx
f0119604:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011960b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119610:	0f b6 c0             	movzbl %al,%eax
f0119613:	c1 e0 04             	shl    $0x4,%eax
f0119616:	89 c2                	mov    %eax,%edx
f0119618:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011961b:	01 d0                	add    %edx,%eax
f011961d:	48                   	dec    %eax
f011961e:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0119621:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119624:	ba 00 00 00 00       	mov    $0x0,%edx
f0119629:	f7 75 b0             	divl   -0x50(%ebp)
f011962c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011962f:	29 d0                	sub    %edx,%eax
f0119631:	01 d8                	add    %ebx,%eax
f0119633:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119638:	39 c1                	cmp    %eax,%ecx
f011963a:	0f 85 73 02 00 00    	jne    f01198b3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119640:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119646:	89 c1                	mov    %eax,%ecx
f0119648:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011964f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119654:	0f b6 d0             	movzbl %al,%edx
f0119657:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011965a:	01 d0                	add    %edx,%eax
f011965c:	48                   	dec    %eax
f011965d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0119660:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119663:	ba 00 00 00 00       	mov    $0x0,%edx
f0119668:	f7 75 a8             	divl   -0x58(%ebp)
f011966b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011966e:	29 d0                	sub    %edx,%eax
f0119670:	89 c3                	mov    %eax,%ebx
f0119672:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0119679:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011967e:	0f b6 c0             	movzbl %al,%eax
f0119681:	c1 e0 04             	shl    $0x4,%eax
f0119684:	89 c2                	mov    %eax,%edx
f0119686:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119689:	01 d0                	add    %edx,%eax
f011968b:	48                   	dec    %eax
f011968c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011968f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119692:	ba 00 00 00 00       	mov    $0x0,%edx
f0119697:	f7 75 a0             	divl   -0x60(%ebp)
f011969a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011969d:	29 d0                	sub    %edx,%eax
f011969f:	01 d8                	add    %ebx,%eax
f01196a1:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01196a6:	39 c1                	cmp    %eax,%ecx
f01196a8:	0f 85 05 02 00 00    	jne    f01198b3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01196ae:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f01196b4:	89 c1                	mov    %eax,%ecx
f01196b6:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01196bd:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01196c2:	0f b6 d0             	movzbl %al,%edx
f01196c5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01196c8:	01 d0                	add    %edx,%eax
f01196ca:	48                   	dec    %eax
f01196cb:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01196ce:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01196d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01196d6:	f7 75 98             	divl   -0x68(%ebp)
f01196d9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01196dc:	29 d0                	sub    %edx,%eax
f01196de:	89 c3                	mov    %eax,%ebx
f01196e0:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01196e7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01196ec:	0f b6 c0             	movzbl %al,%eax
f01196ef:	c1 e0 04             	shl    $0x4,%eax
f01196f2:	89 c2                	mov    %eax,%edx
f01196f4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01196f7:	01 d0                	add    %edx,%eax
f01196f9:	48                   	dec    %eax
f01196fa:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01196fd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119700:	ba 00 00 00 00       	mov    $0x0,%edx
f0119705:	f7 75 90             	divl   -0x70(%ebp)
f0119708:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011970b:	29 d0                	sub    %edx,%eax
f011970d:	01 d8                	add    %ebx,%eax
f011970f:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119714:	39 c1                	cmp    %eax,%ecx
f0119716:	0f 85 97 01 00 00    	jne    f01198b3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011971c:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119722:	89 c1                	mov    %eax,%ecx
f0119724:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011972b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119730:	0f b6 d0             	movzbl %al,%edx
f0119733:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119736:	01 d0                	add    %edx,%eax
f0119738:	48                   	dec    %eax
f0119739:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011973c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011973f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119744:	f7 75 88             	divl   -0x78(%ebp)
f0119747:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011974a:	29 d0                	sub    %edx,%eax
f011974c:	89 c3                	mov    %eax,%ebx
f011974e:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0119755:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011975a:	0f b6 c0             	movzbl %al,%eax
f011975d:	c1 e0 04             	shl    $0x4,%eax
f0119760:	89 c2                	mov    %eax,%edx
f0119762:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119765:	01 d0                	add    %edx,%eax
f0119767:	48                   	dec    %eax
f0119768:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011976e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119774:	ba 00 00 00 00       	mov    $0x0,%edx
f0119779:	f7 75 80             	divl   -0x80(%ebp)
f011977c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119782:	29 d0                	sub    %edx,%eax
f0119784:	01 d8                	add    %ebx,%eax
f0119786:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011978b:	39 c1                	cmp    %eax,%ecx
f011978d:	0f 85 20 01 00 00    	jne    f01198b3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119793:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119799:	89 c1                	mov    %eax,%ecx
f011979b:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01197a2:	10 00 00 
f01197a5:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01197aa:	0f b6 d0             	movzbl %al,%edx
f01197ad:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01197b3:	01 d0                	add    %edx,%eax
f01197b5:	48                   	dec    %eax
f01197b6:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01197bc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01197c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01197c7:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01197cd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01197d3:	29 d0                	sub    %edx,%eax
f01197d5:	89 c3                	mov    %eax,%ebx
f01197d7:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01197de:	10 00 00 
f01197e1:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01197e6:	0f b6 c0             	movzbl %al,%eax
f01197e9:	c1 e0 04             	shl    $0x4,%eax
f01197ec:	89 c2                	mov    %eax,%edx
f01197ee:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01197f4:	01 d0                	add    %edx,%eax
f01197f6:	48                   	dec    %eax
f01197f7:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01197fd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119803:	ba 00 00 00 00       	mov    $0x0,%edx
f0119808:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011980e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119814:	29 d0                	sub    %edx,%eax
f0119816:	01 d8                	add    %ebx,%eax
f0119818:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011981d:	39 c1                	cmp    %eax,%ecx
f011981f:	0f 85 8e 00 00 00    	jne    f01198b3 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119825:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011982b:	89 c1                	mov    %eax,%ecx
f011982d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119834:	10 00 00 
f0119837:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011983c:	0f b6 d0             	movzbl %al,%edx
f011983f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119845:	01 d0                	add    %edx,%eax
f0119847:	48                   	dec    %eax
f0119848:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011984e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119854:	ba 00 00 00 00       	mov    $0x0,%edx
f0119859:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011985f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119865:	29 d0                	sub    %edx,%eax
f0119867:	89 c3                	mov    %eax,%ebx
f0119869:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119870:	10 00 00 
f0119873:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119878:	0f b6 c0             	movzbl %al,%eax
f011987b:	c1 e0 04             	shl    $0x4,%eax
f011987e:	89 c2                	mov    %eax,%edx
f0119880:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119886:	01 d0                	add    %edx,%eax
f0119888:	48                   	dec    %eax
f0119889:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011988f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119895:	ba 00 00 00 00       	mov    $0x0,%edx
f011989a:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01198a0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01198a6:	29 d0                	sub    %edx,%eax
f01198a8:	01 d8                	add    %ebx,%eax
f01198aa:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01198af:	39 c1                	cmp    %eax,%ecx
f01198b1:	74 17                	je     f01198ca <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01198b3:	83 ec 04             	sub    $0x4,%esp
f01198b6:	68 88 93 13 f0       	push   $0xf0139388
f01198bb:	68 03 01 00 00       	push   $0x103
f01198c0:	68 0e 91 13 f0       	push   $0xf013910e
f01198c5:	e8 e6 68 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198ca:	e8 57 ad fe ff       	call   f0104626 <pf_calculate_free_frames>
f01198cf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198d2:	74 17                	je     f01198eb <test_kmalloc_nextfit+0x506>
f01198d4:	83 ec 04             	sub    $0x4,%esp
f01198d7:	68 28 91 13 f0       	push   $0xf0139128
f01198dc:	68 05 01 00 00       	push   $0x105
f01198e1:	68 0e 91 13 f0       	push   $0xf013910e
f01198e6:	e8 c5 68 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01198eb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01198ee:	e8 8d 30 ff ff       	call   f010c980 <sys_calculate_free_frames>
f01198f3:	29 c3                	sub    %eax,%ebx
f01198f5:	89 d9                	mov    %ebx,%ecx
f01198f7:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01198fe:	10 00 00 
f0119901:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119906:	0f b6 d0             	movzbl %al,%edx
f0119909:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011990f:	01 d0                	add    %edx,%eax
f0119911:	48                   	dec    %eax
f0119912:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0119918:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011991e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119923:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119929:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011992f:	29 d0                	sub    %edx,%eax
f0119931:	89 c3                	mov    %eax,%ebx
f0119933:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011993a:	10 00 00 
f011993d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119942:	0f b6 c0             	movzbl %al,%eax
f0119945:	c1 e0 04             	shl    $0x4,%eax
f0119948:	89 c2                	mov    %eax,%edx
f011994a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119950:	01 d0                	add    %edx,%eax
f0119952:	48                   	dec    %eax
f0119953:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0119959:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011995f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119964:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011996a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119970:	29 d0                	sub    %edx,%eax
f0119972:	01 d8                	add    %ebx,%eax
f0119974:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119979:	29 c2                	sub    %eax,%edx
f011997b:	89 d0                	mov    %edx,%eax
f011997d:	c1 e8 0c             	shr    $0xc,%eax
f0119980:	39 c1                	cmp    %eax,%ecx
f0119982:	74 17                	je     f011999b <test_kmalloc_nextfit+0x5b6>
f0119984:	83 ec 04             	sub    $0x4,%esp
f0119987:	68 cb 93 13 f0       	push   $0xf01393cb
f011998c:	68 06 01 00 00       	push   $0x106
f0119991:	68 0e 91 13 f0       	push   $0xf013910e
f0119996:	e8 15 68 fe ff       	call   f01001b0 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f011999b:	e8 86 ac fe ff       	call   f0104626 <pf_calculate_free_frames>
f01199a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01199a3:	e8 d8 2f ff ff       	call   f010c980 <sys_calculate_free_frames>
f01199a8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01199ab:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f01199b1:	83 ec 0c             	sub    $0xc,%esp
f01199b4:	50                   	push   %eax
f01199b5:	e8 61 e5 fe ff       	call   f0107f1b <kfree>
f01199ba:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01199bd:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f01199c3:	83 ec 0c             	sub    $0xc,%esp
f01199c6:	50                   	push   %eax
f01199c7:	e8 4f e5 fe ff       	call   f0107f1b <kfree>
f01199cc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01199cf:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f01199d5:	83 ec 0c             	sub    $0xc,%esp
f01199d8:	50                   	push   %eax
f01199d9:	e8 3d e5 fe ff       	call   f0107f1b <kfree>
f01199de:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01199e1:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f01199e7:	83 ec 0c             	sub    $0xc,%esp
f01199ea:	50                   	push   %eax
f01199eb:	e8 2b e5 fe ff       	call   f0107f1b <kfree>
f01199f0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f01199f3:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f01199f9:	83 ec 0c             	sub    $0xc,%esp
f01199fc:	50                   	push   %eax
f01199fd:	e8 19 e5 fe ff       	call   f0107f1b <kfree>
f0119a02:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119a05:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f0119a0b:	83 ec 0c             	sub    $0xc,%esp
f0119a0e:	50                   	push   %eax
f0119a0f:	e8 07 e5 fe ff       	call   f0107f1b <kfree>
f0119a14:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119a17:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f0119a1d:	83 ec 0c             	sub    $0xc,%esp
f0119a20:	50                   	push   %eax
f0119a21:	e8 f5 e4 fe ff       	call   f0107f1b <kfree>
f0119a26:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119a29:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119a2f:	83 ec 0c             	sub    $0xc,%esp
f0119a32:	50                   	push   %eax
f0119a33:	e8 e3 e4 fe ff       	call   f0107f1b <kfree>
f0119a38:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119a3b:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119a41:	83 ec 0c             	sub    $0xc,%esp
f0119a44:	50                   	push   %eax
f0119a45:	e8 d1 e4 fe ff       	call   f0107f1b <kfree>
f0119a4a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0119a4d:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119a53:	83 ec 0c             	sub    $0xc,%esp
f0119a56:	50                   	push   %eax
f0119a57:	e8 bf e4 fe ff       	call   f0107f1b <kfree>
f0119a5c:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a5f:	e8 c2 ab fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119a64:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119a67:	74 17                	je     f0119a80 <test_kmalloc_nextfit+0x69b>
f0119a69:	83 ec 04             	sub    $0x4,%esp
f0119a6c:	68 28 91 13 f0       	push   $0xf0139128
f0119a71:	68 17 01 00 00       	push   $0x117
f0119a76:	68 0e 91 13 f0       	push   $0xf013910e
f0119a7b:	e8 30 67 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119a80:	e8 fb 2e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119a85:	89 c2                	mov    %eax,%edx
f0119a87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119a8a:	89 d1                	mov    %edx,%ecx
f0119a8c:	29 c1                	sub    %eax,%ecx
f0119a8e:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119a95:	10 00 00 
f0119a98:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119a9d:	0f b6 d0             	movzbl %al,%edx
f0119aa0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119aa6:	01 d0                	add    %edx,%eax
f0119aa8:	48                   	dec    %eax
f0119aa9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119aaf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119ab5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aba:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119ac0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119ac6:	29 d0                	sub    %edx,%eax
f0119ac8:	89 c3                	mov    %eax,%ebx
f0119aca:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119ad1:	10 00 00 
f0119ad4:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119ad9:	0f b6 c0             	movzbl %al,%eax
f0119adc:	c1 e0 04             	shl    $0x4,%eax
f0119adf:	89 c2                	mov    %eax,%edx
f0119ae1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119ae7:	01 d0                	add    %edx,%eax
f0119ae9:	48                   	dec    %eax
f0119aea:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119af0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119af6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119afb:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119b01:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119b07:	29 d0                	sub    %edx,%eax
f0119b09:	01 d8                	add    %ebx,%eax
f0119b0b:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119b10:	29 c2                	sub    %eax,%edx
f0119b12:	89 d0                	mov    %edx,%eax
f0119b14:	c1 e8 0c             	shr    $0xc,%eax
f0119b17:	39 c1                	cmp    %eax,%ecx
f0119b19:	74 17                	je     f0119b32 <test_kmalloc_nextfit+0x74d>
f0119b1b:	83 ec 04             	sub    $0x4,%esp
f0119b1e:	68 dc 93 13 f0       	push   $0xf01393dc
f0119b23:	68 18 01 00 00       	push   $0x118
f0119b28:	68 0e 91 13 f0       	push   $0xf013910e
f0119b2d:	e8 7e 66 fe ff       	call   f01001b0 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119b32:	e8 ef aa fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119b37:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b3a:	e8 41 2e ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119b3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119b42:	83 ec 0c             	sub    $0xc,%esp
f0119b45:	68 00 fc 0f 00       	push   $0xffc00
f0119b4a:	e8 b2 e3 fe ff       	call   f0107f01 <kmalloc>
f0119b4f:	83 c4 10             	add    $0x10,%esp
f0119b52:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119b58:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119b5f:	10 00 00 
f0119b62:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119b67:	0f b6 d0             	movzbl %al,%edx
f0119b6a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119b70:	01 d0                	add    %edx,%eax
f0119b72:	48                   	dec    %eax
f0119b73:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119b79:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119b7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b84:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119b8a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119b90:	29 d0                	sub    %edx,%eax
f0119b92:	89 c1                	mov    %eax,%ecx
f0119b94:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119b9b:	10 00 00 
f0119b9e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119ba3:	0f b6 c0             	movzbl %al,%eax
f0119ba6:	c1 e0 04             	shl    $0x4,%eax
f0119ba9:	89 c2                	mov    %eax,%edx
f0119bab:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119bb1:	01 d0                	add    %edx,%eax
f0119bb3:	48                   	dec    %eax
f0119bb4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119bba:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119bc0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bc5:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119bcb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119bd1:	29 d0                	sub    %edx,%eax
f0119bd3:	01 c8                	add    %ecx,%eax
f0119bd5:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119bdb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119be1:	39 c2                	cmp    %eax,%edx
f0119be3:	74 17                	je     f0119bfc <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f0119be5:	83 ec 04             	sub    $0x4,%esp
f0119be8:	68 1c 94 13 f0       	push   $0xf013941c
f0119bed:	68 1f 01 00 00       	push   $0x11f
f0119bf2:	68 0e 91 13 f0       	push   $0xf013910e
f0119bf7:	e8 b4 65 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bfc:	e8 25 aa fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119c01:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c04:	74 17                	je     f0119c1d <test_kmalloc_nextfit+0x838>
f0119c06:	83 ec 04             	sub    $0x4,%esp
f0119c09:	68 28 91 13 f0       	push   $0xf0139128
f0119c0e:	68 20 01 00 00       	push   $0x120
f0119c13:	68 0e 91 13 f0       	push   $0xf013910e
f0119c18:	e8 93 65 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119c1d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c20:	e8 5b 2d ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119c25:	29 c3                	sub    %eax,%ebx
f0119c27:	89 d8                	mov    %ebx,%eax
f0119c29:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119c2e:	74 17                	je     f0119c47 <test_kmalloc_nextfit+0x862>
f0119c30:	83 ec 04             	sub    $0x4,%esp
f0119c33:	68 cb 93 13 f0       	push   $0xf01393cb
f0119c38:	68 21 01 00 00       	push   $0x121
f0119c3d:	68 0e 91 13 f0       	push   $0xf013910e
f0119c42:	e8 69 65 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c47:	e8 da a9 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119c4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c4f:	e8 2c 2d ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119c57:	83 ec 0c             	sub    $0xc,%esp
f0119c5a:	68 00 04 00 00       	push   $0x400
f0119c5f:	e8 9d e2 fe ff       	call   f0107f01 <kmalloc>
f0119c64:	83 c4 10             	add    $0x10,%esp
f0119c67:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119c6d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119c74:	10 00 00 
f0119c77:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119c7c:	0f b6 d0             	movzbl %al,%edx
f0119c7f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119c85:	01 d0                	add    %edx,%eax
f0119c87:	48                   	dec    %eax
f0119c88:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119c8e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119c94:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c99:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119c9f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119ca5:	29 d0                	sub    %edx,%eax
f0119ca7:	89 c1                	mov    %eax,%ecx
f0119ca9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119cb0:	10 00 00 
f0119cb3:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119cb8:	0f b6 c0             	movzbl %al,%eax
f0119cbb:	c1 e0 04             	shl    $0x4,%eax
f0119cbe:	89 c2                	mov    %eax,%edx
f0119cc0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119cc6:	01 d0                	add    %edx,%eax
f0119cc8:	48                   	dec    %eax
f0119cc9:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119ccf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119cd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cda:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119ce0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119ce6:	29 d0                	sub    %edx,%eax
f0119ce8:	01 c8                	add    %ecx,%eax
f0119cea:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119cf0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119cf6:	39 c2                	cmp    %eax,%edx
f0119cf8:	74 17                	je     f0119d11 <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f0119cfa:	83 ec 04             	sub    $0x4,%esp
f0119cfd:	68 1c 94 13 f0       	push   $0xf013941c
f0119d02:	68 27 01 00 00       	push   $0x127
f0119d07:	68 0e 91 13 f0       	push   $0xf013910e
f0119d0c:	e8 9f 64 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d11:	e8 10 a9 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119d16:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d19:	74 17                	je     f0119d32 <test_kmalloc_nextfit+0x94d>
f0119d1b:	83 ec 04             	sub    $0x4,%esp
f0119d1e:	68 28 91 13 f0       	push   $0xf0139128
f0119d23:	68 28 01 00 00       	push   $0x128
f0119d28:	68 0e 91 13 f0       	push   $0xf013910e
f0119d2d:	e8 7e 64 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119d32:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d35:	e8 46 2c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119d3a:	29 c3                	sub    %eax,%ebx
f0119d3c:	89 d8                	mov    %ebx,%eax
f0119d3e:	83 f8 01             	cmp    $0x1,%eax
f0119d41:	74 17                	je     f0119d5a <test_kmalloc_nextfit+0x975>
f0119d43:	83 ec 04             	sub    $0x4,%esp
f0119d46:	68 cb 93 13 f0       	push   $0xf01393cb
f0119d4b:	68 29 01 00 00       	push   $0x129
f0119d50:	68 0e 91 13 f0       	push   $0xf013910e
f0119d55:	e8 56 64 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d5a:	e8 c7 a8 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119d5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d62:	e8 19 2c ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119d67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119d6a:	83 ec 0c             	sub    $0xc,%esp
f0119d6d:	68 00 00 50 00       	push   $0x500000
f0119d72:	e8 8a e1 fe ff       	call   f0107f01 <kmalloc>
f0119d77:	83 c4 10             	add    $0x10,%esp
f0119d7a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119d80:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119d87:	10 00 00 
f0119d8a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119d8f:	0f b6 d0             	movzbl %al,%edx
f0119d92:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119d98:	01 d0                	add    %edx,%eax
f0119d9a:	48                   	dec    %eax
f0119d9b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119da1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119da7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dac:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0119db2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119db8:	29 d0                	sub    %edx,%eax
f0119dba:	89 c1                	mov    %eax,%ecx
f0119dbc:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119dc3:	10 00 00 
f0119dc6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119dcb:	0f b6 c0             	movzbl %al,%eax
f0119dce:	c1 e0 04             	shl    $0x4,%eax
f0119dd1:	89 c2                	mov    %eax,%edx
f0119dd3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119dd9:	01 d0                	add    %edx,%eax
f0119ddb:	48                   	dec    %eax
f0119ddc:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119de2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119de8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ded:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119df3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119df9:	29 d0                	sub    %edx,%eax
f0119dfb:	01 c8                	add    %ecx,%eax
f0119dfd:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119e03:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119e09:	39 c2                	cmp    %eax,%edx
f0119e0b:	74 17                	je     f0119e24 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f0119e0d:	83 ec 04             	sub    $0x4,%esp
f0119e10:	68 1c 94 13 f0       	push   $0xf013941c
f0119e15:	68 2f 01 00 00       	push   $0x12f
f0119e1a:	68 0e 91 13 f0       	push   $0xf013910e
f0119e1f:	e8 8c 63 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e24:	e8 fd a7 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119e29:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e2c:	74 17                	je     f0119e45 <test_kmalloc_nextfit+0xa60>
f0119e2e:	83 ec 04             	sub    $0x4,%esp
f0119e31:	68 28 91 13 f0       	push   $0xf0139128
f0119e36:	68 30 01 00 00       	push   $0x130
f0119e3b:	68 0e 91 13 f0       	push   $0xf013910e
f0119e40:	e8 6b 63 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119e45:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e48:	e8 33 2b ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119e4d:	29 c3                	sub    %eax,%ebx
f0119e4f:	89 d8                	mov    %ebx,%eax
f0119e51:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119e56:	74 17                	je     f0119e6f <test_kmalloc_nextfit+0xa8a>
f0119e58:	83 ec 04             	sub    $0x4,%esp
f0119e5b:	68 cb 93 13 f0       	push   $0xf01393cb
f0119e60:	68 31 01 00 00       	push   $0x131
f0119e65:	68 0e 91 13 f0       	push   $0xf013910e
f0119e6a:	e8 41 63 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119e6f:	e8 b2 a7 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119e74:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119e77:	e8 04 2b ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119e7f:	83 ec 0c             	sub    $0xc,%esp
f0119e82:	68 00 00 10 00       	push   $0x100000
f0119e87:	e8 75 e0 fe ff       	call   f0107f01 <kmalloc>
f0119e8c:	83 c4 10             	add    $0x10,%esp
f0119e8f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119e95:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0119e9c:	10 00 00 
f0119e9f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119ea4:	0f b6 d0             	movzbl %al,%edx
f0119ea7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119ead:	01 d0                	add    %edx,%eax
f0119eaf:	48                   	dec    %eax
f0119eb0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0119eb6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119ebc:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ec1:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0119ec7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119ecd:	29 d0                	sub    %edx,%eax
f0119ecf:	89 c1                	mov    %eax,%ecx
f0119ed1:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0119ed8:	10 00 00 
f0119edb:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0119ee0:	0f b6 c0             	movzbl %al,%eax
f0119ee3:	c1 e0 04             	shl    $0x4,%eax
f0119ee6:	89 c2                	mov    %eax,%edx
f0119ee8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119eee:	01 d0                	add    %edx,%eax
f0119ef0:	48                   	dec    %eax
f0119ef1:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0119ef7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119efd:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f02:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0119f08:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119f0e:	29 d0                	sub    %edx,%eax
f0119f10:	01 c8                	add    %ecx,%eax
f0119f12:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119f18:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119f1e:	39 c2                	cmp    %eax,%edx
f0119f20:	74 17                	je     f0119f39 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f0119f22:	83 ec 04             	sub    $0x4,%esp
f0119f25:	68 1c 94 13 f0       	push   $0xf013941c
f0119f2a:	68 37 01 00 00       	push   $0x137
f0119f2f:	68 0e 91 13 f0       	push   $0xf013910e
f0119f34:	e8 77 62 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f39:	e8 e8 a6 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119f3e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119f41:	74 17                	je     f0119f5a <test_kmalloc_nextfit+0xb75>
f0119f43:	83 ec 04             	sub    $0x4,%esp
f0119f46:	68 28 91 13 f0       	push   $0xf0139128
f0119f4b:	68 38 01 00 00       	push   $0x138
f0119f50:	68 0e 91 13 f0       	push   $0xf013910e
f0119f55:	e8 56 62 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119f5a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119f5d:	e8 1e 2a ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119f62:	29 c3                	sub    %eax,%ebx
f0119f64:	89 d8                	mov    %ebx,%eax
f0119f66:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119f6b:	74 17                	je     f0119f84 <test_kmalloc_nextfit+0xb9f>
f0119f6d:	83 ec 04             	sub    $0x4,%esp
f0119f70:	68 cb 93 13 f0       	push   $0xf01393cb
f0119f75:	68 39 01 00 00       	push   $0x139
f0119f7a:	68 0e 91 13 f0       	push   $0xf013910e
f0119f7f:	e8 2c 62 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119f84:	e8 9d a6 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119f89:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f8c:	e8 ef 29 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119f91:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119f94:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119f9a:	83 ec 0c             	sub    $0xc,%esp
f0119f9d:	50                   	push   %eax
f0119f9e:	e8 78 df fe ff       	call   f0107f1b <kfree>
f0119fa3:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fa6:	e8 7b a6 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119fab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fae:	74 17                	je     f0119fc7 <test_kmalloc_nextfit+0xbe2>
f0119fb0:	83 ec 04             	sub    $0x4,%esp
f0119fb3:	68 28 91 13 f0       	push   $0xf0139128
f0119fb8:	68 3e 01 00 00       	push   $0x13e
f0119fbd:	68 0e 91 13 f0       	push   $0xf013910e
f0119fc2:	e8 e9 61 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119fc7:	e8 b4 29 ff ff       	call   f010c980 <sys_calculate_free_frames>
f0119fcc:	89 c2                	mov    %eax,%edx
f0119fce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119fd1:	29 c2                	sub    %eax,%edx
f0119fd3:	89 d0                	mov    %edx,%eax
f0119fd5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119fda:	74 17                	je     f0119ff3 <test_kmalloc_nextfit+0xc0e>
f0119fdc:	83 ec 04             	sub    $0x4,%esp
f0119fdf:	68 dc 93 13 f0       	push   $0xf01393dc
f0119fe4:	68 3f 01 00 00       	push   $0x13f
f0119fe9:	68 0e 91 13 f0       	push   $0xf013910e
f0119fee:	e8 bd 61 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ff3:	e8 2e a6 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0119ff8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ffb:	e8 80 29 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a000:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a003:	83 ec 0c             	sub    $0xc,%esp
f011a006:	68 00 04 00 00       	push   $0x400
f011a00b:	e8 f1 de fe ff       	call   f0107f01 <kmalloc>
f011a010:	83 c4 10             	add    $0x10,%esp
f011a013:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a019:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a020:	10 00 00 
f011a023:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a028:	0f b6 d0             	movzbl %al,%edx
f011a02b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a031:	01 d0                	add    %edx,%eax
f011a033:	48                   	dec    %eax
f011a034:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a03a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a040:	ba 00 00 00 00       	mov    $0x0,%edx
f011a045:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a04b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a051:	29 d0                	sub    %edx,%eax
f011a053:	89 c1                	mov    %eax,%ecx
f011a055:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a05c:	10 00 00 
f011a05f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a064:	0f b6 c0             	movzbl %al,%eax
f011a067:	c1 e0 04             	shl    $0x4,%eax
f011a06a:	89 c2                	mov    %eax,%edx
f011a06c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a072:	01 d0                	add    %edx,%eax
f011a074:	48                   	dec    %eax
f011a075:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a07b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a081:	ba 00 00 00 00       	mov    $0x0,%edx
f011a086:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a08c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a092:	29 d0                	sub    %edx,%eax
f011a094:	01 c8                	add    %ecx,%eax
f011a096:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a09c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a0a2:	39 c2                	cmp    %eax,%edx
f011a0a4:	74 17                	je     f011a0bd <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f011a0a6:	83 ec 04             	sub    $0x4,%esp
f011a0a9:	68 1c 94 13 f0       	push   $0xf013941c
f011a0ae:	68 45 01 00 00       	push   $0x145
f011a0b3:	68 0e 91 13 f0       	push   $0xf013910e
f011a0b8:	e8 f3 60 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a0bd:	e8 64 a5 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a0c2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a0c5:	74 17                	je     f011a0de <test_kmalloc_nextfit+0xcf9>
f011a0c7:	83 ec 04             	sub    $0x4,%esp
f011a0ca:	68 28 91 13 f0       	push   $0xf0139128
f011a0cf:	68 46 01 00 00       	push   $0x146
f011a0d4:	68 0e 91 13 f0       	push   $0xf013910e
f011a0d9:	e8 d2 60 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a0de:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a0e1:	e8 9a 28 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a0e6:	29 c3                	sub    %eax,%ebx
f011a0e8:	89 d8                	mov    %ebx,%eax
f011a0ea:	83 f8 01             	cmp    $0x1,%eax
f011a0ed:	74 17                	je     f011a106 <test_kmalloc_nextfit+0xd21>
f011a0ef:	83 ec 04             	sub    $0x4,%esp
f011a0f2:	68 cb 93 13 f0       	push   $0xf01393cb
f011a0f7:	68 47 01 00 00       	push   $0x147
f011a0fc:	68 0e 91 13 f0       	push   $0xf013910e
f011a101:	e8 aa 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a106:	e8 1b a5 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a10b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a10e:	e8 6d 28 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a113:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a116:	83 ec 0c             	sub    $0xc,%esp
f011a119:	68 00 e0 1f 00       	push   $0x1fe000
f011a11e:	e8 de dd fe ff       	call   f0107f01 <kmalloc>
f011a123:	83 c4 10             	add    $0x10,%esp
f011a126:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a12c:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a133:	10 00 00 
f011a136:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a13b:	0f b6 d0             	movzbl %al,%edx
f011a13e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a144:	01 d0                	add    %edx,%eax
f011a146:	48                   	dec    %eax
f011a147:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a14d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a153:	ba 00 00 00 00       	mov    $0x0,%edx
f011a158:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a15e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a164:	29 d0                	sub    %edx,%eax
f011a166:	89 c1                	mov    %eax,%ecx
f011a168:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a16f:	10 00 00 
f011a172:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a177:	0f b6 c0             	movzbl %al,%eax
f011a17a:	c1 e0 04             	shl    $0x4,%eax
f011a17d:	89 c2                	mov    %eax,%edx
f011a17f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a185:	01 d0                	add    %edx,%eax
f011a187:	48                   	dec    %eax
f011a188:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a18e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a194:	ba 00 00 00 00       	mov    $0x0,%edx
f011a199:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a19f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a1a5:	29 d0                	sub    %edx,%eax
f011a1a7:	01 c8                	add    %ecx,%eax
f011a1a9:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a1af:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a1b5:	39 c2                	cmp    %eax,%edx
f011a1b7:	74 17                	je     f011a1d0 <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f011a1b9:	83 ec 04             	sub    $0x4,%esp
f011a1bc:	68 1c 94 13 f0       	push   $0xf013941c
f011a1c1:	68 4d 01 00 00       	push   $0x14d
f011a1c6:	68 0e 91 13 f0       	push   $0xf013910e
f011a1cb:	e8 e0 5f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1d0:	e8 51 a4 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a1d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a1d8:	74 17                	je     f011a1f1 <test_kmalloc_nextfit+0xe0c>
f011a1da:	83 ec 04             	sub    $0x4,%esp
f011a1dd:	68 28 91 13 f0       	push   $0xf0139128
f011a1e2:	68 4e 01 00 00       	push   $0x14e
f011a1e7:	68 0e 91 13 f0       	push   $0xf013910e
f011a1ec:	e8 bf 5f fe ff       	call   f01001b0 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a1f1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a1f4:	e8 87 27 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a1f9:	29 c3                	sub    %eax,%ebx
f011a1fb:	89 d8                	mov    %ebx,%eax
f011a1fd:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a202:	74 17                	je     f011a21b <test_kmalloc_nextfit+0xe36>
f011a204:	83 ec 04             	sub    $0x4,%esp
f011a207:	68 cb 93 13 f0       	push   $0xf01393cb
f011a20c:	68 50 01 00 00       	push   $0x150
f011a211:	68 0e 91 13 f0       	push   $0xf013910e
f011a216:	e8 95 5f fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a21b:	e8 06 a4 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a220:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a223:	e8 58 27 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a228:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a22b:	83 ec 0c             	sub    $0xc,%esp
f011a22e:	68 00 00 08 00       	push   $0x80000
f011a233:	e8 c9 dc fe ff       	call   f0107f01 <kmalloc>
f011a238:	83 c4 10             	add    $0x10,%esp
f011a23b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a241:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a248:	10 00 00 
f011a24b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a250:	0f b6 d0             	movzbl %al,%edx
f011a253:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a259:	01 d0                	add    %edx,%eax
f011a25b:	48                   	dec    %eax
f011a25c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a262:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a268:	ba 00 00 00 00       	mov    $0x0,%edx
f011a26d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a273:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a279:	29 d0                	sub    %edx,%eax
f011a27b:	89 c1                	mov    %eax,%ecx
f011a27d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a284:	10 00 00 
f011a287:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a28c:	0f b6 c0             	movzbl %al,%eax
f011a28f:	c1 e0 04             	shl    $0x4,%eax
f011a292:	89 c2                	mov    %eax,%edx
f011a294:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a29a:	01 d0                	add    %edx,%eax
f011a29c:	48                   	dec    %eax
f011a29d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a2a3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a2a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2ae:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a2b4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a2ba:	29 d0                	sub    %edx,%eax
f011a2bc:	01 c8                	add    %ecx,%eax
f011a2be:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a2c4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a2ca:	39 c2                	cmp    %eax,%edx
f011a2cc:	74 17                	je     f011a2e5 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f011a2ce:	83 ec 04             	sub    $0x4,%esp
f011a2d1:	68 1c 94 13 f0       	push   $0xf013941c
f011a2d6:	68 56 01 00 00       	push   $0x156
f011a2db:	68 0e 91 13 f0       	push   $0xf013910e
f011a2e0:	e8 cb 5e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2e5:	e8 3c a3 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a2ea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a2ed:	74 17                	je     f011a306 <test_kmalloc_nextfit+0xf21>
f011a2ef:	83 ec 04             	sub    $0x4,%esp
f011a2f2:	68 28 91 13 f0       	push   $0xf0139128
f011a2f7:	68 57 01 00 00       	push   $0x157
f011a2fc:	68 0e 91 13 f0       	push   $0xf013910e
f011a301:	e8 aa 5e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a306:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a309:	e8 72 26 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a30e:	29 c3                	sub    %eax,%ebx
f011a310:	89 d8                	mov    %ebx,%eax
f011a312:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a317:	74 17                	je     f011a330 <test_kmalloc_nextfit+0xf4b>
f011a319:	83 ec 04             	sub    $0x4,%esp
f011a31c:	68 cb 93 13 f0       	push   $0xf01393cb
f011a321:	68 58 01 00 00       	push   $0x158
f011a326:	68 0e 91 13 f0       	push   $0xf013910e
f011a32b:	e8 80 5e fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a330:	83 ec 0c             	sub    $0xc,%esp
f011a333:	68 3c 94 13 f0       	push   $0xf013943c
f011a338:	e8 f4 6a fe ff       	call   f0100e31 <cprintf>
f011a33d:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a340:	e8 e1 a2 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a345:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a348:	e8 33 26 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a34d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a350:	83 ec 0c             	sub    $0xc,%esp
f011a353:	68 00 00 38 00       	push   $0x380000
f011a358:	e8 a4 db fe ff       	call   f0107f01 <kmalloc>
f011a35d:	83 c4 10             	add    $0x10,%esp
f011a360:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a366:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a36d:	10 00 00 
f011a370:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a375:	0f b6 d0             	movzbl %al,%edx
f011a378:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a37e:	01 d0                	add    %edx,%eax
f011a380:	48                   	dec    %eax
f011a381:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a387:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a38d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a392:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a398:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a39e:	29 d0                	sub    %edx,%eax
f011a3a0:	89 c1                	mov    %eax,%ecx
f011a3a2:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a3a9:	10 00 00 
f011a3ac:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a3b1:	0f b6 c0             	movzbl %al,%eax
f011a3b4:	c1 e0 04             	shl    $0x4,%eax
f011a3b7:	89 c2                	mov    %eax,%edx
f011a3b9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a3bf:	01 d0                	add    %edx,%eax
f011a3c1:	48                   	dec    %eax
f011a3c2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a3c8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a3ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3d3:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a3d9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a3df:	29 d0                	sub    %edx,%eax
f011a3e1:	01 c8                	add    %ecx,%eax
f011a3e3:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a3e9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a3ef:	39 c2                	cmp    %eax,%edx
f011a3f1:	74 17                	je     f011a40a <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f011a3f3:	83 ec 04             	sub    $0x4,%esp
f011a3f6:	68 1c 94 13 f0       	push   $0xf013941c
f011a3fb:	68 62 01 00 00       	push   $0x162
f011a400:	68 0e 91 13 f0       	push   $0xf013910e
f011a405:	e8 a6 5d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a40a:	e8 17 a2 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a40f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a412:	74 17                	je     f011a42b <test_kmalloc_nextfit+0x1046>
f011a414:	83 ec 04             	sub    $0x4,%esp
f011a417:	68 28 91 13 f0       	push   $0xf0139128
f011a41c:	68 63 01 00 00       	push   $0x163
f011a421:	68 0e 91 13 f0       	push   $0xf013910e
f011a426:	e8 85 5d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a42b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a42e:	e8 4d 25 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a433:	29 c3                	sub    %eax,%ebx
f011a435:	89 d8                	mov    %ebx,%eax
f011a437:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a43c:	74 17                	je     f011a455 <test_kmalloc_nextfit+0x1070>
f011a43e:	83 ec 04             	sub    $0x4,%esp
f011a441:	68 cb 93 13 f0       	push   $0xf01393cb
f011a446:	68 64 01 00 00       	push   $0x164
f011a44b:	68 0e 91 13 f0       	push   $0xf013910e
f011a450:	e8 5b 5d fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a455:	e8 cc a1 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a45a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a45d:	e8 1e 25 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a465:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f011a46b:	83 ec 0c             	sub    $0xc,%esp
f011a46e:	50                   	push   %eax
f011a46f:	e8 a7 da fe ff       	call   f0107f1b <kfree>
f011a474:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a477:	e8 aa a1 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a47c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a47f:	74 17                	je     f011a498 <test_kmalloc_nextfit+0x10b3>
f011a481:	83 ec 04             	sub    $0x4,%esp
f011a484:	68 28 91 13 f0       	push   $0xf0139128
f011a489:	68 69 01 00 00       	push   $0x169
f011a48e:	68 0e 91 13 f0       	push   $0xf013910e
f011a493:	e8 18 5d fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a498:	e8 e3 24 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a49d:	89 c2                	mov    %eax,%edx
f011a49f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a4a2:	29 c2                	sub    %eax,%edx
f011a4a4:	89 d0                	mov    %edx,%eax
f011a4a6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a4ab:	74 17                	je     f011a4c4 <test_kmalloc_nextfit+0x10df>
f011a4ad:	83 ec 04             	sub    $0x4,%esp
f011a4b0:	68 dc 93 13 f0       	push   $0xf01393dc
f011a4b5:	68 6a 01 00 00       	push   $0x16a
f011a4ba:	68 0e 91 13 f0       	push   $0xf013910e
f011a4bf:	e8 ec 5c fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a4c4:	e8 5d a1 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a4c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a4cc:	e8 af 24 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a4d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a4d4:	83 ec 0c             	sub    $0xc,%esp
f011a4d7:	68 00 fc 3f 00       	push   $0x3ffc00
f011a4dc:	e8 20 da fe ff       	call   f0107f01 <kmalloc>
f011a4e1:	83 c4 10             	add    $0x10,%esp
f011a4e4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a4ea:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011a4f1:	10 00 00 
f011a4f4:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a4f9:	0f b6 d0             	movzbl %al,%edx
f011a4fc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011a502:	01 d0                	add    %edx,%eax
f011a504:	48                   	dec    %eax
f011a505:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011a50b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a511:	ba 00 00 00 00       	mov    $0x0,%edx
f011a516:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011a51c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a522:	29 d0                	sub    %edx,%eax
f011a524:	89 c1                	mov    %eax,%ecx
f011a526:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011a52d:	10 00 00 
f011a530:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a535:	0f b6 c0             	movzbl %al,%eax
f011a538:	c1 e0 04             	shl    $0x4,%eax
f011a53b:	89 c2                	mov    %eax,%edx
f011a53d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011a543:	01 d0                	add    %edx,%eax
f011a545:	48                   	dec    %eax
f011a546:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011a54c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a552:	ba 00 00 00 00       	mov    $0x0,%edx
f011a557:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011a55d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a563:	29 d0                	sub    %edx,%eax
f011a565:	01 c8                	add    %ecx,%eax
f011a567:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a56d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a573:	39 c2                	cmp    %eax,%edx
f011a575:	74 17                	je     f011a58e <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f011a577:	83 ec 04             	sub    $0x4,%esp
f011a57a:	68 1c 94 13 f0       	push   $0xf013941c
f011a57f:	68 70 01 00 00       	push   $0x170
f011a584:	68 0e 91 13 f0       	push   $0xf013910e
f011a589:	e8 22 5c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a58e:	e8 93 a0 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a593:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a596:	74 17                	je     f011a5af <test_kmalloc_nextfit+0x11ca>
f011a598:	83 ec 04             	sub    $0x4,%esp
f011a59b:	68 28 91 13 f0       	push   $0xf0139128
f011a5a0:	68 71 01 00 00       	push   $0x171
f011a5a5:	68 0e 91 13 f0       	push   $0xf013910e
f011a5aa:	e8 01 5c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a5af:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a5b2:	e8 c9 23 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a5b7:	29 c3                	sub    %eax,%ebx
f011a5b9:	89 d8                	mov    %ebx,%eax
f011a5bb:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a5c0:	74 17                	je     f011a5d9 <test_kmalloc_nextfit+0x11f4>
f011a5c2:	83 ec 04             	sub    $0x4,%esp
f011a5c5:	68 cb 93 13 f0       	push   $0xf01393cb
f011a5ca:	68 72 01 00 00       	push   $0x172
f011a5cf:	68 0e 91 13 f0       	push   $0xf013910e
f011a5d4:	e8 d7 5b fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a5d9:	83 ec 0c             	sub    $0xc,%esp
f011a5dc:	68 78 94 13 f0       	push   $0xf0139478
f011a5e1:	e8 4b 68 fe ff       	call   f0100e31 <cprintf>
f011a5e6:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a5e9:	e8 38 a0 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a5ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a5f1:	e8 8a 23 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a5f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a5f9:	83 ec 0c             	sub    $0xc,%esp
f011a5fc:	68 00 00 60 00       	push   $0x600000
f011a601:	e8 fb d8 fe ff       	call   f0107f01 <kmalloc>
f011a606:	83 c4 10             	add    $0x10,%esp
f011a609:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f011a60f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a615:	85 c0                	test   %eax,%eax
f011a617:	74 17                	je     f011a630 <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f011a619:	83 ec 04             	sub    $0x4,%esp
f011a61c:	68 1c 94 13 f0       	push   $0xf013941c
f011a621:	68 7c 01 00 00       	push   $0x17c
f011a626:	68 0e 91 13 f0       	push   $0xf013910e
f011a62b:	e8 80 5b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a630:	e8 f1 9f fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a635:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a638:	74 17                	je     f011a651 <test_kmalloc_nextfit+0x126c>
f011a63a:	83 ec 04             	sub    $0x4,%esp
f011a63d:	68 28 91 13 f0       	push   $0xf0139128
f011a642:	68 7d 01 00 00       	push   $0x17d
f011a647:	68 0e 91 13 f0       	push   $0xf013910e
f011a64c:	e8 5f 5b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a651:	e8 2a 23 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a656:	89 c2                	mov    %eax,%edx
f011a658:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a65b:	39 c2                	cmp    %eax,%edx
f011a65d:	74 17                	je     f011a676 <test_kmalloc_nextfit+0x1291>
f011a65f:	83 ec 04             	sub    $0x4,%esp
f011a662:	68 cb 93 13 f0       	push   $0xf01393cb
f011a667:	68 7e 01 00 00       	push   $0x17e
f011a66c:	68 0e 91 13 f0       	push   $0xf013910e
f011a671:	e8 3a 5b fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a676:	83 ec 0c             	sub    $0xc,%esp
f011a679:	68 b0 94 13 f0       	push   $0xf01394b0
f011a67e:	e8 ae 67 fe ff       	call   f0100e31 <cprintf>
f011a683:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a686:	83 ec 0c             	sub    $0xc,%esp
f011a689:	68 ec 94 13 f0       	push   $0xf01394ec
f011a68e:	e8 9e 67 fe ff       	call   f0100e31 <cprintf>
f011a693:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a696:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a69b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a69e:	5b                   	pop    %ebx
f011a69f:	5f                   	pop    %edi
f011a6a0:	5d                   	pop    %ebp
f011a6a1:	c3                   	ret    

f011a6a2 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a6a2:	55                   	push   %ebp
f011a6a3:	89 e5                	mov    %esp,%ebp
f011a6a5:	57                   	push   %edi
f011a6a6:	53                   	push   %ebx
f011a6a7:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f011a6ad:	83 ec 0c             	sub    $0xc,%esp
f011a6b0:	68 50 90 13 f0       	push   $0xf0139050
f011a6b5:	e8 77 67 fe ff       	call   f0100e31 <cprintf>
f011a6ba:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a6bd:	83 ec 0c             	sub    $0xc,%esp
f011a6c0:	68 80 90 13 f0       	push   $0xf0139080
f011a6c5:	e8 67 67 fe ff       	call   f0100e31 <cprintf>
f011a6ca:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a6cd:	83 ec 0c             	sub    $0xc,%esp
f011a6d0:	68 50 90 13 f0       	push   $0xf0139050
f011a6d5:	e8 57 67 fe ff       	call   f0100e31 <cprintf>
f011a6da:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a6dd:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011a6e3:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a6e8:	b8 00 00 00 00       	mov    $0x0,%eax
f011a6ed:	89 d7                	mov    %edx,%edi
f011a6ef:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a6f1:	e8 8a 22 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a6f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a6f9:	e8 28 9f fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a6fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a701:	83 ec 0c             	sub    $0xc,%esp
f011a704:	68 00 fc 2f 00       	push   $0x2ffc00
f011a709:	e8 f3 d7 fe ff       	call   f0107f01 <kmalloc>
f011a70e:	83 c4 10             	add    $0x10,%esp
f011a711:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a717:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a71d:	89 c1                	mov    %eax,%ecx
f011a71f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a726:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a72b:	0f b6 d0             	movzbl %al,%edx
f011a72e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a731:	01 d0                	add    %edx,%eax
f011a733:	48                   	dec    %eax
f011a734:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a737:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a73a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a73f:	f7 75 ec             	divl   -0x14(%ebp)
f011a742:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a745:	29 d0                	sub    %edx,%eax
f011a747:	89 c3                	mov    %eax,%ebx
f011a749:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a750:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a755:	0f b6 c0             	movzbl %al,%eax
f011a758:	c1 e0 04             	shl    $0x4,%eax
f011a75b:	89 c2                	mov    %eax,%edx
f011a75d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a760:	01 d0                	add    %edx,%eax
f011a762:	48                   	dec    %eax
f011a763:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a766:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a769:	ba 00 00 00 00       	mov    $0x0,%edx
f011a76e:	f7 75 e4             	divl   -0x1c(%ebp)
f011a771:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a774:	29 d0                	sub    %edx,%eax
f011a776:	01 d8                	add    %ebx,%eax
f011a778:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a77d:	39 c1                	cmp    %eax,%ecx
f011a77f:	74 17                	je     f011a798 <test_kmalloc_bestfit1+0xf6>
f011a781:	83 ec 04             	sub    $0x4,%esp
f011a784:	68 28 95 13 f0       	push   $0xf0139528
f011a789:	68 98 01 00 00       	push   $0x198
f011a78e:	68 0e 91 13 f0       	push   $0xf013910e
f011a793:	e8 18 5a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a798:	e8 89 9e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a79d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a7a0:	74 17                	je     f011a7b9 <test_kmalloc_bestfit1+0x117>
f011a7a2:	83 ec 04             	sub    $0x4,%esp
f011a7a5:	68 28 91 13 f0       	push   $0xf0139128
f011a7aa:	68 99 01 00 00       	push   $0x199
f011a7af:	68 0e 91 13 f0       	push   $0xf013910e
f011a7b4:	e8 f7 59 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a7b9:	e8 c2 21 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a7be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a7c1:	29 c2                	sub    %eax,%edx
f011a7c3:	89 d0                	mov    %edx,%eax
f011a7c5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a7ca:	74 17                	je     f011a7e3 <test_kmalloc_bestfit1+0x141>
f011a7cc:	83 ec 04             	sub    $0x4,%esp
f011a7cf:	68 58 95 13 f0       	push   $0xf0139558
f011a7d4:	68 9a 01 00 00       	push   $0x19a
f011a7d9:	68 0e 91 13 f0       	push   $0xf013910e
f011a7de:	e8 cd 59 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a7e3:	e8 98 21 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a7e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a7eb:	e8 36 9e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a7f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a7f3:	83 ec 0c             	sub    $0xc,%esp
f011a7f6:	68 00 fc 2f 00       	push   $0x2ffc00
f011a7fb:	e8 01 d7 fe ff       	call   f0107f01 <kmalloc>
f011a800:	83 c4 10             	add    $0x10,%esp
f011a803:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a809:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a80f:	89 c1                	mov    %eax,%ecx
f011a811:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a818:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a81d:	0f b6 d0             	movzbl %al,%edx
f011a820:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a823:	01 d0                	add    %edx,%eax
f011a825:	48                   	dec    %eax
f011a826:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a829:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a82c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a831:	f7 75 dc             	divl   -0x24(%ebp)
f011a834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a837:	29 d0                	sub    %edx,%eax
f011a839:	89 c3                	mov    %eax,%ebx
f011a83b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a842:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a847:	0f b6 c0             	movzbl %al,%eax
f011a84a:	c1 e0 04             	shl    $0x4,%eax
f011a84d:	89 c2                	mov    %eax,%edx
f011a84f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a852:	01 d0                	add    %edx,%eax
f011a854:	48                   	dec    %eax
f011a855:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a858:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a85b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a860:	f7 75 d4             	divl   -0x2c(%ebp)
f011a863:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a866:	29 d0                	sub    %edx,%eax
f011a868:	01 d8                	add    %ebx,%eax
f011a86a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a86f:	39 c1                	cmp    %eax,%ecx
f011a871:	74 17                	je     f011a88a <test_kmalloc_bestfit1+0x1e8>
f011a873:	83 ec 04             	sub    $0x4,%esp
f011a876:	68 28 95 13 f0       	push   $0xf0139528
f011a87b:	68 a0 01 00 00       	push   $0x1a0
f011a880:	68 0e 91 13 f0       	push   $0xf013910e
f011a885:	e8 26 59 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a88a:	e8 97 9d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a88f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a892:	74 17                	je     f011a8ab <test_kmalloc_bestfit1+0x209>
f011a894:	83 ec 04             	sub    $0x4,%esp
f011a897:	68 28 91 13 f0       	push   $0xf0139128
f011a89c:	68 a1 01 00 00       	push   $0x1a1
f011a8a1:	68 0e 91 13 f0       	push   $0xf013910e
f011a8a6:	e8 05 59 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a8ab:	e8 d0 20 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a8b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a8b3:	29 c2                	sub    %eax,%edx
f011a8b5:	89 d0                	mov    %edx,%eax
f011a8b7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a8bc:	74 17                	je     f011a8d5 <test_kmalloc_bestfit1+0x233>
f011a8be:	83 ec 04             	sub    $0x4,%esp
f011a8c1:	68 58 95 13 f0       	push   $0xf0139558
f011a8c6:	68 a2 01 00 00       	push   $0x1a2
f011a8cb:	68 0e 91 13 f0       	push   $0xf013910e
f011a8d0:	e8 db 58 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a8d5:	e8 a6 20 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a8da:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a8dd:	e8 44 9d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a8e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a8e5:	83 ec 0c             	sub    $0xc,%esp
f011a8e8:	68 00 fc 1f 00       	push   $0x1ffc00
f011a8ed:	e8 0f d6 fe ff       	call   f0107f01 <kmalloc>
f011a8f2:	83 c4 10             	add    $0x10,%esp
f011a8f5:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a8fb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a901:	89 c1                	mov    %eax,%ecx
f011a903:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a90a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a90f:	0f b6 d0             	movzbl %al,%edx
f011a912:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a915:	01 d0                	add    %edx,%eax
f011a917:	48                   	dec    %eax
f011a918:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a91b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a91e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a923:	f7 75 cc             	divl   -0x34(%ebp)
f011a926:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a929:	29 d0                	sub    %edx,%eax
f011a92b:	89 c3                	mov    %eax,%ebx
f011a92d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a934:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011a939:	0f b6 c0             	movzbl %al,%eax
f011a93c:	c1 e0 04             	shl    $0x4,%eax
f011a93f:	89 c2                	mov    %eax,%edx
f011a941:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a944:	01 d0                	add    %edx,%eax
f011a946:	48                   	dec    %eax
f011a947:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a94a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a94d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a952:	f7 75 c4             	divl   -0x3c(%ebp)
f011a955:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a958:	29 d0                	sub    %edx,%eax
f011a95a:	01 d8                	add    %ebx,%eax
f011a95c:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a961:	39 c1                	cmp    %eax,%ecx
f011a963:	74 17                	je     f011a97c <test_kmalloc_bestfit1+0x2da>
f011a965:	83 ec 04             	sub    $0x4,%esp
f011a968:	68 28 95 13 f0       	push   $0xf0139528
f011a96d:	68 a8 01 00 00       	push   $0x1a8
f011a972:	68 0e 91 13 f0       	push   $0xf013910e
f011a977:	e8 34 58 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a97c:	e8 a5 9c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a981:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a984:	74 17                	je     f011a99d <test_kmalloc_bestfit1+0x2fb>
f011a986:	83 ec 04             	sub    $0x4,%esp
f011a989:	68 28 91 13 f0       	push   $0xf0139128
f011a98e:	68 a9 01 00 00       	push   $0x1a9
f011a993:	68 0e 91 13 f0       	push   $0xf013910e
f011a998:	e8 13 58 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a99d:	e8 de 1f ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a9a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a9a5:	29 c2                	sub    %eax,%edx
f011a9a7:	89 d0                	mov    %edx,%eax
f011a9a9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a9ae:	74 17                	je     f011a9c7 <test_kmalloc_bestfit1+0x325>
f011a9b0:	83 ec 04             	sub    $0x4,%esp
f011a9b3:	68 58 95 13 f0       	push   $0xf0139558
f011a9b8:	68 aa 01 00 00       	push   $0x1aa
f011a9bd:	68 0e 91 13 f0       	push   $0xf013910e
f011a9c2:	e8 e9 57 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a9c7:	e8 b4 1f ff ff       	call   f010c980 <sys_calculate_free_frames>
f011a9cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9cf:	e8 52 9c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011a9d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a9d7:	83 ec 0c             	sub    $0xc,%esp
f011a9da:	68 00 fc 1f 00       	push   $0x1ffc00
f011a9df:	e8 1d d5 fe ff       	call   f0107f01 <kmalloc>
f011a9e4:	83 c4 10             	add    $0x10,%esp
f011a9e7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a9ed:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a9f3:	89 c1                	mov    %eax,%ecx
f011a9f5:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a9fc:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011aa01:	0f b6 d0             	movzbl %al,%edx
f011aa04:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aa07:	01 d0                	add    %edx,%eax
f011aa09:	48                   	dec    %eax
f011aa0a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011aa0d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aa10:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa15:	f7 75 bc             	divl   -0x44(%ebp)
f011aa18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aa1b:	29 d0                	sub    %edx,%eax
f011aa1d:	89 c3                	mov    %eax,%ebx
f011aa1f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011aa26:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011aa2b:	0f b6 c0             	movzbl %al,%eax
f011aa2e:	c1 e0 04             	shl    $0x4,%eax
f011aa31:	89 c2                	mov    %eax,%edx
f011aa33:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011aa36:	01 d0                	add    %edx,%eax
f011aa38:	48                   	dec    %eax
f011aa39:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011aa3c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aa3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa44:	f7 75 b4             	divl   -0x4c(%ebp)
f011aa47:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aa4a:	29 d0                	sub    %edx,%eax
f011aa4c:	01 d8                	add    %ebx,%eax
f011aa4e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011aa53:	39 c1                	cmp    %eax,%ecx
f011aa55:	74 17                	je     f011aa6e <test_kmalloc_bestfit1+0x3cc>
f011aa57:	83 ec 04             	sub    $0x4,%esp
f011aa5a:	68 28 95 13 f0       	push   $0xf0139528
f011aa5f:	68 b0 01 00 00       	push   $0x1b0
f011aa64:	68 0e 91 13 f0       	push   $0xf013910e
f011aa69:	e8 42 57 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa6e:	e8 b3 9b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011aa73:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa76:	74 17                	je     f011aa8f <test_kmalloc_bestfit1+0x3ed>
f011aa78:	83 ec 04             	sub    $0x4,%esp
f011aa7b:	68 28 91 13 f0       	push   $0xf0139128
f011aa80:	68 b1 01 00 00       	push   $0x1b1
f011aa85:	68 0e 91 13 f0       	push   $0xf013910e
f011aa8a:	e8 21 57 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aa8f:	e8 ec 1e ff ff       	call   f010c980 <sys_calculate_free_frames>
f011aa94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa97:	29 c2                	sub    %eax,%edx
f011aa99:	89 d0                	mov    %edx,%eax
f011aa9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aaa0:	74 17                	je     f011aab9 <test_kmalloc_bestfit1+0x417>
f011aaa2:	83 ec 04             	sub    $0x4,%esp
f011aaa5:	68 58 95 13 f0       	push   $0xf0139558
f011aaaa:	68 b2 01 00 00       	push   $0x1b2
f011aaaf:	68 0e 91 13 f0       	push   $0xf013910e
f011aab4:	e8 f7 56 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011aab9:	e8 c2 1e ff ff       	call   f010c980 <sys_calculate_free_frames>
f011aabe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aac1:	e8 60 9b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011aac6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011aac9:	83 ec 0c             	sub    $0xc,%esp
f011aacc:	68 00 fc 0f 00       	push   $0xffc00
f011aad1:	e8 2b d4 fe ff       	call   f0107f01 <kmalloc>
f011aad6:	83 c4 10             	add    $0x10,%esp
f011aad9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011aadf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011aae5:	89 c1                	mov    %eax,%ecx
f011aae7:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011aaee:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011aaf3:	0f b6 d0             	movzbl %al,%edx
f011aaf6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011aaf9:	01 d0                	add    %edx,%eax
f011aafb:	48                   	dec    %eax
f011aafc:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011aaff:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab02:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab07:	f7 75 ac             	divl   -0x54(%ebp)
f011ab0a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab0d:	29 d0                	sub    %edx,%eax
f011ab0f:	89 c3                	mov    %eax,%ebx
f011ab11:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ab18:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ab1d:	0f b6 c0             	movzbl %al,%eax
f011ab20:	c1 e0 04             	shl    $0x4,%eax
f011ab23:	89 c2                	mov    %eax,%edx
f011ab25:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ab28:	01 d0                	add    %edx,%eax
f011ab2a:	48                   	dec    %eax
f011ab2b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ab2e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ab31:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab36:	f7 75 a4             	divl   -0x5c(%ebp)
f011ab39:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ab3c:	29 d0                	sub    %edx,%eax
f011ab3e:	01 d8                	add    %ebx,%eax
f011ab40:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011ab45:	39 c1                	cmp    %eax,%ecx
f011ab47:	74 17                	je     f011ab60 <test_kmalloc_bestfit1+0x4be>
f011ab49:	83 ec 04             	sub    $0x4,%esp
f011ab4c:	68 28 95 13 f0       	push   $0xf0139528
f011ab51:	68 b8 01 00 00       	push   $0x1b8
f011ab56:	68 0e 91 13 f0       	push   $0xf013910e
f011ab5b:	e8 50 56 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab60:	e8 c1 9a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ab65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab68:	74 17                	je     f011ab81 <test_kmalloc_bestfit1+0x4df>
f011ab6a:	83 ec 04             	sub    $0x4,%esp
f011ab6d:	68 28 91 13 f0       	push   $0xf0139128
f011ab72:	68 b9 01 00 00       	push   $0x1b9
f011ab77:	68 0e 91 13 f0       	push   $0xf013910e
f011ab7c:	e8 2f 56 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ab81:	e8 fa 1d ff ff       	call   f010c980 <sys_calculate_free_frames>
f011ab86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab89:	29 c2                	sub    %eax,%edx
f011ab8b:	89 d0                	mov    %edx,%eax
f011ab8d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ab92:	74 17                	je     f011abab <test_kmalloc_bestfit1+0x509>
f011ab94:	83 ec 04             	sub    $0x4,%esp
f011ab97:	68 58 95 13 f0       	push   $0xf0139558
f011ab9c:	68 ba 01 00 00       	push   $0x1ba
f011aba1:	68 0e 91 13 f0       	push   $0xf013910e
f011aba6:	e8 05 56 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011abab:	e8 d0 1d ff ff       	call   f010c980 <sys_calculate_free_frames>
f011abb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abb3:	e8 6e 9a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011abb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011abbb:	83 ec 0c             	sub    $0xc,%esp
f011abbe:	68 00 fc 0f 00       	push   $0xffc00
f011abc3:	e8 39 d3 fe ff       	call   f0107f01 <kmalloc>
f011abc8:	83 c4 10             	add    $0x10,%esp
f011abcb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011abd1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011abd7:	89 c1                	mov    %eax,%ecx
f011abd9:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011abe0:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011abe5:	0f b6 d0             	movzbl %al,%edx
f011abe8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011abeb:	01 d0                	add    %edx,%eax
f011abed:	48                   	dec    %eax
f011abee:	89 45 98             	mov    %eax,-0x68(%ebp)
f011abf1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011abf4:	ba 00 00 00 00       	mov    $0x0,%edx
f011abf9:	f7 75 9c             	divl   -0x64(%ebp)
f011abfc:	8b 45 98             	mov    -0x68(%ebp),%eax
f011abff:	29 d0                	sub    %edx,%eax
f011ac01:	89 c3                	mov    %eax,%ebx
f011ac03:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ac0a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ac0f:	0f b6 c0             	movzbl %al,%eax
f011ac12:	c1 e0 04             	shl    $0x4,%eax
f011ac15:	89 c2                	mov    %eax,%edx
f011ac17:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ac1a:	01 d0                	add    %edx,%eax
f011ac1c:	48                   	dec    %eax
f011ac1d:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ac20:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac23:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac28:	f7 75 94             	divl   -0x6c(%ebp)
f011ac2b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac2e:	29 d0                	sub    %edx,%eax
f011ac30:	01 d8                	add    %ebx,%eax
f011ac32:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ac37:	39 c1                	cmp    %eax,%ecx
f011ac39:	74 17                	je     f011ac52 <test_kmalloc_bestfit1+0x5b0>
f011ac3b:	83 ec 04             	sub    $0x4,%esp
f011ac3e:	68 28 95 13 f0       	push   $0xf0139528
f011ac43:	68 c0 01 00 00       	push   $0x1c0
f011ac48:	68 0e 91 13 f0       	push   $0xf013910e
f011ac4d:	e8 5e 55 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac52:	e8 cf 99 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ac57:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac5a:	74 17                	je     f011ac73 <test_kmalloc_bestfit1+0x5d1>
f011ac5c:	83 ec 04             	sub    $0x4,%esp
f011ac5f:	68 28 91 13 f0       	push   $0xf0139128
f011ac64:	68 c1 01 00 00       	push   $0x1c1
f011ac69:	68 0e 91 13 f0       	push   $0xf013910e
f011ac6e:	e8 3d 55 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ac73:	e8 08 1d ff ff       	call   f010c980 <sys_calculate_free_frames>
f011ac78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac7b:	29 c2                	sub    %eax,%edx
f011ac7d:	89 d0                	mov    %edx,%eax
f011ac7f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ac84:	74 17                	je     f011ac9d <test_kmalloc_bestfit1+0x5fb>
f011ac86:	83 ec 04             	sub    $0x4,%esp
f011ac89:	68 58 95 13 f0       	push   $0xf0139558
f011ac8e:	68 c2 01 00 00       	push   $0x1c2
f011ac93:	68 0e 91 13 f0       	push   $0xf013910e
f011ac98:	e8 13 55 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac9d:	e8 de 1c ff ff       	call   f010c980 <sys_calculate_free_frames>
f011aca2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aca5:	e8 7c 99 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011acaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011acad:	83 ec 0c             	sub    $0xc,%esp
f011acb0:	68 00 fc 0f 00       	push   $0xffc00
f011acb5:	e8 47 d2 fe ff       	call   f0107f01 <kmalloc>
f011acba:	83 c4 10             	add    $0x10,%esp
f011acbd:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011acc3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011acc9:	89 c1                	mov    %eax,%ecx
f011accb:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011acd2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011acd7:	0f b6 d0             	movzbl %al,%edx
f011acda:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011acdd:	01 d0                	add    %edx,%eax
f011acdf:	48                   	dec    %eax
f011ace0:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ace3:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ace6:	ba 00 00 00 00       	mov    $0x0,%edx
f011aceb:	f7 75 8c             	divl   -0x74(%ebp)
f011acee:	8b 45 88             	mov    -0x78(%ebp),%eax
f011acf1:	29 d0                	sub    %edx,%eax
f011acf3:	89 c3                	mov    %eax,%ebx
f011acf5:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011acfc:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ad01:	0f b6 c0             	movzbl %al,%eax
f011ad04:	c1 e0 04             	shl    $0x4,%eax
f011ad07:	89 c2                	mov    %eax,%edx
f011ad09:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ad0c:	01 d0                	add    %edx,%eax
f011ad0e:	48                   	dec    %eax
f011ad0f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ad12:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad15:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad1a:	f7 75 84             	divl   -0x7c(%ebp)
f011ad1d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad20:	29 d0                	sub    %edx,%eax
f011ad22:	01 d8                	add    %ebx,%eax
f011ad24:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011ad29:	39 c1                	cmp    %eax,%ecx
f011ad2b:	74 17                	je     f011ad44 <test_kmalloc_bestfit1+0x6a2>
f011ad2d:	83 ec 04             	sub    $0x4,%esp
f011ad30:	68 28 95 13 f0       	push   $0xf0139528
f011ad35:	68 c8 01 00 00       	push   $0x1c8
f011ad3a:	68 0e 91 13 f0       	push   $0xf013910e
f011ad3f:	e8 6c 54 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad44:	e8 dd 98 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ad49:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad4c:	74 17                	je     f011ad65 <test_kmalloc_bestfit1+0x6c3>
f011ad4e:	83 ec 04             	sub    $0x4,%esp
f011ad51:	68 28 91 13 f0       	push   $0xf0139128
f011ad56:	68 c9 01 00 00       	push   $0x1c9
f011ad5b:	68 0e 91 13 f0       	push   $0xf013910e
f011ad60:	e8 4b 54 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ad65:	e8 16 1c ff ff       	call   f010c980 <sys_calculate_free_frames>
f011ad6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad6d:	29 c2                	sub    %eax,%edx
f011ad6f:	89 d0                	mov    %edx,%eax
f011ad71:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ad76:	74 17                	je     f011ad8f <test_kmalloc_bestfit1+0x6ed>
f011ad78:	83 ec 04             	sub    $0x4,%esp
f011ad7b:	68 58 95 13 f0       	push   $0xf0139558
f011ad80:	68 ca 01 00 00       	push   $0x1ca
f011ad85:	68 0e 91 13 f0       	push   $0xf013910e
f011ad8a:	e8 21 54 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad8f:	e8 ec 1b ff ff       	call   f010c980 <sys_calculate_free_frames>
f011ad94:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad97:	e8 8a 98 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ad9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011ad9f:	83 ec 0c             	sub    $0xc,%esp
f011ada2:	68 00 fc 0f 00       	push   $0xffc00
f011ada7:	e8 55 d1 fe ff       	call   f0107f01 <kmalloc>
f011adac:	83 c4 10             	add    $0x10,%esp
f011adaf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011adb5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011adbb:	89 c1                	mov    %eax,%ecx
f011adbd:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011adc4:	10 00 00 
f011adc7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011adcc:	0f b6 d0             	movzbl %al,%edx
f011adcf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011add5:	01 d0                	add    %edx,%eax
f011add7:	48                   	dec    %eax
f011add8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011adde:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ade4:	ba 00 00 00 00       	mov    $0x0,%edx
f011ade9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011adef:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011adf5:	29 d0                	sub    %edx,%eax
f011adf7:	89 c3                	mov    %eax,%ebx
f011adf9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ae00:	10 00 00 
f011ae03:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ae08:	0f b6 c0             	movzbl %al,%eax
f011ae0b:	c1 e0 04             	shl    $0x4,%eax
f011ae0e:	89 c2                	mov    %eax,%edx
f011ae10:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ae16:	01 d0                	add    %edx,%eax
f011ae18:	48                   	dec    %eax
f011ae19:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ae1f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae25:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae2a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ae30:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae36:	29 d0                	sub    %edx,%eax
f011ae38:	01 d8                	add    %ebx,%eax
f011ae3a:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011ae3f:	39 c1                	cmp    %eax,%ecx
f011ae41:	74 17                	je     f011ae5a <test_kmalloc_bestfit1+0x7b8>
f011ae43:	83 ec 04             	sub    $0x4,%esp
f011ae46:	68 28 95 13 f0       	push   $0xf0139528
f011ae4b:	68 d0 01 00 00       	push   $0x1d0
f011ae50:	68 0e 91 13 f0       	push   $0xf013910e
f011ae55:	e8 56 53 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae5a:	e8 c7 97 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ae5f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae62:	74 17                	je     f011ae7b <test_kmalloc_bestfit1+0x7d9>
f011ae64:	83 ec 04             	sub    $0x4,%esp
f011ae67:	68 28 91 13 f0       	push   $0xf0139128
f011ae6c:	68 d1 01 00 00       	push   $0x1d1
f011ae71:	68 0e 91 13 f0       	push   $0xf013910e
f011ae76:	e8 35 53 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ae7b:	e8 00 1b ff ff       	call   f010c980 <sys_calculate_free_frames>
f011ae80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae83:	29 c2                	sub    %eax,%edx
f011ae85:	89 d0                	mov    %edx,%eax
f011ae87:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ae8c:	74 17                	je     f011aea5 <test_kmalloc_bestfit1+0x803>
f011ae8e:	83 ec 04             	sub    $0x4,%esp
f011ae91:	68 58 95 13 f0       	push   $0xf0139558
f011ae96:	68 d2 01 00 00       	push   $0x1d2
f011ae9b:	68 0e 91 13 f0       	push   $0xf013910e
f011aea0:	e8 0b 53 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aea5:	e8 d6 1a ff ff       	call   f010c980 <sys_calculate_free_frames>
f011aeaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aead:	e8 74 97 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011aeb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011aeb5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011aebb:	83 ec 0c             	sub    $0xc,%esp
f011aebe:	50                   	push   %eax
f011aebf:	e8 57 d0 fe ff       	call   f0107f1b <kfree>
f011aec4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aec7:	e8 5a 97 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011aecc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aecf:	74 17                	je     f011aee8 <test_kmalloc_bestfit1+0x846>
f011aed1:	83 ec 04             	sub    $0x4,%esp
f011aed4:	68 28 91 13 f0       	push   $0xf0139128
f011aed9:	68 db 01 00 00       	push   $0x1db
f011aede:	68 0e 91 13 f0       	push   $0xf013910e
f011aee3:	e8 c8 52 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011aee8:	e8 93 1a ff ff       	call   f010c980 <sys_calculate_free_frames>
f011aeed:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aef0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aef5:	74 17                	je     f011af0e <test_kmalloc_bestfit1+0x86c>
f011aef7:	83 ec 04             	sub    $0x4,%esp
f011aefa:	68 6b 95 13 f0       	push   $0xf013956b
f011aeff:	68 dc 01 00 00       	push   $0x1dc
f011af04:	68 0e 91 13 f0       	push   $0xf013910e
f011af09:	e8 a2 52 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af0e:	e8 6d 1a ff ff       	call   f010c980 <sys_calculate_free_frames>
f011af13:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af16:	e8 0b 97 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011af1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011af1e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011af24:	83 ec 0c             	sub    $0xc,%esp
f011af27:	50                   	push   %eax
f011af28:	e8 ee cf fe ff       	call   f0107f1b <kfree>
f011af2d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af30:	e8 f1 96 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011af35:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af38:	74 17                	je     f011af51 <test_kmalloc_bestfit1+0x8af>
f011af3a:	83 ec 04             	sub    $0x4,%esp
f011af3d:	68 28 91 13 f0       	push   $0xf0139128
f011af42:	68 e2 01 00 00       	push   $0x1e2
f011af47:	68 0e 91 13 f0       	push   $0xf013910e
f011af4c:	e8 5f 52 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011af51:	e8 2a 1a ff ff       	call   f010c980 <sys_calculate_free_frames>
f011af56:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011af59:	3d 00 02 00 00       	cmp    $0x200,%eax
f011af5e:	74 17                	je     f011af77 <test_kmalloc_bestfit1+0x8d5>
f011af60:	83 ec 04             	sub    $0x4,%esp
f011af63:	68 6b 95 13 f0       	push   $0xf013956b
f011af68:	68 e3 01 00 00       	push   $0x1e3
f011af6d:	68 0e 91 13 f0       	push   $0xf013910e
f011af72:	e8 39 52 fe ff       	call   f01001b0 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af77:	e8 04 1a ff ff       	call   f010c980 <sys_calculate_free_frames>
f011af7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af7f:	e8 a2 96 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011af84:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011af87:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011af8d:	83 ec 0c             	sub    $0xc,%esp
f011af90:	50                   	push   %eax
f011af91:	e8 85 cf fe ff       	call   f0107f1b <kfree>
f011af96:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af99:	e8 88 96 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011af9e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011afa1:	74 17                	je     f011afba <test_kmalloc_bestfit1+0x918>
f011afa3:	83 ec 04             	sub    $0x4,%esp
f011afa6:	68 28 91 13 f0       	push   $0xf0139128
f011afab:	68 e9 01 00 00       	push   $0x1e9
f011afb0:	68 0e 91 13 f0       	push   $0xf013910e
f011afb5:	e8 f6 51 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011afba:	e8 c1 19 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011afbf:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011afc2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011afc7:	74 17                	je     f011afe0 <test_kmalloc_bestfit1+0x93e>
f011afc9:	83 ec 04             	sub    $0x4,%esp
f011afcc:	68 6b 95 13 f0       	push   $0xf013956b
f011afd1:	68 ea 01 00 00       	push   $0x1ea
f011afd6:	68 0e 91 13 f0       	push   $0xf013910e
f011afdb:	e8 d0 51 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011afe0:	e8 9b 19 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011afe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afe8:	e8 39 96 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011afed:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011aff0:	83 ec 0c             	sub    $0xc,%esp
f011aff3:	68 00 00 08 00       	push   $0x80000
f011aff8:	e8 04 cf fe ff       	call   f0107f01 <kmalloc>
f011affd:	83 c4 10             	add    $0x10,%esp
f011b000:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b006:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b00c:	89 c1                	mov    %eax,%ecx
f011b00e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b015:	10 00 00 
f011b018:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b01d:	0f b6 d0             	movzbl %al,%edx
f011b020:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b026:	01 d0                	add    %edx,%eax
f011b028:	48                   	dec    %eax
f011b029:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b02f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b035:	ba 00 00 00 00       	mov    $0x0,%edx
f011b03a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b040:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b046:	29 d0                	sub    %edx,%eax
f011b048:	89 c3                	mov    %eax,%ebx
f011b04a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b051:	10 00 00 
f011b054:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b059:	0f b6 c0             	movzbl %al,%eax
f011b05c:	c1 e0 04             	shl    $0x4,%eax
f011b05f:	89 c2                	mov    %eax,%edx
f011b061:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b067:	01 d0                	add    %edx,%eax
f011b069:	48                   	dec    %eax
f011b06a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b070:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b076:	ba 00 00 00 00       	mov    $0x0,%edx
f011b07b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b081:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b087:	29 d0                	sub    %edx,%eax
f011b089:	01 d8                	add    %ebx,%eax
f011b08b:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b090:	39 c1                	cmp    %eax,%ecx
f011b092:	74 17                	je     f011b0ab <test_kmalloc_bestfit1+0xa09>
f011b094:	83 ec 04             	sub    $0x4,%esp
f011b097:	68 28 95 13 f0       	push   $0xf0139528
f011b09c:	68 f3 01 00 00       	push   $0x1f3
f011b0a1:	68 0e 91 13 f0       	push   $0xf013910e
f011b0a6:	e8 05 51 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0ab:	e8 76 95 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b0b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b0b3:	74 17                	je     f011b0cc <test_kmalloc_bestfit1+0xa2a>
f011b0b5:	83 ec 04             	sub    $0x4,%esp
f011b0b8:	68 28 91 13 f0       	push   $0xf0139128
f011b0bd:	68 f4 01 00 00       	push   $0x1f4
f011b0c2:	68 0e 91 13 f0       	push   $0xf013910e
f011b0c7:	e8 e4 50 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b0cc:	e8 af 18 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b0d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b0d4:	29 c2                	sub    %eax,%edx
f011b0d6:	89 d0                	mov    %edx,%eax
f011b0d8:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b0dd:	74 17                	je     f011b0f6 <test_kmalloc_bestfit1+0xa54>
f011b0df:	83 ec 04             	sub    $0x4,%esp
f011b0e2:	68 58 95 13 f0       	push   $0xf0139558
f011b0e7:	68 f5 01 00 00       	push   $0x1f5
f011b0ec:	68 0e 91 13 f0       	push   $0xf013910e
f011b0f1:	e8 ba 50 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b0f6:	e8 85 18 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b0fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b0fe:	e8 23 95 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b103:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b106:	83 ec 0c             	sub    $0xc,%esp
f011b109:	68 00 fc 0f 00       	push   $0xffc00
f011b10e:	e8 ee cd fe ff       	call   f0107f01 <kmalloc>
f011b113:	83 c4 10             	add    $0x10,%esp
f011b116:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b11c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b122:	89 c1                	mov    %eax,%ecx
f011b124:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b12b:	10 00 00 
f011b12e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b133:	0f b6 d0             	movzbl %al,%edx
f011b136:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b13c:	01 d0                	add    %edx,%eax
f011b13e:	48                   	dec    %eax
f011b13f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b145:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b14b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b150:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b156:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b15c:	29 d0                	sub    %edx,%eax
f011b15e:	89 c3                	mov    %eax,%ebx
f011b160:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b167:	10 00 00 
f011b16a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b16f:	0f b6 c0             	movzbl %al,%eax
f011b172:	c1 e0 04             	shl    $0x4,%eax
f011b175:	89 c2                	mov    %eax,%edx
f011b177:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b17d:	01 d0                	add    %edx,%eax
f011b17f:	48                   	dec    %eax
f011b180:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b186:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b18c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b191:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b197:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b19d:	29 d0                	sub    %edx,%eax
f011b19f:	01 d8                	add    %ebx,%eax
f011b1a1:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b1a6:	39 c1                	cmp    %eax,%ecx
f011b1a8:	74 17                	je     f011b1c1 <test_kmalloc_bestfit1+0xb1f>
f011b1aa:	83 ec 04             	sub    $0x4,%esp
f011b1ad:	68 28 95 13 f0       	push   $0xf0139528
f011b1b2:	68 fb 01 00 00       	push   $0x1fb
f011b1b7:	68 0e 91 13 f0       	push   $0xf013910e
f011b1bc:	e8 ef 4f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1c1:	e8 60 94 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b1c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b1c9:	74 17                	je     f011b1e2 <test_kmalloc_bestfit1+0xb40>
f011b1cb:	83 ec 04             	sub    $0x4,%esp
f011b1ce:	68 28 91 13 f0       	push   $0xf0139128
f011b1d3:	68 fc 01 00 00       	push   $0x1fc
f011b1d8:	68 0e 91 13 f0       	push   $0xf013910e
f011b1dd:	e8 ce 4f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b1e2:	e8 99 17 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b1e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b1ea:	29 c2                	sub    %eax,%edx
f011b1ec:	89 d0                	mov    %edx,%eax
f011b1ee:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b1f3:	74 17                	je     f011b20c <test_kmalloc_bestfit1+0xb6a>
f011b1f5:	83 ec 04             	sub    $0x4,%esp
f011b1f8:	68 58 95 13 f0       	push   $0xf0139558
f011b1fd:	68 fd 01 00 00       	push   $0x1fd
f011b202:	68 0e 91 13 f0       	push   $0xf013910e
f011b207:	e8 a4 4f fe ff       	call   f01001b0 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b20c:	e8 6f 17 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b211:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b214:	e8 0d 94 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b219:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b21c:	83 ec 0c             	sub    $0xc,%esp
f011b21f:	68 00 fc 03 00       	push   $0x3fc00
f011b224:	e8 d8 cc fe ff       	call   f0107f01 <kmalloc>
f011b229:	83 c4 10             	add    $0x10,%esp
f011b22c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b232:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b238:	89 c1                	mov    %eax,%ecx
f011b23a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b241:	10 00 00 
f011b244:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b249:	0f b6 d0             	movzbl %al,%edx
f011b24c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b252:	01 d0                	add    %edx,%eax
f011b254:	48                   	dec    %eax
f011b255:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b25b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b261:	ba 00 00 00 00       	mov    $0x0,%edx
f011b266:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b26c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b272:	29 d0                	sub    %edx,%eax
f011b274:	89 c3                	mov    %eax,%ebx
f011b276:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b27d:	10 00 00 
f011b280:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b285:	0f b6 c0             	movzbl %al,%eax
f011b288:	c1 e0 04             	shl    $0x4,%eax
f011b28b:	89 c2                	mov    %eax,%edx
f011b28d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b293:	01 d0                	add    %edx,%eax
f011b295:	48                   	dec    %eax
f011b296:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b29c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b2a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2a7:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b2ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b2b3:	29 d0                	sub    %edx,%eax
f011b2b5:	01 d8                	add    %ebx,%eax
f011b2b7:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b2bc:	39 c1                	cmp    %eax,%ecx
f011b2be:	74 17                	je     f011b2d7 <test_kmalloc_bestfit1+0xc35>
f011b2c0:	83 ec 04             	sub    $0x4,%esp
f011b2c3:	68 28 95 13 f0       	push   $0xf0139528
f011b2c8:	68 03 02 00 00       	push   $0x203
f011b2cd:	68 0e 91 13 f0       	push   $0xf013910e
f011b2d2:	e8 d9 4e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2d7:	e8 4a 93 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b2dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b2df:	74 17                	je     f011b2f8 <test_kmalloc_bestfit1+0xc56>
f011b2e1:	83 ec 04             	sub    $0x4,%esp
f011b2e4:	68 28 91 13 f0       	push   $0xf0139128
f011b2e9:	68 04 02 00 00       	push   $0x204
f011b2ee:	68 0e 91 13 f0       	push   $0xf013910e
f011b2f3:	e8 b8 4e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b2f8:	e8 83 16 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b2fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b300:	29 c2                	sub    %eax,%edx
f011b302:	89 d0                	mov    %edx,%eax
f011b304:	83 f8 40             	cmp    $0x40,%eax
f011b307:	74 17                	je     f011b320 <test_kmalloc_bestfit1+0xc7e>
f011b309:	83 ec 04             	sub    $0x4,%esp
f011b30c:	68 58 95 13 f0       	push   $0xf0139558
f011b311:	68 05 02 00 00       	push   $0x205
f011b316:	68 0e 91 13 f0       	push   $0xf013910e
f011b31b:	e8 90 4e fe ff       	call   f01001b0 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b320:	e8 5b 16 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b325:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b328:	e8 f9 92 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b32d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b330:	83 ec 0c             	sub    $0xc,%esp
f011b333:	68 00 fc 3f 00       	push   $0x3ffc00
f011b338:	e8 c4 cb fe ff       	call   f0107f01 <kmalloc>
f011b33d:	83 c4 10             	add    $0x10,%esp
f011b340:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b346:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b34c:	89 c1                	mov    %eax,%ecx
f011b34e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b355:	10 00 00 
f011b358:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b35d:	0f b6 d0             	movzbl %al,%edx
f011b360:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b366:	01 d0                	add    %edx,%eax
f011b368:	48                   	dec    %eax
f011b369:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b36f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b375:	ba 00 00 00 00       	mov    $0x0,%edx
f011b37a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b380:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b386:	29 d0                	sub    %edx,%eax
f011b388:	89 c3                	mov    %eax,%ebx
f011b38a:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b391:	10 00 00 
f011b394:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b399:	0f b6 c0             	movzbl %al,%eax
f011b39c:	c1 e0 04             	shl    $0x4,%eax
f011b39f:	89 c2                	mov    %eax,%edx
f011b3a1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b3a7:	01 d0                	add    %edx,%eax
f011b3a9:	48                   	dec    %eax
f011b3aa:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b3b0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b3b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3bb:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b3c1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b3c7:	29 d0                	sub    %edx,%eax
f011b3c9:	01 d8                	add    %ebx,%eax
f011b3cb:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b3d0:	39 c1                	cmp    %eax,%ecx
f011b3d2:	74 17                	je     f011b3eb <test_kmalloc_bestfit1+0xd49>
f011b3d4:	83 ec 04             	sub    $0x4,%esp
f011b3d7:	68 28 95 13 f0       	push   $0xf0139528
f011b3dc:	68 0b 02 00 00       	push   $0x20b
f011b3e1:	68 0e 91 13 f0       	push   $0xf013910e
f011b3e6:	e8 c5 4d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b3eb:	e8 36 92 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b3f0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b3f3:	74 17                	je     f011b40c <test_kmalloc_bestfit1+0xd6a>
f011b3f5:	83 ec 04             	sub    $0x4,%esp
f011b3f8:	68 28 91 13 f0       	push   $0xf0139128
f011b3fd:	68 0c 02 00 00       	push   $0x20c
f011b402:	68 0e 91 13 f0       	push   $0xf013910e
f011b407:	e8 a4 4d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b40c:	e8 6f 15 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b411:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b414:	29 c2                	sub    %eax,%edx
f011b416:	89 d0                	mov    %edx,%eax
f011b418:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b41d:	74 17                	je     f011b436 <test_kmalloc_bestfit1+0xd94>
f011b41f:	83 ec 04             	sub    $0x4,%esp
f011b422:	68 58 95 13 f0       	push   $0xf0139558
f011b427:	68 0d 02 00 00       	push   $0x20d
f011b42c:	68 0e 91 13 f0       	push   $0xf013910e
f011b431:	e8 7a 4d fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b436:	e8 45 15 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b43b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b43e:	e8 e3 91 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b443:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b446:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b44c:	83 ec 0c             	sub    $0xc,%esp
f011b44f:	50                   	push   %eax
f011b450:	e8 c6 ca fe ff       	call   f0107f1b <kfree>
f011b455:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b458:	e8 c9 91 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b45d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b460:	74 17                	je     f011b479 <test_kmalloc_bestfit1+0xdd7>
f011b462:	83 ec 04             	sub    $0x4,%esp
f011b465:	68 28 91 13 f0       	push   $0xf0139128
f011b46a:	68 16 02 00 00       	push   $0x216
f011b46f:	68 0e 91 13 f0       	push   $0xf013910e
f011b474:	e8 37 4d fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b479:	e8 02 15 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b47e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b481:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b486:	74 17                	je     f011b49f <test_kmalloc_bestfit1+0xdfd>
f011b488:	83 ec 04             	sub    $0x4,%esp
f011b48b:	68 6b 95 13 f0       	push   $0xf013956b
f011b490:	68 17 02 00 00       	push   $0x217
f011b495:	68 0e 91 13 f0       	push   $0xf013910e
f011b49a:	e8 11 4d fe ff       	call   f01001b0 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b49f:	e8 dc 14 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b4a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4a7:	e8 7a 91 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b4ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b4af:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b4b5:	83 ec 0c             	sub    $0xc,%esp
f011b4b8:	50                   	push   %eax
f011b4b9:	e8 5d ca fe ff       	call   f0107f1b <kfree>
f011b4be:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4c1:	e8 60 91 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b4c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4c9:	74 17                	je     f011b4e2 <test_kmalloc_bestfit1+0xe40>
f011b4cb:	83 ec 04             	sub    $0x4,%esp
f011b4ce:	68 28 91 13 f0       	push   $0xf0139128
f011b4d3:	68 1d 02 00 00       	push   $0x21d
f011b4d8:	68 0e 91 13 f0       	push   $0xf013910e
f011b4dd:	e8 ce 4c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b4e2:	e8 99 14 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b4e7:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b4ea:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b4ef:	74 17                	je     f011b508 <test_kmalloc_bestfit1+0xe66>
f011b4f1:	83 ec 04             	sub    $0x4,%esp
f011b4f4:	68 6b 95 13 f0       	push   $0xf013956b
f011b4f9:	68 1e 02 00 00       	push   $0x21e
f011b4fe:	68 0e 91 13 f0       	push   $0xf013910e
f011b503:	e8 a8 4c fe ff       	call   f01001b0 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b508:	e8 73 14 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b50d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b510:	e8 11 91 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b515:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b518:	83 ec 0c             	sub    $0xc,%esp
f011b51b:	68 00 fc 1f 00       	push   $0x1ffc00
f011b520:	e8 dc c9 fe ff       	call   f0107f01 <kmalloc>
f011b525:	83 c4 10             	add    $0x10,%esp
f011b528:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b52e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b534:	89 c1                	mov    %eax,%ecx
f011b536:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b53d:	10 00 00 
f011b540:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b545:	0f b6 d0             	movzbl %al,%edx
f011b548:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b54e:	01 d0                	add    %edx,%eax
f011b550:	48                   	dec    %eax
f011b551:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b557:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b55d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b562:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b568:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b56e:	29 d0                	sub    %edx,%eax
f011b570:	89 c3                	mov    %eax,%ebx
f011b572:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b579:	10 00 00 
f011b57c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b581:	0f b6 c0             	movzbl %al,%eax
f011b584:	c1 e0 04             	shl    $0x4,%eax
f011b587:	89 c2                	mov    %eax,%edx
f011b589:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b58f:	01 d0                	add    %edx,%eax
f011b591:	48                   	dec    %eax
f011b592:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b598:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b59e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5a3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b5a9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b5af:	29 d0                	sub    %edx,%eax
f011b5b1:	01 d8                	add    %ebx,%eax
f011b5b3:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b5b8:	39 c1                	cmp    %eax,%ecx
f011b5ba:	74 17                	je     f011b5d3 <test_kmalloc_bestfit1+0xf31>
f011b5bc:	83 ec 04             	sub    $0x4,%esp
f011b5bf:	68 28 95 13 f0       	push   $0xf0139528
f011b5c4:	68 27 02 00 00       	push   $0x227
f011b5c9:	68 0e 91 13 f0       	push   $0xf013910e
f011b5ce:	e8 dd 4b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5d3:	e8 4e 90 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b5d8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b5db:	74 17                	je     f011b5f4 <test_kmalloc_bestfit1+0xf52>
f011b5dd:	83 ec 04             	sub    $0x4,%esp
f011b5e0:	68 28 91 13 f0       	push   $0xf0139128
f011b5e5:	68 28 02 00 00       	push   $0x228
f011b5ea:	68 0e 91 13 f0       	push   $0xf013910e
f011b5ef:	e8 bc 4b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b5f4:	e8 87 13 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b5f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b5fc:	29 c2                	sub    %eax,%edx
f011b5fe:	89 d0                	mov    %edx,%eax
f011b600:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b605:	74 17                	je     f011b61e <test_kmalloc_bestfit1+0xf7c>
f011b607:	83 ec 04             	sub    $0x4,%esp
f011b60a:	68 58 95 13 f0       	push   $0xf0139558
f011b60f:	68 29 02 00 00       	push   $0x229
f011b614:	68 0e 91 13 f0       	push   $0xf013910e
f011b619:	e8 92 4b fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b61e:	83 ec 0c             	sub    $0xc,%esp
f011b621:	68 78 95 13 f0       	push   $0xf0139578
f011b626:	e8 06 58 fe ff       	call   f0100e31 <cprintf>
f011b62b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b62e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b633:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b636:	5b                   	pop    %ebx
f011b637:	5f                   	pop    %edi
f011b638:	5d                   	pop    %ebp
f011b639:	c3                   	ret    

f011b63a <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b63a:	55                   	push   %ebp
f011b63b:	89 e5                	mov    %esp,%ebp
f011b63d:	57                   	push   %edi
f011b63e:	53                   	push   %ebx
f011b63f:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011b645:	83 ec 0c             	sub    $0xc,%esp
f011b648:	68 50 90 13 f0       	push   $0xf0139050
f011b64d:	e8 df 57 fe ff       	call   f0100e31 <cprintf>
f011b652:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b655:	83 ec 0c             	sub    $0xc,%esp
f011b658:	68 80 90 13 f0       	push   $0xf0139080
f011b65d:	e8 cf 57 fe ff       	call   f0100e31 <cprintf>
f011b662:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b665:	83 ec 0c             	sub    $0xc,%esp
f011b668:	68 50 90 13 f0       	push   $0xf0139050
f011b66d:	e8 bf 57 fe ff       	call   f0100e31 <cprintf>
f011b672:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b675:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011b67b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b680:	b8 00 00 00 00       	mov    $0x0,%eax
f011b685:	89 d7                	mov    %edx,%edi
f011b687:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b689:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b690:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b695:	0f b6 d0             	movzbl %al,%edx
f011b698:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b69b:	01 d0                	add    %edx,%eax
f011b69d:	48                   	dec    %eax
f011b69e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b6a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b6a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6a9:	f7 75 f4             	divl   -0xc(%ebp)
f011b6ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b6af:	29 d0                	sub    %edx,%eax
f011b6b1:	89 c1                	mov    %eax,%ecx
f011b6b3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b6ba:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b6bf:	0f b6 c0             	movzbl %al,%eax
f011b6c2:	c1 e0 04             	shl    $0x4,%eax
f011b6c5:	89 c2                	mov    %eax,%edx
f011b6c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b6ca:	01 d0                	add    %edx,%eax
f011b6cc:	48                   	dec    %eax
f011b6cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b6d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b6d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6d8:	f7 75 ec             	divl   -0x14(%ebp)
f011b6db:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b6de:	29 d0                	sub    %edx,%eax
f011b6e0:	01 c8                	add    %ecx,%eax
f011b6e2:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b6e7:	29 c2                	sub    %eax,%edx
f011b6e9:	89 d0                	mov    %edx,%eax
f011b6eb:	83 ec 0c             	sub    $0xc,%esp
f011b6ee:	50                   	push   %eax
f011b6ef:	e8 0d c8 fe ff       	call   f0107f01 <kmalloc>
f011b6f4:	83 c4 10             	add    $0x10,%esp
f011b6f7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b6fd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b703:	85 c0                	test   %eax,%eax
f011b705:	74 17                	je     f011b71e <test_kmalloc_bestfit2+0xe4>
f011b707:	83 ec 04             	sub    $0x4,%esp
f011b70a:	68 c0 95 13 f0       	push   $0xf01395c0
f011b70f:	68 3f 02 00 00       	push   $0x23f
f011b714:	68 0e 91 13 f0       	push   $0xf013910e
f011b719:	e8 92 4a fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b71e:	e8 5d 12 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b723:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b726:	e8 fb 8e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b72b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b72e:	83 ec 0c             	sub    $0xc,%esp
f011b731:	68 00 fc 1f 00       	push   $0x1ffc00
f011b736:	e8 c6 c7 fe ff       	call   f0107f01 <kmalloc>
f011b73b:	83 c4 10             	add    $0x10,%esp
f011b73e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b744:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b74a:	89 c1                	mov    %eax,%ecx
f011b74c:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011b753:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b758:	0f b6 d0             	movzbl %al,%edx
f011b75b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b75e:	01 d0                	add    %edx,%eax
f011b760:	48                   	dec    %eax
f011b761:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011b764:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b767:	ba 00 00 00 00       	mov    $0x0,%edx
f011b76c:	f7 75 dc             	divl   -0x24(%ebp)
f011b76f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b772:	29 d0                	sub    %edx,%eax
f011b774:	89 c3                	mov    %eax,%ebx
f011b776:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b77d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b782:	0f b6 c0             	movzbl %al,%eax
f011b785:	c1 e0 04             	shl    $0x4,%eax
f011b788:	89 c2                	mov    %eax,%edx
f011b78a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b78d:	01 d0                	add    %edx,%eax
f011b78f:	48                   	dec    %eax
f011b790:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b793:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b796:	ba 00 00 00 00       	mov    $0x0,%edx
f011b79b:	f7 75 d4             	divl   -0x2c(%ebp)
f011b79e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7a1:	29 d0                	sub    %edx,%eax
f011b7a3:	01 d8                	add    %ebx,%eax
f011b7a5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b7aa:	39 c1                	cmp    %eax,%ecx
f011b7ac:	74 17                	je     f011b7c5 <test_kmalloc_bestfit2+0x18b>
f011b7ae:	83 ec 04             	sub    $0x4,%esp
f011b7b1:	68 28 95 13 f0       	push   $0xf0139528
f011b7b6:	68 49 02 00 00       	push   $0x249
f011b7bb:	68 0e 91 13 f0       	push   $0xf013910e
f011b7c0:	e8 eb 49 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7c5:	e8 5c 8e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b7ca:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b7cd:	74 17                	je     f011b7e6 <test_kmalloc_bestfit2+0x1ac>
f011b7cf:	83 ec 04             	sub    $0x4,%esp
f011b7d2:	68 28 91 13 f0       	push   $0xf0139128
f011b7d7:	68 4a 02 00 00       	push   $0x24a
f011b7dc:	68 0e 91 13 f0       	push   $0xf013910e
f011b7e1:	e8 ca 49 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b7e6:	e8 95 11 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b7eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b7ee:	29 c2                	sub    %eax,%edx
f011b7f0:	89 d0                	mov    %edx,%eax
f011b7f2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b7f7:	74 17                	je     f011b810 <test_kmalloc_bestfit2+0x1d6>
f011b7f9:	83 ec 04             	sub    $0x4,%esp
f011b7fc:	68 58 95 13 f0       	push   $0xf0139558
f011b801:	68 4b 02 00 00       	push   $0x24b
f011b806:	68 0e 91 13 f0       	push   $0xf013910e
f011b80b:	e8 a0 49 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b810:	e8 6b 11 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b815:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b818:	e8 09 8e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b81d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b820:	83 ec 0c             	sub    $0xc,%esp
f011b823:	68 00 fc 1f 00       	push   $0x1ffc00
f011b828:	e8 d4 c6 fe ff       	call   f0107f01 <kmalloc>
f011b82d:	83 c4 10             	add    $0x10,%esp
f011b830:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b836:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b83c:	89 c1                	mov    %eax,%ecx
f011b83e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b845:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b84a:	0f b6 d0             	movzbl %al,%edx
f011b84d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b850:	01 d0                	add    %edx,%eax
f011b852:	48                   	dec    %eax
f011b853:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b856:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b859:	ba 00 00 00 00       	mov    $0x0,%edx
f011b85e:	f7 75 cc             	divl   -0x34(%ebp)
f011b861:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b864:	29 d0                	sub    %edx,%eax
f011b866:	89 c3                	mov    %eax,%ebx
f011b868:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b86f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b874:	0f b6 c0             	movzbl %al,%eax
f011b877:	c1 e0 04             	shl    $0x4,%eax
f011b87a:	89 c2                	mov    %eax,%edx
f011b87c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b87f:	01 d0                	add    %edx,%eax
f011b881:	48                   	dec    %eax
f011b882:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b885:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b888:	ba 00 00 00 00       	mov    $0x0,%edx
f011b88d:	f7 75 c4             	divl   -0x3c(%ebp)
f011b890:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b893:	29 d0                	sub    %edx,%eax
f011b895:	01 d8                	add    %ebx,%eax
f011b897:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b89c:	39 c1                	cmp    %eax,%ecx
f011b89e:	74 17                	je     f011b8b7 <test_kmalloc_bestfit2+0x27d>
f011b8a0:	83 ec 04             	sub    $0x4,%esp
f011b8a3:	68 28 95 13 f0       	push   $0xf0139528
f011b8a8:	68 51 02 00 00       	push   $0x251
f011b8ad:	68 0e 91 13 f0       	push   $0xf013910e
f011b8b2:	e8 f9 48 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8b7:	e8 6a 8d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b8bc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b8bf:	74 17                	je     f011b8d8 <test_kmalloc_bestfit2+0x29e>
f011b8c1:	83 ec 04             	sub    $0x4,%esp
f011b8c4:	68 28 91 13 f0       	push   $0xf0139128
f011b8c9:	68 52 02 00 00       	push   $0x252
f011b8ce:	68 0e 91 13 f0       	push   $0xf013910e
f011b8d3:	e8 d8 48 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b8d8:	e8 a3 10 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b8dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b8e0:	29 c2                	sub    %eax,%edx
f011b8e2:	89 d0                	mov    %edx,%eax
f011b8e4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b8e9:	74 17                	je     f011b902 <test_kmalloc_bestfit2+0x2c8>
f011b8eb:	83 ec 04             	sub    $0x4,%esp
f011b8ee:	68 58 95 13 f0       	push   $0xf0139558
f011b8f3:	68 53 02 00 00       	push   $0x253
f011b8f8:	68 0e 91 13 f0       	push   $0xf013910e
f011b8fd:	e8 ae 48 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b902:	e8 79 10 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b907:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b90a:	e8 17 8d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b90f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b912:	83 ec 0c             	sub    $0xc,%esp
f011b915:	68 00 08 00 00       	push   $0x800
f011b91a:	e8 e2 c5 fe ff       	call   f0107f01 <kmalloc>
f011b91f:	83 c4 10             	add    $0x10,%esp
f011b922:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b928:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b92e:	89 c1                	mov    %eax,%ecx
f011b930:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b937:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b93c:	0f b6 d0             	movzbl %al,%edx
f011b93f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b942:	01 d0                	add    %edx,%eax
f011b944:	48                   	dec    %eax
f011b945:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b948:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b94b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b950:	f7 75 bc             	divl   -0x44(%ebp)
f011b953:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b956:	29 d0                	sub    %edx,%eax
f011b958:	89 c3                	mov    %eax,%ebx
f011b95a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b961:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011b966:	0f b6 c0             	movzbl %al,%eax
f011b969:	c1 e0 04             	shl    $0x4,%eax
f011b96c:	89 c2                	mov    %eax,%edx
f011b96e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b971:	01 d0                	add    %edx,%eax
f011b973:	48                   	dec    %eax
f011b974:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b977:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b97a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b97f:	f7 75 b4             	divl   -0x4c(%ebp)
f011b982:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b985:	29 d0                	sub    %edx,%eax
f011b987:	01 d8                	add    %ebx,%eax
f011b989:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b98e:	39 c1                	cmp    %eax,%ecx
f011b990:	74 17                	je     f011b9a9 <test_kmalloc_bestfit2+0x36f>
f011b992:	83 ec 04             	sub    $0x4,%esp
f011b995:	68 28 95 13 f0       	push   $0xf0139528
f011b99a:	68 59 02 00 00       	push   $0x259
f011b99f:	68 0e 91 13 f0       	push   $0xf013910e
f011b9a4:	e8 07 48 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b9a9:	e8 78 8c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b9ae:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b9b1:	74 17                	je     f011b9ca <test_kmalloc_bestfit2+0x390>
f011b9b3:	83 ec 04             	sub    $0x4,%esp
f011b9b6:	68 28 91 13 f0       	push   $0xf0139128
f011b9bb:	68 5a 02 00 00       	push   $0x25a
f011b9c0:	68 0e 91 13 f0       	push   $0xf013910e
f011b9c5:	e8 e6 47 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b9ca:	e8 b1 0f ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b9cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b9d2:	29 c2                	sub    %eax,%edx
f011b9d4:	89 d0                	mov    %edx,%eax
f011b9d6:	83 f8 01             	cmp    $0x1,%eax
f011b9d9:	74 17                	je     f011b9f2 <test_kmalloc_bestfit2+0x3b8>
f011b9db:	83 ec 04             	sub    $0x4,%esp
f011b9de:	68 58 95 13 f0       	push   $0xf0139558
f011b9e3:	68 5b 02 00 00       	push   $0x25b
f011b9e8:	68 0e 91 13 f0       	push   $0xf013910e
f011b9ed:	e8 be 47 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b9f2:	e8 89 0f ff ff       	call   f010c980 <sys_calculate_free_frames>
f011b9f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b9fa:	e8 27 8c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011b9ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ba02:	83 ec 0c             	sub    $0xc,%esp
f011ba05:	68 00 08 00 00       	push   $0x800
f011ba0a:	e8 f2 c4 fe ff       	call   f0107f01 <kmalloc>
f011ba0f:	83 c4 10             	add    $0x10,%esp
f011ba12:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011ba18:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ba1e:	89 c1                	mov    %eax,%ecx
f011ba20:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ba27:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ba2c:	0f b6 d0             	movzbl %al,%edx
f011ba2f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ba32:	01 d0                	add    %edx,%eax
f011ba34:	48                   	dec    %eax
f011ba35:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ba38:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ba3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba40:	f7 75 ac             	divl   -0x54(%ebp)
f011ba43:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ba46:	29 d0                	sub    %edx,%eax
f011ba48:	89 c3                	mov    %eax,%ebx
f011ba4a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ba51:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ba56:	0f b6 c0             	movzbl %al,%eax
f011ba59:	c1 e0 04             	shl    $0x4,%eax
f011ba5c:	89 c2                	mov    %eax,%edx
f011ba5e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ba61:	01 d0                	add    %edx,%eax
f011ba63:	48                   	dec    %eax
f011ba64:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ba67:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ba6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba6f:	f7 75 a4             	divl   -0x5c(%ebp)
f011ba72:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ba75:	29 d0                	sub    %edx,%eax
f011ba77:	01 d8                	add    %ebx,%eax
f011ba79:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011ba7e:	39 c1                	cmp    %eax,%ecx
f011ba80:	74 17                	je     f011ba99 <test_kmalloc_bestfit2+0x45f>
f011ba82:	83 ec 04             	sub    $0x4,%esp
f011ba85:	68 28 95 13 f0       	push   $0xf0139528
f011ba8a:	68 61 02 00 00       	push   $0x261
f011ba8f:	68 0e 91 13 f0       	push   $0xf013910e
f011ba94:	e8 17 47 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba99:	e8 88 8b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ba9e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011baa1:	74 17                	je     f011baba <test_kmalloc_bestfit2+0x480>
f011baa3:	83 ec 04             	sub    $0x4,%esp
f011baa6:	68 28 91 13 f0       	push   $0xf0139128
f011baab:	68 62 02 00 00       	push   $0x262
f011bab0:	68 0e 91 13 f0       	push   $0xf013910e
f011bab5:	e8 f6 46 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011baba:	e8 c1 0e ff ff       	call   f010c980 <sys_calculate_free_frames>
f011babf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bac2:	29 c2                	sub    %eax,%edx
f011bac4:	89 d0                	mov    %edx,%eax
f011bac6:	83 f8 01             	cmp    $0x1,%eax
f011bac9:	74 17                	je     f011bae2 <test_kmalloc_bestfit2+0x4a8>
f011bacb:	83 ec 04             	sub    $0x4,%esp
f011bace:	68 58 95 13 f0       	push   $0xf0139558
f011bad3:	68 63 02 00 00       	push   $0x263
f011bad8:	68 0e 91 13 f0       	push   $0xf013910e
f011badd:	e8 ce 46 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bae2:	e8 99 0e ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bae7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011baea:	e8 37 8b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011baef:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011baf2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011baf8:	83 ec 0c             	sub    $0xc,%esp
f011bafb:	50                   	push   %eax
f011bafc:	e8 1a c4 fe ff       	call   f0107f1b <kfree>
f011bb01:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb04:	e8 1d 8b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bb09:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bb0c:	74 17                	je     f011bb25 <test_kmalloc_bestfit2+0x4eb>
f011bb0e:	83 ec 04             	sub    $0x4,%esp
f011bb11:	68 28 91 13 f0       	push   $0xf0139128
f011bb16:	68 69 02 00 00       	push   $0x269
f011bb1b:	68 0e 91 13 f0       	push   $0xf013910e
f011bb20:	e8 8b 46 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bb25:	e8 56 0e ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bb2a:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bb2d:	83 f8 01             	cmp    $0x1,%eax
f011bb30:	74 17                	je     f011bb49 <test_kmalloc_bestfit2+0x50f>
f011bb32:	83 ec 04             	sub    $0x4,%esp
f011bb35:	68 58 95 13 f0       	push   $0xf0139558
f011bb3a:	68 6a 02 00 00       	push   $0x26a
f011bb3f:	68 0e 91 13 f0       	push   $0xf013910e
f011bb44:	e8 67 46 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bb49:	e8 32 0e ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bb4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb51:	e8 d0 8a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bb56:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bb59:	83 ec 0c             	sub    $0xc,%esp
f011bb5c:	68 00 1c 00 00       	push   $0x1c00
f011bb61:	e8 9b c3 fe ff       	call   f0107f01 <kmalloc>
f011bb66:	83 c4 10             	add    $0x10,%esp
f011bb69:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bb6f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bb75:	89 c1                	mov    %eax,%ecx
f011bb77:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bb7e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011bb83:	0f b6 d0             	movzbl %al,%edx
f011bb86:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bb89:	01 d0                	add    %edx,%eax
f011bb8b:	48                   	dec    %eax
f011bb8c:	89 45 98             	mov    %eax,-0x68(%ebp)
f011bb8f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bb92:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb97:	f7 75 9c             	divl   -0x64(%ebp)
f011bb9a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bb9d:	29 d0                	sub    %edx,%eax
f011bb9f:	89 c3                	mov    %eax,%ebx
f011bba1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011bba8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011bbad:	0f b6 c0             	movzbl %al,%eax
f011bbb0:	c1 e0 04             	shl    $0x4,%eax
f011bbb3:	89 c2                	mov    %eax,%edx
f011bbb5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bbb8:	01 d0                	add    %edx,%eax
f011bbba:	48                   	dec    %eax
f011bbbb:	89 45 90             	mov    %eax,-0x70(%ebp)
f011bbbe:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bbc1:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbc6:	f7 75 94             	divl   -0x6c(%ebp)
f011bbc9:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bbcc:	29 d0                	sub    %edx,%eax
f011bbce:	01 d8                	add    %ebx,%eax
f011bbd0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011bbd5:	39 c1                	cmp    %eax,%ecx
f011bbd7:	74 17                	je     f011bbf0 <test_kmalloc_bestfit2+0x5b6>
f011bbd9:	83 ec 04             	sub    $0x4,%esp
f011bbdc:	68 28 95 13 f0       	push   $0xf0139528
f011bbe1:	68 70 02 00 00       	push   $0x270
f011bbe6:	68 0e 91 13 f0       	push   $0xf013910e
f011bbeb:	e8 c0 45 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbf0:	e8 31 8a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bbf5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bbf8:	74 17                	je     f011bc11 <test_kmalloc_bestfit2+0x5d7>
f011bbfa:	83 ec 04             	sub    $0x4,%esp
f011bbfd:	68 28 91 13 f0       	push   $0xf0139128
f011bc02:	68 71 02 00 00       	push   $0x271
f011bc07:	68 0e 91 13 f0       	push   $0xf013910e
f011bc0c:	e8 9f 45 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011bc11:	e8 6a 0d ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bc16:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bc19:	29 c2                	sub    %eax,%edx
f011bc1b:	89 d0                	mov    %edx,%eax
f011bc1d:	83 f8 02             	cmp    $0x2,%eax
f011bc20:	74 17                	je     f011bc39 <test_kmalloc_bestfit2+0x5ff>
f011bc22:	83 ec 04             	sub    $0x4,%esp
f011bc25:	68 58 95 13 f0       	push   $0xf0139558
f011bc2a:	68 72 02 00 00       	push   $0x272
f011bc2f:	68 0e 91 13 f0       	push   $0xf013910e
f011bc34:	e8 77 45 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bc39:	e8 42 0d ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bc3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc41:	e8 e0 89 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bc46:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011bc49:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bc4f:	83 ec 0c             	sub    $0xc,%esp
f011bc52:	50                   	push   %eax
f011bc53:	e8 c3 c2 fe ff       	call   f0107f1b <kfree>
f011bc58:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc5b:	e8 c6 89 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bc60:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bc63:	74 17                	je     f011bc7c <test_kmalloc_bestfit2+0x642>
f011bc65:	83 ec 04             	sub    $0x4,%esp
f011bc68:	68 28 91 13 f0       	push   $0xf0139128
f011bc6d:	68 78 02 00 00       	push   $0x278
f011bc72:	68 0e 91 13 f0       	push   $0xf013910e
f011bc77:	e8 34 45 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011bc7c:	e8 ff 0c ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bc81:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bc84:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bc89:	74 17                	je     f011bca2 <test_kmalloc_bestfit2+0x668>
f011bc8b:	83 ec 04             	sub    $0x4,%esp
f011bc8e:	68 dc 93 13 f0       	push   $0xf01393dc
f011bc93:	68 79 02 00 00       	push   $0x279
f011bc98:	68 0e 91 13 f0       	push   $0xf013910e
f011bc9d:	e8 0e 45 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bca2:	e8 d9 0c ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bca7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcaa:	e8 77 89 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bcaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bcb2:	83 ec 0c             	sub    $0xc,%esp
f011bcb5:	68 00 fc 2f 00       	push   $0x2ffc00
f011bcba:	e8 42 c2 fe ff       	call   f0107f01 <kmalloc>
f011bcbf:	83 c4 10             	add    $0x10,%esp
f011bcc2:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bcc8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bcce:	89 c1                	mov    %eax,%ecx
f011bcd0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bcd7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011bcdc:	0f b6 d0             	movzbl %al,%edx
f011bcdf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bce2:	01 d0                	add    %edx,%eax
f011bce4:	48                   	dec    %eax
f011bce5:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bce8:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bceb:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcf0:	f7 75 8c             	divl   -0x74(%ebp)
f011bcf3:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bcf6:	29 d0                	sub    %edx,%eax
f011bcf8:	89 c3                	mov    %eax,%ebx
f011bcfa:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bd01:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011bd06:	0f b6 c0             	movzbl %al,%eax
f011bd09:	c1 e0 04             	shl    $0x4,%eax
f011bd0c:	89 c2                	mov    %eax,%edx
f011bd0e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bd11:	01 d0                	add    %edx,%eax
f011bd13:	48                   	dec    %eax
f011bd14:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bd17:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bd1a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd1f:	f7 75 84             	divl   -0x7c(%ebp)
f011bd22:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bd25:	29 d0                	sub    %edx,%eax
f011bd27:	01 d8                	add    %ebx,%eax
f011bd29:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bd2e:	39 c1                	cmp    %eax,%ecx
f011bd30:	74 17                	je     f011bd49 <test_kmalloc_bestfit2+0x70f>
f011bd32:	83 ec 04             	sub    $0x4,%esp
f011bd35:	68 28 95 13 f0       	push   $0xf0139528
f011bd3a:	68 7f 02 00 00       	push   $0x27f
f011bd3f:	68 0e 91 13 f0       	push   $0xf013910e
f011bd44:	e8 67 44 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd49:	e8 d8 88 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bd4e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bd51:	74 17                	je     f011bd6a <test_kmalloc_bestfit2+0x730>
f011bd53:	83 ec 04             	sub    $0x4,%esp
f011bd56:	68 28 91 13 f0       	push   $0xf0139128
f011bd5b:	68 80 02 00 00       	push   $0x280
f011bd60:	68 0e 91 13 f0       	push   $0xf013910e
f011bd65:	e8 46 44 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bd6a:	e8 11 0c ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bd6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bd72:	29 c2                	sub    %eax,%edx
f011bd74:	89 d0                	mov    %edx,%eax
f011bd76:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bd7b:	74 17                	je     f011bd94 <test_kmalloc_bestfit2+0x75a>
f011bd7d:	83 ec 04             	sub    $0x4,%esp
f011bd80:	68 58 95 13 f0       	push   $0xf0139558
f011bd85:	68 81 02 00 00       	push   $0x281
f011bd8a:	68 0e 91 13 f0       	push   $0xf013910e
f011bd8f:	e8 1c 44 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bd94:	e8 e7 0b ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bd99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd9c:	e8 85 88 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bda1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011bda4:	83 ec 0c             	sub    $0xc,%esp
f011bda7:	68 00 18 20 00       	push   $0x201800
f011bdac:	e8 50 c1 fe ff       	call   f0107f01 <kmalloc>
f011bdb1:	83 c4 10             	add    $0x10,%esp
f011bdb4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bdba:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bdc0:	89 c1                	mov    %eax,%ecx
f011bdc2:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bdc9:	10 00 00 
f011bdcc:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011bdd1:	0f b6 d0             	movzbl %al,%edx
f011bdd4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bdda:	01 d0                	add    %edx,%eax
f011bddc:	48                   	dec    %eax
f011bddd:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bde3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bde9:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdee:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bdf4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bdfa:	29 d0                	sub    %edx,%eax
f011bdfc:	89 c3                	mov    %eax,%ebx
f011bdfe:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011be05:	10 00 00 
f011be08:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011be0d:	0f b6 c0             	movzbl %al,%eax
f011be10:	c1 e0 04             	shl    $0x4,%eax
f011be13:	89 c2                	mov    %eax,%edx
f011be15:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011be1b:	01 d0                	add    %edx,%eax
f011be1d:	48                   	dec    %eax
f011be1e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011be24:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011be2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011be2f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011be35:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011be3b:	29 d0                	sub    %edx,%eax
f011be3d:	01 d8                	add    %ebx,%eax
f011be3f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011be44:	39 c1                	cmp    %eax,%ecx
f011be46:	74 17                	je     f011be5f <test_kmalloc_bestfit2+0x825>
f011be48:	83 ec 04             	sub    $0x4,%esp
f011be4b:	68 28 95 13 f0       	push   $0xf0139528
f011be50:	68 87 02 00 00       	push   $0x287
f011be55:	68 0e 91 13 f0       	push   $0xf013910e
f011be5a:	e8 51 43 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be5f:	e8 c2 87 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011be64:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011be67:	74 17                	je     f011be80 <test_kmalloc_bestfit2+0x846>
f011be69:	83 ec 04             	sub    $0x4,%esp
f011be6c:	68 28 91 13 f0       	push   $0xf0139128
f011be71:	68 88 02 00 00       	push   $0x288
f011be76:	68 0e 91 13 f0       	push   $0xf013910e
f011be7b:	e8 30 43 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011be80:	e8 fb 0a ff ff       	call   f010c980 <sys_calculate_free_frames>
f011be85:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011be88:	29 c2                	sub    %eax,%edx
f011be8a:	89 d0                	mov    %edx,%eax
f011be8c:	3d 02 02 00 00       	cmp    $0x202,%eax
f011be91:	74 17                	je     f011beaa <test_kmalloc_bestfit2+0x870>
f011be93:	83 ec 04             	sub    $0x4,%esp
f011be96:	68 58 95 13 f0       	push   $0xf0139558
f011be9b:	68 89 02 00 00       	push   $0x289
f011bea0:	68 0e 91 13 f0       	push   $0xf013910e
f011bea5:	e8 06 43 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011beaa:	e8 d1 0a ff ff       	call   f010c980 <sys_calculate_free_frames>
f011beaf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011beb2:	e8 6f 87 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011beb7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011beba:	83 ec 0c             	sub    $0xc,%esp
f011bebd:	68 00 fc 4f 00       	push   $0x4ffc00
f011bec2:	e8 3a c0 fe ff       	call   f0107f01 <kmalloc>
f011bec7:	83 c4 10             	add    $0x10,%esp
f011beca:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bed0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bed6:	89 c1                	mov    %eax,%ecx
f011bed8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bedf:	10 00 00 
f011bee2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011bee7:	0f b6 d0             	movzbl %al,%edx
f011beea:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bef0:	01 d0                	add    %edx,%eax
f011bef2:	48                   	dec    %eax
f011bef3:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bef9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011beff:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf04:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bf0a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bf10:	29 d0                	sub    %edx,%eax
f011bf12:	89 c3                	mov    %eax,%ebx
f011bf14:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bf1b:	10 00 00 
f011bf1e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011bf23:	0f b6 c0             	movzbl %al,%eax
f011bf26:	c1 e0 04             	shl    $0x4,%eax
f011bf29:	89 c2                	mov    %eax,%edx
f011bf2b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bf31:	01 d0                	add    %edx,%eax
f011bf33:	48                   	dec    %eax
f011bf34:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bf3a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bf40:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf45:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bf4b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bf51:	29 d0                	sub    %edx,%eax
f011bf53:	01 d8                	add    %ebx,%eax
f011bf55:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011bf5a:	39 c1                	cmp    %eax,%ecx
f011bf5c:	74 17                	je     f011bf75 <test_kmalloc_bestfit2+0x93b>
f011bf5e:	83 ec 04             	sub    $0x4,%esp
f011bf61:	68 28 95 13 f0       	push   $0xf0139528
f011bf66:	68 8f 02 00 00       	push   $0x28f
f011bf6b:	68 0e 91 13 f0       	push   $0xf013910e
f011bf70:	e8 3b 42 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf75:	e8 ac 86 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bf7a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bf7d:	74 17                	je     f011bf96 <test_kmalloc_bestfit2+0x95c>
f011bf7f:	83 ec 04             	sub    $0x4,%esp
f011bf82:	68 28 91 13 f0       	push   $0xf0139128
f011bf87:	68 90 02 00 00       	push   $0x290
f011bf8c:	68 0e 91 13 f0       	push   $0xf013910e
f011bf91:	e8 1a 42 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011bf96:	e8 e5 09 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bf9b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bf9e:	29 c2                	sub    %eax,%edx
f011bfa0:	89 d0                	mov    %edx,%eax
f011bfa2:	3d 00 05 00 00       	cmp    $0x500,%eax
f011bfa7:	74 17                	je     f011bfc0 <test_kmalloc_bestfit2+0x986>
f011bfa9:	83 ec 04             	sub    $0x4,%esp
f011bfac:	68 58 95 13 f0       	push   $0xf0139558
f011bfb1:	68 91 02 00 00       	push   $0x291
f011bfb6:	68 0e 91 13 f0       	push   $0xf013910e
f011bfbb:	e8 f0 41 fe ff       	call   f01001b0 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bfc0:	e8 bb 09 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011bfc5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bfc8:	e8 59 86 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bfcd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011bfd0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bfd6:	83 ec 0c             	sub    $0xc,%esp
f011bfd9:	50                   	push   %eax
f011bfda:	e8 3c bf fe ff       	call   f0107f1b <kfree>
f011bfdf:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfe2:	e8 3f 86 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011bfe7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bfea:	74 17                	je     f011c003 <test_kmalloc_bestfit2+0x9c9>
f011bfec:	83 ec 04             	sub    $0x4,%esp
f011bfef:	68 28 91 13 f0       	push   $0xf0139128
f011bff4:	68 97 02 00 00       	push   $0x297
f011bff9:	68 0e 91 13 f0       	push   $0xf013910e
f011bffe:	e8 ad 41 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c003:	e8 78 09 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c008:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c00b:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c010:	74 17                	je     f011c029 <test_kmalloc_bestfit2+0x9ef>
f011c012:	83 ec 04             	sub    $0x4,%esp
f011c015:	68 dc 93 13 f0       	push   $0xf01393dc
f011c01a:	68 98 02 00 00       	push   $0x298
f011c01f:	68 0e 91 13 f0       	push   $0xf013910e
f011c024:	e8 87 41 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c029:	e8 52 09 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c02e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c031:	e8 f0 85 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c036:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011c039:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c03f:	83 ec 0c             	sub    $0xc,%esp
f011c042:	50                   	push   %eax
f011c043:	e8 d3 be fe ff       	call   f0107f1b <kfree>
f011c048:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c04b:	e8 d6 85 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c050:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c053:	74 17                	je     f011c06c <test_kmalloc_bestfit2+0xa32>
f011c055:	83 ec 04             	sub    $0x4,%esp
f011c058:	68 28 91 13 f0       	push   $0xf0139128
f011c05d:	68 9e 02 00 00       	push   $0x29e
f011c062:	68 0e 91 13 f0       	push   $0xf013910e
f011c067:	e8 44 41 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c06c:	e8 0f 09 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c071:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c074:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c079:	74 17                	je     f011c092 <test_kmalloc_bestfit2+0xa58>
f011c07b:	83 ec 04             	sub    $0x4,%esp
f011c07e:	68 08 96 13 f0       	push   $0xf0139608
f011c083:	68 9f 02 00 00       	push   $0x29f
f011c088:	68 0e 91 13 f0       	push   $0xf013910e
f011c08d:	e8 1e 41 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c092:	e8 e9 08 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c097:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c09a:	e8 87 85 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c09f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c0a2:	83 ec 0c             	sub    $0xc,%esp
f011c0a5:	68 00 fc 1f 00       	push   $0x1ffc00
f011c0aa:	e8 52 be fe ff       	call   f0107f01 <kmalloc>
f011c0af:	83 c4 10             	add    $0x10,%esp
f011c0b2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c0b8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c0be:	89 c1                	mov    %eax,%ecx
f011c0c0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c0c7:	10 00 00 
f011c0ca:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c0cf:	0f b6 d0             	movzbl %al,%edx
f011c0d2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c0d8:	01 d0                	add    %edx,%eax
f011c0da:	48                   	dec    %eax
f011c0db:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c0e1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c0e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0ec:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c0f2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c0f8:	29 d0                	sub    %edx,%eax
f011c0fa:	89 c3                	mov    %eax,%ebx
f011c0fc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c103:	10 00 00 
f011c106:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c10b:	0f b6 c0             	movzbl %al,%eax
f011c10e:	c1 e0 04             	shl    $0x4,%eax
f011c111:	89 c2                	mov    %eax,%edx
f011c113:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c119:	01 d0                	add    %edx,%eax
f011c11b:	48                   	dec    %eax
f011c11c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c122:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c128:	ba 00 00 00 00       	mov    $0x0,%edx
f011c12d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c133:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c139:	29 d0                	sub    %edx,%eax
f011c13b:	01 d8                	add    %ebx,%eax
f011c13d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c142:	39 c1                	cmp    %eax,%ecx
f011c144:	74 17                	je     f011c15d <test_kmalloc_bestfit2+0xb23>
f011c146:	83 ec 04             	sub    $0x4,%esp
f011c149:	68 28 95 13 f0       	push   $0xf0139528
f011c14e:	68 a5 02 00 00       	push   $0x2a5
f011c153:	68 0e 91 13 f0       	push   $0xf013910e
f011c158:	e8 53 40 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c15d:	e8 c4 84 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c162:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c165:	74 17                	je     f011c17e <test_kmalloc_bestfit2+0xb44>
f011c167:	83 ec 04             	sub    $0x4,%esp
f011c16a:	68 28 91 13 f0       	push   $0xf0139128
f011c16f:	68 a6 02 00 00       	push   $0x2a6
f011c174:	68 0e 91 13 f0       	push   $0xf013910e
f011c179:	e8 32 40 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c17e:	e8 fd 07 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c183:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c186:	29 c2                	sub    %eax,%edx
f011c188:	89 d0                	mov    %edx,%eax
f011c18a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c18f:	74 17                	je     f011c1a8 <test_kmalloc_bestfit2+0xb6e>
f011c191:	83 ec 04             	sub    $0x4,%esp
f011c194:	68 46 96 13 f0       	push   $0xf0139646
f011c199:	68 a7 02 00 00       	push   $0x2a7
f011c19e:	68 0e 91 13 f0       	push   $0xf013910e
f011c1a3:	e8 08 40 fe ff       	call   f01001b0 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c1a8:	e8 d3 07 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c1ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c1b0:	e8 71 84 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c1b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c1b8:	83 ec 0c             	sub    $0xc,%esp
f011c1bb:	68 00 18 00 00       	push   $0x1800
f011c1c0:	e8 3c bd fe ff       	call   f0107f01 <kmalloc>
f011c1c5:	83 c4 10             	add    $0x10,%esp
f011c1c8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c1ce:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c1d4:	89 c1                	mov    %eax,%ecx
f011c1d6:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c1dd:	10 00 00 
f011c1e0:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c1e5:	0f b6 d0             	movzbl %al,%edx
f011c1e8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c1ee:	01 d0                	add    %edx,%eax
f011c1f0:	48                   	dec    %eax
f011c1f1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c1f7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c1fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c202:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c208:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c20e:	29 d0                	sub    %edx,%eax
f011c210:	89 c3                	mov    %eax,%ebx
f011c212:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c219:	10 00 00 
f011c21c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c221:	0f b6 c0             	movzbl %al,%eax
f011c224:	c1 e0 04             	shl    $0x4,%eax
f011c227:	89 c2                	mov    %eax,%edx
f011c229:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c22f:	01 d0                	add    %edx,%eax
f011c231:	48                   	dec    %eax
f011c232:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c238:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c23e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c243:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c249:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c24f:	29 d0                	sub    %edx,%eax
f011c251:	01 d8                	add    %ebx,%eax
f011c253:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c258:	39 c1                	cmp    %eax,%ecx
f011c25a:	74 17                	je     f011c273 <test_kmalloc_bestfit2+0xc39>
f011c25c:	83 ec 04             	sub    $0x4,%esp
f011c25f:	68 28 95 13 f0       	push   $0xf0139528
f011c264:	68 ad 02 00 00       	push   $0x2ad
f011c269:	68 0e 91 13 f0       	push   $0xf013910e
f011c26e:	e8 3d 3f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c273:	e8 ae 83 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c278:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c27b:	74 17                	je     f011c294 <test_kmalloc_bestfit2+0xc5a>
f011c27d:	83 ec 04             	sub    $0x4,%esp
f011c280:	68 28 91 13 f0       	push   $0xf0139128
f011c285:	68 ae 02 00 00       	push   $0x2ae
f011c28a:	68 0e 91 13 f0       	push   $0xf013910e
f011c28f:	e8 1c 3f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c294:	e8 e7 06 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c299:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c29c:	29 c2                	sub    %eax,%edx
f011c29e:	89 d0                	mov    %edx,%eax
f011c2a0:	83 f8 02             	cmp    $0x2,%eax
f011c2a3:	74 17                	je     f011c2bc <test_kmalloc_bestfit2+0xc82>
f011c2a5:	83 ec 04             	sub    $0x4,%esp
f011c2a8:	68 46 96 13 f0       	push   $0xf0139646
f011c2ad:	68 af 02 00 00       	push   $0x2af
f011c2b2:	68 0e 91 13 f0       	push   $0xf013910e
f011c2b7:	e8 f4 3e fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c2bc:	e8 bf 06 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c2c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c2c4:	e8 5d 83 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c2c9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011c2cc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c2d2:	83 ec 0c             	sub    $0xc,%esp
f011c2d5:	50                   	push   %eax
f011c2d6:	e8 40 bc fe ff       	call   f0107f1b <kfree>
f011c2db:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2de:	e8 43 83 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c2e3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c2e6:	74 17                	je     f011c2ff <test_kmalloc_bestfit2+0xcc5>
f011c2e8:	83 ec 04             	sub    $0x4,%esp
f011c2eb:	68 28 91 13 f0       	push   $0xf0139128
f011c2f0:	68 b5 02 00 00       	push   $0x2b5
f011c2f5:	68 0e 91 13 f0       	push   $0xf013910e
f011c2fa:	e8 b1 3e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c2ff:	e8 7c 06 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c304:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c307:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c30c:	74 17                	je     f011c325 <test_kmalloc_bestfit2+0xceb>
f011c30e:	83 ec 04             	sub    $0x4,%esp
f011c311:	68 08 96 13 f0       	push   $0xf0139608
f011c316:	68 b6 02 00 00       	push   $0x2b6
f011c31b:	68 0e 91 13 f0       	push   $0xf013910e
f011c320:	e8 8b 3e fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c325:	e8 56 06 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c32a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c32d:	e8 f4 82 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c332:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c335:	83 ec 0c             	sub    $0xc,%esp
f011c338:	68 00 fc 2f 00       	push   $0x2ffc00
f011c33d:	e8 bf bb fe ff       	call   f0107f01 <kmalloc>
f011c342:	83 c4 10             	add    $0x10,%esp
f011c345:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c34b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c351:	89 c1                	mov    %eax,%ecx
f011c353:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c35a:	10 00 00 
f011c35d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c362:	0f b6 d0             	movzbl %al,%edx
f011c365:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c36b:	01 d0                	add    %edx,%eax
f011c36d:	48                   	dec    %eax
f011c36e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c374:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c37a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c37f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c385:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c38b:	29 d0                	sub    %edx,%eax
f011c38d:	89 c3                	mov    %eax,%ebx
f011c38f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c396:	10 00 00 
f011c399:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c39e:	0f b6 c0             	movzbl %al,%eax
f011c3a1:	c1 e0 04             	shl    $0x4,%eax
f011c3a4:	89 c2                	mov    %eax,%edx
f011c3a6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c3ac:	01 d0                	add    %edx,%eax
f011c3ae:	48                   	dec    %eax
f011c3af:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c3b5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c3bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3c0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c3c6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c3cc:	29 d0                	sub    %edx,%eax
f011c3ce:	01 d8                	add    %ebx,%eax
f011c3d0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c3d5:	39 c1                	cmp    %eax,%ecx
f011c3d7:	74 17                	je     f011c3f0 <test_kmalloc_bestfit2+0xdb6>
f011c3d9:	83 ec 04             	sub    $0x4,%esp
f011c3dc:	68 28 95 13 f0       	push   $0xf0139528
f011c3e1:	68 bc 02 00 00       	push   $0x2bc
f011c3e6:	68 0e 91 13 f0       	push   $0xf013910e
f011c3eb:	e8 c0 3d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3f0:	e8 31 82 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c3f5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c3f8:	74 17                	je     f011c411 <test_kmalloc_bestfit2+0xdd7>
f011c3fa:	83 ec 04             	sub    $0x4,%esp
f011c3fd:	68 28 91 13 f0       	push   $0xf0139128
f011c402:	68 bd 02 00 00       	push   $0x2bd
f011c407:	68 0e 91 13 f0       	push   $0xf013910e
f011c40c:	e8 9f 3d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c411:	e8 6a 05 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c416:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c419:	29 c2                	sub    %eax,%edx
f011c41b:	89 d0                	mov    %edx,%eax
f011c41d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c422:	74 17                	je     f011c43b <test_kmalloc_bestfit2+0xe01>
f011c424:	83 ec 04             	sub    $0x4,%esp
f011c427:	68 08 96 13 f0       	push   $0xf0139608
f011c42c:	68 be 02 00 00       	push   $0x2be
f011c431:	68 0e 91 13 f0       	push   $0xf013910e
f011c436:	e8 75 3d fe ff       	call   f01001b0 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c43b:	e8 40 05 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c440:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c443:	e8 de 81 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c448:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c44b:	83 ec 0c             	sub    $0xc,%esp
f011c44e:	68 00 fc 3f 00       	push   $0x3ffc00
f011c453:	e8 a9 ba fe ff       	call   f0107f01 <kmalloc>
f011c458:	83 c4 10             	add    $0x10,%esp
f011c45b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c461:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c467:	89 c1                	mov    %eax,%ecx
f011c469:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c470:	10 00 00 
f011c473:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c478:	0f b6 d0             	movzbl %al,%edx
f011c47b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c481:	01 d0                	add    %edx,%eax
f011c483:	48                   	dec    %eax
f011c484:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c48a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c490:	ba 00 00 00 00       	mov    $0x0,%edx
f011c495:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c49b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c4a1:	29 d0                	sub    %edx,%eax
f011c4a3:	89 c3                	mov    %eax,%ebx
f011c4a5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c4ac:	10 00 00 
f011c4af:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c4b4:	0f b6 c0             	movzbl %al,%eax
f011c4b7:	c1 e0 04             	shl    $0x4,%eax
f011c4ba:	89 c2                	mov    %eax,%edx
f011c4bc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c4c2:	01 d0                	add    %edx,%eax
f011c4c4:	48                   	dec    %eax
f011c4c5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c4cb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c4d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4d6:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c4dc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c4e2:	29 d0                	sub    %edx,%eax
f011c4e4:	01 d8                	add    %ebx,%eax
f011c4e6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c4eb:	39 c1                	cmp    %eax,%ecx
f011c4ed:	74 17                	je     f011c506 <test_kmalloc_bestfit2+0xecc>
f011c4ef:	83 ec 04             	sub    $0x4,%esp
f011c4f2:	68 28 95 13 f0       	push   $0xf0139528
f011c4f7:	68 c4 02 00 00       	push   $0x2c4
f011c4fc:	68 0e 91 13 f0       	push   $0xf013910e
f011c501:	e8 aa 3c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c506:	e8 1b 81 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c50b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c50e:	74 17                	je     f011c527 <test_kmalloc_bestfit2+0xeed>
f011c510:	83 ec 04             	sub    $0x4,%esp
f011c513:	68 28 91 13 f0       	push   $0xf0139128
f011c518:	68 c5 02 00 00       	push   $0x2c5
f011c51d:	68 0e 91 13 f0       	push   $0xf013910e
f011c522:	e8 89 3c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c527:	e8 54 04 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c52c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c52f:	29 c2                	sub    %eax,%edx
f011c531:	89 d0                	mov    %edx,%eax
f011c533:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c538:	74 17                	je     f011c551 <test_kmalloc_bestfit2+0xf17>
f011c53a:	83 ec 04             	sub    $0x4,%esp
f011c53d:	68 08 96 13 f0       	push   $0xf0139608
f011c542:	68 c6 02 00 00       	push   $0x2c6
f011c547:	68 0e 91 13 f0       	push   $0xf013910e
f011c54c:	e8 5f 3c fe ff       	call   f01001b0 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c551:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c558:	10 00 00 
f011c55b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c560:	0f b6 d0             	movzbl %al,%edx
f011c563:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c569:	01 d0                	add    %edx,%eax
f011c56b:	48                   	dec    %eax
f011c56c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c572:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c578:	ba 00 00 00 00       	mov    $0x0,%edx
f011c57d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c583:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c589:	29 d0                	sub    %edx,%eax
f011c58b:	89 c1                	mov    %eax,%ecx
f011c58d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c594:	10 00 00 
f011c597:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c59c:	0f b6 c0             	movzbl %al,%eax
f011c59f:	c1 e0 04             	shl    $0x4,%eax
f011c5a2:	89 c2                	mov    %eax,%edx
f011c5a4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c5aa:	01 d0                	add    %edx,%eax
f011c5ac:	48                   	dec    %eax
f011c5ad:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c5b3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c5b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5be:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c5c4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c5ca:	29 d0                	sub    %edx,%eax
f011c5cc:	01 c8                	add    %ecx,%eax
f011c5ce:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c5d3:	29 c2                	sub    %eax,%edx
f011c5d5:	89 d0                	mov    %edx,%eax
f011c5d7:	83 ec 0c             	sub    $0xc,%esp
f011c5da:	50                   	push   %eax
f011c5db:	e8 21 b9 fe ff       	call   f0107f01 <kmalloc>
f011c5e0:	83 c4 10             	add    $0x10,%esp
f011c5e3:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c5e9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c5ef:	85 c0                	test   %eax,%eax
f011c5f1:	74 17                	je     f011c60a <test_kmalloc_bestfit2+0xfd0>
f011c5f3:	83 ec 04             	sub    $0x4,%esp
f011c5f6:	68 58 96 13 f0       	push   $0xf0139658
f011c5fb:	68 ce 02 00 00       	push   $0x2ce
f011c600:	68 0e 91 13 f0       	push   $0xf013910e
f011c605:	e8 a6 3b fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c60a:	83 ec 0c             	sub    $0xc,%esp
f011c60d:	68 bc 96 13 f0       	push   $0xf01396bc
f011c612:	e8 1a 48 fe ff       	call   f0100e31 <cprintf>
f011c617:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c61a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c61f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c622:	5b                   	pop    %ebx
f011c623:	5f                   	pop    %edi
f011c624:	5d                   	pop    %ebp
f011c625:	c3                   	ret    

f011c626 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c626:	55                   	push   %ebp
f011c627:	89 e5                	mov    %esp,%ebp
f011c629:	57                   	push   %edi
f011c62a:	53                   	push   %ebx
f011c62b:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011c631:	83 ec 0c             	sub    $0xc,%esp
f011c634:	68 50 90 13 f0       	push   $0xf0139050
f011c639:	e8 f3 47 fe ff       	call   f0100e31 <cprintf>
f011c63e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c641:	83 ec 0c             	sub    $0xc,%esp
f011c644:	68 80 90 13 f0       	push   $0xf0139080
f011c649:	e8 e3 47 fe ff       	call   f0100e31 <cprintf>
f011c64e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c651:	83 ec 0c             	sub    $0xc,%esp
f011c654:	68 50 90 13 f0       	push   $0xf0139050
f011c659:	e8 d3 47 fe ff       	call   f0100e31 <cprintf>
f011c65e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c661:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011c667:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c66c:	b8 00 00 00 00       	mov    $0x0,%eax
f011c671:	89 d7                	mov    %edx,%edi
f011c673:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c675:	e8 06 03 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c67a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c67d:	e8 a4 7f fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c682:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c685:	83 ec 0c             	sub    $0xc,%esp
f011c688:	68 00 fc 0f 00       	push   $0xffc00
f011c68d:	e8 6f b8 fe ff       	call   f0107f01 <kmalloc>
f011c692:	83 c4 10             	add    $0x10,%esp
f011c695:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c69b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c6a1:	89 c1                	mov    %eax,%ecx
f011c6a3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c6aa:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c6af:	0f b6 d0             	movzbl %al,%edx
f011c6b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c6b5:	01 d0                	add    %edx,%eax
f011c6b7:	48                   	dec    %eax
f011c6b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c6bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c6be:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6c3:	f7 75 ec             	divl   -0x14(%ebp)
f011c6c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c6c9:	29 d0                	sub    %edx,%eax
f011c6cb:	89 c3                	mov    %eax,%ebx
f011c6cd:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c6d4:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c6d9:	0f b6 c0             	movzbl %al,%eax
f011c6dc:	c1 e0 04             	shl    $0x4,%eax
f011c6df:	89 c2                	mov    %eax,%edx
f011c6e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c6e4:	01 d0                	add    %edx,%eax
f011c6e6:	48                   	dec    %eax
f011c6e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c6ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c6ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6f2:	f7 75 e4             	divl   -0x1c(%ebp)
f011c6f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c6f8:	29 d0                	sub    %edx,%eax
f011c6fa:	01 d8                	add    %ebx,%eax
f011c6fc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c701:	39 c1                	cmp    %eax,%ecx
f011c703:	74 17                	je     f011c71c <test_kmalloc_firstfit1+0xf6>
f011c705:	83 ec 04             	sub    $0x4,%esp
f011c708:	68 28 95 13 f0       	push   $0xf0139528
f011c70d:	68 e6 02 00 00       	push   $0x2e6
f011c712:	68 0e 91 13 f0       	push   $0xf013910e
f011c717:	e8 94 3a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c71c:	e8 05 7f fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c721:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c724:	74 17                	je     f011c73d <test_kmalloc_firstfit1+0x117>
f011c726:	83 ec 04             	sub    $0x4,%esp
f011c729:	68 28 91 13 f0       	push   $0xf0139128
f011c72e:	68 e7 02 00 00       	push   $0x2e7
f011c733:	68 0e 91 13 f0       	push   $0xf013910e
f011c738:	e8 73 3a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c73d:	e8 3e 02 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c742:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c745:	29 c2                	sub    %eax,%edx
f011c747:	89 d0                	mov    %edx,%eax
f011c749:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c74e:	74 17                	je     f011c767 <test_kmalloc_firstfit1+0x141>
f011c750:	83 ec 04             	sub    $0x4,%esp
f011c753:	68 58 95 13 f0       	push   $0xf0139558
f011c758:	68 e8 02 00 00       	push   $0x2e8
f011c75d:	68 0e 91 13 f0       	push   $0xf013910e
f011c762:	e8 49 3a fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c767:	e8 14 02 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c76c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c76f:	e8 b2 7e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c774:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c777:	83 ec 0c             	sub    $0xc,%esp
f011c77a:	68 00 fc 0f 00       	push   $0xffc00
f011c77f:	e8 7d b7 fe ff       	call   f0107f01 <kmalloc>
f011c784:	83 c4 10             	add    $0x10,%esp
f011c787:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c78d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c793:	89 c1                	mov    %eax,%ecx
f011c795:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c79c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c7a1:	0f b6 d0             	movzbl %al,%edx
f011c7a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c7a7:	01 d0                	add    %edx,%eax
f011c7a9:	48                   	dec    %eax
f011c7aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c7ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c7b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7b5:	f7 75 dc             	divl   -0x24(%ebp)
f011c7b8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c7bb:	29 d0                	sub    %edx,%eax
f011c7bd:	89 c3                	mov    %eax,%ebx
f011c7bf:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c7c6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c7cb:	0f b6 c0             	movzbl %al,%eax
f011c7ce:	c1 e0 04             	shl    $0x4,%eax
f011c7d1:	89 c2                	mov    %eax,%edx
f011c7d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c7d6:	01 d0                	add    %edx,%eax
f011c7d8:	48                   	dec    %eax
f011c7d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c7dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c7df:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7e4:	f7 75 d4             	divl   -0x2c(%ebp)
f011c7e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c7ea:	29 d0                	sub    %edx,%eax
f011c7ec:	01 d8                	add    %ebx,%eax
f011c7ee:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c7f3:	39 c1                	cmp    %eax,%ecx
f011c7f5:	74 17                	je     f011c80e <test_kmalloc_firstfit1+0x1e8>
f011c7f7:	83 ec 04             	sub    $0x4,%esp
f011c7fa:	68 28 95 13 f0       	push   $0xf0139528
f011c7ff:	68 ee 02 00 00       	push   $0x2ee
f011c804:	68 0e 91 13 f0       	push   $0xf013910e
f011c809:	e8 a2 39 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c80e:	e8 13 7e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c813:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c816:	74 17                	je     f011c82f <test_kmalloc_firstfit1+0x209>
f011c818:	83 ec 04             	sub    $0x4,%esp
f011c81b:	68 28 91 13 f0       	push   $0xf0139128
f011c820:	68 ef 02 00 00       	push   $0x2ef
f011c825:	68 0e 91 13 f0       	push   $0xf013910e
f011c82a:	e8 81 39 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c82f:	e8 4c 01 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c834:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c837:	29 c2                	sub    %eax,%edx
f011c839:	89 d0                	mov    %edx,%eax
f011c83b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c840:	74 17                	je     f011c859 <test_kmalloc_firstfit1+0x233>
f011c842:	83 ec 04             	sub    $0x4,%esp
f011c845:	68 58 95 13 f0       	push   $0xf0139558
f011c84a:	68 f0 02 00 00       	push   $0x2f0
f011c84f:	68 0e 91 13 f0       	push   $0xf013910e
f011c854:	e8 57 39 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c859:	e8 22 01 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c85e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c861:	e8 c0 7d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c866:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c869:	83 ec 0c             	sub    $0xc,%esp
f011c86c:	68 00 fc 0f 00       	push   $0xffc00
f011c871:	e8 8b b6 fe ff       	call   f0107f01 <kmalloc>
f011c876:	83 c4 10             	add    $0x10,%esp
f011c879:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c87f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c885:	89 c1                	mov    %eax,%ecx
f011c887:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c88e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c893:	0f b6 d0             	movzbl %al,%edx
f011c896:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c899:	01 d0                	add    %edx,%eax
f011c89b:	48                   	dec    %eax
f011c89c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c89f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c8a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8a7:	f7 75 cc             	divl   -0x34(%ebp)
f011c8aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c8ad:	29 d0                	sub    %edx,%eax
f011c8af:	89 c3                	mov    %eax,%ebx
f011c8b1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c8b8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c8bd:	0f b6 c0             	movzbl %al,%eax
f011c8c0:	c1 e0 04             	shl    $0x4,%eax
f011c8c3:	89 c2                	mov    %eax,%edx
f011c8c5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c8c8:	01 d0                	add    %edx,%eax
f011c8ca:	48                   	dec    %eax
f011c8cb:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c8ce:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c8d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8d6:	f7 75 c4             	divl   -0x3c(%ebp)
f011c8d9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c8dc:	29 d0                	sub    %edx,%eax
f011c8de:	01 d8                	add    %ebx,%eax
f011c8e0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c8e5:	39 c1                	cmp    %eax,%ecx
f011c8e7:	74 17                	je     f011c900 <test_kmalloc_firstfit1+0x2da>
f011c8e9:	83 ec 04             	sub    $0x4,%esp
f011c8ec:	68 28 95 13 f0       	push   $0xf0139528
f011c8f1:	68 f6 02 00 00       	push   $0x2f6
f011c8f6:	68 0e 91 13 f0       	push   $0xf013910e
f011c8fb:	e8 b0 38 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c900:	e8 21 7d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c905:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c908:	74 17                	je     f011c921 <test_kmalloc_firstfit1+0x2fb>
f011c90a:	83 ec 04             	sub    $0x4,%esp
f011c90d:	68 28 91 13 f0       	push   $0xf0139128
f011c912:	68 f7 02 00 00       	push   $0x2f7
f011c917:	68 0e 91 13 f0       	push   $0xf013910e
f011c91c:	e8 8f 38 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c921:	e8 5a 00 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c926:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c929:	29 c2                	sub    %eax,%edx
f011c92b:	89 d0                	mov    %edx,%eax
f011c92d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c932:	74 17                	je     f011c94b <test_kmalloc_firstfit1+0x325>
f011c934:	83 ec 04             	sub    $0x4,%esp
f011c937:	68 58 95 13 f0       	push   $0xf0139558
f011c93c:	68 f8 02 00 00       	push   $0x2f8
f011c941:	68 0e 91 13 f0       	push   $0xf013910e
f011c946:	e8 65 38 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c94b:	e8 30 00 ff ff       	call   f010c980 <sys_calculate_free_frames>
f011c950:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c953:	e8 ce 7c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c958:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c95b:	83 ec 0c             	sub    $0xc,%esp
f011c95e:	68 00 fc 0f 00       	push   $0xffc00
f011c963:	e8 99 b5 fe ff       	call   f0107f01 <kmalloc>
f011c968:	83 c4 10             	add    $0x10,%esp
f011c96b:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c971:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c977:	89 c1                	mov    %eax,%ecx
f011c979:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c980:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c985:	0f b6 d0             	movzbl %al,%edx
f011c988:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c98b:	01 d0                	add    %edx,%eax
f011c98d:	48                   	dec    %eax
f011c98e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c991:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c994:	ba 00 00 00 00       	mov    $0x0,%edx
f011c999:	f7 75 bc             	divl   -0x44(%ebp)
f011c99c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c99f:	29 d0                	sub    %edx,%eax
f011c9a1:	89 c3                	mov    %eax,%ebx
f011c9a3:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c9aa:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011c9af:	0f b6 c0             	movzbl %al,%eax
f011c9b2:	c1 e0 04             	shl    $0x4,%eax
f011c9b5:	89 c2                	mov    %eax,%edx
f011c9b7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c9ba:	01 d0                	add    %edx,%eax
f011c9bc:	48                   	dec    %eax
f011c9bd:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c9c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c9c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9c8:	f7 75 b4             	divl   -0x4c(%ebp)
f011c9cb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c9ce:	29 d0                	sub    %edx,%eax
f011c9d0:	01 d8                	add    %ebx,%eax
f011c9d2:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c9d7:	39 c1                	cmp    %eax,%ecx
f011c9d9:	74 17                	je     f011c9f2 <test_kmalloc_firstfit1+0x3cc>
f011c9db:	83 ec 04             	sub    $0x4,%esp
f011c9de:	68 28 95 13 f0       	push   $0xf0139528
f011c9e3:	68 fe 02 00 00       	push   $0x2fe
f011c9e8:	68 0e 91 13 f0       	push   $0xf013910e
f011c9ed:	e8 be 37 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9f2:	e8 2f 7c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011c9f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c9fa:	74 17                	je     f011ca13 <test_kmalloc_firstfit1+0x3ed>
f011c9fc:	83 ec 04             	sub    $0x4,%esp
f011c9ff:	68 28 91 13 f0       	push   $0xf0139128
f011ca04:	68 ff 02 00 00       	push   $0x2ff
f011ca09:	68 0e 91 13 f0       	push   $0xf013910e
f011ca0e:	e8 9d 37 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca13:	e8 68 ff fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ca18:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca1b:	29 c2                	sub    %eax,%edx
f011ca1d:	89 d0                	mov    %edx,%eax
f011ca1f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca24:	74 17                	je     f011ca3d <test_kmalloc_firstfit1+0x417>
f011ca26:	83 ec 04             	sub    $0x4,%esp
f011ca29:	68 58 95 13 f0       	push   $0xf0139558
f011ca2e:	68 00 03 00 00       	push   $0x300
f011ca33:	68 0e 91 13 f0       	push   $0xf013910e
f011ca38:	e8 73 37 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca3d:	e8 3e ff fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ca42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca45:	e8 dc 7b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ca4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011ca4d:	83 ec 0c             	sub    $0xc,%esp
f011ca50:	68 00 fc 1f 00       	push   $0x1ffc00
f011ca55:	e8 a7 b4 fe ff       	call   f0107f01 <kmalloc>
f011ca5a:	83 c4 10             	add    $0x10,%esp
f011ca5d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ca63:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ca69:	89 c1                	mov    %eax,%ecx
f011ca6b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ca72:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ca77:	0f b6 d0             	movzbl %al,%edx
f011ca7a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ca7d:	01 d0                	add    %edx,%eax
f011ca7f:	48                   	dec    %eax
f011ca80:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ca83:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ca86:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca8b:	f7 75 ac             	divl   -0x54(%ebp)
f011ca8e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ca91:	29 d0                	sub    %edx,%eax
f011ca93:	89 c3                	mov    %eax,%ebx
f011ca95:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ca9c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011caa1:	0f b6 c0             	movzbl %al,%eax
f011caa4:	c1 e0 04             	shl    $0x4,%eax
f011caa7:	89 c2                	mov    %eax,%edx
f011caa9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011caac:	01 d0                	add    %edx,%eax
f011caae:	48                   	dec    %eax
f011caaf:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cab2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cab5:	ba 00 00 00 00       	mov    $0x0,%edx
f011caba:	f7 75 a4             	divl   -0x5c(%ebp)
f011cabd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cac0:	29 d0                	sub    %edx,%eax
f011cac2:	01 d8                	add    %ebx,%eax
f011cac4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cac9:	39 c1                	cmp    %eax,%ecx
f011cacb:	74 17                	je     f011cae4 <test_kmalloc_firstfit1+0x4be>
f011cacd:	83 ec 04             	sub    $0x4,%esp
f011cad0:	68 28 95 13 f0       	push   $0xf0139528
f011cad5:	68 06 03 00 00       	push   $0x306
f011cada:	68 0e 91 13 f0       	push   $0xf013910e
f011cadf:	e8 cc 36 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cae4:	e8 3d 7b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cae9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011caec:	74 17                	je     f011cb05 <test_kmalloc_firstfit1+0x4df>
f011caee:	83 ec 04             	sub    $0x4,%esp
f011caf1:	68 28 91 13 f0       	push   $0xf0139128
f011caf6:	68 07 03 00 00       	push   $0x307
f011cafb:	68 0e 91 13 f0       	push   $0xf013910e
f011cb00:	e8 ab 36 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cb05:	e8 76 fe fe ff       	call   f010c980 <sys_calculate_free_frames>
f011cb0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb0d:	29 c2                	sub    %eax,%edx
f011cb0f:	89 d0                	mov    %edx,%eax
f011cb11:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cb16:	74 17                	je     f011cb2f <test_kmalloc_firstfit1+0x509>
f011cb18:	83 ec 04             	sub    $0x4,%esp
f011cb1b:	68 58 95 13 f0       	push   $0xf0139558
f011cb20:	68 08 03 00 00       	push   $0x308
f011cb25:	68 0e 91 13 f0       	push   $0xf013910e
f011cb2a:	e8 81 36 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb2f:	e8 4c fe fe ff       	call   f010c980 <sys_calculate_free_frames>
f011cb34:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb37:	e8 ea 7a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cb3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cb3f:	83 ec 0c             	sub    $0xc,%esp
f011cb42:	68 00 fc 1f 00       	push   $0x1ffc00
f011cb47:	e8 b5 b3 fe ff       	call   f0107f01 <kmalloc>
f011cb4c:	83 c4 10             	add    $0x10,%esp
f011cb4f:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cb55:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cb5b:	89 c1                	mov    %eax,%ecx
f011cb5d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cb64:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011cb69:	0f b6 d0             	movzbl %al,%edx
f011cb6c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cb6f:	01 d0                	add    %edx,%eax
f011cb71:	48                   	dec    %eax
f011cb72:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cb75:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cb78:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb7d:	f7 75 9c             	divl   -0x64(%ebp)
f011cb80:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cb83:	29 d0                	sub    %edx,%eax
f011cb85:	89 c3                	mov    %eax,%ebx
f011cb87:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cb8e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011cb93:	0f b6 c0             	movzbl %al,%eax
f011cb96:	c1 e0 04             	shl    $0x4,%eax
f011cb99:	89 c2                	mov    %eax,%edx
f011cb9b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cb9e:	01 d0                	add    %edx,%eax
f011cba0:	48                   	dec    %eax
f011cba1:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cba4:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cba7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbac:	f7 75 94             	divl   -0x6c(%ebp)
f011cbaf:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cbb2:	29 d0                	sub    %edx,%eax
f011cbb4:	01 d8                	add    %ebx,%eax
f011cbb6:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011cbbb:	39 c1                	cmp    %eax,%ecx
f011cbbd:	74 17                	je     f011cbd6 <test_kmalloc_firstfit1+0x5b0>
f011cbbf:	83 ec 04             	sub    $0x4,%esp
f011cbc2:	68 28 95 13 f0       	push   $0xf0139528
f011cbc7:	68 0e 03 00 00       	push   $0x30e
f011cbcc:	68 0e 91 13 f0       	push   $0xf013910e
f011cbd1:	e8 da 35 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbd6:	e8 4b 7a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cbdb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cbde:	74 17                	je     f011cbf7 <test_kmalloc_firstfit1+0x5d1>
f011cbe0:	83 ec 04             	sub    $0x4,%esp
f011cbe3:	68 28 91 13 f0       	push   $0xf0139128
f011cbe8:	68 0f 03 00 00       	push   $0x30f
f011cbed:	68 0e 91 13 f0       	push   $0xf013910e
f011cbf2:	e8 b9 35 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cbf7:	e8 84 fd fe ff       	call   f010c980 <sys_calculate_free_frames>
f011cbfc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cbff:	29 c2                	sub    %eax,%edx
f011cc01:	89 d0                	mov    %edx,%eax
f011cc03:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cc08:	74 17                	je     f011cc21 <test_kmalloc_firstfit1+0x5fb>
f011cc0a:	83 ec 04             	sub    $0x4,%esp
f011cc0d:	68 58 95 13 f0       	push   $0xf0139558
f011cc12:	68 10 03 00 00       	push   $0x310
f011cc17:	68 0e 91 13 f0       	push   $0xf013910e
f011cc1c:	e8 8f 35 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cc21:	e8 5a fd fe ff       	call   f010c980 <sys_calculate_free_frames>
f011cc26:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc29:	e8 f8 79 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cc2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011cc31:	83 ec 0c             	sub    $0xc,%esp
f011cc34:	68 00 fc 2f 00       	push   $0x2ffc00
f011cc39:	e8 c3 b2 fe ff       	call   f0107f01 <kmalloc>
f011cc3e:	83 c4 10             	add    $0x10,%esp
f011cc41:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cc47:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cc4d:	89 c1                	mov    %eax,%ecx
f011cc4f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011cc56:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011cc5b:	0f b6 d0             	movzbl %al,%edx
f011cc5e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011cc61:	01 d0                	add    %edx,%eax
f011cc63:	48                   	dec    %eax
f011cc64:	89 45 88             	mov    %eax,-0x78(%ebp)
f011cc67:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cc6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc6f:	f7 75 8c             	divl   -0x74(%ebp)
f011cc72:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cc75:	29 d0                	sub    %edx,%eax
f011cc77:	89 c3                	mov    %eax,%ebx
f011cc79:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011cc80:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011cc85:	0f b6 c0             	movzbl %al,%eax
f011cc88:	c1 e0 04             	shl    $0x4,%eax
f011cc8b:	89 c2                	mov    %eax,%edx
f011cc8d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011cc90:	01 d0                	add    %edx,%eax
f011cc92:	48                   	dec    %eax
f011cc93:	89 45 80             	mov    %eax,-0x80(%ebp)
f011cc96:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cc99:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc9e:	f7 75 84             	divl   -0x7c(%ebp)
f011cca1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cca4:	29 d0                	sub    %edx,%eax
f011cca6:	01 d8                	add    %ebx,%eax
f011cca8:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ccad:	39 c1                	cmp    %eax,%ecx
f011ccaf:	74 17                	je     f011ccc8 <test_kmalloc_firstfit1+0x6a2>
f011ccb1:	83 ec 04             	sub    $0x4,%esp
f011ccb4:	68 28 95 13 f0       	push   $0xf0139528
f011ccb9:	68 16 03 00 00       	push   $0x316
f011ccbe:	68 0e 91 13 f0       	push   $0xf013910e
f011ccc3:	e8 e8 34 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ccc8:	e8 59 79 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cccd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ccd0:	74 17                	je     f011cce9 <test_kmalloc_firstfit1+0x6c3>
f011ccd2:	83 ec 04             	sub    $0x4,%esp
f011ccd5:	68 28 91 13 f0       	push   $0xf0139128
f011ccda:	68 17 03 00 00       	push   $0x317
f011ccdf:	68 0e 91 13 f0       	push   $0xf013910e
f011cce4:	e8 c7 34 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cce9:	e8 92 fc fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ccee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ccf1:	29 c2                	sub    %eax,%edx
f011ccf3:	89 d0                	mov    %edx,%eax
f011ccf5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ccfa:	74 17                	je     f011cd13 <test_kmalloc_firstfit1+0x6ed>
f011ccfc:	83 ec 04             	sub    $0x4,%esp
f011ccff:	68 58 95 13 f0       	push   $0xf0139558
f011cd04:	68 18 03 00 00       	push   $0x318
f011cd09:	68 0e 91 13 f0       	push   $0xf013910e
f011cd0e:	e8 9d 34 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd13:	e8 68 fc fe ff       	call   f010c980 <sys_calculate_free_frames>
f011cd18:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd1b:	e8 06 79 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cd20:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011cd23:	83 ec 0c             	sub    $0xc,%esp
f011cd26:	68 00 fc 2f 00       	push   $0x2ffc00
f011cd2b:	e8 d1 b1 fe ff       	call   f0107f01 <kmalloc>
f011cd30:	83 c4 10             	add    $0x10,%esp
f011cd33:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011cd39:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cd3f:	89 c1                	mov    %eax,%ecx
f011cd41:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011cd48:	10 00 00 
f011cd4b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011cd50:	0f b6 d0             	movzbl %al,%edx
f011cd53:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011cd59:	01 d0                	add    %edx,%eax
f011cd5b:	48                   	dec    %eax
f011cd5c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cd62:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cd68:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd6d:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011cd73:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cd79:	29 d0                	sub    %edx,%eax
f011cd7b:	89 c3                	mov    %eax,%ebx
f011cd7d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cd84:	10 00 00 
f011cd87:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011cd8c:	0f b6 c0             	movzbl %al,%eax
f011cd8f:	c1 e0 04             	shl    $0x4,%eax
f011cd92:	89 c2                	mov    %eax,%edx
f011cd94:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cd9a:	01 d0                	add    %edx,%eax
f011cd9c:	48                   	dec    %eax
f011cd9d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cda3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cda9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdae:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cdb4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cdba:	29 d0                	sub    %edx,%eax
f011cdbc:	01 d8                	add    %ebx,%eax
f011cdbe:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011cdc3:	39 c1                	cmp    %eax,%ecx
f011cdc5:	74 17                	je     f011cdde <test_kmalloc_firstfit1+0x7b8>
f011cdc7:	83 ec 04             	sub    $0x4,%esp
f011cdca:	68 28 95 13 f0       	push   $0xf0139528
f011cdcf:	68 1e 03 00 00       	push   $0x31e
f011cdd4:	68 0e 91 13 f0       	push   $0xf013910e
f011cdd9:	e8 d2 33 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cdde:	e8 43 78 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cde3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cde6:	74 17                	je     f011cdff <test_kmalloc_firstfit1+0x7d9>
f011cde8:	83 ec 04             	sub    $0x4,%esp
f011cdeb:	68 28 91 13 f0       	push   $0xf0139128
f011cdf0:	68 1f 03 00 00       	push   $0x31f
f011cdf5:	68 0e 91 13 f0       	push   $0xf013910e
f011cdfa:	e8 b1 33 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cdff:	e8 7c fb fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ce04:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce07:	29 c2                	sub    %eax,%edx
f011ce09:	89 d0                	mov    %edx,%eax
f011ce0b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ce10:	74 17                	je     f011ce29 <test_kmalloc_firstfit1+0x803>
f011ce12:	83 ec 04             	sub    $0x4,%esp
f011ce15:	68 58 95 13 f0       	push   $0xf0139558
f011ce1a:	68 20 03 00 00       	push   $0x320
f011ce1f:	68 0e 91 13 f0       	push   $0xf013910e
f011ce24:	e8 87 33 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ce29:	e8 52 fb fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ce2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce31:	e8 f0 77 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ce36:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011ce39:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ce3f:	83 ec 0c             	sub    $0xc,%esp
f011ce42:	50                   	push   %eax
f011ce43:	e8 d3 b0 fe ff       	call   f0107f1b <kfree>
f011ce48:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce4b:	e8 d6 77 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ce50:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce53:	74 17                	je     f011ce6c <test_kmalloc_firstfit1+0x846>
f011ce55:	83 ec 04             	sub    $0x4,%esp
f011ce58:	68 28 91 13 f0       	push   $0xf0139128
f011ce5d:	68 29 03 00 00       	push   $0x329
f011ce62:	68 0e 91 13 f0       	push   $0xf013910e
f011ce67:	e8 44 33 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ce6c:	e8 0f fb fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ce71:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ce74:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ce79:	74 17                	je     f011ce92 <test_kmalloc_firstfit1+0x86c>
f011ce7b:	83 ec 04             	sub    $0x4,%esp
f011ce7e:	68 6b 95 13 f0       	push   $0xf013956b
f011ce83:	68 2a 03 00 00       	push   $0x32a
f011ce88:	68 0e 91 13 f0       	push   $0xf013910e
f011ce8d:	e8 1e 33 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ce92:	e8 e9 fa fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ce97:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce9a:	e8 87 77 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ce9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cea2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cea8:	83 ec 0c             	sub    $0xc,%esp
f011ceab:	50                   	push   %eax
f011ceac:	e8 6a b0 fe ff       	call   f0107f1b <kfree>
f011ceb1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ceb4:	e8 6d 77 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ceb9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cebc:	74 17                	je     f011ced5 <test_kmalloc_firstfit1+0x8af>
f011cebe:	83 ec 04             	sub    $0x4,%esp
f011cec1:	68 28 91 13 f0       	push   $0xf0139128
f011cec6:	68 30 03 00 00       	push   $0x330
f011cecb:	68 0e 91 13 f0       	push   $0xf013910e
f011ced0:	e8 db 32 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011ced5:	e8 a6 fa fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ceda:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cedd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cee2:	74 17                	je     f011cefb <test_kmalloc_firstfit1+0x8d5>
f011cee4:	83 ec 04             	sub    $0x4,%esp
f011cee7:	68 6b 95 13 f0       	push   $0xf013956b
f011ceec:	68 31 03 00 00       	push   $0x331
f011cef1:	68 0e 91 13 f0       	push   $0xf013910e
f011cef6:	e8 b5 32 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cefb:	e8 80 fa fe ff       	call   f010c980 <sys_calculate_free_frames>
f011cf00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf03:	e8 1e 77 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cf08:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011cf0b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cf11:	83 ec 0c             	sub    $0xc,%esp
f011cf14:	50                   	push   %eax
f011cf15:	e8 01 b0 fe ff       	call   f0107f1b <kfree>
f011cf1a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf1d:	e8 04 77 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cf22:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf25:	74 17                	je     f011cf3e <test_kmalloc_firstfit1+0x918>
f011cf27:	83 ec 04             	sub    $0x4,%esp
f011cf2a:	68 28 91 13 f0       	push   $0xf0139128
f011cf2f:	68 37 03 00 00       	push   $0x337
f011cf34:	68 0e 91 13 f0       	push   $0xf013910e
f011cf39:	e8 72 32 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011cf3e:	e8 3d fa fe ff       	call   f010c980 <sys_calculate_free_frames>
f011cf43:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cf46:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cf4b:	74 17                	je     f011cf64 <test_kmalloc_firstfit1+0x93e>
f011cf4d:	83 ec 04             	sub    $0x4,%esp
f011cf50:	68 6b 95 13 f0       	push   $0xf013956b
f011cf55:	68 38 03 00 00       	push   $0x338
f011cf5a:	68 0e 91 13 f0       	push   $0xf013910e
f011cf5f:	e8 4c 32 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cf64:	e8 17 fa fe ff       	call   f010c980 <sys_calculate_free_frames>
f011cf69:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf6c:	e8 b5 76 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011cf71:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011cf74:	83 ec 0c             	sub    $0xc,%esp
f011cf77:	68 00 fc 07 00       	push   $0x7fc00
f011cf7c:	e8 80 af fe ff       	call   f0107f01 <kmalloc>
f011cf81:	83 c4 10             	add    $0x10,%esp
f011cf84:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cf8a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cf90:	89 c1                	mov    %eax,%ecx
f011cf92:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cf99:	10 00 00 
f011cf9c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011cfa1:	0f b6 d0             	movzbl %al,%edx
f011cfa4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cfaa:	01 d0                	add    %edx,%eax
f011cfac:	48                   	dec    %eax
f011cfad:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cfb3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cfb9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfbe:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011cfc4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cfca:	29 d0                	sub    %edx,%eax
f011cfcc:	89 c3                	mov    %eax,%ebx
f011cfce:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011cfd5:	10 00 00 
f011cfd8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011cfdd:	0f b6 c0             	movzbl %al,%eax
f011cfe0:	c1 e0 04             	shl    $0x4,%eax
f011cfe3:	89 c2                	mov    %eax,%edx
f011cfe5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011cfeb:	01 d0                	add    %edx,%eax
f011cfed:	48                   	dec    %eax
f011cfee:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011cff4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cffa:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfff:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d005:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d00b:	29 d0                	sub    %edx,%eax
f011d00d:	01 d8                	add    %ebx,%eax
f011d00f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d014:	39 c1                	cmp    %eax,%ecx
f011d016:	74 17                	je     f011d02f <test_kmalloc_firstfit1+0xa09>
f011d018:	83 ec 04             	sub    $0x4,%esp
f011d01b:	68 28 95 13 f0       	push   $0xf0139528
f011d020:	68 41 03 00 00       	push   $0x341
f011d025:	68 0e 91 13 f0       	push   $0xf013910e
f011d02a:	e8 81 31 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d02f:	e8 f2 75 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d034:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d037:	74 17                	je     f011d050 <test_kmalloc_firstfit1+0xa2a>
f011d039:	83 ec 04             	sub    $0x4,%esp
f011d03c:	68 28 91 13 f0       	push   $0xf0139128
f011d041:	68 42 03 00 00       	push   $0x342
f011d046:	68 0e 91 13 f0       	push   $0xf013910e
f011d04b:	e8 60 31 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d050:	e8 2b f9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d055:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d058:	29 c2                	sub    %eax,%edx
f011d05a:	89 d0                	mov    %edx,%eax
f011d05c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d061:	74 17                	je     f011d07a <test_kmalloc_firstfit1+0xa54>
f011d063:	83 ec 04             	sub    $0x4,%esp
f011d066:	68 58 95 13 f0       	push   $0xf0139558
f011d06b:	68 43 03 00 00       	push   $0x343
f011d070:	68 0e 91 13 f0       	push   $0xf013910e
f011d075:	e8 36 31 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d07a:	e8 01 f9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d07f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d082:	e8 9f 75 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d087:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d08a:	83 ec 0c             	sub    $0xc,%esp
f011d08d:	68 00 fc 0f 00       	push   $0xffc00
f011d092:	e8 6a ae fe ff       	call   f0107f01 <kmalloc>
f011d097:	83 c4 10             	add    $0x10,%esp
f011d09a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d0a0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d0a6:	89 c1                	mov    %eax,%ecx
f011d0a8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d0af:	10 00 00 
f011d0b2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d0b7:	0f b6 d0             	movzbl %al,%edx
f011d0ba:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d0c0:	01 d0                	add    %edx,%eax
f011d0c2:	48                   	dec    %eax
f011d0c3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d0c9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d0cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0d4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d0da:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d0e0:	29 d0                	sub    %edx,%eax
f011d0e2:	89 c3                	mov    %eax,%ebx
f011d0e4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d0eb:	10 00 00 
f011d0ee:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d0f3:	0f b6 c0             	movzbl %al,%eax
f011d0f6:	c1 e0 04             	shl    $0x4,%eax
f011d0f9:	89 c2                	mov    %eax,%edx
f011d0fb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d101:	01 d0                	add    %edx,%eax
f011d103:	48                   	dec    %eax
f011d104:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d10a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d110:	ba 00 00 00 00       	mov    $0x0,%edx
f011d115:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d11b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d121:	29 d0                	sub    %edx,%eax
f011d123:	01 d8                	add    %ebx,%eax
f011d125:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d12a:	39 c1                	cmp    %eax,%ecx
f011d12c:	74 17                	je     f011d145 <test_kmalloc_firstfit1+0xb1f>
f011d12e:	83 ec 04             	sub    $0x4,%esp
f011d131:	68 28 95 13 f0       	push   $0xf0139528
f011d136:	68 49 03 00 00       	push   $0x349
f011d13b:	68 0e 91 13 f0       	push   $0xf013910e
f011d140:	e8 6b 30 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d145:	e8 dc 74 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d14a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d14d:	74 17                	je     f011d166 <test_kmalloc_firstfit1+0xb40>
f011d14f:	83 ec 04             	sub    $0x4,%esp
f011d152:	68 28 91 13 f0       	push   $0xf0139128
f011d157:	68 4a 03 00 00       	push   $0x34a
f011d15c:	68 0e 91 13 f0       	push   $0xf013910e
f011d161:	e8 4a 30 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d166:	e8 15 f8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d16b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d16e:	29 c2                	sub    %eax,%edx
f011d170:	89 d0                	mov    %edx,%eax
f011d172:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d177:	74 17                	je     f011d190 <test_kmalloc_firstfit1+0xb6a>
f011d179:	83 ec 04             	sub    $0x4,%esp
f011d17c:	68 58 95 13 f0       	push   $0xf0139558
f011d181:	68 4b 03 00 00       	push   $0x34b
f011d186:	68 0e 91 13 f0       	push   $0xf013910e
f011d18b:	e8 20 30 fe ff       	call   f01001b0 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d190:	e8 eb f7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d195:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d198:	e8 89 74 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d19d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d1a0:	83 ec 0c             	sub    $0xc,%esp
f011d1a3:	68 00 fc 03 00       	push   $0x3fc00
f011d1a8:	e8 54 ad fe ff       	call   f0107f01 <kmalloc>
f011d1ad:	83 c4 10             	add    $0x10,%esp
f011d1b0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d1b6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d1bc:	89 c1                	mov    %eax,%ecx
f011d1be:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d1c5:	10 00 00 
f011d1c8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d1cd:	0f b6 d0             	movzbl %al,%edx
f011d1d0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d1d6:	01 d0                	add    %edx,%eax
f011d1d8:	48                   	dec    %eax
f011d1d9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d1df:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d1e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1ea:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d1f0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d1f6:	29 d0                	sub    %edx,%eax
f011d1f8:	89 c3                	mov    %eax,%ebx
f011d1fa:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d201:	10 00 00 
f011d204:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d209:	0f b6 c0             	movzbl %al,%eax
f011d20c:	c1 e0 04             	shl    $0x4,%eax
f011d20f:	89 c2                	mov    %eax,%edx
f011d211:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d217:	01 d0                	add    %edx,%eax
f011d219:	48                   	dec    %eax
f011d21a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d220:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d226:	ba 00 00 00 00       	mov    $0x0,%edx
f011d22b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d231:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d237:	29 d0                	sub    %edx,%eax
f011d239:	01 d8                	add    %ebx,%eax
f011d23b:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d240:	39 c1                	cmp    %eax,%ecx
f011d242:	74 17                	je     f011d25b <test_kmalloc_firstfit1+0xc35>
f011d244:	83 ec 04             	sub    $0x4,%esp
f011d247:	68 28 95 13 f0       	push   $0xf0139528
f011d24c:	68 52 03 00 00       	push   $0x352
f011d251:	68 0e 91 13 f0       	push   $0xf013910e
f011d256:	e8 55 2f fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d25b:	e8 c6 73 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d260:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d263:	74 17                	je     f011d27c <test_kmalloc_firstfit1+0xc56>
f011d265:	83 ec 04             	sub    $0x4,%esp
f011d268:	68 28 91 13 f0       	push   $0xf0139128
f011d26d:	68 53 03 00 00       	push   $0x353
f011d272:	68 0e 91 13 f0       	push   $0xf013910e
f011d277:	e8 34 2f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d27c:	e8 ff f6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d281:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d284:	29 c2                	sub    %eax,%edx
f011d286:	89 d0                	mov    %edx,%eax
f011d288:	83 f8 40             	cmp    $0x40,%eax
f011d28b:	74 17                	je     f011d2a4 <test_kmalloc_firstfit1+0xc7e>
f011d28d:	83 ec 04             	sub    $0x4,%esp
f011d290:	68 58 95 13 f0       	push   $0xf0139558
f011d295:	68 54 03 00 00       	push   $0x354
f011d29a:	68 0e 91 13 f0       	push   $0xf013910e
f011d29f:	e8 0c 2f fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d2a4:	e8 d7 f6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d2a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2ac:	e8 75 73 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d2b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d2b4:	83 ec 0c             	sub    $0xc,%esp
f011d2b7:	68 00 00 20 00       	push   $0x200000
f011d2bc:	e8 40 ac fe ff       	call   f0107f01 <kmalloc>
f011d2c1:	83 c4 10             	add    $0x10,%esp
f011d2c4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d2ca:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d2d0:	89 c1                	mov    %eax,%ecx
f011d2d2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d2d9:	10 00 00 
f011d2dc:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d2e1:	0f b6 d0             	movzbl %al,%edx
f011d2e4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d2ea:	01 d0                	add    %edx,%eax
f011d2ec:	48                   	dec    %eax
f011d2ed:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d2f3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d2f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2fe:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d304:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d30a:	29 d0                	sub    %edx,%eax
f011d30c:	89 c3                	mov    %eax,%ebx
f011d30e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d315:	10 00 00 
f011d318:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d31d:	0f b6 c0             	movzbl %al,%eax
f011d320:	c1 e0 04             	shl    $0x4,%eax
f011d323:	89 c2                	mov    %eax,%edx
f011d325:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d32b:	01 d0                	add    %edx,%eax
f011d32d:	48                   	dec    %eax
f011d32e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d334:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d33a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d33f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d345:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d34b:	29 d0                	sub    %edx,%eax
f011d34d:	01 d8                	add    %ebx,%eax
f011d34f:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d354:	39 c1                	cmp    %eax,%ecx
f011d356:	74 17                	je     f011d36f <test_kmalloc_firstfit1+0xd49>
f011d358:	83 ec 04             	sub    $0x4,%esp
f011d35b:	68 28 95 13 f0       	push   $0xf0139528
f011d360:	68 5a 03 00 00       	push   $0x35a
f011d365:	68 0e 91 13 f0       	push   $0xf013910e
f011d36a:	e8 41 2e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d36f:	e8 0c f6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d374:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d377:	29 c2                	sub    %eax,%edx
f011d379:	89 d0                	mov    %edx,%eax
f011d37b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d380:	74 17                	je     f011d399 <test_kmalloc_firstfit1+0xd73>
f011d382:	83 ec 04             	sub    $0x4,%esp
f011d385:	68 58 95 13 f0       	push   $0xf0139558
f011d38a:	68 5b 03 00 00       	push   $0x35b
f011d38f:	68 0e 91 13 f0       	push   $0xf013910e
f011d394:	e8 17 2e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d399:	e8 88 72 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d39e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3a1:	74 17                	je     f011d3ba <test_kmalloc_firstfit1+0xd94>
f011d3a3:	83 ec 04             	sub    $0x4,%esp
f011d3a6:	68 28 91 13 f0       	push   $0xf0139128
f011d3ab:	68 5c 03 00 00       	push   $0x35c
f011d3b0:	68 0e 91 13 f0       	push   $0xf013910e
f011d3b5:	e8 f6 2d fe ff       	call   f01001b0 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d3ba:	e8 c1 f5 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d3bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3c2:	e8 5f 72 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d3c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d3ca:	83 ec 0c             	sub    $0xc,%esp
f011d3cd:	68 00 fc 3f 00       	push   $0x3ffc00
f011d3d2:	e8 2a ab fe ff       	call   f0107f01 <kmalloc>
f011d3d7:	83 c4 10             	add    $0x10,%esp
f011d3da:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d3e0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d3e6:	89 c1                	mov    %eax,%ecx
f011d3e8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d3ef:	10 00 00 
f011d3f2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d3f7:	0f b6 d0             	movzbl %al,%edx
f011d3fa:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d400:	01 d0                	add    %edx,%eax
f011d402:	48                   	dec    %eax
f011d403:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d409:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d40f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d414:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d41a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d420:	29 d0                	sub    %edx,%eax
f011d422:	89 c3                	mov    %eax,%ebx
f011d424:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d42b:	10 00 00 
f011d42e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d433:	0f b6 c0             	movzbl %al,%eax
f011d436:	c1 e0 04             	shl    $0x4,%eax
f011d439:	89 c2                	mov    %eax,%edx
f011d43b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d441:	01 d0                	add    %edx,%eax
f011d443:	48                   	dec    %eax
f011d444:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d44a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d450:	ba 00 00 00 00       	mov    $0x0,%edx
f011d455:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d45b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d461:	29 d0                	sub    %edx,%eax
f011d463:	01 d8                	add    %ebx,%eax
f011d465:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d46a:	39 c1                	cmp    %eax,%ecx
f011d46c:	74 17                	je     f011d485 <test_kmalloc_firstfit1+0xe5f>
f011d46e:	83 ec 04             	sub    $0x4,%esp
f011d471:	68 28 95 13 f0       	push   $0xf0139528
f011d476:	68 63 03 00 00       	push   $0x363
f011d47b:	68 0e 91 13 f0       	push   $0xf013910e
f011d480:	e8 2b 2d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d485:	e8 9c 71 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d48a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d48d:	74 17                	je     f011d4a6 <test_kmalloc_firstfit1+0xe80>
f011d48f:	83 ec 04             	sub    $0x4,%esp
f011d492:	68 28 91 13 f0       	push   $0xf0139128
f011d497:	68 64 03 00 00       	push   $0x364
f011d49c:	68 0e 91 13 f0       	push   $0xf013910e
f011d4a1:	e8 0a 2d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d4a6:	e8 d5 f4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d4ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d4ae:	29 c2                	sub    %eax,%edx
f011d4b0:	89 d0                	mov    %edx,%eax
f011d4b2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d4b7:	74 17                	je     f011d4d0 <test_kmalloc_firstfit1+0xeaa>
f011d4b9:	83 ec 04             	sub    $0x4,%esp
f011d4bc:	68 58 95 13 f0       	push   $0xf0139558
f011d4c1:	68 65 03 00 00       	push   $0x365
f011d4c6:	68 0e 91 13 f0       	push   $0xf013910e
f011d4cb:	e8 e0 2c fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d4d0:	e8 ab f4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d4d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4d8:	e8 49 71 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d4dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d4e0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d4e6:	83 ec 0c             	sub    $0xc,%esp
f011d4e9:	50                   	push   %eax
f011d4ea:	e8 2c aa fe ff       	call   f0107f1b <kfree>
f011d4ef:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4f2:	e8 2f 71 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d4f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d4fa:	74 17                	je     f011d513 <test_kmalloc_firstfit1+0xeed>
f011d4fc:	83 ec 04             	sub    $0x4,%esp
f011d4ff:	68 28 91 13 f0       	push   $0xf0139128
f011d504:	68 6e 03 00 00       	push   $0x36e
f011d509:	68 0e 91 13 f0       	push   $0xf013910e
f011d50e:	e8 9d 2c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d513:	e8 68 f4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d518:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d51b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d520:	74 17                	je     f011d539 <test_kmalloc_firstfit1+0xf13>
f011d522:	83 ec 04             	sub    $0x4,%esp
f011d525:	68 6b 95 13 f0       	push   $0xf013956b
f011d52a:	68 6f 03 00 00       	push   $0x36f
f011d52f:	68 0e 91 13 f0       	push   $0xf013910e
f011d534:	e8 77 2c fe ff       	call   f01001b0 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d539:	e8 42 f4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d53e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d541:	e8 e0 70 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d546:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d549:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d54f:	83 ec 0c             	sub    $0xc,%esp
f011d552:	50                   	push   %eax
f011d553:	e8 c3 a9 fe ff       	call   f0107f1b <kfree>
f011d558:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d55b:	e8 c6 70 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d560:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d563:	74 17                	je     f011d57c <test_kmalloc_firstfit1+0xf56>
f011d565:	83 ec 04             	sub    $0x4,%esp
f011d568:	68 28 91 13 f0       	push   $0xf0139128
f011d56d:	68 75 03 00 00       	push   $0x375
f011d572:	68 0e 91 13 f0       	push   $0xf013910e
f011d577:	e8 34 2c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d57c:	e8 ff f3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d581:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d584:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d589:	74 17                	je     f011d5a2 <test_kmalloc_firstfit1+0xf7c>
f011d58b:	83 ec 04             	sub    $0x4,%esp
f011d58e:	68 6b 95 13 f0       	push   $0xf013956b
f011d593:	68 76 03 00 00       	push   $0x376
f011d598:	68 0e 91 13 f0       	push   $0xf013910e
f011d59d:	e8 0e 2c fe ff       	call   f01001b0 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d5a2:	e8 d9 f3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d5a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5aa:	e8 77 70 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d5af:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d5b2:	83 ec 0c             	sub    $0xc,%esp
f011d5b5:	68 00 00 10 00       	push   $0x100000
f011d5ba:	e8 42 a9 fe ff       	call   f0107f01 <kmalloc>
f011d5bf:	83 c4 10             	add    $0x10,%esp
f011d5c2:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d5c8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d5ce:	89 c1                	mov    %eax,%ecx
f011d5d0:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d5d7:	10 00 00 
f011d5da:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d5df:	0f b6 d0             	movzbl %al,%edx
f011d5e2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d5e8:	01 d0                	add    %edx,%eax
f011d5ea:	48                   	dec    %eax
f011d5eb:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d5f1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d5f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5fc:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d602:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d608:	29 d0                	sub    %edx,%eax
f011d60a:	89 c3                	mov    %eax,%ebx
f011d60c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d613:	10 00 00 
f011d616:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d61b:	0f b6 c0             	movzbl %al,%eax
f011d61e:	c1 e0 04             	shl    $0x4,%eax
f011d621:	89 c2                	mov    %eax,%edx
f011d623:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d629:	01 d0                	add    %edx,%eax
f011d62b:	48                   	dec    %eax
f011d62c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d632:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d638:	ba 00 00 00 00       	mov    $0x0,%edx
f011d63d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d643:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d649:	29 d0                	sub    %edx,%eax
f011d64b:	01 d8                	add    %ebx,%eax
f011d64d:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d652:	39 c1                	cmp    %eax,%ecx
f011d654:	74 17                	je     f011d66d <test_kmalloc_firstfit1+0x1047>
f011d656:	83 ec 04             	sub    $0x4,%esp
f011d659:	68 28 95 13 f0       	push   $0xf0139528
f011d65e:	68 80 03 00 00       	push   $0x380
f011d663:	68 0e 91 13 f0       	push   $0xf013910e
f011d668:	e8 43 2b fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d66d:	e8 b4 6f fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d672:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d675:	74 17                	je     f011d68e <test_kmalloc_firstfit1+0x1068>
f011d677:	83 ec 04             	sub    $0x4,%esp
f011d67a:	68 28 91 13 f0       	push   $0xf0139128
f011d67f:	68 81 03 00 00       	push   $0x381
f011d684:	68 0e 91 13 f0       	push   $0xf013910e
f011d689:	e8 22 2b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d68e:	e8 ed f2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d693:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d696:	29 c2                	sub    %eax,%edx
f011d698:	89 d0                	mov    %edx,%eax
f011d69a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d69f:	74 17                	je     f011d6b8 <test_kmalloc_firstfit1+0x1092>
f011d6a1:	83 ec 04             	sub    $0x4,%esp
f011d6a4:	68 58 95 13 f0       	push   $0xf0139558
f011d6a9:	68 82 03 00 00       	push   $0x382
f011d6ae:	68 0e 91 13 f0       	push   $0xf013910e
f011d6b3:	e8 f8 2a fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d6b8:	83 ec 0c             	sub    $0xc,%esp
f011d6bb:	68 04 97 13 f0       	push   $0xf0139704
f011d6c0:	e8 6c 37 fe ff       	call   f0100e31 <cprintf>
f011d6c5:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d6c8:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d6cd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d6d0:	5b                   	pop    %ebx
f011d6d1:	5f                   	pop    %edi
f011d6d2:	5d                   	pop    %ebp
f011d6d3:	c3                   	ret    

f011d6d4 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d6d4:	55                   	push   %ebp
f011d6d5:	89 e5                	mov    %esp,%ebp
f011d6d7:	57                   	push   %edi
f011d6d8:	53                   	push   %ebx
f011d6d9:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011d6df:	83 ec 0c             	sub    $0xc,%esp
f011d6e2:	68 50 90 13 f0       	push   $0xf0139050
f011d6e7:	e8 45 37 fe ff       	call   f0100e31 <cprintf>
f011d6ec:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d6ef:	83 ec 0c             	sub    $0xc,%esp
f011d6f2:	68 80 90 13 f0       	push   $0xf0139080
f011d6f7:	e8 35 37 fe ff       	call   f0100e31 <cprintf>
f011d6fc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d6ff:	83 ec 0c             	sub    $0xc,%esp
f011d702:	68 50 90 13 f0       	push   $0xf0139050
f011d707:	e8 25 37 fe ff       	call   f0100e31 <cprintf>
f011d70c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d70f:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f011d715:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d71a:	b8 00 00 00 00       	mov    $0x0,%eax
f011d71f:	89 d7                	mov    %edx,%edi
f011d721:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d723:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d72a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d72f:	0f b6 d0             	movzbl %al,%edx
f011d732:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d735:	01 d0                	add    %edx,%eax
f011d737:	48                   	dec    %eax
f011d738:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d73b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d73e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d743:	f7 75 f4             	divl   -0xc(%ebp)
f011d746:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d749:	29 d0                	sub    %edx,%eax
f011d74b:	89 c1                	mov    %eax,%ecx
f011d74d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d754:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d759:	0f b6 c0             	movzbl %al,%eax
f011d75c:	c1 e0 04             	shl    $0x4,%eax
f011d75f:	89 c2                	mov    %eax,%edx
f011d761:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d764:	01 d0                	add    %edx,%eax
f011d766:	48                   	dec    %eax
f011d767:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d76a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d76d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d772:	f7 75 ec             	divl   -0x14(%ebp)
f011d775:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d778:	29 d0                	sub    %edx,%eax
f011d77a:	01 c8                	add    %ecx,%eax
f011d77c:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d781:	29 c2                	sub    %eax,%edx
f011d783:	89 d0                	mov    %edx,%eax
f011d785:	83 ec 0c             	sub    $0xc,%esp
f011d788:	50                   	push   %eax
f011d789:	e8 73 a7 fe ff       	call   f0107f01 <kmalloc>
f011d78e:	83 c4 10             	add    $0x10,%esp
f011d791:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d797:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d79d:	85 c0                	test   %eax,%eax
f011d79f:	74 17                	je     f011d7b8 <test_kmalloc_firstfit2+0xe4>
f011d7a1:	83 ec 04             	sub    $0x4,%esp
f011d7a4:	68 50 97 13 f0       	push   $0xf0139750
f011d7a9:	68 97 03 00 00       	push   $0x397
f011d7ae:	68 0e 91 13 f0       	push   $0xf013910e
f011d7b3:	e8 f8 29 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d7b8:	e8 c3 f1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d7bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7c0:	e8 61 6e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d7c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d7c8:	83 ec 0c             	sub    $0xc,%esp
f011d7cb:	68 00 fc 1f 00       	push   $0x1ffc00
f011d7d0:	e8 2c a7 fe ff       	call   f0107f01 <kmalloc>
f011d7d5:	83 c4 10             	add    $0x10,%esp
f011d7d8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d7de:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d7e4:	89 c1                	mov    %eax,%ecx
f011d7e6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011d7ed:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d7f2:	0f b6 d0             	movzbl %al,%edx
f011d7f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d7f8:	01 d0                	add    %edx,%eax
f011d7fa:	48                   	dec    %eax
f011d7fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011d7fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d801:	ba 00 00 00 00       	mov    $0x0,%edx
f011d806:	f7 75 dc             	divl   -0x24(%ebp)
f011d809:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d80c:	29 d0                	sub    %edx,%eax
f011d80e:	89 c3                	mov    %eax,%ebx
f011d810:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d817:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d81c:	0f b6 c0             	movzbl %al,%eax
f011d81f:	c1 e0 04             	shl    $0x4,%eax
f011d822:	89 c2                	mov    %eax,%edx
f011d824:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d827:	01 d0                	add    %edx,%eax
f011d829:	48                   	dec    %eax
f011d82a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d82d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d830:	ba 00 00 00 00       	mov    $0x0,%edx
f011d835:	f7 75 d4             	divl   -0x2c(%ebp)
f011d838:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d83b:	29 d0                	sub    %edx,%eax
f011d83d:	01 d8                	add    %ebx,%eax
f011d83f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d844:	39 c1                	cmp    %eax,%ecx
f011d846:	74 17                	je     f011d85f <test_kmalloc_firstfit2+0x18b>
f011d848:	83 ec 04             	sub    $0x4,%esp
f011d84b:	68 28 95 13 f0       	push   $0xf0139528
f011d850:	68 a1 03 00 00       	push   $0x3a1
f011d855:	68 0e 91 13 f0       	push   $0xf013910e
f011d85a:	e8 51 29 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d85f:	e8 c2 6d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d864:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d867:	74 17                	je     f011d880 <test_kmalloc_firstfit2+0x1ac>
f011d869:	83 ec 04             	sub    $0x4,%esp
f011d86c:	68 28 91 13 f0       	push   $0xf0139128
f011d871:	68 a2 03 00 00       	push   $0x3a2
f011d876:	68 0e 91 13 f0       	push   $0xf013910e
f011d87b:	e8 30 29 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d880:	e8 fb f0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d885:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d888:	29 c2                	sub    %eax,%edx
f011d88a:	89 d0                	mov    %edx,%eax
f011d88c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d891:	74 17                	je     f011d8aa <test_kmalloc_firstfit2+0x1d6>
f011d893:	83 ec 04             	sub    $0x4,%esp
f011d896:	68 58 95 13 f0       	push   $0xf0139558
f011d89b:	68 a3 03 00 00       	push   $0x3a3
f011d8a0:	68 0e 91 13 f0       	push   $0xf013910e
f011d8a5:	e8 06 29 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d8aa:	e8 d1 f0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d8af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d8b2:	e8 6f 6d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d8b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d8ba:	83 ec 0c             	sub    $0xc,%esp
f011d8bd:	68 00 fc 1f 00       	push   $0x1ffc00
f011d8c2:	e8 3a a6 fe ff       	call   f0107f01 <kmalloc>
f011d8c7:	83 c4 10             	add    $0x10,%esp
f011d8ca:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d8d0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d8d6:	89 c1                	mov    %eax,%ecx
f011d8d8:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d8df:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d8e4:	0f b6 d0             	movzbl %al,%edx
f011d8e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d8ea:	01 d0                	add    %edx,%eax
f011d8ec:	48                   	dec    %eax
f011d8ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d8f0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d8f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8f8:	f7 75 cc             	divl   -0x34(%ebp)
f011d8fb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d8fe:	29 d0                	sub    %edx,%eax
f011d900:	89 c3                	mov    %eax,%ebx
f011d902:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d909:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d90e:	0f b6 c0             	movzbl %al,%eax
f011d911:	c1 e0 04             	shl    $0x4,%eax
f011d914:	89 c2                	mov    %eax,%edx
f011d916:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d919:	01 d0                	add    %edx,%eax
f011d91b:	48                   	dec    %eax
f011d91c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d91f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d922:	ba 00 00 00 00       	mov    $0x0,%edx
f011d927:	f7 75 c4             	divl   -0x3c(%ebp)
f011d92a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d92d:	29 d0                	sub    %edx,%eax
f011d92f:	01 d8                	add    %ebx,%eax
f011d931:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d936:	39 c1                	cmp    %eax,%ecx
f011d938:	74 17                	je     f011d951 <test_kmalloc_firstfit2+0x27d>
f011d93a:	83 ec 04             	sub    $0x4,%esp
f011d93d:	68 28 95 13 f0       	push   $0xf0139528
f011d942:	68 a9 03 00 00       	push   $0x3a9
f011d947:	68 0e 91 13 f0       	push   $0xf013910e
f011d94c:	e8 5f 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d951:	e8 d0 6c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d956:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d959:	74 17                	je     f011d972 <test_kmalloc_firstfit2+0x29e>
f011d95b:	83 ec 04             	sub    $0x4,%esp
f011d95e:	68 28 91 13 f0       	push   $0xf0139128
f011d963:	68 aa 03 00 00       	push   $0x3aa
f011d968:	68 0e 91 13 f0       	push   $0xf013910e
f011d96d:	e8 3e 28 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d972:	e8 09 f0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d977:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d97a:	29 c2                	sub    %eax,%edx
f011d97c:	89 d0                	mov    %edx,%eax
f011d97e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d983:	74 17                	je     f011d99c <test_kmalloc_firstfit2+0x2c8>
f011d985:	83 ec 04             	sub    $0x4,%esp
f011d988:	68 58 95 13 f0       	push   $0xf0139558
f011d98d:	68 ab 03 00 00       	push   $0x3ab
f011d992:	68 0e 91 13 f0       	push   $0xf013910e
f011d997:	e8 14 28 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d99c:	e8 df ef fe ff       	call   f010c980 <sys_calculate_free_frames>
f011d9a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9a4:	e8 7d 6c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011d9a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d9ac:	83 ec 0c             	sub    $0xc,%esp
f011d9af:	68 00 08 00 00       	push   $0x800
f011d9b4:	e8 48 a5 fe ff       	call   f0107f01 <kmalloc>
f011d9b9:	83 c4 10             	add    $0x10,%esp
f011d9bc:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d9c2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d9c8:	89 c1                	mov    %eax,%ecx
f011d9ca:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d9d1:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011d9d6:	0f b6 d0             	movzbl %al,%edx
f011d9d9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d9dc:	01 d0                	add    %edx,%eax
f011d9de:	48                   	dec    %eax
f011d9df:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d9e2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d9e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9ea:	f7 75 bc             	divl   -0x44(%ebp)
f011d9ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d9f0:	29 d0                	sub    %edx,%eax
f011d9f2:	89 c3                	mov    %eax,%ebx
f011d9f4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d9fb:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011da00:	0f b6 c0             	movzbl %al,%eax
f011da03:	c1 e0 04             	shl    $0x4,%eax
f011da06:	89 c2                	mov    %eax,%edx
f011da08:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011da0b:	01 d0                	add    %edx,%eax
f011da0d:	48                   	dec    %eax
f011da0e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011da11:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da14:	ba 00 00 00 00       	mov    $0x0,%edx
f011da19:	f7 75 b4             	divl   -0x4c(%ebp)
f011da1c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da1f:	29 d0                	sub    %edx,%eax
f011da21:	01 d8                	add    %ebx,%eax
f011da23:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011da28:	39 c1                	cmp    %eax,%ecx
f011da2a:	73 17                	jae    f011da43 <test_kmalloc_firstfit2+0x36f>
f011da2c:	83 ec 04             	sub    $0x4,%esp
f011da2f:	68 28 95 13 f0       	push   $0xf0139528
f011da34:	68 b1 03 00 00       	push   $0x3b1
f011da39:	68 0e 91 13 f0       	push   $0xf013910e
f011da3e:	e8 6d 27 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da43:	e8 de 6b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011da48:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011da4b:	74 17                	je     f011da64 <test_kmalloc_firstfit2+0x390>
f011da4d:	83 ec 04             	sub    $0x4,%esp
f011da50:	68 28 91 13 f0       	push   $0xf0139128
f011da55:	68 b2 03 00 00       	push   $0x3b2
f011da5a:	68 0e 91 13 f0       	push   $0xf013910e
f011da5f:	e8 4c 27 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011da64:	e8 17 ef fe ff       	call   f010c980 <sys_calculate_free_frames>
f011da69:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011da6c:	29 c2                	sub    %eax,%edx
f011da6e:	89 d0                	mov    %edx,%eax
f011da70:	83 f8 01             	cmp    $0x1,%eax
f011da73:	74 17                	je     f011da8c <test_kmalloc_firstfit2+0x3b8>
f011da75:	83 ec 04             	sub    $0x4,%esp
f011da78:	68 58 95 13 f0       	push   $0xf0139558
f011da7d:	68 b3 03 00 00       	push   $0x3b3
f011da82:	68 0e 91 13 f0       	push   $0xf013910e
f011da87:	e8 24 27 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011da8c:	e8 ef ee fe ff       	call   f010c980 <sys_calculate_free_frames>
f011da91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da94:	e8 8d 6b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011da99:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011da9c:	83 ec 0c             	sub    $0xc,%esp
f011da9f:	68 00 08 00 00       	push   $0x800
f011daa4:	e8 58 a4 fe ff       	call   f0107f01 <kmalloc>
f011daa9:	83 c4 10             	add    $0x10,%esp
f011daac:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011dab2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011dab8:	89 c1                	mov    %eax,%ecx
f011daba:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011dac1:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011dac6:	0f b6 d0             	movzbl %al,%edx
f011dac9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011dacc:	01 d0                	add    %edx,%eax
f011dace:	48                   	dec    %eax
f011dacf:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011dad2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dad5:	ba 00 00 00 00       	mov    $0x0,%edx
f011dada:	f7 75 ac             	divl   -0x54(%ebp)
f011dadd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dae0:	29 d0                	sub    %edx,%eax
f011dae2:	89 c3                	mov    %eax,%ebx
f011dae4:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011daeb:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011daf0:	0f b6 c0             	movzbl %al,%eax
f011daf3:	c1 e0 04             	shl    $0x4,%eax
f011daf6:	89 c2                	mov    %eax,%edx
f011daf8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dafb:	01 d0                	add    %edx,%eax
f011dafd:	48                   	dec    %eax
f011dafe:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011db01:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011db04:	ba 00 00 00 00       	mov    $0x0,%edx
f011db09:	f7 75 a4             	divl   -0x5c(%ebp)
f011db0c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011db0f:	29 d0                	sub    %edx,%eax
f011db11:	01 d8                	add    %ebx,%eax
f011db13:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011db18:	39 c1                	cmp    %eax,%ecx
f011db1a:	74 17                	je     f011db33 <test_kmalloc_firstfit2+0x45f>
f011db1c:	83 ec 04             	sub    $0x4,%esp
f011db1f:	68 28 95 13 f0       	push   $0xf0139528
f011db24:	68 b9 03 00 00       	push   $0x3b9
f011db29:	68 0e 91 13 f0       	push   $0xf013910e
f011db2e:	e8 7d 26 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db33:	e8 ee 6a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011db38:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011db3b:	74 17                	je     f011db54 <test_kmalloc_firstfit2+0x480>
f011db3d:	83 ec 04             	sub    $0x4,%esp
f011db40:	68 28 91 13 f0       	push   $0xf0139128
f011db45:	68 ba 03 00 00       	push   $0x3ba
f011db4a:	68 0e 91 13 f0       	push   $0xf013910e
f011db4f:	e8 5c 26 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011db54:	e8 27 ee fe ff       	call   f010c980 <sys_calculate_free_frames>
f011db59:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011db5c:	29 c2                	sub    %eax,%edx
f011db5e:	89 d0                	mov    %edx,%eax
f011db60:	83 f8 01             	cmp    $0x1,%eax
f011db63:	74 17                	je     f011db7c <test_kmalloc_firstfit2+0x4a8>
f011db65:	83 ec 04             	sub    $0x4,%esp
f011db68:	68 58 95 13 f0       	push   $0xf0139558
f011db6d:	68 bb 03 00 00       	push   $0x3bb
f011db72:	68 0e 91 13 f0       	push   $0xf013910e
f011db77:	e8 34 26 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011db7c:	e8 ff ed fe ff       	call   f010c980 <sys_calculate_free_frames>
f011db81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db84:	e8 9d 6a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011db89:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011db8c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db92:	83 ec 0c             	sub    $0xc,%esp
f011db95:	50                   	push   %eax
f011db96:	e8 80 a3 fe ff       	call   f0107f1b <kfree>
f011db9b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db9e:	e8 83 6a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011dba3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dba6:	74 17                	je     f011dbbf <test_kmalloc_firstfit2+0x4eb>
f011dba8:	83 ec 04             	sub    $0x4,%esp
f011dbab:	68 28 91 13 f0       	push   $0xf0139128
f011dbb0:	68 c1 03 00 00       	push   $0x3c1
f011dbb5:	68 0e 91 13 f0       	push   $0xf013910e
f011dbba:	e8 f1 25 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011dbbf:	e8 bc ed fe ff       	call   f010c980 <sys_calculate_free_frames>
f011dbc4:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dbc7:	83 f8 01             	cmp    $0x1,%eax
f011dbca:	74 17                	je     f011dbe3 <test_kmalloc_firstfit2+0x50f>
f011dbcc:	83 ec 04             	sub    $0x4,%esp
f011dbcf:	68 6b 95 13 f0       	push   $0xf013956b
f011dbd4:	68 c2 03 00 00       	push   $0x3c2
f011dbd9:	68 0e 91 13 f0       	push   $0xf013910e
f011dbde:	e8 cd 25 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011dbe3:	e8 98 ed fe ff       	call   f010c980 <sys_calculate_free_frames>
f011dbe8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbeb:	e8 36 6a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011dbf0:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011dbf3:	83 ec 0c             	sub    $0xc,%esp
f011dbf6:	68 00 1c 00 00       	push   $0x1c00
f011dbfb:	e8 01 a3 fe ff       	call   f0107f01 <kmalloc>
f011dc00:	83 c4 10             	add    $0x10,%esp
f011dc03:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011dc09:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dc0f:	89 c1                	mov    %eax,%ecx
f011dc11:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011dc18:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011dc1d:	0f b6 d0             	movzbl %al,%edx
f011dc20:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011dc23:	01 d0                	add    %edx,%eax
f011dc25:	48                   	dec    %eax
f011dc26:	89 45 98             	mov    %eax,-0x68(%ebp)
f011dc29:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc31:	f7 75 9c             	divl   -0x64(%ebp)
f011dc34:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc37:	29 d0                	sub    %edx,%eax
f011dc39:	89 c3                	mov    %eax,%ebx
f011dc3b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011dc42:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011dc47:	0f b6 c0             	movzbl %al,%eax
f011dc4a:	c1 e0 04             	shl    $0x4,%eax
f011dc4d:	89 c2                	mov    %eax,%edx
f011dc4f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dc52:	01 d0                	add    %edx,%eax
f011dc54:	48                   	dec    %eax
f011dc55:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dc58:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dc5b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc60:	f7 75 94             	divl   -0x6c(%ebp)
f011dc63:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dc66:	29 d0                	sub    %edx,%eax
f011dc68:	01 d8                	add    %ebx,%eax
f011dc6a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011dc6f:	39 c1                	cmp    %eax,%ecx
f011dc71:	74 17                	je     f011dc8a <test_kmalloc_firstfit2+0x5b6>
f011dc73:	83 ec 04             	sub    $0x4,%esp
f011dc76:	68 28 95 13 f0       	push   $0xf0139528
f011dc7b:	68 c8 03 00 00       	push   $0x3c8
f011dc80:	68 0e 91 13 f0       	push   $0xf013910e
f011dc85:	e8 26 25 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc8a:	e8 97 69 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011dc8f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dc92:	74 17                	je     f011dcab <test_kmalloc_firstfit2+0x5d7>
f011dc94:	83 ec 04             	sub    $0x4,%esp
f011dc97:	68 28 91 13 f0       	push   $0xf0139128
f011dc9c:	68 c9 03 00 00       	push   $0x3c9
f011dca1:	68 0e 91 13 f0       	push   $0xf013910e
f011dca6:	e8 05 25 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011dcab:	e8 d0 ec fe ff       	call   f010c980 <sys_calculate_free_frames>
f011dcb0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dcb3:	29 c2                	sub    %eax,%edx
f011dcb5:	89 d0                	mov    %edx,%eax
f011dcb7:	83 f8 02             	cmp    $0x2,%eax
f011dcba:	74 17                	je     f011dcd3 <test_kmalloc_firstfit2+0x5ff>
f011dcbc:	83 ec 04             	sub    $0x4,%esp
f011dcbf:	68 58 95 13 f0       	push   $0xf0139558
f011dcc4:	68 ca 03 00 00       	push   $0x3ca
f011dcc9:	68 0e 91 13 f0       	push   $0xf013910e
f011dcce:	e8 dd 24 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dcd3:	e8 a8 ec fe ff       	call   f010c980 <sys_calculate_free_frames>
f011dcd8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dcdb:	e8 46 69 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011dce0:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011dce3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dce9:	83 ec 0c             	sub    $0xc,%esp
f011dcec:	50                   	push   %eax
f011dced:	e8 29 a2 fe ff       	call   f0107f1b <kfree>
f011dcf2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dcf5:	e8 2c 69 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011dcfa:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dcfd:	74 17                	je     f011dd16 <test_kmalloc_firstfit2+0x642>
f011dcff:	83 ec 04             	sub    $0x4,%esp
f011dd02:	68 28 91 13 f0       	push   $0xf0139128
f011dd07:	68 d0 03 00 00       	push   $0x3d0
f011dd0c:	68 0e 91 13 f0       	push   $0xf013910e
f011dd11:	e8 9a 24 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dd16:	e8 65 ec fe ff       	call   f010c980 <sys_calculate_free_frames>
f011dd1b:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dd1e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dd23:	74 17                	je     f011dd3c <test_kmalloc_firstfit2+0x668>
f011dd25:	83 ec 04             	sub    $0x4,%esp
f011dd28:	68 6b 95 13 f0       	push   $0xf013956b
f011dd2d:	68 d1 03 00 00       	push   $0x3d1
f011dd32:	68 0e 91 13 f0       	push   $0xf013910e
f011dd37:	e8 74 24 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011dd3c:	e8 3f ec fe ff       	call   f010c980 <sys_calculate_free_frames>
f011dd41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd44:	e8 dd 68 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011dd49:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011dd4c:	83 ec 0c             	sub    $0xc,%esp
f011dd4f:	68 00 fc 2f 00       	push   $0x2ffc00
f011dd54:	e8 a8 a1 fe ff       	call   f0107f01 <kmalloc>
f011dd59:	83 c4 10             	add    $0x10,%esp
f011dd5c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dd62:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dd68:	89 c1                	mov    %eax,%ecx
f011dd6a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011dd71:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011dd76:	0f b6 d0             	movzbl %al,%edx
f011dd79:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011dd7c:	01 d0                	add    %edx,%eax
f011dd7e:	48                   	dec    %eax
f011dd7f:	89 45 88             	mov    %eax,-0x78(%ebp)
f011dd82:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dd85:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd8a:	f7 75 8c             	divl   -0x74(%ebp)
f011dd8d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dd90:	29 d0                	sub    %edx,%eax
f011dd92:	89 c3                	mov    %eax,%ebx
f011dd94:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011dd9b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011dda0:	0f b6 c0             	movzbl %al,%eax
f011dda3:	c1 e0 04             	shl    $0x4,%eax
f011dda6:	89 c2                	mov    %eax,%edx
f011dda8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ddab:	01 d0                	add    %edx,%eax
f011ddad:	48                   	dec    %eax
f011ddae:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ddb1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ddb4:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddb9:	f7 75 84             	divl   -0x7c(%ebp)
f011ddbc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ddbf:	29 d0                	sub    %edx,%eax
f011ddc1:	01 d8                	add    %ebx,%eax
f011ddc3:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011ddc8:	39 c1                	cmp    %eax,%ecx
f011ddca:	74 17                	je     f011dde3 <test_kmalloc_firstfit2+0x70f>
f011ddcc:	83 ec 04             	sub    $0x4,%esp
f011ddcf:	68 28 95 13 f0       	push   $0xf0139528
f011ddd4:	68 d7 03 00 00       	push   $0x3d7
f011ddd9:	68 0e 91 13 f0       	push   $0xf013910e
f011ddde:	e8 cd 23 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dde3:	e8 3e 68 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011dde8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011ddeb:	74 17                	je     f011de04 <test_kmalloc_firstfit2+0x730>
f011dded:	83 ec 04             	sub    $0x4,%esp
f011ddf0:	68 28 91 13 f0       	push   $0xf0139128
f011ddf5:	68 d8 03 00 00       	push   $0x3d8
f011ddfa:	68 0e 91 13 f0       	push   $0xf013910e
f011ddff:	e8 ac 23 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011de04:	e8 77 eb fe ff       	call   f010c980 <sys_calculate_free_frames>
f011de09:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011de0c:	29 c2                	sub    %eax,%edx
f011de0e:	89 d0                	mov    %edx,%eax
f011de10:	3d 00 03 00 00       	cmp    $0x300,%eax
f011de15:	74 17                	je     f011de2e <test_kmalloc_firstfit2+0x75a>
f011de17:	83 ec 04             	sub    $0x4,%esp
f011de1a:	68 58 95 13 f0       	push   $0xf0139558
f011de1f:	68 d9 03 00 00       	push   $0x3d9
f011de24:	68 0e 91 13 f0       	push   $0xf013910e
f011de29:	e8 82 23 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011de2e:	e8 4d eb fe ff       	call   f010c980 <sys_calculate_free_frames>
f011de33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de36:	e8 eb 67 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011de3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011de3e:	83 ec 0c             	sub    $0xc,%esp
f011de41:	68 00 18 20 00       	push   $0x201800
f011de46:	e8 b6 a0 fe ff       	call   f0107f01 <kmalloc>
f011de4b:	83 c4 10             	add    $0x10,%esp
f011de4e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011de54:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011de5a:	89 c1                	mov    %eax,%ecx
f011de5c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011de63:	10 00 00 
f011de66:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011de6b:	0f b6 d0             	movzbl %al,%edx
f011de6e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011de74:	01 d0                	add    %edx,%eax
f011de76:	48                   	dec    %eax
f011de77:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011de7d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011de83:	ba 00 00 00 00       	mov    $0x0,%edx
f011de88:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011de8e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011de94:	29 d0                	sub    %edx,%eax
f011de96:	89 c3                	mov    %eax,%ebx
f011de98:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011de9f:	10 00 00 
f011dea2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011dea7:	0f b6 c0             	movzbl %al,%eax
f011deaa:	c1 e0 04             	shl    $0x4,%eax
f011dead:	89 c2                	mov    %eax,%edx
f011deaf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011deb5:	01 d0                	add    %edx,%eax
f011deb7:	48                   	dec    %eax
f011deb8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011debe:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dec4:	ba 00 00 00 00       	mov    $0x0,%edx
f011dec9:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011decf:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ded5:	29 d0                	sub    %edx,%eax
f011ded7:	01 d8                	add    %ebx,%eax
f011ded9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011dede:	39 c1                	cmp    %eax,%ecx
f011dee0:	74 17                	je     f011def9 <test_kmalloc_firstfit2+0x825>
f011dee2:	83 ec 04             	sub    $0x4,%esp
f011dee5:	68 28 95 13 f0       	push   $0xf0139528
f011deea:	68 df 03 00 00       	push   $0x3df
f011deef:	68 0e 91 13 f0       	push   $0xf013910e
f011def4:	e8 b7 22 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011def9:	e8 28 67 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011defe:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011df01:	74 17                	je     f011df1a <test_kmalloc_firstfit2+0x846>
f011df03:	83 ec 04             	sub    $0x4,%esp
f011df06:	68 28 91 13 f0       	push   $0xf0139128
f011df0b:	68 e0 03 00 00       	push   $0x3e0
f011df10:	68 0e 91 13 f0       	push   $0xf013910e
f011df15:	e8 96 22 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011df1a:	e8 61 ea fe ff       	call   f010c980 <sys_calculate_free_frames>
f011df1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011df22:	29 c2                	sub    %eax,%edx
f011df24:	89 d0                	mov    %edx,%eax
f011df26:	3d 02 02 00 00       	cmp    $0x202,%eax
f011df2b:	74 17                	je     f011df44 <test_kmalloc_firstfit2+0x870>
f011df2d:	83 ec 04             	sub    $0x4,%esp
f011df30:	68 58 95 13 f0       	push   $0xf0139558
f011df35:	68 e1 03 00 00       	push   $0x3e1
f011df3a:	68 0e 91 13 f0       	push   $0xf013910e
f011df3f:	e8 6c 22 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011df44:	e8 37 ea fe ff       	call   f010c980 <sys_calculate_free_frames>
f011df49:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df4c:	e8 d5 66 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011df51:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011df54:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011df5a:	83 ec 0c             	sub    $0xc,%esp
f011df5d:	50                   	push   %eax
f011df5e:	e8 b8 9f fe ff       	call   f0107f1b <kfree>
f011df63:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df66:	e8 bb 66 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011df6b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011df6e:	74 17                	je     f011df87 <test_kmalloc_firstfit2+0x8b3>
f011df70:	83 ec 04             	sub    $0x4,%esp
f011df73:	68 28 91 13 f0       	push   $0xf0139128
f011df78:	68 e7 03 00 00       	push   $0x3e7
f011df7d:	68 0e 91 13 f0       	push   $0xf013910e
f011df82:	e8 29 22 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011df87:	e8 f4 e9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011df8c:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011df8f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011df94:	74 17                	je     f011dfad <test_kmalloc_firstfit2+0x8d9>
f011df96:	83 ec 04             	sub    $0x4,%esp
f011df99:	68 6b 95 13 f0       	push   $0xf013956b
f011df9e:	68 e8 03 00 00       	push   $0x3e8
f011dfa3:	68 0e 91 13 f0       	push   $0xf013910e
f011dfa8:	e8 03 22 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011dfad:	e8 ce e9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011dfb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfb5:	e8 6c 66 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011dfba:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011dfbd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011dfc3:	83 ec 0c             	sub    $0xc,%esp
f011dfc6:	50                   	push   %eax
f011dfc7:	e8 4f 9f fe ff       	call   f0107f1b <kfree>
f011dfcc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dfcf:	e8 ac e9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011dfd4:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dfd7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dfdc:	74 17                	je     f011dff5 <test_kmalloc_firstfit2+0x921>
f011dfde:	83 ec 04             	sub    $0x4,%esp
f011dfe1:	68 6b 95 13 f0       	push   $0xf013956b
f011dfe6:	68 ee 03 00 00       	push   $0x3ee
f011dfeb:	68 0e 91 13 f0       	push   $0xf013910e
f011dff0:	e8 bb 21 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dff5:	e8 2c 66 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011dffa:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dffd:	74 17                	je     f011e016 <test_kmalloc_firstfit2+0x942>
f011dfff:	83 ec 04             	sub    $0x4,%esp
f011e002:	68 28 91 13 f0       	push   $0xf0139128
f011e007:	68 ef 03 00 00       	push   $0x3ef
f011e00c:	68 0e 91 13 f0       	push   $0xf013910e
f011e011:	e8 9a 21 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e016:	e8 65 e9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011e01b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e01e:	e8 03 66 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e023:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e026:	83 ec 0c             	sub    $0xc,%esp
f011e029:	68 00 fc 4f 00       	push   $0x4ffc00
f011e02e:	e8 ce 9e fe ff       	call   f0107f01 <kmalloc>
f011e033:	83 c4 10             	add    $0x10,%esp
f011e036:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e03c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e042:	89 c1                	mov    %eax,%ecx
f011e044:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e04b:	10 00 00 
f011e04e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e053:	0f b6 d0             	movzbl %al,%edx
f011e056:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e05c:	01 d0                	add    %edx,%eax
f011e05e:	48                   	dec    %eax
f011e05f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e065:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e06b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e070:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e076:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e07c:	29 d0                	sub    %edx,%eax
f011e07e:	89 c3                	mov    %eax,%ebx
f011e080:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e087:	10 00 00 
f011e08a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e08f:	0f b6 c0             	movzbl %al,%eax
f011e092:	c1 e0 04             	shl    $0x4,%eax
f011e095:	89 c2                	mov    %eax,%edx
f011e097:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e09d:	01 d0                	add    %edx,%eax
f011e09f:	48                   	dec    %eax
f011e0a0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e0a6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e0ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0b1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e0b7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e0bd:	29 d0                	sub    %edx,%eax
f011e0bf:	01 d8                	add    %ebx,%eax
f011e0c1:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e0c6:	39 c1                	cmp    %eax,%ecx
f011e0c8:	74 17                	je     f011e0e1 <test_kmalloc_firstfit2+0xa0d>
f011e0ca:	83 ec 04             	sub    $0x4,%esp
f011e0cd:	68 28 95 13 f0       	push   $0xf0139528
f011e0d2:	68 f5 03 00 00       	push   $0x3f5
f011e0d7:	68 0e 91 13 f0       	push   $0xf013910e
f011e0dc:	e8 cf 20 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0e1:	e8 40 65 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e0e6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e0e9:	74 17                	je     f011e102 <test_kmalloc_firstfit2+0xa2e>
f011e0eb:	83 ec 04             	sub    $0x4,%esp
f011e0ee:	68 28 91 13 f0       	push   $0xf0139128
f011e0f3:	68 f6 03 00 00       	push   $0x3f6
f011e0f8:	68 0e 91 13 f0       	push   $0xf013910e
f011e0fd:	e8 ae 20 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e102:	e8 79 e8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011e107:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e10a:	29 c2                	sub    %eax,%edx
f011e10c:	89 d0                	mov    %edx,%eax
f011e10e:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e113:	74 17                	je     f011e12c <test_kmalloc_firstfit2+0xa58>
f011e115:	83 ec 04             	sub    $0x4,%esp
f011e118:	68 58 95 13 f0       	push   $0xf0139558
f011e11d:	68 f7 03 00 00       	push   $0x3f7
f011e122:	68 0e 91 13 f0       	push   $0xf013910e
f011e127:	e8 84 20 fe ff       	call   f01001b0 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e12c:	e8 4f e8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011e131:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e134:	e8 ed 64 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e139:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e13c:	83 ec 0c             	sub    $0xc,%esp
f011e13f:	68 00 fc 2f 00       	push   $0x2ffc00
f011e144:	e8 b8 9d fe ff       	call   f0107f01 <kmalloc>
f011e149:	83 c4 10             	add    $0x10,%esp
f011e14c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e152:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e158:	89 c1                	mov    %eax,%ecx
f011e15a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e161:	10 00 00 
f011e164:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e169:	0f b6 d0             	movzbl %al,%edx
f011e16c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e172:	01 d0                	add    %edx,%eax
f011e174:	48                   	dec    %eax
f011e175:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e17b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e181:	ba 00 00 00 00       	mov    $0x0,%edx
f011e186:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e18c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e192:	29 d0                	sub    %edx,%eax
f011e194:	89 c3                	mov    %eax,%ebx
f011e196:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e19d:	10 00 00 
f011e1a0:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e1a5:	0f b6 c0             	movzbl %al,%eax
f011e1a8:	c1 e0 04             	shl    $0x4,%eax
f011e1ab:	89 c2                	mov    %eax,%edx
f011e1ad:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e1b3:	01 d0                	add    %edx,%eax
f011e1b5:	48                   	dec    %eax
f011e1b6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e1bc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e1c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1c7:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e1cd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e1d3:	29 d0                	sub    %edx,%eax
f011e1d5:	01 d8                	add    %ebx,%eax
f011e1d7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e1dc:	39 c1                	cmp    %eax,%ecx
f011e1de:	74 17                	je     f011e1f7 <test_kmalloc_firstfit2+0xb23>
f011e1e0:	83 ec 04             	sub    $0x4,%esp
f011e1e3:	68 28 95 13 f0       	push   $0xf0139528
f011e1e8:	68 05 04 00 00       	push   $0x405
f011e1ed:	68 0e 91 13 f0       	push   $0xf013910e
f011e1f2:	e8 b9 1f fe ff       	call   f01001b0 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1f7:	e8 2a 64 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e1fc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e1ff:	74 17                	je     f011e218 <test_kmalloc_firstfit2+0xb44>
f011e201:	83 ec 04             	sub    $0x4,%esp
f011e204:	68 28 91 13 f0       	push   $0xf0139128
f011e209:	68 06 04 00 00       	push   $0x406
f011e20e:	68 0e 91 13 f0       	push   $0xf013910e
f011e213:	e8 98 1f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e218:	e8 63 e7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011e21d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e220:	29 c2                	sub    %eax,%edx
f011e222:	89 d0                	mov    %edx,%eax
f011e224:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e229:	74 17                	je     f011e242 <test_kmalloc_firstfit2+0xb6e>
f011e22b:	83 ec 04             	sub    $0x4,%esp
f011e22e:	68 58 95 13 f0       	push   $0xf0139558
f011e233:	68 07 04 00 00       	push   $0x407
f011e238:	68 0e 91 13 f0       	push   $0xf013910e
f011e23d:	e8 6e 1f fe ff       	call   f01001b0 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e242:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e249:	10 00 00 
f011e24c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e251:	0f b6 d0             	movzbl %al,%edx
f011e254:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e25a:	01 d0                	add    %edx,%eax
f011e25c:	48                   	dec    %eax
f011e25d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e263:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e269:	ba 00 00 00 00       	mov    $0x0,%edx
f011e26e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e274:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e27a:	29 d0                	sub    %edx,%eax
f011e27c:	89 c1                	mov    %eax,%ecx
f011e27e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e285:	10 00 00 
f011e288:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e28d:	0f b6 c0             	movzbl %al,%eax
f011e290:	c1 e0 04             	shl    $0x4,%eax
f011e293:	89 c2                	mov    %eax,%edx
f011e295:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e29b:	01 d0                	add    %edx,%eax
f011e29d:	48                   	dec    %eax
f011e29e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e2a4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e2aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2af:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e2b5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e2bb:	29 d0                	sub    %edx,%eax
f011e2bd:	01 c8                	add    %ecx,%eax
f011e2bf:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e2c4:	29 c2                	sub    %eax,%edx
f011e2c6:	89 d0                	mov    %edx,%eax
f011e2c8:	83 ec 0c             	sub    $0xc,%esp
f011e2cb:	50                   	push   %eax
f011e2cc:	e8 30 9c fe ff       	call   f0107f01 <kmalloc>
f011e2d1:	83 c4 10             	add    $0x10,%esp
f011e2d4:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e2da:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e2e0:	85 c0                	test   %eax,%eax
f011e2e2:	74 17                	je     f011e2fb <test_kmalloc_firstfit2+0xc27>
f011e2e4:	83 ec 04             	sub    $0x4,%esp
f011e2e7:	68 58 96 13 f0       	push   $0xf0139658
f011e2ec:	68 0d 04 00 00       	push   $0x40d
f011e2f1:	68 0e 91 13 f0       	push   $0xf013910e
f011e2f6:	e8 b5 1e fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e2fb:	83 ec 0c             	sub    $0xc,%esp
f011e2fe:	68 98 97 13 f0       	push   $0xf0139798
f011e303:	e8 29 2b fe ff       	call   f0100e31 <cprintf>
f011e308:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e30b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e310:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e313:	5b                   	pop    %ebx
f011e314:	5f                   	pop    %edi
f011e315:	5d                   	pop    %ebp
f011e316:	c3                   	ret    

f011e317 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e317:	55                   	push   %ebp
f011e318:	89 e5                	mov    %esp,%ebp
f011e31a:	57                   	push   %edi
f011e31b:	53                   	push   %ebx
f011e31c:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f011e322:	83 ec 0c             	sub    $0xc,%esp
f011e325:	68 50 90 13 f0       	push   $0xf0139050
f011e32a:	e8 02 2b fe ff       	call   f0100e31 <cprintf>
f011e32f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e332:	83 ec 0c             	sub    $0xc,%esp
f011e335:	68 80 90 13 f0       	push   $0xf0139080
f011e33a:	e8 f2 2a fe ff       	call   f0100e31 <cprintf>
f011e33f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e342:	83 ec 0c             	sub    $0xc,%esp
f011e345:	68 50 90 13 f0       	push   $0xf0139050
f011e34a:	e8 e2 2a fe ff       	call   f0100e31 <cprintf>
f011e34f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e352:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f011e358:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e35d:	b8 00 00 00 00       	mov    $0x0,%eax
f011e362:	89 d7                	mov    %edx,%edi
f011e364:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e366:	e8 15 e6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011e36b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e36e:	e8 b3 62 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e373:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e376:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e37d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e384:	eb 1f                	jmp    f011e3a5 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e386:	83 ec 0c             	sub    $0xc,%esp
f011e389:	68 00 00 20 00       	push   $0x200000
f011e38e:	e8 6e 9b fe ff       	call   f0107f01 <kmalloc>
f011e393:	83 c4 10             	add    $0x10,%esp
f011e396:	89 c2                	mov    %eax,%edx
f011e398:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e39b:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e3a2:	ff 45 f4             	incl   -0xc(%ebp)
f011e3a5:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e3a9:	7e db                	jle    f011e386 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e3ab:	83 ec 0c             	sub    $0xc,%esp
f011e3ae:	68 00 b0 1f 00       	push   $0x1fb000
f011e3b3:	e8 49 9b fe ff       	call   f0107f01 <kmalloc>
f011e3b8:	83 c4 10             	add    $0x10,%esp
f011e3bb:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e3c1:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e3c7:	89 c1                	mov    %eax,%ecx
f011e3c9:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e3d0:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e3d5:	0f b6 d0             	movzbl %al,%edx
f011e3d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e3db:	01 d0                	add    %edx,%eax
f011e3dd:	48                   	dec    %eax
f011e3de:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e3e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e3e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3e9:	f7 75 e4             	divl   -0x1c(%ebp)
f011e3ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e3ef:	29 d0                	sub    %edx,%eax
f011e3f1:	89 c3                	mov    %eax,%ebx
f011e3f3:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e3fa:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e3ff:	0f b6 c0             	movzbl %al,%eax
f011e402:	c1 e0 04             	shl    $0x4,%eax
f011e405:	89 c2                	mov    %eax,%edx
f011e407:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e40a:	01 d0                	add    %edx,%eax
f011e40c:	48                   	dec    %eax
f011e40d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e410:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e413:	ba 00 00 00 00       	mov    $0x0,%edx
f011e418:	f7 75 dc             	divl   -0x24(%ebp)
f011e41b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e41e:	29 d0                	sub    %edx,%eax
f011e420:	01 d8                	add    %ebx,%eax
f011e422:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e427:	39 c1                	cmp    %eax,%ecx
f011e429:	0f 85 34 03 00 00    	jne    f011e763 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e42f:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e435:	89 c1                	mov    %eax,%ecx
f011e437:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e43e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e443:	0f b6 d0             	movzbl %al,%edx
f011e446:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e449:	01 d0                	add    %edx,%eax
f011e44b:	48                   	dec    %eax
f011e44c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e44f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e452:	ba 00 00 00 00       	mov    $0x0,%edx
f011e457:	f7 75 d4             	divl   -0x2c(%ebp)
f011e45a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e45d:	29 d0                	sub    %edx,%eax
f011e45f:	89 c3                	mov    %eax,%ebx
f011e461:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e468:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e46d:	0f b6 c0             	movzbl %al,%eax
f011e470:	c1 e0 04             	shl    $0x4,%eax
f011e473:	89 c2                	mov    %eax,%edx
f011e475:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e478:	01 d0                	add    %edx,%eax
f011e47a:	48                   	dec    %eax
f011e47b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e47e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e481:	ba 00 00 00 00       	mov    $0x0,%edx
f011e486:	f7 75 cc             	divl   -0x34(%ebp)
f011e489:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e48c:	29 d0                	sub    %edx,%eax
f011e48e:	01 d8                	add    %ebx,%eax
f011e490:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e495:	39 c1                	cmp    %eax,%ecx
f011e497:	0f 85 c6 02 00 00    	jne    f011e763 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e49d:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011e4a3:	89 c1                	mov    %eax,%ecx
f011e4a5:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e4ac:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e4b1:	0f b6 d0             	movzbl %al,%edx
f011e4b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e4b7:	01 d0                	add    %edx,%eax
f011e4b9:	48                   	dec    %eax
f011e4ba:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e4bd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e4c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4c5:	f7 75 c4             	divl   -0x3c(%ebp)
f011e4c8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e4cb:	29 d0                	sub    %edx,%eax
f011e4cd:	89 c3                	mov    %eax,%ebx
f011e4cf:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e4d6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e4db:	0f b6 c0             	movzbl %al,%eax
f011e4de:	c1 e0 04             	shl    $0x4,%eax
f011e4e1:	89 c2                	mov    %eax,%edx
f011e4e3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e4e6:	01 d0                	add    %edx,%eax
f011e4e8:	48                   	dec    %eax
f011e4e9:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e4ec:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e4ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4f4:	f7 75 bc             	divl   -0x44(%ebp)
f011e4f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e4fa:	29 d0                	sub    %edx,%eax
f011e4fc:	01 d8                	add    %ebx,%eax
f011e4fe:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e503:	39 c1                	cmp    %eax,%ecx
f011e505:	0f 85 58 02 00 00    	jne    f011e763 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e50b:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e511:	89 c1                	mov    %eax,%ecx
f011e513:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e51a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e51f:	0f b6 d0             	movzbl %al,%edx
f011e522:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e525:	01 d0                	add    %edx,%eax
f011e527:	48                   	dec    %eax
f011e528:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e52b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e52e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e533:	f7 75 b4             	divl   -0x4c(%ebp)
f011e536:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e539:	29 d0                	sub    %edx,%eax
f011e53b:	89 c3                	mov    %eax,%ebx
f011e53d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e544:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e549:	0f b6 c0             	movzbl %al,%eax
f011e54c:	c1 e0 04             	shl    $0x4,%eax
f011e54f:	89 c2                	mov    %eax,%edx
f011e551:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e554:	01 d0                	add    %edx,%eax
f011e556:	48                   	dec    %eax
f011e557:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e55a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e55d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e562:	f7 75 ac             	divl   -0x54(%ebp)
f011e565:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e568:	29 d0                	sub    %edx,%eax
f011e56a:	01 d8                	add    %ebx,%eax
f011e56c:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e571:	39 c1                	cmp    %eax,%ecx
f011e573:	0f 85 ea 01 00 00    	jne    f011e763 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e579:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f011e57f:	89 c1                	mov    %eax,%ecx
f011e581:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e588:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e58d:	0f b6 d0             	movzbl %al,%edx
f011e590:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e593:	01 d0                	add    %edx,%eax
f011e595:	48                   	dec    %eax
f011e596:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e599:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e59c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5a1:	f7 75 a4             	divl   -0x5c(%ebp)
f011e5a4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e5a7:	29 d0                	sub    %edx,%eax
f011e5a9:	89 c3                	mov    %eax,%ebx
f011e5ab:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e5b2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e5b7:	0f b6 c0             	movzbl %al,%eax
f011e5ba:	c1 e0 04             	shl    $0x4,%eax
f011e5bd:	89 c2                	mov    %eax,%edx
f011e5bf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e5c2:	01 d0                	add    %edx,%eax
f011e5c4:	48                   	dec    %eax
f011e5c5:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e5c8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e5cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5d0:	f7 75 9c             	divl   -0x64(%ebp)
f011e5d3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e5d6:	29 d0                	sub    %edx,%eax
f011e5d8:	01 d8                	add    %ebx,%eax
f011e5da:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e5df:	39 c1                	cmp    %eax,%ecx
f011e5e1:	0f 85 7c 01 00 00    	jne    f011e763 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e5e7:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011e5ed:	89 c1                	mov    %eax,%ecx
f011e5ef:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e5f6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e5fb:	0f b6 d0             	movzbl %al,%edx
f011e5fe:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e601:	01 d0                	add    %edx,%eax
f011e603:	48                   	dec    %eax
f011e604:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e607:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e60a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e60f:	f7 75 94             	divl   -0x6c(%ebp)
f011e612:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e615:	29 d0                	sub    %edx,%eax
f011e617:	89 c3                	mov    %eax,%ebx
f011e619:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e620:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e625:	0f b6 c0             	movzbl %al,%eax
f011e628:	c1 e0 04             	shl    $0x4,%eax
f011e62b:	89 c2                	mov    %eax,%edx
f011e62d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e630:	01 d0                	add    %edx,%eax
f011e632:	48                   	dec    %eax
f011e633:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e636:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e639:	ba 00 00 00 00       	mov    $0x0,%edx
f011e63e:	f7 75 8c             	divl   -0x74(%ebp)
f011e641:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e644:	29 d0                	sub    %edx,%eax
f011e646:	01 d8                	add    %ebx,%eax
f011e648:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e64d:	39 c1                	cmp    %eax,%ecx
f011e64f:	0f 85 0e 01 00 00    	jne    f011e763 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e655:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f011e65b:	89 c1                	mov    %eax,%ecx
f011e65d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e664:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e669:	0f b6 d0             	movzbl %al,%edx
f011e66c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e66f:	01 d0                	add    %edx,%eax
f011e671:	48                   	dec    %eax
f011e672:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e675:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e678:	ba 00 00 00 00       	mov    $0x0,%edx
f011e67d:	f7 75 84             	divl   -0x7c(%ebp)
f011e680:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e683:	29 d0                	sub    %edx,%eax
f011e685:	89 c3                	mov    %eax,%ebx
f011e687:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e68e:	10 00 00 
f011e691:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e696:	0f b6 c0             	movzbl %al,%eax
f011e699:	c1 e0 04             	shl    $0x4,%eax
f011e69c:	89 c2                	mov    %eax,%edx
f011e69e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e6a4:	01 d0                	add    %edx,%eax
f011e6a6:	48                   	dec    %eax
f011e6a7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e6ad:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e6b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6b8:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e6be:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e6c4:	29 d0                	sub    %edx,%eax
f011e6c6:	01 d8                	add    %ebx,%eax
f011e6c8:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e6cd:	39 c1                	cmp    %eax,%ecx
f011e6cf:	0f 85 8e 00 00 00    	jne    f011e763 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e6d5:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011e6db:	89 c1                	mov    %eax,%ecx
f011e6dd:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e6e4:	10 00 00 
f011e6e7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e6ec:	0f b6 d0             	movzbl %al,%edx
f011e6ef:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e6f5:	01 d0                	add    %edx,%eax
f011e6f7:	48                   	dec    %eax
f011e6f8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e6fe:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e704:	ba 00 00 00 00       	mov    $0x0,%edx
f011e709:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e70f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e715:	29 d0                	sub    %edx,%eax
f011e717:	89 c3                	mov    %eax,%ebx
f011e719:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e720:	10 00 00 
f011e723:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e728:	0f b6 c0             	movzbl %al,%eax
f011e72b:	c1 e0 04             	shl    $0x4,%eax
f011e72e:	89 c2                	mov    %eax,%edx
f011e730:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e736:	01 d0                	add    %edx,%eax
f011e738:	48                   	dec    %eax
f011e739:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e73f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e745:	ba 00 00 00 00       	mov    $0x0,%edx
f011e74a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e750:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e756:	29 d0                	sub    %edx,%eax
f011e758:	01 d8                	add    %ebx,%eax
f011e75a:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e75f:	39 c1                	cmp    %eax,%ecx
f011e761:	74 17                	je     f011e77a <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e763:	83 ec 04             	sub    $0x4,%esp
f011e766:	68 e4 97 13 f0       	push   $0xf01397e4
f011e76b:	68 31 04 00 00       	push   $0x431
f011e770:	68 0e 91 13 f0       	push   $0xf013910e
f011e775:	e8 36 1a fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e77a:	e8 a7 5e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e77f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e782:	74 17                	je     f011e79b <test_kmalloc_worstfit+0x484>
f011e784:	83 ec 04             	sub    $0x4,%esp
f011e787:	68 28 91 13 f0       	push   $0xf0139128
f011e78c:	68 33 04 00 00       	push   $0x433
f011e791:	68 0e 91 13 f0       	push   $0xf013910e
f011e796:	e8 15 1a fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e79b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e79e:	e8 dd e1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011e7a3:	29 c3                	sub    %eax,%ebx
f011e7a5:	89 d8                	mov    %ebx,%eax
f011e7a7:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e7ac:	74 17                	je     f011e7c5 <test_kmalloc_worstfit+0x4ae>
f011e7ae:	83 ec 04             	sub    $0x4,%esp
f011e7b1:	68 cb 93 13 f0       	push   $0xf01393cb
f011e7b6:	68 34 04 00 00       	push   $0x434
f011e7bb:	68 0e 91 13 f0       	push   $0xf013910e
f011e7c0:	e8 eb 19 fe ff       	call   f01001b0 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e7c5:	e8 b6 e1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011e7ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e7cd:	e8 54 5e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e7d2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e7d5:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e7db:	83 ec 0c             	sub    $0xc,%esp
f011e7de:	50                   	push   %eax
f011e7df:	e8 37 97 fe ff       	call   f0107f1b <kfree>
f011e7e4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e7e7:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e7ed:	83 ec 0c             	sub    $0xc,%esp
f011e7f0:	50                   	push   %eax
f011e7f1:	e8 25 97 fe ff       	call   f0107f1b <kfree>
f011e7f6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e7f9:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011e7ff:	83 ec 0c             	sub    $0xc,%esp
f011e802:	50                   	push   %eax
f011e803:	e8 13 97 fe ff       	call   f0107f1b <kfree>
f011e808:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e80b:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e811:	83 ec 0c             	sub    $0xc,%esp
f011e814:	50                   	push   %eax
f011e815:	e8 01 97 fe ff       	call   f0107f1b <kfree>
f011e81a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e81d:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f011e823:	83 ec 0c             	sub    $0xc,%esp
f011e826:	50                   	push   %eax
f011e827:	e8 ef 96 fe ff       	call   f0107f1b <kfree>
f011e82c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e82f:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f011e835:	83 ec 0c             	sub    $0xc,%esp
f011e838:	50                   	push   %eax
f011e839:	e8 dd 96 fe ff       	call   f0107f1b <kfree>
f011e83e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e841:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f011e847:	83 ec 0c             	sub    $0xc,%esp
f011e84a:	50                   	push   %eax
f011e84b:	e8 cb 96 fe ff       	call   f0107f1b <kfree>
f011e850:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e853:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f011e859:	83 ec 0c             	sub    $0xc,%esp
f011e85c:	50                   	push   %eax
f011e85d:	e8 b9 96 fe ff       	call   f0107f1b <kfree>
f011e862:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e865:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011e86b:	83 ec 0c             	sub    $0xc,%esp
f011e86e:	50                   	push   %eax
f011e86f:	e8 a7 96 fe ff       	call   f0107f1b <kfree>
f011e874:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e877:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f011e87d:	83 ec 0c             	sub    $0xc,%esp
f011e880:	50                   	push   %eax
f011e881:	e8 95 96 fe ff       	call   f0107f1b <kfree>
f011e886:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e889:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e88f:	83 ec 0c             	sub    $0xc,%esp
f011e892:	50                   	push   %eax
f011e893:	e8 83 96 fe ff       	call   f0107f1b <kfree>
f011e898:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e89b:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011e8a1:	83 ec 0c             	sub    $0xc,%esp
f011e8a4:	50                   	push   %eax
f011e8a5:	e8 71 96 fe ff       	call   f0107f1b <kfree>
f011e8aa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e8ad:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011e8b3:	83 ec 0c             	sub    $0xc,%esp
f011e8b6:	50                   	push   %eax
f011e8b7:	e8 5f 96 fe ff       	call   f0107f1b <kfree>
f011e8bc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e8bf:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011e8c5:	83 ec 0c             	sub    $0xc,%esp
f011e8c8:	50                   	push   %eax
f011e8c9:	e8 4d 96 fe ff       	call   f0107f1b <kfree>
f011e8ce:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e8d1:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011e8d7:	83 ec 0c             	sub    $0xc,%esp
f011e8da:	50                   	push   %eax
f011e8db:	e8 3b 96 fe ff       	call   f0107f1b <kfree>
f011e8e0:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8e3:	e8 3e 5d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e8e8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e8eb:	74 17                	je     f011e904 <test_kmalloc_worstfit+0x5ed>
f011e8ed:	83 ec 04             	sub    $0x4,%esp
f011e8f0:	68 28 91 13 f0       	push   $0xf0139128
f011e8f5:	68 4a 04 00 00       	push   $0x44a
f011e8fa:	68 0e 91 13 f0       	push   $0xf013910e
f011e8ff:	e8 ac 18 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e904:	e8 77 e0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011e909:	89 c2                	mov    %eax,%edx
f011e90b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e90e:	29 c2                	sub    %eax,%edx
f011e910:	89 d0                	mov    %edx,%eax
f011e912:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e917:	74 17                	je     f011e930 <test_kmalloc_worstfit+0x619>
f011e919:	83 ec 04             	sub    $0x4,%esp
f011e91c:	68 dc 93 13 f0       	push   $0xf01393dc
f011e921:	68 4b 04 00 00       	push   $0x44b
f011e926:	68 0e 91 13 f0       	push   $0xf013910e
f011e92b:	e8 80 18 fe ff       	call   f01001b0 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e930:	e8 4b e0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011e935:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e938:	e8 e9 5c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e93d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e940:	83 ec 0c             	sub    $0xc,%esp
f011e943:	68 00 00 10 00       	push   $0x100000
f011e948:	e8 b4 95 fe ff       	call   f0107f01 <kmalloc>
f011e94d:	83 c4 10             	add    $0x10,%esp
f011e950:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e956:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011e95d:	10 00 00 
f011e960:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e965:	0f b6 d0             	movzbl %al,%edx
f011e968:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e96e:	01 d0                	add    %edx,%eax
f011e970:	48                   	dec    %eax
f011e971:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011e977:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e97d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e982:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011e988:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e98e:	29 d0                	sub    %edx,%eax
f011e990:	89 c1                	mov    %eax,%ecx
f011e992:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011e999:	10 00 00 
f011e99c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011e9a1:	0f b6 c0             	movzbl %al,%eax
f011e9a4:	c1 e0 04             	shl    $0x4,%eax
f011e9a7:	89 c2                	mov    %eax,%edx
f011e9a9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e9af:	01 d0                	add    %edx,%eax
f011e9b1:	48                   	dec    %eax
f011e9b2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011e9b8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e9be:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9c3:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011e9c9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e9cf:	29 d0                	sub    %edx,%eax
f011e9d1:	01 c8                	add    %ecx,%eax
f011e9d3:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011e9d9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e9df:	39 c2                	cmp    %eax,%edx
f011e9e1:	74 17                	je     f011e9fa <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011e9e3:	83 ec 04             	sub    $0x4,%esp
f011e9e6:	68 28 98 13 f0       	push   $0xf0139828
f011e9eb:	68 52 04 00 00       	push   $0x452
f011e9f0:	68 0e 91 13 f0       	push   $0xf013910e
f011e9f5:	e8 b6 17 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e9fa:	e8 27 5c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011e9ff:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea02:	74 17                	je     f011ea1b <test_kmalloc_worstfit+0x704>
f011ea04:	83 ec 04             	sub    $0x4,%esp
f011ea07:	68 28 91 13 f0       	push   $0xf0139128
f011ea0c:	68 53 04 00 00       	push   $0x453
f011ea11:	68 0e 91 13 f0       	push   $0xf013910e
f011ea16:	e8 95 17 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea1b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea1e:	e8 5d df fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ea23:	29 c3                	sub    %eax,%ebx
f011ea25:	89 d8                	mov    %ebx,%eax
f011ea27:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ea2c:	74 17                	je     f011ea45 <test_kmalloc_worstfit+0x72e>
f011ea2e:	83 ec 04             	sub    $0x4,%esp
f011ea31:	68 46 96 13 f0       	push   $0xf0139646
f011ea36:	68 54 04 00 00       	push   $0x454
f011ea3b:	68 0e 91 13 f0       	push   $0xf013910e
f011ea40:	e8 6b 17 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ea45:	ff 45 e8             	incl   -0x18(%ebp)
f011ea48:	83 ec 08             	sub    $0x8,%esp
f011ea4b:	ff 75 e8             	pushl  -0x18(%ebp)
f011ea4e:	68 48 98 13 f0       	push   $0xf0139848
f011ea53:	e8 d9 23 fe ff       	call   f0100e31 <cprintf>
f011ea58:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ea5b:	e8 20 df fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ea60:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ea63:	e8 be 5b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ea68:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011ea6b:	83 ec 0c             	sub    $0xc,%esp
f011ea6e:	68 00 00 40 00       	push   $0x400000
f011ea73:	e8 89 94 fe ff       	call   f0107f01 <kmalloc>
f011ea78:	83 c4 10             	add    $0x10,%esp
f011ea7b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011ea81:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011ea88:	10 00 00 
f011ea8b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ea90:	0f b6 d0             	movzbl %al,%edx
f011ea93:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ea99:	01 d0                	add    %edx,%eax
f011ea9b:	48                   	dec    %eax
f011ea9c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011eaa2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eaa8:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaad:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011eab3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eab9:	29 d0                	sub    %edx,%eax
f011eabb:	89 c1                	mov    %eax,%ecx
f011eabd:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011eac4:	10 00 00 
f011eac7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011eacc:	0f b6 c0             	movzbl %al,%eax
f011eacf:	c1 e0 04             	shl    $0x4,%eax
f011ead2:	89 c2                	mov    %eax,%edx
f011ead4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011eada:	01 d0                	add    %edx,%eax
f011eadc:	48                   	dec    %eax
f011eadd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011eae3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011eae9:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaee:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011eaf4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011eafa:	29 d0                	sub    %edx,%eax
f011eafc:	01 c8                	add    %ecx,%eax
f011eafe:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011eb04:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eb0a:	39 c2                	cmp    %eax,%edx
f011eb0c:	74 17                	je     f011eb25 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011eb0e:	83 ec 04             	sub    $0x4,%esp
f011eb11:	68 28 98 13 f0       	push   $0xf0139828
f011eb16:	68 5b 04 00 00       	push   $0x45b
f011eb1b:	68 0e 91 13 f0       	push   $0xf013910e
f011eb20:	e8 8b 16 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb25:	e8 fc 5a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011eb2a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eb2d:	74 17                	je     f011eb46 <test_kmalloc_worstfit+0x82f>
f011eb2f:	83 ec 04             	sub    $0x4,%esp
f011eb32:	68 28 91 13 f0       	push   $0xf0139128
f011eb37:	68 5c 04 00 00       	push   $0x45c
f011eb3c:	68 0e 91 13 f0       	push   $0xf013910e
f011eb41:	e8 6a 16 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eb46:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eb49:	e8 32 de fe ff       	call   f010c980 <sys_calculate_free_frames>
f011eb4e:	29 c3                	sub    %eax,%ebx
f011eb50:	89 d8                	mov    %ebx,%eax
f011eb52:	3d 00 04 00 00       	cmp    $0x400,%eax
f011eb57:	74 17                	je     f011eb70 <test_kmalloc_worstfit+0x859>
f011eb59:	83 ec 04             	sub    $0x4,%esp
f011eb5c:	68 46 96 13 f0       	push   $0xf0139646
f011eb61:	68 5d 04 00 00       	push   $0x45d
f011eb66:	68 0e 91 13 f0       	push   $0xf013910e
f011eb6b:	e8 40 16 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eb70:	ff 45 e8             	incl   -0x18(%ebp)
f011eb73:	83 ec 08             	sub    $0x8,%esp
f011eb76:	ff 75 e8             	pushl  -0x18(%ebp)
f011eb79:	68 48 98 13 f0       	push   $0xf0139848
f011eb7e:	e8 ae 22 fe ff       	call   f0100e31 <cprintf>
f011eb83:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eb86:	e8 f5 dd fe ff       	call   f010c980 <sys_calculate_free_frames>
f011eb8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eb8e:	e8 93 5a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011eb93:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011eb96:	83 ec 0c             	sub    $0xc,%esp
f011eb99:	68 00 00 60 00       	push   $0x600000
f011eb9e:	e8 5e 93 fe ff       	call   f0107f01 <kmalloc>
f011eba3:	83 c4 10             	add    $0x10,%esp
f011eba6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ebac:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011ebb3:	10 00 00 
f011ebb6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ebbb:	0f b6 d0             	movzbl %al,%edx
f011ebbe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ebc4:	01 d0                	add    %edx,%eax
f011ebc6:	48                   	dec    %eax
f011ebc7:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011ebcd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ebd3:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebd8:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011ebde:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ebe4:	29 d0                	sub    %edx,%eax
f011ebe6:	89 c1                	mov    %eax,%ecx
f011ebe8:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011ebef:	10 00 00 
f011ebf2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ebf7:	0f b6 c0             	movzbl %al,%eax
f011ebfa:	c1 e0 04             	shl    $0x4,%eax
f011ebfd:	89 c2                	mov    %eax,%edx
f011ebff:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ec05:	01 d0                	add    %edx,%eax
f011ec07:	48                   	dec    %eax
f011ec08:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011ec0e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ec14:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec19:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011ec1f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ec25:	29 d0                	sub    %edx,%eax
f011ec27:	01 c8                	add    %ecx,%eax
f011ec29:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ec2f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ec35:	39 c2                	cmp    %eax,%edx
f011ec37:	74 17                	je     f011ec50 <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f011ec39:	83 ec 04             	sub    $0x4,%esp
f011ec3c:	68 28 98 13 f0       	push   $0xf0139828
f011ec41:	68 64 04 00 00       	push   $0x464
f011ec46:	68 0e 91 13 f0       	push   $0xf013910e
f011ec4b:	e8 60 15 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ec50:	e8 d1 59 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ec55:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ec58:	74 17                	je     f011ec71 <test_kmalloc_worstfit+0x95a>
f011ec5a:	83 ec 04             	sub    $0x4,%esp
f011ec5d:	68 28 91 13 f0       	push   $0xf0139128
f011ec62:	68 65 04 00 00       	push   $0x465
f011ec67:	68 0e 91 13 f0       	push   $0xf013910e
f011ec6c:	e8 3f 15 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ec71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ec74:	e8 07 dd fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ec79:	29 c3                	sub    %eax,%ebx
f011ec7b:	89 d8                	mov    %ebx,%eax
f011ec7d:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ec82:	74 17                	je     f011ec9b <test_kmalloc_worstfit+0x984>
f011ec84:	83 ec 04             	sub    $0x4,%esp
f011ec87:	68 46 96 13 f0       	push   $0xf0139646
f011ec8c:	68 66 04 00 00       	push   $0x466
f011ec91:	68 0e 91 13 f0       	push   $0xf013910e
f011ec96:	e8 15 15 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ec9b:	ff 45 e8             	incl   -0x18(%ebp)
f011ec9e:	83 ec 08             	sub    $0x8,%esp
f011eca1:	ff 75 e8             	pushl  -0x18(%ebp)
f011eca4:	68 48 98 13 f0       	push   $0xf0139848
f011eca9:	e8 83 21 fe ff       	call   f0100e31 <cprintf>
f011ecae:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ecb1:	e8 ca dc fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ecb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ecb9:	e8 68 59 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ecbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011ecc1:	83 ec 0c             	sub    $0xc,%esp
f011ecc4:	68 00 00 50 00       	push   $0x500000
f011ecc9:	e8 33 92 fe ff       	call   f0107f01 <kmalloc>
f011ecce:	83 c4 10             	add    $0x10,%esp
f011ecd1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011ecd7:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011ecde:	10 00 00 
f011ece1:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ece6:	0f b6 d0             	movzbl %al,%edx
f011ece9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ecef:	01 d0                	add    %edx,%eax
f011ecf1:	48                   	dec    %eax
f011ecf2:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011ecf8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ecfe:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed03:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011ed09:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ed0f:	29 d0                	sub    %edx,%eax
f011ed11:	89 c1                	mov    %eax,%ecx
f011ed13:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011ed1a:	10 00 00 
f011ed1d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ed22:	0f b6 c0             	movzbl %al,%eax
f011ed25:	c1 e0 04             	shl    $0x4,%eax
f011ed28:	89 c2                	mov    %eax,%edx
f011ed2a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ed30:	01 d0                	add    %edx,%eax
f011ed32:	48                   	dec    %eax
f011ed33:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011ed39:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed44:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011ed4a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed50:	29 d0                	sub    %edx,%eax
f011ed52:	01 c8                	add    %ecx,%eax
f011ed54:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011ed5a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ed60:	39 c2                	cmp    %eax,%edx
f011ed62:	74 17                	je     f011ed7b <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f011ed64:	83 ec 04             	sub    $0x4,%esp
f011ed67:	68 28 98 13 f0       	push   $0xf0139828
f011ed6c:	68 6d 04 00 00       	push   $0x46d
f011ed71:	68 0e 91 13 f0       	push   $0xf013910e
f011ed76:	e8 35 14 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed7b:	e8 a6 58 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ed80:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed83:	74 17                	je     f011ed9c <test_kmalloc_worstfit+0xa85>
f011ed85:	83 ec 04             	sub    $0x4,%esp
f011ed88:	68 28 91 13 f0       	push   $0xf0139128
f011ed8d:	68 6e 04 00 00       	push   $0x46e
f011ed92:	68 0e 91 13 f0       	push   $0xf013910e
f011ed97:	e8 14 14 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ed9c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed9f:	e8 dc db fe ff       	call   f010c980 <sys_calculate_free_frames>
f011eda4:	29 c3                	sub    %eax,%ebx
f011eda6:	89 d8                	mov    %ebx,%eax
f011eda8:	3d 00 05 00 00       	cmp    $0x500,%eax
f011edad:	74 17                	je     f011edc6 <test_kmalloc_worstfit+0xaaf>
f011edaf:	83 ec 04             	sub    $0x4,%esp
f011edb2:	68 46 96 13 f0       	push   $0xf0139646
f011edb7:	68 6f 04 00 00       	push   $0x46f
f011edbc:	68 0e 91 13 f0       	push   $0xf013910e
f011edc1:	e8 ea 13 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011edc6:	ff 45 e8             	incl   -0x18(%ebp)
f011edc9:	83 ec 08             	sub    $0x8,%esp
f011edcc:	ff 75 e8             	pushl  -0x18(%ebp)
f011edcf:	68 48 98 13 f0       	push   $0xf0139848
f011edd4:	e8 58 20 fe ff       	call   f0100e31 <cprintf>
f011edd9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eddc:	e8 9f db fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ede1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ede4:	e8 3d 58 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ede9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011edec:	83 ec 0c             	sub    $0xc,%esp
f011edef:	68 00 00 40 00       	push   $0x400000
f011edf4:	e8 08 91 fe ff       	call   f0107f01 <kmalloc>
f011edf9:	83 c4 10             	add    $0x10,%esp
f011edfc:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011ee02:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011ee09:	10 00 00 
f011ee0c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ee11:	0f b6 d0             	movzbl %al,%edx
f011ee14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ee1a:	01 d0                	add    %edx,%eax
f011ee1c:	48                   	dec    %eax
f011ee1d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011ee23:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ee29:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee2e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011ee34:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ee3a:	29 d0                	sub    %edx,%eax
f011ee3c:	89 c1                	mov    %eax,%ecx
f011ee3e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011ee45:	10 00 00 
f011ee48:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ee4d:	0f b6 c0             	movzbl %al,%eax
f011ee50:	c1 e0 04             	shl    $0x4,%eax
f011ee53:	89 c2                	mov    %eax,%edx
f011ee55:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ee5b:	01 d0                	add    %edx,%eax
f011ee5d:	48                   	dec    %eax
f011ee5e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011ee64:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ee6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee6f:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011ee75:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ee7b:	29 d0                	sub    %edx,%eax
f011ee7d:	01 c8                	add    %ecx,%eax
f011ee7f:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011ee85:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ee8b:	39 c2                	cmp    %eax,%edx
f011ee8d:	74 17                	je     f011eea6 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011ee8f:	83 ec 04             	sub    $0x4,%esp
f011ee92:	68 28 98 13 f0       	push   $0xf0139828
f011ee97:	68 76 04 00 00       	push   $0x476
f011ee9c:	68 0e 91 13 f0       	push   $0xf013910e
f011eea1:	e8 0a 13 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eea6:	e8 7b 57 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011eeab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eeae:	74 17                	je     f011eec7 <test_kmalloc_worstfit+0xbb0>
f011eeb0:	83 ec 04             	sub    $0x4,%esp
f011eeb3:	68 28 91 13 f0       	push   $0xf0139128
f011eeb8:	68 77 04 00 00       	push   $0x477
f011eebd:	68 0e 91 13 f0       	push   $0xf013910e
f011eec2:	e8 e9 12 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eec7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eeca:	e8 b1 da fe ff       	call   f010c980 <sys_calculate_free_frames>
f011eecf:	29 c3                	sub    %eax,%ebx
f011eed1:	89 d8                	mov    %ebx,%eax
f011eed3:	3d 00 04 00 00       	cmp    $0x400,%eax
f011eed8:	74 17                	je     f011eef1 <test_kmalloc_worstfit+0xbda>
f011eeda:	83 ec 04             	sub    $0x4,%esp
f011eedd:	68 46 96 13 f0       	push   $0xf0139646
f011eee2:	68 78 04 00 00       	push   $0x478
f011eee7:	68 0e 91 13 f0       	push   $0xf013910e
f011eeec:	e8 bf 12 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eef1:	ff 45 e8             	incl   -0x18(%ebp)
f011eef4:	83 ec 08             	sub    $0x8,%esp
f011eef7:	ff 75 e8             	pushl  -0x18(%ebp)
f011eefa:	68 48 98 13 f0       	push   $0xf0139848
f011eeff:	e8 2d 1f fe ff       	call   f0100e31 <cprintf>
f011ef04:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef07:	e8 74 da fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ef0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef0f:	e8 12 57 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ef14:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011ef17:	83 ec 0c             	sub    $0xc,%esp
f011ef1a:	68 00 00 20 00       	push   $0x200000
f011ef1f:	e8 dd 8f fe ff       	call   f0107f01 <kmalloc>
f011ef24:	83 c4 10             	add    $0x10,%esp
f011ef27:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011ef2d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ef34:	10 00 00 
f011ef37:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ef3c:	0f b6 d0             	movzbl %al,%edx
f011ef3f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ef45:	01 d0                	add    %edx,%eax
f011ef47:	48                   	dec    %eax
f011ef48:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ef4e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ef54:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef59:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ef5f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ef65:	29 d0                	sub    %edx,%eax
f011ef67:	89 c1                	mov    %eax,%ecx
f011ef69:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011ef70:	10 00 00 
f011ef73:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011ef78:	0f b6 c0             	movzbl %al,%eax
f011ef7b:	c1 e0 04             	shl    $0x4,%eax
f011ef7e:	89 c2                	mov    %eax,%edx
f011ef80:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ef86:	01 d0                	add    %edx,%eax
f011ef88:	48                   	dec    %eax
f011ef89:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011ef8f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ef95:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef9a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011efa0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011efa6:	29 d0                	sub    %edx,%eax
f011efa8:	01 c8                	add    %ecx,%eax
f011efaa:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011efb0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011efb6:	39 c2                	cmp    %eax,%edx
f011efb8:	74 17                	je     f011efd1 <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f011efba:	83 ec 04             	sub    $0x4,%esp
f011efbd:	68 28 98 13 f0       	push   $0xf0139828
f011efc2:	68 7f 04 00 00       	push   $0x47f
f011efc7:	68 0e 91 13 f0       	push   $0xf013910e
f011efcc:	e8 df 11 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efd1:	e8 50 56 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011efd6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011efd9:	74 17                	je     f011eff2 <test_kmalloc_worstfit+0xcdb>
f011efdb:	83 ec 04             	sub    $0x4,%esp
f011efde:	68 28 91 13 f0       	push   $0xf0139128
f011efe3:	68 80 04 00 00       	push   $0x480
f011efe8:	68 0e 91 13 f0       	push   $0xf013910e
f011efed:	e8 be 11 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eff2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eff5:	e8 86 d9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011effa:	29 c3                	sub    %eax,%ebx
f011effc:	89 d8                	mov    %ebx,%eax
f011effe:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f003:	74 17                	je     f011f01c <test_kmalloc_worstfit+0xd05>
f011f005:	83 ec 04             	sub    $0x4,%esp
f011f008:	68 46 96 13 f0       	push   $0xf0139646
f011f00d:	68 81 04 00 00       	push   $0x481
f011f012:	68 0e 91 13 f0       	push   $0xf013910e
f011f017:	e8 94 11 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f01c:	ff 45 e8             	incl   -0x18(%ebp)
f011f01f:	83 ec 08             	sub    $0x8,%esp
f011f022:	ff 75 e8             	pushl  -0x18(%ebp)
f011f025:	68 48 98 13 f0       	push   $0xf0139848
f011f02a:	e8 02 1e fe ff       	call   f0100e31 <cprintf>
f011f02f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f032:	e8 49 d9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f037:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f03a:	e8 e7 55 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f03f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f042:	83 ec 0c             	sub    $0xc,%esp
f011f045:	68 00 00 18 00       	push   $0x180000
f011f04a:	e8 b2 8e fe ff       	call   f0107f01 <kmalloc>
f011f04f:	83 c4 10             	add    $0x10,%esp
f011f052:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f058:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f05f:	10 00 00 
f011f062:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f067:	0f b6 d0             	movzbl %al,%edx
f011f06a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f070:	01 d0                	add    %edx,%eax
f011f072:	48                   	dec    %eax
f011f073:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f079:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f07f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f084:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f08a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f090:	29 d0                	sub    %edx,%eax
f011f092:	89 c1                	mov    %eax,%ecx
f011f094:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f09b:	10 00 00 
f011f09e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f0a3:	0f b6 c0             	movzbl %al,%eax
f011f0a6:	c1 e0 04             	shl    $0x4,%eax
f011f0a9:	89 c2                	mov    %eax,%edx
f011f0ab:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f0b1:	01 d0                	add    %edx,%eax
f011f0b3:	48                   	dec    %eax
f011f0b4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f0ba:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f0c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0c5:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f0cb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f0d1:	29 d0                	sub    %edx,%eax
f011f0d3:	01 c8                	add    %ecx,%eax
f011f0d5:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f0db:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f0e1:	39 c2                	cmp    %eax,%edx
f011f0e3:	74 17                	je     f011f0fc <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f011f0e5:	83 ec 04             	sub    $0x4,%esp
f011f0e8:	68 28 98 13 f0       	push   $0xf0139828
f011f0ed:	68 88 04 00 00       	push   $0x488
f011f0f2:	68 0e 91 13 f0       	push   $0xf013910e
f011f0f7:	e8 b4 10 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f0fc:	e8 25 55 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f101:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f104:	74 17                	je     f011f11d <test_kmalloc_worstfit+0xe06>
f011f106:	83 ec 04             	sub    $0x4,%esp
f011f109:	68 28 91 13 f0       	push   $0xf0139128
f011f10e:	68 89 04 00 00       	push   $0x489
f011f113:	68 0e 91 13 f0       	push   $0xf013910e
f011f118:	e8 93 10 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f11d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f120:	e8 5b d8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f125:	29 c3                	sub    %eax,%ebx
f011f127:	89 d8                	mov    %ebx,%eax
f011f129:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f12e:	74 17                	je     f011f147 <test_kmalloc_worstfit+0xe30>
f011f130:	83 ec 04             	sub    $0x4,%esp
f011f133:	68 46 96 13 f0       	push   $0xf0139646
f011f138:	68 8a 04 00 00       	push   $0x48a
f011f13d:	68 0e 91 13 f0       	push   $0xf013910e
f011f142:	e8 69 10 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f147:	ff 45 e8             	incl   -0x18(%ebp)
f011f14a:	83 ec 08             	sub    $0x8,%esp
f011f14d:	ff 75 e8             	pushl  -0x18(%ebp)
f011f150:	68 48 98 13 f0       	push   $0xf0139848
f011f155:	e8 d7 1c fe ff       	call   f0100e31 <cprintf>
f011f15a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f15d:	e8 1e d8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f162:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f165:	e8 bc 54 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f16a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f16d:	83 ec 0c             	sub    $0xc,%esp
f011f170:	68 00 00 08 00       	push   $0x80000
f011f175:	e8 87 8d fe ff       	call   f0107f01 <kmalloc>
f011f17a:	83 c4 10             	add    $0x10,%esp
f011f17d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f183:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f18a:	10 00 00 
f011f18d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f192:	0f b6 d0             	movzbl %al,%edx
f011f195:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f19b:	01 d0                	add    %edx,%eax
f011f19d:	48                   	dec    %eax
f011f19e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f1a4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f1aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1af:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f1b5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f1bb:	29 d0                	sub    %edx,%eax
f011f1bd:	89 c1                	mov    %eax,%ecx
f011f1bf:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f1c6:	10 00 00 
f011f1c9:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f1ce:	0f b6 c0             	movzbl %al,%eax
f011f1d1:	c1 e0 04             	shl    $0x4,%eax
f011f1d4:	89 c2                	mov    %eax,%edx
f011f1d6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f1dc:	01 d0                	add    %edx,%eax
f011f1de:	48                   	dec    %eax
f011f1df:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f1e5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f1eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1f0:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f1f6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f1fc:	29 d0                	sub    %edx,%eax
f011f1fe:	01 c8                	add    %ecx,%eax
f011f200:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f206:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f20c:	39 c2                	cmp    %eax,%edx
f011f20e:	74 17                	je     f011f227 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f011f210:	83 ec 04             	sub    $0x4,%esp
f011f213:	68 28 98 13 f0       	push   $0xf0139828
f011f218:	68 91 04 00 00       	push   $0x491
f011f21d:	68 0e 91 13 f0       	push   $0xf013910e
f011f222:	e8 89 0f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f227:	e8 fa 53 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f22c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f22f:	74 17                	je     f011f248 <test_kmalloc_worstfit+0xf31>
f011f231:	83 ec 04             	sub    $0x4,%esp
f011f234:	68 28 91 13 f0       	push   $0xf0139128
f011f239:	68 92 04 00 00       	push   $0x492
f011f23e:	68 0e 91 13 f0       	push   $0xf013910e
f011f243:	e8 68 0f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f248:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f24b:	e8 30 d7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f250:	29 c3                	sub    %eax,%ebx
f011f252:	89 d8                	mov    %ebx,%eax
f011f254:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f259:	74 17                	je     f011f272 <test_kmalloc_worstfit+0xf5b>
f011f25b:	83 ec 04             	sub    $0x4,%esp
f011f25e:	68 46 96 13 f0       	push   $0xf0139646
f011f263:	68 93 04 00 00       	push   $0x493
f011f268:	68 0e 91 13 f0       	push   $0xf013910e
f011f26d:	e8 3e 0f fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f272:	ff 45 e8             	incl   -0x18(%ebp)
f011f275:	83 ec 08             	sub    $0x8,%esp
f011f278:	ff 75 e8             	pushl  -0x18(%ebp)
f011f27b:	68 48 98 13 f0       	push   $0xf0139848
f011f280:	e8 ac 1b fe ff       	call   f0100e31 <cprintf>
f011f285:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f288:	e8 f3 d6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f28d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f290:	e8 91 53 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f295:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f298:	83 ec 0c             	sub    $0xc,%esp
f011f29b:	68 00 04 00 00       	push   $0x400
f011f2a0:	e8 5c 8c fe ff       	call   f0107f01 <kmalloc>
f011f2a5:	83 c4 10             	add    $0x10,%esp
f011f2a8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f2ae:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f2b5:	10 00 00 
f011f2b8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f2bd:	0f b6 d0             	movzbl %al,%edx
f011f2c0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f2c6:	01 d0                	add    %edx,%eax
f011f2c8:	48                   	dec    %eax
f011f2c9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f2cf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f2d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2da:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f2e0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f2e6:	29 d0                	sub    %edx,%eax
f011f2e8:	89 c1                	mov    %eax,%ecx
f011f2ea:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f2f1:	10 00 00 
f011f2f4:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f2f9:	0f b6 c0             	movzbl %al,%eax
f011f2fc:	c1 e0 04             	shl    $0x4,%eax
f011f2ff:	89 c2                	mov    %eax,%edx
f011f301:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f307:	01 d0                	add    %edx,%eax
f011f309:	48                   	dec    %eax
f011f30a:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f310:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f316:	ba 00 00 00 00       	mov    $0x0,%edx
f011f31b:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f321:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f327:	29 d0                	sub    %edx,%eax
f011f329:	01 c8                	add    %ecx,%eax
f011f32b:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f331:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f337:	39 c2                	cmp    %eax,%edx
f011f339:	74 17                	je     f011f352 <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f011f33b:	83 ec 04             	sub    $0x4,%esp
f011f33e:	68 28 98 13 f0       	push   $0xf0139828
f011f343:	68 9a 04 00 00       	push   $0x49a
f011f348:	68 0e 91 13 f0       	push   $0xf013910e
f011f34d:	e8 5e 0e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f352:	e8 cf 52 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f357:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f35a:	74 17                	je     f011f373 <test_kmalloc_worstfit+0x105c>
f011f35c:	83 ec 04             	sub    $0x4,%esp
f011f35f:	68 28 91 13 f0       	push   $0xf0139128
f011f364:	68 9b 04 00 00       	push   $0x49b
f011f369:	68 0e 91 13 f0       	push   $0xf013910e
f011f36e:	e8 3d 0e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f373:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f376:	e8 05 d6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f37b:	29 c3                	sub    %eax,%ebx
f011f37d:	89 d8                	mov    %ebx,%eax
f011f37f:	83 f8 01             	cmp    $0x1,%eax
f011f382:	74 17                	je     f011f39b <test_kmalloc_worstfit+0x1084>
f011f384:	83 ec 04             	sub    $0x4,%esp
f011f387:	68 46 96 13 f0       	push   $0xf0139646
f011f38c:	68 9c 04 00 00       	push   $0x49c
f011f391:	68 0e 91 13 f0       	push   $0xf013910e
f011f396:	e8 15 0e fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f39b:	ff 45 e8             	incl   -0x18(%ebp)
f011f39e:	83 ec 08             	sub    $0x8,%esp
f011f3a1:	ff 75 e8             	pushl  -0x18(%ebp)
f011f3a4:	68 48 98 13 f0       	push   $0xf0139848
f011f3a9:	e8 83 1a fe ff       	call   f0100e31 <cprintf>
f011f3ae:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f3b1:	e8 ca d5 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f3b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f3b9:	e8 68 52 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f3be:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f3c1:	83 ec 0c             	sub    $0xc,%esp
f011f3c4:	68 00 f0 1f 00       	push   $0x1ff000
f011f3c9:	e8 33 8b fe ff       	call   f0107f01 <kmalloc>
f011f3ce:	83 c4 10             	add    $0x10,%esp
f011f3d1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f3d7:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f3de:	10 00 00 
f011f3e1:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f3e6:	0f b6 d0             	movzbl %al,%edx
f011f3e9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f3ef:	01 d0                	add    %edx,%eax
f011f3f1:	48                   	dec    %eax
f011f3f2:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f3f8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f3fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011f403:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f409:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f40f:	29 d0                	sub    %edx,%eax
f011f411:	89 c1                	mov    %eax,%ecx
f011f413:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f41a:	10 00 00 
f011f41d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f422:	0f b6 c0             	movzbl %al,%eax
f011f425:	c1 e0 04             	shl    $0x4,%eax
f011f428:	89 c2                	mov    %eax,%edx
f011f42a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f430:	01 d0                	add    %edx,%eax
f011f432:	48                   	dec    %eax
f011f433:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f439:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f43f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f444:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f44a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f450:	29 d0                	sub    %edx,%eax
f011f452:	01 c8                	add    %ecx,%eax
f011f454:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f45a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f460:	39 c2                	cmp    %eax,%edx
f011f462:	74 17                	je     f011f47b <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f011f464:	83 ec 04             	sub    $0x4,%esp
f011f467:	68 28 98 13 f0       	push   $0xf0139828
f011f46c:	68 a3 04 00 00       	push   $0x4a3
f011f471:	68 0e 91 13 f0       	push   $0xf013910e
f011f476:	e8 35 0d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f47b:	e8 a6 51 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f480:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f483:	74 17                	je     f011f49c <test_kmalloc_worstfit+0x1185>
f011f485:	83 ec 04             	sub    $0x4,%esp
f011f488:	68 28 91 13 f0       	push   $0xf0139128
f011f48d:	68 a4 04 00 00       	push   $0x4a4
f011f492:	68 0e 91 13 f0       	push   $0xf013910e
f011f497:	e8 14 0d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f49c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f49f:	e8 dc d4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f4a4:	29 c3                	sub    %eax,%ebx
f011f4a6:	89 d8                	mov    %ebx,%eax
f011f4a8:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f4ad:	74 17                	je     f011f4c6 <test_kmalloc_worstfit+0x11af>
f011f4af:	83 ec 04             	sub    $0x4,%esp
f011f4b2:	68 46 96 13 f0       	push   $0xf0139646
f011f4b7:	68 a5 04 00 00       	push   $0x4a5
f011f4bc:	68 0e 91 13 f0       	push   $0xf013910e
f011f4c1:	e8 ea 0c fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f4c6:	ff 45 e8             	incl   -0x18(%ebp)
f011f4c9:	83 ec 08             	sub    $0x8,%esp
f011f4cc:	ff 75 e8             	pushl  -0x18(%ebp)
f011f4cf:	68 48 98 13 f0       	push   $0xf0139848
f011f4d4:	e8 58 19 fe ff       	call   f0100e31 <cprintf>
f011f4d9:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f4dc:	e8 9f d4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f4e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f4e4:	e8 3d 51 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f4e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f4ec:	83 ec 0c             	sub    $0xc,%esp
f011f4ef:	68 00 00 40 00       	push   $0x400000
f011f4f4:	e8 08 8a fe ff       	call   f0107f01 <kmalloc>
f011f4f9:	83 c4 10             	add    $0x10,%esp
f011f4fc:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f011f502:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f508:	85 c0                	test   %eax,%eax
f011f50a:	74 17                	je     f011f523 <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011f50c:	83 ec 04             	sub    $0x4,%esp
f011f50f:	68 28 98 13 f0       	push   $0xf0139828
f011f514:	68 ad 04 00 00       	push   $0x4ad
f011f519:	68 0e 91 13 f0       	push   $0xf013910e
f011f51e:	e8 8d 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f523:	e8 fe 50 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f528:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f52b:	74 17                	je     f011f544 <test_kmalloc_worstfit+0x122d>
f011f52d:	83 ec 04             	sub    $0x4,%esp
f011f530:	68 28 91 13 f0       	push   $0xf0139128
f011f535:	68 ae 04 00 00       	push   $0x4ae
f011f53a:	68 0e 91 13 f0       	push   $0xf013910e
f011f53f:	e8 6c 0c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f544:	e8 37 d4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f549:	89 c2                	mov    %eax,%edx
f011f54b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f54e:	39 c2                	cmp    %eax,%edx
f011f550:	74 17                	je     f011f569 <test_kmalloc_worstfit+0x1252>
f011f552:	83 ec 04             	sub    $0x4,%esp
f011f555:	68 46 96 13 f0       	push   $0xf0139646
f011f55a:	68 af 04 00 00       	push   $0x4af
f011f55f:	68 0e 91 13 f0       	push   $0xf013910e
f011f564:	e8 47 0c fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f569:	ff 45 e8             	incl   -0x18(%ebp)
f011f56c:	83 ec 08             	sub    $0x8,%esp
f011f56f:	ff 75 e8             	pushl  -0x18(%ebp)
f011f572:	68 48 98 13 f0       	push   $0xf0139848
f011f577:	e8 b5 18 fe ff       	call   f0100e31 <cprintf>
f011f57c:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f57f:	83 ec 0c             	sub    $0xc,%esp
f011f582:	68 5c 98 13 f0       	push   $0xf013985c
f011f587:	e8 a5 18 fe ff       	call   f0100e31 <cprintf>
f011f58c:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f58f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f594:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f597:	5b                   	pop    %ebx
f011f598:	5f                   	pop    %edi
f011f599:	5d                   	pop    %ebp
f011f59a:	c3                   	ret    

f011f59b <test_kfree>:

int test_kfree()
{
f011f59b:	55                   	push   %ebp
f011f59c:	89 e5                	mov    %esp,%ebp
f011f59e:	57                   	push   %edi
f011f59f:	53                   	push   %ebx
f011f5a0:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f011f5a6:	83 ec 0c             	sub    $0xc,%esp
f011f5a9:	68 50 90 13 f0       	push   $0xf0139050
f011f5ae:	e8 7e 18 fe ff       	call   f0100e31 <cprintf>
f011f5b3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f5b6:	83 ec 0c             	sub    $0xc,%esp
f011f5b9:	68 80 90 13 f0       	push   $0xf0139080
f011f5be:	e8 6e 18 fe ff       	call   f0100e31 <cprintf>
f011f5c3:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f5c6:	83 ec 0c             	sub    $0xc,%esp
f011f5c9:	68 50 90 13 f0       	push   $0xf0139050
f011f5ce:	e8 5e 18 fe ff       	call   f0100e31 <cprintf>
f011f5d3:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f5d6:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f5da:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f5de:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f5e4:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f5ea:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f5f1:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f5f8:	e8 83 d3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f5fd:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f600:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011f606:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f60b:	b8 00 00 00 00       	mov    $0x0,%eax
f011f610:	89 d7                	mov    %edx,%edi
f011f612:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f614:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011f61a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f61f:	b8 00 00 00 00       	mov    $0x0,%eax
f011f624:	89 d7                	mov    %edx,%edi
f011f626:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f628:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011f62e:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f633:	b8 00 00 00 00       	mov    $0x0,%eax
f011f638:	89 d7                	mov    %edx,%edi
f011f63a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f63c:	e8 3f d3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f641:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f644:	e8 dd 4f fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f649:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f64c:	83 ec 0c             	sub    $0xc,%esp
f011f64f:	68 00 fc 1f 00       	push   $0x1ffc00
f011f654:	e8 a8 88 fe ff       	call   f0107f01 <kmalloc>
f011f659:	83 c4 10             	add    $0x10,%esp
f011f65c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f662:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011f668:	89 c1                	mov    %eax,%ecx
f011f66a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f671:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f676:	0f b6 d0             	movzbl %al,%edx
f011f679:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f67c:	01 d0                	add    %edx,%eax
f011f67e:	48                   	dec    %eax
f011f67f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f682:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f685:	ba 00 00 00 00       	mov    $0x0,%edx
f011f68a:	f7 75 c8             	divl   -0x38(%ebp)
f011f68d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f690:	29 d0                	sub    %edx,%eax
f011f692:	89 c3                	mov    %eax,%ebx
f011f694:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f69b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f6a0:	0f b6 c0             	movzbl %al,%eax
f011f6a3:	c1 e0 04             	shl    $0x4,%eax
f011f6a6:	89 c2                	mov    %eax,%edx
f011f6a8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f6ab:	01 d0                	add    %edx,%eax
f011f6ad:	48                   	dec    %eax
f011f6ae:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f6b1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f6b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6b9:	f7 75 c0             	divl   -0x40(%ebp)
f011f6bc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f6bf:	29 d0                	sub    %edx,%eax
f011f6c1:	01 d8                	add    %ebx,%eax
f011f6c3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f6c8:	39 c1                	cmp    %eax,%ecx
f011f6ca:	74 17                	je     f011f6e3 <test_kfree+0x148>
f011f6cc:	83 ec 04             	sub    $0x4,%esp
f011f6cf:	68 f4 91 13 f0       	push   $0xf01391f4
f011f6d4:	68 d7 04 00 00       	push   $0x4d7
f011f6d9:	68 0e 91 13 f0       	push   $0xf013910e
f011f6de:	e8 cd 0a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6e3:	e8 3e 4f fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f6e8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f6eb:	74 17                	je     f011f704 <test_kfree+0x169>
f011f6ed:	83 ec 04             	sub    $0x4,%esp
f011f6f0:	68 28 91 13 f0       	push   $0xf0139128
f011f6f5:	68 d8 04 00 00       	push   $0x4d8
f011f6fa:	68 0e 91 13 f0       	push   $0xf013910e
f011f6ff:	e8 ac 0a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f704:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f707:	e8 74 d2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f70c:	29 c3                	sub    %eax,%ebx
f011f70e:	89 d8                	mov    %ebx,%eax
f011f710:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f715:	74 17                	je     f011f72e <test_kfree+0x193>
f011f717:	83 ec 04             	sub    $0x4,%esp
f011f71a:	68 90 91 13 f0       	push   $0xf0139190
f011f71f:	68 d9 04 00 00       	push   $0x4d9
f011f724:	68 0e 91 13 f0       	push   $0xf013910e
f011f729:	e8 82 0a fe ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f72e:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011f735:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f738:	e8 43 d2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f73d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f740:	e8 e1 4e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f745:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f748:	83 ec 0c             	sub    $0xc,%esp
f011f74b:	68 00 fc 1f 00       	push   $0x1ffc00
f011f750:	e8 ac 87 fe ff       	call   f0107f01 <kmalloc>
f011f755:	83 c4 10             	add    $0x10,%esp
f011f758:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f75e:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011f764:	89 c1                	mov    %eax,%ecx
f011f766:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f76d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f772:	0f b6 d0             	movzbl %al,%edx
f011f775:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f778:	01 d0                	add    %edx,%eax
f011f77a:	48                   	dec    %eax
f011f77b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f77e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f781:	ba 00 00 00 00       	mov    $0x0,%edx
f011f786:	f7 75 b8             	divl   -0x48(%ebp)
f011f789:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f78c:	29 d0                	sub    %edx,%eax
f011f78e:	89 c3                	mov    %eax,%ebx
f011f790:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f797:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f79c:	0f b6 c0             	movzbl %al,%eax
f011f79f:	c1 e0 04             	shl    $0x4,%eax
f011f7a2:	89 c2                	mov    %eax,%edx
f011f7a4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f7a7:	01 d0                	add    %edx,%eax
f011f7a9:	48                   	dec    %eax
f011f7aa:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f7ad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f7b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7b5:	f7 75 b0             	divl   -0x50(%ebp)
f011f7b8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f7bb:	29 d0                	sub    %edx,%eax
f011f7bd:	01 d8                	add    %ebx,%eax
f011f7bf:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f7c4:	39 c1                	cmp    %eax,%ecx
f011f7c6:	74 17                	je     f011f7df <test_kfree+0x244>
f011f7c8:	83 ec 04             	sub    $0x4,%esp
f011f7cb:	68 f4 91 13 f0       	push   $0xf01391f4
f011f7d0:	68 e0 04 00 00       	push   $0x4e0
f011f7d5:	68 0e 91 13 f0       	push   $0xf013910e
f011f7da:	e8 d1 09 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f7df:	e8 42 4e fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f7e4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f7e7:	74 17                	je     f011f800 <test_kfree+0x265>
f011f7e9:	83 ec 04             	sub    $0x4,%esp
f011f7ec:	68 28 91 13 f0       	push   $0xf0139128
f011f7f1:	68 e1 04 00 00       	push   $0x4e1
f011f7f6:	68 0e 91 13 f0       	push   $0xf013910e
f011f7fb:	e8 b0 09 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f800:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f803:	e8 78 d1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f808:	29 c3                	sub    %eax,%ebx
f011f80a:	89 d8                	mov    %ebx,%eax
f011f80c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f811:	74 17                	je     f011f82a <test_kfree+0x28f>
f011f813:	83 ec 04             	sub    $0x4,%esp
f011f816:	68 90 91 13 f0       	push   $0xf0139190
f011f81b:	68 e2 04 00 00       	push   $0x4e2
f011f820:	68 0e 91 13 f0       	push   $0xf013910e
f011f825:	e8 86 09 fe ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f82a:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011f831:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f834:	e8 47 d1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f839:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f83c:	e8 e5 4d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f841:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f844:	83 ec 0c             	sub    $0xc,%esp
f011f847:	68 00 08 00 00       	push   $0x800
f011f84c:	e8 b0 86 fe ff       	call   f0107f01 <kmalloc>
f011f851:	83 c4 10             	add    $0x10,%esp
f011f854:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f85a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f860:	89 c1                	mov    %eax,%ecx
f011f862:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f869:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f86e:	0f b6 d0             	movzbl %al,%edx
f011f871:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f874:	01 d0                	add    %edx,%eax
f011f876:	48                   	dec    %eax
f011f877:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f87a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f87d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f882:	f7 75 a8             	divl   -0x58(%ebp)
f011f885:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f888:	29 d0                	sub    %edx,%eax
f011f88a:	89 c3                	mov    %eax,%ebx
f011f88c:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f893:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f898:	0f b6 c0             	movzbl %al,%eax
f011f89b:	c1 e0 04             	shl    $0x4,%eax
f011f89e:	89 c2                	mov    %eax,%edx
f011f8a0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f8a3:	01 d0                	add    %edx,%eax
f011f8a5:	48                   	dec    %eax
f011f8a6:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f8a9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f8ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8b1:	f7 75 a0             	divl   -0x60(%ebp)
f011f8b4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f8b7:	29 d0                	sub    %edx,%eax
f011f8b9:	01 d8                	add    %ebx,%eax
f011f8bb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f8c0:	39 c1                	cmp    %eax,%ecx
f011f8c2:	74 17                	je     f011f8db <test_kfree+0x340>
f011f8c4:	83 ec 04             	sub    $0x4,%esp
f011f8c7:	68 f4 91 13 f0       	push   $0xf01391f4
f011f8cc:	68 e9 04 00 00       	push   $0x4e9
f011f8d1:	68 0e 91 13 f0       	push   $0xf013910e
f011f8d6:	e8 d5 08 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f8db:	e8 46 4d fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f8e0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f8e3:	74 17                	je     f011f8fc <test_kfree+0x361>
f011f8e5:	83 ec 04             	sub    $0x4,%esp
f011f8e8:	68 28 91 13 f0       	push   $0xf0139128
f011f8ed:	68 ea 04 00 00       	push   $0x4ea
f011f8f2:	68 0e 91 13 f0       	push   $0xf013910e
f011f8f7:	e8 b4 08 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f8fc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f8ff:	e8 7c d0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f904:	29 c3                	sub    %eax,%ebx
f011f906:	89 d8                	mov    %ebx,%eax
f011f908:	83 f8 01             	cmp    $0x1,%eax
f011f90b:	74 17                	je     f011f924 <test_kfree+0x389>
f011f90d:	83 ec 04             	sub    $0x4,%esp
f011f910:	68 90 91 13 f0       	push   $0xf0139190
f011f915:	68 eb 04 00 00       	push   $0x4eb
f011f91a:	68 0e 91 13 f0       	push   $0xf013910e
f011f91f:	e8 8c 08 fe ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f924:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011f92b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f92e:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f934:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f937:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f93e:	eb 0e                	jmp    f011f94e <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f011f940:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f943:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f946:	01 d0                	add    %edx,%eax
f011f948:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f94b:	ff 45 f4             	incl   -0xc(%ebp)
f011f94e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f954:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f957:	7f e7                	jg     f011f940 <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f959:	e8 22 d0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011f95e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f961:	e8 c0 4c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011f966:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f969:	83 ec 0c             	sub    $0xc,%esp
f011f96c:	68 00 08 00 00       	push   $0x800
f011f971:	e8 8b 85 fe ff       	call   f0107f01 <kmalloc>
f011f976:	83 c4 10             	add    $0x10,%esp
f011f979:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f97f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011f985:	89 c1                	mov    %eax,%ecx
f011f987:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f98e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f993:	0f b6 d0             	movzbl %al,%edx
f011f996:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f999:	01 d0                	add    %edx,%eax
f011f99b:	48                   	dec    %eax
f011f99c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f99f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f9a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9a7:	f7 75 94             	divl   -0x6c(%ebp)
f011f9aa:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f9ad:	29 d0                	sub    %edx,%eax
f011f9af:	89 c3                	mov    %eax,%ebx
f011f9b1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011f9b8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011f9bd:	0f b6 c0             	movzbl %al,%eax
f011f9c0:	c1 e0 04             	shl    $0x4,%eax
f011f9c3:	89 c2                	mov    %eax,%edx
f011f9c5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f9c8:	01 d0                	add    %edx,%eax
f011f9ca:	48                   	dec    %eax
f011f9cb:	89 45 88             	mov    %eax,-0x78(%ebp)
f011f9ce:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f9d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9d6:	f7 75 8c             	divl   -0x74(%ebp)
f011f9d9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f9dc:	29 d0                	sub    %edx,%eax
f011f9de:	01 d8                	add    %ebx,%eax
f011f9e0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011f9e5:	39 c1                	cmp    %eax,%ecx
f011f9e7:	74 17                	je     f011fa00 <test_kfree+0x465>
f011f9e9:	83 ec 04             	sub    $0x4,%esp
f011f9ec:	68 f4 91 13 f0       	push   $0xf01391f4
f011f9f1:	68 f7 04 00 00       	push   $0x4f7
f011f9f6:	68 0e 91 13 f0       	push   $0xf013910e
f011f9fb:	e8 b0 07 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa00:	e8 21 4c fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fa05:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa08:	74 17                	je     f011fa21 <test_kfree+0x486>
f011fa0a:	83 ec 04             	sub    $0x4,%esp
f011fa0d:	68 28 91 13 f0       	push   $0xf0139128
f011fa12:	68 f8 04 00 00       	push   $0x4f8
f011fa17:	68 0e 91 13 f0       	push   $0xf013910e
f011fa1c:	e8 8f 07 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa21:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa24:	e8 57 cf fe ff       	call   f010c980 <sys_calculate_free_frames>
f011fa29:	29 c3                	sub    %eax,%ebx
f011fa2b:	89 d8                	mov    %ebx,%eax
f011fa2d:	83 f8 01             	cmp    $0x1,%eax
f011fa30:	74 17                	je     f011fa49 <test_kfree+0x4ae>
f011fa32:	83 ec 04             	sub    $0x4,%esp
f011fa35:	68 90 91 13 f0       	push   $0xf0139190
f011fa3a:	68 f9 04 00 00       	push   $0x4f9
f011fa3f:	68 0e 91 13 f0       	push   $0xf013910e
f011fa44:	e8 67 07 fe ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fa49:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f011fa50:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fa53:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fa59:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fa5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fa63:	eb 0e                	jmp    f011fa73 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f011fa65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fa68:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fa6b:	01 d0                	add    %edx,%eax
f011fa6d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fa70:	ff 45 f4             	incl   -0xc(%ebp)
f011fa73:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fa79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fa7c:	7f e7                	jg     f011fa65 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fa7e:	e8 fd ce fe ff       	call   f010c980 <sys_calculate_free_frames>
f011fa83:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fa86:	e8 9b 4b fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fa8b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011fa8e:	83 ec 0c             	sub    $0xc,%esp
f011fa91:	68 00 1c 00 00       	push   $0x1c00
f011fa96:	e8 66 84 fe ff       	call   f0107f01 <kmalloc>
f011fa9b:	83 c4 10             	add    $0x10,%esp
f011fa9e:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011faa4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011faaa:	89 c1                	mov    %eax,%ecx
f011faac:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011fab3:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011fab8:	0f b6 d0             	movzbl %al,%edx
f011fabb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fabe:	01 d0                	add    %edx,%eax
f011fac0:	48                   	dec    %eax
f011fac1:	89 45 80             	mov    %eax,-0x80(%ebp)
f011fac4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fac7:	ba 00 00 00 00       	mov    $0x0,%edx
f011facc:	f7 75 84             	divl   -0x7c(%ebp)
f011facf:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fad2:	29 d0                	sub    %edx,%eax
f011fad4:	89 c3                	mov    %eax,%ebx
f011fad6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fadd:	10 00 00 
f011fae0:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011fae5:	0f b6 c0             	movzbl %al,%eax
f011fae8:	c1 e0 04             	shl    $0x4,%eax
f011faeb:	89 c2                	mov    %eax,%edx
f011faed:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011faf3:	01 d0                	add    %edx,%eax
f011faf5:	48                   	dec    %eax
f011faf6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fafc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fb02:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb07:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fb0d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fb13:	29 d0                	sub    %edx,%eax
f011fb15:	01 d8                	add    %ebx,%eax
f011fb17:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fb1c:	39 c1                	cmp    %eax,%ecx
f011fb1e:	74 17                	je     f011fb37 <test_kfree+0x59c>
f011fb20:	83 ec 04             	sub    $0x4,%esp
f011fb23:	68 f4 91 13 f0       	push   $0xf01391f4
f011fb28:	68 05 05 00 00       	push   $0x505
f011fb2d:	68 0e 91 13 f0       	push   $0xf013910e
f011fb32:	e8 79 06 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb37:	e8 ea 4a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fb3c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fb3f:	74 17                	je     f011fb58 <test_kfree+0x5bd>
f011fb41:	83 ec 04             	sub    $0x4,%esp
f011fb44:	68 28 91 13 f0       	push   $0xf0139128
f011fb49:	68 06 05 00 00       	push   $0x506
f011fb4e:	68 0e 91 13 f0       	push   $0xf013910e
f011fb53:	e8 58 06 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fb58:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fb5b:	e8 20 ce fe ff       	call   f010c980 <sys_calculate_free_frames>
f011fb60:	29 c3                	sub    %eax,%ebx
f011fb62:	89 d8                	mov    %ebx,%eax
f011fb64:	83 f8 02             	cmp    $0x2,%eax
f011fb67:	74 17                	je     f011fb80 <test_kfree+0x5e5>
f011fb69:	83 ec 04             	sub    $0x4,%esp
f011fb6c:	68 90 91 13 f0       	push   $0xf0139190
f011fb71:	68 07 05 00 00       	push   $0x507
f011fb76:	68 0e 91 13 f0       	push   $0xf013910e
f011fb7b:	e8 30 06 fe ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011fb80:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f011fb87:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011fb8a:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fb90:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fb93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fb9a:	eb 0e                	jmp    f011fbaa <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f011fb9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fb9f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fba2:	01 d0                	add    %edx,%eax
f011fba4:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fba7:	ff 45 f4             	incl   -0xc(%ebp)
f011fbaa:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fbb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fbb3:	7f e7                	jg     f011fb9c <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011fbb5:	e8 c6 cd fe ff       	call   f010c980 <sys_calculate_free_frames>
f011fbba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fbbd:	e8 64 4a fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fbc2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011fbc5:	83 ec 0c             	sub    $0xc,%esp
f011fbc8:	68 00 fc 2f 00       	push   $0x2ffc00
f011fbcd:	e8 2f 83 fe ff       	call   f0107f01 <kmalloc>
f011fbd2:	83 c4 10             	add    $0x10,%esp
f011fbd5:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fbdb:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fbe1:	89 c1                	mov    %eax,%ecx
f011fbe3:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fbea:	10 00 00 
f011fbed:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011fbf2:	0f b6 d0             	movzbl %al,%edx
f011fbf5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fbfb:	01 d0                	add    %edx,%eax
f011fbfd:	48                   	dec    %eax
f011fbfe:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fc04:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fc0a:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc0f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fc15:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fc1b:	29 d0                	sub    %edx,%eax
f011fc1d:	89 c3                	mov    %eax,%ebx
f011fc1f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fc26:	10 00 00 
f011fc29:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011fc2e:	0f b6 c0             	movzbl %al,%eax
f011fc31:	c1 e0 04             	shl    $0x4,%eax
f011fc34:	89 c2                	mov    %eax,%edx
f011fc36:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fc3c:	01 d0                	add    %edx,%eax
f011fc3e:	48                   	dec    %eax
f011fc3f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fc45:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fc4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc50:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fc56:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fc5c:	29 d0                	sub    %edx,%eax
f011fc5e:	01 d8                	add    %ebx,%eax
f011fc60:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011fc65:	39 c1                	cmp    %eax,%ecx
f011fc67:	74 17                	je     f011fc80 <test_kfree+0x6e5>
f011fc69:	83 ec 04             	sub    $0x4,%esp
f011fc6c:	68 f4 91 13 f0       	push   $0xf01391f4
f011fc71:	68 13 05 00 00       	push   $0x513
f011fc76:	68 0e 91 13 f0       	push   $0xf013910e
f011fc7b:	e8 30 05 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc80:	e8 a1 49 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fc85:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fc88:	74 17                	je     f011fca1 <test_kfree+0x706>
f011fc8a:	83 ec 04             	sub    $0x4,%esp
f011fc8d:	68 28 91 13 f0       	push   $0xf0139128
f011fc92:	68 14 05 00 00       	push   $0x514
f011fc97:	68 0e 91 13 f0       	push   $0xf013910e
f011fc9c:	e8 0f 05 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fca1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fca4:	e8 d7 cc fe ff       	call   f010c980 <sys_calculate_free_frames>
f011fca9:	29 c3                	sub    %eax,%ebx
f011fcab:	89 d8                	mov    %ebx,%eax
f011fcad:	3d 00 03 00 00       	cmp    $0x300,%eax
f011fcb2:	74 17                	je     f011fccb <test_kfree+0x730>
f011fcb4:	83 ec 04             	sub    $0x4,%esp
f011fcb7:	68 90 91 13 f0       	push   $0xf0139190
f011fcbc:	68 15 05 00 00       	push   $0x515
f011fcc1:	68 0e 91 13 f0       	push   $0xf013910e
f011fcc6:	e8 e5 04 fe ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011fccb:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f011fcd2:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011fcd5:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fcdb:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fcde:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fce5:	eb 0e                	jmp    f011fcf5 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f011fce7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fcea:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fced:	01 d0                	add    %edx,%eax
f011fcef:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011fcf2:	ff 45 f4             	incl   -0xc(%ebp)
f011fcf5:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fcfb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fcfe:	7f e7                	jg     f011fce7 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fd00:	e8 7b cc fe ff       	call   f010c980 <sys_calculate_free_frames>
f011fd05:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd08:	e8 19 49 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fd0d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011fd10:	83 ec 0c             	sub    $0xc,%esp
f011fd13:	68 00 fc 5f 00       	push   $0x5ffc00
f011fd18:	e8 e4 81 fe ff       	call   f0107f01 <kmalloc>
f011fd1d:	83 c4 10             	add    $0x10,%esp
f011fd20:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fd26:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011fd2c:	89 c1                	mov    %eax,%ecx
f011fd2e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fd35:	10 00 00 
f011fd38:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011fd3d:	0f b6 d0             	movzbl %al,%edx
f011fd40:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fd46:	01 d0                	add    %edx,%eax
f011fd48:	48                   	dec    %eax
f011fd49:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fd4f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fd55:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd5a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fd60:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fd66:	29 d0                	sub    %edx,%eax
f011fd68:	89 c3                	mov    %eax,%ebx
f011fd6a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fd71:	10 00 00 
f011fd74:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011fd79:	0f b6 c0             	movzbl %al,%eax
f011fd7c:	c1 e0 04             	shl    $0x4,%eax
f011fd7f:	89 c2                	mov    %eax,%edx
f011fd81:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fd87:	01 d0                	add    %edx,%eax
f011fd89:	48                   	dec    %eax
f011fd8a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fd90:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fd96:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd9b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fda1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fda7:	29 d0                	sub    %edx,%eax
f011fda9:	01 d8                	add    %ebx,%eax
f011fdab:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011fdb0:	39 c1                	cmp    %eax,%ecx
f011fdb2:	74 17                	je     f011fdcb <test_kfree+0x830>
f011fdb4:	83 ec 04             	sub    $0x4,%esp
f011fdb7:	68 f4 91 13 f0       	push   $0xf01391f4
f011fdbc:	68 21 05 00 00       	push   $0x521
f011fdc1:	68 0e 91 13 f0       	push   $0xf013910e
f011fdc6:	e8 e5 03 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fdcb:	e8 56 48 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fdd0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fdd3:	74 17                	je     f011fdec <test_kfree+0x851>
f011fdd5:	83 ec 04             	sub    $0x4,%esp
f011fdd8:	68 28 91 13 f0       	push   $0xf0139128
f011fddd:	68 22 05 00 00       	push   $0x522
f011fde2:	68 0e 91 13 f0       	push   $0xf013910e
f011fde7:	e8 c4 03 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fdec:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fdef:	e8 8c cb fe ff       	call   f010c980 <sys_calculate_free_frames>
f011fdf4:	29 c3                	sub    %eax,%ebx
f011fdf6:	89 d8                	mov    %ebx,%eax
f011fdf8:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fdfd:	74 17                	je     f011fe16 <test_kfree+0x87b>
f011fdff:	83 ec 04             	sub    $0x4,%esp
f011fe02:	68 90 91 13 f0       	push   $0xf0139190
f011fe07:	68 23 05 00 00       	push   $0x523
f011fe0c:	68 0e 91 13 f0       	push   $0xf013910e
f011fe11:	e8 9a 03 fe ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011fe16:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f011fe1d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011fe20:	e8 5b cb fe ff       	call   f010c980 <sys_calculate_free_frames>
f011fe25:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fe28:	e8 f9 47 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fe2d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011fe30:	83 ec 0c             	sub    $0xc,%esp
f011fe33:	68 00 38 00 00       	push   $0x3800
f011fe38:	e8 c4 80 fe ff       	call   f0107f01 <kmalloc>
f011fe3d:	83 c4 10             	add    $0x10,%esp
f011fe40:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fe46:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011fe4c:	89 c1                	mov    %eax,%ecx
f011fe4e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fe55:	10 00 00 
f011fe58:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011fe5d:	0f b6 d0             	movzbl %al,%edx
f011fe60:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fe66:	01 d0                	add    %edx,%eax
f011fe68:	48                   	dec    %eax
f011fe69:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fe6f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fe75:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe7a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011fe80:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fe86:	29 d0                	sub    %edx,%eax
f011fe88:	89 c3                	mov    %eax,%ebx
f011fe8a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011fe91:	10 00 00 
f011fe94:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f011fe99:	0f b6 c0             	movzbl %al,%eax
f011fe9c:	c1 e0 04             	shl    $0x4,%eax
f011fe9f:	89 c2                	mov    %eax,%edx
f011fea1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fea7:	01 d0                	add    %edx,%eax
f011fea9:	48                   	dec    %eax
f011feaa:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011feb0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011feb6:	ba 00 00 00 00       	mov    $0x0,%edx
f011febb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011fec1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fec7:	29 d0                	sub    %edx,%eax
f011fec9:	01 d8                	add    %ebx,%eax
f011fecb:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011fed0:	39 c1                	cmp    %eax,%ecx
f011fed2:	74 17                	je     f011feeb <test_kfree+0x950>
f011fed4:	83 ec 04             	sub    $0x4,%esp
f011fed7:	68 f4 91 13 f0       	push   $0xf01391f4
f011fedc:	68 2a 05 00 00       	push   $0x52a
f011fee1:	68 0e 91 13 f0       	push   $0xf013910e
f011fee6:	e8 c5 02 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011feeb:	e8 36 47 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fef0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fef3:	74 17                	je     f011ff0c <test_kfree+0x971>
f011fef5:	83 ec 04             	sub    $0x4,%esp
f011fef8:	68 28 91 13 f0       	push   $0xf0139128
f011fefd:	68 2b 05 00 00       	push   $0x52b
f011ff02:	68 0e 91 13 f0       	push   $0xf013910e
f011ff07:	e8 a4 02 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ff0c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff0f:	e8 6c ca fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ff14:	29 c3                	sub    %eax,%ebx
f011ff16:	89 d8                	mov    %ebx,%eax
f011ff18:	83 f8 04             	cmp    $0x4,%eax
f011ff1b:	74 17                	je     f011ff34 <test_kfree+0x999>
f011ff1d:	83 ec 04             	sub    $0x4,%esp
f011ff20:	68 90 91 13 f0       	push   $0xf0139190
f011ff25:	68 2c 05 00 00       	push   $0x52c
f011ff2a:	68 0e 91 13 f0       	push   $0xf013910e
f011ff2f:	e8 7c 02 fe ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011ff34:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f011ff3b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011ff3e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011ff44:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011ff47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff4e:	eb 0e                	jmp    f011ff5e <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f011ff50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff53:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ff56:	01 d0                	add    %edx,%eax
f011ff58:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011ff5b:	ff 45 f4             	incl   -0xc(%ebp)
f011ff5e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ff64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff67:	7f e7                	jg     f011ff50 <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011ff69:	e8 12 ca fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ff6e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011ff74:	e8 ad 46 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ff79:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f011ff7f:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011ff85:	83 ec 0c             	sub    $0xc,%esp
f011ff88:	50                   	push   %eax
f011ff89:	e8 8d 7f fe ff       	call   f0107f1b <kfree>
f011ff8e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff91:	e8 90 46 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011ff96:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011ff9c:	74 17                	je     f011ffb5 <test_kfree+0xa1a>
f011ff9e:	83 ec 04             	sub    $0x4,%esp
f011ffa1:	68 28 91 13 f0       	push   $0xf0139128
f011ffa6:	68 3b 05 00 00       	push   $0x53b
f011ffab:	68 0e 91 13 f0       	push   $0xf013910e
f011ffb0:	e8 fb 01 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011ffb5:	e8 c6 c9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ffba:	89 c2                	mov    %eax,%edx
f011ffbc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ffc2:	29 c2                	sub    %eax,%edx
f011ffc4:	89 d0                	mov    %edx,%eax
f011ffc6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ffcb:	74 17                	je     f011ffe4 <test_kfree+0xa49>
f011ffcd:	83 ec 04             	sub    $0x4,%esp
f011ffd0:	68 98 98 13 f0       	push   $0xf0139898
f011ffd5:	68 3c 05 00 00       	push   $0x53c
f011ffda:	68 0e 91 13 f0       	push   $0xf013910e
f011ffdf:	e8 cc 01 fe ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ffe4:	e8 97 c9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f011ffe9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ffef:	e8 32 46 fe ff       	call   f0104626 <pf_calculate_free_frames>
f011fff4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f011fffa:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0120000:	83 ec 0c             	sub    $0xc,%esp
f0120003:	50                   	push   %eax
f0120004:	e8 12 7f fe ff       	call   f0107f1b <kfree>
f0120009:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012000c:	e8 15 46 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120011:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120017:	74 17                	je     f0120030 <test_kfree+0xa95>
f0120019:	83 ec 04             	sub    $0x4,%esp
f012001c:	68 28 91 13 f0       	push   $0xf0139128
f0120021:	68 42 05 00 00       	push   $0x542
f0120026:	68 0e 91 13 f0       	push   $0xf013910e
f012002b:	e8 80 01 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120030:	e8 4b c9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120035:	89 c2                	mov    %eax,%edx
f0120037:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012003d:	29 c2                	sub    %eax,%edx
f012003f:	89 d0                	mov    %edx,%eax
f0120041:	83 f8 01             	cmp    $0x1,%eax
f0120044:	74 17                	je     f012005d <test_kfree+0xac2>
f0120046:	83 ec 04             	sub    $0x4,%esp
f0120049:	68 98 98 13 f0       	push   $0xf0139898
f012004e:	68 43 05 00 00       	push   $0x543
f0120053:	68 0e 91 13 f0       	push   $0xf013910e
f0120058:	e8 53 01 fe ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012005d:	e8 1e c9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120062:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120068:	e8 b9 45 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012006d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0120073:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0120079:	83 ec 0c             	sub    $0xc,%esp
f012007c:	50                   	push   %eax
f012007d:	e8 99 7e fe ff       	call   f0107f1b <kfree>
f0120082:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120085:	e8 9c 45 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012008a:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120090:	74 17                	je     f01200a9 <test_kfree+0xb0e>
f0120092:	83 ec 04             	sub    $0x4,%esp
f0120095:	68 28 91 13 f0       	push   $0xf0139128
f012009a:	68 49 05 00 00       	push   $0x549
f012009f:	68 0e 91 13 f0       	push   $0xf013910e
f01200a4:	e8 07 01 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01200a9:	e8 d2 c8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01200ae:	89 c2                	mov    %eax,%edx
f01200b0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01200b6:	29 c2                	sub    %eax,%edx
f01200b8:	89 d0                	mov    %edx,%eax
f01200ba:	3d 00 02 00 00       	cmp    $0x200,%eax
f01200bf:	74 17                	je     f01200d8 <test_kfree+0xb3d>
f01200c1:	83 ec 04             	sub    $0x4,%esp
f01200c4:	68 98 98 13 f0       	push   $0xf0139898
f01200c9:	68 4a 05 00 00       	push   $0x54a
f01200ce:	68 0e 91 13 f0       	push   $0xf013910e
f01200d3:	e8 d8 00 fe ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01200d8:	e8 a3 c8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01200dd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01200e3:	e8 3e 45 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01200e8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01200ee:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01200f4:	83 ec 0c             	sub    $0xc,%esp
f01200f7:	50                   	push   %eax
f01200f8:	e8 1e 7e fe ff       	call   f0107f1b <kfree>
f01200fd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120100:	e8 21 45 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120105:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012010b:	74 17                	je     f0120124 <test_kfree+0xb89>
f012010d:	83 ec 04             	sub    $0x4,%esp
f0120110:	68 28 91 13 f0       	push   $0xf0139128
f0120115:	68 50 05 00 00       	push   $0x550
f012011a:	68 0e 91 13 f0       	push   $0xf013910e
f012011f:	e8 8c 00 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120124:	e8 57 c8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120129:	89 c2                	mov    %eax,%edx
f012012b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120131:	29 c2                	sub    %eax,%edx
f0120133:	89 d0                	mov    %edx,%eax
f0120135:	3d 00 06 00 00       	cmp    $0x600,%eax
f012013a:	74 17                	je     f0120153 <test_kfree+0xbb8>
f012013c:	83 ec 04             	sub    $0x4,%esp
f012013f:	68 98 98 13 f0       	push   $0xf0139898
f0120144:	68 51 05 00 00       	push   $0x551
f0120149:	68 0e 91 13 f0       	push   $0xf013910e
f012014e:	e8 5d 00 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120153:	83 ec 0c             	sub    $0xc,%esp
f0120156:	68 d0 98 13 f0       	push   $0xf01398d0
f012015b:	e8 d1 0c fe ff       	call   f0100e31 <cprintf>
f0120160:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120163:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120169:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012016c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120173:	eb 1e                	jmp    f0120193 <test_kfree+0xbf8>
		{
			sums[3] += ptr[i] ;
f0120175:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012017b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012017e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120181:	01 c8                	add    %ecx,%eax
f0120183:	8a 00                	mov    (%eax),%al
f0120185:	0f be c0             	movsbl %al,%eax
f0120188:	01 d0                	add    %edx,%eax
f012018a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120190:	ff 45 f4             	incl   -0xc(%ebp)
f0120193:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120199:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012019c:	7f d7                	jg     f0120175 <test_kfree+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012019e:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01201a4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01201aa:	89 c1                	mov    %eax,%ecx
f01201ac:	01 c9                	add    %ecx,%ecx
f01201ae:	01 c8                	add    %ecx,%eax
f01201b0:	39 c2                	cmp    %eax,%edx
f01201b2:	74 17                	je     f01201cb <test_kfree+0xc30>
f01201b4:	83 ec 04             	sub    $0x4,%esp
f01201b7:	68 f4 98 13 f0       	push   $0xf01398f4
f01201bc:	68 5e 05 00 00       	push   $0x55e
f01201c1:	68 0e 91 13 f0       	push   $0xf013910e
f01201c6:	e8 e5 ff fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01201cb:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01201d1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01201d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01201db:	eb 1e                	jmp    f01201fb <test_kfree+0xc60>
		{
			sums[4] += ptr[i] ;
f01201dd:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01201e3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01201e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01201e9:	01 c8                	add    %ecx,%eax
f01201eb:	8a 00                	mov    (%eax),%al
f01201ed:	0f be c0             	movsbl %al,%eax
f01201f0:	01 d0                	add    %edx,%eax
f01201f2:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01201f8:	ff 45 f4             	incl   -0xc(%ebp)
f01201fb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120201:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120204:	7f d7                	jg     f01201dd <test_kfree+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120206:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012020c:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0120212:	c1 e2 02             	shl    $0x2,%edx
f0120215:	39 d0                	cmp    %edx,%eax
f0120217:	74 17                	je     f0120230 <test_kfree+0xc95>
f0120219:	83 ec 04             	sub    $0x4,%esp
f012021c:	68 f4 98 13 f0       	push   $0xf01398f4
f0120221:	68 66 05 00 00       	push   $0x566
f0120226:	68 0e 91 13 f0       	push   $0xf013910e
f012022b:	e8 80 ff fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120230:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120236:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120239:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120240:	eb 1e                	jmp    f0120260 <test_kfree+0xcc5>
		{
			sums[5] += ptr[i] ;
f0120242:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0120248:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012024b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012024e:	01 c8                	add    %ecx,%eax
f0120250:	8a 00                	mov    (%eax),%al
f0120252:	0f be c0             	movsbl %al,%eax
f0120255:	01 d0                	add    %edx,%eax
f0120257:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012025d:	ff 45 f4             	incl   -0xc(%ebp)
f0120260:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120266:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120269:	7f d7                	jg     f0120242 <test_kfree+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012026b:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0120271:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0120277:	89 d0                	mov    %edx,%eax
f0120279:	c1 e0 02             	shl    $0x2,%eax
f012027c:	01 d0                	add    %edx,%eax
f012027e:	39 c1                	cmp    %eax,%ecx
f0120280:	74 17                	je     f0120299 <test_kfree+0xcfe>
f0120282:	83 ec 04             	sub    $0x4,%esp
f0120285:	68 f4 98 13 f0       	push   $0xf01398f4
f012028a:	68 6e 05 00 00       	push   $0x56e
f012028f:	68 0e 91 13 f0       	push   $0xf013910e
f0120294:	e8 17 ff fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120299:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012029f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01202a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01202a9:	eb 1e                	jmp    f01202c9 <test_kfree+0xd2e>
		{
			sums[7] += ptr[i] ;
f01202ab:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01202b1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01202b4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01202b7:	01 c8                	add    %ecx,%eax
f01202b9:	8a 00                	mov    (%eax),%al
f01202bb:	0f be c0             	movsbl %al,%eax
f01202be:	01 d0                	add    %edx,%eax
f01202c0:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01202c6:	ff 45 f4             	incl   -0xc(%ebp)
f01202c9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01202cf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01202d2:	7f d7                	jg     f01202ab <test_kfree+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01202d4:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01202da:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01202e0:	89 d0                	mov    %edx,%eax
f01202e2:	01 c0                	add    %eax,%eax
f01202e4:	01 d0                	add    %edx,%eax
f01202e6:	01 c0                	add    %eax,%eax
f01202e8:	01 d0                	add    %edx,%eax
f01202ea:	39 c1                	cmp    %eax,%ecx
f01202ec:	74 17                	je     f0120305 <test_kfree+0xd6a>
f01202ee:	83 ec 04             	sub    $0x4,%esp
f01202f1:	68 f4 98 13 f0       	push   $0xf01398f4
f01202f6:	68 76 05 00 00       	push   $0x576
f01202fb:	68 0e 91 13 f0       	push   $0xf013910e
f0120300:	e8 ab fe fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0120305:	83 ec 0c             	sub    $0xc,%esp
f0120308:	68 27 99 13 f0       	push   $0xf0139927
f012030d:	e8 1f 0b fe ff       	call   f0100e31 <cprintf>
f0120312:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120315:	e8 66 c6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012031a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012031d:	e8 04 43 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120322:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120325:	83 ec 0c             	sub    $0xc,%esp
f0120328:	68 00 50 00 00       	push   $0x5000
f012032d:	e8 cf 7b fe ff       	call   f0107f01 <kmalloc>
f0120332:	83 c4 10             	add    $0x10,%esp
f0120335:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012033b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120341:	89 c1                	mov    %eax,%ecx
f0120343:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012034a:	10 00 00 
f012034d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0120352:	0f b6 d0             	movzbl %al,%edx
f0120355:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012035b:	01 d0                	add    %edx,%eax
f012035d:	48                   	dec    %eax
f012035e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120364:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012036a:	ba 00 00 00 00       	mov    $0x0,%edx
f012036f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120375:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012037b:	29 d0                	sub    %edx,%eax
f012037d:	89 c3                	mov    %eax,%ebx
f012037f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120386:	10 00 00 
f0120389:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012038e:	0f b6 c0             	movzbl %al,%eax
f0120391:	c1 e0 04             	shl    $0x4,%eax
f0120394:	89 c2                	mov    %eax,%edx
f0120396:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012039c:	01 d0                	add    %edx,%eax
f012039e:	48                   	dec    %eax
f012039f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01203a5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01203ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01203b0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01203b6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01203bc:	29 d0                	sub    %edx,%eax
f01203be:	01 d8                	add    %ebx,%eax
f01203c0:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01203c5:	39 c1                	cmp    %eax,%ecx
f01203c7:	74 17                	je     f01203e0 <test_kfree+0xe45>
f01203c9:	83 ec 04             	sub    $0x4,%esp
f01203cc:	68 f4 91 13 f0       	push   $0xf01391f4
f01203d1:	68 80 05 00 00       	push   $0x580
f01203d6:	68 0e 91 13 f0       	push   $0xf013910e
f01203db:	e8 d0 fd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203e0:	e8 41 42 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01203e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01203e8:	74 17                	je     f0120401 <test_kfree+0xe66>
f01203ea:	83 ec 04             	sub    $0x4,%esp
f01203ed:	68 28 91 13 f0       	push   $0xf0139128
f01203f2:	68 81 05 00 00       	push   $0x581
f01203f7:	68 0e 91 13 f0       	push   $0xf013910e
f01203fc:	e8 af fd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120401:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120404:	e8 77 c5 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120409:	29 c3                	sub    %eax,%ebx
f012040b:	89 d8                	mov    %ebx,%eax
f012040d:	83 f8 05             	cmp    $0x5,%eax
f0120410:	74 17                	je     f0120429 <test_kfree+0xe8e>
f0120412:	83 ec 04             	sub    $0x4,%esp
f0120415:	68 90 91 13 f0       	push   $0xf0139190
f012041a:	68 82 05 00 00       	push   $0x582
f012041f:	68 0e 91 13 f0       	push   $0xf013910e
f0120424:	e8 87 fd fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120429:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0120430:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120433:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120439:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012043c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120443:	eb 0e                	jmp    f0120453 <test_kfree+0xeb8>
		{
			ptr[i] = 8 ;
f0120445:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120448:	8b 45 98             	mov    -0x68(%ebp),%eax
f012044b:	01 d0                	add    %edx,%eax
f012044d:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120450:	ff 45 f4             	incl   -0xc(%ebp)
f0120453:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120459:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012045c:	7f e7                	jg     f0120445 <test_kfree+0xeaa>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012045e:	e8 1d c5 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120463:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120466:	e8 bb 41 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012046b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012046e:	83 ec 0c             	sub    $0xc,%esp
f0120471:	68 00 00 10 00       	push   $0x100000
f0120476:	e8 86 7a fe ff       	call   f0107f01 <kmalloc>
f012047b:	83 c4 10             	add    $0x10,%esp
f012047e:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120484:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012048a:	89 c1                	mov    %eax,%ecx
f012048c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120493:	10 00 00 
f0120496:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012049b:	0f b6 d0             	movzbl %al,%edx
f012049e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01204a4:	01 d0                	add    %edx,%eax
f01204a6:	48                   	dec    %eax
f01204a7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01204ad:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01204b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01204b8:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01204be:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01204c4:	29 d0                	sub    %edx,%eax
f01204c6:	89 c3                	mov    %eax,%ebx
f01204c8:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01204cf:	10 00 00 
f01204d2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01204d7:	0f b6 c0             	movzbl %al,%eax
f01204da:	c1 e0 04             	shl    $0x4,%eax
f01204dd:	89 c2                	mov    %eax,%edx
f01204df:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01204e5:	01 d0                	add    %edx,%eax
f01204e7:	48                   	dec    %eax
f01204e8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01204ee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01204f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01204f9:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01204ff:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120505:	29 d0                	sub    %edx,%eax
f0120507:	01 d8                	add    %ebx,%eax
f0120509:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012050e:	39 c1                	cmp    %eax,%ecx
f0120510:	74 17                	je     f0120529 <test_kfree+0xf8e>
f0120512:	83 ec 04             	sub    $0x4,%esp
f0120515:	68 f4 91 13 f0       	push   $0xf01391f4
f012051a:	68 8e 05 00 00       	push   $0x58e
f012051f:	68 0e 91 13 f0       	push   $0xf013910e
f0120524:	e8 87 fc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120529:	e8 f8 40 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012052e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120531:	74 17                	je     f012054a <test_kfree+0xfaf>
f0120533:	83 ec 04             	sub    $0x4,%esp
f0120536:	68 28 91 13 f0       	push   $0xf0139128
f012053b:	68 8f 05 00 00       	push   $0x58f
f0120540:	68 0e 91 13 f0       	push   $0xf013910e
f0120545:	e8 66 fc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012054a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012054d:	e8 2e c4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120552:	29 c3                	sub    %eax,%ebx
f0120554:	89 d8                	mov    %ebx,%eax
f0120556:	3d 00 01 00 00       	cmp    $0x100,%eax
f012055b:	74 17                	je     f0120574 <test_kfree+0xfd9>
f012055d:	83 ec 04             	sub    $0x4,%esp
f0120560:	68 90 91 13 f0       	push   $0xf0139190
f0120565:	68 90 05 00 00       	push   $0x590
f012056a:	68 0e 91 13 f0       	push   $0xf013910e
f012056f:	e8 3c fc fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120574:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f012057b:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012057e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120584:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120587:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012058e:	eb 0e                	jmp    f012059e <test_kfree+0x1003>
		{
			ptr[i] = 9 ;
f0120590:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120593:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120596:	01 d0                	add    %edx,%eax
f0120598:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012059b:	ff 45 f4             	incl   -0xc(%ebp)
f012059e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01205a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205a7:	7f e7                	jg     f0120590 <test_kfree+0xff5>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01205a9:	e8 16 7e ff ff       	call   f01183c4 <isKHeapPlacementStrategyNEXTFIT>
f01205ae:	84 c0                	test   %al,%al
f01205b0:	0f 84 9e 05 00 00    	je     f0120b54 <test_kfree+0x15b9>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01205b6:	e8 c5 c3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01205bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01205be:	e8 63 40 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01205c3:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01205c6:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01205cd:	10 00 00 
f01205d0:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01205d5:	0f b6 d0             	movzbl %al,%edx
f01205d8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01205de:	01 d0                	add    %edx,%eax
f01205e0:	48                   	dec    %eax
f01205e1:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01205e7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01205ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01205f2:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01205f8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01205fe:	29 d0                	sub    %edx,%eax
f0120600:	89 c1                	mov    %eax,%ecx
f0120602:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120609:	10 00 00 
f012060c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0120611:	0f b6 c0             	movzbl %al,%eax
f0120614:	c1 e0 04             	shl    $0x4,%eax
f0120617:	89 c2                	mov    %eax,%edx
f0120619:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012061f:	01 d0                	add    %edx,%eax
f0120621:	48                   	dec    %eax
f0120622:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120628:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012062e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120633:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120639:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012063f:	29 d0                	sub    %edx,%eax
f0120641:	01 c8                	add    %ecx,%eax
f0120643:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120648:	29 c2                	sub    %eax,%edx
f012064a:	89 d0                	mov    %edx,%eax
f012064c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120652:	83 ec 0c             	sub    $0xc,%esp
f0120655:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
f012065b:	e8 a1 78 fe ff       	call   f0107f01 <kmalloc>
f0120660:	83 c4 10             	add    $0x10,%esp
f0120663:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120669:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012066f:	89 c1                	mov    %eax,%ecx
f0120671:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0120678:	10 00 00 
f012067b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0120680:	0f b6 d0             	movzbl %al,%edx
f0120683:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120689:	01 d0                	add    %edx,%eax
f012068b:	48                   	dec    %eax
f012068c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0120692:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120698:	ba 00 00 00 00       	mov    $0x0,%edx
f012069d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01206a3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01206a9:	29 d0                	sub    %edx,%eax
f01206ab:	89 c3                	mov    %eax,%ebx
f01206ad:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01206b4:	10 00 00 
f01206b7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01206bc:	0f b6 c0             	movzbl %al,%eax
f01206bf:	c1 e0 04             	shl    $0x4,%eax
f01206c2:	89 c2                	mov    %eax,%edx
f01206c4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01206ca:	01 d0                	add    %edx,%eax
f01206cc:	48                   	dec    %eax
f01206cd:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01206d3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01206d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01206de:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01206e4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01206ea:	29 d0                	sub    %edx,%eax
f01206ec:	01 d8                	add    %ebx,%eax
f01206ee:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01206f3:	39 c1                	cmp    %eax,%ecx
f01206f5:	74 17                	je     f012070e <test_kfree+0x1173>
f01206f7:	83 ec 04             	sub    $0x4,%esp
f01206fa:	68 f4 91 13 f0       	push   $0xf01391f4
f01206ff:	68 9f 05 00 00       	push   $0x59f
f0120704:	68 0e 91 13 f0       	push   $0xf013910e
f0120709:	e8 a2 fa fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012070e:	e8 13 3f fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120713:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120716:	74 17                	je     f012072f <test_kfree+0x1194>
f0120718:	83 ec 04             	sub    $0x4,%esp
f012071b:	68 28 91 13 f0       	push   $0xf0139128
f0120720:	68 a0 05 00 00       	push   $0x5a0
f0120725:	68 0e 91 13 f0       	push   $0xf013910e
f012072a:	e8 81 fa fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012072f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120732:	e8 49 c2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120737:	29 c3                	sub    %eax,%ebx
f0120739:	89 da                	mov    %ebx,%edx
f012073b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120741:	c1 e8 0c             	shr    $0xc,%eax
f0120744:	39 c2                	cmp    %eax,%edx
f0120746:	74 17                	je     f012075f <test_kfree+0x11c4>
f0120748:	83 ec 04             	sub    $0x4,%esp
f012074b:	68 90 91 13 f0       	push   $0xf0139190
f0120750:	68 a1 05 00 00       	push   $0x5a1
f0120755:	68 0e 91 13 f0       	push   $0xf013910e
f012075a:	e8 51 fa fd ff       	call   f01001b0 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f012075f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120765:	48                   	dec    %eax
f0120766:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			ptr = (char*)ptr_allocations[10];
f012076c:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120772:	89 45 98             	mov    %eax,-0x68(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120775:	e8 06 c2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012077a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012077d:	e8 a4 3e fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120782:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120785:	83 ec 0c             	sub    $0xc,%esp
f0120788:	68 00 00 30 00       	push   $0x300000
f012078d:	e8 6f 77 fe ff       	call   f0107f01 <kmalloc>
f0120792:	83 c4 10             	add    $0x10,%esp
f0120795:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012079b:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01207a1:	89 c1                	mov    %eax,%ecx
f01207a3:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01207aa:	10 00 00 
f01207ad:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01207b2:	0f b6 d0             	movzbl %al,%edx
f01207b5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01207bb:	01 d0                	add    %edx,%eax
f01207bd:	48                   	dec    %eax
f01207be:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01207c4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01207ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01207cf:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01207d5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01207db:	29 d0                	sub    %edx,%eax
f01207dd:	89 c3                	mov    %eax,%ebx
f01207df:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01207e6:	10 00 00 
f01207e9:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01207ee:	0f b6 c0             	movzbl %al,%eax
f01207f1:	c1 e0 04             	shl    $0x4,%eax
f01207f4:	89 c2                	mov    %eax,%edx
f01207f6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01207fc:	01 d0                	add    %edx,%eax
f01207fe:	48                   	dec    %eax
f01207ff:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0120805:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012080b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120810:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0120816:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012081c:	29 d0                	sub    %edx,%eax
f012081e:	01 d8                	add    %ebx,%eax
f0120820:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120825:	39 c1                	cmp    %eax,%ecx
f0120827:	74 17                	je     f0120840 <test_kfree+0x12a5>
f0120829:	83 ec 04             	sub    $0x4,%esp
f012082c:	68 f4 91 13 f0       	push   $0xf01391f4
f0120831:	68 ae 05 00 00       	push   $0x5ae
f0120836:	68 0e 91 13 f0       	push   $0xf013910e
f012083b:	e8 70 f9 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120840:	e8 e1 3d fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120845:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120848:	74 17                	je     f0120861 <test_kfree+0x12c6>
f012084a:	83 ec 04             	sub    $0x4,%esp
f012084d:	68 28 91 13 f0       	push   $0xf0139128
f0120852:	68 af 05 00 00       	push   $0x5af
f0120857:	68 0e 91 13 f0       	push   $0xf013910e
f012085c:	e8 4f f9 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120861:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120864:	e8 17 c1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120869:	29 c3                	sub    %eax,%ebx
f012086b:	89 d8                	mov    %ebx,%eax
f012086d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120872:	74 17                	je     f012088b <test_kfree+0x12f0>
f0120874:	83 ec 04             	sub    $0x4,%esp
f0120877:	68 90 91 13 f0       	push   $0xf0139190
f012087c:	68 b0 05 00 00       	push   $0x5b0
f0120881:	68 0e 91 13 f0       	push   $0xf013910e
f0120886:	e8 25 f9 fd ff       	call   f01001b0 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f012088b:	c7 85 94 fe ff ff ff 	movl   $0x2fffff,-0x16c(%ebp)
f0120892:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120895:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012089b:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f012089e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01208a5:	eb 0e                	jmp    f01208b5 <test_kfree+0x131a>
			{
				ptr[i] = 8 ;
f01208a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01208aa:	8b 45 98             	mov    -0x68(%ebp),%eax
f01208ad:	01 d0                	add    %edx,%eax
f01208af:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f01208b2:	ff 45 f4             	incl   -0xc(%ebp)
f01208b5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01208bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01208be:	7f e7                	jg     f01208a7 <test_kfree+0x130c>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f01208c0:	e8 bb c0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01208c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01208c8:	e8 59 3d fe ff       	call   f0104626 <pf_calculate_free_frames>
f01208cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f01208d0:	83 ec 0c             	sub    $0xc,%esp
f01208d3:	68 00 08 00 00       	push   $0x800
f01208d8:	e8 24 76 fe ff       	call   f0107f01 <kmalloc>
f01208dd:	83 c4 10             	add    $0x10,%esp
f01208e0:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208e6:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01208ec:	89 c1                	mov    %eax,%ecx
f01208ee:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01208f5:	10 00 00 
f01208f8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01208fd:	0f b6 d0             	movzbl %al,%edx
f0120900:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120906:	01 d0                	add    %edx,%eax
f0120908:	48                   	dec    %eax
f0120909:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012090f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120915:	ba 00 00 00 00       	mov    $0x0,%edx
f012091a:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0120920:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120926:	29 d0                	sub    %edx,%eax
f0120928:	89 c3                	mov    %eax,%ebx
f012092a:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0120931:	10 00 00 
f0120934:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0120939:	0f b6 c0             	movzbl %al,%eax
f012093c:	c1 e0 04             	shl    $0x4,%eax
f012093f:	89 c2                	mov    %eax,%edx
f0120941:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120947:	01 d0                	add    %edx,%eax
f0120949:	48                   	dec    %eax
f012094a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0120950:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120956:	ba 00 00 00 00       	mov    $0x0,%edx
f012095b:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0120961:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120967:	29 d0                	sub    %edx,%eax
f0120969:	01 d8                	add    %ebx,%eax
f012096b:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120970:	39 c1                	cmp    %eax,%ecx
f0120972:	74 17                	je     f012098b <test_kfree+0x13f0>
f0120974:	83 ec 04             	sub    $0x4,%esp
f0120977:	68 f4 91 13 f0       	push   $0xf01391f4
f012097c:	68 bc 05 00 00       	push   $0x5bc
f0120981:	68 0e 91 13 f0       	push   $0xf013910e
f0120986:	e8 25 f8 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012098b:	e8 96 3c fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120990:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120993:	74 17                	je     f01209ac <test_kfree+0x1411>
f0120995:	83 ec 04             	sub    $0x4,%esp
f0120998:	68 28 91 13 f0       	push   $0xf0139128
f012099d:	68 bd 05 00 00       	push   $0x5bd
f01209a2:	68 0e 91 13 f0       	push   $0xf013910e
f01209a7:	e8 04 f8 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209ac:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209af:	e8 cc bf fe ff       	call   f010c980 <sys_calculate_free_frames>
f01209b4:	29 c3                	sub    %eax,%ebx
f01209b6:	89 d8                	mov    %ebx,%eax
f01209b8:	83 f8 01             	cmp    $0x1,%eax
f01209bb:	74 17                	je     f01209d4 <test_kfree+0x1439>
f01209bd:	83 ec 04             	sub    $0x4,%esp
f01209c0:	68 90 91 13 f0       	push   $0xf0139190
f01209c5:	68 be 05 00 00       	push   $0x5be
f01209ca:	68 0e 91 13 f0       	push   $0xf013910e
f01209cf:	e8 dc f7 fd ff       	call   f01001b0 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01209d4:	c7 85 98 fe ff ff ff 	movl   $0x7ff,-0x168(%ebp)
f01209db:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01209de:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01209e4:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01209e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01209ee:	eb 0e                	jmp    f01209fe <test_kfree+0x1463>
			{
				ptr[i] = 9 ;
f01209f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01209f3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01209f6:	01 d0                	add    %edx,%eax
f01209f8:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f01209fb:	ff 45 f4             	incl   -0xc(%ebp)
f01209fe:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120a04:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a07:	7f e7                	jg     f01209f0 <test_kfree+0x1455>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120a09:	e8 72 bf fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120a0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a11:	e8 10 3c fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120a16:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120a19:	83 ec 0c             	sub    $0xc,%esp
f0120a1c:	68 00 00 10 00       	push   $0x100000
f0120a21:	e8 db 74 fe ff       	call   f0107f01 <kmalloc>
f0120a26:	83 c4 10             	add    $0x10,%esp
f0120a29:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a2f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120a35:	89 c1                	mov    %eax,%ecx
f0120a37:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0120a3e:	10 00 00 
f0120a41:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0120a46:	0f b6 d0             	movzbl %al,%edx
f0120a49:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120a4f:	01 d0                	add    %edx,%eax
f0120a51:	48                   	dec    %eax
f0120a52:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0120a58:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120a5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a63:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0120a69:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120a6f:	29 d0                	sub    %edx,%eax
f0120a71:	89 c3                	mov    %eax,%ebx
f0120a73:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0120a7a:	10 00 00 
f0120a7d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0120a82:	0f b6 c0             	movzbl %al,%eax
f0120a85:	c1 e0 04             	shl    $0x4,%eax
f0120a88:	89 c2                	mov    %eax,%edx
f0120a8a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120a90:	01 d0                	add    %edx,%eax
f0120a92:	48                   	dec    %eax
f0120a93:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0120a99:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120a9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120aa4:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0120aaa:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120ab0:	29 d0                	sub    %edx,%eax
f0120ab2:	01 d8                	add    %ebx,%eax
f0120ab4:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120ab9:	39 c1                	cmp    %eax,%ecx
f0120abb:	74 17                	je     f0120ad4 <test_kfree+0x1539>
f0120abd:	83 ec 04             	sub    $0x4,%esp
f0120ac0:	68 f4 91 13 f0       	push   $0xf01391f4
f0120ac5:	68 ca 05 00 00       	push   $0x5ca
f0120aca:	68 0e 91 13 f0       	push   $0xf013910e
f0120acf:	e8 dc f6 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ad4:	e8 4d 3b fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120ad9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120adc:	74 17                	je     f0120af5 <test_kfree+0x155a>
f0120ade:	83 ec 04             	sub    $0x4,%esp
f0120ae1:	68 28 91 13 f0       	push   $0xf0139128
f0120ae6:	68 cb 05 00 00       	push   $0x5cb
f0120aeb:	68 0e 91 13 f0       	push   $0xf013910e
f0120af0:	e8 bb f6 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120af5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120af8:	e8 83 be fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120afd:	29 c3                	sub    %eax,%ebx
f0120aff:	89 d8                	mov    %ebx,%eax
f0120b01:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120b06:	74 17                	je     f0120b1f <test_kfree+0x1584>
f0120b08:	83 ec 04             	sub    $0x4,%esp
f0120b0b:	68 90 91 13 f0       	push   $0xf0139190
f0120b10:	68 cc 05 00 00       	push   $0x5cc
f0120b15:	68 0e 91 13 f0       	push   $0xf013910e
f0120b1a:	e8 91 f6 fd ff       	call   f01001b0 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120b1f:	c7 85 9c fe ff ff ff 	movl   $0xfffff,-0x164(%ebp)
f0120b26:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120b29:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120b2f:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120b32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b39:	eb 0e                	jmp    f0120b49 <test_kfree+0x15ae>
			{
				ptr[i] = 10 ;
f0120b3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b3e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120b41:	01 d0                	add    %edx,%eax
f0120b43:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120b46:	ff 45 f4             	incl   -0xc(%ebp)
f0120b49:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120b4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b52:	7f e7                	jg     f0120b3b <test_kfree+0x15a0>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120b54:	83 ec 0c             	sub    $0xc,%esp
f0120b57:	68 2e 99 13 f0       	push   $0xf013992e
f0120b5c:	e8 d0 02 fe ff       	call   f0100e31 <cprintf>
f0120b61:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120b64:	e8 17 be fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120b69:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120b6c:	e8 b5 3a fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120b71:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120b74:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120b7a:	83 ec 0c             	sub    $0xc,%esp
f0120b7d:	50                   	push   %eax
f0120b7e:	e8 98 73 fe ff       	call   f0107f1b <kfree>
f0120b83:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b86:	e8 9b 3a fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120b8b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b8e:	74 17                	je     f0120ba7 <test_kfree+0x160c>
f0120b90:	83 ec 04             	sub    $0x4,%esp
f0120b93:	68 28 91 13 f0       	push   $0xf0139128
f0120b98:	68 dd 05 00 00       	push   $0x5dd
f0120b9d:	68 0e 91 13 f0       	push   $0xf013910e
f0120ba2:	e8 09 f6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ba7:	e8 d4 bd fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120bac:	89 c2                	mov    %eax,%edx
f0120bae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120bb1:	29 c2                	sub    %eax,%edx
f0120bb3:	89 d0                	mov    %edx,%eax
f0120bb5:	83 f8 02             	cmp    $0x2,%eax
f0120bb8:	74 17                	je     f0120bd1 <test_kfree+0x1636>
f0120bba:	83 ec 04             	sub    $0x4,%esp
f0120bbd:	68 98 98 13 f0       	push   $0xf0139898
f0120bc2:	68 de 05 00 00       	push   $0x5de
f0120bc7:	68 0e 91 13 f0       	push   $0xf013910e
f0120bcc:	e8 df f5 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120bd1:	e8 aa bd fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120bd6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120bd9:	e8 48 3a fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120bde:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120be1:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120be7:	83 ec 0c             	sub    $0xc,%esp
f0120bea:	50                   	push   %eax
f0120beb:	e8 2b 73 fe ff       	call   f0107f1b <kfree>
f0120bf0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bf3:	e8 2e 3a fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120bf8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bfb:	74 17                	je     f0120c14 <test_kfree+0x1679>
f0120bfd:	83 ec 04             	sub    $0x4,%esp
f0120c00:	68 28 91 13 f0       	push   $0xf0139128
f0120c05:	68 e4 05 00 00       	push   $0x5e4
f0120c0a:	68 0e 91 13 f0       	push   $0xf013910e
f0120c0f:	e8 9c f5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c14:	e8 67 bd fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120c19:	89 c2                	mov    %eax,%edx
f0120c1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c1e:	29 c2                	sub    %eax,%edx
f0120c20:	89 d0                	mov    %edx,%eax
f0120c22:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120c27:	74 17                	je     f0120c40 <test_kfree+0x16a5>
f0120c29:	83 ec 04             	sub    $0x4,%esp
f0120c2c:	68 98 98 13 f0       	push   $0xf0139898
f0120c31:	68 e5 05 00 00       	push   $0x5e5
f0120c36:	68 0e 91 13 f0       	push   $0xf013910e
f0120c3b:	e8 70 f5 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c40:	e8 3b bd fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120c45:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c48:	e8 d9 39 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120c4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120c50:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120c56:	83 ec 0c             	sub    $0xc,%esp
f0120c59:	50                   	push   %eax
f0120c5a:	e8 bc 72 fe ff       	call   f0107f1b <kfree>
f0120c5f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c62:	e8 bf 39 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120c67:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c6a:	74 17                	je     f0120c83 <test_kfree+0x16e8>
f0120c6c:	83 ec 04             	sub    $0x4,%esp
f0120c6f:	68 28 91 13 f0       	push   $0xf0139128
f0120c74:	68 eb 05 00 00       	push   $0x5eb
f0120c79:	68 0e 91 13 f0       	push   $0xf013910e
f0120c7e:	e8 2d f5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c83:	e8 f8 bc fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120c88:	89 c2                	mov    %eax,%edx
f0120c8a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c8d:	29 c2                	sub    %eax,%edx
f0120c8f:	89 d0                	mov    %edx,%eax
f0120c91:	83 f8 01             	cmp    $0x1,%eax
f0120c94:	74 17                	je     f0120cad <test_kfree+0x1712>
f0120c96:	83 ec 04             	sub    $0x4,%esp
f0120c99:	68 98 98 13 f0       	push   $0xf0139898
f0120c9e:	68 ec 05 00 00       	push   $0x5ec
f0120ca3:	68 0e 91 13 f0       	push   $0xf013910e
f0120ca8:	e8 03 f5 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120cad:	e8 ce bc fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120cb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120cb5:	e8 6c 39 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120cba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0120cbd:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120cc3:	83 ec 0c             	sub    $0xc,%esp
f0120cc6:	50                   	push   %eax
f0120cc7:	e8 4f 72 fe ff       	call   f0107f1b <kfree>
f0120ccc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ccf:	e8 52 39 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120cd4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120cd7:	74 17                	je     f0120cf0 <test_kfree+0x1755>
f0120cd9:	83 ec 04             	sub    $0x4,%esp
f0120cdc:	68 28 91 13 f0       	push   $0xf0139128
f0120ce1:	68 f2 05 00 00       	push   $0x5f2
f0120ce6:	68 0e 91 13 f0       	push   $0xf013910e
f0120ceb:	e8 c0 f4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120cf0:	e8 8b bc fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120cf5:	89 c2                	mov    %eax,%edx
f0120cf7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120cfa:	29 c2                	sub    %eax,%edx
f0120cfc:	89 d0                	mov    %edx,%eax
f0120cfe:	83 f8 04             	cmp    $0x4,%eax
f0120d01:	74 17                	je     f0120d1a <test_kfree+0x177f>
f0120d03:	83 ec 04             	sub    $0x4,%esp
f0120d06:	68 98 98 13 f0       	push   $0xf0139898
f0120d0b:	68 f3 05 00 00       	push   $0x5f3
f0120d10:	68 0e 91 13 f0       	push   $0xf013910e
f0120d15:	e8 96 f4 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120d1a:	e8 61 bc fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120d1f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d22:	e8 ff 38 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120d27:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120d2a:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120d30:	83 ec 0c             	sub    $0xc,%esp
f0120d33:	50                   	push   %eax
f0120d34:	e8 e2 71 fe ff       	call   f0107f1b <kfree>
f0120d39:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d3c:	e8 e5 38 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120d41:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d44:	74 17                	je     f0120d5d <test_kfree+0x17c2>
f0120d46:	83 ec 04             	sub    $0x4,%esp
f0120d49:	68 28 91 13 f0       	push   $0xf0139128
f0120d4e:	68 f9 05 00 00       	push   $0x5f9
f0120d53:	68 0e 91 13 f0       	push   $0xf013910e
f0120d58:	e8 53 f4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d5d:	e8 1e bc fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120d62:	89 c2                	mov    %eax,%edx
f0120d64:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120d67:	29 c2                	sub    %eax,%edx
f0120d69:	89 d0                	mov    %edx,%eax
f0120d6b:	83 f8 05             	cmp    $0x5,%eax
f0120d6e:	74 17                	je     f0120d87 <test_kfree+0x17ec>
f0120d70:	83 ec 04             	sub    $0x4,%esp
f0120d73:	68 98 98 13 f0       	push   $0xf0139898
f0120d78:	68 fa 05 00 00       	push   $0x5fa
f0120d7d:	68 0e 91 13 f0       	push   $0xf013910e
f0120d82:	e8 29 f4 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120d87:	e8 f4 bb fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120d8c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d8f:	e8 92 38 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120d94:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120d97:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120d9d:	83 ec 0c             	sub    $0xc,%esp
f0120da0:	50                   	push   %eax
f0120da1:	e8 75 71 fe ff       	call   f0107f1b <kfree>
f0120da6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120da9:	e8 78 38 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120dae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120db1:	74 17                	je     f0120dca <test_kfree+0x182f>
f0120db3:	83 ec 04             	sub    $0x4,%esp
f0120db6:	68 28 91 13 f0       	push   $0xf0139128
f0120dbb:	68 00 06 00 00       	push   $0x600
f0120dc0:	68 0e 91 13 f0       	push   $0xf013910e
f0120dc5:	e8 e6 f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0120dca:	e8 b1 bb fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120dcf:	89 c2                	mov    %eax,%edx
f0120dd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120dd4:	29 c2                	sub    %eax,%edx
f0120dd6:	89 d0                	mov    %edx,%eax
f0120dd8:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120ddd:	74 17                	je     f0120df6 <test_kfree+0x185b>
f0120ddf:	83 ec 04             	sub    $0x4,%esp
f0120de2:	68 98 98 13 f0       	push   $0xf0139898
f0120de7:	68 01 06 00 00       	push   $0x601
f0120dec:	68 0e 91 13 f0       	push   $0xf013910e
f0120df1:	e8 ba f3 fd ff       	call   f01001b0 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120df6:	e8 c9 75 ff ff       	call   f01183c4 <isKHeapPlacementStrategyNEXTFIT>
f0120dfb:	84 c0                	test   %al,%al
f0120dfd:	0f 84 4a 02 00 00    	je     f012104d <test_kfree+0x1ab2>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120e03:	e8 78 bb fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120e08:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120e0b:	e8 16 38 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120e10:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120e13:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120e19:	83 ec 0c             	sub    $0xc,%esp
f0120e1c:	50                   	push   %eax
f0120e1d:	e8 f9 70 fe ff       	call   f0107f1b <kfree>
f0120e22:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120e25:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0120e2c:	10 00 00 
f0120e2f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0120e34:	0f b6 d0             	movzbl %al,%edx
f0120e37:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120e3d:	01 d0                	add    %edx,%eax
f0120e3f:	48                   	dec    %eax
f0120e40:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0120e46:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120e4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e51:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0120e57:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120e5d:	29 d0                	sub    %edx,%eax
f0120e5f:	89 c1                	mov    %eax,%ecx
f0120e61:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0120e68:	10 00 00 
f0120e6b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0120e70:	0f b6 c0             	movzbl %al,%eax
f0120e73:	c1 e0 04             	shl    $0x4,%eax
f0120e76:	89 c2                	mov    %eax,%edx
f0120e78:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120e7e:	01 d0                	add    %edx,%eax
f0120e80:	48                   	dec    %eax
f0120e81:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0120e87:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120e8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e92:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0120e98:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120e9e:	29 d0                	sub    %edx,%eax
f0120ea0:	01 c8                	add    %ecx,%eax
f0120ea2:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120ea7:	29 c2                	sub    %eax,%edx
f0120ea9:	89 d0                	mov    %edx,%eax
f0120eab:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120eb1:	e8 70 37 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120eb6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120eb9:	74 17                	je     f0120ed2 <test_kfree+0x1937>
f0120ebb:	83 ec 04             	sub    $0x4,%esp
f0120ebe:	68 28 91 13 f0       	push   $0xf0139128
f0120ec3:	68 0b 06 00 00       	push   $0x60b
f0120ec8:	68 0e 91 13 f0       	push   $0xf013910e
f0120ecd:	e8 de f2 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ed2:	e8 a9 ba fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120ed7:	89 c2                	mov    %eax,%edx
f0120ed9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120edc:	29 c2                	sub    %eax,%edx
f0120ede:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120ee4:	c1 e8 0c             	shr    $0xc,%eax
f0120ee7:	39 c2                	cmp    %eax,%edx
f0120ee9:	74 17                	je     f0120f02 <test_kfree+0x1967>
f0120eeb:	83 ec 04             	sub    $0x4,%esp
f0120eee:	68 98 98 13 f0       	push   $0xf0139898
f0120ef3:	68 0c 06 00 00       	push   $0x60c
f0120ef8:	68 0e 91 13 f0       	push   $0xf013910e
f0120efd:	e8 ae f2 fd ff       	call   f01001b0 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120f02:	e8 79 ba fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120f07:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f0a:	e8 17 37 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120f0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120f12:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120f18:	83 ec 0c             	sub    $0xc,%esp
f0120f1b:	50                   	push   %eax
f0120f1c:	e8 fa 6f fe ff       	call   f0107f1b <kfree>
f0120f21:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f24:	e8 fd 36 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120f29:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f2c:	74 17                	je     f0120f45 <test_kfree+0x19aa>
f0120f2e:	83 ec 04             	sub    $0x4,%esp
f0120f31:	68 28 91 13 f0       	push   $0xf0139128
f0120f36:	68 12 06 00 00       	push   $0x612
f0120f3b:	68 0e 91 13 f0       	push   $0xf013910e
f0120f40:	e8 6b f2 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f45:	e8 36 ba fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120f4a:	89 c2                	mov    %eax,%edx
f0120f4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f4f:	29 c2                	sub    %eax,%edx
f0120f51:	89 d0                	mov    %edx,%eax
f0120f53:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120f58:	74 17                	je     f0120f71 <test_kfree+0x19d6>
f0120f5a:	83 ec 04             	sub    $0x4,%esp
f0120f5d:	68 98 98 13 f0       	push   $0xf0139898
f0120f62:	68 13 06 00 00       	push   $0x613
f0120f67:	68 0e 91 13 f0       	push   $0xf013910e
f0120f6c:	e8 3f f2 fd ff       	call   f01001b0 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120f71:	e8 0a ba fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120f76:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f79:	e8 a8 36 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120f7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0120f81:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120f87:	83 ec 0c             	sub    $0xc,%esp
f0120f8a:	50                   	push   %eax
f0120f8b:	e8 8b 6f fe ff       	call   f0107f1b <kfree>
f0120f90:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f93:	e8 8e 36 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120f98:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f9b:	74 17                	je     f0120fb4 <test_kfree+0x1a19>
f0120f9d:	83 ec 04             	sub    $0x4,%esp
f0120fa0:	68 28 91 13 f0       	push   $0xf0139128
f0120fa5:	68 19 06 00 00       	push   $0x619
f0120faa:	68 0e 91 13 f0       	push   $0xf013910e
f0120faf:	e8 fc f1 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fb4:	e8 c7 b9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120fb9:	89 c2                	mov    %eax,%edx
f0120fbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fbe:	29 c2                	sub    %eax,%edx
f0120fc0:	89 d0                	mov    %edx,%eax
f0120fc2:	83 f8 01             	cmp    $0x1,%eax
f0120fc5:	74 17                	je     f0120fde <test_kfree+0x1a43>
f0120fc7:	83 ec 04             	sub    $0x4,%esp
f0120fca:	68 98 98 13 f0       	push   $0xf0139898
f0120fcf:	68 1a 06 00 00       	push   $0x61a
f0120fd4:	68 0e 91 13 f0       	push   $0xf013910e
f0120fd9:	e8 d2 f1 fd ff       	call   f01001b0 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120fde:	e8 9d b9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0120fe3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120fe6:	e8 3b 36 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0120feb:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0120fee:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120ff4:	83 ec 0c             	sub    $0xc,%esp
f0120ff7:	50                   	push   %eax
f0120ff8:	e8 1e 6f fe ff       	call   f0107f1b <kfree>
f0120ffd:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121000:	e8 21 36 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121005:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121008:	74 17                	je     f0121021 <test_kfree+0x1a86>
f012100a:	83 ec 04             	sub    $0x4,%esp
f012100d:	68 28 91 13 f0       	push   $0xf0139128
f0121012:	68 20 06 00 00       	push   $0x620
f0121017:	68 0e 91 13 f0       	push   $0xf013910e
f012101c:	e8 8f f1 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121021:	e8 5a b9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121026:	89 c2                	mov    %eax,%edx
f0121028:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012102b:	29 c2                	sub    %eax,%edx
f012102d:	89 d0                	mov    %edx,%eax
f012102f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121034:	74 17                	je     f012104d <test_kfree+0x1ab2>
f0121036:	83 ec 04             	sub    $0x4,%esp
f0121039:	68 98 98 13 f0       	push   $0xf0139898
f012103e:	68 21 06 00 00       	push   $0x621
f0121043:	68 0e 91 13 f0       	push   $0xf013910e
f0121048:	e8 63 f1 fd ff       	call   f01001b0 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f012104d:	e8 2e b9 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121052:	89 c2                	mov    %eax,%edx
f0121054:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121057:	39 c2                	cmp    %eax,%edx
f0121059:	74 17                	je     f0121072 <test_kfree+0x1ad7>
f012105b:	83 ec 04             	sub    $0x4,%esp
f012105e:	68 38 99 13 f0       	push   $0xf0139938
f0121063:	68 24 06 00 00       	push   $0x624
f0121068:	68 0e 91 13 f0       	push   $0xf013910e
f012106d:	e8 3e f1 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f0121072:	83 ec 0c             	sub    $0xc,%esp
f0121075:	68 6c 99 13 f0       	push   $0xf013996c
f012107a:	e8 b2 fd fd ff       	call   f0100e31 <cprintf>
f012107f:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121082:	83 ec 0c             	sub    $0xc,%esp
f0121085:	6a 03                	push   $0x3
f0121087:	e8 8f bd fe ff       	call   f010ce1b <sys_bypassPageFault>
f012108c:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012108f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121096:	e9 82 00 00 00       	jmp    f012111d <test_kfree+0x1b82>
		{
			ptr = (char *) ptr_allocations[i];
f012109b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012109e:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01210a5:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01210a8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01210ab:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01210ae:	e8 56 bd fe ff       	call   f010ce09 <sys_rcr2>
f01210b3:	89 c2                	mov    %eax,%edx
f01210b5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01210b8:	39 c2                	cmp    %eax,%edx
f01210ba:	74 17                	je     f01210d3 <test_kfree+0x1b38>
f01210bc:	83 ec 04             	sub    $0x4,%esp
f01210bf:	68 74 99 13 f0       	push   $0xf0139974
f01210c4:	68 33 06 00 00       	push   $0x633
f01210c9:	68 0e 91 13 f0       	push   $0xf013910e
f01210ce:	e8 dd f0 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f01210d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210d6:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01210dd:	89 c2                	mov    %eax,%edx
f01210df:	8b 45 98             	mov    -0x68(%ebp),%eax
f01210e2:	01 d0                	add    %edx,%eax
f01210e4:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01210e7:	e8 1d bd fe ff       	call   f010ce09 <sys_rcr2>
f01210ec:	89 c2                	mov    %eax,%edx
f01210ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210f1:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01210f8:	89 c1                	mov    %eax,%ecx
f01210fa:	8b 45 98             	mov    -0x68(%ebp),%eax
f01210fd:	01 c8                	add    %ecx,%eax
f01210ff:	39 c2                	cmp    %eax,%edx
f0121101:	74 17                	je     f012111a <test_kfree+0x1b7f>
f0121103:	83 ec 04             	sub    $0x4,%esp
f0121106:	68 74 99 13 f0       	push   $0xf0139974
f012110b:	68 35 06 00 00       	push   $0x635
f0121110:	68 0e 91 13 f0       	push   $0xf013910e
f0121115:	e8 96 f0 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012111a:	ff 45 f4             	incl   -0xc(%ebp)
f012111d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121121:	0f 8e 74 ff ff ff    	jle    f012109b <test_kfree+0x1b00>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121127:	83 ec 0c             	sub    $0xc,%esp
f012112a:	6a 00                	push   $0x0
f012112c:	e8 ea bc fe ff       	call   f010ce1b <sys_bypassPageFault>
f0121131:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121134:	83 ec 0c             	sub    $0xc,%esp
f0121137:	68 b9 99 13 f0       	push   $0xf01399b9
f012113c:	e8 f0 fc fd ff       	call   f0100e31 <cprintf>
f0121141:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121144:	e8 37 b8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121149:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012114c:	e8 d5 34 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121151:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121154:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012115a:	83 ec 0c             	sub    $0xc,%esp
f012115d:	50                   	push   %eax
f012115e:	e8 b8 6d fe ff       	call   f0107f1b <kfree>
f0121163:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121166:	e8 bb 34 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012116b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012116e:	74 17                	je     f0121187 <test_kfree+0x1bec>
f0121170:	83 ec 04             	sub    $0x4,%esp
f0121173:	68 28 91 13 f0       	push   $0xf0139128
f0121178:	68 43 06 00 00       	push   $0x643
f012117d:	68 0e 91 13 f0       	push   $0xf013910e
f0121182:	e8 29 f0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121187:	e8 f4 b7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012118c:	89 c2                	mov    %eax,%edx
f012118e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121191:	39 c2                	cmp    %eax,%edx
f0121193:	74 17                	je     f01211ac <test_kfree+0x1c11>
f0121195:	83 ec 04             	sub    $0x4,%esp
f0121198:	68 c0 99 13 f0       	push   $0xf01399c0
f012119d:	68 44 06 00 00       	push   $0x644
f01211a2:	68 0e 91 13 f0       	push   $0xf013910e
f01211a7:	e8 04 f0 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01211ac:	e8 cf b7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01211b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211b4:	e8 6d 34 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01211b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01211bc:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01211c2:	83 ec 0c             	sub    $0xc,%esp
f01211c5:	50                   	push   %eax
f01211c6:	e8 50 6d fe ff       	call   f0107f1b <kfree>
f01211cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211ce:	e8 53 34 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01211d3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211d6:	74 17                	je     f01211ef <test_kfree+0x1c54>
f01211d8:	83 ec 04             	sub    $0x4,%esp
f01211db:	68 28 91 13 f0       	push   $0xf0139128
f01211e0:	68 4a 06 00 00       	push   $0x64a
f01211e5:	68 0e 91 13 f0       	push   $0xf013910e
f01211ea:	e8 c1 ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01211ef:	e8 8c b7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01211f4:	89 c2                	mov    %eax,%edx
f01211f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211f9:	39 c2                	cmp    %eax,%edx
f01211fb:	74 17                	je     f0121214 <test_kfree+0x1c79>
f01211fd:	83 ec 04             	sub    $0x4,%esp
f0121200:	68 c0 99 13 f0       	push   $0xf01399c0
f0121205:	68 4b 06 00 00       	push   $0x64b
f012120a:	68 0e 91 13 f0       	push   $0xf013910e
f012120f:	e8 9c ef fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121214:	e8 67 b7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121219:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012121c:	e8 05 34 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121221:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121224:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012122a:	83 ec 0c             	sub    $0xc,%esp
f012122d:	50                   	push   %eax
f012122e:	e8 e8 6c fe ff       	call   f0107f1b <kfree>
f0121233:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121236:	e8 eb 33 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012123b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012123e:	74 17                	je     f0121257 <test_kfree+0x1cbc>
f0121240:	83 ec 04             	sub    $0x4,%esp
f0121243:	68 28 91 13 f0       	push   $0xf0139128
f0121248:	68 51 06 00 00       	push   $0x651
f012124d:	68 0e 91 13 f0       	push   $0xf013910e
f0121252:	e8 59 ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121257:	e8 24 b7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012125c:	89 c2                	mov    %eax,%edx
f012125e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121261:	39 c2                	cmp    %eax,%edx
f0121263:	74 17                	je     f012127c <test_kfree+0x1ce1>
f0121265:	83 ec 04             	sub    $0x4,%esp
f0121268:	68 c0 99 13 f0       	push   $0xf01399c0
f012126d:	68 52 06 00 00       	push   $0x652
f0121272:	68 0e 91 13 f0       	push   $0xf013910e
f0121277:	e8 34 ef fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012127c:	e8 ff b6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121281:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121284:	e8 9d 33 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121289:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012128c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0121292:	83 ec 0c             	sub    $0xc,%esp
f0121295:	50                   	push   %eax
f0121296:	e8 80 6c fe ff       	call   f0107f1b <kfree>
f012129b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012129e:	e8 83 33 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01212a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212a6:	74 17                	je     f01212bf <test_kfree+0x1d24>
f01212a8:	83 ec 04             	sub    $0x4,%esp
f01212ab:	68 28 91 13 f0       	push   $0xf0139128
f01212b0:	68 58 06 00 00       	push   $0x658
f01212b5:	68 0e 91 13 f0       	push   $0xf013910e
f01212ba:	e8 f1 ee fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01212bf:	e8 bc b6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01212c4:	89 c2                	mov    %eax,%edx
f01212c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212c9:	39 c2                	cmp    %eax,%edx
f01212cb:	74 17                	je     f01212e4 <test_kfree+0x1d49>
f01212cd:	83 ec 04             	sub    $0x4,%esp
f01212d0:	68 c0 99 13 f0       	push   $0xf01399c0
f01212d5:	68 59 06 00 00       	push   $0x659
f01212da:	68 0e 91 13 f0       	push   $0xf013910e
f01212df:	e8 cc ee fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f01212e4:	83 ec 0c             	sub    $0xc,%esp
f01212e7:	68 07 9a 13 f0       	push   $0xf0139a07
f01212ec:	e8 40 fb fd ff       	call   f0100e31 <cprintf>
f01212f1:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01212f4:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01212fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121302:	eb 48                	jmp    f012134c <test_kfree+0x1db1>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121304:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121307:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012130c:	83 ec 04             	sub    $0x4,%esp
f012130f:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0121315:	51                   	push   %ecx
f0121316:	52                   	push   %edx
f0121317:	50                   	push   %eax
f0121318:	e8 6c 61 fe ff       	call   f0107489 <get_page_table>
f012131d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121320:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0121326:	85 c0                	test   %eax,%eax
f0121328:	75 17                	jne    f0121341 <test_kfree+0x1da6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012132a:	83 ec 04             	sub    $0x4,%esp
f012132d:	68 10 9a 13 f0       	push   $0xf0139a10
f0121332:	68 67 06 00 00       	push   $0x667
f0121337:	68 0e 91 13 f0       	push   $0xf013910e
f012133c:	e8 6f ee fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121341:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121348:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012134c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121350:	78 b2                	js     f0121304 <test_kfree+0x1d69>
f0121352:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121356:	7f 09                	jg     f0121361 <test_kfree+0x1dc6>
f0121358:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012135f:	76 a3                	jbe    f0121304 <test_kfree+0x1d69>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121361:	83 ec 0c             	sub    $0xc,%esp
f0121364:	68 f2 92 13 f0       	push   $0xf01392f2
f0121369:	e8 c3 fa fd ff       	call   f0100e31 <cprintf>
f012136e:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121371:	83 ec 0c             	sub    $0xc,%esp
f0121374:	68 78 9a 13 f0       	push   $0xf0139a78
f0121379:	e8 b3 fa fd ff       	call   f0100e31 <cprintf>
f012137e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121381:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121386:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121389:	5b                   	pop    %ebx
f012138a:	5f                   	pop    %edi
f012138b:	5d                   	pop    %ebp
f012138c:	c3                   	ret    

f012138d <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f012138d:	55                   	push   %ebp
f012138e:	89 e5                	mov    %esp,%ebp
f0121390:	57                   	push   %edi
f0121391:	53                   	push   %ebx
f0121392:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	cprintf("==============================================\n");
f0121398:	83 ec 0c             	sub    $0xc,%esp
f012139b:	68 50 90 13 f0       	push   $0xf0139050
f01213a0:	e8 8c fa fd ff       	call   f0100e31 <cprintf>
f01213a5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01213a8:	83 ec 0c             	sub    $0xc,%esp
f01213ab:	68 80 90 13 f0       	push   $0xf0139080
f01213b0:	e8 7c fa fd ff       	call   f0100e31 <cprintf>
f01213b5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01213b8:	83 ec 0c             	sub    $0xc,%esp
f01213bb:	68 50 90 13 f0       	push   $0xf0139050
f01213c0:	e8 6c fa fd ff       	call   f0100e31 <cprintf>
f01213c5:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01213c8:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01213cc:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01213d0:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01213d6:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01213dc:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01213e3:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01213ea:	e8 91 b5 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01213ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01213f2:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f01213f8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01213fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0121402:	89 d7                	mov    %edx,%edi
f0121404:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121406:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f012140c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121411:	b8 00 00 00 00       	mov    $0x0,%eax
f0121416:	89 d7                	mov    %edx,%edi
f0121418:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012141a:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0121420:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121425:	b8 00 00 00 00       	mov    $0x0,%eax
f012142a:	89 d7                	mov    %edx,%edi
f012142c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012142e:	e8 4d b5 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121433:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121436:	e8 eb 31 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012143b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012143e:	83 ec 0c             	sub    $0xc,%esp
f0121441:	68 00 fc 1f 00       	push   $0x1ffc00
f0121446:	e8 b6 6a fe ff       	call   f0107f01 <kmalloc>
f012144b:	83 c4 10             	add    $0x10,%esp
f012144e:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121454:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012145a:	89 c1                	mov    %eax,%ecx
f012145c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121463:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121468:	0f b6 d0             	movzbl %al,%edx
f012146b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012146e:	01 d0                	add    %edx,%eax
f0121470:	48                   	dec    %eax
f0121471:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121474:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121477:	ba 00 00 00 00       	mov    $0x0,%edx
f012147c:	f7 75 c8             	divl   -0x38(%ebp)
f012147f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121482:	29 d0                	sub    %edx,%eax
f0121484:	89 c3                	mov    %eax,%ebx
f0121486:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012148d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121492:	0f b6 c0             	movzbl %al,%eax
f0121495:	c1 e0 04             	shl    $0x4,%eax
f0121498:	89 c2                	mov    %eax,%edx
f012149a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012149d:	01 d0                	add    %edx,%eax
f012149f:	48                   	dec    %eax
f01214a0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01214a3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01214a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01214ab:	f7 75 c0             	divl   -0x40(%ebp)
f01214ae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01214b1:	29 d0                	sub    %edx,%eax
f01214b3:	01 d8                	add    %ebx,%eax
f01214b5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01214ba:	39 c1                	cmp    %eax,%ecx
f01214bc:	74 17                	je     f01214d5 <test_kfree_bestfirstfit+0x148>
f01214be:	83 ec 04             	sub    $0x4,%esp
f01214c1:	68 f4 91 13 f0       	push   $0xf01391f4
f01214c6:	68 95 06 00 00       	push   $0x695
f01214cb:	68 0e 91 13 f0       	push   $0xf013910e
f01214d0:	e8 db ec fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214d5:	e8 4c 31 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01214da:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214dd:	74 17                	je     f01214f6 <test_kfree_bestfirstfit+0x169>
f01214df:	83 ec 04             	sub    $0x4,%esp
f01214e2:	68 28 91 13 f0       	push   $0xf0139128
f01214e7:	68 96 06 00 00       	push   $0x696
f01214ec:	68 0e 91 13 f0       	push   $0xf013910e
f01214f1:	e8 ba ec fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01214f6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01214f9:	e8 82 b4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01214fe:	29 c3                	sub    %eax,%ebx
f0121500:	89 d8                	mov    %ebx,%eax
f0121502:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121507:	74 17                	je     f0121520 <test_kfree_bestfirstfit+0x193>
f0121509:	83 ec 04             	sub    $0x4,%esp
f012150c:	68 90 91 13 f0       	push   $0xf0139190
f0121511:	68 97 06 00 00       	push   $0x697
f0121516:	68 0e 91 13 f0       	push   $0xf013910e
f012151b:	e8 90 ec fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121520:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0121527:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012152a:	e8 51 b4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012152f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121532:	e8 ef 30 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121537:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012153a:	83 ec 0c             	sub    $0xc,%esp
f012153d:	68 00 fc 1f 00       	push   $0x1ffc00
f0121542:	e8 ba 69 fe ff       	call   f0107f01 <kmalloc>
f0121547:	83 c4 10             	add    $0x10,%esp
f012154a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121550:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121556:	89 c1                	mov    %eax,%ecx
f0121558:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012155f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121564:	0f b6 d0             	movzbl %al,%edx
f0121567:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012156a:	01 d0                	add    %edx,%eax
f012156c:	48                   	dec    %eax
f012156d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0121570:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121573:	ba 00 00 00 00       	mov    $0x0,%edx
f0121578:	f7 75 b8             	divl   -0x48(%ebp)
f012157b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012157e:	29 d0                	sub    %edx,%eax
f0121580:	89 c3                	mov    %eax,%ebx
f0121582:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121589:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012158e:	0f b6 c0             	movzbl %al,%eax
f0121591:	c1 e0 04             	shl    $0x4,%eax
f0121594:	89 c2                	mov    %eax,%edx
f0121596:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121599:	01 d0                	add    %edx,%eax
f012159b:	48                   	dec    %eax
f012159c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012159f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01215a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01215a7:	f7 75 b0             	divl   -0x50(%ebp)
f01215aa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01215ad:	29 d0                	sub    %edx,%eax
f01215af:	01 d8                	add    %ebx,%eax
f01215b1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01215b6:	39 c1                	cmp    %eax,%ecx
f01215b8:	74 17                	je     f01215d1 <test_kfree_bestfirstfit+0x244>
f01215ba:	83 ec 04             	sub    $0x4,%esp
f01215bd:	68 f4 91 13 f0       	push   $0xf01391f4
f01215c2:	68 9e 06 00 00       	push   $0x69e
f01215c7:	68 0e 91 13 f0       	push   $0xf013910e
f01215cc:	e8 df eb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215d1:	e8 50 30 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01215d6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215d9:	74 17                	je     f01215f2 <test_kfree_bestfirstfit+0x265>
f01215db:	83 ec 04             	sub    $0x4,%esp
f01215de:	68 28 91 13 f0       	push   $0xf0139128
f01215e3:	68 9f 06 00 00       	push   $0x69f
f01215e8:	68 0e 91 13 f0       	push   $0xf013910e
f01215ed:	e8 be eb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01215f2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01215f5:	e8 86 b3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01215fa:	29 c3                	sub    %eax,%ebx
f01215fc:	89 d8                	mov    %ebx,%eax
f01215fe:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121603:	74 17                	je     f012161c <test_kfree_bestfirstfit+0x28f>
f0121605:	83 ec 04             	sub    $0x4,%esp
f0121608:	68 90 91 13 f0       	push   $0xf0139190
f012160d:	68 a0 06 00 00       	push   $0x6a0
f0121612:	68 0e 91 13 f0       	push   $0xf013910e
f0121617:	e8 94 eb fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012161c:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0121623:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121626:	e8 55 b3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012162b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012162e:	e8 f3 2f fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121633:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121636:	83 ec 0c             	sub    $0xc,%esp
f0121639:	68 00 08 00 00       	push   $0x800
f012163e:	e8 be 68 fe ff       	call   f0107f01 <kmalloc>
f0121643:	83 c4 10             	add    $0x10,%esp
f0121646:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012164c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121652:	89 c1                	mov    %eax,%ecx
f0121654:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012165b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121660:	0f b6 d0             	movzbl %al,%edx
f0121663:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0121666:	01 d0                	add    %edx,%eax
f0121668:	48                   	dec    %eax
f0121669:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012166c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012166f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121674:	f7 75 a8             	divl   -0x58(%ebp)
f0121677:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012167a:	29 d0                	sub    %edx,%eax
f012167c:	89 c3                	mov    %eax,%ebx
f012167e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121685:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012168a:	0f b6 c0             	movzbl %al,%eax
f012168d:	c1 e0 04             	shl    $0x4,%eax
f0121690:	89 c2                	mov    %eax,%edx
f0121692:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121695:	01 d0                	add    %edx,%eax
f0121697:	48                   	dec    %eax
f0121698:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012169b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012169e:	ba 00 00 00 00       	mov    $0x0,%edx
f01216a3:	f7 75 a0             	divl   -0x60(%ebp)
f01216a6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01216a9:	29 d0                	sub    %edx,%eax
f01216ab:	01 d8                	add    %ebx,%eax
f01216ad:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01216b2:	39 c1                	cmp    %eax,%ecx
f01216b4:	74 17                	je     f01216cd <test_kfree_bestfirstfit+0x340>
f01216b6:	83 ec 04             	sub    $0x4,%esp
f01216b9:	68 f4 91 13 f0       	push   $0xf01391f4
f01216be:	68 a7 06 00 00       	push   $0x6a7
f01216c3:	68 0e 91 13 f0       	push   $0xf013910e
f01216c8:	e8 e3 ea fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01216cd:	e8 54 2f fe ff       	call   f0104626 <pf_calculate_free_frames>
f01216d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01216d5:	74 17                	je     f01216ee <test_kfree_bestfirstfit+0x361>
f01216d7:	83 ec 04             	sub    $0x4,%esp
f01216da:	68 28 91 13 f0       	push   $0xf0139128
f01216df:	68 a8 06 00 00       	push   $0x6a8
f01216e4:	68 0e 91 13 f0       	push   $0xf013910e
f01216e9:	e8 c2 ea fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01216ee:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01216f1:	e8 8a b2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01216f6:	29 c3                	sub    %eax,%ebx
f01216f8:	89 d8                	mov    %ebx,%eax
f01216fa:	83 f8 01             	cmp    $0x1,%eax
f01216fd:	74 17                	je     f0121716 <test_kfree_bestfirstfit+0x389>
f01216ff:	83 ec 04             	sub    $0x4,%esp
f0121702:	68 90 91 13 f0       	push   $0xf0139190
f0121707:	68 a9 06 00 00       	push   $0x6a9
f012170c:	68 0e 91 13 f0       	push   $0xf013910e
f0121711:	e8 9a ea fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121716:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f012171d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121720:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121726:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121729:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121730:	eb 0e                	jmp    f0121740 <test_kfree_bestfirstfit+0x3b3>
		{
			ptr[i] = 2 ;
f0121732:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121735:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121738:	01 d0                	add    %edx,%eax
f012173a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012173d:	ff 45 f4             	incl   -0xc(%ebp)
f0121740:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121746:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121749:	7f e7                	jg     f0121732 <test_kfree_bestfirstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012174b:	e8 30 b2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121750:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121753:	e8 ce 2e fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121758:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012175b:	83 ec 0c             	sub    $0xc,%esp
f012175e:	68 00 08 00 00       	push   $0x800
f0121763:	e8 99 67 fe ff       	call   f0107f01 <kmalloc>
f0121768:	83 c4 10             	add    $0x10,%esp
f012176b:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121771:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121777:	89 c1                	mov    %eax,%ecx
f0121779:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0121780:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121785:	0f b6 d0             	movzbl %al,%edx
f0121788:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012178b:	01 d0                	add    %edx,%eax
f012178d:	48                   	dec    %eax
f012178e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0121791:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121794:	ba 00 00 00 00       	mov    $0x0,%edx
f0121799:	f7 75 94             	divl   -0x6c(%ebp)
f012179c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012179f:	29 d0                	sub    %edx,%eax
f01217a1:	89 c3                	mov    %eax,%ebx
f01217a3:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01217aa:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01217af:	0f b6 c0             	movzbl %al,%eax
f01217b2:	c1 e0 04             	shl    $0x4,%eax
f01217b5:	89 c2                	mov    %eax,%edx
f01217b7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01217ba:	01 d0                	add    %edx,%eax
f01217bc:	48                   	dec    %eax
f01217bd:	89 45 88             	mov    %eax,-0x78(%ebp)
f01217c0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01217c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01217c8:	f7 75 8c             	divl   -0x74(%ebp)
f01217cb:	8b 45 88             	mov    -0x78(%ebp),%eax
f01217ce:	29 d0                	sub    %edx,%eax
f01217d0:	01 d8                	add    %ebx,%eax
f01217d2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01217d7:	39 c1                	cmp    %eax,%ecx
f01217d9:	74 17                	je     f01217f2 <test_kfree_bestfirstfit+0x465>
f01217db:	83 ec 04             	sub    $0x4,%esp
f01217de:	68 f4 91 13 f0       	push   $0xf01391f4
f01217e3:	68 b5 06 00 00       	push   $0x6b5
f01217e8:	68 0e 91 13 f0       	push   $0xf013910e
f01217ed:	e8 be e9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217f2:	e8 2f 2e fe ff       	call   f0104626 <pf_calculate_free_frames>
f01217f7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217fa:	74 17                	je     f0121813 <test_kfree_bestfirstfit+0x486>
f01217fc:	83 ec 04             	sub    $0x4,%esp
f01217ff:	68 28 91 13 f0       	push   $0xf0139128
f0121804:	68 b6 06 00 00       	push   $0x6b6
f0121809:	68 0e 91 13 f0       	push   $0xf013910e
f012180e:	e8 9d e9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121813:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121816:	e8 65 b1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012181b:	29 c3                	sub    %eax,%ebx
f012181d:	89 d8                	mov    %ebx,%eax
f012181f:	83 f8 01             	cmp    $0x1,%eax
f0121822:	74 17                	je     f012183b <test_kfree_bestfirstfit+0x4ae>
f0121824:	83 ec 04             	sub    $0x4,%esp
f0121827:	68 90 91 13 f0       	push   $0xf0139190
f012182c:	68 b7 06 00 00       	push   $0x6b7
f0121831:	68 0e 91 13 f0       	push   $0xf013910e
f0121836:	e8 75 e9 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012183b:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0121842:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121845:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012184b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012184e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121855:	eb 0e                	jmp    f0121865 <test_kfree_bestfirstfit+0x4d8>
		{
			ptr[i] = 3 ;
f0121857:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012185a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012185d:	01 d0                	add    %edx,%eax
f012185f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121862:	ff 45 f4             	incl   -0xc(%ebp)
f0121865:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012186b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012186e:	7f e7                	jg     f0121857 <test_kfree_bestfirstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121870:	e8 0b b1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121875:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121878:	e8 a9 2d fe ff       	call   f0104626 <pf_calculate_free_frames>
f012187d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121880:	83 ec 0c             	sub    $0xc,%esp
f0121883:	68 00 1c 00 00       	push   $0x1c00
f0121888:	e8 74 66 fe ff       	call   f0107f01 <kmalloc>
f012188d:	83 c4 10             	add    $0x10,%esp
f0121890:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121896:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012189c:	89 c1                	mov    %eax,%ecx
f012189e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01218a5:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01218aa:	0f b6 d0             	movzbl %al,%edx
f01218ad:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01218b0:	01 d0                	add    %edx,%eax
f01218b2:	48                   	dec    %eax
f01218b3:	89 45 80             	mov    %eax,-0x80(%ebp)
f01218b6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01218b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01218be:	f7 75 84             	divl   -0x7c(%ebp)
f01218c1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01218c4:	29 d0                	sub    %edx,%eax
f01218c6:	89 c3                	mov    %eax,%ebx
f01218c8:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01218cf:	10 00 00 
f01218d2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01218d7:	0f b6 c0             	movzbl %al,%eax
f01218da:	c1 e0 04             	shl    $0x4,%eax
f01218dd:	89 c2                	mov    %eax,%edx
f01218df:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01218e5:	01 d0                	add    %edx,%eax
f01218e7:	48                   	dec    %eax
f01218e8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01218ee:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01218f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01218f9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01218ff:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121905:	29 d0                	sub    %edx,%eax
f0121907:	01 d8                	add    %ebx,%eax
f0121909:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012190e:	39 c1                	cmp    %eax,%ecx
f0121910:	74 17                	je     f0121929 <test_kfree_bestfirstfit+0x59c>
f0121912:	83 ec 04             	sub    $0x4,%esp
f0121915:	68 f4 91 13 f0       	push   $0xf01391f4
f012191a:	68 c3 06 00 00       	push   $0x6c3
f012191f:	68 0e 91 13 f0       	push   $0xf013910e
f0121924:	e8 87 e8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121929:	e8 f8 2c fe ff       	call   f0104626 <pf_calculate_free_frames>
f012192e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121931:	74 17                	je     f012194a <test_kfree_bestfirstfit+0x5bd>
f0121933:	83 ec 04             	sub    $0x4,%esp
f0121936:	68 28 91 13 f0       	push   $0xf0139128
f012193b:	68 c4 06 00 00       	push   $0x6c4
f0121940:	68 0e 91 13 f0       	push   $0xf013910e
f0121945:	e8 66 e8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012194a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012194d:	e8 2e b0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121952:	29 c3                	sub    %eax,%ebx
f0121954:	89 d8                	mov    %ebx,%eax
f0121956:	83 f8 02             	cmp    $0x2,%eax
f0121959:	74 17                	je     f0121972 <test_kfree_bestfirstfit+0x5e5>
f012195b:	83 ec 04             	sub    $0x4,%esp
f012195e:	68 90 91 13 f0       	push   $0xf0139190
f0121963:	68 c5 06 00 00       	push   $0x6c5
f0121968:	68 0e 91 13 f0       	push   $0xf013910e
f012196d:	e8 3e e8 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0121972:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0121979:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012197c:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121982:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121985:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012198c:	eb 0e                	jmp    f012199c <test_kfree_bestfirstfit+0x60f>
		{
			ptr[i] = 4 ;
f012198e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121991:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121994:	01 d0                	add    %edx,%eax
f0121996:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121999:	ff 45 f4             	incl   -0xc(%ebp)
f012199c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01219a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01219a5:	7f e7                	jg     f012198e <test_kfree_bestfirstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01219a7:	e8 d4 af fe ff       	call   f010c980 <sys_calculate_free_frames>
f01219ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219af:	e8 72 2c fe ff       	call   f0104626 <pf_calculate_free_frames>
f01219b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01219b7:	83 ec 0c             	sub    $0xc,%esp
f01219ba:	68 00 fc 2f 00       	push   $0x2ffc00
f01219bf:	e8 3d 65 fe ff       	call   f0107f01 <kmalloc>
f01219c4:	83 c4 10             	add    $0x10,%esp
f01219c7:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01219cd:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01219d3:	89 c1                	mov    %eax,%ecx
f01219d5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01219dc:	10 00 00 
f01219df:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01219e4:	0f b6 d0             	movzbl %al,%edx
f01219e7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01219ed:	01 d0                	add    %edx,%eax
f01219ef:	48                   	dec    %eax
f01219f0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01219f6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01219fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a01:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121a07:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121a0d:	29 d0                	sub    %edx,%eax
f0121a0f:	89 c3                	mov    %eax,%ebx
f0121a11:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121a18:	10 00 00 
f0121a1b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121a20:	0f b6 c0             	movzbl %al,%eax
f0121a23:	c1 e0 04             	shl    $0x4,%eax
f0121a26:	89 c2                	mov    %eax,%edx
f0121a28:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121a2e:	01 d0                	add    %edx,%eax
f0121a30:	48                   	dec    %eax
f0121a31:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121a37:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121a3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a42:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121a48:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121a4e:	29 d0                	sub    %edx,%eax
f0121a50:	01 d8                	add    %ebx,%eax
f0121a52:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121a57:	39 c1                	cmp    %eax,%ecx
f0121a59:	74 17                	je     f0121a72 <test_kfree_bestfirstfit+0x6e5>
f0121a5b:	83 ec 04             	sub    $0x4,%esp
f0121a5e:	68 f4 91 13 f0       	push   $0xf01391f4
f0121a63:	68 d1 06 00 00       	push   $0x6d1
f0121a68:	68 0e 91 13 f0       	push   $0xf013910e
f0121a6d:	e8 3e e7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a72:	e8 af 2b fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121a77:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a7a:	74 17                	je     f0121a93 <test_kfree_bestfirstfit+0x706>
f0121a7c:	83 ec 04             	sub    $0x4,%esp
f0121a7f:	68 28 91 13 f0       	push   $0xf0139128
f0121a84:	68 d2 06 00 00       	push   $0x6d2
f0121a89:	68 0e 91 13 f0       	push   $0xf013910e
f0121a8e:	e8 1d e7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a93:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a96:	e8 e5 ae fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121a9b:	29 c3                	sub    %eax,%ebx
f0121a9d:	89 d8                	mov    %ebx,%eax
f0121a9f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121aa4:	74 17                	je     f0121abd <test_kfree_bestfirstfit+0x730>
f0121aa6:	83 ec 04             	sub    $0x4,%esp
f0121aa9:	68 90 91 13 f0       	push   $0xf0139190
f0121aae:	68 d3 06 00 00       	push   $0x6d3
f0121ab3:	68 0e 91 13 f0       	push   $0xf013910e
f0121ab8:	e8 f3 e6 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121abd:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0121ac4:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121ac7:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121acd:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121ad0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ad7:	eb 0e                	jmp    f0121ae7 <test_kfree_bestfirstfit+0x75a>
		{
			ptr[i] = 5 ;
f0121ad9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121adc:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121adf:	01 d0                	add    %edx,%eax
f0121ae1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121ae4:	ff 45 f4             	incl   -0xc(%ebp)
f0121ae7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121aed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121af0:	7f e7                	jg     f0121ad9 <test_kfree_bestfirstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121af2:	e8 89 ae fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121af7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121afa:	e8 27 2b fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121aff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121b02:	83 ec 0c             	sub    $0xc,%esp
f0121b05:	68 00 fc 5f 00       	push   $0x5ffc00
f0121b0a:	e8 f2 63 fe ff       	call   f0107f01 <kmalloc>
f0121b0f:	83 c4 10             	add    $0x10,%esp
f0121b12:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121b18:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121b1e:	89 c1                	mov    %eax,%ecx
f0121b20:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121b27:	10 00 00 
f0121b2a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121b2f:	0f b6 d0             	movzbl %al,%edx
f0121b32:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121b38:	01 d0                	add    %edx,%eax
f0121b3a:	48                   	dec    %eax
f0121b3b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121b41:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121b47:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b4c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121b52:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121b58:	29 d0                	sub    %edx,%eax
f0121b5a:	89 c3                	mov    %eax,%ebx
f0121b5c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121b63:	10 00 00 
f0121b66:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121b6b:	0f b6 c0             	movzbl %al,%eax
f0121b6e:	c1 e0 04             	shl    $0x4,%eax
f0121b71:	89 c2                	mov    %eax,%edx
f0121b73:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121b79:	01 d0                	add    %edx,%eax
f0121b7b:	48                   	dec    %eax
f0121b7c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121b82:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121b88:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b8d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121b93:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121b99:	29 d0                	sub    %edx,%eax
f0121b9b:	01 d8                	add    %ebx,%eax
f0121b9d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121ba2:	39 c1                	cmp    %eax,%ecx
f0121ba4:	74 17                	je     f0121bbd <test_kfree_bestfirstfit+0x830>
f0121ba6:	83 ec 04             	sub    $0x4,%esp
f0121ba9:	68 f4 91 13 f0       	push   $0xf01391f4
f0121bae:	68 df 06 00 00       	push   $0x6df
f0121bb3:	68 0e 91 13 f0       	push   $0xf013910e
f0121bb8:	e8 f3 e5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bbd:	e8 64 2a fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121bc2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bc5:	74 17                	je     f0121bde <test_kfree_bestfirstfit+0x851>
f0121bc7:	83 ec 04             	sub    $0x4,%esp
f0121bca:	68 28 91 13 f0       	push   $0xf0139128
f0121bcf:	68 e0 06 00 00       	push   $0x6e0
f0121bd4:	68 0e 91 13 f0       	push   $0xf013910e
f0121bd9:	e8 d2 e5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121bde:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121be1:	e8 9a ad fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121be6:	29 c3                	sub    %eax,%ebx
f0121be8:	89 d8                	mov    %ebx,%eax
f0121bea:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121bef:	74 17                	je     f0121c08 <test_kfree_bestfirstfit+0x87b>
f0121bf1:	83 ec 04             	sub    $0x4,%esp
f0121bf4:	68 90 91 13 f0       	push   $0xf0139190
f0121bf9:	68 e1 06 00 00       	push   $0x6e1
f0121bfe:	68 0e 91 13 f0       	push   $0xf013910e
f0121c03:	e8 a8 e5 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0121c08:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0121c0f:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c12:	e8 69 ad fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121c17:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c1a:	e8 07 2a fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121c1f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121c22:	83 ec 0c             	sub    $0xc,%esp
f0121c25:	68 00 38 00 00       	push   $0x3800
f0121c2a:	e8 d2 62 fe ff       	call   f0107f01 <kmalloc>
f0121c2f:	83 c4 10             	add    $0x10,%esp
f0121c32:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c38:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121c3e:	89 c1                	mov    %eax,%ecx
f0121c40:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121c47:	10 00 00 
f0121c4a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121c4f:	0f b6 d0             	movzbl %al,%edx
f0121c52:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121c58:	01 d0                	add    %edx,%eax
f0121c5a:	48                   	dec    %eax
f0121c5b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121c61:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121c67:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c6c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121c72:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121c78:	29 d0                	sub    %edx,%eax
f0121c7a:	89 c3                	mov    %eax,%ebx
f0121c7c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121c83:	10 00 00 
f0121c86:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0121c8b:	0f b6 c0             	movzbl %al,%eax
f0121c8e:	c1 e0 04             	shl    $0x4,%eax
f0121c91:	89 c2                	mov    %eax,%edx
f0121c93:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121c99:	01 d0                	add    %edx,%eax
f0121c9b:	48                   	dec    %eax
f0121c9c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121ca2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121ca8:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cad:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121cb3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121cb9:	29 d0                	sub    %edx,%eax
f0121cbb:	01 d8                	add    %ebx,%eax
f0121cbd:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121cc2:	39 c1                	cmp    %eax,%ecx
f0121cc4:	74 17                	je     f0121cdd <test_kfree_bestfirstfit+0x950>
f0121cc6:	83 ec 04             	sub    $0x4,%esp
f0121cc9:	68 f4 91 13 f0       	push   $0xf01391f4
f0121cce:	68 e8 06 00 00       	push   $0x6e8
f0121cd3:	68 0e 91 13 f0       	push   $0xf013910e
f0121cd8:	e8 d3 e4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121cdd:	e8 44 29 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121ce2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ce5:	74 17                	je     f0121cfe <test_kfree_bestfirstfit+0x971>
f0121ce7:	83 ec 04             	sub    $0x4,%esp
f0121cea:	68 28 91 13 f0       	push   $0xf0139128
f0121cef:	68 e9 06 00 00       	push   $0x6e9
f0121cf4:	68 0e 91 13 f0       	push   $0xf013910e
f0121cf9:	e8 b2 e4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121cfe:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d01:	e8 7a ac fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121d06:	29 c3                	sub    %eax,%ebx
f0121d08:	89 d8                	mov    %ebx,%eax
f0121d0a:	83 f8 04             	cmp    $0x4,%eax
f0121d0d:	74 17                	je     f0121d26 <test_kfree_bestfirstfit+0x999>
f0121d0f:	83 ec 04             	sub    $0x4,%esp
f0121d12:	68 90 91 13 f0       	push   $0xf0139190
f0121d17:	68 ea 06 00 00       	push   $0x6ea
f0121d1c:	68 0e 91 13 f0       	push   $0xf013910e
f0121d21:	e8 8a e4 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121d26:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0121d2d:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121d30:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121d36:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121d39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d40:	eb 0e                	jmp    f0121d50 <test_kfree_bestfirstfit+0x9c3>
		{
			ptr[i] = 7 ;
f0121d42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d45:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121d48:	01 d0                	add    %edx,%eax
f0121d4a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121d4d:	ff 45 f4             	incl   -0xc(%ebp)
f0121d50:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121d56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d59:	7f e7                	jg     f0121d42 <test_kfree_bestfirstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121d5b:	e8 20 ac fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121d60:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121d66:	e8 bb 28 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121d6b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0121d71:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121d77:	83 ec 0c             	sub    $0xc,%esp
f0121d7a:	50                   	push   %eax
f0121d7b:	e8 9b 61 fe ff       	call   f0107f1b <kfree>
f0121d80:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d83:	e8 9e 28 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121d88:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121d8e:	74 17                	je     f0121da7 <test_kfree_bestfirstfit+0xa1a>
f0121d90:	83 ec 04             	sub    $0x4,%esp
f0121d93:	68 28 91 13 f0       	push   $0xf0139128
f0121d98:	68 f9 06 00 00       	push   $0x6f9
f0121d9d:	68 0e 91 13 f0       	push   $0xf013910e
f0121da2:	e8 09 e4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121da7:	e8 d4 ab fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121dac:	89 c2                	mov    %eax,%edx
f0121dae:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121db4:	29 c2                	sub    %eax,%edx
f0121db6:	89 d0                	mov    %edx,%eax
f0121db8:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121dbd:	74 17                	je     f0121dd6 <test_kfree_bestfirstfit+0xa49>
f0121dbf:	83 ec 04             	sub    $0x4,%esp
f0121dc2:	68 98 98 13 f0       	push   $0xf0139898
f0121dc7:	68 fa 06 00 00       	push   $0x6fa
f0121dcc:	68 0e 91 13 f0       	push   $0xf013910e
f0121dd1:	e8 da e3 fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121dd6:	e8 a5 ab fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121ddb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121de1:	e8 40 28 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121de6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f0121dec:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121df2:	83 ec 0c             	sub    $0xc,%esp
f0121df5:	50                   	push   %eax
f0121df6:	e8 20 61 fe ff       	call   f0107f1b <kfree>
f0121dfb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121dfe:	e8 23 28 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121e03:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121e09:	74 17                	je     f0121e22 <test_kfree_bestfirstfit+0xa95>
f0121e0b:	83 ec 04             	sub    $0x4,%esp
f0121e0e:	68 28 91 13 f0       	push   $0xf0139128
f0121e13:	68 00 07 00 00       	push   $0x700
f0121e18:	68 0e 91 13 f0       	push   $0xf013910e
f0121e1d:	e8 8e e3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e22:	e8 59 ab fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121e27:	89 c2                	mov    %eax,%edx
f0121e29:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121e2f:	29 c2                	sub    %eax,%edx
f0121e31:	89 d0                	mov    %edx,%eax
f0121e33:	83 f8 01             	cmp    $0x1,%eax
f0121e36:	74 17                	je     f0121e4f <test_kfree_bestfirstfit+0xac2>
f0121e38:	83 ec 04             	sub    $0x4,%esp
f0121e3b:	68 98 98 13 f0       	push   $0xf0139898
f0121e40:	68 01 07 00 00       	push   $0x701
f0121e45:	68 0e 91 13 f0       	push   $0xf013910e
f0121e4a:	e8 61 e3 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121e4f:	e8 2c ab fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121e54:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e5a:	e8 c7 27 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121e5f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0121e65:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121e6b:	83 ec 0c             	sub    $0xc,%esp
f0121e6e:	50                   	push   %eax
f0121e6f:	e8 a7 60 fe ff       	call   f0107f1b <kfree>
f0121e74:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e77:	e8 aa 27 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121e7c:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121e82:	74 17                	je     f0121e9b <test_kfree_bestfirstfit+0xb0e>
f0121e84:	83 ec 04             	sub    $0x4,%esp
f0121e87:	68 28 91 13 f0       	push   $0xf0139128
f0121e8c:	68 07 07 00 00       	push   $0x707
f0121e91:	68 0e 91 13 f0       	push   $0xf013910e
f0121e96:	e8 15 e3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e9b:	e8 e0 aa fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121ea0:	89 c2                	mov    %eax,%edx
f0121ea2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121ea8:	29 c2                	sub    %eax,%edx
f0121eaa:	89 d0                	mov    %edx,%eax
f0121eac:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121eb1:	74 17                	je     f0121eca <test_kfree_bestfirstfit+0xb3d>
f0121eb3:	83 ec 04             	sub    $0x4,%esp
f0121eb6:	68 98 98 13 f0       	push   $0xf0139898
f0121ebb:	68 08 07 00 00       	push   $0x708
f0121ec0:	68 0e 91 13 f0       	push   $0xf013910e
f0121ec5:	e8 e6 e2 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121eca:	e8 b1 aa fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121ecf:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ed5:	e8 4c 27 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121eda:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0121ee0:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121ee6:	83 ec 0c             	sub    $0xc,%esp
f0121ee9:	50                   	push   %eax
f0121eea:	e8 2c 60 fe ff       	call   f0107f1b <kfree>
f0121eef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ef2:	e8 2f 27 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0121ef7:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121efd:	74 17                	je     f0121f16 <test_kfree_bestfirstfit+0xb89>
f0121eff:	83 ec 04             	sub    $0x4,%esp
f0121f02:	68 28 91 13 f0       	push   $0xf0139128
f0121f07:	68 0e 07 00 00       	push   $0x70e
f0121f0c:	68 0e 91 13 f0       	push   $0xf013910e
f0121f11:	e8 9a e2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f16:	e8 65 aa fe ff       	call   f010c980 <sys_calculate_free_frames>
f0121f1b:	89 c2                	mov    %eax,%edx
f0121f1d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121f23:	29 c2                	sub    %eax,%edx
f0121f25:	89 d0                	mov    %edx,%eax
f0121f27:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121f2c:	74 17                	je     f0121f45 <test_kfree_bestfirstfit+0xbb8>
f0121f2e:	83 ec 04             	sub    $0x4,%esp
f0121f31:	68 98 98 13 f0       	push   $0xf0139898
f0121f36:	68 0f 07 00 00       	push   $0x70f
f0121f3b:	68 0e 91 13 f0       	push   $0xf013910e
f0121f40:	e8 6b e2 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121f45:	83 ec 0c             	sub    $0xc,%esp
f0121f48:	68 d0 98 13 f0       	push   $0xf01398d0
f0121f4d:	e8 df ee fd ff       	call   f0100e31 <cprintf>
f0121f52:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121f55:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121f5b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121f5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121f65:	eb 1e                	jmp    f0121f85 <test_kfree_bestfirstfit+0xbf8>
		{
			sums[3] += ptr[i] ;
f0121f67:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121f6d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121f70:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121f73:	01 c8                	add    %ecx,%eax
f0121f75:	8a 00                	mov    (%eax),%al
f0121f77:	0f be c0             	movsbl %al,%eax
f0121f7a:	01 d0                	add    %edx,%eax
f0121f7c:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121f82:	ff 45 f4             	incl   -0xc(%ebp)
f0121f85:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121f8b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121f8e:	7f d7                	jg     f0121f67 <test_kfree_bestfirstfit+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121f90:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121f96:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121f9c:	89 c1                	mov    %eax,%ecx
f0121f9e:	01 c9                	add    %ecx,%ecx
f0121fa0:	01 c8                	add    %ecx,%eax
f0121fa2:	39 c2                	cmp    %eax,%edx
f0121fa4:	74 17                	je     f0121fbd <test_kfree_bestfirstfit+0xc30>
f0121fa6:	83 ec 04             	sub    $0x4,%esp
f0121fa9:	68 f4 98 13 f0       	push   $0xf01398f4
f0121fae:	68 1c 07 00 00       	push   $0x71c
f0121fb3:	68 0e 91 13 f0       	push   $0xf013910e
f0121fb8:	e8 f3 e1 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0121fbd:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121fc3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121fc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121fcd:	eb 1e                	jmp    f0121fed <test_kfree_bestfirstfit+0xc60>
		{
			sums[4] += ptr[i] ;
f0121fcf:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0121fd5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121fd8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121fdb:	01 c8                	add    %ecx,%eax
f0121fdd:	8a 00                	mov    (%eax),%al
f0121fdf:	0f be c0             	movsbl %al,%eax
f0121fe2:	01 d0                	add    %edx,%eax
f0121fe4:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121fea:	ff 45 f4             	incl   -0xc(%ebp)
f0121fed:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121ff3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ff6:	7f d7                	jg     f0121fcf <test_kfree_bestfirstfit+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0121ff8:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121ffe:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0122004:	c1 e2 02             	shl    $0x2,%edx
f0122007:	39 d0                	cmp    %edx,%eax
f0122009:	74 17                	je     f0122022 <test_kfree_bestfirstfit+0xc95>
f012200b:	83 ec 04             	sub    $0x4,%esp
f012200e:	68 f4 98 13 f0       	push   $0xf01398f4
f0122013:	68 24 07 00 00       	push   $0x724
f0122018:	68 0e 91 13 f0       	push   $0xf013910e
f012201d:	e8 8e e1 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122022:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122028:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012202b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122032:	eb 1e                	jmp    f0122052 <test_kfree_bestfirstfit+0xcc5>
		{
			sums[5] += ptr[i] ;
f0122034:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012203a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012203d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122040:	01 c8                	add    %ecx,%eax
f0122042:	8a 00                	mov    (%eax),%al
f0122044:	0f be c0             	movsbl %al,%eax
f0122047:	01 d0                	add    %edx,%eax
f0122049:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012204f:	ff 45 f4             	incl   -0xc(%ebp)
f0122052:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122058:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012205b:	7f d7                	jg     f0122034 <test_kfree_bestfirstfit+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012205d:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0122063:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0122069:	89 d0                	mov    %edx,%eax
f012206b:	c1 e0 02             	shl    $0x2,%eax
f012206e:	01 d0                	add    %edx,%eax
f0122070:	39 c1                	cmp    %eax,%ecx
f0122072:	74 17                	je     f012208b <test_kfree_bestfirstfit+0xcfe>
f0122074:	83 ec 04             	sub    $0x4,%esp
f0122077:	68 f4 98 13 f0       	push   $0xf01398f4
f012207c:	68 2c 07 00 00       	push   $0x72c
f0122081:	68 0e 91 13 f0       	push   $0xf013910e
f0122086:	e8 25 e1 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012208b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122091:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122094:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012209b:	eb 1e                	jmp    f01220bb <test_kfree_bestfirstfit+0xd2e>
		{
			sums[7] += ptr[i] ;
f012209d:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01220a3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01220a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01220a9:	01 c8                	add    %ecx,%eax
f01220ab:	8a 00                	mov    (%eax),%al
f01220ad:	0f be c0             	movsbl %al,%eax
f01220b0:	01 d0                	add    %edx,%eax
f01220b2:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01220b8:	ff 45 f4             	incl   -0xc(%ebp)
f01220bb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01220c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01220c4:	7f d7                	jg     f012209d <test_kfree_bestfirstfit+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01220c6:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f01220cc:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f01220d2:	89 d0                	mov    %edx,%eax
f01220d4:	01 c0                	add    %eax,%eax
f01220d6:	01 d0                	add    %edx,%eax
f01220d8:	01 c0                	add    %eax,%eax
f01220da:	01 d0                	add    %edx,%eax
f01220dc:	39 c1                	cmp    %eax,%ecx
f01220de:	74 17                	je     f01220f7 <test_kfree_bestfirstfit+0xd6a>
f01220e0:	83 ec 04             	sub    $0x4,%esp
f01220e3:	68 f4 98 13 f0       	push   $0xf01398f4
f01220e8:	68 34 07 00 00       	push   $0x734
f01220ed:	68 0e 91 13 f0       	push   $0xf013910e
f01220f2:	e8 b9 e0 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f01220f7:	83 ec 0c             	sub    $0xc,%esp
f01220fa:	68 27 99 13 f0       	push   $0xf0139927
f01220ff:	e8 2d ed fd ff       	call   f0100e31 <cprintf>
f0122104:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122107:	e8 74 a8 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012210c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012210f:	e8 12 25 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122114:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122117:	83 ec 0c             	sub    $0xc,%esp
f012211a:	68 00 00 30 00       	push   $0x300000
f012211f:	e8 dd 5d fe ff       	call   f0107f01 <kmalloc>
f0122124:	83 c4 10             	add    $0x10,%esp
f0122127:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012212d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122133:	89 c1                	mov    %eax,%ecx
f0122135:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012213c:	10 00 00 
f012213f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122144:	0f b6 d0             	movzbl %al,%edx
f0122147:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012214d:	01 d0                	add    %edx,%eax
f012214f:	48                   	dec    %eax
f0122150:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122156:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012215c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122161:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122167:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012216d:	29 d0                	sub    %edx,%eax
f012216f:	89 c3                	mov    %eax,%ebx
f0122171:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122178:	10 00 00 
f012217b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122180:	0f b6 c0             	movzbl %al,%eax
f0122183:	c1 e0 04             	shl    $0x4,%eax
f0122186:	89 c2                	mov    %eax,%edx
f0122188:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012218e:	01 d0                	add    %edx,%eax
f0122190:	48                   	dec    %eax
f0122191:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122197:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012219d:	ba 00 00 00 00       	mov    $0x0,%edx
f01221a2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01221a8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01221ae:	29 d0                	sub    %edx,%eax
f01221b0:	01 d8                	add    %ebx,%eax
f01221b2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01221b7:	39 c1                	cmp    %eax,%ecx
f01221b9:	74 17                	je     f01221d2 <test_kfree_bestfirstfit+0xe45>
f01221bb:	83 ec 04             	sub    $0x4,%esp
f01221be:	68 f4 91 13 f0       	push   $0xf01391f4
f01221c3:	68 3f 07 00 00       	push   $0x73f
f01221c8:	68 0e 91 13 f0       	push   $0xf013910e
f01221cd:	e8 de df fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01221d2:	e8 4f 24 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01221d7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221da:	74 17                	je     f01221f3 <test_kfree_bestfirstfit+0xe66>
f01221dc:	83 ec 04             	sub    $0x4,%esp
f01221df:	68 28 91 13 f0       	push   $0xf0139128
f01221e4:	68 40 07 00 00       	push   $0x740
f01221e9:	68 0e 91 13 f0       	push   $0xf013910e
f01221ee:	e8 bd df fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01221f3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01221f6:	e8 85 a7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01221fb:	29 c3                	sub    %eax,%ebx
f01221fd:	89 d8                	mov    %ebx,%eax
f01221ff:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122204:	74 17                	je     f012221d <test_kfree_bestfirstfit+0xe90>
f0122206:	83 ec 04             	sub    $0x4,%esp
f0122209:	68 90 91 13 f0       	push   $0xf0139190
f012220e:	68 41 07 00 00       	push   $0x741
f0122213:	68 0e 91 13 f0       	push   $0xf013910e
f0122218:	e8 93 df fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f012221d:	c7 85 e0 fe ff ff ff 	movl   $0x2fffff,-0x120(%ebp)
f0122224:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122227:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012222d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122230:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122237:	eb 0e                	jmp    f0122247 <test_kfree_bestfirstfit+0xeba>
		{
			ptr[i] = 8 ;
f0122239:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012223c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012223f:	01 d0                	add    %edx,%eax
f0122241:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122244:	ff 45 f4             	incl   -0xc(%ebp)
f0122247:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012224d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122250:	7f e7                	jg     f0122239 <test_kfree_bestfirstfit+0xeac>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122252:	e8 29 a7 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122257:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012225a:	e8 c7 23 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012225f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122262:	83 ec 0c             	sub    $0xc,%esp
f0122265:	68 00 08 00 00       	push   $0x800
f012226a:	e8 92 5c fe ff       	call   f0107f01 <kmalloc>
f012226f:	83 c4 10             	add    $0x10,%esp
f0122272:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122278:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012227e:	89 c1                	mov    %eax,%ecx
f0122280:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122287:	10 00 00 
f012228a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012228f:	0f b6 d0             	movzbl %al,%edx
f0122292:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122298:	01 d0                	add    %edx,%eax
f012229a:	48                   	dec    %eax
f012229b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01222a1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01222a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01222ac:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01222b2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01222b8:	29 d0                	sub    %edx,%eax
f01222ba:	89 c3                	mov    %eax,%ebx
f01222bc:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01222c3:	10 00 00 
f01222c6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01222cb:	0f b6 c0             	movzbl %al,%eax
f01222ce:	c1 e0 04             	shl    $0x4,%eax
f01222d1:	89 c2                	mov    %eax,%edx
f01222d3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01222d9:	01 d0                	add    %edx,%eax
f01222db:	48                   	dec    %eax
f01222dc:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01222e2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01222e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01222ed:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01222f3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01222f9:	29 d0                	sub    %edx,%eax
f01222fb:	01 d8                	add    %ebx,%eax
f01222fd:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122302:	39 c1                	cmp    %eax,%ecx
f0122304:	74 17                	je     f012231d <test_kfree_bestfirstfit+0xf90>
f0122306:	83 ec 04             	sub    $0x4,%esp
f0122309:	68 f4 91 13 f0       	push   $0xf01391f4
f012230e:	68 4d 07 00 00       	push   $0x74d
f0122313:	68 0e 91 13 f0       	push   $0xf013910e
f0122318:	e8 93 de fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012231d:	e8 04 23 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122322:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122325:	74 17                	je     f012233e <test_kfree_bestfirstfit+0xfb1>
f0122327:	83 ec 04             	sub    $0x4,%esp
f012232a:	68 28 91 13 f0       	push   $0xf0139128
f012232f:	68 4e 07 00 00       	push   $0x74e
f0122334:	68 0e 91 13 f0       	push   $0xf013910e
f0122339:	e8 72 de fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012233e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122341:	e8 3a a6 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122346:	29 c3                	sub    %eax,%ebx
f0122348:	89 d8                	mov    %ebx,%eax
f012234a:	83 f8 01             	cmp    $0x1,%eax
f012234d:	74 17                	je     f0122366 <test_kfree_bestfirstfit+0xfd9>
f012234f:	83 ec 04             	sub    $0x4,%esp
f0122352:	68 90 91 13 f0       	push   $0xf0139190
f0122357:	68 4f 07 00 00       	push   $0x74f
f012235c:	68 0e 91 13 f0       	push   $0xf013910e
f0122361:	e8 4a de fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122366:	c7 85 e4 fe ff ff ff 	movl   $0x7ff,-0x11c(%ebp)
f012236d:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122370:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122376:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122379:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122380:	eb 0e                	jmp    f0122390 <test_kfree_bestfirstfit+0x1003>
		{
			ptr[i] = 9 ;
f0122382:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122385:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122388:	01 d0                	add    %edx,%eax
f012238a:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012238d:	ff 45 f4             	incl   -0xc(%ebp)
f0122390:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122396:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122399:	7f e7                	jg     f0122382 <test_kfree_bestfirstfit+0xff5>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012239b:	e8 e0 a5 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01223a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223a3:	e8 7e 22 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01223a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01223ab:	83 ec 0c             	sub    $0xc,%esp
f01223ae:	68 00 00 10 00       	push   $0x100000
f01223b3:	e8 49 5b fe ff       	call   f0107f01 <kmalloc>
f01223b8:	83 c4 10             	add    $0x10,%esp
f01223bb:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01223c1:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01223c7:	89 c1                	mov    %eax,%ecx
f01223c9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01223d0:	10 00 00 
f01223d3:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01223d8:	0f b6 d0             	movzbl %al,%edx
f01223db:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01223e1:	01 d0                	add    %edx,%eax
f01223e3:	48                   	dec    %eax
f01223e4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01223ea:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01223f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01223f5:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01223fb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122401:	29 d0                	sub    %edx,%eax
f0122403:	89 c3                	mov    %eax,%ebx
f0122405:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012240c:	10 00 00 
f012240f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122414:	0f b6 c0             	movzbl %al,%eax
f0122417:	c1 e0 04             	shl    $0x4,%eax
f012241a:	89 c2                	mov    %eax,%edx
f012241c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122422:	01 d0                	add    %edx,%eax
f0122424:	48                   	dec    %eax
f0122425:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012242b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122431:	ba 00 00 00 00       	mov    $0x0,%edx
f0122436:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012243c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122442:	29 d0                	sub    %edx,%eax
f0122444:	01 d8                	add    %ebx,%eax
f0122446:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f012244b:	39 c1                	cmp    %eax,%ecx
f012244d:	74 17                	je     f0122466 <test_kfree_bestfirstfit+0x10d9>
f012244f:	83 ec 04             	sub    $0x4,%esp
f0122452:	68 f4 91 13 f0       	push   $0xf01391f4
f0122457:	68 5b 07 00 00       	push   $0x75b
f012245c:	68 0e 91 13 f0       	push   $0xf013910e
f0122461:	e8 4a dd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122466:	e8 bb 21 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012246b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012246e:	74 17                	je     f0122487 <test_kfree_bestfirstfit+0x10fa>
f0122470:	83 ec 04             	sub    $0x4,%esp
f0122473:	68 28 91 13 f0       	push   $0xf0139128
f0122478:	68 5c 07 00 00       	push   $0x75c
f012247d:	68 0e 91 13 f0       	push   $0xf013910e
f0122482:	e8 29 dd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122487:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012248a:	e8 f1 a4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012248f:	29 c3                	sub    %eax,%ebx
f0122491:	89 d8                	mov    %ebx,%eax
f0122493:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122498:	74 17                	je     f01224b1 <test_kfree_bestfirstfit+0x1124>
f012249a:	83 ec 04             	sub    $0x4,%esp
f012249d:	68 90 91 13 f0       	push   $0xf0139190
f01224a2:	68 5d 07 00 00       	push   $0x75d
f01224a7:	68 0e 91 13 f0       	push   $0xf013910e
f01224ac:	e8 ff dc fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f01224b1:	c7 85 e8 fe ff ff ff 	movl   $0xfffff,-0x118(%ebp)
f01224b8:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f01224bb:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01224c1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f01224c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01224cb:	eb 0e                	jmp    f01224db <test_kfree_bestfirstfit+0x114e>
		{
			ptr[i] = 10 ;
f01224cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01224d0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01224d3:	01 d0                	add    %edx,%eax
f01224d5:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01224d8:	ff 45 f4             	incl   -0xc(%ebp)
f01224db:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01224e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01224e4:	7f e7                	jg     f01224cd <test_kfree_bestfirstfit+0x1140>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f01224e6:	83 ec 0c             	sub    $0xc,%esp
f01224e9:	68 2e 99 13 f0       	push   $0xf013992e
f01224ee:	e8 3e e9 fd ff       	call   f0100e31 <cprintf>
f01224f3:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01224f6:	e8 85 a4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01224fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224fe:	e8 23 21 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122503:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122506:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012250c:	83 ec 0c             	sub    $0xc,%esp
f012250f:	50                   	push   %eax
f0122510:	e8 06 5a fe ff       	call   f0107f1b <kfree>
f0122515:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122518:	e8 09 21 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012251d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122520:	74 17                	je     f0122539 <test_kfree_bestfirstfit+0x11ac>
f0122522:	83 ec 04             	sub    $0x4,%esp
f0122525:	68 28 91 13 f0       	push   $0xf0139128
f012252a:	68 6d 07 00 00       	push   $0x76d
f012252f:	68 0e 91 13 f0       	push   $0xf013910e
f0122534:	e8 77 dc fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122539:	e8 42 a4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012253e:	89 c2                	mov    %eax,%edx
f0122540:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122543:	29 c2                	sub    %eax,%edx
f0122545:	89 d0                	mov    %edx,%eax
f0122547:	83 f8 02             	cmp    $0x2,%eax
f012254a:	74 17                	je     f0122563 <test_kfree_bestfirstfit+0x11d6>
f012254c:	83 ec 04             	sub    $0x4,%esp
f012254f:	68 98 98 13 f0       	push   $0xf0139898
f0122554:	68 6e 07 00 00       	push   $0x76e
f0122559:	68 0e 91 13 f0       	push   $0xf013910e
f012255e:	e8 4d dc fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122563:	e8 18 a4 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122568:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012256b:	e8 b6 20 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122570:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122573:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122579:	83 ec 0c             	sub    $0xc,%esp
f012257c:	50                   	push   %eax
f012257d:	e8 99 59 fe ff       	call   f0107f1b <kfree>
f0122582:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122585:	e8 9c 20 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012258a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012258d:	74 17                	je     f01225a6 <test_kfree_bestfirstfit+0x1219>
f012258f:	83 ec 04             	sub    $0x4,%esp
f0122592:	68 28 91 13 f0       	push   $0xf0139128
f0122597:	68 74 07 00 00       	push   $0x774
f012259c:	68 0e 91 13 f0       	push   $0xf013910e
f01225a1:	e8 0a dc fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01225a6:	e8 d5 a3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01225ab:	89 c2                	mov    %eax,%edx
f01225ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225b0:	29 c2                	sub    %eax,%edx
f01225b2:	89 d0                	mov    %edx,%eax
f01225b4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01225b9:	74 17                	je     f01225d2 <test_kfree_bestfirstfit+0x1245>
f01225bb:	83 ec 04             	sub    $0x4,%esp
f01225be:	68 98 98 13 f0       	push   $0xf0139898
f01225c3:	68 75 07 00 00       	push   $0x775
f01225c8:	68 0e 91 13 f0       	push   $0xf013910e
f01225cd:	e8 de db fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01225d2:	e8 a9 a3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01225d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225da:	e8 47 20 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01225df:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01225e2:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01225e8:	83 ec 0c             	sub    $0xc,%esp
f01225eb:	50                   	push   %eax
f01225ec:	e8 2a 59 fe ff       	call   f0107f1b <kfree>
f01225f1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225f4:	e8 2d 20 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01225f9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225fc:	74 17                	je     f0122615 <test_kfree_bestfirstfit+0x1288>
f01225fe:	83 ec 04             	sub    $0x4,%esp
f0122601:	68 28 91 13 f0       	push   $0xf0139128
f0122606:	68 7b 07 00 00       	push   $0x77b
f012260b:	68 0e 91 13 f0       	push   $0xf013910e
f0122610:	e8 9b db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122615:	e8 66 a3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012261a:	89 c2                	mov    %eax,%edx
f012261c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012261f:	29 c2                	sub    %eax,%edx
f0122621:	89 d0                	mov    %edx,%eax
f0122623:	83 f8 01             	cmp    $0x1,%eax
f0122626:	74 17                	je     f012263f <test_kfree_bestfirstfit+0x12b2>
f0122628:	83 ec 04             	sub    $0x4,%esp
f012262b:	68 98 98 13 f0       	push   $0xf0139898
f0122630:	68 7c 07 00 00       	push   $0x77c
f0122635:	68 0e 91 13 f0       	push   $0xf013910e
f012263a:	e8 71 db fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012263f:	e8 3c a3 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122644:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122647:	e8 da 1f fe ff       	call   f0104626 <pf_calculate_free_frames>
f012264c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012264f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122655:	83 ec 0c             	sub    $0xc,%esp
f0122658:	50                   	push   %eax
f0122659:	e8 bd 58 fe ff       	call   f0107f1b <kfree>
f012265e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122661:	e8 c0 1f fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122666:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122669:	74 17                	je     f0122682 <test_kfree_bestfirstfit+0x12f5>
f012266b:	83 ec 04             	sub    $0x4,%esp
f012266e:	68 28 91 13 f0       	push   $0xf0139128
f0122673:	68 82 07 00 00       	push   $0x782
f0122678:	68 0e 91 13 f0       	push   $0xf013910e
f012267d:	e8 2e db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122682:	e8 f9 a2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122687:	89 c2                	mov    %eax,%edx
f0122689:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012268c:	29 c2                	sub    %eax,%edx
f012268e:	89 d0                	mov    %edx,%eax
f0122690:	83 f8 04             	cmp    $0x4,%eax
f0122693:	74 17                	je     f01226ac <test_kfree_bestfirstfit+0x131f>
f0122695:	83 ec 04             	sub    $0x4,%esp
f0122698:	68 98 98 13 f0       	push   $0xf0139898
f012269d:	68 83 07 00 00       	push   $0x783
f01226a2:	68 0e 91 13 f0       	push   $0xf013910e
f01226a7:	e8 04 db fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01226ac:	e8 cf a2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01226b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226b4:	e8 6d 1f fe ff       	call   f0104626 <pf_calculate_free_frames>
f01226b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01226bc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01226c2:	83 ec 0c             	sub    $0xc,%esp
f01226c5:	50                   	push   %eax
f01226c6:	e8 50 58 fe ff       	call   f0107f1b <kfree>
f01226cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226ce:	e8 53 1f fe ff       	call   f0104626 <pf_calculate_free_frames>
f01226d3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226d6:	74 17                	je     f01226ef <test_kfree_bestfirstfit+0x1362>
f01226d8:	83 ec 04             	sub    $0x4,%esp
f01226db:	68 28 91 13 f0       	push   $0xf0139128
f01226e0:	68 89 07 00 00       	push   $0x789
f01226e5:	68 0e 91 13 f0       	push   $0xf013910e
f01226ea:	e8 c1 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01226ef:	e8 8c a2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01226f4:	89 c2                	mov    %eax,%edx
f01226f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01226f9:	29 c2                	sub    %eax,%edx
f01226fb:	89 d0                	mov    %edx,%eax
f01226fd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122702:	74 17                	je     f012271b <test_kfree_bestfirstfit+0x138e>
f0122704:	83 ec 04             	sub    $0x4,%esp
f0122707:	68 98 98 13 f0       	push   $0xf0139898
f012270c:	68 8a 07 00 00       	push   $0x78a
f0122711:	68 0e 91 13 f0       	push   $0xf013910e
f0122716:	e8 95 da fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012271b:	e8 60 a2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122720:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122723:	e8 fe 1e fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122728:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012272b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122731:	83 ec 0c             	sub    $0xc,%esp
f0122734:	50                   	push   %eax
f0122735:	e8 e1 57 fe ff       	call   f0107f1b <kfree>
f012273a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012273d:	e8 e4 1e fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122742:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122745:	74 17                	je     f012275e <test_kfree_bestfirstfit+0x13d1>
f0122747:	83 ec 04             	sub    $0x4,%esp
f012274a:	68 28 91 13 f0       	push   $0xf0139128
f012274f:	68 90 07 00 00       	push   $0x790
f0122754:	68 0e 91 13 f0       	push   $0xf013910e
f0122759:	e8 52 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012275e:	e8 1d a2 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122763:	89 c2                	mov    %eax,%edx
f0122765:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122768:	29 c2                	sub    %eax,%edx
f012276a:	89 d0                	mov    %edx,%eax
f012276c:	83 f8 01             	cmp    $0x1,%eax
f012276f:	74 17                	je     f0122788 <test_kfree_bestfirstfit+0x13fb>
f0122771:	83 ec 04             	sub    $0x4,%esp
f0122774:	68 98 98 13 f0       	push   $0xf0139898
f0122779:	68 91 07 00 00       	push   $0x791
f012277e:	68 0e 91 13 f0       	push   $0xf013910e
f0122783:	e8 28 da fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122788:	e8 f3 a1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012278d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122790:	e8 91 1e fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122795:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122798:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012279e:	83 ec 0c             	sub    $0xc,%esp
f01227a1:	50                   	push   %eax
f01227a2:	e8 74 57 fe ff       	call   f0107f1b <kfree>
f01227a7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227aa:	e8 77 1e fe ff       	call   f0104626 <pf_calculate_free_frames>
f01227af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227b2:	74 17                	je     f01227cb <test_kfree_bestfirstfit+0x143e>
f01227b4:	83 ec 04             	sub    $0x4,%esp
f01227b7:	68 28 91 13 f0       	push   $0xf0139128
f01227bc:	68 97 07 00 00       	push   $0x797
f01227c1:	68 0e 91 13 f0       	push   $0xf013910e
f01227c6:	e8 e5 d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01227cb:	e8 b0 a1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01227d0:	89 c2                	mov    %eax,%edx
f01227d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01227d5:	29 c2                	sub    %eax,%edx
f01227d7:	89 d0                	mov    %edx,%eax
f01227d9:	3d 00 01 00 00       	cmp    $0x100,%eax
f01227de:	74 17                	je     f01227f7 <test_kfree_bestfirstfit+0x146a>
f01227e0:	83 ec 04             	sub    $0x4,%esp
f01227e3:	68 98 98 13 f0       	push   $0xf0139898
f01227e8:	68 98 07 00 00       	push   $0x798
f01227ed:	68 0e 91 13 f0       	push   $0xf013910e
f01227f2:	e8 b9 d9 fd ff       	call   f01001b0 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01227f7:	e8 84 a1 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01227fc:	89 c2                	mov    %eax,%edx
f01227fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122801:	39 c2                	cmp    %eax,%edx
f0122803:	74 17                	je     f012281c <test_kfree_bestfirstfit+0x148f>
f0122805:	83 ec 04             	sub    $0x4,%esp
f0122808:	68 38 99 13 f0       	push   $0xf0139938
f012280d:	68 9a 07 00 00       	push   $0x79a
f0122812:	68 0e 91 13 f0       	push   $0xf013910e
f0122817:	e8 94 d9 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f012281c:	83 ec 0c             	sub    $0xc,%esp
f012281f:	68 6c 99 13 f0       	push   $0xf013996c
f0122824:	e8 08 e6 fd ff       	call   f0100e31 <cprintf>
f0122829:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012282c:	83 ec 0c             	sub    $0xc,%esp
f012282f:	6a 03                	push   $0x3
f0122831:	e8 e5 a5 fe ff       	call   f010ce1b <sys_bypassPageFault>
f0122836:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122839:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122840:	e9 82 00 00 00       	jmp    f01228c7 <test_kfree_bestfirstfit+0x153a>
		{
			ptr = (char *) ptr_allocations[i];
f0122845:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122848:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f012284f:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0122852:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122855:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122858:	e8 ac a5 fe ff       	call   f010ce09 <sys_rcr2>
f012285d:	89 c2                	mov    %eax,%edx
f012285f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122862:	39 c2                	cmp    %eax,%edx
f0122864:	74 17                	je     f012287d <test_kfree_bestfirstfit+0x14f0>
f0122866:	83 ec 04             	sub    $0x4,%esp
f0122869:	68 74 99 13 f0       	push   $0xf0139974
f012286e:	68 a9 07 00 00       	push   $0x7a9
f0122873:	68 0e 91 13 f0       	push   $0xf013910e
f0122878:	e8 33 d9 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f012287d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122880:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122887:	89 c2                	mov    %eax,%edx
f0122889:	8b 45 98             	mov    -0x68(%ebp),%eax
f012288c:	01 d0                	add    %edx,%eax
f012288e:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122891:	e8 73 a5 fe ff       	call   f010ce09 <sys_rcr2>
f0122896:	89 c2                	mov    %eax,%edx
f0122898:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012289b:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f01228a2:	89 c1                	mov    %eax,%ecx
f01228a4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228a7:	01 c8                	add    %ecx,%eax
f01228a9:	39 c2                	cmp    %eax,%edx
f01228ab:	74 17                	je     f01228c4 <test_kfree_bestfirstfit+0x1537>
f01228ad:	83 ec 04             	sub    $0x4,%esp
f01228b0:	68 74 99 13 f0       	push   $0xf0139974
f01228b5:	68 ab 07 00 00       	push   $0x7ab
f01228ba:	68 0e 91 13 f0       	push   $0xf013910e
f01228bf:	e8 ec d8 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01228c4:	ff 45 f4             	incl   -0xc(%ebp)
f01228c7:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01228cb:	0f 8e 74 ff ff ff    	jle    f0122845 <test_kfree_bestfirstfit+0x14b8>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01228d1:	83 ec 0c             	sub    $0xc,%esp
f01228d4:	6a 00                	push   $0x0
f01228d6:	e8 40 a5 fe ff       	call   f010ce1b <sys_bypassPageFault>
f01228db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01228de:	83 ec 0c             	sub    $0xc,%esp
f01228e1:	68 b9 99 13 f0       	push   $0xf01399b9
f01228e6:	e8 46 e5 fd ff       	call   f0100e31 <cprintf>
f01228eb:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01228ee:	e8 8d a0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01228f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228f6:	e8 2b 1d fe ff       	call   f0104626 <pf_calculate_free_frames>
f01228fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01228fe:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122904:	83 ec 0c             	sub    $0xc,%esp
f0122907:	50                   	push   %eax
f0122908:	e8 0e 56 fe ff       	call   f0107f1b <kfree>
f012290d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122910:	e8 11 1d fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122915:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122918:	74 17                	je     f0122931 <test_kfree_bestfirstfit+0x15a4>
f012291a:	83 ec 04             	sub    $0x4,%esp
f012291d:	68 28 91 13 f0       	push   $0xf0139128
f0122922:	68 b9 07 00 00       	push   $0x7b9
f0122927:	68 0e 91 13 f0       	push   $0xf013910e
f012292c:	e8 7f d8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122931:	e8 4a a0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122936:	89 c2                	mov    %eax,%edx
f0122938:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012293b:	39 c2                	cmp    %eax,%edx
f012293d:	74 17                	je     f0122956 <test_kfree_bestfirstfit+0x15c9>
f012293f:	83 ec 04             	sub    $0x4,%esp
f0122942:	68 c0 99 13 f0       	push   $0xf01399c0
f0122947:	68 ba 07 00 00       	push   $0x7ba
f012294c:	68 0e 91 13 f0       	push   $0xf013910e
f0122951:	e8 5a d8 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122956:	e8 25 a0 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012295b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012295e:	e8 c3 1c fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122963:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122966:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012296c:	83 ec 0c             	sub    $0xc,%esp
f012296f:	50                   	push   %eax
f0122970:	e8 a6 55 fe ff       	call   f0107f1b <kfree>
f0122975:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122978:	e8 a9 1c fe ff       	call   f0104626 <pf_calculate_free_frames>
f012297d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122980:	74 17                	je     f0122999 <test_kfree_bestfirstfit+0x160c>
f0122982:	83 ec 04             	sub    $0x4,%esp
f0122985:	68 28 91 13 f0       	push   $0xf0139128
f012298a:	68 c0 07 00 00       	push   $0x7c0
f012298f:	68 0e 91 13 f0       	push   $0xf013910e
f0122994:	e8 17 d8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122999:	e8 e2 9f fe ff       	call   f010c980 <sys_calculate_free_frames>
f012299e:	89 c2                	mov    %eax,%edx
f01229a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01229a3:	39 c2                	cmp    %eax,%edx
f01229a5:	74 17                	je     f01229be <test_kfree_bestfirstfit+0x1631>
f01229a7:	83 ec 04             	sub    $0x4,%esp
f01229aa:	68 c0 99 13 f0       	push   $0xf01399c0
f01229af:	68 c1 07 00 00       	push   $0x7c1
f01229b4:	68 0e 91 13 f0       	push   $0xf013910e
f01229b9:	e8 f2 d7 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01229be:	e8 bd 9f fe ff       	call   f010c980 <sys_calculate_free_frames>
f01229c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229c6:	e8 5b 1c fe ff       	call   f0104626 <pf_calculate_free_frames>
f01229cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01229ce:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01229d4:	83 ec 0c             	sub    $0xc,%esp
f01229d7:	50                   	push   %eax
f01229d8:	e8 3e 55 fe ff       	call   f0107f1b <kfree>
f01229dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229e0:	e8 41 1c fe ff       	call   f0104626 <pf_calculate_free_frames>
f01229e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229e8:	74 17                	je     f0122a01 <test_kfree_bestfirstfit+0x1674>
f01229ea:	83 ec 04             	sub    $0x4,%esp
f01229ed:	68 28 91 13 f0       	push   $0xf0139128
f01229f2:	68 c7 07 00 00       	push   $0x7c7
f01229f7:	68 0e 91 13 f0       	push   $0xf013910e
f01229fc:	e8 af d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122a01:	e8 7a 9f fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122a06:	89 c2                	mov    %eax,%edx
f0122a08:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a0b:	39 c2                	cmp    %eax,%edx
f0122a0d:	74 17                	je     f0122a26 <test_kfree_bestfirstfit+0x1699>
f0122a0f:	83 ec 04             	sub    $0x4,%esp
f0122a12:	68 c0 99 13 f0       	push   $0xf01399c0
f0122a17:	68 c8 07 00 00       	push   $0x7c8
f0122a1c:	68 0e 91 13 f0       	push   $0xf013910e
f0122a21:	e8 8a d7 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a26:	e8 55 9f fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122a2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a2e:	e8 f3 1b fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122a33:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122a36:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122a3c:	83 ec 0c             	sub    $0xc,%esp
f0122a3f:	50                   	push   %eax
f0122a40:	e8 d6 54 fe ff       	call   f0107f1b <kfree>
f0122a45:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a48:	e8 d9 1b fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122a4d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a50:	74 17                	je     f0122a69 <test_kfree_bestfirstfit+0x16dc>
f0122a52:	83 ec 04             	sub    $0x4,%esp
f0122a55:	68 28 91 13 f0       	push   $0xf0139128
f0122a5a:	68 ce 07 00 00       	push   $0x7ce
f0122a5f:	68 0e 91 13 f0       	push   $0xf013910e
f0122a64:	e8 47 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122a69:	e8 12 9f fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122a6e:	89 c2                	mov    %eax,%edx
f0122a70:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a73:	39 c2                	cmp    %eax,%edx
f0122a75:	74 17                	je     f0122a8e <test_kfree_bestfirstfit+0x1701>
f0122a77:	83 ec 04             	sub    $0x4,%esp
f0122a7a:	68 c0 99 13 f0       	push   $0xf01399c0
f0122a7f:	68 cf 07 00 00       	push   $0x7cf
f0122a84:	68 0e 91 13 f0       	push   $0xf013910e
f0122a89:	e8 22 d7 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0122a8e:	83 ec 0c             	sub    $0xc,%esp
f0122a91:	68 07 9a 13 f0       	push   $0xf0139a07
f0122a96:	e8 96 e3 fd ff       	call   f0100e31 <cprintf>
f0122a9b:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122a9e:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122aa5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122aac:	eb 48                	jmp    f0122af6 <test_kfree_bestfirstfit+0x1769>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122aae:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122ab1:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0122ab6:	83 ec 04             	sub    $0x4,%esp
f0122ab9:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0122abf:	51                   	push   %ecx
f0122ac0:	52                   	push   %edx
f0122ac1:	50                   	push   %eax
f0122ac2:	e8 c2 49 fe ff       	call   f0107489 <get_page_table>
f0122ac7:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122aca:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0122ad0:	85 c0                	test   %eax,%eax
f0122ad2:	75 17                	jne    f0122aeb <test_kfree_bestfirstfit+0x175e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122ad4:	83 ec 04             	sub    $0x4,%esp
f0122ad7:	68 10 9a 13 f0       	push   $0xf0139a10
f0122adc:	68 dd 07 00 00       	push   $0x7dd
f0122ae1:	68 0e 91 13 f0       	push   $0xf013910e
f0122ae6:	e8 c5 d6 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122aeb:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122af2:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122af6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122afa:	78 b2                	js     f0122aae <test_kfree_bestfirstfit+0x1721>
f0122afc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122b00:	7f 09                	jg     f0122b0b <test_kfree_bestfirstfit+0x177e>
f0122b02:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122b09:	76 a3                	jbe    f0122aae <test_kfree_bestfirstfit+0x1721>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0122b0b:	83 ec 0c             	sub    $0xc,%esp
f0122b0e:	68 f2 92 13 f0       	push   $0xf01392f2
f0122b13:	e8 19 e3 fd ff       	call   f0100e31 <cprintf>
f0122b18:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122b1b:	83 ec 0c             	sub    $0xc,%esp
f0122b1e:	68 78 9a 13 f0       	push   $0xf0139a78
f0122b23:	e8 09 e3 fd ff       	call   f0100e31 <cprintf>
f0122b28:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122b2b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0122b30:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122b33:	5b                   	pop    %ebx
f0122b34:	5f                   	pop    %edi
f0122b35:	5d                   	pop    %ebp
f0122b36:	c3                   	ret    

f0122b37 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122b37:	55                   	push   %ebp
f0122b38:	89 e5                	mov    %esp,%ebp
f0122b3a:	57                   	push   %edi
f0122b3b:	56                   	push   %esi
f0122b3c:	53                   	push   %ebx
f0122b3d:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f0122b43:	83 ec 0c             	sub    $0xc,%esp
f0122b46:	68 50 90 13 f0       	push   $0xf0139050
f0122b4b:	e8 e1 e2 fd ff       	call   f0100e31 <cprintf>
f0122b50:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122b53:	83 ec 0c             	sub    $0xc,%esp
f0122b56:	68 80 90 13 f0       	push   $0xf0139080
f0122b5b:	e8 d1 e2 fd ff       	call   f0100e31 <cprintf>
f0122b60:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122b63:	83 ec 0c             	sub    $0xc,%esp
f0122b66:	68 50 90 13 f0       	push   $0xf0139050
f0122b6b:	e8 c1 e2 fd ff       	call   f0100e31 <cprintf>
f0122b70:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122b73:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122b77:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122b7b:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122b81:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122b87:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122b8e:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122b95:	e8 e6 9d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122b9a:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122b9d:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0122ba3:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122ba8:	b8 00 00 00 00       	mov    $0x0,%eax
f0122bad:	89 d7                	mov    %edx,%edi
f0122baf:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122bb1:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0122bb7:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122bbc:	b8 00 00 00 00       	mov    $0x0,%eax
f0122bc1:	89 d7                	mov    %edx,%edi
f0122bc3:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122bc5:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0122bcb:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122bd0:	b8 00 00 00 00       	mov    $0x0,%eax
f0122bd5:	89 d7                	mov    %edx,%edi
f0122bd7:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122bd9:	e8 a2 9d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122bde:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122be1:	e8 40 1a fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122be6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122be9:	83 ec 0c             	sub    $0xc,%esp
f0122bec:	68 00 fc 1f 00       	push   $0x1ffc00
f0122bf1:	e8 0b 53 fe ff       	call   f0107f01 <kmalloc>
f0122bf6:	83 c4 10             	add    $0x10,%esp
f0122bf9:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122bff:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0122c05:	89 c1                	mov    %eax,%ecx
f0122c07:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122c0e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122c13:	0f b6 d0             	movzbl %al,%edx
f0122c16:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122c19:	01 d0                	add    %edx,%eax
f0122c1b:	48                   	dec    %eax
f0122c1c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122c1f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122c22:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c27:	f7 75 a0             	divl   -0x60(%ebp)
f0122c2a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122c2d:	29 d0                	sub    %edx,%eax
f0122c2f:	89 c3                	mov    %eax,%ebx
f0122c31:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122c38:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122c3d:	0f b6 c0             	movzbl %al,%eax
f0122c40:	c1 e0 04             	shl    $0x4,%eax
f0122c43:	89 c2                	mov    %eax,%edx
f0122c45:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122c48:	01 d0                	add    %edx,%eax
f0122c4a:	48                   	dec    %eax
f0122c4b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122c4e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122c51:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c56:	f7 75 98             	divl   -0x68(%ebp)
f0122c59:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122c5c:	29 d0                	sub    %edx,%eax
f0122c5e:	01 d8                	add    %ebx,%eax
f0122c60:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122c65:	39 c1                	cmp    %eax,%ecx
f0122c67:	74 17                	je     f0122c80 <test_kheap_phys_addr+0x149>
f0122c69:	83 ec 04             	sub    $0x4,%esp
f0122c6c:	68 f4 91 13 f0       	push   $0xf01391f4
f0122c71:	68 0a 08 00 00       	push   $0x80a
f0122c76:	68 0e 91 13 f0       	push   $0xf013910e
f0122c7b:	e8 30 d5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c80:	e8 a1 19 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122c85:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122c88:	74 17                	je     f0122ca1 <test_kheap_phys_addr+0x16a>
f0122c8a:	83 ec 04             	sub    $0x4,%esp
f0122c8d:	68 28 91 13 f0       	push   $0xf0139128
f0122c92:	68 0b 08 00 00       	push   $0x80b
f0122c97:	68 0e 91 13 f0       	push   $0xf013910e
f0122c9c:	e8 0f d5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ca1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122ca4:	e8 d7 9c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122ca9:	29 c3                	sub    %eax,%ebx
f0122cab:	89 d8                	mov    %ebx,%eax
f0122cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122cb2:	74 17                	je     f0122ccb <test_kheap_phys_addr+0x194>
f0122cb4:	83 ec 04             	sub    $0x4,%esp
f0122cb7:	68 90 91 13 f0       	push   $0xf0139190
f0122cbc:	68 0c 08 00 00       	push   $0x80c
f0122cc1:	68 0e 91 13 f0       	push   $0xf013910e
f0122cc6:	e8 e5 d4 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ccb:	e8 b0 9c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122cd0:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cd3:	e8 4e 19 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122cd8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122cdb:	83 ec 0c             	sub    $0xc,%esp
f0122cde:	68 00 fc 1f 00       	push   $0x1ffc00
f0122ce3:	e8 19 52 fe ff       	call   f0107f01 <kmalloc>
f0122ce8:	83 c4 10             	add    $0x10,%esp
f0122ceb:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122cf1:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0122cf7:	89 c1                	mov    %eax,%ecx
f0122cf9:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122d00:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122d05:	0f b6 d0             	movzbl %al,%edx
f0122d08:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122d0b:	01 d0                	add    %edx,%eax
f0122d0d:	48                   	dec    %eax
f0122d0e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122d11:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122d14:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d19:	f7 75 90             	divl   -0x70(%ebp)
f0122d1c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122d1f:	29 d0                	sub    %edx,%eax
f0122d21:	89 c3                	mov    %eax,%ebx
f0122d23:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122d2a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122d2f:	0f b6 c0             	movzbl %al,%eax
f0122d32:	c1 e0 04             	shl    $0x4,%eax
f0122d35:	89 c2                	mov    %eax,%edx
f0122d37:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122d3a:	01 d0                	add    %edx,%eax
f0122d3c:	48                   	dec    %eax
f0122d3d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122d40:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122d43:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d48:	f7 75 88             	divl   -0x78(%ebp)
f0122d4b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122d4e:	29 d0                	sub    %edx,%eax
f0122d50:	01 d8                	add    %ebx,%eax
f0122d52:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122d57:	39 c1                	cmp    %eax,%ecx
f0122d59:	74 17                	je     f0122d72 <test_kheap_phys_addr+0x23b>
f0122d5b:	83 ec 04             	sub    $0x4,%esp
f0122d5e:	68 f4 91 13 f0       	push   $0xf01391f4
f0122d63:	68 12 08 00 00       	push   $0x812
f0122d68:	68 0e 91 13 f0       	push   $0xf013910e
f0122d6d:	e8 3e d4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d72:	e8 af 18 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122d77:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122d7a:	74 17                	je     f0122d93 <test_kheap_phys_addr+0x25c>
f0122d7c:	83 ec 04             	sub    $0x4,%esp
f0122d7f:	68 28 91 13 f0       	push   $0xf0139128
f0122d84:	68 13 08 00 00       	push   $0x813
f0122d89:	68 0e 91 13 f0       	push   $0xf013910e
f0122d8e:	e8 1d d4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122d93:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122d96:	e8 e5 9b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122d9b:	29 c3                	sub    %eax,%ebx
f0122d9d:	89 d8                	mov    %ebx,%eax
f0122d9f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122da4:	74 17                	je     f0122dbd <test_kheap_phys_addr+0x286>
f0122da6:	83 ec 04             	sub    $0x4,%esp
f0122da9:	68 90 91 13 f0       	push   $0xf0139190
f0122dae:	68 14 08 00 00       	push   $0x814
f0122db3:	68 0e 91 13 f0       	push   $0xf013910e
f0122db8:	e8 f3 d3 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122dbd:	e8 be 9b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122dc2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122dc5:	e8 5c 18 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122dca:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122dcd:	83 ec 0c             	sub    $0xc,%esp
f0122dd0:	68 00 08 00 00       	push   $0x800
f0122dd5:	e8 27 51 fe ff       	call   f0107f01 <kmalloc>
f0122dda:	83 c4 10             	add    $0x10,%esp
f0122ddd:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122de3:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0122de9:	89 c1                	mov    %eax,%ecx
f0122deb:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122df2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122df7:	0f b6 d0             	movzbl %al,%edx
f0122dfa:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122dfd:	01 d0                	add    %edx,%eax
f0122dff:	48                   	dec    %eax
f0122e00:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122e06:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122e0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e11:	f7 75 80             	divl   -0x80(%ebp)
f0122e14:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122e1a:	29 d0                	sub    %edx,%eax
f0122e1c:	89 c3                	mov    %eax,%ebx
f0122e1e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122e25:	10 00 00 
f0122e28:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122e2d:	0f b6 c0             	movzbl %al,%eax
f0122e30:	c1 e0 04             	shl    $0x4,%eax
f0122e33:	89 c2                	mov    %eax,%edx
f0122e35:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122e3b:	01 d0                	add    %edx,%eax
f0122e3d:	48                   	dec    %eax
f0122e3e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122e44:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122e4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e4f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122e55:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122e5b:	29 d0                	sub    %edx,%eax
f0122e5d:	01 d8                	add    %ebx,%eax
f0122e5f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122e64:	39 c1                	cmp    %eax,%ecx
f0122e66:	74 17                	je     f0122e7f <test_kheap_phys_addr+0x348>
f0122e68:	83 ec 04             	sub    $0x4,%esp
f0122e6b:	68 f4 91 13 f0       	push   $0xf01391f4
f0122e70:	68 1a 08 00 00       	push   $0x81a
f0122e75:	68 0e 91 13 f0       	push   $0xf013910e
f0122e7a:	e8 31 d3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e7f:	e8 a2 17 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122e84:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122e87:	74 17                	je     f0122ea0 <test_kheap_phys_addr+0x369>
f0122e89:	83 ec 04             	sub    $0x4,%esp
f0122e8c:	68 28 91 13 f0       	push   $0xf0139128
f0122e91:	68 1b 08 00 00       	push   $0x81b
f0122e96:	68 0e 91 13 f0       	push   $0xf013910e
f0122e9b:	e8 10 d3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ea0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122ea3:	e8 d8 9a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122ea8:	29 c3                	sub    %eax,%ebx
f0122eaa:	89 d8                	mov    %ebx,%eax
f0122eac:	83 f8 01             	cmp    $0x1,%eax
f0122eaf:	74 17                	je     f0122ec8 <test_kheap_phys_addr+0x391>
f0122eb1:	83 ec 04             	sub    $0x4,%esp
f0122eb4:	68 90 91 13 f0       	push   $0xf0139190
f0122eb9:	68 1c 08 00 00       	push   $0x81c
f0122ebe:	68 0e 91 13 f0       	push   $0xf013910e
f0122ec3:	e8 e8 d2 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122ec8:	e8 b3 9a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122ecd:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ed0:	e8 51 17 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122ed5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122ed8:	83 ec 0c             	sub    $0xc,%esp
f0122edb:	68 00 08 00 00       	push   $0x800
f0122ee0:	e8 1c 50 fe ff       	call   f0107f01 <kmalloc>
f0122ee5:	83 c4 10             	add    $0x10,%esp
f0122ee8:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122eee:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0122ef4:	89 c1                	mov    %eax,%ecx
f0122ef6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0122efd:	10 00 00 
f0122f00:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122f05:	0f b6 d0             	movzbl %al,%edx
f0122f08:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122f0e:	01 d0                	add    %edx,%eax
f0122f10:	48                   	dec    %eax
f0122f11:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0122f17:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122f1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f22:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0122f28:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122f2e:	29 d0                	sub    %edx,%eax
f0122f30:	89 c3                	mov    %eax,%ebx
f0122f32:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0122f39:	10 00 00 
f0122f3c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0122f41:	0f b6 c0             	movzbl %al,%eax
f0122f44:	c1 e0 04             	shl    $0x4,%eax
f0122f47:	89 c2                	mov    %eax,%edx
f0122f49:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122f4f:	01 d0                	add    %edx,%eax
f0122f51:	48                   	dec    %eax
f0122f52:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0122f58:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122f5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f63:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0122f69:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122f6f:	29 d0                	sub    %edx,%eax
f0122f71:	01 d8                	add    %ebx,%eax
f0122f73:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122f78:	39 c1                	cmp    %eax,%ecx
f0122f7a:	74 17                	je     f0122f93 <test_kheap_phys_addr+0x45c>
f0122f7c:	83 ec 04             	sub    $0x4,%esp
f0122f7f:	68 f4 91 13 f0       	push   $0xf01391f4
f0122f84:	68 22 08 00 00       	push   $0x822
f0122f89:	68 0e 91 13 f0       	push   $0xf013910e
f0122f8e:	e8 1d d2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f93:	e8 8e 16 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122f98:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122f9b:	74 17                	je     f0122fb4 <test_kheap_phys_addr+0x47d>
f0122f9d:	83 ec 04             	sub    $0x4,%esp
f0122fa0:	68 28 91 13 f0       	push   $0xf0139128
f0122fa5:	68 23 08 00 00       	push   $0x823
f0122faa:	68 0e 91 13 f0       	push   $0xf013910e
f0122faf:	e8 fc d1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122fb4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122fb7:	e8 c4 99 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122fbc:	29 c3                	sub    %eax,%ebx
f0122fbe:	89 d8                	mov    %ebx,%eax
f0122fc0:	83 f8 01             	cmp    $0x1,%eax
f0122fc3:	74 17                	je     f0122fdc <test_kheap_phys_addr+0x4a5>
f0122fc5:	83 ec 04             	sub    $0x4,%esp
f0122fc8:	68 90 91 13 f0       	push   $0xf0139190
f0122fcd:	68 24 08 00 00       	push   $0x824
f0122fd2:	68 0e 91 13 f0       	push   $0xf013910e
f0122fd7:	e8 d4 d1 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122fdc:	e8 9f 99 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0122fe1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fe4:	e8 3d 16 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0122fe9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122fec:	83 ec 0c             	sub    $0xc,%esp
f0122fef:	68 00 1c 00 00       	push   $0x1c00
f0122ff4:	e8 08 4f fe ff       	call   f0107f01 <kmalloc>
f0122ff9:	83 c4 10             	add    $0x10,%esp
f0122ffc:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123002:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0123008:	89 c1                	mov    %eax,%ecx
f012300a:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123011:	10 00 00 
f0123014:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123019:	0f b6 d0             	movzbl %al,%edx
f012301c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123022:	01 d0                	add    %edx,%eax
f0123024:	48                   	dec    %eax
f0123025:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012302b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123031:	ba 00 00 00 00       	mov    $0x0,%edx
f0123036:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012303c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123042:	29 d0                	sub    %edx,%eax
f0123044:	89 c3                	mov    %eax,%ebx
f0123046:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012304d:	10 00 00 
f0123050:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123055:	0f b6 c0             	movzbl %al,%eax
f0123058:	c1 e0 04             	shl    $0x4,%eax
f012305b:	89 c2                	mov    %eax,%edx
f012305d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123063:	01 d0                	add    %edx,%eax
f0123065:	48                   	dec    %eax
f0123066:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012306c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123072:	ba 00 00 00 00       	mov    $0x0,%edx
f0123077:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012307d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123083:	29 d0                	sub    %edx,%eax
f0123085:	01 d8                	add    %ebx,%eax
f0123087:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012308c:	39 c1                	cmp    %eax,%ecx
f012308e:	74 17                	je     f01230a7 <test_kheap_phys_addr+0x570>
f0123090:	83 ec 04             	sub    $0x4,%esp
f0123093:	68 f4 91 13 f0       	push   $0xf01391f4
f0123098:	68 2a 08 00 00       	push   $0x82a
f012309d:	68 0e 91 13 f0       	push   $0xf013910e
f01230a2:	e8 09 d1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230a7:	e8 7a 15 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01230ac:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01230af:	74 17                	je     f01230c8 <test_kheap_phys_addr+0x591>
f01230b1:	83 ec 04             	sub    $0x4,%esp
f01230b4:	68 28 91 13 f0       	push   $0xf0139128
f01230b9:	68 2b 08 00 00       	push   $0x82b
f01230be:	68 0e 91 13 f0       	push   $0xf013910e
f01230c3:	e8 e8 d0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01230c8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01230cb:	e8 b0 98 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01230d0:	29 c3                	sub    %eax,%ebx
f01230d2:	89 d8                	mov    %ebx,%eax
f01230d4:	83 f8 02             	cmp    $0x2,%eax
f01230d7:	74 17                	je     f01230f0 <test_kheap_phys_addr+0x5b9>
f01230d9:	83 ec 04             	sub    $0x4,%esp
f01230dc:	68 90 91 13 f0       	push   $0xf0139190
f01230e1:	68 2c 08 00 00       	push   $0x82c
f01230e6:	68 0e 91 13 f0       	push   $0xf013910e
f01230eb:	e8 c0 d0 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01230f0:	e8 8b 98 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01230f5:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230f8:	e8 29 15 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01230fd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123100:	83 ec 0c             	sub    $0xc,%esp
f0123103:	68 00 fc 2f 00       	push   $0x2ffc00
f0123108:	e8 f4 4d fe ff       	call   f0107f01 <kmalloc>
f012310d:	83 c4 10             	add    $0x10,%esp
f0123110:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123116:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f012311c:	89 c1                	mov    %eax,%ecx
f012311e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123125:	10 00 00 
f0123128:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012312d:	0f b6 d0             	movzbl %al,%edx
f0123130:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123136:	01 d0                	add    %edx,%eax
f0123138:	48                   	dec    %eax
f0123139:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012313f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123145:	ba 00 00 00 00       	mov    $0x0,%edx
f012314a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123150:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123156:	29 d0                	sub    %edx,%eax
f0123158:	89 c3                	mov    %eax,%ebx
f012315a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123161:	10 00 00 
f0123164:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123169:	0f b6 c0             	movzbl %al,%eax
f012316c:	c1 e0 04             	shl    $0x4,%eax
f012316f:	89 c2                	mov    %eax,%edx
f0123171:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123177:	01 d0                	add    %edx,%eax
f0123179:	48                   	dec    %eax
f012317a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0123180:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123186:	ba 00 00 00 00       	mov    $0x0,%edx
f012318b:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0123191:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123197:	29 d0                	sub    %edx,%eax
f0123199:	01 d8                	add    %ebx,%eax
f012319b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01231a0:	39 c1                	cmp    %eax,%ecx
f01231a2:	74 17                	je     f01231bb <test_kheap_phys_addr+0x684>
f01231a4:	83 ec 04             	sub    $0x4,%esp
f01231a7:	68 f4 91 13 f0       	push   $0xf01391f4
f01231ac:	68 32 08 00 00       	push   $0x832
f01231b1:	68 0e 91 13 f0       	push   $0xf013910e
f01231b6:	e8 f5 cf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01231bb:	e8 66 14 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01231c0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01231c3:	74 17                	je     f01231dc <test_kheap_phys_addr+0x6a5>
f01231c5:	83 ec 04             	sub    $0x4,%esp
f01231c8:	68 28 91 13 f0       	push   $0xf0139128
f01231cd:	68 33 08 00 00       	push   $0x833
f01231d2:	68 0e 91 13 f0       	push   $0xf013910e
f01231d7:	e8 d4 cf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01231dc:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01231df:	e8 9c 97 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01231e4:	29 c3                	sub    %eax,%ebx
f01231e6:	89 d8                	mov    %ebx,%eax
f01231e8:	3d 00 03 00 00       	cmp    $0x300,%eax
f01231ed:	74 17                	je     f0123206 <test_kheap_phys_addr+0x6cf>
f01231ef:	83 ec 04             	sub    $0x4,%esp
f01231f2:	68 90 91 13 f0       	push   $0xf0139190
f01231f7:	68 34 08 00 00       	push   $0x834
f01231fc:	68 0e 91 13 f0       	push   $0xf013910e
f0123201:	e8 aa cf fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123206:	e8 75 97 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012320b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012320e:	e8 13 14 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123213:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123216:	83 ec 0c             	sub    $0xc,%esp
f0123219:	68 00 fc 5f 00       	push   $0x5ffc00
f012321e:	e8 de 4c fe ff       	call   f0107f01 <kmalloc>
f0123223:	83 c4 10             	add    $0x10,%esp
f0123226:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012322c:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123232:	89 c1                	mov    %eax,%ecx
f0123234:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012323b:	10 00 00 
f012323e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123243:	0f b6 d0             	movzbl %al,%edx
f0123246:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012324c:	01 d0                	add    %edx,%eax
f012324e:	48                   	dec    %eax
f012324f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123255:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012325b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123260:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123266:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012326c:	29 d0                	sub    %edx,%eax
f012326e:	89 c3                	mov    %eax,%ebx
f0123270:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123277:	10 00 00 
f012327a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012327f:	0f b6 c0             	movzbl %al,%eax
f0123282:	c1 e0 04             	shl    $0x4,%eax
f0123285:	89 c2                	mov    %eax,%edx
f0123287:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012328d:	01 d0                	add    %edx,%eax
f012328f:	48                   	dec    %eax
f0123290:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123296:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012329c:	ba 00 00 00 00       	mov    $0x0,%edx
f01232a1:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01232a7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01232ad:	29 d0                	sub    %edx,%eax
f01232af:	01 d8                	add    %ebx,%eax
f01232b1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01232b6:	39 c1                	cmp    %eax,%ecx
f01232b8:	74 17                	je     f01232d1 <test_kheap_phys_addr+0x79a>
f01232ba:	83 ec 04             	sub    $0x4,%esp
f01232bd:	68 f4 91 13 f0       	push   $0xf01391f4
f01232c2:	68 3a 08 00 00       	push   $0x83a
f01232c7:	68 0e 91 13 f0       	push   $0xf013910e
f01232cc:	e8 df ce fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232d1:	e8 50 13 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01232d6:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01232d9:	74 17                	je     f01232f2 <test_kheap_phys_addr+0x7bb>
f01232db:	83 ec 04             	sub    $0x4,%esp
f01232de:	68 28 91 13 f0       	push   $0xf0139128
f01232e3:	68 3b 08 00 00       	push   $0x83b
f01232e8:	68 0e 91 13 f0       	push   $0xf013910e
f01232ed:	e8 be ce fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01232f2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01232f5:	e8 86 96 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01232fa:	29 c3                	sub    %eax,%ebx
f01232fc:	89 d8                	mov    %ebx,%eax
f01232fe:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123303:	74 17                	je     f012331c <test_kheap_phys_addr+0x7e5>
f0123305:	83 ec 04             	sub    $0x4,%esp
f0123308:	68 90 91 13 f0       	push   $0xf0139190
f012330d:	68 3c 08 00 00       	push   $0x83c
f0123312:	68 0e 91 13 f0       	push   $0xf013910e
f0123317:	e8 94 ce fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012331c:	e8 5f 96 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123321:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123324:	e8 fd 12 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123329:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012332c:	83 ec 0c             	sub    $0xc,%esp
f012332f:	68 00 38 00 00       	push   $0x3800
f0123334:	e8 c8 4b fe ff       	call   f0107f01 <kmalloc>
f0123339:	83 c4 10             	add    $0x10,%esp
f012333c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123342:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123348:	89 c1                	mov    %eax,%ecx
f012334a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0123351:	10 00 00 
f0123354:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123359:	0f b6 d0             	movzbl %al,%edx
f012335c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123362:	01 d0                	add    %edx,%eax
f0123364:	48                   	dec    %eax
f0123365:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012336b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123371:	ba 00 00 00 00       	mov    $0x0,%edx
f0123376:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012337c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123382:	29 d0                	sub    %edx,%eax
f0123384:	89 c3                	mov    %eax,%ebx
f0123386:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012338d:	10 00 00 
f0123390:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123395:	0f b6 c0             	movzbl %al,%eax
f0123398:	c1 e0 04             	shl    $0x4,%eax
f012339b:	89 c2                	mov    %eax,%edx
f012339d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01233a3:	01 d0                	add    %edx,%eax
f01233a5:	48                   	dec    %eax
f01233a6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01233ac:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01233b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01233b7:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01233bd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01233c3:	29 d0                	sub    %edx,%eax
f01233c5:	01 d8                	add    %ebx,%eax
f01233c7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01233cc:	39 c1                	cmp    %eax,%ecx
f01233ce:	74 17                	je     f01233e7 <test_kheap_phys_addr+0x8b0>
f01233d0:	83 ec 04             	sub    $0x4,%esp
f01233d3:	68 f4 91 13 f0       	push   $0xf01391f4
f01233d8:	68 42 08 00 00       	push   $0x842
f01233dd:	68 0e 91 13 f0       	push   $0xf013910e
f01233e2:	e8 c9 cd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233e7:	e8 3a 12 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01233ec:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01233ef:	74 17                	je     f0123408 <test_kheap_phys_addr+0x8d1>
f01233f1:	83 ec 04             	sub    $0x4,%esp
f01233f4:	68 28 91 13 f0       	push   $0xf0139128
f01233f9:	68 43 08 00 00       	push   $0x843
f01233fe:	68 0e 91 13 f0       	push   $0xf013910e
f0123403:	e8 a8 cd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123408:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012340b:	e8 70 95 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123410:	29 c3                	sub    %eax,%ebx
f0123412:	89 d8                	mov    %ebx,%eax
f0123414:	83 f8 04             	cmp    $0x4,%eax
f0123417:	74 17                	je     f0123430 <test_kheap_phys_addr+0x8f9>
f0123419:	83 ec 04             	sub    $0x4,%esp
f012341c:	68 90 91 13 f0       	push   $0xf0139190
f0123421:	68 44 08 00 00       	push   $0x844
f0123426:	68 0e 91 13 f0       	push   $0xf013910e
f012342b:	e8 80 cd fd ff       	call   f01001b0 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123430:	89 e0                	mov    %esp,%eax
f0123432:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123434:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012343b:	10 00 00 
f012343e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123443:	0f b6 d0             	movzbl %al,%edx
f0123446:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012344c:	01 d0                	add    %edx,%eax
f012344e:	48                   	dec    %eax
f012344f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123455:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012345b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123460:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123466:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012346c:	29 d0                	sub    %edx,%eax
f012346e:	89 c1                	mov    %eax,%ecx
f0123470:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123477:	10 00 00 
f012347a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012347f:	0f b6 c0             	movzbl %al,%eax
f0123482:	c1 e0 04             	shl    $0x4,%eax
f0123485:	89 c2                	mov    %eax,%edx
f0123487:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012348d:	01 d0                	add    %edx,%eax
f012348f:	48                   	dec    %eax
f0123490:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123496:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012349c:	ba 00 00 00 00       	mov    $0x0,%edx
f01234a1:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01234a7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01234ad:	29 d0                	sub    %edx,%eax
f01234af:	01 c8                	add    %ecx,%eax
f01234b1:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01234b6:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01234bc:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01234c3:	10 00 00 
f01234c6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01234cb:	0f b6 d0             	movzbl %al,%edx
f01234ce:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01234d4:	01 d0                	add    %edx,%eax
f01234d6:	48                   	dec    %eax
f01234d7:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01234dd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01234e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01234e8:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01234ee:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01234f4:	29 d0                	sub    %edx,%eax
f01234f6:	89 c1                	mov    %eax,%ecx
f01234f8:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01234ff:	10 00 00 
f0123502:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123507:	0f b6 c0             	movzbl %al,%eax
f012350a:	c1 e0 04             	shl    $0x4,%eax
f012350d:	89 c2                	mov    %eax,%edx
f012350f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123515:	01 d0                	add    %edx,%eax
f0123517:	48                   	dec    %eax
f0123518:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012351e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123524:	ba 00 00 00 00       	mov    $0x0,%edx
f0123529:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012352f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123535:	29 d0                	sub    %edx,%eax
f0123537:	01 c8                	add    %ecx,%eax
f0123539:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012353e:	c1 e8 0c             	shr    $0xc,%eax
f0123541:	89 c2                	mov    %eax,%edx
f0123543:	4a                   	dec    %edx
f0123544:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f012354a:	c1 e0 02             	shl    $0x2,%eax
f012354d:	8d 50 03             	lea    0x3(%eax),%edx
f0123550:	b8 10 00 00 00       	mov    $0x10,%eax
f0123555:	48                   	dec    %eax
f0123556:	01 d0                	add    %edx,%eax
f0123558:	bf 10 00 00 00       	mov    $0x10,%edi
f012355d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123562:	f7 f7                	div    %edi
f0123564:	6b c0 10             	imul   $0x10,%eax,%eax
f0123567:	29 c4                	sub    %eax,%esp
f0123569:	89 e0                	mov    %esp,%eax
f012356b:	83 c0 03             	add    $0x3,%eax
f012356e:	c1 e8 02             	shr    $0x2,%eax
f0123571:	c1 e0 02             	shl    $0x2,%eax
f0123574:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f012357a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123581:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123588:	eb 29                	jmp    f01235b3 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f012358a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012358d:	8d 43 01             	lea    0x1(%ebx),%eax
f0123590:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123593:	83 ec 0c             	sub    $0xc,%esp
f0123596:	ff 75 e0             	pushl  -0x20(%ebp)
f0123599:	e8 b1 49 fe ff       	call   f0107f4f <kheap_physical_address>
f012359e:	83 c4 10             	add    $0x10,%esp
f01235a1:	89 c2                	mov    %eax,%edx
f01235a3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01235a9:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01235ac:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01235b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01235b6:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f01235bc:	72 cc                	jb     f012358a <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01235be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01235c1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f01235c7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01235ce:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01235d5:	e9 ab 00 00 00       	jmp    f0123685 <test_kheap_phys_addr+0xb4e>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01235da:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01235df:	83 ec 04             	sub    $0x4,%esp
f01235e2:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f01235e8:	52                   	push   %edx
f01235e9:	ff 75 e0             	pushl  -0x20(%ebp)
f01235ec:	50                   	push   %eax
f01235ed:	e8 97 3e fe ff       	call   f0107489 <get_page_table>
f01235f2:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01235f5:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01235fb:	85 c0                	test   %eax,%eax
f01235fd:	75 17                	jne    f0123616 <test_kheap_phys_addr+0xadf>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01235ff:	83 ec 04             	sub    $0x4,%esp
f0123602:	68 b0 9a 13 f0       	push   $0xf0139ab0
f0123607:	68 59 08 00 00       	push   $0x859
f012360c:	68 0e 91 13 f0       	push   $0xf013910e
f0123611:	e8 9a cb fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123616:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123619:	c1 e8 0c             	shr    $0xc,%eax
f012361c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123621:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123624:	eb 4b                	jmp    f0123671 <test_kheap_phys_addr+0xb3a>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123626:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012362c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012362f:	c1 e2 02             	shl    $0x2,%edx
f0123632:	01 d0                	add    %edx,%eax
f0123634:	8b 00                	mov    (%eax),%eax
f0123636:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012363b:	89 c1                	mov    %eax,%ecx
f012363d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123643:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123646:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123649:	39 c1                	cmp    %eax,%ecx
f012364b:	74 17                	je     f0123664 <test_kheap_phys_addr+0xb2d>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012364d:	83 ec 04             	sub    $0x4,%esp
f0123650:	68 09 9b 13 f0       	push   $0xf0139b09
f0123655:	68 60 08 00 00       	push   $0x860
f012365a:	68 0e 91 13 f0       	push   $0xf013910e
f012365f:	e8 4c cb fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0123664:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012366b:	ff 45 dc             	incl   -0x24(%ebp)
f012366e:	ff 45 e4             	incl   -0x1c(%ebp)
f0123671:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123674:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f012367a:	7d 09                	jge    f0123685 <test_kheap_phys_addr+0xb4e>
f012367c:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0123683:	7e a1                	jle    f0123626 <test_kheap_phys_addr+0xaef>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123685:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123688:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f012368e:	0f 82 46 ff ff ff    	jb     f01235da <test_kheap_phys_addr+0xaa3>
f0123694:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123696:	83 ec 0c             	sub    $0xc,%esp
f0123699:	68 28 9b 13 f0       	push   $0xf0139b28
f012369e:	e8 8e d7 fd ff       	call   f0100e31 <cprintf>
f01236a3:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01236a6:	e8 d5 92 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01236ab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01236b1:	e8 70 0f fe ff       	call   f0104626 <pf_calculate_free_frames>
f01236b6:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f01236bc:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f01236c2:	83 ec 0c             	sub    $0xc,%esp
f01236c5:	50                   	push   %eax
f01236c6:	e8 50 48 fe ff       	call   f0107f1b <kfree>
f01236cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01236ce:	e8 53 0f fe ff       	call   f0104626 <pf_calculate_free_frames>
f01236d3:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01236d9:	74 17                	je     f01236f2 <test_kheap_phys_addr+0xbbb>
f01236db:	83 ec 04             	sub    $0x4,%esp
f01236de:	68 28 91 13 f0       	push   $0xf0139128
f01236e3:	68 6e 08 00 00       	push   $0x86e
f01236e8:	68 0e 91 13 f0       	push   $0xf013910e
f01236ed:	e8 be ca fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01236f2:	e8 89 92 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01236f7:	89 c2                	mov    %eax,%edx
f01236f9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01236ff:	29 c2                	sub    %eax,%edx
f0123701:	89 d0                	mov    %edx,%eax
f0123703:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123708:	74 17                	je     f0123721 <test_kheap_phys_addr+0xbea>
f012370a:	83 ec 04             	sub    $0x4,%esp
f012370d:	68 98 98 13 f0       	push   $0xf0139898
f0123712:	68 6f 08 00 00       	push   $0x86f
f0123717:	68 0e 91 13 f0       	push   $0xf013910e
f012371c:	e8 8f ca fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123721:	e8 5a 92 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123726:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012372c:	e8 f5 0e fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123731:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0123737:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012373d:	83 ec 0c             	sub    $0xc,%esp
f0123740:	50                   	push   %eax
f0123741:	e8 d5 47 fe ff       	call   f0107f1b <kfree>
f0123746:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123749:	e8 d8 0e fe ff       	call   f0104626 <pf_calculate_free_frames>
f012374e:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123754:	74 17                	je     f012376d <test_kheap_phys_addr+0xc36>
f0123756:	83 ec 04             	sub    $0x4,%esp
f0123759:	68 28 91 13 f0       	push   $0xf0139128
f012375e:	68 75 08 00 00       	push   $0x875
f0123763:	68 0e 91 13 f0       	push   $0xf013910e
f0123768:	e8 43 ca fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012376d:	e8 0e 92 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123772:	89 c2                	mov    %eax,%edx
f0123774:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012377a:	29 c2                	sub    %eax,%edx
f012377c:	89 d0                	mov    %edx,%eax
f012377e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123783:	74 17                	je     f012379c <test_kheap_phys_addr+0xc65>
f0123785:	83 ec 04             	sub    $0x4,%esp
f0123788:	68 98 98 13 f0       	push   $0xf0139898
f012378d:	68 76 08 00 00       	push   $0x876
f0123792:	68 0e 91 13 f0       	push   $0xf013910e
f0123797:	e8 14 ca fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012379c:	e8 df 91 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01237a1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237a7:	e8 7a 0e fe ff       	call   f0104626 <pf_calculate_free_frames>
f01237ac:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f01237b2:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01237b8:	83 ec 0c             	sub    $0xc,%esp
f01237bb:	50                   	push   %eax
f01237bc:	e8 5a 47 fe ff       	call   f0107f1b <kfree>
f01237c1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237c4:	e8 5d 0e fe ff       	call   f0104626 <pf_calculate_free_frames>
f01237c9:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01237cf:	74 17                	je     f01237e8 <test_kheap_phys_addr+0xcb1>
f01237d1:	83 ec 04             	sub    $0x4,%esp
f01237d4:	68 28 91 13 f0       	push   $0xf0139128
f01237d9:	68 7c 08 00 00       	push   $0x87c
f01237de:	68 0e 91 13 f0       	push   $0xf013910e
f01237e3:	e8 c8 c9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01237e8:	e8 93 91 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01237ed:	89 c2                	mov    %eax,%edx
f01237ef:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01237f5:	29 c2                	sub    %eax,%edx
f01237f7:	89 d0                	mov    %edx,%eax
f01237f9:	3d 00 06 00 00       	cmp    $0x600,%eax
f01237fe:	74 17                	je     f0123817 <test_kheap_phys_addr+0xce0>
f0123800:	83 ec 04             	sub    $0x4,%esp
f0123803:	68 98 98 13 f0       	push   $0xf0139898
f0123808:	68 7d 08 00 00       	push   $0x87d
f012380d:	68 0e 91 13 f0       	push   $0xf013910e
f0123812:	e8 99 c9 fd ff       	call   f01001b0 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123817:	89 e0                	mov    %esp,%eax
f0123819:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012381b:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123822:	10 00 00 
f0123825:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012382a:	0f b6 d0             	movzbl %al,%edx
f012382d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123833:	01 d0                	add    %edx,%eax
f0123835:	48                   	dec    %eax
f0123836:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012383c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123842:	ba 00 00 00 00       	mov    $0x0,%edx
f0123847:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012384d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123853:	29 d0                	sub    %edx,%eax
f0123855:	89 c1                	mov    %eax,%ecx
f0123857:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012385e:	10 00 00 
f0123861:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123866:	0f b6 c0             	movzbl %al,%eax
f0123869:	c1 e0 04             	shl    $0x4,%eax
f012386c:	89 c2                	mov    %eax,%edx
f012386e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123874:	01 d0                	add    %edx,%eax
f0123876:	48                   	dec    %eax
f0123877:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012387d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123883:	ba 00 00 00 00       	mov    $0x0,%edx
f0123888:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012388e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123894:	29 d0                	sub    %edx,%eax
f0123896:	01 c8                	add    %ecx,%eax
f0123898:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012389d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01238a3:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01238aa:	10 00 00 
f01238ad:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01238b2:	0f b6 d0             	movzbl %al,%edx
f01238b5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01238bb:	01 d0                	add    %edx,%eax
f01238bd:	48                   	dec    %eax
f01238be:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01238c4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01238ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01238cf:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01238d5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01238db:	29 d0                	sub    %edx,%eax
f01238dd:	89 c1                	mov    %eax,%ecx
f01238df:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01238e6:	10 00 00 
f01238e9:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01238ee:	0f b6 c0             	movzbl %al,%eax
f01238f1:	c1 e0 04             	shl    $0x4,%eax
f01238f4:	89 c2                	mov    %eax,%edx
f01238f6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01238fc:	01 d0                	add    %edx,%eax
f01238fe:	48                   	dec    %eax
f01238ff:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123905:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012390b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123910:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123916:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012391c:	29 d0                	sub    %edx,%eax
f012391e:	01 c8                	add    %ecx,%eax
f0123920:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123925:	c1 e8 0c             	shr    $0xc,%eax
f0123928:	89 c2                	mov    %eax,%edx
f012392a:	4a                   	dec    %edx
f012392b:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0123931:	c1 e0 02             	shl    $0x2,%eax
f0123934:	8d 50 03             	lea    0x3(%eax),%edx
f0123937:	b8 10 00 00 00       	mov    $0x10,%eax
f012393c:	48                   	dec    %eax
f012393d:	01 d0                	add    %edx,%eax
f012393f:	bf 10 00 00 00       	mov    $0x10,%edi
f0123944:	ba 00 00 00 00       	mov    $0x0,%edx
f0123949:	f7 f7                	div    %edi
f012394b:	6b c0 10             	imul   $0x10,%eax,%eax
f012394e:	29 c4                	sub    %eax,%esp
f0123950:	89 e0                	mov    %esp,%eax
f0123952:	83 c0 03             	add    $0x3,%eax
f0123955:	c1 e8 02             	shr    $0x2,%eax
f0123958:	c1 e0 02             	shl    $0x2,%eax
f012395b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f0123961:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123968:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f012396f:	eb 29                	jmp    f012399a <test_kheap_phys_addr+0xe63>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123971:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123974:	8d 43 01             	lea    0x1(%ebx),%eax
f0123977:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012397a:	83 ec 0c             	sub    $0xc,%esp
f012397d:	ff 75 d8             	pushl  -0x28(%ebp)
f0123980:	e8 ca 45 fe ff       	call   f0107f4f <kheap_physical_address>
f0123985:	83 c4 10             	add    $0x10,%esp
f0123988:	89 c2                	mov    %eax,%edx
f012398a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123990:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123993:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f012399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012399d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f01239a3:	72 cc                	jb     f0123971 <test_kheap_phys_addr+0xe3a>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01239a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01239a8:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f01239ae:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01239b5:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f01239bc:	e9 ab 00 00 00       	jmp    f0123a6c <test_kheap_phys_addr+0xf35>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01239c1:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f01239c6:	83 ec 04             	sub    $0x4,%esp
f01239c9:	8d 95 a4 fd ff ff    	lea    -0x25c(%ebp),%edx
f01239cf:	52                   	push   %edx
f01239d0:	ff 75 d8             	pushl  -0x28(%ebp)
f01239d3:	50                   	push   %eax
f01239d4:	e8 b0 3a fe ff       	call   f0107489 <get_page_table>
f01239d9:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01239dc:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01239e2:	85 c0                	test   %eax,%eax
f01239e4:	75 17                	jne    f01239fd <test_kheap_phys_addr+0xec6>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01239e6:	83 ec 04             	sub    $0x4,%esp
f01239e9:	68 b0 9a 13 f0       	push   $0xf0139ab0
f01239ee:	68 93 08 00 00       	push   $0x893
f01239f3:	68 0e 91 13 f0       	push   $0xf013910e
f01239f8:	e8 b3 c7 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01239fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123a00:	c1 e8 0c             	shr    $0xc,%eax
f0123a03:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123a08:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123a0b:	eb 4b                	jmp    f0123a58 <test_kheap_phys_addr+0xf21>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123a0d:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123a13:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123a16:	c1 e2 02             	shl    $0x2,%edx
f0123a19:	01 d0                	add    %edx,%eax
f0123a1b:	8b 00                	mov    (%eax),%eax
f0123a1d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123a22:	89 c1                	mov    %eax,%ecx
f0123a24:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123a2a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123a2d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123a30:	39 c1                	cmp    %eax,%ecx
f0123a32:	74 17                	je     f0123a4b <test_kheap_phys_addr+0xf14>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123a34:	83 ec 04             	sub    $0x4,%esp
f0123a37:	68 09 9b 13 f0       	push   $0xf0139b09
f0123a3c:	68 9a 08 00 00       	push   $0x89a
f0123a41:	68 0e 91 13 f0       	push   $0xf013910e
f0123a46:	e8 65 c7 fd ff       	call   f01001b0 <_panic>
				}
				va += PAGE_SIZE;
f0123a4b:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123a52:	ff 45 d4             	incl   -0x2c(%ebp)
f0123a55:	ff 45 e4             	incl   -0x1c(%ebp)
f0123a58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123a5b:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0123a61:	7d 09                	jge    f0123a6c <test_kheap_phys_addr+0xf35>
f0123a63:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0123a6a:	7e a1                	jle    f0123a0d <test_kheap_phys_addr+0xed6>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123a6c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123a6f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123a75:	0f 82 46 ff ff ff    	jb     f01239c1 <test_kheap_phys_addr+0xe8a>
f0123a7b:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0123a7d:	83 ec 0c             	sub    $0xc,%esp
f0123a80:	68 99 92 13 f0       	push   $0xf0139299
f0123a85:	e8 a7 d3 fd ff       	call   f0100e31 <cprintf>
f0123a8a:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0123a8d:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0123a94:	10 00 00 
f0123a97:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123a9c:	0f b6 d0             	movzbl %al,%edx
f0123a9f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123aa5:	01 d0                	add    %edx,%eax
f0123aa7:	48                   	dec    %eax
f0123aa8:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0123aae:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123ab4:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ab9:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0123abf:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123ac5:	29 d0                	sub    %edx,%eax
f0123ac7:	89 c1                	mov    %eax,%ecx
f0123ac9:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0123ad0:	10 00 00 
f0123ad3:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123ad8:	0f b6 c0             	movzbl %al,%eax
f0123adb:	c1 e0 04             	shl    $0x4,%eax
f0123ade:	89 c2                	mov    %eax,%edx
f0123ae0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123ae6:	01 d0                	add    %edx,%eax
f0123ae8:	48                   	dec    %eax
f0123ae9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0123aef:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123af5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123afa:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0123b00:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123b06:	29 d0                	sub    %edx,%eax
f0123b08:	01 c8                	add    %ecx,%eax
f0123b0a:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0123b0f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123b15:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123b1c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123b22:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0123b25:	eb 0a                	jmp    f0123b31 <test_kheap_phys_addr+0xffa>
		{
			i++;
f0123b27:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123b2a:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0123b31:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0123b38:	76 ed                	jbe    f0123b27 <test_kheap_phys_addr+0xff0>
		{
			i++;
		}
		int ii = i ;
f0123b3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123b3d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0123b43:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123b4a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123b50:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0123b53:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0123b5a:	e9 cc 00 00 00       	jmp    f0123c2b <test_kheap_phys_addr+0x10f4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0123b5f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123b62:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0123b67:	83 ec 04             	sub    $0x4,%esp
f0123b6a:	8d 8d a0 fd ff ff    	lea    -0x260(%ebp),%ecx
f0123b70:	51                   	push   %ecx
f0123b71:	52                   	push   %edx
f0123b72:	50                   	push   %eax
f0123b73:	e8 11 39 fe ff       	call   f0107489 <get_page_table>
f0123b78:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123b7b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123b81:	85 c0                	test   %eax,%eax
f0123b83:	75 17                	jne    f0123b9c <test_kheap_phys_addr+0x1065>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123b85:	83 ec 04             	sub    $0x4,%esp
f0123b88:	68 b0 9a 13 f0       	push   $0xf0139ab0
f0123b8d:	68 b6 08 00 00       	push   $0x8b6
f0123b92:	68 0e 91 13 f0       	push   $0xf013910e
f0123b97:	e8 14 c6 fd ff       	call   f01001b0 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123b9c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123ba3:	eb 67                	jmp    f0123c0c <test_kheap_phys_addr+0x10d5>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123ba5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123ba8:	c1 e0 0c             	shl    $0xc,%eax
f0123bab:	89 c2                	mov    %eax,%edx
f0123bad:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123bb3:	01 d0                	add    %edx,%eax
f0123bb5:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0123bbb:	83 ec 0c             	sub    $0xc,%esp
f0123bbe:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0123bc4:	e8 86 43 fe ff       	call   f0107f4f <kheap_physical_address>
f0123bc9:	83 c4 10             	add    $0x10,%esp
f0123bcc:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0123bd2:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123bd8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0123bdb:	c1 e2 02             	shl    $0x2,%edx
f0123bde:	01 d0                	add    %edx,%eax
f0123be0:	8b 00                	mov    (%eax),%eax
f0123be2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123be7:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123bed:	74 17                	je     f0123c06 <test_kheap_phys_addr+0x10cf>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123bef:	83 ec 04             	sub    $0x4,%esp
f0123bf2:	68 09 9b 13 f0       	push   $0xf0139b09
f0123bf7:	68 c0 08 00 00       	push   $0x8c0
f0123bfc:	68 0e 91 13 f0       	push   $0xf013910e
f0123c01:	e8 aa c5 fd ff       	call   f01001b0 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123c06:	ff 45 cc             	incl   -0x34(%ebp)
f0123c09:	ff 45 e4             	incl   -0x1c(%ebp)
f0123c0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c0f:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0123c15:	7d 09                	jge    f0123c20 <test_kheap_phys_addr+0x10e9>
f0123c17:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0123c1e:	7e 85                	jle    f0123ba5 <test_kheap_phys_addr+0x106e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123c20:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0123c27:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0123c2b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123c2f:	0f 88 2a ff ff ff    	js     f0123b5f <test_kheap_phys_addr+0x1028>
f0123c35:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123c39:	7f 0d                	jg     f0123c48 <test_kheap_phys_addr+0x1111>
f0123c3b:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0123c42:	0f 86 17 ff ff ff    	jbe    f0123b5f <test_kheap_phys_addr+0x1028>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0123c48:	83 ec 0c             	sub    $0xc,%esp
f0123c4b:	68 f2 92 13 f0       	push   $0xf01392f2
f0123c50:	e8 dc d1 fd ff       	call   f0100e31 <cprintf>
f0123c55:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0123c58:	83 ec 0c             	sub    $0xc,%esp
f0123c5b:	68 5c 9b 13 f0       	push   $0xf0139b5c
f0123c60:	e8 cc d1 fd ff       	call   f0100e31 <cprintf>
f0123c65:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123c68:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123c6d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0123c70:	5b                   	pop    %ebx
f0123c71:	5e                   	pop    %esi
f0123c72:	5f                   	pop    %edi
f0123c73:	5d                   	pop    %ebp
f0123c74:	c3                   	ret    

f0123c75 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123c75:	55                   	push   %ebp
f0123c76:	89 e5                	mov    %esp,%ebp
f0123c78:	57                   	push   %edi
f0123c79:	56                   	push   %esi
f0123c7a:	53                   	push   %ebx
f0123c7b:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0123c81:	89 e0                	mov    %esp,%eax
f0123c83:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123c85:	83 ec 0c             	sub    $0xc,%esp
f0123c88:	68 50 90 13 f0       	push   $0xf0139050
f0123c8d:	e8 9f d1 fd ff       	call   f0100e31 <cprintf>
f0123c92:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123c95:	83 ec 0c             	sub    $0xc,%esp
f0123c98:	68 80 90 13 f0       	push   $0xf0139080
f0123c9d:	e8 8f d1 fd ff       	call   f0100e31 <cprintf>
f0123ca2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123ca5:	83 ec 0c             	sub    $0xc,%esp
f0123ca8:	68 50 90 13 f0       	push   $0xf0139050
f0123cad:	e8 7f d1 fd ff       	call   f0100e31 <cprintf>
f0123cb2:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123cb5:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0123cb9:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0123cbd:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0123cc3:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0123cc9:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123cd0:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123cd7:	e8 a4 8c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123cdc:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123cdf:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0123ce5:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123cea:	b8 00 00 00 00       	mov    $0x0,%eax
f0123cef:	89 d7                	mov    %edx,%edi
f0123cf1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123cf3:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0123cf9:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123cfe:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d03:	89 d7                	mov    %edx,%edi
f0123d05:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123d07:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f0123d0d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d12:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d17:	89 d7                	mov    %edx,%edi
f0123d19:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123d1b:	e8 60 8c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123d20:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d23:	e8 fe 08 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123d28:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123d2b:	83 ec 0c             	sub    $0xc,%esp
f0123d2e:	68 00 fc 1f 00       	push   $0x1ffc00
f0123d33:	e8 c9 41 fe ff       	call   f0107f01 <kmalloc>
f0123d38:	83 c4 10             	add    $0x10,%esp
f0123d3b:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123d41:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0123d47:	89 c1                	mov    %eax,%ecx
f0123d49:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0123d50:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123d55:	0f b6 d0             	movzbl %al,%edx
f0123d58:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0123d5b:	01 d0                	add    %edx,%eax
f0123d5d:	48                   	dec    %eax
f0123d5e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0123d61:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123d64:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d69:	f7 75 b4             	divl   -0x4c(%ebp)
f0123d6c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123d6f:	29 d0                	sub    %edx,%eax
f0123d71:	89 c3                	mov    %eax,%ebx
f0123d73:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0123d7a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123d7f:	0f b6 c0             	movzbl %al,%eax
f0123d82:	c1 e0 04             	shl    $0x4,%eax
f0123d85:	89 c2                	mov    %eax,%edx
f0123d87:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0123d8a:	01 d0                	add    %edx,%eax
f0123d8c:	48                   	dec    %eax
f0123d8d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0123d90:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123d93:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d98:	f7 75 ac             	divl   -0x54(%ebp)
f0123d9b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123d9e:	29 d0                	sub    %edx,%eax
f0123da0:	01 d8                	add    %ebx,%eax
f0123da2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123da7:	39 c1                	cmp    %eax,%ecx
f0123da9:	74 17                	je     f0123dc2 <test_kheap_virt_addr+0x14d>
f0123dab:	83 ec 04             	sub    $0x4,%esp
f0123dae:	68 f4 91 13 f0       	push   $0xf01391f4
f0123db3:	68 ed 08 00 00       	push   $0x8ed
f0123db8:	68 0e 91 13 f0       	push   $0xf013910e
f0123dbd:	e8 ee c3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123dc2:	e8 5f 08 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123dc7:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123dca:	74 17                	je     f0123de3 <test_kheap_virt_addr+0x16e>
f0123dcc:	83 ec 04             	sub    $0x4,%esp
f0123dcf:	68 28 91 13 f0       	push   $0xf0139128
f0123dd4:	68 ee 08 00 00       	push   $0x8ee
f0123dd9:	68 0e 91 13 f0       	push   $0xf013910e
f0123dde:	e8 cd c3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123de3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123de6:	e8 95 8b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123deb:	29 c3                	sub    %eax,%ebx
f0123ded:	89 d8                	mov    %ebx,%eax
f0123def:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123df4:	74 17                	je     f0123e0d <test_kheap_virt_addr+0x198>
f0123df6:	83 ec 04             	sub    $0x4,%esp
f0123df9:	68 90 91 13 f0       	push   $0xf0139190
f0123dfe:	68 ef 08 00 00       	push   $0x8ef
f0123e03:	68 0e 91 13 f0       	push   $0xf013910e
f0123e08:	e8 a3 c3 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123e0d:	e8 6e 8b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123e12:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e15:	e8 0c 08 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123e1a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123e1d:	83 ec 0c             	sub    $0xc,%esp
f0123e20:	68 00 fc 1f 00       	push   $0x1ffc00
f0123e25:	e8 d7 40 fe ff       	call   f0107f01 <kmalloc>
f0123e2a:	83 c4 10             	add    $0x10,%esp
f0123e2d:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123e33:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123e39:	89 c1                	mov    %eax,%ecx
f0123e3b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0123e42:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123e47:	0f b6 d0             	movzbl %al,%edx
f0123e4a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0123e4d:	01 d0                	add    %edx,%eax
f0123e4f:	48                   	dec    %eax
f0123e50:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0123e53:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123e56:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e5b:	f7 75 a4             	divl   -0x5c(%ebp)
f0123e5e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123e61:	29 d0                	sub    %edx,%eax
f0123e63:	89 c3                	mov    %eax,%ebx
f0123e65:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0123e6c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123e71:	0f b6 c0             	movzbl %al,%eax
f0123e74:	c1 e0 04             	shl    $0x4,%eax
f0123e77:	89 c2                	mov    %eax,%edx
f0123e79:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123e7c:	01 d0                	add    %edx,%eax
f0123e7e:	48                   	dec    %eax
f0123e7f:	89 45 98             	mov    %eax,-0x68(%ebp)
f0123e82:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123e85:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e8a:	f7 75 9c             	divl   -0x64(%ebp)
f0123e8d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123e90:	29 d0                	sub    %edx,%eax
f0123e92:	01 d8                	add    %ebx,%eax
f0123e94:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123e99:	39 c1                	cmp    %eax,%ecx
f0123e9b:	74 17                	je     f0123eb4 <test_kheap_virt_addr+0x23f>
f0123e9d:	83 ec 04             	sub    $0x4,%esp
f0123ea0:	68 f4 91 13 f0       	push   $0xf01391f4
f0123ea5:	68 f5 08 00 00       	push   $0x8f5
f0123eaa:	68 0e 91 13 f0       	push   $0xf013910e
f0123eaf:	e8 fc c2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123eb4:	e8 6d 07 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123eb9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123ebc:	74 17                	je     f0123ed5 <test_kheap_virt_addr+0x260>
f0123ebe:	83 ec 04             	sub    $0x4,%esp
f0123ec1:	68 28 91 13 f0       	push   $0xf0139128
f0123ec6:	68 f6 08 00 00       	push   $0x8f6
f0123ecb:	68 0e 91 13 f0       	push   $0xf013910e
f0123ed0:	e8 db c2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123ed5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123ed8:	e8 a3 8a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123edd:	29 c3                	sub    %eax,%ebx
f0123edf:	89 d8                	mov    %ebx,%eax
f0123ee1:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123ee6:	74 17                	je     f0123eff <test_kheap_virt_addr+0x28a>
f0123ee8:	83 ec 04             	sub    $0x4,%esp
f0123eeb:	68 90 91 13 f0       	push   $0xf0139190
f0123ef0:	68 f7 08 00 00       	push   $0x8f7
f0123ef5:	68 0e 91 13 f0       	push   $0xf013910e
f0123efa:	e8 b1 c2 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123eff:	e8 7c 8a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123f04:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f07:	e8 1a 07 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123f0c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123f0f:	83 ec 0c             	sub    $0xc,%esp
f0123f12:	68 00 08 00 00       	push   $0x800
f0123f17:	e8 e5 3f fe ff       	call   f0107f01 <kmalloc>
f0123f1c:	83 c4 10             	add    $0x10,%esp
f0123f1f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f25:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123f2b:	89 c1                	mov    %eax,%ecx
f0123f2d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0123f34:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123f39:	0f b6 d0             	movzbl %al,%edx
f0123f3c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123f3f:	01 d0                	add    %edx,%eax
f0123f41:	48                   	dec    %eax
f0123f42:	89 45 90             	mov    %eax,-0x70(%ebp)
f0123f45:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123f48:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f4d:	f7 75 94             	divl   -0x6c(%ebp)
f0123f50:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123f53:	29 d0                	sub    %edx,%eax
f0123f55:	89 c3                	mov    %eax,%ebx
f0123f57:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0123f5e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0123f63:	0f b6 c0             	movzbl %al,%eax
f0123f66:	c1 e0 04             	shl    $0x4,%eax
f0123f69:	89 c2                	mov    %eax,%edx
f0123f6b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123f6e:	01 d0                	add    %edx,%eax
f0123f70:	48                   	dec    %eax
f0123f71:	89 45 88             	mov    %eax,-0x78(%ebp)
f0123f74:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123f77:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f7c:	f7 75 8c             	divl   -0x74(%ebp)
f0123f7f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123f82:	29 d0                	sub    %edx,%eax
f0123f84:	01 d8                	add    %ebx,%eax
f0123f86:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123f8b:	39 c1                	cmp    %eax,%ecx
f0123f8d:	74 17                	je     f0123fa6 <test_kheap_virt_addr+0x331>
f0123f8f:	83 ec 04             	sub    $0x4,%esp
f0123f92:	68 f4 91 13 f0       	push   $0xf01391f4
f0123f97:	68 fd 08 00 00       	push   $0x8fd
f0123f9c:	68 0e 91 13 f0       	push   $0xf013910e
f0123fa1:	e8 0a c2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123fa6:	e8 7b 06 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123fab:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123fae:	74 17                	je     f0123fc7 <test_kheap_virt_addr+0x352>
f0123fb0:	83 ec 04             	sub    $0x4,%esp
f0123fb3:	68 28 91 13 f0       	push   $0xf0139128
f0123fb8:	68 fe 08 00 00       	push   $0x8fe
f0123fbd:	68 0e 91 13 f0       	push   $0xf013910e
f0123fc2:	e8 e9 c1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123fc7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123fca:	e8 b1 89 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123fcf:	29 c3                	sub    %eax,%ebx
f0123fd1:	89 d8                	mov    %ebx,%eax
f0123fd3:	83 f8 01             	cmp    $0x1,%eax
f0123fd6:	74 17                	je     f0123fef <test_kheap_virt_addr+0x37a>
f0123fd8:	83 ec 04             	sub    $0x4,%esp
f0123fdb:	68 90 91 13 f0       	push   $0xf0139190
f0123fe0:	68 ff 08 00 00       	push   $0x8ff
f0123fe5:	68 0e 91 13 f0       	push   $0xf013910e
f0123fea:	e8 c1 c1 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123fef:	e8 8c 89 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0123ff4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ff7:	e8 2a 06 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0123ffc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123fff:	83 ec 0c             	sub    $0xc,%esp
f0124002:	68 00 08 00 00       	push   $0x800
f0124007:	e8 f5 3e fe ff       	call   f0107f01 <kmalloc>
f012400c:	83 c4 10             	add    $0x10,%esp
f012400f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124015:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012401b:	89 c1                	mov    %eax,%ecx
f012401d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124024:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124029:	0f b6 d0             	movzbl %al,%edx
f012402c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012402f:	01 d0                	add    %edx,%eax
f0124031:	48                   	dec    %eax
f0124032:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124035:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124038:	ba 00 00 00 00       	mov    $0x0,%edx
f012403d:	f7 75 84             	divl   -0x7c(%ebp)
f0124040:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124043:	29 d0                	sub    %edx,%eax
f0124045:	89 c3                	mov    %eax,%ebx
f0124047:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012404e:	10 00 00 
f0124051:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124056:	0f b6 c0             	movzbl %al,%eax
f0124059:	c1 e0 04             	shl    $0x4,%eax
f012405c:	89 c2                	mov    %eax,%edx
f012405e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124064:	01 d0                	add    %edx,%eax
f0124066:	48                   	dec    %eax
f0124067:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012406d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124073:	ba 00 00 00 00       	mov    $0x0,%edx
f0124078:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012407e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124084:	29 d0                	sub    %edx,%eax
f0124086:	01 d8                	add    %ebx,%eax
f0124088:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012408d:	39 c1                	cmp    %eax,%ecx
f012408f:	74 17                	je     f01240a8 <test_kheap_virt_addr+0x433>
f0124091:	83 ec 04             	sub    $0x4,%esp
f0124094:	68 f4 91 13 f0       	push   $0xf01391f4
f0124099:	68 05 09 00 00       	push   $0x905
f012409e:	68 0e 91 13 f0       	push   $0xf013910e
f01240a3:	e8 08 c1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01240a8:	e8 79 05 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01240ad:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01240b0:	74 17                	je     f01240c9 <test_kheap_virt_addr+0x454>
f01240b2:	83 ec 04             	sub    $0x4,%esp
f01240b5:	68 28 91 13 f0       	push   $0xf0139128
f01240ba:	68 06 09 00 00       	push   $0x906
f01240bf:	68 0e 91 13 f0       	push   $0xf013910e
f01240c4:	e8 e7 c0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01240c9:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01240cc:	e8 af 88 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01240d1:	29 c3                	sub    %eax,%ebx
f01240d3:	89 d8                	mov    %ebx,%eax
f01240d5:	83 f8 01             	cmp    $0x1,%eax
f01240d8:	74 17                	je     f01240f1 <test_kheap_virt_addr+0x47c>
f01240da:	83 ec 04             	sub    $0x4,%esp
f01240dd:	68 90 91 13 f0       	push   $0xf0139190
f01240e2:	68 07 09 00 00       	push   $0x907
f01240e7:	68 0e 91 13 f0       	push   $0xf013910e
f01240ec:	e8 bf c0 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01240f1:	e8 8a 88 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01240f6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01240f9:	e8 28 05 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01240fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124101:	83 ec 0c             	sub    $0xc,%esp
f0124104:	68 00 1c 00 00       	push   $0x1c00
f0124109:	e8 f3 3d fe ff       	call   f0107f01 <kmalloc>
f012410e:	83 c4 10             	add    $0x10,%esp
f0124111:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124117:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012411d:	89 c1                	mov    %eax,%ecx
f012411f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124126:	10 00 00 
f0124129:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012412e:	0f b6 d0             	movzbl %al,%edx
f0124131:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124137:	01 d0                	add    %edx,%eax
f0124139:	48                   	dec    %eax
f012413a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124140:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124146:	ba 00 00 00 00       	mov    $0x0,%edx
f012414b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124151:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124157:	29 d0                	sub    %edx,%eax
f0124159:	89 c3                	mov    %eax,%ebx
f012415b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0124162:	10 00 00 
f0124165:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012416a:	0f b6 c0             	movzbl %al,%eax
f012416d:	c1 e0 04             	shl    $0x4,%eax
f0124170:	89 c2                	mov    %eax,%edx
f0124172:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124178:	01 d0                	add    %edx,%eax
f012417a:	48                   	dec    %eax
f012417b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0124181:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124187:	ba 00 00 00 00       	mov    $0x0,%edx
f012418c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0124192:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124198:	29 d0                	sub    %edx,%eax
f012419a:	01 d8                	add    %ebx,%eax
f012419c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01241a1:	39 c1                	cmp    %eax,%ecx
f01241a3:	74 17                	je     f01241bc <test_kheap_virt_addr+0x547>
f01241a5:	83 ec 04             	sub    $0x4,%esp
f01241a8:	68 f4 91 13 f0       	push   $0xf01391f4
f01241ad:	68 0d 09 00 00       	push   $0x90d
f01241b2:	68 0e 91 13 f0       	push   $0xf013910e
f01241b7:	e8 f4 bf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241bc:	e8 65 04 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01241c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01241c4:	74 17                	je     f01241dd <test_kheap_virt_addr+0x568>
f01241c6:	83 ec 04             	sub    $0x4,%esp
f01241c9:	68 28 91 13 f0       	push   $0xf0139128
f01241ce:	68 0e 09 00 00       	push   $0x90e
f01241d3:	68 0e 91 13 f0       	push   $0xf013910e
f01241d8:	e8 d3 bf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01241dd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01241e0:	e8 9b 87 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01241e5:	29 c3                	sub    %eax,%ebx
f01241e7:	89 d8                	mov    %ebx,%eax
f01241e9:	83 f8 02             	cmp    $0x2,%eax
f01241ec:	74 17                	je     f0124205 <test_kheap_virt_addr+0x590>
f01241ee:	83 ec 04             	sub    $0x4,%esp
f01241f1:	68 90 91 13 f0       	push   $0xf0139190
f01241f6:	68 0f 09 00 00       	push   $0x90f
f01241fb:	68 0e 91 13 f0       	push   $0xf013910e
f0124200:	e8 ab bf fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124205:	e8 76 87 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012420a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012420d:	e8 14 04 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0124212:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124215:	83 ec 0c             	sub    $0xc,%esp
f0124218:	68 00 fc 2f 00       	push   $0x2ffc00
f012421d:	e8 df 3c fe ff       	call   f0107f01 <kmalloc>
f0124222:	83 c4 10             	add    $0x10,%esp
f0124225:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012422b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0124231:	89 c1                	mov    %eax,%ecx
f0124233:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012423a:	10 00 00 
f012423d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124242:	0f b6 d0             	movzbl %al,%edx
f0124245:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012424b:	01 d0                	add    %edx,%eax
f012424d:	48                   	dec    %eax
f012424e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124254:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012425a:	ba 00 00 00 00       	mov    $0x0,%edx
f012425f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124265:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012426b:	29 d0                	sub    %edx,%eax
f012426d:	89 c3                	mov    %eax,%ebx
f012426f:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124276:	10 00 00 
f0124279:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012427e:	0f b6 c0             	movzbl %al,%eax
f0124281:	c1 e0 04             	shl    $0x4,%eax
f0124284:	89 c2                	mov    %eax,%edx
f0124286:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012428c:	01 d0                	add    %edx,%eax
f012428e:	48                   	dec    %eax
f012428f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124295:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012429b:	ba 00 00 00 00       	mov    $0x0,%edx
f01242a0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01242a6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01242ac:	29 d0                	sub    %edx,%eax
f01242ae:	01 d8                	add    %ebx,%eax
f01242b0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01242b5:	39 c1                	cmp    %eax,%ecx
f01242b7:	74 17                	je     f01242d0 <test_kheap_virt_addr+0x65b>
f01242b9:	83 ec 04             	sub    $0x4,%esp
f01242bc:	68 f4 91 13 f0       	push   $0xf01391f4
f01242c1:	68 15 09 00 00       	push   $0x915
f01242c6:	68 0e 91 13 f0       	push   $0xf013910e
f01242cb:	e8 e0 be fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01242d0:	e8 51 03 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01242d5:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01242d8:	74 17                	je     f01242f1 <test_kheap_virt_addr+0x67c>
f01242da:	83 ec 04             	sub    $0x4,%esp
f01242dd:	68 28 91 13 f0       	push   $0xf0139128
f01242e2:	68 16 09 00 00       	push   $0x916
f01242e7:	68 0e 91 13 f0       	push   $0xf013910e
f01242ec:	e8 bf be fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01242f1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01242f4:	e8 87 86 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01242f9:	29 c3                	sub    %eax,%ebx
f01242fb:	89 d8                	mov    %ebx,%eax
f01242fd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124302:	74 17                	je     f012431b <test_kheap_virt_addr+0x6a6>
f0124304:	83 ec 04             	sub    $0x4,%esp
f0124307:	68 90 91 13 f0       	push   $0xf0139190
f012430c:	68 17 09 00 00       	push   $0x917
f0124311:	68 0e 91 13 f0       	push   $0xf013910e
f0124316:	e8 95 be fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012431b:	e8 60 86 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0124320:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124323:	e8 fe 02 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0124328:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012432b:	83 ec 0c             	sub    $0xc,%esp
f012432e:	68 00 fc 5f 00       	push   $0x5ffc00
f0124333:	e8 c9 3b fe ff       	call   f0107f01 <kmalloc>
f0124338:	83 c4 10             	add    $0x10,%esp
f012433b:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124341:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124347:	89 c1                	mov    %eax,%ecx
f0124349:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124350:	10 00 00 
f0124353:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124358:	0f b6 d0             	movzbl %al,%edx
f012435b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124361:	01 d0                	add    %edx,%eax
f0124363:	48                   	dec    %eax
f0124364:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012436a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124370:	ba 00 00 00 00       	mov    $0x0,%edx
f0124375:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012437b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124381:	29 d0                	sub    %edx,%eax
f0124383:	89 c3                	mov    %eax,%ebx
f0124385:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012438c:	10 00 00 
f012438f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124394:	0f b6 c0             	movzbl %al,%eax
f0124397:	c1 e0 04             	shl    $0x4,%eax
f012439a:	89 c2                	mov    %eax,%edx
f012439c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01243a2:	01 d0                	add    %edx,%eax
f01243a4:	48                   	dec    %eax
f01243a5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01243ab:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01243b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01243b6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01243bc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01243c2:	29 d0                	sub    %edx,%eax
f01243c4:	01 d8                	add    %ebx,%eax
f01243c6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01243cb:	39 c1                	cmp    %eax,%ecx
f01243cd:	74 17                	je     f01243e6 <test_kheap_virt_addr+0x771>
f01243cf:	83 ec 04             	sub    $0x4,%esp
f01243d2:	68 f4 91 13 f0       	push   $0xf01391f4
f01243d7:	68 1d 09 00 00       	push   $0x91d
f01243dc:	68 0e 91 13 f0       	push   $0xf013910e
f01243e1:	e8 ca bd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243e6:	e8 3b 02 fe ff       	call   f0104626 <pf_calculate_free_frames>
f01243eb:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01243ee:	74 17                	je     f0124407 <test_kheap_virt_addr+0x792>
f01243f0:	83 ec 04             	sub    $0x4,%esp
f01243f3:	68 28 91 13 f0       	push   $0xf0139128
f01243f8:	68 1e 09 00 00       	push   $0x91e
f01243fd:	68 0e 91 13 f0       	push   $0xf013910e
f0124402:	e8 a9 bd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124407:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012440a:	e8 71 85 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012440f:	29 c3                	sub    %eax,%ebx
f0124411:	89 d8                	mov    %ebx,%eax
f0124413:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124418:	74 17                	je     f0124431 <test_kheap_virt_addr+0x7bc>
f012441a:	83 ec 04             	sub    $0x4,%esp
f012441d:	68 90 91 13 f0       	push   $0xf0139190
f0124422:	68 1f 09 00 00       	push   $0x91f
f0124427:	68 0e 91 13 f0       	push   $0xf013910e
f012442c:	e8 7f bd fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124431:	e8 4a 85 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0124436:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124439:	e8 e8 01 fe ff       	call   f0104626 <pf_calculate_free_frames>
f012443e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124441:	83 ec 0c             	sub    $0xc,%esp
f0124444:	68 00 38 00 00       	push   $0x3800
f0124449:	e8 b3 3a fe ff       	call   f0107f01 <kmalloc>
f012444e:	83 c4 10             	add    $0x10,%esp
f0124451:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124457:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012445d:	89 c1                	mov    %eax,%ecx
f012445f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124466:	10 00 00 
f0124469:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012446e:	0f b6 d0             	movzbl %al,%edx
f0124471:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124477:	01 d0                	add    %edx,%eax
f0124479:	48                   	dec    %eax
f012447a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124480:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124486:	ba 00 00 00 00       	mov    $0x0,%edx
f012448b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124491:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124497:	29 d0                	sub    %edx,%eax
f0124499:	89 c3                	mov    %eax,%ebx
f012449b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01244a2:	10 00 00 
f01244a5:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01244aa:	0f b6 c0             	movzbl %al,%eax
f01244ad:	c1 e0 04             	shl    $0x4,%eax
f01244b0:	89 c2                	mov    %eax,%edx
f01244b2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01244b8:	01 d0                	add    %edx,%eax
f01244ba:	48                   	dec    %eax
f01244bb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01244c1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01244c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01244cc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01244d2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01244d8:	29 d0                	sub    %edx,%eax
f01244da:	01 d8                	add    %ebx,%eax
f01244dc:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01244e1:	39 c1                	cmp    %eax,%ecx
f01244e3:	74 17                	je     f01244fc <test_kheap_virt_addr+0x887>
f01244e5:	83 ec 04             	sub    $0x4,%esp
f01244e8:	68 f4 91 13 f0       	push   $0xf01391f4
f01244ed:	68 25 09 00 00       	push   $0x925
f01244f2:	68 0e 91 13 f0       	push   $0xf013910e
f01244f7:	e8 b4 bc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01244fc:	e8 25 01 fe ff       	call   f0104626 <pf_calculate_free_frames>
f0124501:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124504:	74 17                	je     f012451d <test_kheap_virt_addr+0x8a8>
f0124506:	83 ec 04             	sub    $0x4,%esp
f0124509:	68 28 91 13 f0       	push   $0xf0139128
f012450e:	68 26 09 00 00       	push   $0x926
f0124513:	68 0e 91 13 f0       	push   $0xf013910e
f0124518:	e8 93 bc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012451d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124520:	e8 5b 84 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0124525:	29 c3                	sub    %eax,%ebx
f0124527:	89 d8                	mov    %ebx,%eax
f0124529:	83 f8 04             	cmp    $0x4,%eax
f012452c:	74 17                	je     f0124545 <test_kheap_virt_addr+0x8d0>
f012452e:	83 ec 04             	sub    $0x4,%esp
f0124531:	68 90 91 13 f0       	push   $0xf0139190
f0124536:	68 27 09 00 00       	push   $0x927
f012453b:	68 0e 91 13 f0       	push   $0xf013910e
f0124540:	e8 6b bc fd ff       	call   f01001b0 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124545:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012454c:	10 00 00 
f012454f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124554:	0f b6 d0             	movzbl %al,%edx
f0124557:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012455d:	01 d0                	add    %edx,%eax
f012455f:	48                   	dec    %eax
f0124560:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124566:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012456c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124571:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124577:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012457d:	29 d0                	sub    %edx,%eax
f012457f:	89 c1                	mov    %eax,%ecx
f0124581:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124588:	10 00 00 
f012458b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124590:	0f b6 c0             	movzbl %al,%eax
f0124593:	c1 e0 04             	shl    $0x4,%eax
f0124596:	89 c2                	mov    %eax,%edx
f0124598:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012459e:	01 d0                	add    %edx,%eax
f01245a0:	48                   	dec    %eax
f01245a1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01245a7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01245ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01245b2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01245b8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01245be:	29 d0                	sub    %edx,%eax
f01245c0:	01 c8                	add    %ecx,%eax
f01245c2:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01245c7:	c1 e8 0c             	shr    $0xc,%eax
f01245ca:	89 c2                	mov    %eax,%edx
f01245cc:	4a                   	dec    %edx
f01245cd:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f01245d3:	c1 e0 02             	shl    $0x2,%eax
f01245d6:	8d 50 03             	lea    0x3(%eax),%edx
f01245d9:	b8 10 00 00 00       	mov    $0x10,%eax
f01245de:	48                   	dec    %eax
f01245df:	01 d0                	add    %edx,%eax
f01245e1:	bf 10 00 00 00       	mov    $0x10,%edi
f01245e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01245eb:	f7 f7                	div    %edi
f01245ed:	6b c0 10             	imul   $0x10,%eax,%eax
f01245f0:	29 c4                	sub    %eax,%esp
f01245f2:	89 e0                	mov    %esp,%eax
f01245f4:	83 c0 03             	add    $0x3,%eax
f01245f7:	c1 e8 02             	shr    $0x2,%eax
f01245fa:	c1 e0 02             	shl    $0x2,%eax
f01245fd:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124603:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012460a:	10 00 00 
f012460d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124612:	0f b6 d0             	movzbl %al,%edx
f0124615:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012461b:	01 d0                	add    %edx,%eax
f012461d:	48                   	dec    %eax
f012461e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124624:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012462a:	ba 00 00 00 00       	mov    $0x0,%edx
f012462f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124635:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012463b:	29 d0                	sub    %edx,%eax
f012463d:	89 c1                	mov    %eax,%ecx
f012463f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124646:	10 00 00 
f0124649:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012464e:	0f b6 c0             	movzbl %al,%eax
f0124651:	c1 e0 04             	shl    $0x4,%eax
f0124654:	89 c2                	mov    %eax,%edx
f0124656:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012465c:	01 d0                	add    %edx,%eax
f012465e:	48                   	dec    %eax
f012465f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124665:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012466b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124670:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124676:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012467c:	29 d0                	sub    %edx,%eax
f012467e:	01 c8                	add    %ecx,%eax
f0124680:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124685:	c1 e8 0c             	shr    $0xc,%eax
f0124688:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012468e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124695:	10 00 00 
f0124698:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012469d:	0f b6 d0             	movzbl %al,%edx
f01246a0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01246a6:	01 d0                	add    %edx,%eax
f01246a8:	48                   	dec    %eax
f01246a9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01246af:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01246b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01246ba:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01246c0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01246c6:	29 d0                	sub    %edx,%eax
f01246c8:	89 c1                	mov    %eax,%ecx
f01246ca:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01246d1:	10 00 00 
f01246d4:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01246d9:	0f b6 c0             	movzbl %al,%eax
f01246dc:	c1 e0 04             	shl    $0x4,%eax
f01246df:	89 c2                	mov    %eax,%edx
f01246e1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01246e7:	01 d0                	add    %edx,%eax
f01246e9:	48                   	dec    %eax
f01246ea:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01246f0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01246f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01246fb:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124701:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124707:	29 d0                	sub    %edx,%eax
f0124709:	01 c8                	add    %ecx,%eax
f012470b:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124710:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0124716:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012471d:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0124724:	e9 21 01 00 00       	jmp    f012484a <test_kheap_virt_addr+0xbd5>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124729:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012472e:	83 ec 04             	sub    $0x4,%esp
f0124731:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0124737:	52                   	push   %edx
f0124738:	ff 75 e4             	pushl  -0x1c(%ebp)
f012473b:	50                   	push   %eax
f012473c:	e8 48 2d fe ff       	call   f0107489 <get_page_table>
f0124741:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124744:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012474a:	85 c0                	test   %eax,%eax
f012474c:	75 17                	jne    f0124765 <test_kheap_virt_addr+0xaf0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012474e:	83 ec 04             	sub    $0x4,%esp
f0124751:	68 b0 9a 13 f0       	push   $0xf0139ab0
f0124756:	68 38 09 00 00       	push   $0x938
f012475b:	68 0e 91 13 f0       	push   $0xf013910e
f0124760:	e8 4b ba fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124765:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124768:	c1 e8 0c             	shr    $0xc,%eax
f012476b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124770:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124773:	e9 ba 00 00 00       	jmp    f0124832 <test_kheap_virt_addr+0xbbd>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0124778:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012477e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124781:	c1 e2 02             	shl    $0x2,%edx
f0124784:	01 d0                	add    %edx,%eax
f0124786:	8b 00                	mov    (%eax),%eax
f0124788:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012478d:	89 c1                	mov    %eax,%ecx
f012478f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124795:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124798:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012479b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01247a1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01247a4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01247a7:	83 ec 0c             	sub    $0xc,%esp
f01247aa:	50                   	push   %eax
f01247ab:	e8 85 37 fe ff       	call   f0107f35 <kheap_virtual_address>
f01247b0:	83 c4 10             	add    $0x10,%esp
f01247b3:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f01247b9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01247bf:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01247c2:	74 61                	je     f0124825 <test_kheap_virt_addr+0xbb0>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f01247c4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01247ca:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01247cd:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01247d0:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f01247d6:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01247d9:	c1 e1 02             	shl    $0x2,%ecx
f01247dc:	01 ca                	add    %ecx,%edx
f01247de:	8b 12                	mov    (%edx),%edx
f01247e0:	89 d1                	mov    %edx,%ecx
f01247e2:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f01247e8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01247eb:	c1 e2 0c             	shl    $0xc,%edx
f01247ee:	89 d3                	mov    %edx,%ebx
f01247f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01247f3:	01 da                	add    %ebx,%edx
f01247f5:	83 ec 0c             	sub    $0xc,%esp
f01247f8:	50                   	push   %eax
f01247f9:	51                   	push   %ecx
f01247fa:	52                   	push   %edx
f01247fb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
f0124801:	68 a4 9b 13 f0       	push   $0xf0139ba4
f0124806:	e8 26 c6 fd ff       	call   f0100e31 <cprintf>
f012480b:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012480e:	83 ec 04             	sub    $0x4,%esp
f0124811:	68 e7 9b 13 f0       	push   $0xf0139be7
f0124816:	68 42 09 00 00       	push   $0x942
f012481b:	68 0e 91 13 f0       	push   $0xf013910e
f0124820:	e8 8b b9 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0124825:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012482c:	ff 45 dc             	incl   -0x24(%ebp)
f012482f:	ff 45 e0             	incl   -0x20(%ebp)
f0124832:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124835:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f012483b:	7d 0d                	jge    f012484a <test_kheap_virt_addr+0xbd5>
f012483d:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124844:	0f 8e 2e ff ff ff    	jle    f0124778 <test_kheap_virt_addr+0xb03>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012484a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012484d:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f0124853:	0f 82 d0 fe ff ff    	jb     f0124729 <test_kheap_virt_addr+0xab4>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0124859:	83 ec 0c             	sub    $0xc,%esp
f012485c:	68 04 9c 13 f0       	push   $0xf0139c04
f0124861:	e8 cb c5 fd ff       	call   f0100e31 <cprintf>
f0124866:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124869:	e8 12 81 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012486e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124874:	e8 ad fd fd ff       	call   f0104626 <pf_calculate_free_frames>
f0124879:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f012487f:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0124885:	83 ec 0c             	sub    $0xc,%esp
f0124888:	50                   	push   %eax
f0124889:	e8 8d 36 fe ff       	call   f0107f1b <kfree>
f012488e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124891:	e8 90 fd fd ff       	call   f0104626 <pf_calculate_free_frames>
f0124896:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f012489c:	74 17                	je     f01248b5 <test_kheap_virt_addr+0xc40>
f012489e:	83 ec 04             	sub    $0x4,%esp
f01248a1:	68 28 91 13 f0       	push   $0xf0139128
f01248a6:	68 50 09 00 00       	push   $0x950
f01248ab:	68 0e 91 13 f0       	push   $0xf013910e
f01248b0:	e8 fb b8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01248b5:	e8 c6 80 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01248ba:	89 c2                	mov    %eax,%edx
f01248bc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01248c2:	29 c2                	sub    %eax,%edx
f01248c4:	89 d0                	mov    %edx,%eax
f01248c6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01248cb:	74 17                	je     f01248e4 <test_kheap_virt_addr+0xc6f>
f01248cd:	83 ec 04             	sub    $0x4,%esp
f01248d0:	68 98 98 13 f0       	push   $0xf0139898
f01248d5:	68 51 09 00 00       	push   $0x951
f01248da:	68 0e 91 13 f0       	push   $0xf013910e
f01248df:	e8 cc b8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01248e4:	e8 97 80 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01248e9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01248ef:	e8 32 fd fd ff       	call   f0104626 <pf_calculate_free_frames>
f01248f4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f01248fa:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0124900:	83 ec 0c             	sub    $0xc,%esp
f0124903:	50                   	push   %eax
f0124904:	e8 12 36 fe ff       	call   f0107f1b <kfree>
f0124909:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012490c:	e8 15 fd fd ff       	call   f0104626 <pf_calculate_free_frames>
f0124911:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124917:	74 17                	je     f0124930 <test_kheap_virt_addr+0xcbb>
f0124919:	83 ec 04             	sub    $0x4,%esp
f012491c:	68 28 91 13 f0       	push   $0xf0139128
f0124921:	68 57 09 00 00       	push   $0x957
f0124926:	68 0e 91 13 f0       	push   $0xf013910e
f012492b:	e8 80 b8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124930:	e8 4b 80 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0124935:	89 c2                	mov    %eax,%edx
f0124937:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012493d:	29 c2                	sub    %eax,%edx
f012493f:	89 d0                	mov    %edx,%eax
f0124941:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124946:	74 17                	je     f012495f <test_kheap_virt_addr+0xcea>
f0124948:	83 ec 04             	sub    $0x4,%esp
f012494b:	68 98 98 13 f0       	push   $0xf0139898
f0124950:	68 58 09 00 00       	push   $0x958
f0124955:	68 0e 91 13 f0       	push   $0xf013910e
f012495a:	e8 51 b8 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012495f:	e8 1c 80 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0124964:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012496a:	e8 b7 fc fd ff       	call   f0104626 <pf_calculate_free_frames>
f012496f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0124975:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012497b:	83 ec 0c             	sub    $0xc,%esp
f012497e:	50                   	push   %eax
f012497f:	e8 97 35 fe ff       	call   f0107f1b <kfree>
f0124984:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124987:	e8 9a fc fd ff       	call   f0104626 <pf_calculate_free_frames>
f012498c:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124992:	74 17                	je     f01249ab <test_kheap_virt_addr+0xd36>
f0124994:	83 ec 04             	sub    $0x4,%esp
f0124997:	68 28 91 13 f0       	push   $0xf0139128
f012499c:	68 5e 09 00 00       	push   $0x95e
f01249a1:	68 0e 91 13 f0       	push   $0xf013910e
f01249a6:	e8 05 b8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01249ab:	e8 d0 7f fe ff       	call   f010c980 <sys_calculate_free_frames>
f01249b0:	89 c2                	mov    %eax,%edx
f01249b2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01249b8:	29 c2                	sub    %eax,%edx
f01249ba:	89 d0                	mov    %edx,%eax
f01249bc:	3d 00 06 00 00       	cmp    $0x600,%eax
f01249c1:	74 17                	je     f01249da <test_kheap_virt_addr+0xd65>
f01249c3:	83 ec 04             	sub    $0x4,%esp
f01249c6:	68 98 98 13 f0       	push   $0xf0139898
f01249cb:	68 5f 09 00 00       	push   $0x95f
f01249d0:	68 0e 91 13 f0       	push   $0xf013910e
f01249d5:	e8 d6 b7 fd ff       	call   f01001b0 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01249da:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01249e1:	10 00 00 
f01249e4:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01249e9:	0f b6 d0             	movzbl %al,%edx
f01249ec:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01249f2:	01 d0                	add    %edx,%eax
f01249f4:	48                   	dec    %eax
f01249f5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01249fb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a01:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a06:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124a0c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a12:	29 d0                	sub    %edx,%eax
f0124a14:	89 c1                	mov    %eax,%ecx
f0124a16:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124a1d:	10 00 00 
f0124a20:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124a25:	0f b6 c0             	movzbl %al,%eax
f0124a28:	c1 e0 04             	shl    $0x4,%eax
f0124a2b:	89 c2                	mov    %eax,%edx
f0124a2d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124a33:	01 d0                	add    %edx,%eax
f0124a35:	48                   	dec    %eax
f0124a36:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124a3c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124a42:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a47:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124a4d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124a53:	29 d0                	sub    %edx,%eax
f0124a55:	01 c8                	add    %ecx,%eax
f0124a57:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124a5c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0124a62:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0124a69:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0124a70:	10 00 00 
f0124a73:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124a78:	0f b6 d0             	movzbl %al,%edx
f0124a7b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124a81:	01 d0                	add    %edx,%eax
f0124a83:	48                   	dec    %eax
f0124a84:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0124a8a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124a90:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a95:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0124a9b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124aa1:	29 d0                	sub    %edx,%eax
f0124aa3:	89 c1                	mov    %eax,%ecx
f0124aa5:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124aac:	10 00 00 
f0124aaf:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124ab4:	0f b6 c0             	movzbl %al,%eax
f0124ab7:	c1 e0 04             	shl    $0x4,%eax
f0124aba:	89 c2                	mov    %eax,%edx
f0124abc:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124ac2:	01 d0                	add    %edx,%eax
f0124ac4:	48                   	dec    %eax
f0124ac5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124acb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124ad1:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ad6:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124adc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124ae2:	29 d0                	sub    %edx,%eax
f0124ae4:	01 c8                	add    %ecx,%eax
f0124ae6:	05 00 40 00 00       	add    $0x4000,%eax
f0124aeb:	c1 e8 0c             	shr    $0xc,%eax
f0124aee:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124af4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124afa:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124afd:	eb 41                	jmp    f0124b40 <test_kheap_virt_addr+0xecb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124aff:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124b05:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124b08:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124b0b:	83 ec 0c             	sub    $0xc,%esp
f0124b0e:	50                   	push   %eax
f0124b0f:	e8 21 34 fe ff       	call   f0107f35 <kheap_virtual_address>
f0124b14:	83 c4 10             	add    $0x10,%esp
f0124b17:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f0124b1d:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0124b24:	74 17                	je     f0124b3d <test_kheap_virt_addr+0xec8>
			{
				panic("Wrong kheap_virtual_address");
f0124b26:	83 ec 04             	sub    $0x4,%esp
f0124b29:	68 e7 9b 13 f0       	push   $0xf0139be7
f0124b2e:	68 70 09 00 00       	push   $0x970
f0124b33:	68 0e 91 13 f0       	push   $0xf013910e
f0124b38:	e8 73 b6 fd ff       	call   f01001b0 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124b3d:	ff 45 d8             	incl   -0x28(%ebp)
f0124b40:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124b46:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0124b4c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124b4f:	39 c2                	cmp    %eax,%edx
f0124b51:	77 ac                	ja     f0124aff <test_kheap_virt_addr+0xe8a>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124b53:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124b59:	05 00 04 00 00       	add    $0x400,%eax
f0124b5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124b61:	eb 4b                	jmp    f0124bae <test_kheap_virt_addr+0xf39>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124b63:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124b69:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124b6c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124b6f:	83 ec 0c             	sub    $0xc,%esp
f0124b72:	50                   	push   %eax
f0124b73:	e8 bd 33 fe ff       	call   f0107f35 <kheap_virtual_address>
f0124b78:	83 c4 10             	add    $0x10,%esp
f0124b7b:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124b81:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124b84:	c1 e0 0c             	shl    $0xc,%eax
f0124b87:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124b8c:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0124b92:	74 17                	je     f0124bab <test_kheap_virt_addr+0xf36>
			{
				panic("Wrong kheap_virtual_address");
f0124b94:	83 ec 04             	sub    $0x4,%esp
f0124b97:	68 e7 9b 13 f0       	push   $0xf0139be7
f0124b9c:	68 7a 09 00 00       	push   $0x97a
f0124ba1:	68 0e 91 13 f0       	push   $0xf013910e
f0124ba6:	e8 05 b6 fd ff       	call   f01001b0 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124bab:	ff 45 d8             	incl   -0x28(%ebp)
f0124bae:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124bb4:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0124bba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124bbd:	39 c2                	cmp    %eax,%edx
f0124bbf:	77 a2                	ja     f0124b63 <test_kheap_virt_addr+0xeee>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124bc1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124bc7:	05 04 07 00 00       	add    $0x704,%eax
f0124bcc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124bcf:	eb 41                	jmp    f0124c12 <test_kheap_virt_addr+0xf9d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124bd1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124bd7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124bda:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124bdd:	83 ec 0c             	sub    $0xc,%esp
f0124be0:	50                   	push   %eax
f0124be1:	e8 4f 33 fe ff       	call   f0107f35 <kheap_virtual_address>
f0124be6:	83 c4 10             	add    $0x10,%esp
f0124be9:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0124bef:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0124bf6:	74 17                	je     f0124c0f <test_kheap_virt_addr+0xf9a>
			{
				panic("Wrong kheap_virtual_address");
f0124bf8:	83 ec 04             	sub    $0x4,%esp
f0124bfb:	68 e7 9b 13 f0       	push   $0xf0139be7
f0124c00:	68 83 09 00 00       	push   $0x983
f0124c05:	68 0e 91 13 f0       	push   $0xf013910e
f0124c0a:	e8 a1 b5 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124c0f:	ff 45 d8             	incl   -0x28(%ebp)
f0124c12:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c18:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0124c1e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c21:	39 c2                	cmp    %eax,%edx
f0124c23:	77 ac                	ja     f0124bd1 <test_kheap_virt_addr+0xf5c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124c25:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c2b:	05 04 0d 00 00       	add    $0xd04,%eax
f0124c30:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124c33:	eb 4b                	jmp    f0124c80 <test_kheap_virt_addr+0x100b>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124c35:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124c3b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124c3e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124c41:	83 ec 0c             	sub    $0xc,%esp
f0124c44:	50                   	push   %eax
f0124c45:	e8 eb 32 fe ff       	call   f0107f35 <kheap_virtual_address>
f0124c4a:	83 c4 10             	add    $0x10,%esp
f0124c4d:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124c53:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c56:	c1 e0 0c             	shl    $0xc,%eax
f0124c59:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124c5e:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0124c64:	74 17                	je     f0124c7d <test_kheap_virt_addr+0x1008>
			{
				panic("Wrong kheap_virtual_address");
f0124c66:	83 ec 04             	sub    $0x4,%esp
f0124c69:	68 e7 9b 13 f0       	push   $0xf0139be7
f0124c6e:	68 8c 09 00 00       	push   $0x98c
f0124c73:	68 0e 91 13 f0       	push   $0xf013910e
f0124c78:	e8 33 b5 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124c7d:	ff 45 d8             	incl   -0x28(%ebp)
f0124c80:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c86:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0124c8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c8f:	39 c2                	cmp    %eax,%edx
f0124c91:	77 a2                	ja     f0124c35 <test_kheap_virt_addr+0xfc0>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0124c93:	83 ec 0c             	sub    $0xc,%esp
f0124c96:	68 99 92 13 f0       	push   $0xf0139299
f0124c9b:	e8 91 c1 fd ff       	call   f0100e31 <cprintf>
f0124ca0:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124ca3:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0124caa:	eb 54                	jmp    f0124d00 <test_kheap_virt_addr+0x108b>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0124cac:	83 ec 0c             	sub    $0xc,%esp
f0124caf:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124cb2:	e8 7e 32 fe ff       	call   f0107f35 <kheap_virtual_address>
f0124cb7:	83 c4 10             	add    $0x10,%esp
f0124cba:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0124cc0:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0124cc7:	74 30                	je     f0124cf9 <test_kheap_virt_addr+0x1084>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0124cc9:	83 ec 04             	sub    $0x4,%esp
f0124ccc:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0124cd2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124cd5:	68 35 9c 13 f0       	push   $0xf0139c35
f0124cda:	e8 52 c1 fd ff       	call   f0100e31 <cprintf>
f0124cdf:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0124ce2:	83 ec 04             	sub    $0x4,%esp
f0124ce5:	68 e7 9b 13 f0       	push   $0xf0139be7
f0124cea:	68 9c 09 00 00       	push   $0x99c
f0124cef:	68 0e 91 13 f0       	push   $0xf013910e
f0124cf4:	e8 b7 b4 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124cf9:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0124d00:	b8 3c d6 2d 00       	mov    $0x2dd63c,%eax
f0124d05:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0124d08:	72 a2                	jb     f0124cac <test_kheap_virt_addr+0x1037>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124d0a:	83 ec 0c             	sub    $0xc,%esp
f0124d0d:	68 f2 92 13 f0       	push   $0xf01392f2
f0124d12:	e8 1a c1 fd ff       	call   f0100e31 <cprintf>
f0124d17:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0124d1a:	83 ec 0c             	sub    $0xc,%esp
f0124d1d:	68 54 9c 13 f0       	push   $0xf0139c54
f0124d22:	e8 0a c1 fd ff       	call   f0100e31 <cprintf>
f0124d27:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124d2a:	b8 01 00 00 00       	mov    $0x1,%eax
f0124d2f:	89 f4                	mov    %esi,%esp

}
f0124d31:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124d34:	5b                   	pop    %ebx
f0124d35:	5e                   	pop    %esi
f0124d36:	5f                   	pop    %edi
f0124d37:	5d                   	pop    %ebp
f0124d38:	c3                   	ret    

f0124d39 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0124d39:	55                   	push   %ebp
f0124d3a:	89 e5                	mov    %esp,%ebp
f0124d3c:	57                   	push   %edi
f0124d3d:	56                   	push   %esi
f0124d3e:	53                   	push   %ebx
f0124d3f:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f0124d45:	a0 1d cb 18 f0       	mov    0xf018cb1d,%al
f0124d4a:	84 c0                	test   %al,%al
f0124d4c:	74 56                	je     f0124da4 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0124d4e:	c6 05 1d cb 18 f0 00 	movb   $0x0,0xf018cb1d
		initFreeFrames = sys_calculate_free_frames() ;
f0124d55:	e8 26 7c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0124d5a:	a3 28 d6 2d f0       	mov    %eax,0xf02dd628
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0124d5f:	e8 c2 f8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0124d64:	a3 24 d6 2d f0       	mov    %eax,0xf02dd624
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0124d69:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124d6f:	bb b1 9d 13 f0       	mov    $0xf0139db1,%ebx
f0124d74:	ba 11 00 00 00       	mov    $0x11,%edx
f0124d79:	89 c7                	mov    %eax,%edi
f0124d7b:	89 de                	mov    %ebx,%esi
f0124d7d:	89 d1                	mov    %edx,%ecx
f0124d7f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0124d81:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0124d87:	b9 53 00 00 00       	mov    $0x53,%ecx
f0124d8c:	b0 00                	mov    $0x0,%al
f0124d8e:	89 d7                	mov    %edx,%edi
f0124d90:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0124d92:	83 ec 0c             	sub    $0xc,%esp
f0124d95:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124d9b:	50                   	push   %eax
f0124d9c:	e8 22 ce fd ff       	call   f0101bc3 <execute_command>
f0124da1:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0124da4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0124dab:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124db2:	a1 84 8a 2b f0       	mov    0xf02b8a84,%eax
f0124db7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124dba:	eb 2b                	jmp    f0124de7 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0124dbc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124dbf:	83 c0 5c             	add    $0x5c,%eax
f0124dc2:	83 ec 08             	sub    $0x8,%esp
f0124dc5:	68 9b 9c 13 f0       	push   $0xf0139c9b
f0124dca:	50                   	push   %eax
f0124dcb:	e8 ec a0 00 00       	call   f012eebc <strcmp>
f0124dd0:	83 c4 10             	add    $0x10,%esp
f0124dd3:	85 c0                	test   %eax,%eax
f0124dd5:	75 08                	jne    f0124ddf <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f0124dd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124dda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0124ddd:	eb 2f                	jmp    f0124e0e <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124ddf:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f0124de4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124de7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124deb:	74 08                	je     f0124df5 <test_three_creation_functions+0xbc>
f0124ded:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124df0:	8b 40 44             	mov    0x44(%eax),%eax
f0124df3:	eb 05                	jmp    f0124dfa <test_three_creation_functions+0xc1>
f0124df5:	b8 00 00 00 00       	mov    $0x0,%eax
f0124dfa:	a3 8c 8a 2b f0       	mov    %eax,0xf02b8a8c
f0124dff:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f0124e04:	85 c0                	test   %eax,%eax
f0124e06:	75 b4                	jne    f0124dbc <test_three_creation_functions+0x83>
f0124e08:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124e0c:	75 ae                	jne    f0124dbc <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0124e0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e11:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f0124e17:	85 c0                	test   %eax,%eax
f0124e19:	74 17                	je     f0124e32 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0124e1b:	83 ec 04             	sub    $0x4,%esp
f0124e1e:	68 a4 9c 13 f0       	push   $0xf0139ca4
f0124e23:	68 c6 09 00 00       	push   $0x9c6
f0124e28:	68 0e 91 13 f0       	push   $0xf013910e
f0124e2d:	e8 7e b3 fd ff       	call   f01001b0 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0124e32:	83 ec 0c             	sub    $0xc,%esp
f0124e35:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124e38:	e8 ba 33 fe ff       	call   f01081f7 <env_page_ws_get_size>
f0124e3d:	83 c4 10             	add    $0x10,%esp
f0124e40:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0124e43:	e8 38 7b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0124e48:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0124e4b:	e8 d6 f7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0124e50:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e53:	a1 24 d6 2d f0       	mov    0xf02dd624,%eax
f0124e58:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0124e5b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0124e5e:	74 17                	je     f0124e77 <test_three_creation_functions+0x13e>
f0124e60:	83 ec 04             	sub    $0x4,%esp
f0124e63:	68 28 91 13 f0       	push   $0xf0139128
f0124e68:	68 cc 09 00 00       	push   $0x9cc
f0124e6d:	68 0e 91 13 f0       	push   $0xf013910e
f0124e72:	e8 39 b3 fd ff       	call   f01001b0 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124e77:	a1 28 d6 2d f0       	mov    0xf02dd628,%eax
f0124e7c:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0124e7f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124e82:	83 c2 15             	add    $0x15,%edx
f0124e85:	39 d0                	cmp    %edx,%eax
f0124e87:	74 17                	je     f0124ea0 <test_three_creation_functions+0x167>
f0124e89:	83 ec 04             	sub    $0x4,%esp
f0124e8c:	68 90 91 13 f0       	push   $0xf0139190
f0124e91:	68 ce 09 00 00       	push   $0x9ce
f0124e96:	68 0e 91 13 f0       	push   $0xf013910e
f0124e9b:	e8 10 b3 fd ff       	call   f01001b0 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0124ea0:	83 ec 0c             	sub    $0xc,%esp
f0124ea3:	68 00 10 00 00       	push   $0x1000
f0124ea8:	e8 54 30 fe ff       	call   f0107f01 <kmalloc>
f0124ead:	83 c4 10             	add    $0x10,%esp
f0124eb0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0124eb3:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0124eba:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124ebf:	0f b6 d0             	movzbl %al,%edx
f0124ec2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0124ec5:	01 d0                	add    %edx,%eax
f0124ec7:	48                   	dec    %eax
f0124ec8:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0124ecb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124ece:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ed3:	f7 75 cc             	divl   -0x34(%ebp)
f0124ed6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124ed9:	29 d0                	sub    %edx,%eax
f0124edb:	89 c1                	mov    %eax,%ecx
f0124edd:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0124ee4:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124ee9:	0f b6 c0             	movzbl %al,%eax
f0124eec:	c1 e0 04             	shl    $0x4,%eax
f0124eef:	89 c2                	mov    %eax,%edx
f0124ef1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124ef4:	01 d0                	add    %edx,%eax
f0124ef6:	48                   	dec    %eax
f0124ef7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124efa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124efd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f02:	f7 75 c4             	divl   -0x3c(%ebp)
f0124f05:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124f08:	29 d0                	sub    %edx,%eax
f0124f0a:	01 c8                	add    %ecx,%eax
f0124f0c:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0124f12:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124f15:	39 c2                	cmp    %eax,%edx
f0124f17:	74 17                	je     f0124f30 <test_three_creation_functions+0x1f7>
f0124f19:	83 ec 04             	sub    $0x4,%esp
f0124f1c:	68 f4 9c 13 f0       	push   $0xf0139cf4
f0124f21:	68 d2 09 00 00       	push   $0x9d2
f0124f26:	68 0e 91 13 f0       	push   $0xf013910e
f0124f2b:	e8 80 b2 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0124f30:	83 ec 0c             	sub    $0xc,%esp
f0124f33:	68 64 9d 13 f0       	push   $0xf0139d64
f0124f38:	e8 f4 be fd ff       	call   f0100e31 <cprintf>
f0124f3d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124f40:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0124f45:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124f48:	5b                   	pop    %ebx
f0124f49:	5e                   	pop    %esi
f0124f4a:	5f                   	pop    %edi
f0124f4b:	5d                   	pop    %ebp
f0124f4c:	c3                   	ret    

f0124f4d <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0124f4d:	55                   	push   %ebp
f0124f4e:	89 e5                	mov    %esp,%ebp
f0124f50:	57                   	push   %edi
f0124f51:	53                   	push   %ebx
f0124f52:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	char minByte = 1<<7;
f0124f58:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0124f5c:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0124f60:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0124f66:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0124f6c:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124f73:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124f7a:	e8 01 7a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0124f7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124f82:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0124f88:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124f8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0124f92:	89 d7                	mov    %edx,%edi
f0124f94:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124f96:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0124f9c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124fa1:	b8 00 00 00 00       	mov    $0x0,%eax
f0124fa6:	89 d7                	mov    %edx,%edi
f0124fa8:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124faa:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0124fb0:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124fb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0124fba:	89 d7                	mov    %edx,%edi
f0124fbc:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124fbe:	e8 bd 79 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0124fc3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124fc6:	e8 5b f6 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0124fcb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124fce:	83 ec 0c             	sub    $0xc,%esp
f0124fd1:	68 00 fc 1f 00       	push   $0x1ffc00
f0124fd6:	e8 26 2f fe ff       	call   f0107f01 <kmalloc>
f0124fdb:	83 c4 10             	add    $0x10,%esp
f0124fde:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124fe4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124fea:	89 c1                	mov    %eax,%ecx
f0124fec:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0124ff3:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0124ff8:	0f b6 d0             	movzbl %al,%edx
f0124ffb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124ffe:	01 d0                	add    %edx,%eax
f0125000:	48                   	dec    %eax
f0125001:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125004:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125007:	ba 00 00 00 00       	mov    $0x0,%edx
f012500c:	f7 75 c8             	divl   -0x38(%ebp)
f012500f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125012:	29 d0                	sub    %edx,%eax
f0125014:	89 c3                	mov    %eax,%ebx
f0125016:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012501d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125022:	0f b6 c0             	movzbl %al,%eax
f0125025:	c1 e0 04             	shl    $0x4,%eax
f0125028:	89 c2                	mov    %eax,%edx
f012502a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012502d:	01 d0                	add    %edx,%eax
f012502f:	48                   	dec    %eax
f0125030:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125033:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125036:	ba 00 00 00 00       	mov    $0x0,%edx
f012503b:	f7 75 c0             	divl   -0x40(%ebp)
f012503e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125041:	29 d0                	sub    %edx,%eax
f0125043:	01 d8                	add    %ebx,%eax
f0125045:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012504a:	39 c1                	cmp    %eax,%ecx
f012504c:	74 17                	je     f0125065 <test_kfreeall+0x118>
f012504e:	83 ec 04             	sub    $0x4,%esp
f0125051:	68 f4 91 13 f0       	push   $0xf01391f4
f0125056:	68 f9 09 00 00       	push   $0x9f9
f012505b:	68 0e 91 13 f0       	push   $0xf013910e
f0125060:	e8 4b b1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125065:	e8 bc f5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012506a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012506d:	74 17                	je     f0125086 <test_kfreeall+0x139>
f012506f:	83 ec 04             	sub    $0x4,%esp
f0125072:	68 28 91 13 f0       	push   $0xf0139128
f0125077:	68 fa 09 00 00       	push   $0x9fa
f012507c:	68 0e 91 13 f0       	push   $0xf013910e
f0125081:	e8 2a b1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125086:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125089:	e8 f2 78 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012508e:	29 c3                	sub    %eax,%ebx
f0125090:	89 d8                	mov    %ebx,%eax
f0125092:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125097:	74 17                	je     f01250b0 <test_kfreeall+0x163>
f0125099:	83 ec 04             	sub    $0x4,%esp
f012509c:	68 90 91 13 f0       	push   $0xf0139190
f01250a1:	68 fb 09 00 00       	push   $0x9fb
f01250a6:	68 0e 91 13 f0       	push   $0xf013910e
f01250ab:	e8 00 b1 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01250b0:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01250b7:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01250ba:	e8 c1 78 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01250bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01250c2:	e8 5f f5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01250c7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01250ca:	83 ec 0c             	sub    $0xc,%esp
f01250cd:	68 00 fc 1f 00       	push   $0x1ffc00
f01250d2:	e8 2a 2e fe ff       	call   f0107f01 <kmalloc>
f01250d7:	83 c4 10             	add    $0x10,%esp
f01250da:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01250e0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01250e6:	89 c1                	mov    %eax,%ecx
f01250e8:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01250ef:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01250f4:	0f b6 d0             	movzbl %al,%edx
f01250f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01250fa:	01 d0                	add    %edx,%eax
f01250fc:	48                   	dec    %eax
f01250fd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0125100:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125103:	ba 00 00 00 00       	mov    $0x0,%edx
f0125108:	f7 75 b8             	divl   -0x48(%ebp)
f012510b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012510e:	29 d0                	sub    %edx,%eax
f0125110:	89 c3                	mov    %eax,%ebx
f0125112:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0125119:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012511e:	0f b6 c0             	movzbl %al,%eax
f0125121:	c1 e0 04             	shl    $0x4,%eax
f0125124:	89 c2                	mov    %eax,%edx
f0125126:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125129:	01 d0                	add    %edx,%eax
f012512b:	48                   	dec    %eax
f012512c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012512f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125132:	ba 00 00 00 00       	mov    $0x0,%edx
f0125137:	f7 75 b0             	divl   -0x50(%ebp)
f012513a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012513d:	29 d0                	sub    %edx,%eax
f012513f:	01 d8                	add    %ebx,%eax
f0125141:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125146:	39 c1                	cmp    %eax,%ecx
f0125148:	74 17                	je     f0125161 <test_kfreeall+0x214>
f012514a:	83 ec 04             	sub    $0x4,%esp
f012514d:	68 f4 91 13 f0       	push   $0xf01391f4
f0125152:	68 02 0a 00 00       	push   $0xa02
f0125157:	68 0e 91 13 f0       	push   $0xf013910e
f012515c:	e8 4f b0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125161:	e8 c0 f4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125166:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125169:	74 17                	je     f0125182 <test_kfreeall+0x235>
f012516b:	83 ec 04             	sub    $0x4,%esp
f012516e:	68 28 91 13 f0       	push   $0xf0139128
f0125173:	68 03 0a 00 00       	push   $0xa03
f0125178:	68 0e 91 13 f0       	push   $0xf013910e
f012517d:	e8 2e b0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125182:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125185:	e8 f6 77 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012518a:	29 c3                	sub    %eax,%ebx
f012518c:	89 d8                	mov    %ebx,%eax
f012518e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125193:	74 17                	je     f01251ac <test_kfreeall+0x25f>
f0125195:	83 ec 04             	sub    $0x4,%esp
f0125198:	68 90 91 13 f0       	push   $0xf0139190
f012519d:	68 04 0a 00 00       	push   $0xa04
f01251a2:	68 0e 91 13 f0       	push   $0xf013910e
f01251a7:	e8 04 b0 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01251ac:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f01251b3:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01251b6:	e8 c5 77 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01251bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01251be:	e8 63 f4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01251c3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01251c6:	83 ec 0c             	sub    $0xc,%esp
f01251c9:	68 00 08 00 00       	push   $0x800
f01251ce:	e8 2e 2d fe ff       	call   f0107f01 <kmalloc>
f01251d3:	83 c4 10             	add    $0x10,%esp
f01251d6:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01251dc:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01251e2:	89 c1                	mov    %eax,%ecx
f01251e4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01251eb:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01251f0:	0f b6 d0             	movzbl %al,%edx
f01251f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01251f6:	01 d0                	add    %edx,%eax
f01251f8:	48                   	dec    %eax
f01251f9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01251fc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01251ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0125204:	f7 75 a8             	divl   -0x58(%ebp)
f0125207:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012520a:	29 d0                	sub    %edx,%eax
f012520c:	89 c3                	mov    %eax,%ebx
f012520e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0125215:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012521a:	0f b6 c0             	movzbl %al,%eax
f012521d:	c1 e0 04             	shl    $0x4,%eax
f0125220:	89 c2                	mov    %eax,%edx
f0125222:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125225:	01 d0                	add    %edx,%eax
f0125227:	48                   	dec    %eax
f0125228:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012522b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012522e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125233:	f7 75 a0             	divl   -0x60(%ebp)
f0125236:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125239:	29 d0                	sub    %edx,%eax
f012523b:	01 d8                	add    %ebx,%eax
f012523d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125242:	39 c1                	cmp    %eax,%ecx
f0125244:	74 17                	je     f012525d <test_kfreeall+0x310>
f0125246:	83 ec 04             	sub    $0x4,%esp
f0125249:	68 f4 91 13 f0       	push   $0xf01391f4
f012524e:	68 0b 0a 00 00       	push   $0xa0b
f0125253:	68 0e 91 13 f0       	push   $0xf013910e
f0125258:	e8 53 af fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012525d:	e8 c4 f3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125262:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125265:	74 17                	je     f012527e <test_kfreeall+0x331>
f0125267:	83 ec 04             	sub    $0x4,%esp
f012526a:	68 28 91 13 f0       	push   $0xf0139128
f012526f:	68 0c 0a 00 00       	push   $0xa0c
f0125274:	68 0e 91 13 f0       	push   $0xf013910e
f0125279:	e8 32 af fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012527e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125281:	e8 fa 76 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125286:	29 c3                	sub    %eax,%ebx
f0125288:	89 d8                	mov    %ebx,%eax
f012528a:	83 f8 01             	cmp    $0x1,%eax
f012528d:	74 17                	je     f01252a6 <test_kfreeall+0x359>
f012528f:	83 ec 04             	sub    $0x4,%esp
f0125292:	68 90 91 13 f0       	push   $0xf0139190
f0125297:	68 0d 0a 00 00       	push   $0xa0d
f012529c:	68 0e 91 13 f0       	push   $0xf013910e
f01252a1:	e8 0a af fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01252a6:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01252ad:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01252b0:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01252b6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01252b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01252c0:	eb 0e                	jmp    f01252d0 <test_kfreeall+0x383>
		{
			ptr[i] = 2 ;
f01252c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01252c5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01252c8:	01 d0                	add    %edx,%eax
f01252ca:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01252cd:	ff 45 f4             	incl   -0xc(%ebp)
f01252d0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01252d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01252d9:	7f e7                	jg     f01252c2 <test_kfreeall+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01252db:	e8 a0 76 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01252e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01252e3:	e8 3e f3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01252e8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01252eb:	83 ec 0c             	sub    $0xc,%esp
f01252ee:	68 00 08 00 00       	push   $0x800
f01252f3:	e8 09 2c fe ff       	call   f0107f01 <kmalloc>
f01252f8:	83 c4 10             	add    $0x10,%esp
f01252fb:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125301:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125307:	89 c1                	mov    %eax,%ecx
f0125309:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0125310:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125315:	0f b6 d0             	movzbl %al,%edx
f0125318:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012531b:	01 d0                	add    %edx,%eax
f012531d:	48                   	dec    %eax
f012531e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0125321:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125324:	ba 00 00 00 00       	mov    $0x0,%edx
f0125329:	f7 75 94             	divl   -0x6c(%ebp)
f012532c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012532f:	29 d0                	sub    %edx,%eax
f0125331:	89 c3                	mov    %eax,%ebx
f0125333:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012533a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012533f:	0f b6 c0             	movzbl %al,%eax
f0125342:	c1 e0 04             	shl    $0x4,%eax
f0125345:	89 c2                	mov    %eax,%edx
f0125347:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012534a:	01 d0                	add    %edx,%eax
f012534c:	48                   	dec    %eax
f012534d:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125350:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125353:	ba 00 00 00 00       	mov    $0x0,%edx
f0125358:	f7 75 8c             	divl   -0x74(%ebp)
f012535b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012535e:	29 d0                	sub    %edx,%eax
f0125360:	01 d8                	add    %ebx,%eax
f0125362:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125367:	39 c1                	cmp    %eax,%ecx
f0125369:	74 17                	je     f0125382 <test_kfreeall+0x435>
f012536b:	83 ec 04             	sub    $0x4,%esp
f012536e:	68 f4 91 13 f0       	push   $0xf01391f4
f0125373:	68 19 0a 00 00       	push   $0xa19
f0125378:	68 0e 91 13 f0       	push   $0xf013910e
f012537d:	e8 2e ae fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125382:	e8 9f f2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125387:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012538a:	74 17                	je     f01253a3 <test_kfreeall+0x456>
f012538c:	83 ec 04             	sub    $0x4,%esp
f012538f:	68 28 91 13 f0       	push   $0xf0139128
f0125394:	68 1a 0a 00 00       	push   $0xa1a
f0125399:	68 0e 91 13 f0       	push   $0xf013910e
f012539e:	e8 0d ae fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01253a3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01253a6:	e8 d5 75 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01253ab:	29 c3                	sub    %eax,%ebx
f01253ad:	89 d8                	mov    %ebx,%eax
f01253af:	83 f8 01             	cmp    $0x1,%eax
f01253b2:	74 17                	je     f01253cb <test_kfreeall+0x47e>
f01253b4:	83 ec 04             	sub    $0x4,%esp
f01253b7:	68 90 91 13 f0       	push   $0xf0139190
f01253bc:	68 1b 0a 00 00       	push   $0xa1b
f01253c1:	68 0e 91 13 f0       	push   $0xf013910e
f01253c6:	e8 e5 ad fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01253cb:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f01253d2:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01253d5:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01253db:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01253de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01253e5:	eb 0e                	jmp    f01253f5 <test_kfreeall+0x4a8>
		{
			ptr[i] = 3 ;
f01253e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01253ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f01253ed:	01 d0                	add    %edx,%eax
f01253ef:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01253f2:	ff 45 f4             	incl   -0xc(%ebp)
f01253f5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01253fb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01253fe:	7f e7                	jg     f01253e7 <test_kfreeall+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125400:	e8 7b 75 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125405:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125408:	e8 19 f2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012540d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125410:	83 ec 0c             	sub    $0xc,%esp
f0125413:	68 00 1c 00 00       	push   $0x1c00
f0125418:	e8 e4 2a fe ff       	call   f0107f01 <kmalloc>
f012541d:	83 c4 10             	add    $0x10,%esp
f0125420:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125426:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012542c:	89 c1                	mov    %eax,%ecx
f012542e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125435:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012543a:	0f b6 d0             	movzbl %al,%edx
f012543d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125440:	01 d0                	add    %edx,%eax
f0125442:	48                   	dec    %eax
f0125443:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125446:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125449:	ba 00 00 00 00       	mov    $0x0,%edx
f012544e:	f7 75 84             	divl   -0x7c(%ebp)
f0125451:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125454:	29 d0                	sub    %edx,%eax
f0125456:	89 c3                	mov    %eax,%ebx
f0125458:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012545f:	10 00 00 
f0125462:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125467:	0f b6 c0             	movzbl %al,%eax
f012546a:	c1 e0 04             	shl    $0x4,%eax
f012546d:	89 c2                	mov    %eax,%edx
f012546f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125475:	01 d0                	add    %edx,%eax
f0125477:	48                   	dec    %eax
f0125478:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012547e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125484:	ba 00 00 00 00       	mov    $0x0,%edx
f0125489:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012548f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125495:	29 d0                	sub    %edx,%eax
f0125497:	01 d8                	add    %ebx,%eax
f0125499:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012549e:	39 c1                	cmp    %eax,%ecx
f01254a0:	74 17                	je     f01254b9 <test_kfreeall+0x56c>
f01254a2:	83 ec 04             	sub    $0x4,%esp
f01254a5:	68 f4 91 13 f0       	push   $0xf01391f4
f01254aa:	68 27 0a 00 00       	push   $0xa27
f01254af:	68 0e 91 13 f0       	push   $0xf013910e
f01254b4:	e8 f7 ac fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01254b9:	e8 68 f1 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01254be:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01254c1:	74 17                	je     f01254da <test_kfreeall+0x58d>
f01254c3:	83 ec 04             	sub    $0x4,%esp
f01254c6:	68 28 91 13 f0       	push   $0xf0139128
f01254cb:	68 28 0a 00 00       	push   $0xa28
f01254d0:	68 0e 91 13 f0       	push   $0xf013910e
f01254d5:	e8 d6 ac fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01254da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01254dd:	e8 9e 74 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01254e2:	29 c3                	sub    %eax,%ebx
f01254e4:	89 d8                	mov    %ebx,%eax
f01254e6:	83 f8 02             	cmp    $0x2,%eax
f01254e9:	74 17                	je     f0125502 <test_kfreeall+0x5b5>
f01254eb:	83 ec 04             	sub    $0x4,%esp
f01254ee:	68 90 91 13 f0       	push   $0xf0139190
f01254f3:	68 29 0a 00 00       	push   $0xa29
f01254f8:	68 0e 91 13 f0       	push   $0xf013910e
f01254fd:	e8 ae ac fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0125502:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0125509:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012550c:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125512:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012551c:	eb 0e                	jmp    f012552c <test_kfreeall+0x5df>
		{
			ptr[i] = 4 ;
f012551e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125521:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125524:	01 d0                	add    %edx,%eax
f0125526:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125529:	ff 45 f4             	incl   -0xc(%ebp)
f012552c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125532:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125535:	7f e7                	jg     f012551e <test_kfreeall+0x5d1>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125537:	e8 44 74 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012553c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012553f:	e8 e2 f0 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125544:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125547:	83 ec 0c             	sub    $0xc,%esp
f012554a:	68 00 fc 2f 00       	push   $0x2ffc00
f012554f:	e8 ad 29 fe ff       	call   f0107f01 <kmalloc>
f0125554:	83 c4 10             	add    $0x10,%esp
f0125557:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012555d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125563:	89 c1                	mov    %eax,%ecx
f0125565:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012556c:	10 00 00 
f012556f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125574:	0f b6 d0             	movzbl %al,%edx
f0125577:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012557d:	01 d0                	add    %edx,%eax
f012557f:	48                   	dec    %eax
f0125580:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125586:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012558c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125591:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125597:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012559d:	29 d0                	sub    %edx,%eax
f012559f:	89 c3                	mov    %eax,%ebx
f01255a1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01255a8:	10 00 00 
f01255ab:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01255b0:	0f b6 c0             	movzbl %al,%eax
f01255b3:	c1 e0 04             	shl    $0x4,%eax
f01255b6:	89 c2                	mov    %eax,%edx
f01255b8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01255be:	01 d0                	add    %edx,%eax
f01255c0:	48                   	dec    %eax
f01255c1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01255c7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01255cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01255d2:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01255d8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01255de:	29 d0                	sub    %edx,%eax
f01255e0:	01 d8                	add    %ebx,%eax
f01255e2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01255e7:	39 c1                	cmp    %eax,%ecx
f01255e9:	74 17                	je     f0125602 <test_kfreeall+0x6b5>
f01255eb:	83 ec 04             	sub    $0x4,%esp
f01255ee:	68 f4 91 13 f0       	push   $0xf01391f4
f01255f3:	68 35 0a 00 00       	push   $0xa35
f01255f8:	68 0e 91 13 f0       	push   $0xf013910e
f01255fd:	e8 ae ab fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125602:	e8 1f f0 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125607:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012560a:	74 17                	je     f0125623 <test_kfreeall+0x6d6>
f012560c:	83 ec 04             	sub    $0x4,%esp
f012560f:	68 28 91 13 f0       	push   $0xf0139128
f0125614:	68 36 0a 00 00       	push   $0xa36
f0125619:	68 0e 91 13 f0       	push   $0xf013910e
f012561e:	e8 8d ab fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125623:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125626:	e8 55 73 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012562b:	29 c3                	sub    %eax,%ebx
f012562d:	89 d8                	mov    %ebx,%eax
f012562f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125634:	74 17                	je     f012564d <test_kfreeall+0x700>
f0125636:	83 ec 04             	sub    $0x4,%esp
f0125639:	68 90 91 13 f0       	push   $0xf0139190
f012563e:	68 37 0a 00 00       	push   $0xa37
f0125643:	68 0e 91 13 f0       	push   $0xf013910e
f0125648:	e8 63 ab fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012564d:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0125654:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0125657:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012565d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125660:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125667:	eb 0e                	jmp    f0125677 <test_kfreeall+0x72a>
		{
			ptr[i] = 5 ;
f0125669:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012566c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012566f:	01 d0                	add    %edx,%eax
f0125671:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125674:	ff 45 f4             	incl   -0xc(%ebp)
f0125677:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012567d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125680:	7f e7                	jg     f0125669 <test_kfreeall+0x71c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125682:	e8 f9 72 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125687:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012568a:	e8 97 ef fd ff       	call   f0104626 <pf_calculate_free_frames>
f012568f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125692:	83 ec 0c             	sub    $0xc,%esp
f0125695:	68 00 fc 5f 00       	push   $0x5ffc00
f012569a:	e8 62 28 fe ff       	call   f0107f01 <kmalloc>
f012569f:	83 c4 10             	add    $0x10,%esp
f01256a2:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01256a8:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01256ae:	89 c1                	mov    %eax,%ecx
f01256b0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01256b7:	10 00 00 
f01256ba:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01256bf:	0f b6 d0             	movzbl %al,%edx
f01256c2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01256c8:	01 d0                	add    %edx,%eax
f01256ca:	48                   	dec    %eax
f01256cb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01256d1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01256d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01256dc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01256e2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01256e8:	29 d0                	sub    %edx,%eax
f01256ea:	89 c3                	mov    %eax,%ebx
f01256ec:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01256f3:	10 00 00 
f01256f6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01256fb:	0f b6 c0             	movzbl %al,%eax
f01256fe:	c1 e0 04             	shl    $0x4,%eax
f0125701:	89 c2                	mov    %eax,%edx
f0125703:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125709:	01 d0                	add    %edx,%eax
f012570b:	48                   	dec    %eax
f012570c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125712:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125718:	ba 00 00 00 00       	mov    $0x0,%edx
f012571d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125723:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125729:	29 d0                	sub    %edx,%eax
f012572b:	01 d8                	add    %ebx,%eax
f012572d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125732:	39 c1                	cmp    %eax,%ecx
f0125734:	74 17                	je     f012574d <test_kfreeall+0x800>
f0125736:	83 ec 04             	sub    $0x4,%esp
f0125739:	68 f4 91 13 f0       	push   $0xf01391f4
f012573e:	68 43 0a 00 00       	push   $0xa43
f0125743:	68 0e 91 13 f0       	push   $0xf013910e
f0125748:	e8 63 aa fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012574d:	e8 d4 ee fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125752:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125755:	74 17                	je     f012576e <test_kfreeall+0x821>
f0125757:	83 ec 04             	sub    $0x4,%esp
f012575a:	68 28 91 13 f0       	push   $0xf0139128
f012575f:	68 44 0a 00 00       	push   $0xa44
f0125764:	68 0e 91 13 f0       	push   $0xf013910e
f0125769:	e8 42 aa fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012576e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125771:	e8 0a 72 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125776:	29 c3                	sub    %eax,%ebx
f0125778:	89 d8                	mov    %ebx,%eax
f012577a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012577f:	74 17                	je     f0125798 <test_kfreeall+0x84b>
f0125781:	83 ec 04             	sub    $0x4,%esp
f0125784:	68 90 91 13 f0       	push   $0xf0139190
f0125789:	68 45 0a 00 00       	push   $0xa45
f012578e:	68 0e 91 13 f0       	push   $0xf013910e
f0125793:	e8 18 aa fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0125798:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f012579f:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01257a2:	e8 d9 71 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01257a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01257aa:	e8 77 ee fd ff       	call   f0104626 <pf_calculate_free_frames>
f01257af:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01257b2:	83 ec 0c             	sub    $0xc,%esp
f01257b5:	68 00 38 00 00       	push   $0x3800
f01257ba:	e8 42 27 fe ff       	call   f0107f01 <kmalloc>
f01257bf:	83 c4 10             	add    $0x10,%esp
f01257c2:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01257c8:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01257ce:	89 c1                	mov    %eax,%ecx
f01257d0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01257d7:	10 00 00 
f01257da:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01257df:	0f b6 d0             	movzbl %al,%edx
f01257e2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01257e8:	01 d0                	add    %edx,%eax
f01257ea:	48                   	dec    %eax
f01257eb:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01257f1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01257f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01257fc:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125802:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125808:	29 d0                	sub    %edx,%eax
f012580a:	89 c3                	mov    %eax,%ebx
f012580c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125813:	10 00 00 
f0125816:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012581b:	0f b6 c0             	movzbl %al,%eax
f012581e:	c1 e0 04             	shl    $0x4,%eax
f0125821:	89 c2                	mov    %eax,%edx
f0125823:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125829:	01 d0                	add    %edx,%eax
f012582b:	48                   	dec    %eax
f012582c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125832:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125838:	ba 00 00 00 00       	mov    $0x0,%edx
f012583d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125843:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125849:	29 d0                	sub    %edx,%eax
f012584b:	01 d8                	add    %ebx,%eax
f012584d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125852:	39 c1                	cmp    %eax,%ecx
f0125854:	74 17                	je     f012586d <test_kfreeall+0x920>
f0125856:	83 ec 04             	sub    $0x4,%esp
f0125859:	68 f4 91 13 f0       	push   $0xf01391f4
f012585e:	68 4c 0a 00 00       	push   $0xa4c
f0125863:	68 0e 91 13 f0       	push   $0xf013910e
f0125868:	e8 43 a9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012586d:	e8 b4 ed fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125872:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125875:	74 17                	je     f012588e <test_kfreeall+0x941>
f0125877:	83 ec 04             	sub    $0x4,%esp
f012587a:	68 28 91 13 f0       	push   $0xf0139128
f012587f:	68 4d 0a 00 00       	push   $0xa4d
f0125884:	68 0e 91 13 f0       	push   $0xf013910e
f0125889:	e8 22 a9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012588e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125891:	e8 ea 70 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125896:	29 c3                	sub    %eax,%ebx
f0125898:	89 d8                	mov    %ebx,%eax
f012589a:	83 f8 04             	cmp    $0x4,%eax
f012589d:	74 17                	je     f01258b6 <test_kfreeall+0x969>
f012589f:	83 ec 04             	sub    $0x4,%esp
f01258a2:	68 90 91 13 f0       	push   $0xf0139190
f01258a7:	68 4e 0a 00 00       	push   $0xa4e
f01258ac:	68 0e 91 13 f0       	push   $0xf013910e
f01258b1:	e8 fa a8 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01258b6:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f01258bd:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01258c0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01258c6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01258c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01258d0:	eb 0e                	jmp    f01258e0 <test_kfreeall+0x993>
		{
			ptr[i] = 7 ;
f01258d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01258d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01258d8:	01 d0                	add    %edx,%eax
f01258da:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01258dd:	ff 45 f4             	incl   -0xc(%ebp)
f01258e0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01258e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01258e9:	7f e7                	jg     f01258d2 <test_kfreeall+0x985>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01258eb:	e8 90 70 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01258f0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01258f6:	e8 2b ed fd ff       	call   f0104626 <pf_calculate_free_frames>
f01258fb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0125901:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125907:	83 ec 0c             	sub    $0xc,%esp
f012590a:	50                   	push   %eax
f012590b:	e8 0b 26 fe ff       	call   f0107f1b <kfree>
f0125910:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125913:	e8 0e ed fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125918:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012591e:	74 17                	je     f0125937 <test_kfreeall+0x9ea>
f0125920:	83 ec 04             	sub    $0x4,%esp
f0125923:	68 28 91 13 f0       	push   $0xf0139128
f0125928:	68 5d 0a 00 00       	push   $0xa5d
f012592d:	68 0e 91 13 f0       	push   $0xf013910e
f0125932:	e8 79 a8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125937:	e8 44 70 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012593c:	89 c2                	mov    %eax,%edx
f012593e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125944:	29 c2                	sub    %eax,%edx
f0125946:	89 d0                	mov    %edx,%eax
f0125948:	3d 00 02 00 00       	cmp    $0x200,%eax
f012594d:	74 17                	je     f0125966 <test_kfreeall+0xa19>
f012594f:	83 ec 04             	sub    $0x4,%esp
f0125952:	68 98 98 13 f0       	push   $0xf0139898
f0125957:	68 5e 0a 00 00       	push   $0xa5e
f012595c:	68 0e 91 13 f0       	push   $0xf013910e
f0125961:	e8 4a a8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125966:	e8 15 70 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012596b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125971:	e8 b0 ec fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125976:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f012597c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125982:	83 ec 0c             	sub    $0xc,%esp
f0125985:	50                   	push   %eax
f0125986:	e8 90 25 fe ff       	call   f0107f1b <kfree>
f012598b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012598e:	e8 93 ec fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125993:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125999:	74 17                	je     f01259b2 <test_kfreeall+0xa65>
f012599b:	83 ec 04             	sub    $0x4,%esp
f012599e:	68 28 91 13 f0       	push   $0xf0139128
f01259a3:	68 64 0a 00 00       	push   $0xa64
f01259a8:	68 0e 91 13 f0       	push   $0xf013910e
f01259ad:	e8 fe a7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01259b2:	e8 c9 6f fe ff       	call   f010c980 <sys_calculate_free_frames>
f01259b7:	89 c2                	mov    %eax,%edx
f01259b9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01259bf:	29 c2                	sub    %eax,%edx
f01259c1:	89 d0                	mov    %edx,%eax
f01259c3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01259c8:	74 17                	je     f01259e1 <test_kfreeall+0xa94>
f01259ca:	83 ec 04             	sub    $0x4,%esp
f01259cd:	68 98 98 13 f0       	push   $0xf0139898
f01259d2:	68 65 0a 00 00       	push   $0xa65
f01259d7:	68 0e 91 13 f0       	push   $0xf013910e
f01259dc:	e8 cf a7 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01259e1:	e8 9a 6f fe ff       	call   f010c980 <sys_calculate_free_frames>
f01259e6:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259ec:	e8 35 ec fd ff       	call   f0104626 <pf_calculate_free_frames>
f01259f1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01259f7:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01259fd:	83 ec 0c             	sub    $0xc,%esp
f0125a00:	50                   	push   %eax
f0125a01:	e8 15 25 fe ff       	call   f0107f1b <kfree>
f0125a06:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a09:	e8 18 ec fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125a0e:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125a14:	74 17                	je     f0125a2d <test_kfreeall+0xae0>
f0125a16:	83 ec 04             	sub    $0x4,%esp
f0125a19:	68 28 91 13 f0       	push   $0xf0139128
f0125a1e:	68 6b 0a 00 00       	push   $0xa6b
f0125a23:	68 0e 91 13 f0       	push   $0xf013910e
f0125a28:	e8 83 a7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125a2d:	e8 4e 6f fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125a32:	89 c2                	mov    %eax,%edx
f0125a34:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125a3a:	29 c2                	sub    %eax,%edx
f0125a3c:	89 d0                	mov    %edx,%eax
f0125a3e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125a43:	74 17                	je     f0125a5c <test_kfreeall+0xb0f>
f0125a45:	83 ec 04             	sub    $0x4,%esp
f0125a48:	68 98 98 13 f0       	push   $0xf0139898
f0125a4d:	68 6c 0a 00 00       	push   $0xa6c
f0125a52:	68 0e 91 13 f0       	push   $0xf013910e
f0125a57:	e8 54 a7 fd ff       	call   f01001b0 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0125a5c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125a62:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125a65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125a6c:	eb 1e                	jmp    f0125a8c <test_kfreeall+0xb3f>
		{
			sums[2] += ptr[i] ;
f0125a6e:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125a74:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125a77:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125a7a:	01 c8                	add    %ecx,%eax
f0125a7c:	8a 00                	mov    (%eax),%al
f0125a7e:	0f be c0             	movsbl %al,%eax
f0125a81:	01 d0                	add    %edx,%eax
f0125a83:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125a89:	ff 45 f4             	incl   -0xc(%ebp)
f0125a8c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125a92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125a95:	7f d7                	jg     f0125a6e <test_kfreeall+0xb21>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0125a97:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125a9d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125aa3:	01 c0                	add    %eax,%eax
f0125aa5:	39 c2                	cmp    %eax,%edx
f0125aa7:	74 17                	je     f0125ac0 <test_kfreeall+0xb73>
f0125aa9:	83 ec 04             	sub    $0x4,%esp
f0125aac:	68 f4 98 13 f0       	push   $0xf01398f4
f0125ab1:	68 78 0a 00 00       	push   $0xa78
f0125ab6:	68 0e 91 13 f0       	push   $0xf013910e
f0125abb:	e8 f0 a6 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0125ac0:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125ac6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125ac9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125ad0:	eb 1e                	jmp    f0125af0 <test_kfreeall+0xba3>
		{
			sums[3] += ptr[i] ;
f0125ad2:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125ad8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125adb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125ade:	01 c8                	add    %ecx,%eax
f0125ae0:	8a 00                	mov    (%eax),%al
f0125ae2:	0f be c0             	movsbl %al,%eax
f0125ae5:	01 d0                	add    %edx,%eax
f0125ae7:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125aed:	ff 45 f4             	incl   -0xc(%ebp)
f0125af0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125af6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125af9:	7f d7                	jg     f0125ad2 <test_kfreeall+0xb85>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0125afb:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125b01:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125b07:	89 c1                	mov    %eax,%ecx
f0125b09:	01 c9                	add    %ecx,%ecx
f0125b0b:	01 c8                	add    %ecx,%eax
f0125b0d:	39 c2                	cmp    %eax,%edx
f0125b0f:	74 17                	je     f0125b28 <test_kfreeall+0xbdb>
f0125b11:	83 ec 04             	sub    $0x4,%esp
f0125b14:	68 f4 98 13 f0       	push   $0xf01398f4
f0125b19:	68 80 0a 00 00       	push   $0xa80
f0125b1e:	68 0e 91 13 f0       	push   $0xf013910e
f0125b23:	e8 88 a6 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0125b28:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125b2e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125b31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b38:	eb 1e                	jmp    f0125b58 <test_kfreeall+0xc0b>
		{
			sums[4] += ptr[i] ;
f0125b3a:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0125b40:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125b43:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125b46:	01 c8                	add    %ecx,%eax
f0125b48:	8a 00                	mov    (%eax),%al
f0125b4a:	0f be c0             	movsbl %al,%eax
f0125b4d:	01 d0                	add    %edx,%eax
f0125b4f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125b55:	ff 45 f4             	incl   -0xc(%ebp)
f0125b58:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125b5e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125b61:	7f d7                	jg     f0125b3a <test_kfreeall+0xbed>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0125b63:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125b69:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0125b6f:	c1 e2 02             	shl    $0x2,%edx
f0125b72:	39 d0                	cmp    %edx,%eax
f0125b74:	74 17                	je     f0125b8d <test_kfreeall+0xc40>
f0125b76:	83 ec 04             	sub    $0x4,%esp
f0125b79:	68 f4 98 13 f0       	push   $0xf01398f4
f0125b7e:	68 88 0a 00 00       	push   $0xa88
f0125b83:	68 0e 91 13 f0       	push   $0xf013910e
f0125b88:	e8 23 a6 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0125b8d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125b93:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125b96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b9d:	eb 1e                	jmp    f0125bbd <test_kfreeall+0xc70>
		{
			sums[5] += ptr[i] ;
f0125b9f:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0125ba5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125ba8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125bab:	01 c8                	add    %ecx,%eax
f0125bad:	8a 00                	mov    (%eax),%al
f0125baf:	0f be c0             	movsbl %al,%eax
f0125bb2:	01 d0                	add    %edx,%eax
f0125bb4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125bba:	ff 45 f4             	incl   -0xc(%ebp)
f0125bbd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125bc3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125bc6:	7f d7                	jg     f0125b9f <test_kfreeall+0xc52>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0125bc8:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0125bce:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0125bd4:	89 d0                	mov    %edx,%eax
f0125bd6:	c1 e0 02             	shl    $0x2,%eax
f0125bd9:	01 d0                	add    %edx,%eax
f0125bdb:	39 c1                	cmp    %eax,%ecx
f0125bdd:	74 17                	je     f0125bf6 <test_kfreeall+0xca9>
f0125bdf:	83 ec 04             	sub    $0x4,%esp
f0125be2:	68 f4 98 13 f0       	push   $0xf01398f4
f0125be7:	68 90 0a 00 00       	push   $0xa90
f0125bec:	68 0e 91 13 f0       	push   $0xf013910e
f0125bf1:	e8 ba a5 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0125bf6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125bfc:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125bff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125c06:	eb 1e                	jmp    f0125c26 <test_kfreeall+0xcd9>
		{
			sums[7] += ptr[i] ;
f0125c08:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0125c0e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125c11:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125c14:	01 c8                	add    %ecx,%eax
f0125c16:	8a 00                	mov    (%eax),%al
f0125c18:	0f be c0             	movsbl %al,%eax
f0125c1b:	01 d0                	add    %edx,%eax
f0125c1d:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125c23:	ff 45 f4             	incl   -0xc(%ebp)
f0125c26:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125c2c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125c2f:	7f d7                	jg     f0125c08 <test_kfreeall+0xcbb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0125c31:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0125c37:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0125c3d:	89 d0                	mov    %edx,%eax
f0125c3f:	01 c0                	add    %eax,%eax
f0125c41:	01 d0                	add    %edx,%eax
f0125c43:	01 c0                	add    %eax,%eax
f0125c45:	01 d0                	add    %edx,%eax
f0125c47:	39 c1                	cmp    %eax,%ecx
f0125c49:	74 17                	je     f0125c62 <test_kfreeall+0xd15>
f0125c4b:	83 ec 04             	sub    $0x4,%esp
f0125c4e:	68 f4 98 13 f0       	push   $0xf01398f4
f0125c53:	68 98 0a 00 00       	push   $0xa98
f0125c58:	68 0e 91 13 f0       	push   $0xf013910e
f0125c5d:	e8 4e a5 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0125c62:	e8 19 6d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125c67:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125c6a:	e8 b7 e9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125c6f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0125c72:	83 ec 0c             	sub    $0xc,%esp
f0125c75:	68 00 50 00 00       	push   $0x5000
f0125c7a:	e8 82 22 fe ff       	call   f0107f01 <kmalloc>
f0125c7f:	83 c4 10             	add    $0x10,%esp
f0125c82:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125c88:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125c8e:	89 c1                	mov    %eax,%ecx
f0125c90:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125c97:	10 00 00 
f0125c9a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125c9f:	0f b6 d0             	movzbl %al,%edx
f0125ca2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125ca8:	01 d0                	add    %edx,%eax
f0125caa:	48                   	dec    %eax
f0125cab:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125cb1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125cb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cbc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125cc2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125cc8:	29 d0                	sub    %edx,%eax
f0125cca:	89 c3                	mov    %eax,%ebx
f0125ccc:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125cd3:	10 00 00 
f0125cd6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125cdb:	0f b6 c0             	movzbl %al,%eax
f0125cde:	c1 e0 04             	shl    $0x4,%eax
f0125ce1:	89 c2                	mov    %eax,%edx
f0125ce3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125ce9:	01 d0                	add    %edx,%eax
f0125ceb:	48                   	dec    %eax
f0125cec:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125cf2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125cf8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cfd:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125d03:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d09:	29 d0                	sub    %edx,%eax
f0125d0b:	01 d8                	add    %ebx,%eax
f0125d0d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125d12:	39 c1                	cmp    %eax,%ecx
f0125d14:	74 17                	je     f0125d2d <test_kfreeall+0xde0>
f0125d16:	83 ec 04             	sub    $0x4,%esp
f0125d19:	68 f4 91 13 f0       	push   $0xf01391f4
f0125d1e:	68 a1 0a 00 00       	push   $0xaa1
f0125d23:	68 0e 91 13 f0       	push   $0xf013910e
f0125d28:	e8 83 a4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d2d:	e8 f4 e8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125d32:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125d35:	74 17                	je     f0125d4e <test_kfreeall+0xe01>
f0125d37:	83 ec 04             	sub    $0x4,%esp
f0125d3a:	68 28 91 13 f0       	push   $0xf0139128
f0125d3f:	68 a2 0a 00 00       	push   $0xaa2
f0125d44:	68 0e 91 13 f0       	push   $0xf013910e
f0125d49:	e8 62 a4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125d4e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125d51:	e8 2a 6c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125d56:	29 c3                	sub    %eax,%ebx
f0125d58:	89 d8                	mov    %ebx,%eax
f0125d5a:	83 f8 05             	cmp    $0x5,%eax
f0125d5d:	74 17                	je     f0125d76 <test_kfreeall+0xe29>
f0125d5f:	83 ec 04             	sub    $0x4,%esp
f0125d62:	68 90 91 13 f0       	push   $0xf0139190
f0125d67:	68 a3 0a 00 00       	push   $0xaa3
f0125d6c:	68 0e 91 13 f0       	push   $0xf013910e
f0125d71:	e8 3a a4 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0125d76:	c7 85 e0 fe ff ff ff 	movl   $0x4fff,-0x120(%ebp)
f0125d7d:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0125d80:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125d86:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0125d89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125d90:	eb 0e                	jmp    f0125da0 <test_kfreeall+0xe53>
		{
			ptr[i] = 8 ;
f0125d92:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125d95:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125d98:	01 d0                	add    %edx,%eax
f0125d9a:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0125d9d:	ff 45 f4             	incl   -0xc(%ebp)
f0125da0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125da6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125da9:	7f e7                	jg     f0125d92 <test_kfreeall+0xe45>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0125dab:	e8 d0 6b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125db0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125db3:	e8 6e e8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125db8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0125dbb:	83 ec 0c             	sub    $0xc,%esp
f0125dbe:	68 00 00 10 00       	push   $0x100000
f0125dc3:	e8 39 21 fe ff       	call   f0107f01 <kmalloc>
f0125dc8:	83 c4 10             	add    $0x10,%esp
f0125dcb:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125dd1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125dd7:	89 c1                	mov    %eax,%ecx
f0125dd9:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125de0:	10 00 00 
f0125de3:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125de8:	0f b6 d0             	movzbl %al,%edx
f0125deb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125df1:	01 d0                	add    %edx,%eax
f0125df3:	48                   	dec    %eax
f0125df4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125dfa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125e00:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e05:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125e0b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125e11:	29 d0                	sub    %edx,%eax
f0125e13:	89 c3                	mov    %eax,%ebx
f0125e15:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125e1c:	10 00 00 
f0125e1f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125e24:	0f b6 c0             	movzbl %al,%eax
f0125e27:	c1 e0 04             	shl    $0x4,%eax
f0125e2a:	89 c2                	mov    %eax,%edx
f0125e2c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125e32:	01 d0                	add    %edx,%eax
f0125e34:	48                   	dec    %eax
f0125e35:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125e3b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e41:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e46:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125e4c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e52:	29 d0                	sub    %edx,%eax
f0125e54:	01 d8                	add    %ebx,%eax
f0125e56:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0125e5b:	39 c1                	cmp    %eax,%ecx
f0125e5d:	74 17                	je     f0125e76 <test_kfreeall+0xf29>
f0125e5f:	83 ec 04             	sub    $0x4,%esp
f0125e62:	68 f4 91 13 f0       	push   $0xf01391f4
f0125e67:	68 af 0a 00 00       	push   $0xaaf
f0125e6c:	68 0e 91 13 f0       	push   $0xf013910e
f0125e71:	e8 3a a3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e76:	e8 ab e7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125e7b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125e7e:	74 17                	je     f0125e97 <test_kfreeall+0xf4a>
f0125e80:	83 ec 04             	sub    $0x4,%esp
f0125e83:	68 28 91 13 f0       	push   $0xf0139128
f0125e88:	68 b0 0a 00 00       	push   $0xab0
f0125e8d:	68 0e 91 13 f0       	push   $0xf013910e
f0125e92:	e8 19 a3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e97:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125e9a:	e8 e1 6a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125e9f:	29 c3                	sub    %eax,%ebx
f0125ea1:	89 d8                	mov    %ebx,%eax
f0125ea3:	3d 00 01 00 00       	cmp    $0x100,%eax
f0125ea8:	74 17                	je     f0125ec1 <test_kfreeall+0xf74>
f0125eaa:	83 ec 04             	sub    $0x4,%esp
f0125ead:	68 90 91 13 f0       	push   $0xf0139190
f0125eb2:	68 b1 0a 00 00       	push   $0xab1
f0125eb7:	68 0e 91 13 f0       	push   $0xf013910e
f0125ebc:	e8 ef a2 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0125ec1:	c7 85 e4 fe ff ff ff 	movl   $0xfffff,-0x11c(%ebp)
f0125ec8:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0125ecb:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125ed1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0125ed4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125edb:	eb 0e                	jmp    f0125eeb <test_kfreeall+0xf9e>
		{
			ptr[i] = 9 ;
f0125edd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125ee0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125ee3:	01 d0                	add    %edx,%eax
f0125ee5:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0125ee8:	ff 45 f4             	incl   -0xc(%ebp)
f0125eeb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125ef1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125ef4:	7f e7                	jg     f0125edd <test_kfreeall+0xf90>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0125ef6:	e8 85 6a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125efb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125efe:	e8 23 e7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125f03:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0125f06:	e8 5e 20 fe ff       	call   f0107f69 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f0b:	e8 16 e7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0125f10:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f13:	74 17                	je     f0125f2c <test_kfreeall+0xfdf>
f0125f15:	83 ec 04             	sub    $0x4,%esp
f0125f18:	68 28 91 13 f0       	push   $0xf0139128
f0125f1d:	68 c1 0a 00 00       	push   $0xac1
f0125f22:	68 0e 91 13 f0       	push   $0xf013910e
f0125f27:	e8 84 a2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0125f2c:	e8 4f 6a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0125f31:	89 c2                	mov    %eax,%edx
f0125f33:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125f36:	89 d1                	mov    %edx,%ecx
f0125f38:	29 c1                	sub    %eax,%ecx
f0125f3a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125f41:	10 00 00 
f0125f44:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125f49:	0f b6 d0             	movzbl %al,%edx
f0125f4c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125f52:	01 d0                	add    %edx,%eax
f0125f54:	48                   	dec    %eax
f0125f55:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125f5b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125f61:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f66:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125f6c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125f72:	29 d0                	sub    %edx,%eax
f0125f74:	89 c3                	mov    %eax,%ebx
f0125f76:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125f7d:	10 00 00 
f0125f80:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0125f85:	0f b6 c0             	movzbl %al,%eax
f0125f88:	c1 e0 04             	shl    $0x4,%eax
f0125f8b:	89 c2                	mov    %eax,%edx
f0125f8d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125f93:	01 d0                	add    %edx,%eax
f0125f95:	48                   	dec    %eax
f0125f96:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125f9c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125fa2:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fa7:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125fad:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125fb3:	29 d0                	sub    %edx,%eax
f0125fb5:	01 d8                	add    %ebx,%eax
f0125fb7:	05 00 40 00 00       	add    $0x4000,%eax
f0125fbc:	c1 e8 0c             	shr    $0xc,%eax
f0125fbf:	05 0d 04 00 00       	add    $0x40d,%eax
f0125fc4:	39 c1                	cmp    %eax,%ecx
f0125fc6:	74 17                	je     f0125fdf <test_kfreeall+0x1092>
f0125fc8:	83 ec 04             	sub    $0x4,%esp
f0125fcb:	68 98 98 13 f0       	push   $0xf0139898
f0125fd0:	68 c2 0a 00 00       	push   $0xac2
f0125fd5:	68 0e 91 13 f0       	push   $0xf013910e
f0125fda:	e8 d1 a1 fd ff       	call   f01001b0 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0125fdf:	83 ec 0c             	sub    $0xc,%esp
f0125fe2:	6a 03                	push   $0x3
f0125fe4:	e8 32 6e fe ff       	call   f010ce1b <sys_bypassPageFault>
f0125fe9:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0125fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125ff3:	e9 82 00 00 00       	jmp    f012607a <test_kfreeall+0x112d>
		{
			ptr = (char *) ptr_allocations[i];
f0125ff8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0125ffb:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f0126002:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0126005:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126008:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012600b:	e8 f9 6d fe ff       	call   f010ce09 <sys_rcr2>
f0126010:	89 c2                	mov    %eax,%edx
f0126012:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126015:	39 c2                	cmp    %eax,%edx
f0126017:	74 17                	je     f0126030 <test_kfreeall+0x10e3>
f0126019:	83 ec 04             	sub    $0x4,%esp
f012601c:	68 74 99 13 f0       	push   $0xf0139974
f0126021:	68 d0 0a 00 00       	push   $0xad0
f0126026:	68 0e 91 13 f0       	push   $0xf013910e
f012602b:	e8 80 a1 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0126030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126033:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f012603a:	89 c2                	mov    %eax,%edx
f012603c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012603f:	01 d0                	add    %edx,%eax
f0126041:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126044:	e8 c0 6d fe ff       	call   f010ce09 <sys_rcr2>
f0126049:	89 c2                	mov    %eax,%edx
f012604b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012604e:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0126055:	89 c1                	mov    %eax,%ecx
f0126057:	8b 45 98             	mov    -0x68(%ebp),%eax
f012605a:	01 c8                	add    %ecx,%eax
f012605c:	39 c2                	cmp    %eax,%edx
f012605e:	74 17                	je     f0126077 <test_kfreeall+0x112a>
f0126060:	83 ec 04             	sub    $0x4,%esp
f0126063:	68 74 99 13 f0       	push   $0xf0139974
f0126068:	68 d2 0a 00 00       	push   $0xad2
f012606d:	68 0e 91 13 f0       	push   $0xf013910e
f0126072:	e8 39 a1 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0126077:	ff 45 f4             	incl   -0xc(%ebp)
f012607a:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012607e:	0f 8e 74 ff ff ff    	jle    f0125ff8 <test_kfreeall+0x10ab>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0126084:	83 ec 0c             	sub    $0xc,%esp
f0126087:	6a 00                	push   $0x0
f0126089:	e8 8d 6d fe ff       	call   f010ce1b <sys_bypassPageFault>
f012608e:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126091:	e8 ea 68 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126096:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126099:	e8 88 e5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012609e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01260a1:	83 ec 0c             	sub    $0xc,%esp
f01260a4:	68 00 00 40 00       	push   $0x400000
f01260a9:	e8 53 1e fe ff       	call   f0107f01 <kmalloc>
f01260ae:	83 c4 10             	add    $0x10,%esp
f01260b1:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01260b7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01260bd:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f01260c2:	74 17                	je     f01260db <test_kfreeall+0x118e>
f01260c4:	83 ec 04             	sub    $0x4,%esp
f01260c7:	68 18 9e 13 f0       	push   $0xf0139e18
f01260cc:	68 de 0a 00 00       	push   $0xade
f01260d1:	68 0e 91 13 f0       	push   $0xf013910e
f01260d6:	e8 d5 a0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260db:	e8 46 e5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01260e0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01260e3:	74 17                	je     f01260fc <test_kfreeall+0x11af>
f01260e5:	83 ec 04             	sub    $0x4,%esp
f01260e8:	68 28 91 13 f0       	push   $0xf0139128
f01260ed:	68 df 0a 00 00       	push   $0xadf
f01260f2:	68 0e 91 13 f0       	push   $0xf013910e
f01260f7:	e8 b4 a0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01260fc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01260ff:	e8 7c 68 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126104:	29 c3                	sub    %eax,%ebx
f0126106:	89 d8                	mov    %ebx,%eax
f0126108:	3d 00 04 00 00       	cmp    $0x400,%eax
f012610d:	74 17                	je     f0126126 <test_kfreeall+0x11d9>
f012610f:	83 ec 04             	sub    $0x4,%esp
f0126112:	68 90 91 13 f0       	push   $0xf0139190
f0126117:	68 e0 0a 00 00       	push   $0xae0
f012611c:	68 0e 91 13 f0       	push   $0xf013910e
f0126121:	e8 8a a0 fd ff       	call   f01001b0 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126126:	e8 55 68 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012612b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012612e:	e8 f3 e4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126133:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0126136:	83 ec 0c             	sub    $0xc,%esp
f0126139:	68 00 30 00 00       	push   $0x3000
f012613e:	e8 be 1d fe ff       	call   f0107f01 <kmalloc>
f0126143:	83 c4 10             	add    $0x10,%esp
f0126146:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012614c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0126152:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0126157:	74 17                	je     f0126170 <test_kfreeall+0x1223>
f0126159:	83 ec 04             	sub    $0x4,%esp
f012615c:	68 18 9e 13 f0       	push   $0xf0139e18
f0126161:	68 e6 0a 00 00       	push   $0xae6
f0126166:	68 0e 91 13 f0       	push   $0xf013910e
f012616b:	e8 40 a0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126170:	e8 b1 e4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126175:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126178:	74 17                	je     f0126191 <test_kfreeall+0x1244>
f012617a:	83 ec 04             	sub    $0x4,%esp
f012617d:	68 28 91 13 f0       	push   $0xf0139128
f0126182:	68 e7 0a 00 00       	push   $0xae7
f0126187:	68 0e 91 13 f0       	push   $0xf013910e
f012618c:	e8 1f a0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126191:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126194:	e8 e7 67 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126199:	29 c3                	sub    %eax,%ebx
f012619b:	89 d8                	mov    %ebx,%eax
f012619d:	83 f8 03             	cmp    $0x3,%eax
f01261a0:	74 17                	je     f01261b9 <test_kfreeall+0x126c>
f01261a2:	83 ec 04             	sub    $0x4,%esp
f01261a5:	68 90 91 13 f0       	push   $0xf0139190
f01261aa:	68 e8 0a 00 00       	push   $0xae8
f01261af:	68 0e 91 13 f0       	push   $0xf013910e
f01261b4:	e8 f7 9f fd ff       	call   f01001b0 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01261b9:	e8 c2 67 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01261be:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261c1:	e8 60 e4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01261c6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f01261c9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01261cf:	83 ec 0c             	sub    $0xc,%esp
f01261d2:	50                   	push   %eax
f01261d3:	e8 43 1d fe ff       	call   f0107f1b <kfree>
f01261d8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261db:	e8 46 e4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01261e0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01261e3:	74 17                	je     f01261fc <test_kfreeall+0x12af>
f01261e5:	83 ec 04             	sub    $0x4,%esp
f01261e8:	68 28 91 13 f0       	push   $0xf0139128
f01261ed:	68 f2 0a 00 00       	push   $0xaf2
f01261f2:	68 0e 91 13 f0       	push   $0xf013910e
f01261f7:	e8 b4 9f fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01261fc:	e8 7f 67 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126201:	89 c2                	mov    %eax,%edx
f0126203:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126206:	29 c2                	sub    %eax,%edx
f0126208:	89 d0                	mov    %edx,%eax
f012620a:	83 f8 03             	cmp    $0x3,%eax
f012620d:	74 17                	je     f0126226 <test_kfreeall+0x12d9>
f012620f:	83 ec 04             	sub    $0x4,%esp
f0126212:	68 c0 99 13 f0       	push   $0xf01399c0
f0126217:	68 f3 0a 00 00       	push   $0xaf3
f012621c:	68 0e 91 13 f0       	push   $0xf013910e
f0126221:	e8 8a 9f fd ff       	call   f01001b0 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126226:	e8 55 67 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012622b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012622e:	e8 f3 e3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126233:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0126236:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012623c:	83 ec 0c             	sub    $0xc,%esp
f012623f:	50                   	push   %eax
f0126240:	e8 d6 1c fe ff       	call   f0107f1b <kfree>
f0126245:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126248:	e8 d9 e3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012624d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126250:	74 17                	je     f0126269 <test_kfreeall+0x131c>
f0126252:	83 ec 04             	sub    $0x4,%esp
f0126255:	68 28 91 13 f0       	push   $0xf0139128
f012625a:	68 fc 0a 00 00       	push   $0xafc
f012625f:	68 0e 91 13 f0       	push   $0xf013910e
f0126264:	e8 47 9f fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126269:	e8 12 67 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012626e:	89 c2                	mov    %eax,%edx
f0126270:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126273:	39 c2                	cmp    %eax,%edx
f0126275:	74 17                	je     f012628e <test_kfreeall+0x1341>
f0126277:	83 ec 04             	sub    $0x4,%esp
f012627a:	68 c0 99 13 f0       	push   $0xf01399c0
f012627f:	68 fd 0a 00 00       	push   $0xafd
f0126284:	68 0e 91 13 f0       	push   $0xf013910e
f0126289:	e8 22 9f fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012628e:	e8 ed 66 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126293:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126296:	e8 8b e3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012629b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012629e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01262a4:	83 ec 0c             	sub    $0xc,%esp
f01262a7:	50                   	push   %eax
f01262a8:	e8 6e 1c fe ff       	call   f0107f1b <kfree>
f01262ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262b0:	e8 71 e3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01262b5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01262b8:	74 17                	je     f01262d1 <test_kfreeall+0x1384>
f01262ba:	83 ec 04             	sub    $0x4,%esp
f01262bd:	68 28 91 13 f0       	push   $0xf0139128
f01262c2:	68 03 0b 00 00       	push   $0xb03
f01262c7:	68 0e 91 13 f0       	push   $0xf013910e
f01262cc:	e8 df 9e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01262d1:	e8 aa 66 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01262d6:	89 c2                	mov    %eax,%edx
f01262d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01262db:	39 c2                	cmp    %eax,%edx
f01262dd:	74 17                	je     f01262f6 <test_kfreeall+0x13a9>
f01262df:	83 ec 04             	sub    $0x4,%esp
f01262e2:	68 c0 99 13 f0       	push   $0xf01399c0
f01262e7:	68 04 0b 00 00       	push   $0xb04
f01262ec:	68 0e 91 13 f0       	push   $0xf013910e
f01262f1:	e8 ba 9e fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01262f6:	e8 85 66 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01262fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01262fe:	e8 23 e3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126303:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0126306:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012630c:	83 ec 0c             	sub    $0xc,%esp
f012630f:	50                   	push   %eax
f0126310:	e8 06 1c fe ff       	call   f0107f1b <kfree>
f0126315:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126318:	e8 09 e3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012631d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126320:	74 17                	je     f0126339 <test_kfreeall+0x13ec>
f0126322:	83 ec 04             	sub    $0x4,%esp
f0126325:	68 28 91 13 f0       	push   $0xf0139128
f012632a:	68 0a 0b 00 00       	push   $0xb0a
f012632f:	68 0e 91 13 f0       	push   $0xf013910e
f0126334:	e8 77 9e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126339:	e8 42 66 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012633e:	89 c2                	mov    %eax,%edx
f0126340:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126343:	39 c2                	cmp    %eax,%edx
f0126345:	74 17                	je     f012635e <test_kfreeall+0x1411>
f0126347:	83 ec 04             	sub    $0x4,%esp
f012634a:	68 c0 99 13 f0       	push   $0xf01399c0
f012634f:	68 0b 0b 00 00       	push   $0xb0b
f0126354:	68 0e 91 13 f0       	push   $0xf013910e
f0126359:	e8 52 9e fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012635e:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0126365:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012636c:	eb 48                	jmp    f01263b6 <test_kfreeall+0x1469>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012636e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0126371:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f0126376:	83 ec 04             	sub    $0x4,%esp
f0126379:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f012637f:	51                   	push   %ecx
f0126380:	52                   	push   %edx
f0126381:	50                   	push   %eax
f0126382:	e8 02 11 fe ff       	call   f0107489 <get_page_table>
f0126387:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012638a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126390:	85 c0                	test   %eax,%eax
f0126392:	75 17                	jne    f01263ab <test_kfreeall+0x145e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0126394:	83 ec 04             	sub    $0x4,%esp
f0126397:	68 10 9a 13 f0       	push   $0xf0139a10
f012639c:	68 18 0b 00 00       	push   $0xb18
f01263a1:	68 0e 91 13 f0       	push   $0xf013910e
f01263a6:	e8 05 9e fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01263ab:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01263b2:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01263b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01263ba:	78 b2                	js     f012636e <test_kfreeall+0x1421>
f01263bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01263c0:	7f 09                	jg     f01263cb <test_kfreeall+0x147e>
f01263c2:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01263c9:	76 a3                	jbe    f012636e <test_kfreeall+0x1421>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01263cb:	83 ec 0c             	sub    $0xc,%esp
f01263ce:	68 6c 9e 13 f0       	push   $0xf0139e6c
f01263d3:	e8 59 aa fd ff       	call   f0100e31 <cprintf>
f01263d8:	83 c4 10             	add    $0x10,%esp

	return 1;
f01263db:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01263e0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01263e3:	5b                   	pop    %ebx
f01263e4:	5f                   	pop    %edi
f01263e5:	5d                   	pop    %ebp
f01263e6:	c3                   	ret    

f01263e7 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f01263e7:	55                   	push   %ebp
f01263e8:	89 e5                	mov    %esp,%ebp
f01263ea:	57                   	push   %edi
f01263eb:	53                   	push   %ebx
f01263ec:	81 ec 50 01 00 00    	sub    $0x150,%esp
	char minByte = 1<<7;
f01263f2:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01263f6:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01263fa:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126400:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126406:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012640d:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126414:	e8 67 65 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126419:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012641c:	8d 95 fc fe ff ff    	lea    -0x104(%ebp),%edx
f0126422:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126427:	b8 00 00 00 00       	mov    $0x0,%eax
f012642c:	89 d7                	mov    %edx,%edi
f012642e:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0126430:	8d 95 ac fe ff ff    	lea    -0x154(%ebp),%edx
f0126436:	b9 14 00 00 00       	mov    $0x14,%ecx
f012643b:	b8 00 00 00 00       	mov    $0x0,%eax
f0126440:	89 d7                	mov    %edx,%edi
f0126442:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126444:	e8 37 65 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126449:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012644c:	e8 d5 e1 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126451:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126454:	83 ec 0c             	sub    $0xc,%esp
f0126457:	68 00 fc 1f 00       	push   $0x1ffc00
f012645c:	e8 a0 1a fe ff       	call   f0107f01 <kmalloc>
f0126461:	83 c4 10             	add    $0x10,%esp
f0126464:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012646a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0126470:	89 c1                	mov    %eax,%ecx
f0126472:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0126479:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012647e:	0f b6 d0             	movzbl %al,%edx
f0126481:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126484:	01 d0                	add    %edx,%eax
f0126486:	48                   	dec    %eax
f0126487:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012648a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012648d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126492:	f7 75 d4             	divl   -0x2c(%ebp)
f0126495:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126498:	29 d0                	sub    %edx,%eax
f012649a:	89 c3                	mov    %eax,%ebx
f012649c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01264a3:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01264a8:	0f b6 c0             	movzbl %al,%eax
f01264ab:	c1 e0 04             	shl    $0x4,%eax
f01264ae:	89 c2                	mov    %eax,%edx
f01264b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01264b3:	01 d0                	add    %edx,%eax
f01264b5:	48                   	dec    %eax
f01264b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01264b9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01264bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01264c1:	f7 75 cc             	divl   -0x34(%ebp)
f01264c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01264c7:	29 d0                	sub    %edx,%eax
f01264c9:	01 d8                	add    %ebx,%eax
f01264cb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01264d0:	39 c1                	cmp    %eax,%ecx
f01264d2:	74 17                	je     f01264eb <test_kexpand+0x104>
f01264d4:	83 ec 04             	sub    $0x4,%esp
f01264d7:	68 f4 91 13 f0       	push   $0xf01391f4
f01264dc:	68 43 0b 00 00       	push   $0xb43
f01264e1:	68 0e 91 13 f0       	push   $0xf013910e
f01264e6:	e8 c5 9c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01264eb:	e8 36 e1 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01264f0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01264f3:	74 17                	je     f012650c <test_kexpand+0x125>
f01264f5:	83 ec 04             	sub    $0x4,%esp
f01264f8:	68 28 91 13 f0       	push   $0xf0139128
f01264fd:	68 44 0b 00 00       	push   $0xb44
f0126502:	68 0e 91 13 f0       	push   $0xf013910e
f0126507:	e8 a4 9c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012650c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012650f:	e8 6c 64 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126514:	29 c3                	sub    %eax,%ebx
f0126516:	89 d8                	mov    %ebx,%eax
f0126518:	3d 00 02 00 00       	cmp    $0x200,%eax
f012651d:	74 17                	je     f0126536 <test_kexpand+0x14f>
f012651f:	83 ec 04             	sub    $0x4,%esp
f0126522:	68 90 91 13 f0       	push   $0xf0139190
f0126527:	68 45 0b 00 00       	push   $0xb45
f012652c:	68 0e 91 13 f0       	push   $0xf013910e
f0126531:	e8 7a 9c fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126536:	c7 85 fc fe ff ff ff 	movl   $0x1ffbff,-0x104(%ebp)
f012653d:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126540:	e8 3b 64 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126545:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126548:	e8 d9 e0 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012654d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126550:	83 ec 0c             	sub    $0xc,%esp
f0126553:	68 00 fc 1f 00       	push   $0x1ffc00
f0126558:	e8 a4 19 fe ff       	call   f0107f01 <kmalloc>
f012655d:	83 c4 10             	add    $0x10,%esp
f0126560:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126566:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012656c:	89 c1                	mov    %eax,%ecx
f012656e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126575:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012657a:	0f b6 d0             	movzbl %al,%edx
f012657d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126580:	01 d0                	add    %edx,%eax
f0126582:	48                   	dec    %eax
f0126583:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126586:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126589:	ba 00 00 00 00       	mov    $0x0,%edx
f012658e:	f7 75 c4             	divl   -0x3c(%ebp)
f0126591:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126594:	29 d0                	sub    %edx,%eax
f0126596:	89 c3                	mov    %eax,%ebx
f0126598:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012659f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01265a4:	0f b6 c0             	movzbl %al,%eax
f01265a7:	c1 e0 04             	shl    $0x4,%eax
f01265aa:	89 c2                	mov    %eax,%edx
f01265ac:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01265af:	01 d0                	add    %edx,%eax
f01265b1:	48                   	dec    %eax
f01265b2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01265b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01265b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01265bd:	f7 75 bc             	divl   -0x44(%ebp)
f01265c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01265c3:	29 d0                	sub    %edx,%eax
f01265c5:	01 d8                	add    %ebx,%eax
f01265c7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01265cc:	39 c1                	cmp    %eax,%ecx
f01265ce:	74 17                	je     f01265e7 <test_kexpand+0x200>
f01265d0:	83 ec 04             	sub    $0x4,%esp
f01265d3:	68 f4 91 13 f0       	push   $0xf01391f4
f01265d8:	68 4c 0b 00 00       	push   $0xb4c
f01265dd:	68 0e 91 13 f0       	push   $0xf013910e
f01265e2:	e8 c9 9b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265e7:	e8 3a e0 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01265ec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01265ef:	74 17                	je     f0126608 <test_kexpand+0x221>
f01265f1:	83 ec 04             	sub    $0x4,%esp
f01265f4:	68 28 91 13 f0       	push   $0xf0139128
f01265f9:	68 4d 0b 00 00       	push   $0xb4d
f01265fe:	68 0e 91 13 f0       	push   $0xf013910e
f0126603:	e8 a8 9b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126608:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012660b:	e8 70 63 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126610:	29 c3                	sub    %eax,%ebx
f0126612:	89 d8                	mov    %ebx,%eax
f0126614:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126619:	74 17                	je     f0126632 <test_kexpand+0x24b>
f012661b:	83 ec 04             	sub    $0x4,%esp
f012661e:	68 90 91 13 f0       	push   $0xf0139190
f0126623:	68 4e 0b 00 00       	push   $0xb4e
f0126628:	68 0e 91 13 f0       	push   $0xf013910e
f012662d:	e8 7e 9b fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126632:	c7 85 00 ff ff ff ff 	movl   $0x1ffbff,-0x100(%ebp)
f0126639:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012663c:	e8 3f 63 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126641:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126644:	e8 dd df fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126649:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012664c:	83 ec 0c             	sub    $0xc,%esp
f012664f:	68 00 08 00 00       	push   $0x800
f0126654:	e8 a8 18 fe ff       	call   f0107f01 <kmalloc>
f0126659:	83 c4 10             	add    $0x10,%esp
f012665c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126662:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0126668:	89 c1                	mov    %eax,%ecx
f012666a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0126671:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0126676:	0f b6 d0             	movzbl %al,%edx
f0126679:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012667c:	01 d0                	add    %edx,%eax
f012667e:	48                   	dec    %eax
f012667f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0126682:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126685:	ba 00 00 00 00       	mov    $0x0,%edx
f012668a:	f7 75 b4             	divl   -0x4c(%ebp)
f012668d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126690:	29 d0                	sub    %edx,%eax
f0126692:	89 c3                	mov    %eax,%ebx
f0126694:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012669b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01266a0:	0f b6 c0             	movzbl %al,%eax
f01266a3:	c1 e0 04             	shl    $0x4,%eax
f01266a6:	89 c2                	mov    %eax,%edx
f01266a8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01266ab:	01 d0                	add    %edx,%eax
f01266ad:	48                   	dec    %eax
f01266ae:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01266b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01266b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01266b9:	f7 75 ac             	divl   -0x54(%ebp)
f01266bc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01266bf:	29 d0                	sub    %edx,%eax
f01266c1:	01 d8                	add    %ebx,%eax
f01266c3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01266c8:	39 c1                	cmp    %eax,%ecx
f01266ca:	74 17                	je     f01266e3 <test_kexpand+0x2fc>
f01266cc:	83 ec 04             	sub    $0x4,%esp
f01266cf:	68 f4 91 13 f0       	push   $0xf01391f4
f01266d4:	68 55 0b 00 00       	push   $0xb55
f01266d9:	68 0e 91 13 f0       	push   $0xf013910e
f01266de:	e8 cd 9a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01266e3:	e8 3e df fd ff       	call   f0104626 <pf_calculate_free_frames>
f01266e8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01266eb:	74 17                	je     f0126704 <test_kexpand+0x31d>
f01266ed:	83 ec 04             	sub    $0x4,%esp
f01266f0:	68 28 91 13 f0       	push   $0xf0139128
f01266f5:	68 56 0b 00 00       	push   $0xb56
f01266fa:	68 0e 91 13 f0       	push   $0xf013910e
f01266ff:	e8 ac 9a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126704:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126707:	e8 74 62 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012670c:	29 c3                	sub    %eax,%ebx
f012670e:	89 d8                	mov    %ebx,%eax
f0126710:	83 f8 01             	cmp    $0x1,%eax
f0126713:	74 17                	je     f012672c <test_kexpand+0x345>
f0126715:	83 ec 04             	sub    $0x4,%esp
f0126718:	68 90 91 13 f0       	push   $0xf0139190
f012671d:	68 57 0b 00 00       	push   $0xb57
f0126722:	68 0e 91 13 f0       	push   $0xf013910e
f0126727:	e8 84 9a fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012672c:	c7 85 04 ff ff ff ff 	movl   $0x7ff,-0xfc(%ebp)
f0126733:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126736:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012673c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012673f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126746:	eb 0e                	jmp    f0126756 <test_kexpand+0x36f>
		{
			ptr[i] = 2 ;
f0126748:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012674b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012674e:	01 d0                	add    %edx,%eax
f0126750:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126753:	ff 45 f4             	incl   -0xc(%ebp)
f0126756:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012675c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012675f:	7f e7                	jg     f0126748 <test_kexpand+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126761:	e8 1a 62 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126766:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126769:	e8 b8 de fd ff       	call   f0104626 <pf_calculate_free_frames>
f012676e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126771:	83 ec 0c             	sub    $0xc,%esp
f0126774:	68 00 08 00 00       	push   $0x800
f0126779:	e8 83 17 fe ff       	call   f0107f01 <kmalloc>
f012677e:	83 c4 10             	add    $0x10,%esp
f0126781:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126787:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012678d:	89 c1                	mov    %eax,%ecx
f012678f:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126796:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012679b:	0f b6 d0             	movzbl %al,%edx
f012679e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01267a1:	01 d0                	add    %edx,%eax
f01267a3:	48                   	dec    %eax
f01267a4:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01267a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01267aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01267af:	f7 75 a0             	divl   -0x60(%ebp)
f01267b2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01267b5:	29 d0                	sub    %edx,%eax
f01267b7:	89 c3                	mov    %eax,%ebx
f01267b9:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01267c0:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01267c5:	0f b6 c0             	movzbl %al,%eax
f01267c8:	c1 e0 04             	shl    $0x4,%eax
f01267cb:	89 c2                	mov    %eax,%edx
f01267cd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01267d0:	01 d0                	add    %edx,%eax
f01267d2:	48                   	dec    %eax
f01267d3:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01267d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01267d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01267de:	f7 75 98             	divl   -0x68(%ebp)
f01267e1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01267e4:	29 d0                	sub    %edx,%eax
f01267e6:	01 d8                	add    %ebx,%eax
f01267e8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01267ed:	39 c1                	cmp    %eax,%ecx
f01267ef:	74 17                	je     f0126808 <test_kexpand+0x421>
f01267f1:	83 ec 04             	sub    $0x4,%esp
f01267f4:	68 f4 91 13 f0       	push   $0xf01391f4
f01267f9:	68 63 0b 00 00       	push   $0xb63
f01267fe:	68 0e 91 13 f0       	push   $0xf013910e
f0126803:	e8 a8 99 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126808:	e8 19 de fd ff       	call   f0104626 <pf_calculate_free_frames>
f012680d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126810:	74 17                	je     f0126829 <test_kexpand+0x442>
f0126812:	83 ec 04             	sub    $0x4,%esp
f0126815:	68 28 91 13 f0       	push   $0xf0139128
f012681a:	68 64 0b 00 00       	push   $0xb64
f012681f:	68 0e 91 13 f0       	push   $0xf013910e
f0126824:	e8 87 99 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126829:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012682c:	e8 4f 61 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126831:	29 c3                	sub    %eax,%ebx
f0126833:	89 d8                	mov    %ebx,%eax
f0126835:	83 f8 01             	cmp    $0x1,%eax
f0126838:	74 17                	je     f0126851 <test_kexpand+0x46a>
f012683a:	83 ec 04             	sub    $0x4,%esp
f012683d:	68 90 91 13 f0       	push   $0xf0139190
f0126842:	68 65 0b 00 00       	push   $0xb65
f0126847:	68 0e 91 13 f0       	push   $0xf013910e
f012684c:	e8 5f 99 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126851:	c7 85 08 ff ff ff ff 	movl   $0x7ff,-0xf8(%ebp)
f0126858:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012685b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126861:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126864:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012686b:	eb 0e                	jmp    f012687b <test_kexpand+0x494>
		{
			ptr[i] = 3 ;
f012686d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126870:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126873:	01 d0                	add    %edx,%eax
f0126875:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126878:	ff 45 f4             	incl   -0xc(%ebp)
f012687b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126881:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126884:	7f e7                	jg     f012686d <test_kexpand+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126886:	e8 f5 60 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012688b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012688e:	e8 93 dd fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126893:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126896:	83 ec 0c             	sub    $0xc,%esp
f0126899:	68 00 1c 00 00       	push   $0x1c00
f012689e:	e8 5e 16 fe ff       	call   f0107f01 <kmalloc>
f01268a3:	83 c4 10             	add    $0x10,%esp
f01268a6:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01268ac:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01268b2:	89 c1                	mov    %eax,%ecx
f01268b4:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01268bb:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01268c0:	0f b6 d0             	movzbl %al,%edx
f01268c3:	8b 45 90             	mov    -0x70(%ebp),%eax
f01268c6:	01 d0                	add    %edx,%eax
f01268c8:	48                   	dec    %eax
f01268c9:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01268cc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01268cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01268d4:	f7 75 90             	divl   -0x70(%ebp)
f01268d7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01268da:	29 d0                	sub    %edx,%eax
f01268dc:	89 c3                	mov    %eax,%ebx
f01268de:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01268e5:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01268ea:	0f b6 c0             	movzbl %al,%eax
f01268ed:	c1 e0 04             	shl    $0x4,%eax
f01268f0:	89 c2                	mov    %eax,%edx
f01268f2:	8b 45 88             	mov    -0x78(%ebp),%eax
f01268f5:	01 d0                	add    %edx,%eax
f01268f7:	48                   	dec    %eax
f01268f8:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01268fb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01268fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0126903:	f7 75 88             	divl   -0x78(%ebp)
f0126906:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126909:	29 d0                	sub    %edx,%eax
f012690b:	01 d8                	add    %ebx,%eax
f012690d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126912:	39 c1                	cmp    %eax,%ecx
f0126914:	74 17                	je     f012692d <test_kexpand+0x546>
f0126916:	83 ec 04             	sub    $0x4,%esp
f0126919:	68 f4 91 13 f0       	push   $0xf01391f4
f012691e:	68 71 0b 00 00       	push   $0xb71
f0126923:	68 0e 91 13 f0       	push   $0xf013910e
f0126928:	e8 83 98 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012692d:	e8 f4 dc fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126932:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126935:	74 17                	je     f012694e <test_kexpand+0x567>
f0126937:	83 ec 04             	sub    $0x4,%esp
f012693a:	68 28 91 13 f0       	push   $0xf0139128
f012693f:	68 72 0b 00 00       	push   $0xb72
f0126944:	68 0e 91 13 f0       	push   $0xf013910e
f0126949:	e8 62 98 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012694e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126951:	e8 2a 60 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126956:	29 c3                	sub    %eax,%ebx
f0126958:	89 d8                	mov    %ebx,%eax
f012695a:	83 f8 02             	cmp    $0x2,%eax
f012695d:	74 17                	je     f0126976 <test_kexpand+0x58f>
f012695f:	83 ec 04             	sub    $0x4,%esp
f0126962:	68 90 91 13 f0       	push   $0xf0139190
f0126967:	68 73 0b 00 00       	push   $0xb73
f012696c:	68 0e 91 13 f0       	push   $0xf013910e
f0126971:	e8 3a 98 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126976:	c7 85 0c ff ff ff ff 	movl   $0x1bff,-0xf4(%ebp)
f012697d:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126980:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126986:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126990:	eb 0e                	jmp    f01269a0 <test_kexpand+0x5b9>
		{
			ptr[i] = 4 ;
f0126992:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126995:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126998:	01 d0                	add    %edx,%eax
f012699a:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012699d:	ff 45 f4             	incl   -0xc(%ebp)
f01269a0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01269a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01269a9:	7f e7                	jg     f0126992 <test_kexpand+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01269ab:	e8 d0 5f fe ff       	call   f010c980 <sys_calculate_free_frames>
f01269b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269b3:	e8 6e dc fd ff       	call   f0104626 <pf_calculate_free_frames>
f01269b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01269bb:	83 ec 0c             	sub    $0xc,%esp
f01269be:	68 00 fc 2f 00       	push   $0x2ffc00
f01269c3:	e8 39 15 fe ff       	call   f0107f01 <kmalloc>
f01269c8:	83 c4 10             	add    $0x10,%esp
f01269cb:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01269d1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01269d7:	89 c1                	mov    %eax,%ecx
f01269d9:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01269e0:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01269e5:	0f b6 d0             	movzbl %al,%edx
f01269e8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01269eb:	01 d0                	add    %edx,%eax
f01269ed:	48                   	dec    %eax
f01269ee:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01269f4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01269fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01269ff:	f7 75 80             	divl   -0x80(%ebp)
f0126a02:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126a08:	29 d0                	sub    %edx,%eax
f0126a0a:	89 c3                	mov    %eax,%ebx
f0126a0c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0126a13:	10 00 00 
f0126a16:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0126a1b:	0f b6 c0             	movzbl %al,%eax
f0126a1e:	c1 e0 04             	shl    $0x4,%eax
f0126a21:	89 c2                	mov    %eax,%edx
f0126a23:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126a29:	01 d0                	add    %edx,%eax
f0126a2b:	48                   	dec    %eax
f0126a2c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0126a32:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126a38:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a3d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0126a43:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126a49:	29 d0                	sub    %edx,%eax
f0126a4b:	01 d8                	add    %ebx,%eax
f0126a4d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126a52:	39 c1                	cmp    %eax,%ecx
f0126a54:	74 17                	je     f0126a6d <test_kexpand+0x686>
f0126a56:	83 ec 04             	sub    $0x4,%esp
f0126a59:	68 f4 91 13 f0       	push   $0xf01391f4
f0126a5e:	68 7f 0b 00 00       	push   $0xb7f
f0126a63:	68 0e 91 13 f0       	push   $0xf013910e
f0126a68:	e8 43 97 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a6d:	e8 b4 db fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126a72:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126a75:	74 17                	je     f0126a8e <test_kexpand+0x6a7>
f0126a77:	83 ec 04             	sub    $0x4,%esp
f0126a7a:	68 28 91 13 f0       	push   $0xf0139128
f0126a7f:	68 80 0b 00 00       	push   $0xb80
f0126a84:	68 0e 91 13 f0       	push   $0xf013910e
f0126a89:	e8 22 97 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a8e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126a91:	e8 ea 5e fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126a96:	29 c3                	sub    %eax,%ebx
f0126a98:	89 d8                	mov    %ebx,%eax
f0126a9a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126a9f:	74 17                	je     f0126ab8 <test_kexpand+0x6d1>
f0126aa1:	83 ec 04             	sub    $0x4,%esp
f0126aa4:	68 90 91 13 f0       	push   $0xf0139190
f0126aa9:	68 81 0b 00 00       	push   $0xb81
f0126aae:	68 0e 91 13 f0       	push   $0xf013910e
f0126ab3:	e8 f8 96 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126ab8:	c7 85 10 ff ff ff ff 	movl   $0x2ffbff,-0xf0(%ebp)
f0126abf:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126ac2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126ac8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126acb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126ad2:	eb 0e                	jmp    f0126ae2 <test_kexpand+0x6fb>
		{
			ptr[i] = 5 ;
f0126ad4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126ad7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126ada:	01 d0                	add    %edx,%eax
f0126adc:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126adf:	ff 45 f4             	incl   -0xc(%ebp)
f0126ae2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126ae8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126aeb:	7f e7                	jg     f0126ad4 <test_kexpand+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126aed:	e8 8e 5e fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126af2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126af5:	e8 2c db fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126afa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0126afd:	83 ec 0c             	sub    $0xc,%esp
f0126b00:	68 00 00 60 00       	push   $0x600000
f0126b05:	e8 f7 13 fe ff       	call   f0107f01 <kmalloc>
f0126b0a:	83 c4 10             	add    $0x10,%esp
f0126b0d:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126b13:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126b19:	89 c1                	mov    %eax,%ecx
f0126b1b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0126b22:	10 00 00 
f0126b25:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0126b2a:	0f b6 d0             	movzbl %al,%edx
f0126b2d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126b33:	01 d0                	add    %edx,%eax
f0126b35:	48                   	dec    %eax
f0126b36:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0126b3c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126b42:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b47:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0126b4d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126b53:	29 d0                	sub    %edx,%eax
f0126b55:	89 c3                	mov    %eax,%ebx
f0126b57:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0126b5e:	10 00 00 
f0126b61:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0126b66:	0f b6 c0             	movzbl %al,%eax
f0126b69:	c1 e0 04             	shl    $0x4,%eax
f0126b6c:	89 c2                	mov    %eax,%edx
f0126b6e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126b74:	01 d0                	add    %edx,%eax
f0126b76:	48                   	dec    %eax
f0126b77:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0126b7d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126b83:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b88:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0126b8e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126b94:	29 d0                	sub    %edx,%eax
f0126b96:	01 d8                	add    %ebx,%eax
f0126b98:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126b9d:	39 c1                	cmp    %eax,%ecx
f0126b9f:	74 17                	je     f0126bb8 <test_kexpand+0x7d1>
f0126ba1:	83 ec 04             	sub    $0x4,%esp
f0126ba4:	68 f4 91 13 f0       	push   $0xf01391f4
f0126ba9:	68 8d 0b 00 00       	push   $0xb8d
f0126bae:	68 0e 91 13 f0       	push   $0xf013910e
f0126bb3:	e8 f8 95 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126bb8:	e8 69 da fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126bbd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126bc0:	74 17                	je     f0126bd9 <test_kexpand+0x7f2>
f0126bc2:	83 ec 04             	sub    $0x4,%esp
f0126bc5:	68 28 91 13 f0       	push   $0xf0139128
f0126bca:	68 8e 0b 00 00       	push   $0xb8e
f0126bcf:	68 0e 91 13 f0       	push   $0xf013910e
f0126bd4:	e8 d7 95 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126bd9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126bdc:	e8 9f 5d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126be1:	29 c3                	sub    %eax,%ebx
f0126be3:	89 d8                	mov    %ebx,%eax
f0126be5:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126bea:	74 17                	je     f0126c03 <test_kexpand+0x81c>
f0126bec:	83 ec 04             	sub    $0x4,%esp
f0126bef:	68 90 91 13 f0       	push   $0xf0139190
f0126bf4:	68 8f 0b 00 00       	push   $0xb8f
f0126bf9:	68 0e 91 13 f0       	push   $0xf013910e
f0126bfe:	e8 ad 95 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0126c03:	c7 85 14 ff ff ff ff 	movl   $0x17ffff,-0xec(%ebp)
f0126c0a:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0126c0d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126c13:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0126c19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c20:	eb 1a                	jmp    f0126c3c <test_kexpand+0x855>
		{
			arr[i] = i ;
f0126c22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126c25:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126c2c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126c32:	01 c2                	add    %eax,%edx
f0126c34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126c37:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0126c39:	ff 45 f4             	incl   -0xc(%ebp)
f0126c3c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126c42:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c45:	7d db                	jge    f0126c22 <test_kexpand+0x83b>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0126c47:	c7 85 5c ff ff ff ff 	movl   $0x1bffff,-0xa4(%ebp)
f0126c4e:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0126c51:	e8 2a 5d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126c56:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c59:	e8 c8 d9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126c5e:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0126c61:	83 ec 0c             	sub    $0xc,%esp
f0126c64:	68 00 00 70 00       	push   $0x700000
f0126c69:	e8 2f 13 fe ff       	call   f0107f9d <kexpand>
f0126c6e:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126c71:	e8 b0 d9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126c76:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126c79:	74 19                	je     f0126c94 <test_kexpand+0x8ad>
f0126c7b:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0126c80:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0126c85:	68 a0 0b 00 00       	push   $0xba0
f0126c8a:	68 0e 91 13 f0       	push   $0xf013910e
f0126c8f:	e8 1c 95 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0126c94:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126c97:	e8 e4 5c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126c9c:	29 c3                	sub    %eax,%ebx
f0126c9e:	89 d8                	mov    %ebx,%eax
f0126ca0:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126ca5:	74 19                	je     f0126cc0 <test_kexpand+0x8d9>
f0126ca7:	68 f0 9e 13 f0       	push   $0xf0139ef0
f0126cac:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0126cb1:	68 a1 0b 00 00       	push   $0xba1
f0126cb6:	68 0e 91 13 f0       	push   $0xf013910e
f0126cbb:	e8 f0 94 fd ff       	call   f01001b0 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126cc0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126cc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0126cc9:	eb 1a                	jmp    f0126ce5 <test_kexpand+0x8fe>
		{
			arr[i] = i ;
f0126ccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126cce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126cd5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126cdb:	01 c2                	add    %eax,%edx
f0126cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126ce0:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126ce2:	ff 45 f4             	incl   -0xc(%ebp)
f0126ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126ce8:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126cee:	7c db                	jl     f0126ccb <test_kexpand+0x8e4>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126cf0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126cf7:	eb 37                	jmp    f0126d30 <test_kexpand+0x949>
		{
			assert(arr[i] ==i);
f0126cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126cfc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126d03:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126d09:	01 d0                	add    %edx,%eax
f0126d0b:	8b 10                	mov    (%eax),%edx
f0126d0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d10:	39 c2                	cmp    %eax,%edx
f0126d12:	74 19                	je     f0126d2d <test_kexpand+0x946>
f0126d14:	68 20 9f 13 f0       	push   $0xf0139f20
f0126d19:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0126d1e:	68 ad 0b 00 00       	push   $0xbad
f0126d23:	68 0e 91 13 f0       	push   $0xf013910e
f0126d28:	e8 83 94 fd ff       	call   f01001b0 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126d2d:	ff 45 f4             	incl   -0xc(%ebp)
f0126d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d33:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126d39:	7c be                	jl     f0126cf9 <test_kexpand+0x912>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126d3b:	e8 40 5c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126d40:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d43:	e8 de d8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126d48:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0126d4b:	83 ec 0c             	sub    $0xc,%esp
f0126d4e:	68 00 00 a0 00       	push   $0xa00000
f0126d53:	e8 45 12 fe ff       	call   f0107f9d <kexpand>
f0126d58:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126d5b:	e8 c6 d8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126d60:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126d63:	74 19                	je     f0126d7e <test_kexpand+0x997>
f0126d65:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0126d6a:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0126d6f:	68 b8 0b 00 00       	push   $0xbb8
f0126d74:	68 0e 91 13 f0       	push   $0xf013910e
f0126d79:	e8 32 94 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0126d7e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126d81:	e8 fa 5b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126d86:	29 c3                	sub    %eax,%ebx
f0126d88:	89 d8                	mov    %ebx,%eax
f0126d8a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126d8f:	74 19                	je     f0126daa <test_kexpand+0x9c3>
f0126d91:	68 2c 9f 13 f0       	push   $0xf0139f2c
f0126d96:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0126d9b:	68 b9 0b 00 00       	push   $0xbb9
f0126da0:	68 0e 91 13 f0       	push   $0xf013910e
f0126da5:	e8 06 94 fd ff       	call   f01001b0 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126daa:	e8 d1 5b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126daf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126db2:	e8 6f d8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126db7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0126dba:	83 ec 0c             	sub    $0xc,%esp
f0126dbd:	68 00 00 40 00       	push   $0x400000
f0126dc2:	e8 3a 11 fe ff       	call   f0107f01 <kmalloc>
f0126dc7:	83 c4 10             	add    $0x10,%esp
f0126dca:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0126dd0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126dd6:	89 c1                	mov    %eax,%ecx
f0126dd8:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0126ddf:	10 00 00 
f0126de2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0126de7:	0f b6 d0             	movzbl %al,%edx
f0126dea:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126df0:	01 d0                	add    %edx,%eax
f0126df2:	48                   	dec    %eax
f0126df3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0126df9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126dff:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e04:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0126e0a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126e10:	29 d0                	sub    %edx,%eax
f0126e12:	89 c3                	mov    %eax,%ebx
f0126e14:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0126e1b:	10 00 00 
f0126e1e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0126e23:	0f b6 c0             	movzbl %al,%eax
f0126e26:	c1 e0 04             	shl    $0x4,%eax
f0126e29:	89 c2                	mov    %eax,%edx
f0126e2b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126e31:	01 d0                	add    %edx,%eax
f0126e33:	48                   	dec    %eax
f0126e34:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0126e3a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126e40:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e45:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0126e4b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126e51:	29 d0                	sub    %edx,%eax
f0126e53:	01 d8                	add    %ebx,%eax
f0126e55:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0126e5a:	39 c1                	cmp    %eax,%ecx
f0126e5c:	74 17                	je     f0126e75 <test_kexpand+0xa8e>
f0126e5e:	83 ec 04             	sub    $0x4,%esp
f0126e61:	68 5c 9f 13 f0       	push   $0xf0139f5c
f0126e66:	68 c4 0b 00 00       	push   $0xbc4
f0126e6b:	68 0e 91 13 f0       	push   $0xf013910e
f0126e70:	e8 3b 93 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e75:	e8 ac d7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126e7a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126e7d:	74 17                	je     f0126e96 <test_kexpand+0xaaf>
f0126e7f:	83 ec 04             	sub    $0x4,%esp
f0126e82:	68 28 91 13 f0       	push   $0xf0139128
f0126e87:	68 c5 0b 00 00       	push   $0xbc5
f0126e8c:	68 0e 91 13 f0       	push   $0xf013910e
f0126e91:	e8 1a 93 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e96:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126e99:	e8 e2 5a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126e9e:	29 c3                	sub    %eax,%ebx
f0126ea0:	89 d8                	mov    %ebx,%eax
f0126ea2:	3d 00 04 00 00       	cmp    $0x400,%eax
f0126ea7:	74 17                	je     f0126ec0 <test_kexpand+0xad9>
f0126ea9:	83 ec 04             	sub    $0x4,%esp
f0126eac:	68 90 91 13 f0       	push   $0xf0139190
f0126eb1:	68 c6 0b 00 00       	push   $0xbc6
f0126eb6:	68 0e 91 13 f0       	push   $0xf013910e
f0126ebb:	e8 f0 92 fd ff       	call   f01001b0 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0126ec0:	e8 bb 5a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126ec5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ec8:	e8 59 d7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126ecd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0126ed0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126ed6:	83 ec 0c             	sub    $0xc,%esp
f0126ed9:	50                   	push   %eax
f0126eda:	e8 3c 10 fe ff       	call   f0107f1b <kfree>
f0126edf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ee2:	e8 3f d7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126ee7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126eea:	74 17                	je     f0126f03 <test_kexpand+0xb1c>
f0126eec:	83 ec 04             	sub    $0x4,%esp
f0126eef:	68 28 91 13 f0       	push   $0xf0139128
f0126ef4:	68 cf 0b 00 00       	push   $0xbcf
f0126ef9:	68 0e 91 13 f0       	push   $0xf013910e
f0126efe:	e8 ad 92 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126f03:	e8 78 5a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126f08:	89 c2                	mov    %eax,%edx
f0126f0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0126f0d:	29 c2                	sub    %eax,%edx
f0126f0f:	89 d0                	mov    %edx,%eax
f0126f11:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0126f16:	74 17                	je     f0126f2f <test_kexpand+0xb48>
f0126f18:	83 ec 04             	sub    $0x4,%esp
f0126f1b:	68 c0 99 13 f0       	push   $0xf01399c0
f0126f20:	68 d0 0b 00 00       	push   $0xbd0
f0126f25:	68 0e 91 13 f0       	push   $0xf013910e
f0126f2a:	e8 81 92 fd ff       	call   f01001b0 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126f2f:	e8 4c 5a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126f34:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f37:	e8 ea d6 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126f3c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0126f3f:	83 ec 0c             	sub    $0xc,%esp
f0126f42:	68 00 50 40 00       	push   $0x405000
f0126f47:	e8 51 10 fe ff       	call   f0107f9d <kexpand>
f0126f4c:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126f4f:	e8 d2 d6 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0126f54:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f57:	74 19                	je     f0126f72 <test_kexpand+0xb8b>
f0126f59:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0126f5e:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0126f63:	68 da 0b 00 00       	push   $0xbda
f0126f68:	68 0e 91 13 f0       	push   $0xf013910e
f0126f6d:	e8 3e 92 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0126f72:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126f75:	e8 06 5a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126f7a:	29 c3                	sub    %eax,%ebx
f0126f7c:	89 d8                	mov    %ebx,%eax
f0126f7e:	83 f8 05             	cmp    $0x5,%eax
f0126f81:	74 19                	je     f0126f9c <test_kexpand+0xbb5>
f0126f83:	68 84 9f 13 f0       	push   $0xf0139f84
f0126f88:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0126f8d:	68 db 0b 00 00       	push   $0xbdb
f0126f92:	68 0e 91 13 f0       	push   $0xf013910e
f0126f97:	e8 14 92 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126f9c:	83 ec 0c             	sub    $0xc,%esp
f0126f9f:	68 6c 9e 13 f0       	push   $0xf0139e6c
f0126fa4:	e8 88 9e fd ff       	call   f0100e31 <cprintf>
f0126fa9:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126fac:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126fb1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126fb4:	5b                   	pop    %ebx
f0126fb5:	5f                   	pop    %edi
f0126fb6:	5d                   	pop    %ebp
f0126fb7:	c3                   	ret    

f0126fb8 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0126fb8:	55                   	push   %ebp
f0126fb9:	89 e5                	mov    %esp,%ebp
f0126fbb:	57                   	push   %edi
f0126fbc:	53                   	push   %ebx
f0126fbd:	81 ec 60 01 00 00    	sub    $0x160,%esp
	char minByte = 1<<7;
f0126fc3:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126fc7:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0126fcb:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126fd1:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126fd7:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126fde:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126fe5:	e8 96 59 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0126fea:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126fed:	8d 95 ec fe ff ff    	lea    -0x114(%ebp),%edx
f0126ff3:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0126ffd:	89 d7                	mov    %edx,%edi
f0126fff:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127001:	8d 95 9c fe ff ff    	lea    -0x164(%ebp),%edx
f0127007:	b9 14 00 00 00       	mov    $0x14,%ecx
f012700c:	b8 00 00 00 00       	mov    $0x0,%eax
f0127011:	89 d7                	mov    %edx,%edi
f0127013:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127015:	e8 66 59 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012701a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012701d:	e8 04 d6 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127022:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127025:	83 ec 0c             	sub    $0xc,%esp
f0127028:	68 00 fc 1f 00       	push   $0x1ffc00
f012702d:	e8 cf 0e fe ff       	call   f0107f01 <kmalloc>
f0127032:	83 c4 10             	add    $0x10,%esp
f0127035:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012703b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0127041:	89 c1                	mov    %eax,%ecx
f0127043:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012704a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012704f:	0f b6 d0             	movzbl %al,%edx
f0127052:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127055:	01 d0                	add    %edx,%eax
f0127057:	48                   	dec    %eax
f0127058:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012705b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012705e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127063:	f7 75 d4             	divl   -0x2c(%ebp)
f0127066:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127069:	29 d0                	sub    %edx,%eax
f012706b:	89 c3                	mov    %eax,%ebx
f012706d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127074:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127079:	0f b6 c0             	movzbl %al,%eax
f012707c:	c1 e0 04             	shl    $0x4,%eax
f012707f:	89 c2                	mov    %eax,%edx
f0127081:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127084:	01 d0                	add    %edx,%eax
f0127086:	48                   	dec    %eax
f0127087:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012708a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012708d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127092:	f7 75 cc             	divl   -0x34(%ebp)
f0127095:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127098:	29 d0                	sub    %edx,%eax
f012709a:	01 d8                	add    %ebx,%eax
f012709c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01270a1:	39 c1                	cmp    %eax,%ecx
f01270a3:	74 17                	je     f01270bc <test_kshrink+0x104>
f01270a5:	83 ec 04             	sub    $0x4,%esp
f01270a8:	68 f4 91 13 f0       	push   $0xf01391f4
f01270ad:	68 01 0c 00 00       	push   $0xc01
f01270b2:	68 0e 91 13 f0       	push   $0xf013910e
f01270b7:	e8 f4 90 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270bc:	e8 65 d5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01270c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01270c4:	74 17                	je     f01270dd <test_kshrink+0x125>
f01270c6:	83 ec 04             	sub    $0x4,%esp
f01270c9:	68 28 91 13 f0       	push   $0xf0139128
f01270ce:	68 02 0c 00 00       	push   $0xc02
f01270d3:	68 0e 91 13 f0       	push   $0xf013910e
f01270d8:	e8 d3 90 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01270dd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01270e0:	e8 9b 58 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01270e5:	29 c3                	sub    %eax,%ebx
f01270e7:	89 d8                	mov    %ebx,%eax
f01270e9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01270ee:	74 17                	je     f0127107 <test_kshrink+0x14f>
f01270f0:	83 ec 04             	sub    $0x4,%esp
f01270f3:	68 90 91 13 f0       	push   $0xf0139190
f01270f8:	68 03 0c 00 00       	push   $0xc03
f01270fd:	68 0e 91 13 f0       	push   $0xf013910e
f0127102:	e8 a9 90 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127107:	c7 85 ec fe ff ff ff 	movl   $0x1ffbff,-0x114(%ebp)
f012710e:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127111:	e8 6a 58 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127116:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127119:	e8 08 d5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012711e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127121:	83 ec 0c             	sub    $0xc,%esp
f0127124:	68 00 fc 1f 00       	push   $0x1ffc00
f0127129:	e8 d3 0d fe ff       	call   f0107f01 <kmalloc>
f012712e:	83 c4 10             	add    $0x10,%esp
f0127131:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127137:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012713d:	89 c1                	mov    %eax,%ecx
f012713f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127146:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012714b:	0f b6 d0             	movzbl %al,%edx
f012714e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127151:	01 d0                	add    %edx,%eax
f0127153:	48                   	dec    %eax
f0127154:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127157:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012715a:	ba 00 00 00 00       	mov    $0x0,%edx
f012715f:	f7 75 c4             	divl   -0x3c(%ebp)
f0127162:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127165:	29 d0                	sub    %edx,%eax
f0127167:	89 c3                	mov    %eax,%ebx
f0127169:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127170:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127175:	0f b6 c0             	movzbl %al,%eax
f0127178:	c1 e0 04             	shl    $0x4,%eax
f012717b:	89 c2                	mov    %eax,%edx
f012717d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127180:	01 d0                	add    %edx,%eax
f0127182:	48                   	dec    %eax
f0127183:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127186:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127189:	ba 00 00 00 00       	mov    $0x0,%edx
f012718e:	f7 75 bc             	divl   -0x44(%ebp)
f0127191:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127194:	29 d0                	sub    %edx,%eax
f0127196:	01 d8                	add    %ebx,%eax
f0127198:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012719d:	39 c1                	cmp    %eax,%ecx
f012719f:	74 17                	je     f01271b8 <test_kshrink+0x200>
f01271a1:	83 ec 04             	sub    $0x4,%esp
f01271a4:	68 f4 91 13 f0       	push   $0xf01391f4
f01271a9:	68 0a 0c 00 00       	push   $0xc0a
f01271ae:	68 0e 91 13 f0       	push   $0xf013910e
f01271b3:	e8 f8 8f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271b8:	e8 69 d4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01271bd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01271c0:	74 17                	je     f01271d9 <test_kshrink+0x221>
f01271c2:	83 ec 04             	sub    $0x4,%esp
f01271c5:	68 28 91 13 f0       	push   $0xf0139128
f01271ca:	68 0b 0c 00 00       	push   $0xc0b
f01271cf:	68 0e 91 13 f0       	push   $0xf013910e
f01271d4:	e8 d7 8f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01271d9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01271dc:	e8 9f 57 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01271e1:	29 c3                	sub    %eax,%ebx
f01271e3:	89 d8                	mov    %ebx,%eax
f01271e5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01271ea:	74 17                	je     f0127203 <test_kshrink+0x24b>
f01271ec:	83 ec 04             	sub    $0x4,%esp
f01271ef:	68 90 91 13 f0       	push   $0xf0139190
f01271f4:	68 0c 0c 00 00       	push   $0xc0c
f01271f9:	68 0e 91 13 f0       	push   $0xf013910e
f01271fe:	e8 ad 8f fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127203:	c7 85 f0 fe ff ff ff 	movl   $0x1ffbff,-0x110(%ebp)
f012720a:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012720d:	e8 6e 57 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127212:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127215:	e8 0c d4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012721a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012721d:	83 ec 0c             	sub    $0xc,%esp
f0127220:	68 00 08 00 00       	push   $0x800
f0127225:	e8 d7 0c fe ff       	call   f0107f01 <kmalloc>
f012722a:	83 c4 10             	add    $0x10,%esp
f012722d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127233:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0127239:	89 c1                	mov    %eax,%ecx
f012723b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127242:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127247:	0f b6 d0             	movzbl %al,%edx
f012724a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012724d:	01 d0                	add    %edx,%eax
f012724f:	48                   	dec    %eax
f0127250:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127253:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127256:	ba 00 00 00 00       	mov    $0x0,%edx
f012725b:	f7 75 b4             	divl   -0x4c(%ebp)
f012725e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127261:	29 d0                	sub    %edx,%eax
f0127263:	89 c3                	mov    %eax,%ebx
f0127265:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012726c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127271:	0f b6 c0             	movzbl %al,%eax
f0127274:	c1 e0 04             	shl    $0x4,%eax
f0127277:	89 c2                	mov    %eax,%edx
f0127279:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012727c:	01 d0                	add    %edx,%eax
f012727e:	48                   	dec    %eax
f012727f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127282:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127285:	ba 00 00 00 00       	mov    $0x0,%edx
f012728a:	f7 75 ac             	divl   -0x54(%ebp)
f012728d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127290:	29 d0                	sub    %edx,%eax
f0127292:	01 d8                	add    %ebx,%eax
f0127294:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127299:	39 c1                	cmp    %eax,%ecx
f012729b:	74 17                	je     f01272b4 <test_kshrink+0x2fc>
f012729d:	83 ec 04             	sub    $0x4,%esp
f01272a0:	68 f4 91 13 f0       	push   $0xf01391f4
f01272a5:	68 13 0c 00 00       	push   $0xc13
f01272aa:	68 0e 91 13 f0       	push   $0xf013910e
f01272af:	e8 fc 8e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01272b4:	e8 6d d3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01272b9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01272bc:	74 17                	je     f01272d5 <test_kshrink+0x31d>
f01272be:	83 ec 04             	sub    $0x4,%esp
f01272c1:	68 28 91 13 f0       	push   $0xf0139128
f01272c6:	68 14 0c 00 00       	push   $0xc14
f01272cb:	68 0e 91 13 f0       	push   $0xf013910e
f01272d0:	e8 db 8e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01272d5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01272d8:	e8 a3 56 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01272dd:	29 c3                	sub    %eax,%ebx
f01272df:	89 d8                	mov    %ebx,%eax
f01272e1:	83 f8 01             	cmp    $0x1,%eax
f01272e4:	74 17                	je     f01272fd <test_kshrink+0x345>
f01272e6:	83 ec 04             	sub    $0x4,%esp
f01272e9:	68 90 91 13 f0       	push   $0xf0139190
f01272ee:	68 15 0c 00 00       	push   $0xc15
f01272f3:	68 0e 91 13 f0       	push   $0xf013910e
f01272f8:	e8 b3 8e fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01272fd:	c7 85 f4 fe ff ff ff 	movl   $0x7ff,-0x10c(%ebp)
f0127304:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127307:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012730d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127310:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127317:	eb 0e                	jmp    f0127327 <test_kshrink+0x36f>
		{
			ptr[i] = 2 ;
f0127319:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012731c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012731f:	01 d0                	add    %edx,%eax
f0127321:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127324:	ff 45 f4             	incl   -0xc(%ebp)
f0127327:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012732d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127330:	7f e7                	jg     f0127319 <test_kshrink+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127332:	e8 49 56 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127337:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012733a:	e8 e7 d2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012733f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127342:	83 ec 0c             	sub    $0xc,%esp
f0127345:	68 00 08 00 00       	push   $0x800
f012734a:	e8 b2 0b fe ff       	call   f0107f01 <kmalloc>
f012734f:	83 c4 10             	add    $0x10,%esp
f0127352:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127358:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012735e:	89 c1                	mov    %eax,%ecx
f0127360:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0127367:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012736c:	0f b6 d0             	movzbl %al,%edx
f012736f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127372:	01 d0                	add    %edx,%eax
f0127374:	48                   	dec    %eax
f0127375:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0127378:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012737b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127380:	f7 75 a0             	divl   -0x60(%ebp)
f0127383:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127386:	29 d0                	sub    %edx,%eax
f0127388:	89 c3                	mov    %eax,%ebx
f012738a:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0127391:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127396:	0f b6 c0             	movzbl %al,%eax
f0127399:	c1 e0 04             	shl    $0x4,%eax
f012739c:	89 c2                	mov    %eax,%edx
f012739e:	8b 45 98             	mov    -0x68(%ebp),%eax
f01273a1:	01 d0                	add    %edx,%eax
f01273a3:	48                   	dec    %eax
f01273a4:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01273a7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01273aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01273af:	f7 75 98             	divl   -0x68(%ebp)
f01273b2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01273b5:	29 d0                	sub    %edx,%eax
f01273b7:	01 d8                	add    %ebx,%eax
f01273b9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01273be:	39 c1                	cmp    %eax,%ecx
f01273c0:	74 17                	je     f01273d9 <test_kshrink+0x421>
f01273c2:	83 ec 04             	sub    $0x4,%esp
f01273c5:	68 f4 91 13 f0       	push   $0xf01391f4
f01273ca:	68 21 0c 00 00       	push   $0xc21
f01273cf:	68 0e 91 13 f0       	push   $0xf013910e
f01273d4:	e8 d7 8d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273d9:	e8 48 d2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01273de:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01273e1:	74 17                	je     f01273fa <test_kshrink+0x442>
f01273e3:	83 ec 04             	sub    $0x4,%esp
f01273e6:	68 28 91 13 f0       	push   $0xf0139128
f01273eb:	68 22 0c 00 00       	push   $0xc22
f01273f0:	68 0e 91 13 f0       	push   $0xf013910e
f01273f5:	e8 b6 8d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273fa:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01273fd:	e8 7e 55 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127402:	29 c3                	sub    %eax,%ebx
f0127404:	89 d8                	mov    %ebx,%eax
f0127406:	83 f8 01             	cmp    $0x1,%eax
f0127409:	74 17                	je     f0127422 <test_kshrink+0x46a>
f012740b:	83 ec 04             	sub    $0x4,%esp
f012740e:	68 90 91 13 f0       	push   $0xf0139190
f0127413:	68 23 0c 00 00       	push   $0xc23
f0127418:	68 0e 91 13 f0       	push   $0xf013910e
f012741d:	e8 8e 8d fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127422:	c7 85 f8 fe ff ff ff 	movl   $0x7ff,-0x108(%ebp)
f0127429:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012742c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0127432:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127435:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012743c:	eb 0e                	jmp    f012744c <test_kshrink+0x494>
		{
			ptr[i] = 3 ;
f012743e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127441:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127444:	01 d0                	add    %edx,%eax
f0127446:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127449:	ff 45 f4             	incl   -0xc(%ebp)
f012744c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127452:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127455:	7f e7                	jg     f012743e <test_kshrink+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127457:	e8 24 55 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012745c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012745f:	e8 c2 d1 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127464:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127467:	83 ec 0c             	sub    $0xc,%esp
f012746a:	68 00 1c 00 00       	push   $0x1c00
f012746f:	e8 8d 0a fe ff       	call   f0107f01 <kmalloc>
f0127474:	83 c4 10             	add    $0x10,%esp
f0127477:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012747d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127483:	89 c1                	mov    %eax,%ecx
f0127485:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012748c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127491:	0f b6 d0             	movzbl %al,%edx
f0127494:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127497:	01 d0                	add    %edx,%eax
f0127499:	48                   	dec    %eax
f012749a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012749d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01274a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01274a5:	f7 75 90             	divl   -0x70(%ebp)
f01274a8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01274ab:	29 d0                	sub    %edx,%eax
f01274ad:	89 c3                	mov    %eax,%ebx
f01274af:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01274b6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01274bb:	0f b6 c0             	movzbl %al,%eax
f01274be:	c1 e0 04             	shl    $0x4,%eax
f01274c1:	89 c2                	mov    %eax,%edx
f01274c3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01274c6:	01 d0                	add    %edx,%eax
f01274c8:	48                   	dec    %eax
f01274c9:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01274cc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01274cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01274d4:	f7 75 88             	divl   -0x78(%ebp)
f01274d7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01274da:	29 d0                	sub    %edx,%eax
f01274dc:	01 d8                	add    %ebx,%eax
f01274de:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01274e3:	39 c1                	cmp    %eax,%ecx
f01274e5:	74 17                	je     f01274fe <test_kshrink+0x546>
f01274e7:	83 ec 04             	sub    $0x4,%esp
f01274ea:	68 f4 91 13 f0       	push   $0xf01391f4
f01274ef:	68 2f 0c 00 00       	push   $0xc2f
f01274f4:	68 0e 91 13 f0       	push   $0xf013910e
f01274f9:	e8 b2 8c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01274fe:	e8 23 d1 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127503:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127506:	74 17                	je     f012751f <test_kshrink+0x567>
f0127508:	83 ec 04             	sub    $0x4,%esp
f012750b:	68 28 91 13 f0       	push   $0xf0139128
f0127510:	68 30 0c 00 00       	push   $0xc30
f0127515:	68 0e 91 13 f0       	push   $0xf013910e
f012751a:	e8 91 8c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012751f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127522:	e8 59 54 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127527:	29 c3                	sub    %eax,%ebx
f0127529:	89 d8                	mov    %ebx,%eax
f012752b:	83 f8 02             	cmp    $0x2,%eax
f012752e:	74 17                	je     f0127547 <test_kshrink+0x58f>
f0127530:	83 ec 04             	sub    $0x4,%esp
f0127533:	68 90 91 13 f0       	push   $0xf0139190
f0127538:	68 31 0c 00 00       	push   $0xc31
f012753d:	68 0e 91 13 f0       	push   $0xf013910e
f0127542:	e8 69 8c fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127547:	c7 85 fc fe ff ff ff 	movl   $0x1bff,-0x104(%ebp)
f012754e:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127551:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127557:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012755a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127561:	eb 0e                	jmp    f0127571 <test_kshrink+0x5b9>
		{
			ptr[i] = 4 ;
f0127563:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127566:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127569:	01 d0                	add    %edx,%eax
f012756b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012756e:	ff 45 f4             	incl   -0xc(%ebp)
f0127571:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127577:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012757a:	7f e7                	jg     f0127563 <test_kshrink+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012757c:	e8 ff 53 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127581:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127584:	e8 9d d0 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127589:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012758c:	83 ec 0c             	sub    $0xc,%esp
f012758f:	68 00 fc 2f 00       	push   $0x2ffc00
f0127594:	e8 68 09 fe ff       	call   f0107f01 <kmalloc>
f0127599:	83 c4 10             	add    $0x10,%esp
f012759c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01275a2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01275a8:	89 c1                	mov    %eax,%ecx
f01275aa:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01275b1:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01275b6:	0f b6 d0             	movzbl %al,%edx
f01275b9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01275bc:	01 d0                	add    %edx,%eax
f01275be:	48                   	dec    %eax
f01275bf:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01275c5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01275cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01275d0:	f7 75 80             	divl   -0x80(%ebp)
f01275d3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01275d9:	29 d0                	sub    %edx,%eax
f01275db:	89 c3                	mov    %eax,%ebx
f01275dd:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01275e4:	10 00 00 
f01275e7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01275ec:	0f b6 c0             	movzbl %al,%eax
f01275ef:	c1 e0 04             	shl    $0x4,%eax
f01275f2:	89 c2                	mov    %eax,%edx
f01275f4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01275fa:	01 d0                	add    %edx,%eax
f01275fc:	48                   	dec    %eax
f01275fd:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127603:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127609:	ba 00 00 00 00       	mov    $0x0,%edx
f012760e:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127614:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012761a:	29 d0                	sub    %edx,%eax
f012761c:	01 d8                	add    %ebx,%eax
f012761e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127623:	39 c1                	cmp    %eax,%ecx
f0127625:	74 17                	je     f012763e <test_kshrink+0x686>
f0127627:	83 ec 04             	sub    $0x4,%esp
f012762a:	68 f4 91 13 f0       	push   $0xf01391f4
f012762f:	68 3d 0c 00 00       	push   $0xc3d
f0127634:	68 0e 91 13 f0       	push   $0xf013910e
f0127639:	e8 72 8b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012763e:	e8 e3 cf fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127643:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127646:	74 17                	je     f012765f <test_kshrink+0x6a7>
f0127648:	83 ec 04             	sub    $0x4,%esp
f012764b:	68 28 91 13 f0       	push   $0xf0139128
f0127650:	68 3e 0c 00 00       	push   $0xc3e
f0127655:	68 0e 91 13 f0       	push   $0xf013910e
f012765a:	e8 51 8b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012765f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127662:	e8 19 53 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127667:	29 c3                	sub    %eax,%ebx
f0127669:	89 d8                	mov    %ebx,%eax
f012766b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127670:	74 17                	je     f0127689 <test_kshrink+0x6d1>
f0127672:	83 ec 04             	sub    $0x4,%esp
f0127675:	68 90 91 13 f0       	push   $0xf0139190
f012767a:	68 3f 0c 00 00       	push   $0xc3f
f012767f:	68 0e 91 13 f0       	push   $0xf013910e
f0127684:	e8 27 8b fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127689:	c7 85 00 ff ff ff ff 	movl   $0x2ffbff,-0x100(%ebp)
f0127690:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127693:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127699:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012769c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01276a3:	eb 0e                	jmp    f01276b3 <test_kshrink+0x6fb>
		{
			ptr[i] = 5 ;
f01276a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01276a8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01276ab:	01 d0                	add    %edx,%eax
f01276ad:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01276b0:	ff 45 f4             	incl   -0xc(%ebp)
f01276b3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01276b9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01276bc:	7f e7                	jg     f01276a5 <test_kshrink+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01276be:	e8 bd 52 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01276c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276c6:	e8 5b cf fd ff       	call   f0104626 <pf_calculate_free_frames>
f01276cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01276ce:	83 ec 0c             	sub    $0xc,%esp
f01276d1:	68 00 00 60 00       	push   $0x600000
f01276d6:	e8 26 08 fe ff       	call   f0107f01 <kmalloc>
f01276db:	83 c4 10             	add    $0x10,%esp
f01276de:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01276e4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01276ea:	89 c1                	mov    %eax,%ecx
f01276ec:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01276f3:	10 00 00 
f01276f6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01276fb:	0f b6 d0             	movzbl %al,%edx
f01276fe:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127704:	01 d0                	add    %edx,%eax
f0127706:	48                   	dec    %eax
f0127707:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012770d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127713:	ba 00 00 00 00       	mov    $0x0,%edx
f0127718:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012771e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127724:	29 d0                	sub    %edx,%eax
f0127726:	89 c3                	mov    %eax,%ebx
f0127728:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012772f:	10 00 00 
f0127732:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127737:	0f b6 c0             	movzbl %al,%eax
f012773a:	c1 e0 04             	shl    $0x4,%eax
f012773d:	89 c2                	mov    %eax,%edx
f012773f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127745:	01 d0                	add    %edx,%eax
f0127747:	48                   	dec    %eax
f0127748:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012774e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127754:	ba 00 00 00 00       	mov    $0x0,%edx
f0127759:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012775f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127765:	29 d0                	sub    %edx,%eax
f0127767:	01 d8                	add    %ebx,%eax
f0127769:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012776e:	39 c1                	cmp    %eax,%ecx
f0127770:	74 17                	je     f0127789 <test_kshrink+0x7d1>
f0127772:	83 ec 04             	sub    $0x4,%esp
f0127775:	68 f4 91 13 f0       	push   $0xf01391f4
f012777a:	68 4b 0c 00 00       	push   $0xc4b
f012777f:	68 0e 91 13 f0       	push   $0xf013910e
f0127784:	e8 27 8a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127789:	e8 98 ce fd ff       	call   f0104626 <pf_calculate_free_frames>
f012778e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127791:	74 17                	je     f01277aa <test_kshrink+0x7f2>
f0127793:	83 ec 04             	sub    $0x4,%esp
f0127796:	68 28 91 13 f0       	push   $0xf0139128
f012779b:	68 4c 0c 00 00       	push   $0xc4c
f01277a0:	68 0e 91 13 f0       	push   $0xf013910e
f01277a5:	e8 06 8a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01277aa:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01277ad:	e8 ce 51 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01277b2:	29 c3                	sub    %eax,%ebx
f01277b4:	89 d8                	mov    %ebx,%eax
f01277b6:	3d 00 06 00 00       	cmp    $0x600,%eax
f01277bb:	74 17                	je     f01277d4 <test_kshrink+0x81c>
f01277bd:	83 ec 04             	sub    $0x4,%esp
f01277c0:	68 90 91 13 f0       	push   $0xf0139190
f01277c5:	68 4d 0c 00 00       	push   $0xc4d
f01277ca:	68 0e 91 13 f0       	push   $0xf013910e
f01277cf:	e8 dc 89 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01277d4:	c7 85 04 ff ff ff ff 	movl   $0x17ffff,-0xfc(%ebp)
f01277db:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01277de:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01277e4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01277ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01277f1:	eb 1a                	jmp    f012780d <test_kshrink+0x855>
		{
			arr[i] = i ;
f01277f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01277f6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01277fd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127803:	01 c2                	add    %eax,%edx
f0127805:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127808:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012780a:	ff 45 f4             	incl   -0xc(%ebp)
f012780d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127813:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127816:	7d db                	jge    f01277f3 <test_kshrink+0x83b>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127818:	e8 63 51 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012781d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127820:	e8 01 ce fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127825:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0127828:	83 ec 0c             	sub    $0xc,%esp
f012782b:	68 00 00 50 00       	push   $0x500000
f0127830:	e8 4e 07 fe ff       	call   f0107f83 <kshrink>
f0127835:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127838:	e8 e9 cd fd ff       	call   f0104626 <pf_calculate_free_frames>
f012783d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127840:	74 19                	je     f012785b <test_kshrink+0x8a3>
f0127842:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0127847:	68 d9 9e 13 f0       	push   $0xf0139ed9
f012784c:	68 5d 0c 00 00       	push   $0xc5d
f0127851:	68 0e 91 13 f0       	push   $0xf013910e
f0127856:	e8 55 89 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f012785b:	e8 20 51 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127860:	89 c2                	mov    %eax,%edx
f0127862:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127865:	29 c2                	sub    %eax,%edx
f0127867:	89 d0                	mov    %edx,%eax
f0127869:	3d 00 01 00 00       	cmp    $0x100,%eax
f012786e:	74 19                	je     f0127889 <test_kshrink+0x8d1>
f0127870:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0127875:	68 d9 9e 13 f0       	push   $0xf0139ed9
f012787a:	68 5e 0c 00 00       	push   $0xc5e
f012787f:	68 0e 91 13 f0       	push   $0xf013910e
f0127884:	e8 27 89 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0127889:	c7 85 5c ff ff ff ff 	movl   $0x13ffff,-0xa4(%ebp)
f0127890:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127893:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012789a:	eb 37                	jmp    f01278d3 <test_kshrink+0x91b>
		{
			assert(arr[i] == i);
f012789c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012789f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01278a6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01278ac:	01 d0                	add    %edx,%eax
f01278ae:	8b 10                	mov    (%eax),%edx
f01278b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01278b3:	39 c2                	cmp    %eax,%edx
f01278b5:	74 19                	je     f01278d0 <test_kshrink+0x918>
f01278b7:	68 e4 9f 13 f0       	push   $0xf0139fe4
f01278bc:	68 d9 9e 13 f0       	push   $0xf0139ed9
f01278c1:	68 66 0c 00 00       	push   $0xc66
f01278c6:	68 0e 91 13 f0       	push   $0xf013910e
f01278cb:	e8 e0 88 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01278d0:	ff 45 f4             	incl   -0xc(%ebp)
f01278d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01278d6:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f01278dc:	7e be                	jle    f012789c <test_kshrink+0x8e4>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01278de:	83 ec 0c             	sub    $0xc,%esp
f01278e1:	6a 03                	push   $0x3
f01278e3:	e8 33 55 fe ff       	call   f010ce1b <sys_bypassPageFault>
f01278e8:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f01278eb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01278f1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr[5*Mega] = 10;
f01278f4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01278f7:	05 00 00 50 00       	add    $0x500000,%eax
f01278fc:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f01278ff:	e8 05 55 fe ff       	call   f010ce09 <sys_rcr2>
f0127904:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127907:	81 c2 00 00 50 00    	add    $0x500000,%edx
f012790d:	39 d0                	cmp    %edx,%eax
f012790f:	74 19                	je     f012792a <test_kshrink+0x972>
f0127911:	68 f0 9f 13 f0       	push   $0xf0139ff0
f0127916:	68 d9 9e 13 f0       	push   $0xf0139ed9
f012791b:	68 6f 0c 00 00       	push   $0xc6f
f0127920:	68 0e 91 13 f0       	push   $0xf013910e
f0127925:	e8 86 88 fd ff       	call   f01001b0 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f012792a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012792d:	05 00 10 50 00       	add    $0x501000,%eax
f0127932:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0127935:	e8 cf 54 fe ff       	call   f010ce09 <sys_rcr2>
f012793a:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f012793d:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0127943:	39 d0                	cmp    %edx,%eax
f0127945:	74 19                	je     f0127960 <test_kshrink+0x9a8>
f0127947:	68 18 a0 13 f0       	push   $0xf013a018
f012794c:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0127951:	68 72 0c 00 00       	push   $0xc72
f0127956:	68 0e 91 13 f0       	push   $0xf013910e
f012795b:	e8 50 88 fd ff       	call   f01001b0 <_panic>

		ptr[6*Mega - kilo] = 10;
f0127960:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127963:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0127968:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f012796b:	e8 99 54 fe ff       	call   f010ce09 <sys_rcr2>
f0127970:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127973:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0127979:	39 d0                	cmp    %edx,%eax
f012797b:	74 19                	je     f0127996 <test_kshrink+0x9de>
f012797d:	68 44 a0 13 f0       	push   $0xf013a044
f0127982:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0127987:	68 75 0c 00 00       	push   $0xc75
f012798c:	68 0e 91 13 f0       	push   $0xf013910e
f0127991:	e8 1a 88 fd ff       	call   f01001b0 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127996:	83 ec 0c             	sub    $0xc,%esp
f0127999:	6a 00                	push   $0x0
f012799b:	e8 7b 54 fe ff       	call   f010ce1b <sys_bypassPageFault>
f01279a0:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01279a3:	e8 d8 4f fe ff       	call   f010c980 <sys_calculate_free_frames>
f01279a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279ab:	e8 76 cc fd ff       	call   f0104626 <pf_calculate_free_frames>
f01279b0:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f01279b3:	83 ec 0c             	sub    $0xc,%esp
f01279b6:	68 00 00 20 00       	push   $0x200000
f01279bb:	e8 c3 05 fe ff       	call   f0107f83 <kshrink>
f01279c0:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01279c3:	e8 5e cc fd ff       	call   f0104626 <pf_calculate_free_frames>
f01279c8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01279cb:	74 19                	je     f01279e6 <test_kshrink+0xa2e>
f01279cd:	68 a8 9e 13 f0       	push   $0xf0139ea8
f01279d2:	68 d9 9e 13 f0       	push   $0xf0139ed9
f01279d7:	68 82 0c 00 00       	push   $0xc82
f01279dc:	68 0e 91 13 f0       	push   $0xf013910e
f01279e1:	e8 ca 87 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01279e6:	e8 95 4f fe ff       	call   f010c980 <sys_calculate_free_frames>
f01279eb:	89 c2                	mov    %eax,%edx
f01279ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01279f0:	29 c2                	sub    %eax,%edx
f01279f2:	89 d0                	mov    %edx,%eax
f01279f4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01279f9:	74 19                	je     f0127a14 <test_kshrink+0xa5c>
f01279fb:	68 70 a0 13 f0       	push   $0xf013a070
f0127a00:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0127a05:	68 83 0c 00 00       	push   $0xc83
f0127a0a:	68 0e 91 13 f0       	push   $0xf013910e
f0127a0f:	e8 9c 87 fd ff       	call   f01001b0 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127a14:	e8 67 4f fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127a19:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a1c:	e8 05 cc fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127a21:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127a24:	83 ec 0c             	sub    $0xc,%esp
f0127a27:	68 00 00 40 00       	push   $0x400000
f0127a2c:	e8 d0 04 fe ff       	call   f0107f01 <kmalloc>
f0127a31:	83 c4 10             	add    $0x10,%esp
f0127a34:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0127a3a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127a41:	10 00 00 
f0127a44:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127a49:	0f b6 d0             	movzbl %al,%edx
f0127a4c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127a52:	01 d0                	add    %edx,%eax
f0127a54:	48                   	dec    %eax
f0127a55:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127a5b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127a61:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a66:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127a6c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127a72:	29 d0                	sub    %edx,%eax
f0127a74:	89 c1                	mov    %eax,%ecx
f0127a76:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127a7d:	10 00 00 
f0127a80:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127a85:	0f b6 c0             	movzbl %al,%eax
f0127a88:	c1 e0 04             	shl    $0x4,%eax
f0127a8b:	89 c2                	mov    %eax,%edx
f0127a8d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127a93:	01 d0                	add    %edx,%eax
f0127a95:	48                   	dec    %eax
f0127a96:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127a9c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127aa2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127aa7:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127aad:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127ab3:	29 d0                	sub    %edx,%eax
f0127ab5:	01 c8                	add    %ecx,%eax
f0127ab7:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0127abd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127ac3:	83 ec 04             	sub    $0x4,%esp
f0127ac6:	52                   	push   %edx
f0127ac7:	50                   	push   %eax
f0127ac8:	68 a0 a0 13 f0       	push   $0xf013a0a0
f0127acd:	e8 5f 93 fd ff       	call   f0100e31 <cprintf>
f0127ad2:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0127ad5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127adb:	89 c1                	mov    %eax,%ecx
f0127add:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127ae4:	10 00 00 
f0127ae7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127aec:	0f b6 d0             	movzbl %al,%edx
f0127aef:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127af5:	01 d0                	add    %edx,%eax
f0127af7:	48                   	dec    %eax
f0127af8:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127afe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127b04:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b09:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127b0f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127b15:	29 d0                	sub    %edx,%eax
f0127b17:	89 c3                	mov    %eax,%ebx
f0127b19:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127b20:	10 00 00 
f0127b23:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127b28:	0f b6 c0             	movzbl %al,%eax
f0127b2b:	c1 e0 04             	shl    $0x4,%eax
f0127b2e:	89 c2                	mov    %eax,%edx
f0127b30:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127b36:	01 d0                	add    %edx,%eax
f0127b38:	48                   	dec    %eax
f0127b39:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127b3f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127b45:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b4a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127b50:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127b56:	29 d0                	sub    %edx,%eax
f0127b58:	01 d8                	add    %ebx,%eax
f0127b5a:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0127b5f:	39 c1                	cmp    %eax,%ecx
f0127b61:	74 17                	je     f0127b7a <test_kshrink+0xbc2>
f0127b63:	83 ec 04             	sub    $0x4,%esp
f0127b66:	68 bc a0 13 f0       	push   $0xf013a0bc
f0127b6b:	68 8e 0c 00 00       	push   $0xc8e
f0127b70:	68 0e 91 13 f0       	push   $0xf013910e
f0127b75:	e8 36 86 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b7a:	e8 a7 ca fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127b7f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b82:	74 17                	je     f0127b9b <test_kshrink+0xbe3>
f0127b84:	83 ec 04             	sub    $0x4,%esp
f0127b87:	68 28 91 13 f0       	push   $0xf0139128
f0127b8c:	68 8f 0c 00 00       	push   $0xc8f
f0127b91:	68 0e 91 13 f0       	push   $0xf013910e
f0127b96:	e8 15 86 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b9b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b9e:	e8 dd 4d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127ba3:	29 c3                	sub    %eax,%ebx
f0127ba5:	89 d8                	mov    %ebx,%eax
f0127ba7:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127bac:	74 17                	je     f0127bc5 <test_kshrink+0xc0d>
f0127bae:	83 ec 04             	sub    $0x4,%esp
f0127bb1:	68 90 91 13 f0       	push   $0xf0139190
f0127bb6:	68 90 0c 00 00       	push   $0xc90
f0127bbb:	68 0e 91 13 f0       	push   $0xf013910e
f0127bc0:	e8 eb 85 fd ff       	call   f01001b0 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0127bc5:	e8 b6 4d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127bca:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bcd:	e8 54 ca fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127bd2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127bd5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127bdb:	83 ec 0c             	sub    $0xc,%esp
f0127bde:	50                   	push   %eax
f0127bdf:	e8 37 03 fe ff       	call   f0107f1b <kfree>
f0127be4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127be7:	e8 3a ca fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127bec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127bef:	74 17                	je     f0127c08 <test_kshrink+0xc50>
f0127bf1:	83 ec 04             	sub    $0x4,%esp
f0127bf4:	68 28 91 13 f0       	push   $0xf0139128
f0127bf9:	68 9a 0c 00 00       	push   $0xc9a
f0127bfe:	68 0e 91 13 f0       	push   $0xf013910e
f0127c03:	e8 a8 85 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127c08:	e8 73 4d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127c0d:	89 c2                	mov    %eax,%edx
f0127c0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127c12:	29 c2                	sub    %eax,%edx
f0127c14:	89 d0                	mov    %edx,%eax
f0127c16:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127c1b:	74 17                	je     f0127c34 <test_kshrink+0xc7c>
f0127c1d:	83 ec 04             	sub    $0x4,%esp
f0127c20:	68 c0 99 13 f0       	push   $0xf01399c0
f0127c25:	68 9b 0c 00 00       	push   $0xc9b
f0127c2a:	68 0e 91 13 f0       	push   $0xf013910e
f0127c2f:	e8 7c 85 fd ff       	call   f01001b0 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127c34:	e8 47 4d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127c39:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c3c:	e8 e5 c9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127c41:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0127c44:	83 ec 0c             	sub    $0xc,%esp
f0127c47:	68 00 b0 3f 00       	push   $0x3fb000
f0127c4c:	e8 32 03 fe ff       	call   f0107f83 <kshrink>
f0127c51:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127c54:	e8 cd c9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127c59:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c5c:	74 19                	je     f0127c77 <test_kshrink+0xcbf>
f0127c5e:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0127c63:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0127c68:	68 a5 0c 00 00       	push   $0xca5
f0127c6d:	68 0e 91 13 f0       	push   $0xf013910e
f0127c72:	e8 39 85 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0127c77:	e8 04 4d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127c7c:	89 c2                	mov    %eax,%edx
f0127c7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127c81:	29 c2                	sub    %eax,%edx
f0127c83:	89 d0                	mov    %edx,%eax
f0127c85:	83 f8 05             	cmp    $0x5,%eax
f0127c88:	74 19                	je     f0127ca3 <test_kshrink+0xceb>
f0127c8a:	68 10 a1 13 f0       	push   $0xf013a110
f0127c8f:	68 d9 9e 13 f0       	push   $0xf0139ed9
f0127c94:	68 a6 0c 00 00       	push   $0xca6
f0127c99:	68 0e 91 13 f0       	push   $0xf013910e
f0127c9e:	e8 0d 85 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127ca3:	83 ec 0c             	sub    $0xc,%esp
f0127ca6:	68 6c 9e 13 f0       	push   $0xf0139e6c
f0127cab:	e8 81 91 fd ff       	call   f0100e31 <cprintf>
f0127cb0:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127cb3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127cb8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127cbb:	5b                   	pop    %ebx
f0127cbc:	5f                   	pop    %edi
f0127cbd:	5d                   	pop    %ebp
f0127cbe:	c3                   	ret    

f0127cbf <test_kfreelast>:


int test_kfreelast()
{
f0127cbf:	55                   	push   %ebp
f0127cc0:	89 e5                	mov    %esp,%ebp
f0127cc2:	57                   	push   %edi
f0127cc3:	53                   	push   %ebx
f0127cc4:	81 ec 20 02 00 00    	sub    $0x220,%esp
	char minByte = 1<<7;
f0127cca:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0127cce:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0127cd2:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0127cd8:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0127cde:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127ce5:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127cec:	e8 8f 4c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127cf1:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127cf4:	8d 95 84 fe ff ff    	lea    -0x17c(%ebp),%edx
f0127cfa:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127cff:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d04:	89 d7                	mov    %edx,%edi
f0127d06:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0127d08:	8d 95 34 fe ff ff    	lea    -0x1cc(%ebp),%edx
f0127d0e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d13:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d18:	89 d7                	mov    %edx,%edi
f0127d1a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0127d1c:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f0127d22:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d27:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d2c:	89 d7                	mov    %edx,%edi
f0127d2e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d30:	e8 4b 4c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127d35:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d38:	e8 e9 c8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127d3d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127d40:	83 ec 0c             	sub    $0xc,%esp
f0127d43:	68 00 fc 1f 00       	push   $0x1ffc00
f0127d48:	e8 b4 01 fe ff       	call   f0107f01 <kmalloc>
f0127d4d:	83 c4 10             	add    $0x10,%esp
f0127d50:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d56:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127d5c:	89 c1                	mov    %eax,%ecx
f0127d5e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127d65:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127d6a:	0f b6 d0             	movzbl %al,%edx
f0127d6d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127d70:	01 d0                	add    %edx,%eax
f0127d72:	48                   	dec    %eax
f0127d73:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127d76:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127d79:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d7e:	f7 75 cc             	divl   -0x34(%ebp)
f0127d81:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127d84:	29 d0                	sub    %edx,%eax
f0127d86:	89 c3                	mov    %eax,%ebx
f0127d88:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127d8f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127d94:	0f b6 c0             	movzbl %al,%eax
f0127d97:	c1 e0 04             	shl    $0x4,%eax
f0127d9a:	89 c2                	mov    %eax,%edx
f0127d9c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127d9f:	01 d0                	add    %edx,%eax
f0127da1:	48                   	dec    %eax
f0127da2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127da5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127da8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127dad:	f7 75 c4             	divl   -0x3c(%ebp)
f0127db0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127db3:	29 d0                	sub    %edx,%eax
f0127db5:	01 d8                	add    %ebx,%eax
f0127db7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127dbc:	39 c1                	cmp    %eax,%ecx
f0127dbe:	74 17                	je     f0127dd7 <test_kfreelast+0x118>
f0127dc0:	83 ec 04             	sub    $0x4,%esp
f0127dc3:	68 f4 91 13 f0       	push   $0xf01391f4
f0127dc8:	68 ca 0c 00 00       	push   $0xcca
f0127dcd:	68 0e 91 13 f0       	push   $0xf013910e
f0127dd2:	e8 d9 83 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127dd7:	e8 4a c8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127ddc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127ddf:	74 17                	je     f0127df8 <test_kfreelast+0x139>
f0127de1:	83 ec 04             	sub    $0x4,%esp
f0127de4:	68 28 91 13 f0       	push   $0xf0139128
f0127de9:	68 cb 0c 00 00       	push   $0xccb
f0127dee:	68 0e 91 13 f0       	push   $0xf013910e
f0127df3:	e8 b8 83 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127df8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127dfb:	e8 80 4b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127e00:	29 c3                	sub    %eax,%ebx
f0127e02:	89 d8                	mov    %ebx,%eax
f0127e04:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127e09:	74 17                	je     f0127e22 <test_kfreelast+0x163>
f0127e0b:	83 ec 04             	sub    $0x4,%esp
f0127e0e:	68 90 91 13 f0       	push   $0xf0139190
f0127e13:	68 cc 0c 00 00       	push   $0xccc
f0127e18:	68 0e 91 13 f0       	push   $0xf013910e
f0127e1d:	e8 8e 83 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127e22:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f0127e29:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127e2c:	e8 4f 4b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127e31:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e34:	e8 ed c7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127e39:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127e3c:	83 ec 0c             	sub    $0xc,%esp
f0127e3f:	68 00 fc 1f 00       	push   $0x1ffc00
f0127e44:	e8 b8 00 fe ff       	call   f0107f01 <kmalloc>
f0127e49:	83 c4 10             	add    $0x10,%esp
f0127e4c:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e52:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127e58:	89 c1                	mov    %eax,%ecx
f0127e5a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127e61:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127e66:	0f b6 d0             	movzbl %al,%edx
f0127e69:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127e6c:	01 d0                	add    %edx,%eax
f0127e6e:	48                   	dec    %eax
f0127e6f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127e72:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127e75:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e7a:	f7 75 bc             	divl   -0x44(%ebp)
f0127e7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127e80:	29 d0                	sub    %edx,%eax
f0127e82:	89 c3                	mov    %eax,%ebx
f0127e84:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127e8b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127e90:	0f b6 c0             	movzbl %al,%eax
f0127e93:	c1 e0 04             	shl    $0x4,%eax
f0127e96:	89 c2                	mov    %eax,%edx
f0127e98:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127e9b:	01 d0                	add    %edx,%eax
f0127e9d:	48                   	dec    %eax
f0127e9e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127ea1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127ea4:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ea9:	f7 75 b4             	divl   -0x4c(%ebp)
f0127eac:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127eaf:	29 d0                	sub    %edx,%eax
f0127eb1:	01 d8                	add    %ebx,%eax
f0127eb3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127eb8:	39 c1                	cmp    %eax,%ecx
f0127eba:	74 17                	je     f0127ed3 <test_kfreelast+0x214>
f0127ebc:	83 ec 04             	sub    $0x4,%esp
f0127ebf:	68 f4 91 13 f0       	push   $0xf01391f4
f0127ec4:	68 d3 0c 00 00       	push   $0xcd3
f0127ec9:	68 0e 91 13 f0       	push   $0xf013910e
f0127ece:	e8 dd 82 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ed3:	e8 4e c7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127ed8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127edb:	74 17                	je     f0127ef4 <test_kfreelast+0x235>
f0127edd:	83 ec 04             	sub    $0x4,%esp
f0127ee0:	68 28 91 13 f0       	push   $0xf0139128
f0127ee5:	68 d4 0c 00 00       	push   $0xcd4
f0127eea:	68 0e 91 13 f0       	push   $0xf013910e
f0127eef:	e8 bc 82 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127ef4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127ef7:	e8 84 4a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127efc:	29 c3                	sub    %eax,%ebx
f0127efe:	89 d8                	mov    %ebx,%eax
f0127f00:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127f05:	74 17                	je     f0127f1e <test_kfreelast+0x25f>
f0127f07:	83 ec 04             	sub    $0x4,%esp
f0127f0a:	68 90 91 13 f0       	push   $0xf0139190
f0127f0f:	68 d5 0c 00 00       	push   $0xcd5
f0127f14:	68 0e 91 13 f0       	push   $0xf013910e
f0127f19:	e8 92 82 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127f1e:	c7 85 88 fe ff ff ff 	movl   $0x1ffbff,-0x178(%ebp)
f0127f25:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127f28:	e8 53 4a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127f2d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f30:	e8 f1 c6 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127f35:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127f38:	83 ec 0c             	sub    $0xc,%esp
f0127f3b:	68 00 08 00 00       	push   $0x800
f0127f40:	e8 bc ff fd ff       	call   f0107f01 <kmalloc>
f0127f45:	83 c4 10             	add    $0x10,%esp
f0127f48:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f4e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127f54:	89 c1                	mov    %eax,%ecx
f0127f56:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127f5d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127f62:	0f b6 d0             	movzbl %al,%edx
f0127f65:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127f68:	01 d0                	add    %edx,%eax
f0127f6a:	48                   	dec    %eax
f0127f6b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127f6e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127f71:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f76:	f7 75 ac             	divl   -0x54(%ebp)
f0127f79:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127f7c:	29 d0                	sub    %edx,%eax
f0127f7e:	89 c3                	mov    %eax,%ebx
f0127f80:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127f87:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0127f8c:	0f b6 c0             	movzbl %al,%eax
f0127f8f:	c1 e0 04             	shl    $0x4,%eax
f0127f92:	89 c2                	mov    %eax,%edx
f0127f94:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127f97:	01 d0                	add    %edx,%eax
f0127f99:	48                   	dec    %eax
f0127f9a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127f9d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127fa0:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fa5:	f7 75 a4             	divl   -0x5c(%ebp)
f0127fa8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127fab:	29 d0                	sub    %edx,%eax
f0127fad:	01 d8                	add    %ebx,%eax
f0127faf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127fb4:	39 c1                	cmp    %eax,%ecx
f0127fb6:	74 17                	je     f0127fcf <test_kfreelast+0x310>
f0127fb8:	83 ec 04             	sub    $0x4,%esp
f0127fbb:	68 f4 91 13 f0       	push   $0xf01391f4
f0127fc0:	68 dc 0c 00 00       	push   $0xcdc
f0127fc5:	68 0e 91 13 f0       	push   $0xf013910e
f0127fca:	e8 e1 81 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127fcf:	e8 52 c6 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0127fd4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127fd7:	74 17                	je     f0127ff0 <test_kfreelast+0x331>
f0127fd9:	83 ec 04             	sub    $0x4,%esp
f0127fdc:	68 28 91 13 f0       	push   $0xf0139128
f0127fe1:	68 dd 0c 00 00       	push   $0xcdd
f0127fe6:	68 0e 91 13 f0       	push   $0xf013910e
f0127feb:	e8 c0 81 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127ff0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127ff3:	e8 88 49 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0127ff8:	29 c3                	sub    %eax,%ebx
f0127ffa:	89 d8                	mov    %ebx,%eax
f0127ffc:	83 f8 01             	cmp    $0x1,%eax
f0127fff:	74 17                	je     f0128018 <test_kfreelast+0x359>
f0128001:	83 ec 04             	sub    $0x4,%esp
f0128004:	68 90 91 13 f0       	push   $0xf0139190
f0128009:	68 de 0c 00 00       	push   $0xcde
f012800e:	68 0e 91 13 f0       	push   $0xf013910e
f0128013:	e8 98 81 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128018:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f012801f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128022:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128028:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012802b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128032:	eb 0e                	jmp    f0128042 <test_kfreelast+0x383>
		{
			ptr[i] = 2 ;
f0128034:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128037:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012803a:	01 d0                	add    %edx,%eax
f012803c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012803f:	ff 45 f4             	incl   -0xc(%ebp)
f0128042:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128048:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012804b:	7f e7                	jg     f0128034 <test_kfreelast+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012804d:	e8 2e 49 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128052:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128055:	e8 cc c5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012805a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012805d:	83 ec 0c             	sub    $0xc,%esp
f0128060:	68 00 08 00 00       	push   $0x800
f0128065:	e8 97 fe fd ff       	call   f0107f01 <kmalloc>
f012806a:	83 c4 10             	add    $0x10,%esp
f012806d:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128073:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0128079:	89 c1                	mov    %eax,%ecx
f012807b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0128082:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128087:	0f b6 d0             	movzbl %al,%edx
f012808a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012808d:	01 d0                	add    %edx,%eax
f012808f:	48                   	dec    %eax
f0128090:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0128093:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128096:	ba 00 00 00 00       	mov    $0x0,%edx
f012809b:	f7 75 98             	divl   -0x68(%ebp)
f012809e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01280a1:	29 d0                	sub    %edx,%eax
f01280a3:	89 c3                	mov    %eax,%ebx
f01280a5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01280ac:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01280b1:	0f b6 c0             	movzbl %al,%eax
f01280b4:	c1 e0 04             	shl    $0x4,%eax
f01280b7:	89 c2                	mov    %eax,%edx
f01280b9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01280bc:	01 d0                	add    %edx,%eax
f01280be:	48                   	dec    %eax
f01280bf:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01280c2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01280c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01280ca:	f7 75 90             	divl   -0x70(%ebp)
f01280cd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01280d0:	29 d0                	sub    %edx,%eax
f01280d2:	01 d8                	add    %ebx,%eax
f01280d4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01280d9:	39 c1                	cmp    %eax,%ecx
f01280db:	74 17                	je     f01280f4 <test_kfreelast+0x435>
f01280dd:	83 ec 04             	sub    $0x4,%esp
f01280e0:	68 f4 91 13 f0       	push   $0xf01391f4
f01280e5:	68 ea 0c 00 00       	push   $0xcea
f01280ea:	68 0e 91 13 f0       	push   $0xf013910e
f01280ef:	e8 bc 80 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280f4:	e8 2d c5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01280f9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01280fc:	74 17                	je     f0128115 <test_kfreelast+0x456>
f01280fe:	83 ec 04             	sub    $0x4,%esp
f0128101:	68 28 91 13 f0       	push   $0xf0139128
f0128106:	68 eb 0c 00 00       	push   $0xceb
f012810b:	68 0e 91 13 f0       	push   $0xf013910e
f0128110:	e8 9b 80 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128115:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128118:	e8 63 48 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012811d:	29 c3                	sub    %eax,%ebx
f012811f:	89 d8                	mov    %ebx,%eax
f0128121:	83 f8 01             	cmp    $0x1,%eax
f0128124:	74 17                	je     f012813d <test_kfreelast+0x47e>
f0128126:	83 ec 04             	sub    $0x4,%esp
f0128129:	68 90 91 13 f0       	push   $0xf0139190
f012812e:	68 ec 0c 00 00       	push   $0xcec
f0128133:	68 0e 91 13 f0       	push   $0xf013910e
f0128138:	e8 73 80 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012813d:	c7 85 90 fe ff ff ff 	movl   $0x7ff,-0x170(%ebp)
f0128144:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128147:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012814d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128150:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128157:	eb 0e                	jmp    f0128167 <test_kfreelast+0x4a8>
		{
			ptr[i] = 3 ;
f0128159:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012815c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012815f:	01 d0                	add    %edx,%eax
f0128161:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128164:	ff 45 f4             	incl   -0xc(%ebp)
f0128167:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012816d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128170:	7f e7                	jg     f0128159 <test_kfreelast+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128172:	e8 09 48 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128177:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012817a:	e8 a7 c4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012817f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128182:	83 ec 0c             	sub    $0xc,%esp
f0128185:	68 00 1c 00 00       	push   $0x1c00
f012818a:	e8 72 fd fd ff       	call   f0107f01 <kmalloc>
f012818f:	83 c4 10             	add    $0x10,%esp
f0128192:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128198:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012819e:	89 c1                	mov    %eax,%ecx
f01281a0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01281a7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01281ac:	0f b6 d0             	movzbl %al,%edx
f01281af:	8b 45 88             	mov    -0x78(%ebp),%eax
f01281b2:	01 d0                	add    %edx,%eax
f01281b4:	48                   	dec    %eax
f01281b5:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01281b8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01281bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01281c0:	f7 75 88             	divl   -0x78(%ebp)
f01281c3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01281c6:	29 d0                	sub    %edx,%eax
f01281c8:	89 c3                	mov    %eax,%ebx
f01281ca:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01281d1:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01281d6:	0f b6 c0             	movzbl %al,%eax
f01281d9:	c1 e0 04             	shl    $0x4,%eax
f01281dc:	89 c2                	mov    %eax,%edx
f01281de:	8b 45 80             	mov    -0x80(%ebp),%eax
f01281e1:	01 d0                	add    %edx,%eax
f01281e3:	48                   	dec    %eax
f01281e4:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01281ea:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01281f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01281f5:	f7 75 80             	divl   -0x80(%ebp)
f01281f8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01281fe:	29 d0                	sub    %edx,%eax
f0128200:	01 d8                	add    %ebx,%eax
f0128202:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128207:	39 c1                	cmp    %eax,%ecx
f0128209:	74 17                	je     f0128222 <test_kfreelast+0x563>
f012820b:	83 ec 04             	sub    $0x4,%esp
f012820e:	68 f4 91 13 f0       	push   $0xf01391f4
f0128213:	68 f8 0c 00 00       	push   $0xcf8
f0128218:	68 0e 91 13 f0       	push   $0xf013910e
f012821d:	e8 8e 7f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128222:	e8 ff c3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128227:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012822a:	74 17                	je     f0128243 <test_kfreelast+0x584>
f012822c:	83 ec 04             	sub    $0x4,%esp
f012822f:	68 28 91 13 f0       	push   $0xf0139128
f0128234:	68 f9 0c 00 00       	push   $0xcf9
f0128239:	68 0e 91 13 f0       	push   $0xf013910e
f012823e:	e8 6d 7f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128243:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128246:	e8 35 47 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012824b:	29 c3                	sub    %eax,%ebx
f012824d:	89 d8                	mov    %ebx,%eax
f012824f:	83 f8 02             	cmp    $0x2,%eax
f0128252:	74 17                	je     f012826b <test_kfreelast+0x5ac>
f0128254:	83 ec 04             	sub    $0x4,%esp
f0128257:	68 90 91 13 f0       	push   $0xf0139190
f012825c:	68 fa 0c 00 00       	push   $0xcfa
f0128261:	68 0e 91 13 f0       	push   $0xf013910e
f0128266:	e8 45 7f fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012826b:	c7 85 94 fe ff ff ff 	movl   $0x1bff,-0x16c(%ebp)
f0128272:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128275:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012827b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012827e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128285:	eb 0e                	jmp    f0128295 <test_kfreelast+0x5d6>
		{
			ptr[i] = 4 ;
f0128287:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012828a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012828d:	01 d0                	add    %edx,%eax
f012828f:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128292:	ff 45 f4             	incl   -0xc(%ebp)
f0128295:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012829b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012829e:	7f e7                	jg     f0128287 <test_kfreelast+0x5c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01282a0:	e8 db 46 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01282a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282a8:	e8 79 c3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01282ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01282b0:	83 ec 0c             	sub    $0xc,%esp
f01282b3:	68 00 fc 2f 00       	push   $0x2ffc00
f01282b8:	e8 44 fc fd ff       	call   f0107f01 <kmalloc>
f01282bd:	83 c4 10             	add    $0x10,%esp
f01282c0:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01282c6:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01282cc:	89 c1                	mov    %eax,%ecx
f01282ce:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01282d5:	10 00 00 
f01282d8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01282dd:	0f b6 d0             	movzbl %al,%edx
f01282e0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01282e6:	01 d0                	add    %edx,%eax
f01282e8:	48                   	dec    %eax
f01282e9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01282ef:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01282f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01282fa:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128300:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128306:	29 d0                	sub    %edx,%eax
f0128308:	89 c3                	mov    %eax,%ebx
f012830a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128311:	10 00 00 
f0128314:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128319:	0f b6 c0             	movzbl %al,%eax
f012831c:	c1 e0 04             	shl    $0x4,%eax
f012831f:	89 c2                	mov    %eax,%edx
f0128321:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128327:	01 d0                	add    %edx,%eax
f0128329:	48                   	dec    %eax
f012832a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128330:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128336:	ba 00 00 00 00       	mov    $0x0,%edx
f012833b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128341:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128347:	29 d0                	sub    %edx,%eax
f0128349:	01 d8                	add    %ebx,%eax
f012834b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128350:	39 c1                	cmp    %eax,%ecx
f0128352:	74 17                	je     f012836b <test_kfreelast+0x6ac>
f0128354:	83 ec 04             	sub    $0x4,%esp
f0128357:	68 f4 91 13 f0       	push   $0xf01391f4
f012835c:	68 06 0d 00 00       	push   $0xd06
f0128361:	68 0e 91 13 f0       	push   $0xf013910e
f0128366:	e8 45 7e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012836b:	e8 b6 c2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128370:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128373:	74 17                	je     f012838c <test_kfreelast+0x6cd>
f0128375:	83 ec 04             	sub    $0x4,%esp
f0128378:	68 28 91 13 f0       	push   $0xf0139128
f012837d:	68 07 0d 00 00       	push   $0xd07
f0128382:	68 0e 91 13 f0       	push   $0xf013910e
f0128387:	e8 24 7e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012838c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012838f:	e8 ec 45 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128394:	29 c3                	sub    %eax,%ebx
f0128396:	89 d8                	mov    %ebx,%eax
f0128398:	3d 00 03 00 00       	cmp    $0x300,%eax
f012839d:	74 17                	je     f01283b6 <test_kfreelast+0x6f7>
f012839f:	83 ec 04             	sub    $0x4,%esp
f01283a2:	68 90 91 13 f0       	push   $0xf0139190
f01283a7:	68 08 0d 00 00       	push   $0xd08
f01283ac:	68 0e 91 13 f0       	push   $0xf013910e
f01283b1:	e8 fa 7d fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01283b6:	c7 85 98 fe ff ff ff 	movl   $0x2ffbff,-0x168(%ebp)
f01283bd:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01283c0:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01283c6:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01283c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01283d0:	eb 0e                	jmp    f01283e0 <test_kfreelast+0x721>
		{
			ptr[i] = 5 ;
f01283d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01283d5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01283d8:	01 d0                	add    %edx,%eax
f01283da:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01283dd:	ff 45 f4             	incl   -0xc(%ebp)
f01283e0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01283e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01283e9:	7f e7                	jg     f01283d2 <test_kfreelast+0x713>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01283eb:	e8 90 45 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01283f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283f3:	e8 2e c2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01283f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01283fb:	83 ec 0c             	sub    $0xc,%esp
f01283fe:	68 00 fc 5f 00       	push   $0x5ffc00
f0128403:	e8 f9 fa fd ff       	call   f0107f01 <kmalloc>
f0128408:	83 c4 10             	add    $0x10,%esp
f012840b:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128411:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128417:	89 c1                	mov    %eax,%ecx
f0128419:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128420:	10 00 00 
f0128423:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128428:	0f b6 d0             	movzbl %al,%edx
f012842b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128431:	01 d0                	add    %edx,%eax
f0128433:	48                   	dec    %eax
f0128434:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012843a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128440:	ba 00 00 00 00       	mov    $0x0,%edx
f0128445:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012844b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128451:	29 d0                	sub    %edx,%eax
f0128453:	89 c3                	mov    %eax,%ebx
f0128455:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012845c:	10 00 00 
f012845f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128464:	0f b6 c0             	movzbl %al,%eax
f0128467:	c1 e0 04             	shl    $0x4,%eax
f012846a:	89 c2                	mov    %eax,%edx
f012846c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128472:	01 d0                	add    %edx,%eax
f0128474:	48                   	dec    %eax
f0128475:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012847b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128481:	ba 00 00 00 00       	mov    $0x0,%edx
f0128486:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012848c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128492:	29 d0                	sub    %edx,%eax
f0128494:	01 d8                	add    %ebx,%eax
f0128496:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012849b:	39 c1                	cmp    %eax,%ecx
f012849d:	74 17                	je     f01284b6 <test_kfreelast+0x7f7>
f012849f:	83 ec 04             	sub    $0x4,%esp
f01284a2:	68 f4 91 13 f0       	push   $0xf01391f4
f01284a7:	68 14 0d 00 00       	push   $0xd14
f01284ac:	68 0e 91 13 f0       	push   $0xf013910e
f01284b1:	e8 fa 7c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01284b6:	e8 6b c1 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01284bb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01284be:	74 17                	je     f01284d7 <test_kfreelast+0x818>
f01284c0:	83 ec 04             	sub    $0x4,%esp
f01284c3:	68 28 91 13 f0       	push   $0xf0139128
f01284c8:	68 15 0d 00 00       	push   $0xd15
f01284cd:	68 0e 91 13 f0       	push   $0xf013910e
f01284d2:	e8 d9 7c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01284d7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01284da:	e8 a1 44 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01284df:	29 c3                	sub    %eax,%ebx
f01284e1:	89 d8                	mov    %ebx,%eax
f01284e3:	3d 00 06 00 00       	cmp    $0x600,%eax
f01284e8:	74 17                	je     f0128501 <test_kfreelast+0x842>
f01284ea:	83 ec 04             	sub    $0x4,%esp
f01284ed:	68 90 91 13 f0       	push   $0xf0139190
f01284f2:	68 16 0d 00 00       	push   $0xd16
f01284f7:	68 0e 91 13 f0       	push   $0xf013910e
f01284fc:	e8 af 7c fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0128501:	c7 85 9c fe ff ff ff 	movl   $0x5ffbff,-0x164(%ebp)
f0128508:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012850b:	e8 70 44 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128510:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128513:	e8 0e c1 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128518:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012851b:	83 ec 0c             	sub    $0xc,%esp
f012851e:	68 00 38 00 00       	push   $0x3800
f0128523:	e8 d9 f9 fd ff       	call   f0107f01 <kmalloc>
f0128528:	83 c4 10             	add    $0x10,%esp
f012852b:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128531:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128537:	89 c1                	mov    %eax,%ecx
f0128539:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128540:	10 00 00 
f0128543:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128548:	0f b6 d0             	movzbl %al,%edx
f012854b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128551:	01 d0                	add    %edx,%eax
f0128553:	48                   	dec    %eax
f0128554:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012855a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128560:	ba 00 00 00 00       	mov    $0x0,%edx
f0128565:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012856b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128571:	29 d0                	sub    %edx,%eax
f0128573:	89 c3                	mov    %eax,%ebx
f0128575:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012857c:	10 00 00 
f012857f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128584:	0f b6 c0             	movzbl %al,%eax
f0128587:	c1 e0 04             	shl    $0x4,%eax
f012858a:	89 c2                	mov    %eax,%edx
f012858c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128592:	01 d0                	add    %edx,%eax
f0128594:	48                   	dec    %eax
f0128595:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012859b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01285a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01285a6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01285ac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01285b2:	29 d0                	sub    %edx,%eax
f01285b4:	01 d8                	add    %ebx,%eax
f01285b6:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01285bb:	39 c1                	cmp    %eax,%ecx
f01285bd:	74 17                	je     f01285d6 <test_kfreelast+0x917>
f01285bf:	83 ec 04             	sub    $0x4,%esp
f01285c2:	68 f4 91 13 f0       	push   $0xf01391f4
f01285c7:	68 1d 0d 00 00       	push   $0xd1d
f01285cc:	68 0e 91 13 f0       	push   $0xf013910e
f01285d1:	e8 da 7b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01285d6:	e8 4b c0 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01285db:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01285de:	74 17                	je     f01285f7 <test_kfreelast+0x938>
f01285e0:	83 ec 04             	sub    $0x4,%esp
f01285e3:	68 28 91 13 f0       	push   $0xf0139128
f01285e8:	68 1e 0d 00 00       	push   $0xd1e
f01285ed:	68 0e 91 13 f0       	push   $0xf013910e
f01285f2:	e8 b9 7b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01285f7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01285fa:	e8 81 43 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01285ff:	29 c3                	sub    %eax,%ebx
f0128601:	89 d8                	mov    %ebx,%eax
f0128603:	83 f8 04             	cmp    $0x4,%eax
f0128606:	74 17                	je     f012861f <test_kfreelast+0x960>
f0128608:	83 ec 04             	sub    $0x4,%esp
f012860b:	68 90 91 13 f0       	push   $0xf0139190
f0128610:	68 1f 0d 00 00       	push   $0xd1f
f0128615:	68 0e 91 13 f0       	push   $0xf013910e
f012861a:	e8 91 7b fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012861f:	c7 85 a0 fe ff ff ff 	movl   $0x37ff,-0x160(%ebp)
f0128626:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0128629:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012862f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128632:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128639:	eb 0e                	jmp    f0128649 <test_kfreelast+0x98a>
		{
			ptr[i] = 7 ;
f012863b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012863e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128641:	01 d0                	add    %edx,%eax
f0128643:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0128646:	ff 45 f4             	incl   -0xc(%ebp)
f0128649:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012864f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128652:	7f e7                	jg     f012863b <test_kfreelast+0x97c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0128654:	e8 27 43 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128659:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012865f:	e8 c2 bf fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128664:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[0]);
f012866a:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0128670:	83 ec 0c             	sub    $0xc,%esp
f0128673:	50                   	push   %eax
f0128674:	e8 a2 f8 fd ff       	call   f0107f1b <kfree>
f0128679:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012867c:	e8 a5 bf fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128681:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128687:	74 17                	je     f01286a0 <test_kfreelast+0x9e1>
f0128689:	83 ec 04             	sub    $0x4,%esp
f012868c:	68 28 91 13 f0       	push   $0xf0139128
f0128691:	68 2e 0d 00 00       	push   $0xd2e
f0128696:	68 0e 91 13 f0       	push   $0xf013910e
f012869b:	e8 10 7b fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01286a0:	e8 db 42 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01286a5:	89 c2                	mov    %eax,%edx
f01286a7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01286ad:	29 c2                	sub    %eax,%edx
f01286af:	89 d0                	mov    %edx,%eax
f01286b1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01286b6:	74 17                	je     f01286cf <test_kfreelast+0xa10>
f01286b8:	83 ec 04             	sub    $0x4,%esp
f01286bb:	68 98 98 13 f0       	push   $0xf0139898
f01286c0:	68 2f 0d 00 00       	push   $0xd2f
f01286c5:	68 0e 91 13 f0       	push   $0xf013910e
f01286ca:	e8 e1 7a fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01286cf:	e8 ac 42 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01286d4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286da:	e8 47 bf fd ff       	call   f0104626 <pf_calculate_free_frames>
f01286df:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[1]);
f01286e5:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01286eb:	83 ec 0c             	sub    $0xc,%esp
f01286ee:	50                   	push   %eax
f01286ef:	e8 27 f8 fd ff       	call   f0107f1b <kfree>
f01286f4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01286f7:	e8 2a bf fd ff       	call   f0104626 <pf_calculate_free_frames>
f01286fc:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128702:	74 17                	je     f012871b <test_kfreelast+0xa5c>
f0128704:	83 ec 04             	sub    $0x4,%esp
f0128707:	68 28 91 13 f0       	push   $0xf0139128
f012870c:	68 35 0d 00 00       	push   $0xd35
f0128711:	68 0e 91 13 f0       	push   $0xf013910e
f0128716:	e8 95 7a fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012871b:	e8 60 42 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128720:	89 c2                	mov    %eax,%edx
f0128722:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128728:	29 c2                	sub    %eax,%edx
f012872a:	89 d0                	mov    %edx,%eax
f012872c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128731:	74 17                	je     f012874a <test_kfreelast+0xa8b>
f0128733:	83 ec 04             	sub    $0x4,%esp
f0128736:	68 98 98 13 f0       	push   $0xf0139898
f012873b:	68 36 0d 00 00       	push   $0xd36
f0128740:	68 0e 91 13 f0       	push   $0xf013910e
f0128745:	e8 66 7a fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012874a:	e8 31 42 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012874f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128755:	e8 cc be fd ff       	call   f0104626 <pf_calculate_free_frames>
f012875a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[6]);
f0128760:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128766:	83 ec 0c             	sub    $0xc,%esp
f0128769:	50                   	push   %eax
f012876a:	e8 ac f7 fd ff       	call   f0107f1b <kfree>
f012876f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128772:	e8 af be fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128777:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f012877d:	74 17                	je     f0128796 <test_kfreelast+0xad7>
f012877f:	83 ec 04             	sub    $0x4,%esp
f0128782:	68 28 91 13 f0       	push   $0xf0139128
f0128787:	68 3c 0d 00 00       	push   $0xd3c
f012878c:	68 0e 91 13 f0       	push   $0xf013910e
f0128791:	e8 1a 7a fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0128796:	e8 e5 41 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012879b:	89 c2                	mov    %eax,%edx
f012879d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01287a3:	29 c2                	sub    %eax,%edx
f01287a5:	89 d0                	mov    %edx,%eax
f01287a7:	3d 00 06 00 00       	cmp    $0x600,%eax
f01287ac:	74 17                	je     f01287c5 <test_kfreelast+0xb06>
f01287ae:	83 ec 04             	sub    $0x4,%esp
f01287b1:	68 98 98 13 f0       	push   $0xf0139898
f01287b6:	68 3d 0d 00 00       	push   $0xd3d
f01287bb:	68 0e 91 13 f0       	push   $0xf013910e
f01287c0:	e8 eb 79 fd ff       	call   f01001b0 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01287c5:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01287cb:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01287ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287d5:	eb 1e                	jmp    f01287f5 <test_kfreelast+0xb36>
		{
			sums[2] += ptr[i] ;
f01287d7:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f01287dd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01287e0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01287e3:	01 c8                	add    %ecx,%eax
f01287e5:	8a 00                	mov    (%eax),%al
f01287e7:	0f be c0             	movsbl %al,%eax
f01287ea:	01 d0                	add    %edx,%eax
f01287ec:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01287f2:	ff 45 f4             	incl   -0xc(%ebp)
f01287f5:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01287fb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01287fe:	7f d7                	jg     f01287d7 <test_kfreelast+0xb18>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0128800:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128806:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012880c:	01 c0                	add    %eax,%eax
f012880e:	39 c2                	cmp    %eax,%edx
f0128810:	74 17                	je     f0128829 <test_kfreelast+0xb6a>
f0128812:	83 ec 04             	sub    $0x4,%esp
f0128815:	68 f4 98 13 f0       	push   $0xf01398f4
f012881a:	68 48 0d 00 00       	push   $0xd48
f012881f:	68 0e 91 13 f0       	push   $0xf013910e
f0128824:	e8 87 79 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0128829:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012882f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128832:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128839:	eb 1e                	jmp    f0128859 <test_kfreelast+0xb9a>
		{
			sums[3] += ptr[i] ;
f012883b:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0128841:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128844:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128847:	01 c8                	add    %ecx,%eax
f0128849:	8a 00                	mov    (%eax),%al
f012884b:	0f be c0             	movsbl %al,%eax
f012884e:	01 d0                	add    %edx,%eax
f0128850:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128856:	ff 45 f4             	incl   -0xc(%ebp)
f0128859:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012885f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128862:	7f d7                	jg     f012883b <test_kfreelast+0xb7c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0128864:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f012886a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128870:	89 c1                	mov    %eax,%ecx
f0128872:	01 c9                	add    %ecx,%ecx
f0128874:	01 c8                	add    %ecx,%eax
f0128876:	39 c2                	cmp    %eax,%edx
f0128878:	74 17                	je     f0128891 <test_kfreelast+0xbd2>
f012887a:	83 ec 04             	sub    $0x4,%esp
f012887d:	68 f4 98 13 f0       	push   $0xf01398f4
f0128882:	68 50 0d 00 00       	push   $0xd50
f0128887:	68 0e 91 13 f0       	push   $0xf013910e
f012888c:	e8 1f 79 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0128891:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128897:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012889a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288a1:	eb 1e                	jmp    f01288c1 <test_kfreelast+0xc02>
		{
			sums[4] += ptr[i] ;
f01288a3:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f01288a9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01288ac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01288af:	01 c8                	add    %ecx,%eax
f01288b1:	8a 00                	mov    (%eax),%al
f01288b3:	0f be c0             	movsbl %al,%eax
f01288b6:	01 d0                	add    %edx,%eax
f01288b8:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01288be:	ff 45 f4             	incl   -0xc(%ebp)
f01288c1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01288c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01288ca:	7f d7                	jg     f01288a3 <test_kfreelast+0xbe4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01288cc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01288d2:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f01288d8:	c1 e2 02             	shl    $0x2,%edx
f01288db:	39 d0                	cmp    %edx,%eax
f01288dd:	74 17                	je     f01288f6 <test_kfreelast+0xc37>
f01288df:	83 ec 04             	sub    $0x4,%esp
f01288e2:	68 f4 98 13 f0       	push   $0xf01398f4
f01288e7:	68 58 0d 00 00       	push   $0xd58
f01288ec:	68 0e 91 13 f0       	push   $0xf013910e
f01288f1:	e8 ba 78 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01288f6:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01288fc:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01288ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128906:	eb 1e                	jmp    f0128926 <test_kfreelast+0xc67>
		{
			sums[5] += ptr[i] ;
f0128908:	8b 95 48 fe ff ff    	mov    -0x1b8(%ebp),%edx
f012890e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128911:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128914:	01 c8                	add    %ecx,%eax
f0128916:	8a 00                	mov    (%eax),%al
f0128918:	0f be c0             	movsbl %al,%eax
f012891b:	01 d0                	add    %edx,%eax
f012891d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128923:	ff 45 f4             	incl   -0xc(%ebp)
f0128926:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012892c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012892f:	7f d7                	jg     f0128908 <test_kfreelast+0xc49>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0128931:	8b 8d 48 fe ff ff    	mov    -0x1b8(%ebp),%ecx
f0128937:	8b 95 98 fe ff ff    	mov    -0x168(%ebp),%edx
f012893d:	89 d0                	mov    %edx,%eax
f012893f:	c1 e0 02             	shl    $0x2,%eax
f0128942:	01 d0                	add    %edx,%eax
f0128944:	39 c1                	cmp    %eax,%ecx
f0128946:	74 17                	je     f012895f <test_kfreelast+0xca0>
f0128948:	83 ec 04             	sub    $0x4,%esp
f012894b:	68 f4 98 13 f0       	push   $0xf01398f4
f0128950:	68 60 0d 00 00       	push   $0xd60
f0128955:	68 0e 91 13 f0       	push   $0xf013910e
f012895a:	e8 51 78 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012895f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128965:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128968:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012896f:	eb 1e                	jmp    f012898f <test_kfreelast+0xcd0>
		{
			sums[7] += ptr[i] ;
f0128971:	8b 95 50 fe ff ff    	mov    -0x1b0(%ebp),%edx
f0128977:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012897a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012897d:	01 c8                	add    %ecx,%eax
f012897f:	8a 00                	mov    (%eax),%al
f0128981:	0f be c0             	movsbl %al,%eax
f0128984:	01 d0                	add    %edx,%eax
f0128986:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012898c:	ff 45 f4             	incl   -0xc(%ebp)
f012898f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0128995:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128998:	7f d7                	jg     f0128971 <test_kfreelast+0xcb2>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012899a:	8b 8d 50 fe ff ff    	mov    -0x1b0(%ebp),%ecx
f01289a0:	8b 95 a0 fe ff ff    	mov    -0x160(%ebp),%edx
f01289a6:	89 d0                	mov    %edx,%eax
f01289a8:	01 c0                	add    %eax,%eax
f01289aa:	01 d0                	add    %edx,%eax
f01289ac:	01 c0                	add    %eax,%eax
f01289ae:	01 d0                	add    %edx,%eax
f01289b0:	39 c1                	cmp    %eax,%ecx
f01289b2:	74 17                	je     f01289cb <test_kfreelast+0xd0c>
f01289b4:	83 ec 04             	sub    $0x4,%esp
f01289b7:	68 f4 98 13 f0       	push   $0xf01398f4
f01289bc:	68 68 0d 00 00       	push   $0xd68
f01289c1:	68 0e 91 13 f0       	push   $0xf013910e
f01289c6:	e8 e5 77 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01289cb:	e8 b0 3f fe ff       	call   f010c980 <sys_calculate_free_frames>
f01289d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289d3:	e8 4e bc fd ff       	call   f0104626 <pf_calculate_free_frames>
f01289d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01289db:	83 ec 0c             	sub    $0xc,%esp
f01289de:	68 00 50 00 00       	push   $0x5000
f01289e3:	e8 19 f5 fd ff       	call   f0107f01 <kmalloc>
f01289e8:	83 c4 10             	add    $0x10,%esp
f01289eb:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01289f1:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01289f7:	89 c1                	mov    %eax,%ecx
f01289f9:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128a00:	10 00 00 
f0128a03:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128a08:	0f b6 d0             	movzbl %al,%edx
f0128a0b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128a11:	01 d0                	add    %edx,%eax
f0128a13:	48                   	dec    %eax
f0128a14:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128a1a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128a20:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a25:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128a2b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128a31:	29 d0                	sub    %edx,%eax
f0128a33:	89 c3                	mov    %eax,%ebx
f0128a35:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128a3c:	10 00 00 
f0128a3f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128a44:	0f b6 c0             	movzbl %al,%eax
f0128a47:	c1 e0 04             	shl    $0x4,%eax
f0128a4a:	89 c2                	mov    %eax,%edx
f0128a4c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128a52:	01 d0                	add    %edx,%eax
f0128a54:	48                   	dec    %eax
f0128a55:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128a5b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128a61:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a66:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128a6c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128a72:	29 d0                	sub    %edx,%eax
f0128a74:	01 d8                	add    %ebx,%eax
f0128a76:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0128a7b:	39 c1                	cmp    %eax,%ecx
f0128a7d:	74 17                	je     f0128a96 <test_kfreelast+0xdd7>
f0128a7f:	83 ec 04             	sub    $0x4,%esp
f0128a82:	68 f4 91 13 f0       	push   $0xf01391f4
f0128a87:	68 71 0d 00 00       	push   $0xd71
f0128a8c:	68 0e 91 13 f0       	push   $0xf013910e
f0128a91:	e8 1a 77 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a96:	e8 8b bb fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128a9b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128a9e:	74 17                	je     f0128ab7 <test_kfreelast+0xdf8>
f0128aa0:	83 ec 04             	sub    $0x4,%esp
f0128aa3:	68 28 91 13 f0       	push   $0xf0139128
f0128aa8:	68 72 0d 00 00       	push   $0xd72
f0128aad:	68 0e 91 13 f0       	push   $0xf013910e
f0128ab2:	e8 f9 76 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128ab7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128aba:	e8 c1 3e fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128abf:	29 c3                	sub    %eax,%ebx
f0128ac1:	89 d8                	mov    %ebx,%eax
f0128ac3:	83 f8 05             	cmp    $0x5,%eax
f0128ac6:	74 17                	je     f0128adf <test_kfreelast+0xe20>
f0128ac8:	83 ec 04             	sub    $0x4,%esp
f0128acb:	68 90 91 13 f0       	push   $0xf0139190
f0128ad0:	68 73 0d 00 00       	push   $0xd73
f0128ad5:	68 0e 91 13 f0       	push   $0xf013910e
f0128ada:	e8 d1 76 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0128adf:	c7 85 a4 fe ff ff ff 	movl   $0x4fff,-0x15c(%ebp)
f0128ae6:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0128ae9:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128aef:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0128af2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128af9:	eb 0e                	jmp    f0128b09 <test_kfreelast+0xe4a>
		{
			ptr[i] = 8 ;
f0128afb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128afe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128b01:	01 d0                	add    %edx,%eax
f0128b03:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0128b06:	ff 45 f4             	incl   -0xc(%ebp)
f0128b09:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0128b0f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128b12:	7f e7                	jg     f0128afb <test_kfreelast+0xe3c>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128b14:	e8 67 3e fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128b19:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b1c:	e8 05 bb fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128b21:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0128b24:	83 ec 0c             	sub    $0xc,%esp
f0128b27:	68 00 00 10 00       	push   $0x100000
f0128b2c:	e8 d0 f3 fd ff       	call   f0107f01 <kmalloc>
f0128b31:	83 c4 10             	add    $0x10,%esp
f0128b34:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b3a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128b40:	89 c1                	mov    %eax,%ecx
f0128b42:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128b49:	10 00 00 
f0128b4c:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128b51:	0f b6 d0             	movzbl %al,%edx
f0128b54:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128b5a:	01 d0                	add    %edx,%eax
f0128b5c:	48                   	dec    %eax
f0128b5d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128b63:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128b69:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b6e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128b74:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128b7a:	29 d0                	sub    %edx,%eax
f0128b7c:	89 c3                	mov    %eax,%ebx
f0128b7e:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0128b85:	10 00 00 
f0128b88:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128b8d:	0f b6 c0             	movzbl %al,%eax
f0128b90:	c1 e0 04             	shl    $0x4,%eax
f0128b93:	89 c2                	mov    %eax,%edx
f0128b95:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128b9b:	01 d0                	add    %edx,%eax
f0128b9d:	48                   	dec    %eax
f0128b9e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0128ba4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128baa:	ba 00 00 00 00       	mov    $0x0,%edx
f0128baf:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0128bb5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128bbb:	29 d0                	sub    %edx,%eax
f0128bbd:	01 d8                	add    %ebx,%eax
f0128bbf:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128bc4:	39 c1                	cmp    %eax,%ecx
f0128bc6:	74 17                	je     f0128bdf <test_kfreelast+0xf20>
f0128bc8:	83 ec 04             	sub    $0x4,%esp
f0128bcb:	68 f4 91 13 f0       	push   $0xf01391f4
f0128bd0:	68 7f 0d 00 00       	push   $0xd7f
f0128bd5:	68 0e 91 13 f0       	push   $0xf013910e
f0128bda:	e8 d1 75 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128bdf:	e8 42 ba fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128be4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128be7:	74 17                	je     f0128c00 <test_kfreelast+0xf41>
f0128be9:	83 ec 04             	sub    $0x4,%esp
f0128bec:	68 28 91 13 f0       	push   $0xf0139128
f0128bf1:	68 80 0d 00 00       	push   $0xd80
f0128bf6:	68 0e 91 13 f0       	push   $0xf013910e
f0128bfb:	e8 b0 75 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c00:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128c03:	e8 78 3d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128c08:	29 c3                	sub    %eax,%ebx
f0128c0a:	89 d8                	mov    %ebx,%eax
f0128c0c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128c11:	74 17                	je     f0128c2a <test_kfreelast+0xf6b>
f0128c13:	83 ec 04             	sub    $0x4,%esp
f0128c16:	68 90 91 13 f0       	push   $0xf0139190
f0128c1b:	68 81 0d 00 00       	push   $0xd81
f0128c20:	68 0e 91 13 f0       	push   $0xf013910e
f0128c25:	e8 86 75 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0128c2a:	c7 85 a8 fe ff ff ff 	movl   $0xfffff,-0x158(%ebp)
f0128c31:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0128c34:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128c3a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0128c3d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c44:	eb 0e                	jmp    f0128c54 <test_kfreelast+0xf95>
		{
			ptr[i] = 9 ;
f0128c46:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c49:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128c4c:	01 d0                	add    %edx,%eax
f0128c4e:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0128c51:	ff 45 f4             	incl   -0xc(%ebp)
f0128c54:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0128c5a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c5d:	7f e7                	jg     f0128c46 <test_kfreelast+0xf87>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0128c5f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128c66:	e8 15 3d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128c6b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c6e:	e8 b3 b9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128c73:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0128c76:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128c7c:	83 ec 0c             	sub    $0xc,%esp
f0128c7f:	50                   	push   %eax
f0128c80:	e8 96 f2 fd ff       	call   f0107f1b <kfree>
f0128c85:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c88:	e8 99 b9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128c8d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128c90:	74 17                	je     f0128ca9 <test_kfreelast+0xfea>
f0128c92:	83 ec 04             	sub    $0x4,%esp
f0128c95:	68 28 91 13 f0       	push   $0xf0139128
f0128c9a:	68 91 0d 00 00       	push   $0xd91
f0128c9f:	68 0e 91 13 f0       	push   $0xf013910e
f0128ca4:	e8 07 75 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0128ca9:	e8 d2 3c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128cae:	89 c2                	mov    %eax,%edx
f0128cb0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128cb3:	29 c2                	sub    %eax,%edx
f0128cb5:	89 d0                	mov    %edx,%eax
f0128cb7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128cbc:	74 17                	je     f0128cd5 <test_kfreelast+0x1016>
f0128cbe:	83 ec 04             	sub    $0x4,%esp
f0128cc1:	68 98 98 13 f0       	push   $0xf0139898
f0128cc6:	68 92 0d 00 00       	push   $0xd92
f0128ccb:	68 0e 91 13 f0       	push   $0xf013910e
f0128cd0:	e8 db 74 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0128cd5:	e8 a6 3c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128cda:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cdd:	e8 44 b9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128ce2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0128ce5:	83 ec 0c             	sub    $0xc,%esp
f0128ce8:	68 00 78 00 00       	push   $0x7800
f0128ced:	e8 0f f2 fd ff       	call   f0107f01 <kmalloc>
f0128cf2:	83 c4 10             	add    $0x10,%esp
f0128cf5:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128cfb:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128d01:	89 c1                	mov    %eax,%ecx
f0128d03:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128d0a:	10 00 00 
f0128d0d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128d12:	0f b6 d0             	movzbl %al,%edx
f0128d15:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128d1b:	01 d0                	add    %edx,%eax
f0128d1d:	48                   	dec    %eax
f0128d1e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128d24:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128d2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d2f:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128d35:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128d3b:	29 d0                	sub    %edx,%eax
f0128d3d:	89 c3                	mov    %eax,%ebx
f0128d3f:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128d46:	10 00 00 
f0128d49:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128d4e:	0f b6 c0             	movzbl %al,%eax
f0128d51:	c1 e0 04             	shl    $0x4,%eax
f0128d54:	89 c2                	mov    %eax,%edx
f0128d56:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128d5c:	01 d0                	add    %edx,%eax
f0128d5e:	48                   	dec    %eax
f0128d5f:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128d65:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128d6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d70:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128d76:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128d7c:	29 d0                	sub    %edx,%eax
f0128d7e:	01 d8                	add    %ebx,%eax
f0128d80:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128d85:	39 c1                	cmp    %eax,%ecx
f0128d87:	74 17                	je     f0128da0 <test_kfreelast+0x10e1>
f0128d89:	83 ec 04             	sub    $0x4,%esp
f0128d8c:	68 f4 91 13 f0       	push   $0xf01391f4
f0128d91:	68 9b 0d 00 00       	push   $0xd9b
f0128d96:	68 0e 91 13 f0       	push   $0xf013910e
f0128d9b:	e8 10 74 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128da0:	e8 81 b8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128da5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128da8:	74 17                	je     f0128dc1 <test_kfreelast+0x1102>
f0128daa:	83 ec 04             	sub    $0x4,%esp
f0128dad:	68 28 91 13 f0       	push   $0xf0139128
f0128db2:	68 9c 0d 00 00       	push   $0xd9c
f0128db7:	68 0e 91 13 f0       	push   $0xf013910e
f0128dbc:	e8 ef 73 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128dc1:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128dc4:	e8 b7 3b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128dc9:	29 c3                	sub    %eax,%ebx
f0128dcb:	89 d8                	mov    %ebx,%eax
f0128dcd:	83 f8 08             	cmp    $0x8,%eax
f0128dd0:	74 17                	je     f0128de9 <test_kfreelast+0x112a>
f0128dd2:	83 ec 04             	sub    $0x4,%esp
f0128dd5:	68 90 91 13 f0       	push   $0xf0139190
f0128dda:	68 9d 0d 00 00       	push   $0xd9d
f0128ddf:	68 0e 91 13 f0       	push   $0xf013910e
f0128de4:	e8 c7 73 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f0128de9:	c7 85 ac fe ff ff ff 	movl   $0x77ff,-0x154(%ebp)
f0128df0:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0128df3:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128df9:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0128dfc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e03:	eb 0e                	jmp    f0128e13 <test_kfreelast+0x1154>
		{
			ptr[i] = 10 ;
f0128e05:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e08:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128e0b:	01 d0                	add    %edx,%eax
f0128e0d:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0128e10:	ff 45 f4             	incl   -0xc(%ebp)
f0128e13:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128e19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128e1c:	7f e7                	jg     f0128e05 <test_kfreelast+0x1146>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128e1e:	e8 5d 3b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128e23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e26:	e8 fb b7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128e2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f0128e2e:	83 ec 0c             	sub    $0xc,%esp
f0128e31:	68 00 00 10 00       	push   $0x100000
f0128e36:	e8 c6 f0 fd ff       	call   f0107f01 <kmalloc>
f0128e3b:	83 c4 10             	add    $0x10,%esp
f0128e3e:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128e44:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128e4a:	89 c1                	mov    %eax,%ecx
f0128e4c:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128e53:	10 00 00 
f0128e56:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128e5b:	0f b6 d0             	movzbl %al,%edx
f0128e5e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128e64:	01 d0                	add    %edx,%eax
f0128e66:	48                   	dec    %eax
f0128e67:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128e6d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128e73:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e78:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128e7e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128e84:	29 d0                	sub    %edx,%eax
f0128e86:	89 c3                	mov    %eax,%ebx
f0128e88:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128e8f:	10 00 00 
f0128e92:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0128e97:	0f b6 c0             	movzbl %al,%eax
f0128e9a:	c1 e0 04             	shl    $0x4,%eax
f0128e9d:	89 c2                	mov    %eax,%edx
f0128e9f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128ea5:	01 d0                	add    %edx,%eax
f0128ea7:	48                   	dec    %eax
f0128ea8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128eae:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128eb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0128eb9:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128ebf:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128ec5:	29 d0                	sub    %edx,%eax
f0128ec7:	01 d8                	add    %ebx,%eax
f0128ec9:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f0128ece:	39 c1                	cmp    %eax,%ecx
f0128ed0:	74 17                	je     f0128ee9 <test_kfreelast+0x122a>
f0128ed2:	83 ec 04             	sub    $0x4,%esp
f0128ed5:	68 f4 91 13 f0       	push   $0xf01391f4
f0128eda:	68 a9 0d 00 00       	push   $0xda9
f0128edf:	68 0e 91 13 f0       	push   $0xf013910e
f0128ee4:	e8 c7 72 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ee9:	e8 38 b7 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128eee:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128ef1:	74 17                	je     f0128f0a <test_kfreelast+0x124b>
f0128ef3:	83 ec 04             	sub    $0x4,%esp
f0128ef6:	68 28 91 13 f0       	push   $0xf0139128
f0128efb:	68 aa 0d 00 00       	push   $0xdaa
f0128f00:	68 0e 91 13 f0       	push   $0xf013910e
f0128f05:	e8 a6 72 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f0a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128f0d:	e8 6e 3a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128f12:	29 c3                	sub    %eax,%ebx
f0128f14:	89 d8                	mov    %ebx,%eax
f0128f16:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128f1b:	74 17                	je     f0128f34 <test_kfreelast+0x1275>
f0128f1d:	83 ec 04             	sub    $0x4,%esp
f0128f20:	68 90 91 13 f0       	push   $0xf0139190
f0128f25:	68 ab 0d 00 00       	push   $0xdab
f0128f2a:	68 0e 91 13 f0       	push   $0xf013910e
f0128f2f:	e8 7c 72 fd ff       	call   f01001b0 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0128f34:	c7 85 b0 fe ff ff ff 	movl   $0xfffff,-0x150(%ebp)
f0128f3b:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f0128f3e:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128f44:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0128f47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f4e:	eb 0e                	jmp    f0128f5e <test_kfreelast+0x129f>
		{
			ptr[i] = 11 ;
f0128f50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128f53:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128f56:	01 d0                	add    %edx,%eax
f0128f58:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0128f5b:	ff 45 f4             	incl   -0xc(%ebp)
f0128f5e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128f64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128f67:	7f e7                	jg     f0128f50 <test_kfreelast+0x1291>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0128f69:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0128f6d:	83 ec 08             	sub    $0x8,%esp
f0128f70:	ff 75 f0             	pushl  -0x10(%ebp)
f0128f73:	68 40 a1 13 f0       	push   $0xf013a140
f0128f78:	e8 b4 7e fd ff       	call   f0100e31 <cprintf>
f0128f7d:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f0128f80:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128f87:	e8 f4 39 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128f8c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f8f:	e8 92 b6 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128f94:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0128f97:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128f9d:	83 ec 0c             	sub    $0xc,%esp
f0128fa0:	50                   	push   %eax
f0128fa1:	e8 75 ef fd ff       	call   f0107f1b <kfree>
f0128fa6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0128fa9:	e8 78 b6 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0128fae:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128fb1:	74 1d                	je     f0128fd0 <test_kfreelast+0x1311>
f0128fb3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128fb7:	75 17                	jne    f0128fd0 <test_kfreelast+0x1311>
f0128fb9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128fc0:	83 ec 0c             	sub    $0xc,%esp
f0128fc3:	68 68 a1 13 f0       	push   $0xf013a168
f0128fc8:	e8 64 7e fd ff       	call   f0100e31 <cprintf>
f0128fcd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0128fd0:	e8 ab 39 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0128fd5:	89 c2                	mov    %eax,%edx
f0128fd7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128fda:	29 c2                	sub    %eax,%edx
f0128fdc:	89 d0                	mov    %edx,%eax
f0128fde:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128fe3:	74 1d                	je     f0129002 <test_kfreelast+0x1343>
f0128fe5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128fe9:	75 17                	jne    f0129002 <test_kfreelast+0x1343>
f0128feb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128ff2:	83 ec 0c             	sub    $0xc,%esp
f0128ff5:	68 d4 a1 13 f0       	push   $0xf013a1d4
f0128ffa:	e8 32 7e fd ff       	call   f0100e31 <cprintf>
f0128fff:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129002:	e8 79 39 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129007:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012900a:	e8 17 b6 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012900f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f0129012:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0129018:	83 ec 0c             	sub    $0xc,%esp
f012901b:	50                   	push   %eax
f012901c:	e8 fa ee fd ff       	call   f0107f1b <kfree>
f0129021:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129024:	e8 fd b5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129029:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012902c:	74 1d                	je     f012904b <test_kfreelast+0x138c>
f012902e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129032:	75 17                	jne    f012904b <test_kfreelast+0x138c>
f0129034:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012903b:	83 ec 0c             	sub    $0xc,%esp
f012903e:	68 68 a1 13 f0       	push   $0xf013a168
f0129043:	e8 e9 7d fd ff       	call   f0100e31 <cprintf>
f0129048:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012904b:	e8 30 39 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129050:	89 c2                	mov    %eax,%edx
f0129052:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129055:	29 c2                	sub    %eax,%edx
f0129057:	89 d0                	mov    %edx,%eax
f0129059:	83 f8 08             	cmp    $0x8,%eax
f012905c:	74 1d                	je     f012907b <test_kfreelast+0x13bc>
f012905e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129062:	75 17                	jne    f012907b <test_kfreelast+0x13bc>
f0129064:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012906b:	83 ec 0c             	sub    $0xc,%esp
f012906e:	68 d4 a1 13 f0       	push   $0xf013a1d4
f0129073:	e8 b9 7d fd ff       	call   f0100e31 <cprintf>
f0129078:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012907b:	e8 00 39 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129080:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129083:	e8 9e b5 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129088:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012908b:	83 ec 0c             	sub    $0xc,%esp
f012908e:	68 00 28 00 00       	push   $0x2800
f0129093:	e8 69 ee fd ff       	call   f0107f01 <kmalloc>
f0129098:	83 c4 10             	add    $0x10,%esp
f012909b:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01290a1:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01290a7:	89 c1                	mov    %eax,%ecx
f01290a9:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01290b0:	10 00 00 
f01290b3:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01290b8:	0f b6 d0             	movzbl %al,%edx
f01290bb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01290c1:	01 d0                	add    %edx,%eax
f01290c3:	48                   	dec    %eax
f01290c4:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01290ca:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01290d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01290d5:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01290db:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01290e1:	29 d0                	sub    %edx,%eax
f01290e3:	89 c3                	mov    %eax,%ebx
f01290e5:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01290ec:	10 00 00 
f01290ef:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01290f4:	0f b6 c0             	movzbl %al,%eax
f01290f7:	c1 e0 04             	shl    $0x4,%eax
f01290fa:	89 c2                	mov    %eax,%edx
f01290fc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129102:	01 d0                	add    %edx,%eax
f0129104:	48                   	dec    %eax
f0129105:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012910b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129111:	ba 00 00 00 00       	mov    $0x0,%edx
f0129116:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012911c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129122:	29 d0                	sub    %edx,%eax
f0129124:	01 d8                	add    %ebx,%eax
f0129126:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012912b:	39 c1                	cmp    %eax,%ecx
f012912d:	74 1d                	je     f012914c <test_kfreelast+0x148d>
f012912f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129133:	75 17                	jne    f012914c <test_kfreelast+0x148d>
f0129135:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012913c:	83 ec 0c             	sub    $0xc,%esp
f012913f:	68 0c a2 13 f0       	push   $0xf013a20c
f0129144:	e8 e8 7c fd ff       	call   f0100e31 <cprintf>
f0129149:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012914c:	e8 d5 b4 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129151:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129154:	74 1d                	je     f0129173 <test_kfreelast+0x14b4>
f0129156:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012915a:	75 17                	jne    f0129173 <test_kfreelast+0x14b4>
f012915c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129163:	83 ec 0c             	sub    $0xc,%esp
f0129166:	68 68 a1 13 f0       	push   $0xf013a168
f012916b:	e8 c1 7c fd ff       	call   f0100e31 <cprintf>
f0129170:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129173:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129176:	e8 05 38 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012917b:	29 c3                	sub    %eax,%ebx
f012917d:	89 d8                	mov    %ebx,%eax
f012917f:	83 f8 03             	cmp    $0x3,%eax
f0129182:	74 1d                	je     f01291a1 <test_kfreelast+0x14e2>
f0129184:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129188:	75 17                	jne    f01291a1 <test_kfreelast+0x14e2>
f012918a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129191:	83 ec 0c             	sub    $0xc,%esp
f0129194:	68 74 a2 13 f0       	push   $0xf013a274
f0129199:	e8 93 7c fd ff       	call   f0100e31 <cprintf>
f012919e:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f01291a1:	c7 85 b4 fe ff ff ff 	movl   $0x27ff,-0x14c(%ebp)
f01291a8:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f01291ab:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01291b1:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f01291b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01291bb:	eb 0e                	jmp    f01291cb <test_kfreelast+0x150c>
		{
			ptr[i] = 12 ;
f01291bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01291c0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01291c3:	01 d0                	add    %edx,%eax
f01291c5:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f01291c8:	ff 45 f4             	incl   -0xc(%ebp)
f01291cb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01291d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01291d4:	7f e7                	jg     f01291bd <test_kfreelast+0x14fe>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01291d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01291da:	75 17                	jne    f01291f3 <test_kfreelast+0x1534>
f01291dc:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f01291e0:	83 ec 08             	sub    $0x8,%esp
f01291e3:	ff 75 f0             	pushl  -0x10(%ebp)
f01291e6:	68 40 a1 13 f0       	push   $0xf013a140
f01291eb:	e8 41 7c fd ff       	call   f0100e31 <cprintf>
f01291f0:	83 c4 10             	add    $0x10,%esp
f01291f3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f01291fa:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129200:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0129203:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012920a:	eb 1e                	jmp    f012922a <test_kfreelast+0x156b>
		{
			sums[12] += ptr[i] ;
f012920c:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f0129212:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129215:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129218:	01 c8                	add    %ecx,%eax
f012921a:	8a 00                	mov    (%eax),%al
f012921c:	0f be c0             	movsbl %al,%eax
f012921f:	01 d0                	add    %edx,%eax
f0129221:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129227:	ff 45 f4             	incl   -0xc(%ebp)
f012922a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129230:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129233:	7f d7                	jg     f012920c <test_kfreelast+0x154d>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129235:	8b 8d 64 fe ff ff    	mov    -0x19c(%ebp),%ecx
f012923b:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f0129241:	89 d0                	mov    %edx,%eax
f0129243:	01 c0                	add    %eax,%eax
f0129245:	01 d0                	add    %edx,%eax
f0129247:	c1 e0 02             	shl    $0x2,%eax
f012924a:	39 c1                	cmp    %eax,%ecx
f012924c:	74 1d                	je     f012926b <test_kfreelast+0x15ac>
f012924e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129252:	75 17                	jne    f012926b <test_kfreelast+0x15ac>
f0129254:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012925b:	83 ec 0c             	sub    $0xc,%esp
f012925e:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0129263:	e8 c9 7b fd ff       	call   f0100e31 <cprintf>
f0129268:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012926b:	83 ec 0c             	sub    $0xc,%esp
f012926e:	6a 03                	push   $0x3
f0129270:	e8 a6 3b fe ff       	call   f010ce1b <sys_bypassPageFault>
f0129275:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f0129278:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012927e:	05 00 30 00 00       	add    $0x3000,%eax
f0129283:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f0129286:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012928d:	eb 3c                	jmp    f01292cb <test_kfreelast+0x160c>
		{
			ptr[i] = 10;
f012928f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129292:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129295:	01 d0                	add    %edx,%eax
f0129297:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012929a:	e8 6a 3b fe ff       	call   f010ce09 <sys_rcr2>
f012929f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01292a2:	8b 55 9c             	mov    -0x64(%ebp),%edx
f01292a5:	01 ca                	add    %ecx,%edx
f01292a7:	39 d0                	cmp    %edx,%eax
f01292a9:	74 1d                	je     f01292c8 <test_kfreelast+0x1609>
f01292ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01292af:	75 17                	jne    f01292c8 <test_kfreelast+0x1609>
f01292b1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01292b8:	83 ec 0c             	sub    $0xc,%esp
f01292bb:	68 ec a2 13 f0       	push   $0xf013a2ec
f01292c0:	e8 6c 7b fd ff       	call   f0100e31 <cprintf>
f01292c5:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f01292c8:	ff 45 f4             	incl   -0xc(%ebp)
f01292cb:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f01292d2:	7e bb                	jle    f012928f <test_kfreelast+0x15d0>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01292d4:	83 ec 0c             	sub    $0xc,%esp
f01292d7:	6a 00                	push   $0x0
f01292d9:	e8 3d 3b fe ff       	call   f010ce1b <sys_bypassPageFault>
f01292de:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01292e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01292e5:	75 17                	jne    f01292fe <test_kfreelast+0x163f>
f01292e7:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f01292eb:	83 ec 08             	sub    $0x8,%esp
f01292ee:	ff 75 f0             	pushl  -0x10(%ebp)
f01292f1:	68 40 a1 13 f0       	push   $0xf013a140
f01292f6:	e8 36 7b fd ff       	call   f0100e31 <cprintf>
f01292fb:	83 c4 10             	add    $0x10,%esp
f01292fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129305:	e8 76 36 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012930a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012930d:	e8 14 b3 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129312:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f0129315:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012931b:	83 ec 0c             	sub    $0xc,%esp
f012931e:	50                   	push   %eax
f012931f:	e8 f7 eb fd ff       	call   f0107f1b <kfree>
f0129324:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129327:	e8 fa b2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012932c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012932f:	74 1d                	je     f012934e <test_kfreelast+0x168f>
f0129331:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129335:	75 17                	jne    f012934e <test_kfreelast+0x168f>
f0129337:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012933e:	83 ec 0c             	sub    $0xc,%esp
f0129341:	68 68 a1 13 f0       	push   $0xf013a168
f0129346:	e8 e6 7a fd ff       	call   f0100e31 <cprintf>
f012934b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012934e:	e8 2d 36 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129353:	89 c2                	mov    %eax,%edx
f0129355:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129358:	29 c2                	sub    %eax,%edx
f012935a:	89 d0                	mov    %edx,%eax
f012935c:	83 f8 03             	cmp    $0x3,%eax
f012935f:	74 1d                	je     f012937e <test_kfreelast+0x16bf>
f0129361:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129365:	75 17                	jne    f012937e <test_kfreelast+0x16bf>
f0129367:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012936e:	83 ec 0c             	sub    $0xc,%esp
f0129371:	68 d4 a1 13 f0       	push   $0xf013a1d4
f0129376:	e8 b6 7a fd ff       	call   f0100e31 <cprintf>
f012937b:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012937e:	e8 fd 35 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129383:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129386:	e8 9b b2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012938b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012938e:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0129394:	83 ec 0c             	sub    $0xc,%esp
f0129397:	50                   	push   %eax
f0129398:	e8 7e eb fd ff       	call   f0107f1b <kfree>
f012939d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01293a0:	e8 81 b2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01293a5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01293a8:	74 1d                	je     f01293c7 <test_kfreelast+0x1708>
f01293aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293ae:	75 17                	jne    f01293c7 <test_kfreelast+0x1708>
f01293b0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293b7:	83 ec 0c             	sub    $0xc,%esp
f01293ba:	68 68 a1 13 f0       	push   $0xf013a168
f01293bf:	e8 6d 7a fd ff       	call   f0100e31 <cprintf>
f01293c4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01293c7:	e8 b4 35 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01293cc:	89 c2                	mov    %eax,%edx
f01293ce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01293d1:	29 c2                	sub    %eax,%edx
f01293d3:	89 d0                	mov    %edx,%eax
f01293d5:	83 f8 04             	cmp    $0x4,%eax
f01293d8:	74 1d                	je     f01293f7 <test_kfreelast+0x1738>
f01293da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293de:	75 17                	jne    f01293f7 <test_kfreelast+0x1738>
f01293e0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293e7:	83 ec 0c             	sub    $0xc,%esp
f01293ea:	68 d4 a1 13 f0       	push   $0xf013a1d4
f01293ef:	e8 3d 7a fd ff       	call   f0100e31 <cprintf>
f01293f4:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01293f7:	e8 84 35 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01293fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293ff:	e8 22 b2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129404:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129407:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012940d:	83 ec 0c             	sub    $0xc,%esp
f0129410:	50                   	push   %eax
f0129411:	e8 05 eb fd ff       	call   f0107f1b <kfree>
f0129416:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129419:	e8 08 b2 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012941e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129421:	74 1d                	je     f0129440 <test_kfreelast+0x1781>
f0129423:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129427:	75 17                	jne    f0129440 <test_kfreelast+0x1781>
f0129429:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129430:	83 ec 0c             	sub    $0xc,%esp
f0129433:	68 68 a1 13 f0       	push   $0xf013a168
f0129438:	e8 f4 79 fd ff       	call   f0100e31 <cprintf>
f012943d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129440:	e8 3b 35 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129445:	89 c2                	mov    %eax,%edx
f0129447:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012944a:	29 c2                	sub    %eax,%edx
f012944c:	89 d0                	mov    %edx,%eax
f012944e:	83 f8 05             	cmp    $0x5,%eax
f0129451:	74 1d                	je     f0129470 <test_kfreelast+0x17b1>
f0129453:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129457:	75 17                	jne    f0129470 <test_kfreelast+0x17b1>
f0129459:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129460:	83 ec 0c             	sub    $0xc,%esp
f0129463:	68 d4 a1 13 f0       	push   $0xf013a1d4
f0129468:	e8 c4 79 fd ff       	call   f0100e31 <cprintf>
f012946d:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f0129470:	e8 0b 35 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129475:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129478:	e8 a9 b1 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012947d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f0129480:	83 ec 0c             	sub    $0xc,%esp
f0129483:	68 00 c8 00 00       	push   $0xc800
f0129488:	e8 74 ea fd ff       	call   f0107f01 <kmalloc>
f012948d:	83 c4 10             	add    $0x10,%esp
f0129490:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129496:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012949c:	89 c1                	mov    %eax,%ecx
f012949e:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01294a5:	10 00 00 
f01294a8:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01294ad:	0f b6 d0             	movzbl %al,%edx
f01294b0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01294b6:	01 d0                	add    %edx,%eax
f01294b8:	48                   	dec    %eax
f01294b9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01294bf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01294c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01294ca:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01294d0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01294d6:	29 d0                	sub    %edx,%eax
f01294d8:	89 c3                	mov    %eax,%ebx
f01294da:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01294e1:	10 00 00 
f01294e4:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f01294e9:	0f b6 c0             	movzbl %al,%eax
f01294ec:	c1 e0 04             	shl    $0x4,%eax
f01294ef:	89 c2                	mov    %eax,%edx
f01294f1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01294f7:	01 d0                	add    %edx,%eax
f01294f9:	48                   	dec    %eax
f01294fa:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0129500:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129506:	ba 00 00 00 00       	mov    $0x0,%edx
f012950b:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0129511:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129517:	29 d0                	sub    %edx,%eax
f0129519:	01 d8                	add    %ebx,%eax
f012951b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129520:	39 c1                	cmp    %eax,%ecx
f0129522:	74 1d                	je     f0129541 <test_kfreelast+0x1882>
f0129524:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129528:	75 17                	jne    f0129541 <test_kfreelast+0x1882>
f012952a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129531:	83 ec 0c             	sub    $0xc,%esp
f0129534:	68 0c a2 13 f0       	push   $0xf013a20c
f0129539:	e8 f3 78 fd ff       	call   f0100e31 <cprintf>
f012953e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129541:	e8 e0 b0 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129546:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129549:	74 1d                	je     f0129568 <test_kfreelast+0x18a9>
f012954b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012954f:	75 17                	jne    f0129568 <test_kfreelast+0x18a9>
f0129551:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129558:	83 ec 0c             	sub    $0xc,%esp
f012955b:	68 68 a1 13 f0       	push   $0xf013a168
f0129560:	e8 cc 78 fd ff       	call   f0100e31 <cprintf>
f0129565:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129568:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012956b:	e8 10 34 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129570:	29 c3                	sub    %eax,%ebx
f0129572:	89 d8                	mov    %ebx,%eax
f0129574:	83 f8 0d             	cmp    $0xd,%eax
f0129577:	74 1d                	je     f0129596 <test_kfreelast+0x18d7>
f0129579:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012957d:	75 17                	jne    f0129596 <test_kfreelast+0x18d7>
f012957f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129586:	83 ec 0c             	sub    $0xc,%esp
f0129589:	68 74 a2 13 f0       	push   $0xf013a274
f012958e:	e8 9e 78 fd ff       	call   f0100e31 <cprintf>
f0129593:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f0129596:	c7 85 b8 fe ff ff ff 	movl   $0xc7ff,-0x148(%ebp)
f012959d:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f01295a0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01295a6:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f01295a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01295b0:	eb 0e                	jmp    f01295c0 <test_kfreelast+0x1901>
		{
			ptr[i] = 13 ;
f01295b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01295b5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01295b8:	01 d0                	add    %edx,%eax
f01295ba:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f01295bd:	ff 45 f4             	incl   -0xc(%ebp)
f01295c0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01295c6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01295c9:	7f e7                	jg     f01295b2 <test_kfreelast+0x18f3>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01295cb:	e8 b0 33 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01295d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295d3:	e8 4e b0 fd ff       	call   f0104626 <pf_calculate_free_frames>
f01295d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f01295db:	83 ec 0c             	sub    $0xc,%esp
f01295de:	68 00 fc 2f 00       	push   $0x2ffc00
f01295e3:	e8 19 e9 fd ff       	call   f0107f01 <kmalloc>
f01295e8:	83 c4 10             	add    $0x10,%esp
f01295eb:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01295f1:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01295f7:	89 c1                	mov    %eax,%ecx
f01295f9:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0129600:	10 00 00 
f0129603:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0129608:	0f b6 d0             	movzbl %al,%edx
f012960b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0129611:	01 d0                	add    %edx,%eax
f0129613:	48                   	dec    %eax
f0129614:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012961a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129620:	ba 00 00 00 00       	mov    $0x0,%edx
f0129625:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012962b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129631:	29 d0                	sub    %edx,%eax
f0129633:	89 c3                	mov    %eax,%ebx
f0129635:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012963c:	10 00 00 
f012963f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0129644:	0f b6 c0             	movzbl %al,%eax
f0129647:	c1 e0 04             	shl    $0x4,%eax
f012964a:	89 c2                	mov    %eax,%edx
f012964c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0129652:	01 d0                	add    %edx,%eax
f0129654:	48                   	dec    %eax
f0129655:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012965b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129661:	ba 00 00 00 00       	mov    $0x0,%edx
f0129666:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012966c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129672:	29 d0                	sub    %edx,%eax
f0129674:	01 d8                	add    %ebx,%eax
f0129676:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012967b:	39 c1                	cmp    %eax,%ecx
f012967d:	74 1d                	je     f012969c <test_kfreelast+0x19dd>
f012967f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129683:	75 17                	jne    f012969c <test_kfreelast+0x19dd>
f0129685:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012968c:	83 ec 0c             	sub    $0xc,%esp
f012968f:	68 0c a2 13 f0       	push   $0xf013a20c
f0129694:	e8 98 77 fd ff       	call   f0100e31 <cprintf>
f0129699:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012969c:	e8 85 af fd ff       	call   f0104626 <pf_calculate_free_frames>
f01296a1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01296a4:	74 1d                	je     f01296c3 <test_kfreelast+0x1a04>
f01296a6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296aa:	75 17                	jne    f01296c3 <test_kfreelast+0x1a04>
f01296ac:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296b3:	83 ec 0c             	sub    $0xc,%esp
f01296b6:	68 68 a1 13 f0       	push   $0xf013a168
f01296bb:	e8 71 77 fd ff       	call   f0100e31 <cprintf>
f01296c0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01296c3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01296c6:	e8 b5 32 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01296cb:	29 c3                	sub    %eax,%ebx
f01296cd:	89 d8                	mov    %ebx,%eax
f01296cf:	3d 00 03 00 00       	cmp    $0x300,%eax
f01296d4:	74 1d                	je     f01296f3 <test_kfreelast+0x1a34>
f01296d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296da:	75 17                	jne    f01296f3 <test_kfreelast+0x1a34>
f01296dc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296e3:	83 ec 0c             	sub    $0xc,%esp
f01296e6:	68 74 a2 13 f0       	push   $0xf013a274
f01296eb:	e8 41 77 fd ff       	call   f0100e31 <cprintf>
f01296f0:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f01296f3:	c7 85 bc fe ff ff ff 	movl   $0x2ffbff,-0x144(%ebp)
f01296fa:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f01296fd:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129703:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129706:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012970d:	eb 0e                	jmp    f012971d <test_kfreelast+0x1a5e>
		{
			ptr[i] = 14 ;
f012970f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129712:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129715:	01 d0                	add    %edx,%eax
f0129717:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012971a:	ff 45 f4             	incl   -0xc(%ebp)
f012971d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129723:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129726:	7f e7                	jg     f012970f <test_kfreelast+0x1a50>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129728:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012972c:	75 17                	jne    f0129745 <test_kfreelast+0x1a86>
f012972e:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f0129732:	83 ec 08             	sub    $0x8,%esp
f0129735:	ff 75 f0             	pushl  -0x10(%ebp)
f0129738:	68 40 a1 13 f0       	push   $0xf013a140
f012973d:	e8 ef 76 fd ff       	call   f0100e31 <cprintf>
f0129742:	83 c4 10             	add    $0x10,%esp
f0129745:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012974c:	e8 2f 32 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129751:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129754:	e8 cd ae fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129759:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012975c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129762:	83 ec 0c             	sub    $0xc,%esp
f0129765:	50                   	push   %eax
f0129766:	e8 b0 e7 fd ff       	call   f0107f1b <kfree>
f012976b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012976e:	e8 b3 ae fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129773:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129776:	74 1d                	je     f0129795 <test_kfreelast+0x1ad6>
f0129778:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012977c:	75 17                	jne    f0129795 <test_kfreelast+0x1ad6>
f012977e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129785:	83 ec 0c             	sub    $0xc,%esp
f0129788:	68 68 a1 13 f0       	push   $0xf013a168
f012978d:	e8 9f 76 fd ff       	call   f0100e31 <cprintf>
f0129792:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129795:	e8 e6 31 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012979a:	89 c2                	mov    %eax,%edx
f012979c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012979f:	29 c2                	sub    %eax,%edx
f01297a1:	89 d0                	mov    %edx,%eax
f01297a3:	83 f8 0d             	cmp    $0xd,%eax
f01297a6:	74 1d                	je     f01297c5 <test_kfreelast+0x1b06>
f01297a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297ac:	75 17                	jne    f01297c5 <test_kfreelast+0x1b06>
f01297ae:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297b5:	83 ec 0c             	sub    $0xc,%esp
f01297b8:	68 d4 a1 13 f0       	push   $0xf013a1d4
f01297bd:	e8 6f 76 fd ff       	call   f0100e31 <cprintf>
f01297c2:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01297c5:	83 ec 0c             	sub    $0xc,%esp
f01297c8:	6a 03                	push   $0x3
f01297ca:	e8 4c 36 fe ff       	call   f010ce1b <sys_bypassPageFault>
f01297cf:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f01297d2:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01297d8:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f01297db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01297e2:	eb 3c                	jmp    f0129820 <test_kfreelast+0x1b61>
		{
			ptr[i] = 10;
f01297e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01297e7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01297ea:	01 d0                	add    %edx,%eax
f01297ec:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f01297ef:	e8 15 36 fe ff       	call   f010ce09 <sys_rcr2>
f01297f4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01297f7:	8b 55 9c             	mov    -0x64(%ebp),%edx
f01297fa:	01 ca                	add    %ecx,%edx
f01297fc:	39 d0                	cmp    %edx,%eax
f01297fe:	74 1d                	je     f012981d <test_kfreelast+0x1b5e>
f0129800:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129804:	75 17                	jne    f012981d <test_kfreelast+0x1b5e>
f0129806:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012980d:	83 ec 0c             	sub    $0xc,%esp
f0129810:	68 ec a2 13 f0       	push   $0xf013a2ec
f0129815:	e8 17 76 fd ff       	call   f0100e31 <cprintf>
f012981a:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012981d:	ff 45 f4             	incl   -0xc(%ebp)
f0129820:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f0129827:	7e bb                	jle    f01297e4 <test_kfreelast+0x1b25>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129829:	83 ec 0c             	sub    $0xc,%esp
f012982c:	6a 00                	push   $0x0
f012982e:	e8 e8 35 fe ff       	call   f010ce1b <sys_bypassPageFault>
f0129833:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f0129836:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012983c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012983f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129846:	eb 1e                	jmp    f0129866 <test_kfreelast+0x1ba7>
		{
			sums[14] += ptr[i] ;
f0129848:	8b 95 6c fe ff ff    	mov    -0x194(%ebp),%edx
f012984e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129851:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129854:	01 c8                	add    %ecx,%eax
f0129856:	8a 00                	mov    (%eax),%al
f0129858:	0f be c0             	movsbl %al,%eax
f012985b:	01 d0                	add    %edx,%eax
f012985d:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0129863:	ff 45 f4             	incl   -0xc(%ebp)
f0129866:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012986c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012986f:	7f d7                	jg     f0129848 <test_kfreelast+0x1b89>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129871:	8b 8d 6c fe ff ff    	mov    -0x194(%ebp),%ecx
f0129877:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f012987d:	89 d0                	mov    %edx,%eax
f012987f:	01 c0                	add    %eax,%eax
f0129881:	01 d0                	add    %edx,%eax
f0129883:	01 c0                	add    %eax,%eax
f0129885:	01 d0                	add    %edx,%eax
f0129887:	01 c0                	add    %eax,%eax
f0129889:	39 c1                	cmp    %eax,%ecx
f012988b:	74 1d                	je     f01298aa <test_kfreelast+0x1beb>
f012988d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129891:	75 17                	jne    f01298aa <test_kfreelast+0x1beb>
f0129893:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012989a:	83 ec 0c             	sub    $0xc,%esp
f012989d:	68 b8 a2 13 f0       	push   $0xf013a2b8
f01298a2:	e8 8a 75 fd ff       	call   f0100e31 <cprintf>
f01298a7:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01298aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298ae:	75 17                	jne    f01298c7 <test_kfreelast+0x1c08>
f01298b0:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f01298b4:	83 ec 08             	sub    $0x8,%esp
f01298b7:	ff 75 f0             	pushl  -0x10(%ebp)
f01298ba:	68 40 a1 13 f0       	push   $0xf013a140
f01298bf:	e8 6d 75 fd ff       	call   f0100e31 <cprintf>
f01298c4:	83 c4 10             	add    $0x10,%esp
f01298c7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01298ce:	e8 ad 30 fe ff       	call   f010c980 <sys_calculate_free_frames>
f01298d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298d6:	e8 4b ad fd ff       	call   f0104626 <pf_calculate_free_frames>
f01298db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f01298de:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01298e4:	83 ec 0c             	sub    $0xc,%esp
f01298e7:	50                   	push   %eax
f01298e8:	e8 2e e6 fd ff       	call   f0107f1b <kfree>
f01298ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01298f0:	e8 31 ad fd ff       	call   f0104626 <pf_calculate_free_frames>
f01298f5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01298f8:	74 1d                	je     f0129917 <test_kfreelast+0x1c58>
f01298fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298fe:	75 17                	jne    f0129917 <test_kfreelast+0x1c58>
f0129900:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129907:	83 ec 0c             	sub    $0xc,%esp
f012990a:	68 68 a1 13 f0       	push   $0xf013a168
f012990f:	e8 1d 75 fd ff       	call   f0100e31 <cprintf>
f0129914:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129917:	e8 64 30 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012991c:	89 c2                	mov    %eax,%edx
f012991e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129921:	29 c2                	sub    %eax,%edx
f0129923:	89 d0                	mov    %edx,%eax
f0129925:	83 f8 02             	cmp    $0x2,%eax
f0129928:	74 1d                	je     f0129947 <test_kfreelast+0x1c88>
f012992a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012992e:	75 17                	jne    f0129947 <test_kfreelast+0x1c88>
f0129930:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129937:	83 ec 0c             	sub    $0xc,%esp
f012993a:	68 d4 a1 13 f0       	push   $0xf013a1d4
f012993f:	e8 ed 74 fd ff       	call   f0100e31 <cprintf>
f0129944:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129947:	e8 34 30 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012994c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012994f:	e8 d2 ac fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129954:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f0129957:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012995d:	83 ec 0c             	sub    $0xc,%esp
f0129960:	50                   	push   %eax
f0129961:	e8 b5 e5 fd ff       	call   f0107f1b <kfree>
f0129966:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129969:	e8 b8 ac fd ff       	call   f0104626 <pf_calculate_free_frames>
f012996e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129971:	74 1d                	je     f0129990 <test_kfreelast+0x1cd1>
f0129973:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129977:	75 17                	jne    f0129990 <test_kfreelast+0x1cd1>
f0129979:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129980:	83 ec 0c             	sub    $0xc,%esp
f0129983:	68 68 a1 13 f0       	push   $0xf013a168
f0129988:	e8 a4 74 fd ff       	call   f0100e31 <cprintf>
f012998d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129990:	e8 eb 2f fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129995:	89 c2                	mov    %eax,%edx
f0129997:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012999a:	29 c2                	sub    %eax,%edx
f012999c:	89 d0                	mov    %edx,%eax
f012999e:	3d 00 03 00 00       	cmp    $0x300,%eax
f01299a3:	74 1d                	je     f01299c2 <test_kfreelast+0x1d03>
f01299a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299a9:	75 17                	jne    f01299c2 <test_kfreelast+0x1d03>
f01299ab:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299b2:	83 ec 0c             	sub    $0xc,%esp
f01299b5:	68 d4 a1 13 f0       	push   $0xf013a1d4
f01299ba:	e8 72 74 fd ff       	call   f0100e31 <cprintf>
f01299bf:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01299c2:	e8 b9 2f fe ff       	call   f010c980 <sys_calculate_free_frames>
f01299c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299ca:	e8 57 ac fd ff       	call   f0104626 <pf_calculate_free_frames>
f01299cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f01299d2:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01299d8:	83 ec 0c             	sub    $0xc,%esp
f01299db:	50                   	push   %eax
f01299dc:	e8 3a e5 fd ff       	call   f0107f1b <kfree>
f01299e1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01299e4:	e8 3d ac fd ff       	call   f0104626 <pf_calculate_free_frames>
f01299e9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01299ec:	74 1d                	je     f0129a0b <test_kfreelast+0x1d4c>
f01299ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299f2:	75 17                	jne    f0129a0b <test_kfreelast+0x1d4c>
f01299f4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299fb:	83 ec 0c             	sub    $0xc,%esp
f01299fe:	68 68 a1 13 f0       	push   $0xf013a168
f0129a03:	e8 29 74 fd ff       	call   f0100e31 <cprintf>
f0129a08:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129a0b:	e8 70 2f fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129a10:	89 c2                	mov    %eax,%edx
f0129a12:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a15:	29 c2                	sub    %eax,%edx
f0129a17:	89 d0                	mov    %edx,%eax
f0129a19:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129a1e:	74 1d                	je     f0129a3d <test_kfreelast+0x1d7e>
f0129a20:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a24:	75 17                	jne    f0129a3d <test_kfreelast+0x1d7e>
f0129a26:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a2d:	83 ec 0c             	sub    $0xc,%esp
f0129a30:	68 d4 a1 13 f0       	push   $0xf013a1d4
f0129a35:	e8 f7 73 fd ff       	call   f0100e31 <cprintf>
f0129a3a:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129a3d:	e8 3e 2f fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129a42:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a45:	e8 dc ab fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129a4a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129a4d:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129a53:	83 ec 0c             	sub    $0xc,%esp
f0129a56:	50                   	push   %eax
f0129a57:	e8 bf e4 fd ff       	call   f0107f1b <kfree>
f0129a5c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a5f:	e8 c2 ab fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129a64:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a67:	74 1d                	je     f0129a86 <test_kfreelast+0x1dc7>
f0129a69:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a6d:	75 17                	jne    f0129a86 <test_kfreelast+0x1dc7>
f0129a6f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a76:	83 ec 0c             	sub    $0xc,%esp
f0129a79:	68 68 a1 13 f0       	push   $0xf013a168
f0129a7e:	e8 ae 73 fd ff       	call   f0100e31 <cprintf>
f0129a83:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129a86:	e8 f5 2e fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129a8b:	89 c2                	mov    %eax,%edx
f0129a8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a90:	29 c2                	sub    %eax,%edx
f0129a92:	89 d0                	mov    %edx,%eax
f0129a94:	83 f8 01             	cmp    $0x1,%eax
f0129a97:	74 1d                	je     f0129ab6 <test_kfreelast+0x1df7>
f0129a99:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a9d:	75 17                	jne    f0129ab6 <test_kfreelast+0x1df7>
f0129a9f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129aa6:	83 ec 0c             	sub    $0xc,%esp
f0129aa9:	68 d4 a1 13 f0       	push   $0xf013a1d4
f0129aae:	e8 7e 73 fd ff       	call   f0100e31 <cprintf>
f0129ab3:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129ab6:	e8 c5 2e fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129abb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129abe:	e8 63 ab fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129ac3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f0129ac6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0129acc:	83 ec 0c             	sub    $0xc,%esp
f0129acf:	50                   	push   %eax
f0129ad0:	e8 46 e4 fd ff       	call   f0107f1b <kfree>
f0129ad5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129ad8:	e8 49 ab fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129add:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ae0:	74 1d                	je     f0129aff <test_kfreelast+0x1e40>
f0129ae2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ae6:	75 17                	jne    f0129aff <test_kfreelast+0x1e40>
f0129ae8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129aef:	83 ec 0c             	sub    $0xc,%esp
f0129af2:	68 68 a1 13 f0       	push   $0xf013a168
f0129af7:	e8 35 73 fd ff       	call   f0100e31 <cprintf>
f0129afc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129aff:	e8 7c 2e fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129b04:	89 c2                	mov    %eax,%edx
f0129b06:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129b09:	29 c2                	sub    %eax,%edx
f0129b0b:	89 d0                	mov    %edx,%eax
f0129b0d:	83 f8 01             	cmp    $0x1,%eax
f0129b10:	74 1d                	je     f0129b2f <test_kfreelast+0x1e70>
f0129b12:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b16:	75 17                	jne    f0129b2f <test_kfreelast+0x1e70>
f0129b18:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b1f:	83 ec 0c             	sub    $0xc,%esp
f0129b22:	68 d4 a1 13 f0       	push   $0xf013a1d4
f0129b27:	e8 05 73 fd ff       	call   f0100e31 <cprintf>
f0129b2c:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f0129b2f:	e8 4c 2e fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129b34:	89 c2                	mov    %eax,%edx
f0129b36:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0129b39:	39 c2                	cmp    %eax,%edx
f0129b3b:	74 1d                	je     f0129b5a <test_kfreelast+0x1e9b>
f0129b3d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b41:	75 17                	jne    f0129b5a <test_kfreelast+0x1e9b>
f0129b43:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b4a:	83 ec 0c             	sub    $0xc,%esp
f0129b4d:	68 34 a3 13 f0       	push   $0xf013a334
f0129b52:	e8 da 72 fd ff       	call   f0100e31 <cprintf>
f0129b57:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129b5a:	83 ec 0c             	sub    $0xc,%esp
f0129b5d:	6a 03                	push   $0x3
f0129b5f:	e8 b7 32 fe ff       	call   f010ce1b <sys_bypassPageFault>
f0129b64:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f0129b67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b6e:	e9 8e 00 00 00       	jmp    f0129c01 <test_kfreelast+0x1f42>
		{
			ptr = (char *) ptr_allocations[i];
f0129b73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129b76:	8b 84 85 e4 fd ff ff 	mov    -0x21c(%ebp,%eax,4),%eax
f0129b7d:	89 45 9c             	mov    %eax,-0x64(%ebp)
			ptr[0] = 10;
f0129b80:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129b83:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129b86:	e8 7e 32 fe ff       	call   f010ce09 <sys_rcr2>
f0129b8b:	89 c2                	mov    %eax,%edx
f0129b8d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129b90:	39 c2                	cmp    %eax,%edx
f0129b92:	74 1d                	je     f0129bb1 <test_kfreelast+0x1ef2>
f0129b94:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b98:	75 17                	jne    f0129bb1 <test_kfreelast+0x1ef2>
f0129b9a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ba1:	83 ec 0c             	sub    $0xc,%esp
f0129ba4:	68 ec a2 13 f0       	push   $0xf013a2ec
f0129ba9:	e8 83 72 fd ff       	call   f0100e31 <cprintf>
f0129bae:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f0129bb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bb4:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129bbb:	89 c2                	mov    %eax,%edx
f0129bbd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129bc0:	01 d0                	add    %edx,%eax
f0129bc2:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129bc5:	e8 3f 32 fe ff       	call   f010ce09 <sys_rcr2>
f0129bca:	89 c2                	mov    %eax,%edx
f0129bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bcf:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129bd6:	89 c1                	mov    %eax,%ecx
f0129bd8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129bdb:	01 c8                	add    %ecx,%eax
f0129bdd:	39 c2                	cmp    %eax,%edx
f0129bdf:	74 1d                	je     f0129bfe <test_kfreelast+0x1f3f>
f0129be1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129be5:	75 17                	jne    f0129bfe <test_kfreelast+0x1f3f>
f0129be7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129bee:	83 ec 0c             	sub    $0xc,%esp
f0129bf1:	68 ec a2 13 f0       	push   $0xf013a2ec
f0129bf6:	e8 36 72 fd ff       	call   f0100e31 <cprintf>
f0129bfb:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f0129bfe:	ff 45 f4             	incl   -0xc(%ebp)
f0129c01:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f0129c05:	0f 8e 68 ff ff ff    	jle    f0129b73 <test_kfreelast+0x1eb4>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129c0b:	83 ec 0c             	sub    $0xc,%esp
f0129c0e:	6a 00                	push   $0x0
f0129c10:	e8 06 32 fe ff       	call   f010ce1b <sys_bypassPageFault>
f0129c15:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c18:	e8 63 2d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129c1d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c20:	e8 01 aa fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129c25:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f0129c28:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0129c2e:	83 ec 0c             	sub    $0xc,%esp
f0129c31:	50                   	push   %eax
f0129c32:	e8 e4 e2 fd ff       	call   f0107f1b <kfree>
f0129c37:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129c3a:	e8 e7 a9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129c3f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c42:	74 1d                	je     f0129c61 <test_kfreelast+0x1fa2>
f0129c44:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c48:	75 17                	jne    f0129c61 <test_kfreelast+0x1fa2>
f0129c4a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c51:	83 ec 0c             	sub    $0xc,%esp
f0129c54:	68 68 a1 13 f0       	push   $0xf013a168
f0129c59:	e8 d3 71 fd ff       	call   f0100e31 <cprintf>
f0129c5e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129c61:	e8 1a 2d fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129c66:	89 c2                	mov    %eax,%edx
f0129c68:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129c6b:	39 c2                	cmp    %eax,%edx
f0129c6d:	74 1d                	je     f0129c8c <test_kfreelast+0x1fcd>
f0129c6f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c73:	75 17                	jne    f0129c8c <test_kfreelast+0x1fcd>
f0129c75:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c7c:	83 ec 0c             	sub    $0xc,%esp
f0129c7f:	68 6c a3 13 f0       	push   $0xf013a36c
f0129c84:	e8 a8 71 fd ff       	call   f0100e31 <cprintf>
f0129c89:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129c8c:	e8 ef 2c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129c91:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c94:	e8 8d a9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129c99:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129c9c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129ca2:	83 ec 0c             	sub    $0xc,%esp
f0129ca5:	50                   	push   %eax
f0129ca6:	e8 70 e2 fd ff       	call   f0107f1b <kfree>
f0129cab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129cae:	e8 73 a9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129cb3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129cb6:	74 1d                	je     f0129cd5 <test_kfreelast+0x2016>
f0129cb8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129cbc:	75 17                	jne    f0129cd5 <test_kfreelast+0x2016>
f0129cbe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129cc5:	83 ec 0c             	sub    $0xc,%esp
f0129cc8:	68 68 a1 13 f0       	push   $0xf013a168
f0129ccd:	e8 5f 71 fd ff       	call   f0100e31 <cprintf>
f0129cd2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129cd5:	e8 a6 2c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129cda:	89 c2                	mov    %eax,%edx
f0129cdc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129cdf:	39 c2                	cmp    %eax,%edx
f0129ce1:	74 1d                	je     f0129d00 <test_kfreelast+0x2041>
f0129ce3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ce7:	75 17                	jne    f0129d00 <test_kfreelast+0x2041>
f0129ce9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129cf0:	83 ec 0c             	sub    $0xc,%esp
f0129cf3:	68 6c a3 13 f0       	push   $0xf013a36c
f0129cf8:	e8 34 71 fd ff       	call   f0100e31 <cprintf>
f0129cfd:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129d00:	e8 7b 2c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129d05:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d08:	e8 19 a9 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129d0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129d10:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0129d16:	83 ec 0c             	sub    $0xc,%esp
f0129d19:	50                   	push   %eax
f0129d1a:	e8 fc e1 fd ff       	call   f0107f1b <kfree>
f0129d1f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129d22:	e8 ff a8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129d27:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d2a:	74 1d                	je     f0129d49 <test_kfreelast+0x208a>
f0129d2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d30:	75 17                	jne    f0129d49 <test_kfreelast+0x208a>
f0129d32:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d39:	83 ec 0c             	sub    $0xc,%esp
f0129d3c:	68 68 a1 13 f0       	push   $0xf013a168
f0129d41:	e8 eb 70 fd ff       	call   f0100e31 <cprintf>
f0129d46:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129d49:	e8 32 2c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129d4e:	89 c2                	mov    %eax,%edx
f0129d50:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129d53:	39 c2                	cmp    %eax,%edx
f0129d55:	74 1d                	je     f0129d74 <test_kfreelast+0x20b5>
f0129d57:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d5b:	75 17                	jne    f0129d74 <test_kfreelast+0x20b5>
f0129d5d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d64:	83 ec 0c             	sub    $0xc,%esp
f0129d67:	68 6c a3 13 f0       	push   $0xf013a36c
f0129d6c:	e8 c0 70 fd ff       	call   f0100e31 <cprintf>
f0129d71:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129d74:	e8 07 2c fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129d79:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d7c:	e8 a5 a8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129d81:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129d84:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129d8a:	83 ec 0c             	sub    $0xc,%esp
f0129d8d:	50                   	push   %eax
f0129d8e:	e8 88 e1 fd ff       	call   f0107f1b <kfree>
f0129d93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129d96:	e8 8b a8 fd ff       	call   f0104626 <pf_calculate_free_frames>
f0129d9b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d9e:	74 1d                	je     f0129dbd <test_kfreelast+0x20fe>
f0129da0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129da4:	75 17                	jne    f0129dbd <test_kfreelast+0x20fe>
f0129da6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129dad:	83 ec 0c             	sub    $0xc,%esp
f0129db0:	68 68 a1 13 f0       	push   $0xf013a168
f0129db5:	e8 77 70 fd ff       	call   f0100e31 <cprintf>
f0129dba:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129dbd:	e8 be 2b fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129dc2:	89 c2                	mov    %eax,%edx
f0129dc4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129dc7:	39 c2                	cmp    %eax,%edx
f0129dc9:	74 1d                	je     f0129de8 <test_kfreelast+0x2129>
f0129dcb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129dcf:	75 17                	jne    f0129de8 <test_kfreelast+0x2129>
f0129dd1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129dd8:	83 ec 0c             	sub    $0xc,%esp
f0129ddb:	68 6c a3 13 f0       	push   $0xf013a36c
f0129de0:	e8 4c 70 fd ff       	call   f0100e31 <cprintf>
f0129de5:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129de8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129dec:	75 17                	jne    f0129e05 <test_kfreelast+0x2146>
f0129dee:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0129df2:	83 ec 08             	sub    $0x8,%esp
f0129df5:	ff 75 f0             	pushl  -0x10(%ebp)
f0129df8:	68 40 a1 13 f0       	push   $0xf013a140
f0129dfd:	e8 2f 70 fd ff       	call   f0100e31 <cprintf>
f0129e02:	83 c4 10             	add    $0x10,%esp
f0129e05:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f0129e0c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129e11:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129e14:	5b                   	pop    %ebx
f0129e15:	5f                   	pop    %edi
f0129e16:	5d                   	pop    %ebp
f0129e17:	c3                   	ret    

f0129e18 <test_krealloc>:

int test_krealloc() {
f0129e18:	55                   	push   %ebp
f0129e19:	89 e5                	mov    %esp,%ebp
f0129e1b:	57                   	push   %edi
f0129e1c:	53                   	push   %ebx
f0129e1d:	81 ec 00 02 00 00    	sub    $0x200,%esp
	cprintf("==============================================\n");
f0129e23:	83 ec 0c             	sub    $0xc,%esp
f0129e26:	68 50 90 13 f0       	push   $0xf0139050
f0129e2b:	e8 01 70 fd ff       	call   f0100e31 <cprintf>
f0129e30:	83 c4 10             	add    $0x10,%esp
	cprintf(
f0129e33:	83 ec 0c             	sub    $0xc,%esp
f0129e36:	68 80 90 13 f0       	push   $0xf0139080
f0129e3b:	e8 f1 6f fd ff       	call   f0100e31 <cprintf>
f0129e40:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f0129e43:	83 ec 0c             	sub    $0xc,%esp
f0129e46:	68 50 90 13 f0       	push   $0xf0139050
f0129e4b:	e8 e1 6f fd ff       	call   f0100e31 <cprintf>
f0129e50:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f0129e53:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f0129e57:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f0129e5b:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f0129e61:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f0129e67:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129e6e:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f0129e75:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f0129e7b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129e80:	b8 00 00 00 00       	mov    $0x0,%eax
f0129e85:	89 d7                	mov    %edx,%edi
f0129e87:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f0129e89:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f0129e90:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0129e96:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129e9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0129ea0:	89 d7                	mov    %edx,%edi
f0129ea2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f0129ea4:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f0129eaa:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129eaf:	b8 00 00 00 00       	mov    $0x0,%eax
f0129eb4:	89 d7                	mov    %edx,%edi
f0129eb6:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129eb8:	e8 c3 2a fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129ebd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f0129ec0:	83 ec 08             	sub    $0x8,%esp
f0129ec3:	68 00 fc 0f 00       	push   $0xffc00
f0129ec8:	6a 00                	push   $0x0
f0129eca:	e8 e8 e0 fd ff       	call   f0107fb7 <krealloc>
f0129ecf:	83 c4 10             	add    $0x10,%esp
f0129ed2:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f0129ed8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129ede:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0129ee3:	77 17                	ja     f0129efc <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129ee5:	83 ec 04             	sub    $0x4,%esp
f0129ee8:	68 b4 a3 13 f0       	push   $0xf013a3b4
f0129eed:	68 e2 0e 00 00       	push   $0xee2
f0129ef2:	68 0e 91 13 f0       	push   $0xf013910e
f0129ef7:	e8 b4 62 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f0129efc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129f02:	89 c1                	mov    %eax,%ecx
f0129f04:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129f0b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0129f10:	0f b6 d0             	movzbl %al,%edx
f0129f13:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129f16:	01 d0                	add    %edx,%eax
f0129f18:	48                   	dec    %eax
f0129f19:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129f1c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129f1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f24:	f7 75 b4             	divl   -0x4c(%ebp)
f0129f27:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129f2a:	29 d0                	sub    %edx,%eax
f0129f2c:	89 c3                	mov    %eax,%ebx
f0129f2e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129f35:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f0129f3a:	0f b6 c0             	movzbl %al,%eax
f0129f3d:	c1 e0 04             	shl    $0x4,%eax
f0129f40:	89 c2                	mov    %eax,%edx
f0129f42:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129f45:	01 d0                	add    %edx,%eax
f0129f47:	48                   	dec    %eax
f0129f48:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129f4b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129f4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f53:	f7 75 ac             	divl   -0x54(%ebp)
f0129f56:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129f59:	29 d0                	sub    %edx,%eax
f0129f5b:	01 d8                	add    %ebx,%eax
f0129f5d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129f62:	39 c1                	cmp    %eax,%ecx
f0129f64:	74 17                	je     f0129f7d <test_krealloc+0x165>
			panic("krealloc: Wrong start address for allocated space");
f0129f66:	83 ec 04             	sub    $0x4,%esp
f0129f69:	68 f0 a3 13 f0       	push   $0xf013a3f0
f0129f6e:	68 e4 0e 00 00       	push   $0xee4
f0129f73:	68 0e 91 13 f0       	push   $0xf013910e
f0129f78:	e8 33 62 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129f7d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129f80:	e8 fb 29 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129f85:	29 c3                	sub    %eax,%ebx
f0129f87:	89 d8                	mov    %ebx,%eax
f0129f89:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129f8e:	74 17                	je     f0129fa7 <test_krealloc+0x18f>
			panic("krealloc: Wrong allocation: ");
f0129f90:	83 ec 04             	sub    $0x4,%esp
f0129f93:	68 22 a4 13 f0       	push   $0xf013a422
f0129f98:	68 e7 0e 00 00       	push   $0xee7
f0129f9d:	68 0e 91 13 f0       	push   $0xf013910e
f0129fa2:	e8 09 62 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f0129fa7:	c7 85 58 fe ff ff ff 	movl   $0xffbff,-0x1a8(%ebp)
f0129fae:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129fb1:	e8 ca 29 fe ff       	call   f010c980 <sys_calculate_free_frames>
f0129fb6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f0129fb9:	83 ec 08             	sub    $0x8,%esp
f0129fbc:	68 00 fc 0f 00       	push   $0xffc00
f0129fc1:	6a 00                	push   $0x0
f0129fc3:	e8 ef df fd ff       	call   f0107fb7 <krealloc>
f0129fc8:	83 c4 10             	add    $0x10,%esp
f0129fcb:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f0129fd1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129fd7:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f0129fdc:	77 17                	ja     f0129ff5 <test_krealloc+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129fde:	83 ec 04             	sub    $0x4,%esp
f0129fe1:	68 b4 a3 13 f0       	push   $0xf013a3b4
f0129fe6:	68 ef 0e 00 00       	push   $0xeef
f0129feb:	68 0e 91 13 f0       	push   $0xf013910e
f0129ff0:	e8 bb 61 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f0129ff5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129ffb:	89 c1                	mov    %eax,%ecx
f0129ffd:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a004:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a009:	0f b6 d0             	movzbl %al,%edx
f012a00c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a00f:	01 d0                	add    %edx,%eax
f012a011:	48                   	dec    %eax
f012a012:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a015:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a018:	ba 00 00 00 00       	mov    $0x0,%edx
f012a01d:	f7 75 a4             	divl   -0x5c(%ebp)
f012a020:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a023:	29 d0                	sub    %edx,%eax
f012a025:	89 c3                	mov    %eax,%ebx
f012a027:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a02e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a033:	0f b6 c0             	movzbl %al,%eax
f012a036:	c1 e0 04             	shl    $0x4,%eax
f012a039:	89 c2                	mov    %eax,%edx
f012a03b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a03e:	01 d0                	add    %edx,%eax
f012a040:	48                   	dec    %eax
f012a041:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a044:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a047:	ba 00 00 00 00       	mov    $0x0,%edx
f012a04c:	f7 75 9c             	divl   -0x64(%ebp)
f012a04f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a052:	29 d0                	sub    %edx,%eax
f012a054:	01 d8                	add    %ebx,%eax
f012a056:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012a05b:	39 c1                	cmp    %eax,%ecx
f012a05d:	74 17                	je     f012a076 <test_krealloc+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012a05f:	83 ec 04             	sub    $0x4,%esp
f012a062:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012a067:	68 f1 0e 00 00       	push   $0xef1
f012a06c:	68 0e 91 13 f0       	push   $0xf013910e
f012a071:	e8 3a 61 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a076:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a079:	e8 02 29 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a07e:	29 c3                	sub    %eax,%ebx
f012a080:	89 d8                	mov    %ebx,%eax
f012a082:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a087:	74 17                	je     f012a0a0 <test_krealloc+0x288>
			panic("krealloc: Wrong allocation: ");
f012a089:	83 ec 04             	sub    $0x4,%esp
f012a08c:	68 22 a4 13 f0       	push   $0xf013a422
f012a091:	68 f3 0e 00 00       	push   $0xef3
f012a096:	68 0e 91 13 f0       	push   $0xf013910e
f012a09b:	e8 10 61 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a0a0:	c7 85 5c fe ff ff ff 	movl   $0xffbff,-0x1a4(%ebp)
f012a0a7:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a0aa:	e8 d1 28 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a0af:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012a0b2:	83 ec 08             	sub    $0x8,%esp
f012a0b5:	68 00 fc 0f 00       	push   $0xffc00
f012a0ba:	6a 00                	push   $0x0
f012a0bc:	e8 f6 de fd ff       	call   f0107fb7 <krealloc>
f012a0c1:	83 c4 10             	add    $0x10,%esp
f012a0c4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012a0ca:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a0d0:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012a0d5:	77 17                	ja     f012a0ee <test_krealloc+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a0d7:	83 ec 04             	sub    $0x4,%esp
f012a0da:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012a0df:	68 fb 0e 00 00       	push   $0xefb
f012a0e4:	68 0e 91 13 f0       	push   $0xf013910e
f012a0e9:	e8 c2 60 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012a0ee:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a0f4:	89 c1                	mov    %eax,%ecx
f012a0f6:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a0fd:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a102:	0f b6 d0             	movzbl %al,%edx
f012a105:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a108:	01 d0                	add    %edx,%eax
f012a10a:	48                   	dec    %eax
f012a10b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a10e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a111:	ba 00 00 00 00       	mov    $0x0,%edx
f012a116:	f7 75 94             	divl   -0x6c(%ebp)
f012a119:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a11c:	29 d0                	sub    %edx,%eax
f012a11e:	89 c3                	mov    %eax,%ebx
f012a120:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a127:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a12c:	0f b6 c0             	movzbl %al,%eax
f012a12f:	c1 e0 04             	shl    $0x4,%eax
f012a132:	89 c2                	mov    %eax,%edx
f012a134:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a137:	01 d0                	add    %edx,%eax
f012a139:	48                   	dec    %eax
f012a13a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a13d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a140:	ba 00 00 00 00       	mov    $0x0,%edx
f012a145:	f7 75 8c             	divl   -0x74(%ebp)
f012a148:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a14b:	29 d0                	sub    %edx,%eax
f012a14d:	01 d8                	add    %ebx,%eax
f012a14f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a154:	39 c1                	cmp    %eax,%ecx
f012a156:	74 17                	je     f012a16f <test_krealloc+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012a158:	83 ec 04             	sub    $0x4,%esp
f012a15b:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012a160:	68 fd 0e 00 00       	push   $0xefd
f012a165:	68 0e 91 13 f0       	push   $0xf013910e
f012a16a:	e8 41 60 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a16f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a172:	e8 09 28 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a177:	29 c3                	sub    %eax,%ebx
f012a179:	89 d8                	mov    %ebx,%eax
f012a17b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a180:	74 17                	je     f012a199 <test_krealloc+0x381>
			panic("krealloc: Wrong allocation: ");
f012a182:	83 ec 04             	sub    $0x4,%esp
f012a185:	68 22 a4 13 f0       	push   $0xf013a422
f012a18a:	68 ff 0e 00 00       	push   $0xeff
f012a18f:	68 0e 91 13 f0       	push   $0xf013910e
f012a194:	e8 17 60 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a199:	c7 85 60 fe ff ff ff 	movl   $0x3feff,-0x1a0(%ebp)
f012a1a0:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a1a3:	e8 d8 27 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a1a8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012a1ab:	83 ec 08             	sub    $0x8,%esp
f012a1ae:	68 00 fc 0f 00       	push   $0xffc00
f012a1b3:	6a 00                	push   $0x0
f012a1b5:	e8 fd dd fd ff       	call   f0107fb7 <krealloc>
f012a1ba:	83 c4 10             	add    $0x10,%esp
f012a1bd:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012a1c3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a1c9:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012a1ce:	77 17                	ja     f012a1e7 <test_krealloc+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a1d0:	83 ec 04             	sub    $0x4,%esp
f012a1d3:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012a1d8:	68 06 0f 00 00       	push   $0xf06
f012a1dd:	68 0e 91 13 f0       	push   $0xf013910e
f012a1e2:	e8 c9 5f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012a1e7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a1ed:	89 c1                	mov    %eax,%ecx
f012a1ef:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012a1f6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a1fb:	0f b6 d0             	movzbl %al,%edx
f012a1fe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a201:	01 d0                	add    %edx,%eax
f012a203:	48                   	dec    %eax
f012a204:	89 45 80             	mov    %eax,-0x80(%ebp)
f012a207:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a20a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a20f:	f7 75 84             	divl   -0x7c(%ebp)
f012a212:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a215:	29 d0                	sub    %edx,%eax
f012a217:	89 c3                	mov    %eax,%ebx
f012a219:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012a220:	10 00 00 
f012a223:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a228:	0f b6 c0             	movzbl %al,%eax
f012a22b:	c1 e0 04             	shl    $0x4,%eax
f012a22e:	89 c2                	mov    %eax,%edx
f012a230:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a236:	01 d0                	add    %edx,%eax
f012a238:	48                   	dec    %eax
f012a239:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012a23f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a245:	ba 00 00 00 00       	mov    $0x0,%edx
f012a24a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012a250:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a256:	29 d0                	sub    %edx,%eax
f012a258:	01 d8                	add    %ebx,%eax
f012a25a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012a25f:	39 c1                	cmp    %eax,%ecx
f012a261:	74 17                	je     f012a27a <test_krealloc+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012a263:	83 ec 04             	sub    $0x4,%esp
f012a266:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012a26b:	68 08 0f 00 00       	push   $0xf08
f012a270:	68 0e 91 13 f0       	push   $0xf013910e
f012a275:	e8 36 5f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a27a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a27d:	e8 fe 26 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a282:	29 c3                	sub    %eax,%ebx
f012a284:	89 d8                	mov    %ebx,%eax
f012a286:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a28b:	74 17                	je     f012a2a4 <test_krealloc+0x48c>
			panic("krealloc: Wrong allocation: ");
f012a28d:	83 ec 04             	sub    $0x4,%esp
f012a290:	68 22 a4 13 f0       	push   $0xf013a422
f012a295:	68 0a 0f 00 00       	push   $0xf0a
f012a29a:	68 0e 91 13 f0       	push   $0xf013910e
f012a29f:	e8 0c 5f fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a2a4:	c7 85 64 fe ff ff ff 	movl   $0x3feff,-0x19c(%ebp)
f012a2ab:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a2ae:	e8 cd 26 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a2b3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012a2b6:	83 ec 08             	sub    $0x8,%esp
f012a2b9:	68 00 fc 1f 00       	push   $0x1ffc00
f012a2be:	6a 00                	push   $0x0
f012a2c0:	e8 f2 dc fd ff       	call   f0107fb7 <krealloc>
f012a2c5:	83 c4 10             	add    $0x10,%esp
f012a2c8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012a2ce:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a2d4:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012a2d9:	77 17                	ja     f012a2f2 <test_krealloc+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a2db:	83 ec 04             	sub    $0x4,%esp
f012a2de:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012a2e3:	68 11 0f 00 00       	push   $0xf11
f012a2e8:	68 0e 91 13 f0       	push   $0xf013910e
f012a2ed:	e8 be 5e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012a2f2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a2f8:	89 c1                	mov    %eax,%ecx
f012a2fa:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012a301:	10 00 00 
f012a304:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a309:	0f b6 d0             	movzbl %al,%edx
f012a30c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a312:	01 d0                	add    %edx,%eax
f012a314:	48                   	dec    %eax
f012a315:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012a31b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a321:	ba 00 00 00 00       	mov    $0x0,%edx
f012a326:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012a32c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a332:	29 d0                	sub    %edx,%eax
f012a334:	89 c3                	mov    %eax,%ebx
f012a336:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012a33d:	10 00 00 
f012a340:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a345:	0f b6 c0             	movzbl %al,%eax
f012a348:	c1 e0 04             	shl    $0x4,%eax
f012a34b:	89 c2                	mov    %eax,%edx
f012a34d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a353:	01 d0                	add    %edx,%eax
f012a355:	48                   	dec    %eax
f012a356:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012a35c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a362:	ba 00 00 00 00       	mov    $0x0,%edx
f012a367:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012a36d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a373:	29 d0                	sub    %edx,%eax
f012a375:	01 d8                	add    %ebx,%eax
f012a377:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a37c:	39 c1                	cmp    %eax,%ecx
f012a37e:	74 17                	je     f012a397 <test_krealloc+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012a380:	83 ec 04             	sub    $0x4,%esp
f012a383:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012a388:	68 13 0f 00 00       	push   $0xf13
f012a38d:	68 0e 91 13 f0       	push   $0xf013910e
f012a392:	e8 19 5e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a397:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a39a:	e8 e1 25 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a39f:	29 c3                	sub    %eax,%ebx
f012a3a1:	89 d8                	mov    %ebx,%eax
f012a3a3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a3a8:	74 17                	je     f012a3c1 <test_krealloc+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012a3aa:	83 ec 04             	sub    $0x4,%esp
f012a3ad:	68 22 a4 13 f0       	push   $0xf013a422
f012a3b2:	68 15 0f 00 00       	push   $0xf15
f012a3b7:	68 0e 91 13 f0       	push   $0xf013910e
f012a3bc:	e8 ef 5d fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a3c1:	c7 85 68 fe ff ff ff 	movl   $0xffdff,-0x198(%ebp)
f012a3c8:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a3cb:	e8 b0 25 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a3d0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012a3d3:	83 ec 08             	sub    $0x8,%esp
f012a3d6:	68 00 fc 1f 00       	push   $0x1ffc00
f012a3db:	6a 00                	push   $0x0
f012a3dd:	e8 d5 db fd ff       	call   f0107fb7 <krealloc>
f012a3e2:	83 c4 10             	add    $0x10,%esp
f012a3e5:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012a3eb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a3f1:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012a3f6:	77 17                	ja     f012a40f <test_krealloc+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a3f8:	83 ec 04             	sub    $0x4,%esp
f012a3fb:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012a400:	68 1c 0f 00 00       	push   $0xf1c
f012a405:	68 0e 91 13 f0       	push   $0xf013910e
f012a40a:	e8 a1 5d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012a40f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a415:	89 c1                	mov    %eax,%ecx
f012a417:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012a41e:	10 00 00 
f012a421:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a426:	0f b6 d0             	movzbl %al,%edx
f012a429:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a42f:	01 d0                	add    %edx,%eax
f012a431:	48                   	dec    %eax
f012a432:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012a438:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a43e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a443:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012a449:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a44f:	29 d0                	sub    %edx,%eax
f012a451:	89 c3                	mov    %eax,%ebx
f012a453:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012a45a:	10 00 00 
f012a45d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a462:	0f b6 c0             	movzbl %al,%eax
f012a465:	c1 e0 04             	shl    $0x4,%eax
f012a468:	89 c2                	mov    %eax,%edx
f012a46a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a470:	01 d0                	add    %edx,%eax
f012a472:	48                   	dec    %eax
f012a473:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012a479:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a47f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a484:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012a48a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a490:	29 d0                	sub    %edx,%eax
f012a492:	01 d8                	add    %ebx,%eax
f012a494:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012a499:	39 c1                	cmp    %eax,%ecx
f012a49b:	74 17                	je     f012a4b4 <test_krealloc+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012a49d:	83 ec 04             	sub    $0x4,%esp
f012a4a0:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012a4a5:	68 1e 0f 00 00       	push   $0xf1e
f012a4aa:	68 0e 91 13 f0       	push   $0xf013910e
f012a4af:	e8 fc 5c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a4b4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a4b7:	e8 c4 24 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a4bc:	29 c3                	sub    %eax,%ebx
f012a4be:	89 d8                	mov    %ebx,%eax
f012a4c0:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a4c5:	74 17                	je     f012a4de <test_krealloc+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012a4c7:	83 ec 04             	sub    $0x4,%esp
f012a4ca:	68 22 a4 13 f0       	push   $0xf013a422
f012a4cf:	68 20 0f 00 00       	push   $0xf20
f012a4d4:	68 0e 91 13 f0       	push   $0xf013910e
f012a4d9:	e8 d2 5c fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a4de:	c7 85 6c fe ff ff ff 	movl   $0xffdff,-0x194(%ebp)
f012a4e5:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a4e8:	e8 93 24 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a4ed:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012a4f0:	83 ec 08             	sub    $0x8,%esp
f012a4f3:	68 00 fc 2f 00       	push   $0x2ffc00
f012a4f8:	6a 00                	push   $0x0
f012a4fa:	e8 b8 da fd ff       	call   f0107fb7 <krealloc>
f012a4ff:	83 c4 10             	add    $0x10,%esp
f012a502:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012a508:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a50e:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012a513:	77 17                	ja     f012a52c <test_krealloc+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a515:	83 ec 04             	sub    $0x4,%esp
f012a518:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012a51d:	68 27 0f 00 00       	push   $0xf27
f012a522:	68 0e 91 13 f0       	push   $0xf013910e
f012a527:	e8 84 5c fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012a52c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a532:	89 c1                	mov    %eax,%ecx
f012a534:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012a53b:	10 00 00 
f012a53e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a543:	0f b6 d0             	movzbl %al,%edx
f012a546:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a54c:	01 d0                	add    %edx,%eax
f012a54e:	48                   	dec    %eax
f012a54f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012a555:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a55b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a560:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012a566:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a56c:	29 d0                	sub    %edx,%eax
f012a56e:	89 c3                	mov    %eax,%ebx
f012a570:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012a577:	10 00 00 
f012a57a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a57f:	0f b6 c0             	movzbl %al,%eax
f012a582:	c1 e0 04             	shl    $0x4,%eax
f012a585:	89 c2                	mov    %eax,%edx
f012a587:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a58d:	01 d0                	add    %edx,%eax
f012a58f:	48                   	dec    %eax
f012a590:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012a596:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a59c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5a1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012a5a7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a5ad:	29 d0                	sub    %edx,%eax
f012a5af:	01 d8                	add    %ebx,%eax
f012a5b1:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012a5b6:	39 c1                	cmp    %eax,%ecx
f012a5b8:	74 17                	je     f012a5d1 <test_krealloc+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012a5ba:	83 ec 04             	sub    $0x4,%esp
f012a5bd:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012a5c2:	68 29 0f 00 00       	push   $0xf29
f012a5c7:	68 0e 91 13 f0       	push   $0xf013910e
f012a5cc:	e8 df 5b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a5d1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a5d4:	e8 a7 23 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a5d9:	29 c3                	sub    %eax,%ebx
f012a5db:	89 d8                	mov    %ebx,%eax
f012a5dd:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a5e2:	74 17                	je     f012a5fb <test_krealloc+0x7e3>
			panic("Wrong allocation: ");
f012a5e4:	83 ec 04             	sub    $0x4,%esp
f012a5e7:	68 58 95 13 f0       	push   $0xf0139558
f012a5ec:	68 2b 0f 00 00       	push   $0xf2b
f012a5f1:	68 0e 91 13 f0       	push   $0xf013910e
f012a5f6:	e8 b5 5b fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a5fb:	c7 85 70 fe ff ff 7f 	movl   $0x5ff7f,-0x190(%ebp)
f012a602:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a605:	e8 76 23 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a60a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012a60d:	83 ec 08             	sub    $0x8,%esp
f012a610:	68 00 fc 2f 00       	push   $0x2ffc00
f012a615:	6a 00                	push   $0x0
f012a617:	e8 9b d9 fd ff       	call   f0107fb7 <krealloc>
f012a61c:	83 c4 10             	add    $0x10,%esp
f012a61f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012a625:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a62b:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012a630:	77 17                	ja     f012a649 <test_krealloc+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a632:	83 ec 04             	sub    $0x4,%esp
f012a635:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012a63a:	68 32 0f 00 00       	push   $0xf32
f012a63f:	68 0e 91 13 f0       	push   $0xf013910e
f012a644:	e8 67 5b fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012a649:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a64f:	89 c1                	mov    %eax,%ecx
f012a651:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012a658:	10 00 00 
f012a65b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a660:	0f b6 d0             	movzbl %al,%edx
f012a663:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a669:	01 d0                	add    %edx,%eax
f012a66b:	48                   	dec    %eax
f012a66c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012a672:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a678:	ba 00 00 00 00       	mov    $0x0,%edx
f012a67d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012a683:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a689:	29 d0                	sub    %edx,%eax
f012a68b:	89 c3                	mov    %eax,%ebx
f012a68d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012a694:	10 00 00 
f012a697:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012a69c:	0f b6 c0             	movzbl %al,%eax
f012a69f:	c1 e0 04             	shl    $0x4,%eax
f012a6a2:	89 c2                	mov    %eax,%edx
f012a6a4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a6aa:	01 d0                	add    %edx,%eax
f012a6ac:	48                   	dec    %eax
f012a6ad:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012a6b3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a6b9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6be:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012a6c4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a6ca:	29 d0                	sub    %edx,%eax
f012a6cc:	01 d8                	add    %ebx,%eax
f012a6ce:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012a6d3:	39 c1                	cmp    %eax,%ecx
f012a6d5:	74 17                	je     f012a6ee <test_krealloc+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012a6d7:	83 ec 04             	sub    $0x4,%esp
f012a6da:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012a6df:	68 34 0f 00 00       	push   $0xf34
f012a6e4:	68 0e 91 13 f0       	push   $0xf013910e
f012a6e9:	e8 c2 5a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a6ee:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a6f1:	e8 8a 22 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a6f6:	29 c3                	sub    %eax,%ebx
f012a6f8:	89 d8                	mov    %ebx,%eax
f012a6fa:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a6ff:	74 17                	je     f012a718 <test_krealloc+0x900>
			panic("krealloc: Wrong allocation: ");
f012a701:	83 ec 04             	sub    $0x4,%esp
f012a704:	68 22 a4 13 f0       	push   $0xf013a422
f012a709:	68 36 0f 00 00       	push   $0xf36
f012a70e:	68 0e 91 13 f0       	push   $0xf013910e
f012a713:	e8 98 5a fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a718:	c7 85 74 fe ff ff 7f 	movl   $0x5ff7f,-0x18c(%ebp)
f012a71f:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012a722:	e8 59 22 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012a727:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012a72a:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012a731:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012a734:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a73a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012a740:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a746:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012a749:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012a74b:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012a751:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a757:	01 c2                	add    %eax,%edx
f012a759:	8a 45 ce             	mov    -0x32(%ebp),%al
f012a75c:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012a75e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a764:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a76a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a771:	eb 11                	jmp    f012a784 <test_krealloc+0x96c>
			ptr[i] = 2;
f012a773:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a776:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a77c:	01 d0                	add    %edx,%eax
f012a77e:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a781:	ff 45 f4             	incl   -0xc(%ebp)
f012a784:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a78a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a78d:	7d e4                	jge    f012a773 <test_krealloc+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012a78f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a795:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012a79b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a7a1:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012a7a7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a7ad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a7b4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a7ba:	01 d0                	add    %edx,%eax
f012a7bc:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012a7c2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a7c8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a7ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012a7d5:	eb 1b                	jmp    f012a7f2 <test_krealloc+0x9da>
			intArr[i] = 4;
f012a7d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a7da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a7e1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a7e7:	01 d0                	add    %edx,%eax
f012a7e9:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a7ef:	ff 45 f0             	incl   -0x10(%ebp)
f012a7f2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a7f8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012a7fb:	7d da                	jge    f012a7d7 <test_krealloc+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012a7fd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a803:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a809:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012a810:	eb 17                	jmp    f012a829 <test_krealloc+0xa11>
			shortArr[i] = 5;
f012a812:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012a815:	01 c0                	add    %eax,%eax
f012a817:	89 c2                	mov    %eax,%edx
f012a819:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a81f:	01 d0                	add    %edx,%eax
f012a821:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a826:	ff 45 ec             	incl   -0x14(%ebp)
f012a829:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a82f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012a832:	7d de                	jge    f012a812 <test_krealloc+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012a834:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a83a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012a840:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a846:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012a84b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a851:	01 c0                	add    %eax,%eax
f012a853:	89 c2                	mov    %eax,%edx
f012a855:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a85b:	01 d0                	add    %edx,%eax
f012a85d:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012a862:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a868:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a86e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012a875:	eb 49                	jmp    f012a8c0 <test_krealloc+0xaa8>
			structArr[i].a = 7;
f012a877:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a87a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a881:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a887:	01 d0                	add    %edx,%eax
f012a889:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012a88c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a88f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a896:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a89c:	01 d0                	add    %edx,%eax
f012a89e:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012a8a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a8a7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a8ae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8b4:	01 d0                	add    %edx,%eax
f012a8b6:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a8bd:	ff 45 e8             	incl   -0x18(%ebp)
f012a8c0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a8c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012a8c9:	7d ac                	jge    f012a877 <test_krealloc+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012a8cb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a8d1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012a8d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8dd:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012a8e0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8e6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012a8ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8f2:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012a8f9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a8ff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a906:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a90c:	01 d0                	add    %edx,%eax
f012a90e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012a911:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a917:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a91e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a924:	01 d0                	add    %edx,%eax
f012a926:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012a92c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a932:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a939:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a93f:	01 d0                	add    %edx,%eax
f012a941:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012a948:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a94e:	8a 00                	mov    (%eax),%al
f012a950:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012a953:	75 17                	jne    f012a96c <test_krealloc+0xb54>
f012a955:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012a95b:	89 c2                	mov    %eax,%edx
f012a95d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a963:	01 d0                	add    %edx,%eax
f012a965:	8a 00                	mov    (%eax),%al
f012a967:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012a96a:	74 17                	je     f012a983 <test_krealloc+0xb6b>
			panic(
f012a96c:	83 ec 04             	sub    $0x4,%esp
f012a96f:	68 40 a4 13 f0       	push   $0xf013a440
f012a974:	68 79 0f 00 00       	push   $0xf79
f012a979:	68 0e 91 13 f0       	push   $0xf013910e
f012a97e:	e8 2d 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012a983:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a989:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012a98f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a995:	8a 00                	mov    (%eax),%al
f012a997:	3c 02                	cmp    $0x2,%al
f012a999:	75 16                	jne    f012a9b1 <test_krealloc+0xb99>
f012a99b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a9a1:	89 c2                	mov    %eax,%edx
f012a9a3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a9a9:	01 d0                	add    %edx,%eax
f012a9ab:	8a 00                	mov    (%eax),%al
f012a9ad:	3c 02                	cmp    $0x2,%al
f012a9af:	74 20                	je     f012a9d1 <test_krealloc+0xbb9>
			panic(
f012a9b1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a9b7:	8a 00                	mov    (%eax),%al
f012a9b9:	0f be c0             	movsbl %al,%eax
f012a9bc:	50                   	push   %eax
f012a9bd:	68 80 a4 13 f0       	push   $0xf013a480
f012a9c2:	68 7f 0f 00 00       	push   $0xf7f
f012a9c7:	68 0e 91 13 f0       	push   $0xf013910e
f012a9cc:	e8 df 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012a9d1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a9d7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012a9dd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a9e3:	8b 00                	mov    (%eax),%eax
f012a9e5:	83 f8 03             	cmp    $0x3,%eax
f012a9e8:	75 1c                	jne    f012aa06 <test_krealloc+0xbee>
f012a9ea:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a9f0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a9f7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a9fd:	01 d0                	add    %edx,%eax
f012a9ff:	8b 00                	mov    (%eax),%eax
f012aa01:	83 f8 03             	cmp    $0x3,%eax
f012aa04:	74 17                	je     f012aa1d <test_krealloc+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012aa06:	83 ec 04             	sub    $0x4,%esp
f012aa09:	68 cc a4 13 f0       	push   $0xf013a4cc
f012aa0e:	68 83 0f 00 00       	push   $0xf83
f012aa13:	68 0e 91 13 f0       	push   $0xf013910e
f012aa18:	e8 93 57 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012aa1d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012aa23:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012aa29:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa2f:	8b 00                	mov    (%eax),%eax
f012aa31:	83 f8 04             	cmp    $0x4,%eax
f012aa34:	75 1c                	jne    f012aa52 <test_krealloc+0xc3a>
f012aa36:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012aa3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aa43:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa49:	01 d0                	add    %edx,%eax
f012aa4b:	8b 00                	mov    (%eax),%eax
f012aa4d:	83 f8 04             	cmp    $0x4,%eax
f012aa50:	74 17                	je     f012aa69 <test_krealloc+0xc51>
			panic(
f012aa52:	83 ec 04             	sub    $0x4,%esp
f012aa55:	68 40 a4 13 f0       	push   $0xf013a440
f012aa5a:	68 88 0f 00 00       	push   $0xf88
f012aa5f:	68 0e 91 13 f0       	push   $0xf013910e
f012aa64:	e8 47 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012aa69:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012aa6f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012aa75:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aa7b:	66 8b 00             	mov    (%eax),%ax
f012aa7e:	66 83 f8 05          	cmp    $0x5,%ax
f012aa82:	75 1b                	jne    f012aa9f <test_krealloc+0xc87>
f012aa84:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012aa8a:	01 c0                	add    %eax,%eax
f012aa8c:	89 c2                	mov    %eax,%edx
f012aa8e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aa94:	01 d0                	add    %edx,%eax
f012aa96:	66 8b 00             	mov    (%eax),%ax
f012aa99:	66 83 f8 05          	cmp    $0x5,%ax
f012aa9d:	74 17                	je     f012aab6 <test_krealloc+0xc9e>
			panic(
f012aa9f:	83 ec 04             	sub    $0x4,%esp
f012aaa2:	68 40 a4 13 f0       	push   $0xf013a440
f012aaa7:	68 8d 0f 00 00       	push   $0xf8d
f012aaac:	68 0e 91 13 f0       	push   $0xf013910e
f012aab1:	e8 fa 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012aab6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012aabc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012aac2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aac8:	66 8b 00             	mov    (%eax),%ax
f012aacb:	66 83 f8 06          	cmp    $0x6,%ax
f012aacf:	75 1b                	jne    f012aaec <test_krealloc+0xcd4>
f012aad1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012aad7:	01 c0                	add    %eax,%eax
f012aad9:	89 c2                	mov    %eax,%edx
f012aadb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aae1:	01 d0                	add    %edx,%eax
f012aae3:	66 8b 00             	mov    (%eax),%ax
f012aae6:	66 83 f8 06          	cmp    $0x6,%ax
f012aaea:	74 17                	je     f012ab03 <test_krealloc+0xceb>
			panic(
f012aaec:	83 ec 04             	sub    $0x4,%esp
f012aaef:	68 40 a4 13 f0       	push   $0xf013a440
f012aaf4:	68 92 0f 00 00       	push   $0xf92
f012aaf9:	68 0e 91 13 f0       	push   $0xf013910e
f012aafe:	e8 ad 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ab03:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ab09:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ab0f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab15:	8a 00                	mov    (%eax),%al
f012ab17:	3c 07                	cmp    $0x7,%al
f012ab19:	75 1b                	jne    f012ab36 <test_krealloc+0xd1e>
f012ab1b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ab21:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab28:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab2e:	01 d0                	add    %edx,%eax
f012ab30:	8a 00                	mov    (%eax),%al
f012ab32:	3c 07                	cmp    $0x7,%al
f012ab34:	74 17                	je     f012ab4d <test_krealloc+0xd35>
			panic(
f012ab36:	83 ec 04             	sub    $0x4,%esp
f012ab39:	68 40 a4 13 f0       	push   $0xf013a440
f012ab3e:	68 97 0f 00 00       	push   $0xf97
f012ab43:	68 0e 91 13 f0       	push   $0xf013910e
f012ab48:	e8 63 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012ab4d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab53:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ab57:	66 83 f8 07          	cmp    $0x7,%ax
f012ab5b:	75 1f                	jne    f012ab7c <test_krealloc+0xd64>
f012ab5d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ab63:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab6a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab70:	01 d0                	add    %edx,%eax
f012ab72:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ab76:	66 83 f8 07          	cmp    $0x7,%ax
f012ab7a:	74 17                	je     f012ab93 <test_krealloc+0xd7b>
			panic(
f012ab7c:	83 ec 04             	sub    $0x4,%esp
f012ab7f:	68 40 a4 13 f0       	push   $0xf013a440
f012ab84:	68 9a 0f 00 00       	push   $0xf9a
f012ab89:	68 0e 91 13 f0       	push   $0xf013910e
f012ab8e:	e8 1d 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ab93:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab99:	8b 40 04             	mov    0x4(%eax),%eax
f012ab9c:	83 f8 07             	cmp    $0x7,%eax
f012ab9f:	75 1d                	jne    f012abbe <test_krealloc+0xda6>
f012aba1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012aba7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012abae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abb4:	01 d0                	add    %edx,%eax
f012abb6:	8b 40 04             	mov    0x4(%eax),%eax
f012abb9:	83 f8 07             	cmp    $0x7,%eax
f012abbc:	74 17                	je     f012abd5 <test_krealloc+0xdbd>
			panic(
f012abbe:	83 ec 04             	sub    $0x4,%esp
f012abc1:	68 40 a4 13 f0       	push   $0xf013a440
f012abc6:	68 9d 0f 00 00       	push   $0xf9d
f012abcb:	68 0e 91 13 f0       	push   $0xf013910e
f012abd0:	e8 db 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012abd5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012abdb:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012abe1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abe7:	8a 00                	mov    (%eax),%al
f012abe9:	3c 08                	cmp    $0x8,%al
f012abeb:	75 1b                	jne    f012ac08 <test_krealloc+0xdf0>
f012abed:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012abf3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012abfa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac00:	01 d0                	add    %edx,%eax
f012ac02:	8a 00                	mov    (%eax),%al
f012ac04:	3c 08                	cmp    $0x8,%al
f012ac06:	74 17                	je     f012ac1f <test_krealloc+0xe07>
			panic(
f012ac08:	83 ec 04             	sub    $0x4,%esp
f012ac0b:	68 40 a4 13 f0       	push   $0xf013a440
f012ac10:	68 a2 0f 00 00       	push   $0xfa2
f012ac15:	68 0e 91 13 f0       	push   $0xf013910e
f012ac1a:	e8 91 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ac1f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac25:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ac29:	66 83 f8 08          	cmp    $0x8,%ax
f012ac2d:	75 1f                	jne    f012ac4e <test_krealloc+0xe36>
f012ac2f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac35:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac3c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac42:	01 d0                	add    %edx,%eax
f012ac44:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ac48:	66 83 f8 08          	cmp    $0x8,%ax
f012ac4c:	74 17                	je     f012ac65 <test_krealloc+0xe4d>
			panic(
f012ac4e:	83 ec 04             	sub    $0x4,%esp
f012ac51:	68 40 a4 13 f0       	push   $0xf013a440
f012ac56:	68 a5 0f 00 00       	push   $0xfa5
f012ac5b:	68 0e 91 13 f0       	push   $0xf013910e
f012ac60:	e8 4b 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012ac65:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac6b:	8b 40 04             	mov    0x4(%eax),%eax
f012ac6e:	83 f8 08             	cmp    $0x8,%eax
f012ac71:	75 1d                	jne    f012ac90 <test_krealloc+0xe78>
f012ac73:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac79:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac80:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac86:	01 d0                	add    %edx,%eax
f012ac88:	8b 40 04             	mov    0x4(%eax),%eax
f012ac8b:	83 f8 08             	cmp    $0x8,%eax
f012ac8e:	74 17                	je     f012aca7 <test_krealloc+0xe8f>
			panic(
f012ac90:	83 ec 04             	sub    $0x4,%esp
f012ac93:	68 40 a4 13 f0       	push   $0xf013a440
f012ac98:	68 a8 0f 00 00       	push   $0xfa8
f012ac9d:	68 0e 91 13 f0       	push   $0xf013910e
f012aca2:	e8 09 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012aca7:	e8 d4 1c fe ff       	call   f010c980 <sys_calculate_free_frames>
f012acac:	89 c2                	mov    %eax,%edx
f012acae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012acb1:	39 c2                	cmp    %eax,%edx
f012acb3:	74 17                	je     f012accc <test_krealloc+0xeb4>
			panic(
f012acb5:	83 ec 04             	sub    $0x4,%esp
f012acb8:	68 00 a5 13 f0       	push   $0xf013a500
f012acbd:	68 ac 0f 00 00       	push   $0xfac
f012acc2:	68 0e 91 13 f0       	push   $0xf013910e
f012acc7:	e8 e4 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012accc:	83 ec 0c             	sub    $0xc,%esp
f012accf:	68 4c a5 13 f0       	push   $0xf013a54c
f012acd4:	e8 58 61 fd ff       	call   f0100e31 <cprintf>
f012acd9:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012acdc:	e8 9f 1c fe ff       	call   f010c980 <sys_calculate_free_frames>
f012ace1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ace4:	e8 3d 99 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ace9:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012acef:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012acf5:	83 ec 08             	sub    $0x8,%esp
f012acf8:	6a 00                	push   $0x0
f012acfa:	50                   	push   %eax
f012acfb:	e8 b7 d2 fd ff       	call   f0107fb7 <krealloc>
f012ad00:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ad03:	e8 1e 99 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ad08:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ad0e:	74 17                	je     f012ad27 <test_krealloc+0xf0f>
			panic(
f012ad10:	83 ec 04             	sub    $0x4,%esp
f012ad13:	68 70 a5 13 f0       	push   $0xf013a570
f012ad18:	68 b9 0f 00 00       	push   $0xfb9
f012ad1d:	68 0e 91 13 f0       	push   $0xf013910e
f012ad22:	e8 89 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ad27:	e8 54 1c fe ff       	call   f010c980 <sys_calculate_free_frames>
f012ad2c:	89 c2                	mov    %eax,%edx
f012ad2e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ad31:	29 c2                	sub    %eax,%edx
f012ad33:	89 d0                	mov    %edx,%eax
f012ad35:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ad3a:	74 17                	je     f012ad53 <test_krealloc+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012ad3c:	83 ec 04             	sub    $0x4,%esp
f012ad3f:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012ad44:	68 bb 0f 00 00       	push   $0xfbb
f012ad49:	68 0e 91 13 f0       	push   $0xf013910e
f012ad4e:	e8 5d 54 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012ad53:	e8 28 1c fe ff       	call   f010c980 <sys_calculate_free_frames>
f012ad58:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ad5b:	e8 c6 98 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ad60:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012ad66:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ad6c:	83 ec 08             	sub    $0x8,%esp
f012ad6f:	6a 00                	push   $0x0
f012ad71:	50                   	push   %eax
f012ad72:	e8 40 d2 fd ff       	call   f0107fb7 <krealloc>
f012ad77:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ad7a:	e8 a7 98 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ad7f:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ad85:	74 17                	je     f012ad9e <test_krealloc+0xf86>
			panic(
f012ad87:	83 ec 04             	sub    $0x4,%esp
f012ad8a:	68 70 a5 13 f0       	push   $0xf013a570
f012ad8f:	68 c4 0f 00 00       	push   $0xfc4
f012ad94:	68 0e 91 13 f0       	push   $0xf013910e
f012ad99:	e8 12 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ad9e:	e8 dd 1b fe ff       	call   f010c980 <sys_calculate_free_frames>
f012ada3:	89 c2                	mov    %eax,%edx
f012ada5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ada8:	29 c2                	sub    %eax,%edx
f012adaa:	89 d0                	mov    %edx,%eax
f012adac:	3d 00 01 00 00       	cmp    $0x100,%eax
f012adb1:	74 17                	je     f012adca <test_krealloc+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012adb3:	83 ec 04             	sub    $0x4,%esp
f012adb6:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012adbb:	68 c6 0f 00 00       	push   $0xfc6
f012adc0:	68 0e 91 13 f0       	push   $0xf013910e
f012adc5:	e8 e6 53 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012adca:	e8 b1 1b fe ff       	call   f010c980 <sys_calculate_free_frames>
f012adcf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012add2:	e8 4f 98 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012add7:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012addd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ade3:	83 ec 08             	sub    $0x8,%esp
f012ade6:	6a 00                	push   $0x0
f012ade8:	50                   	push   %eax
f012ade9:	e8 c9 d1 fd ff       	call   f0107fb7 <krealloc>
f012adee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012adf1:	e8 30 98 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012adf6:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012adfc:	74 17                	je     f012ae15 <test_krealloc+0xffd>
			panic(
f012adfe:	83 ec 04             	sub    $0x4,%esp
f012ae01:	68 28 91 13 f0       	push   $0xf0139128
f012ae06:	68 ce 0f 00 00       	push   $0xfce
f012ae0b:	68 0e 91 13 f0       	push   $0xf013910e
f012ae10:	e8 9b 53 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012ae15:	e8 66 1b fe ff       	call   f010c980 <sys_calculate_free_frames>
f012ae1a:	89 c2                	mov    %eax,%edx
f012ae1c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ae1f:	29 c2                	sub    %eax,%edx
f012ae21:	89 d0                	mov    %edx,%eax
f012ae23:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ae28:	74 17                	je     f012ae41 <test_krealloc+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012ae2a:	83 ec 04             	sub    $0x4,%esp
f012ae2d:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012ae32:	68 d0 0f 00 00       	push   $0xfd0
f012ae37:	68 0e 91 13 f0       	push   $0xf013910e
f012ae3c:	e8 6f 53 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ae41:	e8 3a 1b fe ff       	call   f010c980 <sys_calculate_free_frames>
f012ae46:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ae49:	e8 d8 97 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ae4e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ae54:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ae5a:	83 ec 08             	sub    $0x8,%esp
f012ae5d:	6a 00                	push   $0x0
f012ae5f:	50                   	push   %eax
f012ae60:	e8 52 d1 fd ff       	call   f0107fb7 <krealloc>
f012ae65:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ae68:	e8 b9 97 fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ae6d:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ae73:	74 17                	je     f012ae8c <test_krealloc+0x1074>
			panic(
f012ae75:	83 ec 04             	sub    $0x4,%esp
f012ae78:	68 70 a5 13 f0       	push   $0xf013a570
f012ae7d:	68 d8 0f 00 00       	push   $0xfd8
f012ae82:	68 0e 91 13 f0       	push   $0xf013910e
f012ae87:	e8 24 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012ae8c:	e8 ef 1a fe ff       	call   f010c980 <sys_calculate_free_frames>
f012ae91:	89 c2                	mov    %eax,%edx
f012ae93:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ae96:	29 c2                	sub    %eax,%edx
f012ae98:	89 d0                	mov    %edx,%eax
f012ae9a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ae9f:	74 17                	je     f012aeb8 <test_krealloc+0x10a0>
			panic(
f012aea1:	83 ec 04             	sub    $0x4,%esp
f012aea4:	68 18 a6 13 f0       	push   $0xf013a618
f012aea9:	68 db 0f 00 00       	push   $0xfdb
f012aeae:	68 0e 91 13 f0       	push   $0xf013910e
f012aeb3:	e8 f8 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012aeb8:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012aebf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012aec6:	eb 48                	jmp    f012af10 <test_krealloc+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012aec8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012aecb:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012aed0:	83 ec 04             	sub    $0x4,%esp
f012aed3:	8d 8d 04 fe ff ff    	lea    -0x1fc(%ebp),%ecx
f012aed9:	51                   	push   %ecx
f012aeda:	52                   	push   %edx
f012aedb:	50                   	push   %eax
f012aedc:	e8 a8 c5 fd ff       	call   f0107489 <get_page_table>
f012aee1:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012aee4:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012aeea:	85 c0                	test   %eax,%eax
f012aeec:	75 17                	jne    f012af05 <test_krealloc+0x10ed>
					panic(
f012aeee:	83 ec 04             	sub    $0x4,%esp
f012aef1:	68 10 9a 13 f0       	push   $0xf0139a10
f012aef6:	68 e7 0f 00 00       	push   $0xfe7
f012aefb:	68 0e 91 13 f0       	push   $0xf013910e
f012af00:	e8 ab 52 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012af05:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012af0c:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012af10:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012af14:	78 b2                	js     f012aec8 <test_krealloc+0x10b0>
f012af16:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012af1a:	7f 09                	jg     f012af25 <test_krealloc+0x110d>
f012af1c:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012af23:	76 a3                	jbe    f012aec8 <test_krealloc+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012af25:	83 ec 0c             	sub    $0xc,%esp
f012af28:	68 57 a6 13 f0       	push   $0xf013a657
f012af2d:	e8 ff 5e fd ff       	call   f0100e31 <cprintf>
f012af32:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012af35:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012af3b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012af41:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012af48:	eb 21                	jmp    f012af6b <test_krealloc+0x1153>
			sums[0] += ptr[i];
f012af4a:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012af50:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012af53:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012af59:	01 c8                	add    %ecx,%eax
f012af5b:	8a 00                	mov    (%eax),%al
f012af5d:	0f be c0             	movsbl %al,%eax
f012af60:	01 d0                	add    %edx,%eax
f012af62:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012af68:	ff 45 dc             	incl   -0x24(%ebp)
f012af6b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012af71:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012af74:	7d d4                	jge    f012af4a <test_krealloc+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012af76:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012af7c:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012af82:	42                   	inc    %edx
f012af83:	01 d2                	add    %edx,%edx
f012af85:	39 d0                	cmp    %edx,%eax
f012af87:	74 17                	je     f012afa0 <test_krealloc+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012af89:	83 ec 04             	sub    $0x4,%esp
f012af8c:	68 60 a6 13 f0       	push   $0xf013a660
f012af91:	68 f9 0f 00 00       	push   $0xff9
f012af96:	68 0e 91 13 f0       	push   $0xf013910e
f012af9b:	e8 10 52 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012afa0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012afa6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012afac:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012afb3:	eb 25                	jmp    f012afda <test_krealloc+0x11c2>
			sums[1] += intArr[i];
f012afb5:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012afbb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012afbe:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012afc5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012afcb:	01 c8                	add    %ecx,%eax
f012afcd:	8b 00                	mov    (%eax),%eax
f012afcf:	01 d0                	add    %edx,%eax
f012afd1:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012afd7:	ff 45 dc             	incl   -0x24(%ebp)
f012afda:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012afe0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012afe3:	7d d0                	jge    f012afb5 <test_krealloc+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012afe5:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012afeb:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012aff1:	42                   	inc    %edx
f012aff2:	c1 e2 02             	shl    $0x2,%edx
f012aff5:	39 d0                	cmp    %edx,%eax
f012aff7:	74 17                	je     f012b010 <test_krealloc+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012aff9:	83 ec 04             	sub    $0x4,%esp
f012affc:	68 60 a6 13 f0       	push   $0xf013a660
f012b001:	68 03 10 00 00       	push   $0x1003
f012b006:	68 0e 91 13 f0       	push   $0xf013910e
f012b00b:	e8 a0 51 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012b010:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b016:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b01c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b023:	eb 24                	jmp    f012b049 <test_krealloc+0x1231>
			sums[2] += shortArr[i];
f012b025:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b02b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b02e:	01 c0                	add    %eax,%eax
f012b030:	89 c1                	mov    %eax,%ecx
f012b032:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b038:	01 c8                	add    %ecx,%eax
f012b03a:	66 8b 00             	mov    (%eax),%ax
f012b03d:	98                   	cwtl   
f012b03e:	01 d0                	add    %edx,%eax
f012b040:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b046:	ff 45 dc             	incl   -0x24(%ebp)
f012b049:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b04f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b052:	7d d1                	jge    f012b025 <test_krealloc+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012b054:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b05a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b060:	8d 48 01             	lea    0x1(%eax),%ecx
f012b063:	89 c8                	mov    %ecx,%eax
f012b065:	c1 e0 02             	shl    $0x2,%eax
f012b068:	01 c8                	add    %ecx,%eax
f012b06a:	39 c2                	cmp    %eax,%edx
f012b06c:	74 17                	je     f012b085 <test_krealloc+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012b06e:	83 ec 04             	sub    $0x4,%esp
f012b071:	68 60 a6 13 f0       	push   $0xf013a660
f012b076:	68 0d 10 00 00       	push   $0x100d
f012b07b:	68 0e 91 13 f0       	push   $0xf013910e
f012b080:	e8 2b 51 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b085:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b08b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b091:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b098:	eb 70                	jmp    f012b10a <test_krealloc+0x12f2>
			sums[3] += structArr[i].a;
f012b09a:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012b0a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b0a3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b0aa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b0b0:	01 c8                	add    %ecx,%eax
f012b0b2:	8a 00                	mov    (%eax),%al
f012b0b4:	0f be c0             	movsbl %al,%eax
f012b0b7:	01 d0                	add    %edx,%eax
f012b0b9:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
			sums[4] += structArr[i].b;
f012b0bf:	8b 95 18 fe ff ff    	mov    -0x1e8(%ebp),%edx
f012b0c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b0c8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b0cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b0d5:	01 c8                	add    %ecx,%eax
f012b0d7:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b0db:	98                   	cwtl   
f012b0dc:	01 d0                	add    %edx,%eax
f012b0de:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			sums[5] += structArr[i].c;
f012b0e4:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012b0ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b0ed:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b0f4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b0fa:	01 c8                	add    %ecx,%eax
f012b0fc:	8b 40 04             	mov    0x4(%eax),%eax
f012b0ff:	01 d0                	add    %edx,%eax
f012b101:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b107:	ff 45 dc             	incl   -0x24(%ebp)
f012b10a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b110:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b113:	7d 85                	jge    f012b09a <test_krealloc+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012b115:	8b 8d 14 fe ff ff    	mov    -0x1ec(%ebp),%ecx
f012b11b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b121:	8d 50 01             	lea    0x1(%eax),%edx
f012b124:	89 d0                	mov    %edx,%eax
f012b126:	01 c0                	add    %eax,%eax
f012b128:	01 d0                	add    %edx,%eax
f012b12a:	01 c0                	add    %eax,%eax
f012b12c:	01 d0                	add    %edx,%eax
f012b12e:	39 c1                	cmp    %eax,%ecx
f012b130:	75 3a                	jne    f012b16c <test_krealloc+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012b132:	8b 8d 18 fe ff ff    	mov    -0x1e8(%ebp),%ecx
f012b138:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b13e:	8d 50 01             	lea    0x1(%eax),%edx
f012b141:	89 d0                	mov    %edx,%eax
f012b143:	01 c0                	add    %eax,%eax
f012b145:	01 d0                	add    %edx,%eax
f012b147:	01 c0                	add    %eax,%eax
f012b149:	01 d0                	add    %edx,%eax
f012b14b:	39 c1                	cmp    %eax,%ecx
f012b14d:	75 1d                	jne    f012b16c <test_krealloc+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012b14f:	8b 8d 1c fe ff ff    	mov    -0x1e4(%ebp),%ecx
f012b155:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b15b:	8d 50 01             	lea    0x1(%eax),%edx
f012b15e:	89 d0                	mov    %edx,%eax
f012b160:	01 c0                	add    %eax,%eax
f012b162:	01 d0                	add    %edx,%eax
f012b164:	01 c0                	add    %eax,%eax
f012b166:	01 d0                	add    %edx,%eax
f012b168:	39 c1                	cmp    %eax,%ecx
f012b16a:	74 17                	je     f012b183 <test_krealloc+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012b16c:	83 ec 04             	sub    $0x4,%esp
f012b16f:	68 60 a6 13 f0       	push   $0xf013a660
f012b174:	68 1b 10 00 00       	push   $0x101b
f012b179:	68 0e 91 13 f0       	push   $0xf013910e
f012b17e:	e8 2d 50 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012b183:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012b18a:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b18d:	e8 ee 17 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b192:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012b195:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b19b:	83 ec 08             	sub    $0x8,%esp
f012b19e:	68 00 3c 00 00       	push   $0x3c00
f012b1a3:	50                   	push   %eax
f012b1a4:	e8 0e ce fd ff       	call   f0107fb7 <krealloc>
f012b1a9:	83 c4 10             	add    $0x10,%esp
f012b1ac:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b1b2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b1b8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b1bd:	77 17                	ja     f012b1d6 <test_krealloc+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b1bf:	83 ec 04             	sub    $0x4,%esp
f012b1c2:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012b1c7:	68 27 10 00 00       	push   $0x1027
f012b1cc:	68 0e 91 13 f0       	push   $0xf013910e
f012b1d1:	e8 da 4f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b1d6:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b1dc:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b1e2:	74 17                	je     f012b1fb <test_krealloc+0x13e3>
			panic(
f012b1e4:	83 ec 04             	sub    $0x4,%esp
f012b1e7:	68 98 a6 13 f0       	push   $0xf013a698
f012b1ec:	68 2a 10 00 00       	push   $0x102a
f012b1f1:	68 0e 91 13 f0       	push   $0xf013910e
f012b1f6:	e8 b5 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b1fb:	e8 80 17 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b200:	89 c2                	mov    %eax,%edx
f012b202:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b205:	39 c2                	cmp    %eax,%edx
f012b207:	74 17                	je     f012b220 <test_krealloc+0x1408>
			panic(
f012b209:	83 ec 04             	sub    $0x4,%esp
f012b20c:	68 04 a7 13 f0       	push   $0xf013a704
f012b211:	68 2d 10 00 00       	push   $0x102d
f012b216:	68 0e 91 13 f0       	push   $0xf013910e
f012b21b:	e8 90 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b220:	e8 5b 17 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b225:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012b228:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b22e:	83 ec 08             	sub    $0x8,%esp
f012b231:	68 00 fc 0f 00       	push   $0xffc00
f012b236:	50                   	push   %eax
f012b237:	e8 7b cd fd ff       	call   f0107fb7 <krealloc>
f012b23c:	83 c4 10             	add    $0x10,%esp
f012b23f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b245:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b24b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b250:	77 17                	ja     f012b269 <test_krealloc+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b252:	83 ec 04             	sub    $0x4,%esp
f012b255:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012b25a:	68 33 10 00 00       	push   $0x1033
f012b25f:	68 0e 91 13 f0       	push   $0xf013910e
f012b264:	e8 47 4f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b269:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b26f:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b275:	74 17                	je     f012b28e <test_krealloc+0x1476>
			panic(
f012b277:	83 ec 04             	sub    $0x4,%esp
f012b27a:	68 98 a6 13 f0       	push   $0xf013a698
f012b27f:	68 36 10 00 00       	push   $0x1036
f012b284:	68 0e 91 13 f0       	push   $0xf013910e
f012b289:	e8 22 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b28e:	e8 ed 16 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b293:	89 c2                	mov    %eax,%edx
f012b295:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b298:	39 c2                	cmp    %eax,%edx
f012b29a:	74 17                	je     f012b2b3 <test_krealloc+0x149b>
			panic(
f012b29c:	83 ec 04             	sub    $0x4,%esp
f012b29f:	68 04 a7 13 f0       	push   $0xf013a704
f012b2a4:	68 39 10 00 00       	push   $0x1039
f012b2a9:	68 0e 91 13 f0       	push   $0xf013910e
f012b2ae:	e8 fd 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b2b3:	e8 c8 16 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b2b8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012b2bb:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b2c1:	83 ec 08             	sub    $0x8,%esp
f012b2c4:	68 00 fc 0f 00       	push   $0xffc00
f012b2c9:	50                   	push   %eax
f012b2ca:	e8 e8 cc fd ff       	call   f0107fb7 <krealloc>
f012b2cf:	83 c4 10             	add    $0x10,%esp
f012b2d2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b2d8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b2de:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b2e3:	77 17                	ja     f012b2fc <test_krealloc+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b2e5:	83 ec 04             	sub    $0x4,%esp
f012b2e8:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012b2ed:	68 3f 10 00 00       	push   $0x103f
f012b2f2:	68 0e 91 13 f0       	push   $0xf013910e
f012b2f7:	e8 b4 4e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b2fc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b302:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b308:	74 17                	je     f012b321 <test_krealloc+0x1509>
			panic(
f012b30a:	83 ec 04             	sub    $0x4,%esp
f012b30d:	68 98 a6 13 f0       	push   $0xf013a698
f012b312:	68 42 10 00 00       	push   $0x1042
f012b317:	68 0e 91 13 f0       	push   $0xf013910e
f012b31c:	e8 8f 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b321:	e8 5a 16 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b326:	89 c2                	mov    %eax,%edx
f012b328:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b32b:	39 c2                	cmp    %eax,%edx
f012b32d:	74 17                	je     f012b346 <test_krealloc+0x152e>
			panic(
f012b32f:	83 ec 04             	sub    $0x4,%esp
f012b332:	68 04 a7 13 f0       	push   $0xf013a704
f012b337:	68 45 10 00 00       	push   $0x1045
f012b33c:	68 0e 91 13 f0       	push   $0xf013910e
f012b341:	e8 6a 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b346:	e8 35 16 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b34b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012b34e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b354:	83 ec 08             	sub    $0x8,%esp
f012b357:	68 00 fc 0f 00       	push   $0xffc00
f012b35c:	50                   	push   %eax
f012b35d:	e8 55 cc fd ff       	call   f0107fb7 <krealloc>
f012b362:	83 c4 10             	add    $0x10,%esp
f012b365:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b36b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b371:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b376:	77 17                	ja     f012b38f <test_krealloc+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b378:	83 ec 04             	sub    $0x4,%esp
f012b37b:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012b380:	68 4d 10 00 00       	push   $0x104d
f012b385:	68 0e 91 13 f0       	push   $0xf013910e
f012b38a:	e8 21 4e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012b38f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b395:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b39b:	74 17                	je     f012b3b4 <test_krealloc+0x159c>
			panic(
f012b39d:	83 ec 04             	sub    $0x4,%esp
f012b3a0:	68 48 a7 13 f0       	push   $0xf013a748
f012b3a5:	68 50 10 00 00       	push   $0x1050
f012b3aa:	68 0e 91 13 f0       	push   $0xf013910e
f012b3af:	e8 fc 4d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b3b4:	e8 c7 15 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b3b9:	89 c2                	mov    %eax,%edx
f012b3bb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b3be:	39 c2                	cmp    %eax,%edx
f012b3c0:	74 17                	je     f012b3d9 <test_krealloc+0x15c1>
			panic(
f012b3c2:	83 ec 04             	sub    $0x4,%esp
f012b3c5:	68 04 a7 13 f0       	push   $0xf013a704
f012b3ca:	68 53 10 00 00       	push   $0x1053
f012b3cf:	68 0e 91 13 f0       	push   $0xf013910e
f012b3d4:	e8 d7 4d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012b3d9:	83 ec 0c             	sub    $0xc,%esp
f012b3dc:	68 27 99 13 f0       	push   $0xf0139927
f012b3e1:	e8 4b 5a fd ff       	call   f0100e31 <cprintf>
f012b3e6:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012b3e9:	e8 92 15 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b3ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012b3f1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b3f7:	83 ec 08             	sub    $0x8,%esp
f012b3fa:	68 00 18 10 00       	push   $0x101800
f012b3ff:	50                   	push   %eax
f012b400:	e8 b2 cb fd ff       	call   f0107fb7 <krealloc>
f012b405:	83 c4 10             	add    $0x10,%esp
f012b408:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b40b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b40e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b413:	77 17                	ja     f012b42c <test_krealloc+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b415:	83 ec 04             	sub    $0x4,%esp
f012b418:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012b41d:	68 5c 10 00 00       	push   $0x105c
f012b422:	68 0e 91 13 f0       	push   $0xf013910e
f012b427:	e8 84 4d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b42c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b432:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b435:	74 17                	je     f012b44e <test_krealloc+0x1636>
			panic(
f012b437:	83 ec 04             	sub    $0x4,%esp
f012b43a:	68 a8 a7 13 f0       	push   $0xf013a7a8
f012b43f:	68 5f 10 00 00       	push   $0x105f
f012b444:	68 0e 91 13 f0       	push   $0xf013910e
f012b449:	e8 62 4d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012b44e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b451:	e8 2a 15 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b456:	29 c3                	sub    %eax,%ebx
f012b458:	89 d8                	mov    %ebx,%eax
f012b45a:	83 f8 02             	cmp    $0x2,%eax
f012b45d:	74 17                	je     f012b476 <test_krealloc+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b45f:	83 ec 04             	sub    $0x4,%esp
f012b462:	68 24 a8 13 f0       	push   $0xf013a824
f012b467:	68 61 10 00 00       	push   $0x1061
f012b46c:	68 0e 91 13 f0       	push   $0xf013910e
f012b471:	e8 3a 4d fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012b476:	e8 05 15 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b47b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012b47e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b484:	83 ec 08             	sub    $0x8,%esp
f012b487:	68 00 fc 3f 00       	push   $0x3ffc00
f012b48c:	50                   	push   %eax
f012b48d:	e8 25 cb fd ff       	call   f0107fb7 <krealloc>
f012b492:	83 c4 10             	add    $0x10,%esp
f012b495:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b498:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b49b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b4a0:	77 17                	ja     f012b4b9 <test_krealloc+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b4a2:	83 ec 04             	sub    $0x4,%esp
f012b4a5:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012b4aa:	68 67 10 00 00       	push   $0x1067
f012b4af:	68 0e 91 13 f0       	push   $0xf013910e
f012b4b4:	e8 f7 4c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b4b9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b4bf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b4c2:	74 17                	je     f012b4db <test_krealloc+0x16c3>
			panic(
f012b4c4:	83 ec 04             	sub    $0x4,%esp
f012b4c7:	68 a8 a7 13 f0       	push   $0xf013a7a8
f012b4cc:	68 6a 10 00 00       	push   $0x106a
f012b4d1:	68 0e 91 13 f0       	push   $0xf013910e
f012b4d6:	e8 d5 4c fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012b4db:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b4de:	e8 9d 14 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b4e3:	29 c3                	sub    %eax,%ebx
f012b4e5:	89 d8                	mov    %ebx,%eax
f012b4e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b4ec:	74 17                	je     f012b505 <test_krealloc+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012b4ee:	83 ec 04             	sub    $0x4,%esp
f012b4f1:	68 24 a8 13 f0       	push   $0xf013a824
f012b4f6:	68 6d 10 00 00       	push   $0x106d
f012b4fb:	68 0e 91 13 f0       	push   $0xf013910e
f012b500:	e8 ab 4c fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012b505:	83 ec 0c             	sub    $0xc,%esp
f012b508:	68 6c 99 13 f0       	push   $0xf013996c
f012b50d:	e8 1f 59 fd ff       	call   f0100e31 <cprintf>
f012b512:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012b515:	e8 66 14 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b51a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012b51d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b523:	83 ec 08             	sub    $0x8,%esp
f012b526:	68 00 fc 9f 00       	push   $0x9ffc00
f012b52b:	50                   	push   %eax
f012b52c:	e8 86 ca fd ff       	call   f0107fb7 <krealloc>
f012b531:	83 c4 10             	add    $0x10,%esp
f012b534:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b537:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b53a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b53f:	77 17                	ja     f012b558 <test_krealloc+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b541:	83 ec 04             	sub    $0x4,%esp
f012b544:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012b549:	68 78 10 00 00       	push   $0x1078
f012b54e:	68 0e 91 13 f0       	push   $0xf013910e
f012b553:	e8 58 4c fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012b558:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b55f:	10 00 00 
f012b562:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012b567:	0f b6 d0             	movzbl %al,%edx
f012b56a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b570:	01 d0                	add    %edx,%eax
f012b572:	48                   	dec    %eax
f012b573:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b579:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b57f:	ba 00 00 00 00       	mov    $0x0,%edx
f012b584:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b58a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b590:	29 d0                	sub    %edx,%eax
f012b592:	89 c1                	mov    %eax,%ecx
f012b594:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b59b:	10 00 00 
f012b59e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012b5a3:	0f b6 c0             	movzbl %al,%eax
f012b5a6:	c1 e0 04             	shl    $0x4,%eax
f012b5a9:	89 c2                	mov    %eax,%edx
f012b5ab:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b5b1:	01 d0                	add    %edx,%eax
f012b5b3:	48                   	dec    %eax
f012b5b4:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b5ba:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b5c0:	ba 00 00 00 00       	mov    $0x0,%edx
f012b5c5:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b5cb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b5d1:	29 d0                	sub    %edx,%eax
f012b5d3:	01 c8                	add    %ecx,%eax
f012b5d5:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012b5db:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b5de:	39 c2                	cmp    %eax,%edx
f012b5e0:	74 18                	je     f012b5fa <test_krealloc+0x17e2>
			panic(
f012b5e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b5e5:	50                   	push   %eax
f012b5e6:	68 58 a8 13 f0       	push   $0xf013a858
f012b5eb:	68 7c 10 00 00       	push   $0x107c
f012b5f0:	68 0e 91 13 f0       	push   $0xf013910e
f012b5f5:	e8 b6 4b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012b5fa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b600:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b603:	75 17                	jne    f012b61c <test_krealloc+0x1804>
			panic(
f012b605:	83 ec 04             	sub    $0x4,%esp
f012b608:	68 9c a8 13 f0       	push   $0xf013a89c
f012b60d:	68 7f 10 00 00       	push   $0x107f
f012b612:	68 0e 91 13 f0       	push   $0xf013910e
f012b617:	e8 94 4b fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012b61c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b61f:	e8 5c 13 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b624:	29 c3                	sub    %eax,%ebx
f012b626:	89 d8                	mov    %ebx,%eax
f012b628:	3d 00 06 00 00       	cmp    $0x600,%eax
f012b62d:	74 17                	je     f012b646 <test_krealloc+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b62f:	83 ec 04             	sub    $0x4,%esp
f012b632:	68 24 a8 13 f0       	push   $0xf013a824
f012b637:	68 82 10 00 00       	push   $0x1082
f012b63c:	68 0e 91 13 f0       	push   $0xf013910e
f012b641:	e8 6a 4b fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012b646:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b649:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012b64f:	e8 2c 13 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b654:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012b657:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b65d:	83 ec 08             	sub    $0x8,%esp
f012b660:	68 00 fc 5f 00       	push   $0x5ffc00
f012b665:	50                   	push   %eax
f012b666:	e8 4c c9 fd ff       	call   f0107fb7 <krealloc>
f012b66b:	83 c4 10             	add    $0x10,%esp
f012b66e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b671:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b674:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b679:	77 17                	ja     f012b692 <test_krealloc+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b67b:	83 ec 04             	sub    $0x4,%esp
f012b67e:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012b683:	68 8b 10 00 00       	push   $0x108b
f012b688:	68 0e 91 13 f0       	push   $0xf013910e
f012b68d:	e8 1e 4b fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[6])
f012b692:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b698:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b69b:	74 17                	je     f012b6b4 <test_krealloc+0x189c>
			panic(
f012b69d:	83 ec 04             	sub    $0x4,%esp
f012b6a0:	68 a8 a7 13 f0       	push   $0xf013a7a8
f012b6a5:	68 8e 10 00 00       	push   $0x108e
f012b6aa:	68 0e 91 13 f0       	push   $0xf013910e
f012b6af:	e8 fc 4a fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012b6b4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b6b7:	e8 c4 12 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b6bc:	29 c3                	sub    %eax,%ebx
f012b6be:	89 d8                	mov    %ebx,%eax
f012b6c0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b6c5:	74 17                	je     f012b6de <test_krealloc+0x18c6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b6c7:	83 ec 04             	sub    $0x4,%esp
f012b6ca:	68 24 a8 13 f0       	push   $0xf013a824
f012b6cf:	68 91 10 00 00       	push   $0x1091
f012b6d4:	68 0e 91 13 f0       	push   $0xf013910e
f012b6d9:	e8 d2 4a fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012b6de:	e8 9d 12 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b6e3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012b6e6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b6ec:	83 ec 08             	sub    $0x8,%esp
f012b6ef:	68 00 fc 3f 01       	push   $0x13ffc00
f012b6f4:	50                   	push   %eax
f012b6f5:	e8 bd c8 fd ff       	call   f0107fb7 <krealloc>
f012b6fa:	83 c4 10             	add    $0x10,%esp
f012b6fd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b700:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b703:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b708:	77 17                	ja     f012b721 <test_krealloc+0x1909>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b70a:	83 ec 04             	sub    $0x4,%esp
f012b70d:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012b712:	68 98 10 00 00       	push   $0x1098
f012b717:	68 0e 91 13 f0       	push   $0xf013910e
f012b71c:	e8 8f 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012b721:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b727:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b72a:	75 17                	jne    f012b743 <test_krealloc+0x192b>
			panic(
f012b72c:	83 ec 04             	sub    $0x4,%esp
f012b72f:	68 9c a8 13 f0       	push   $0xf013a89c
f012b734:	68 9b 10 00 00       	push   $0x109b
f012b739:	68 0e 91 13 f0       	push   $0xf013910e
f012b73e:	e8 6d 4a fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012b743:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012b74a:	10 00 00 
f012b74d:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012b752:	0f b6 d0             	movzbl %al,%edx
f012b755:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012b75b:	01 d0                	add    %edx,%eax
f012b75d:	48                   	dec    %eax
f012b75e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012b764:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b76a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b76f:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012b775:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b77b:	29 d0                	sub    %edx,%eax
f012b77d:	89 c1                	mov    %eax,%ecx
f012b77f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012b786:	10 00 00 
f012b789:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012b78e:	0f b6 c0             	movzbl %al,%eax
f012b791:	c1 e0 04             	shl    $0x4,%eax
f012b794:	89 c2                	mov    %eax,%edx
f012b796:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b79c:	01 d0                	add    %edx,%eax
f012b79e:	48                   	dec    %eax
f012b79f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012b7a5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b7ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7b0:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012b7b6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b7bc:	29 d0                	sub    %edx,%eax
f012b7be:	01 c8                	add    %ecx,%eax
f012b7c0:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012b7c6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b7c9:	39 c2                	cmp    %eax,%edx
f012b7cb:	74 17                	je     f012b7e4 <test_krealloc+0x19cc>
			panic("krealloc: Wrong start address for reallocated space");
f012b7cd:	83 ec 04             	sub    $0x4,%esp
f012b7d0:	68 20 a9 13 f0       	push   $0xf013a920
f012b7d5:	68 9d 10 00 00       	push   $0x109d
f012b7da:	68 0e 91 13 f0       	push   $0xf013910e
f012b7df:	e8 cc 49 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012b7e4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b7e7:	e8 94 11 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012b7ec:	29 c3                	sub    %eax,%ebx
f012b7ee:	89 d8                	mov    %ebx,%eax
f012b7f0:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012b7f5:	74 17                	je     f012b80e <test_krealloc+0x19f6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b7f7:	83 ec 04             	sub    $0x4,%esp
f012b7fa:	68 24 a8 13 f0       	push   $0xf013a824
f012b7ff:	68 a0 10 00 00       	push   $0x10a0
f012b804:	68 0e 91 13 f0       	push   $0xf013910e
f012b809:	e8 a2 49 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012b80e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b811:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012b817:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b81d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012b823:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b82a:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b82d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b834:	eb 21                	jmp    f012b857 <test_krealloc+0x1a3f>
			sums[0] += ptr[i];
f012b836:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b83c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012b83f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b845:	01 c8                	add    %ecx,%eax
f012b847:	8a 00                	mov    (%eax),%al
f012b849:	0f be c0             	movsbl %al,%eax
f012b84c:	01 d0                	add    %edx,%eax
f012b84e:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b854:	ff 45 d8             	incl   -0x28(%ebp)
f012b857:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b85d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b860:	7d d4                	jge    f012b836 <test_krealloc+0x1a1e>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b862:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b868:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b86e:	42                   	inc    %edx
f012b86f:	01 d2                	add    %edx,%edx
f012b871:	39 d0                	cmp    %edx,%eax
f012b873:	74 17                	je     f012b88c <test_krealloc+0x1a74>
			panic("krealloc: invalid read after re-allocations");
f012b875:	83 ec 04             	sub    $0x4,%esp
f012b878:	68 54 a9 13 f0       	push   $0xf013a954
f012b87d:	68 ae 10 00 00       	push   $0x10ae
f012b882:	68 0e 91 13 f0       	push   $0xf013910e
f012b887:	e8 24 49 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b88c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b892:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012b898:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b89f:	00 00 00 
		sums[1] = 0;
f012b8a2:	c7 85 0c fe ff ff 00 	movl   $0x0,-0x1f4(%ebp)
f012b8a9:	00 00 00 
		sums[2] = 0;
f012b8ac:	c7 85 10 fe ff ff 00 	movl   $0x0,-0x1f0(%ebp)
f012b8b3:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b8b6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b8bd:	eb 70                	jmp    f012b92f <test_krealloc+0x1b17>
			sums[0] += structArr[i].a;
f012b8bf:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b8c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b8c8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b8cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b8d5:	01 c8                	add    %ecx,%eax
f012b8d7:	8a 00                	mov    (%eax),%al
f012b8d9:	0f be c0             	movsbl %al,%eax
f012b8dc:	01 d0                	add    %edx,%eax
f012b8de:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[1] += structArr[i].b;
f012b8e4:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b8ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b8ed:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b8f4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b8fa:	01 c8                	add    %ecx,%eax
f012b8fc:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b900:	98                   	cwtl   
f012b901:	01 d0                	add    %edx,%eax
f012b903:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
			sums[2] += structArr[i].c;
f012b909:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b90f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b912:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b919:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b91f:	01 c8                	add    %ecx,%eax
f012b921:	8b 40 04             	mov    0x4(%eax),%eax
f012b924:	01 d0                	add    %edx,%eax
f012b926:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b92c:	ff 45 d8             	incl   -0x28(%ebp)
f012b92f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b935:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b938:	7d 85                	jge    f012b8bf <test_krealloc+0x1aa7>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012b93a:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012b940:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b946:	8d 50 01             	lea    0x1(%eax),%edx
f012b949:	89 d0                	mov    %edx,%eax
f012b94b:	01 c0                	add    %eax,%eax
f012b94d:	01 d0                	add    %edx,%eax
f012b94f:	01 c0                	add    %eax,%eax
f012b951:	01 d0                	add    %edx,%eax
f012b953:	39 c1                	cmp    %eax,%ecx
f012b955:	75 3a                	jne    f012b991 <test_krealloc+0x1b79>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012b957:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012b95d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b963:	8d 50 01             	lea    0x1(%eax),%edx
f012b966:	89 d0                	mov    %edx,%eax
f012b968:	01 c0                	add    %eax,%eax
f012b96a:	01 d0                	add    %edx,%eax
f012b96c:	01 c0                	add    %eax,%eax
f012b96e:	01 d0                	add    %edx,%eax
f012b970:	39 c1                	cmp    %eax,%ecx
f012b972:	75 1d                	jne    f012b991 <test_krealloc+0x1b79>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012b974:	8b 8d 10 fe ff ff    	mov    -0x1f0(%ebp),%ecx
f012b97a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b980:	8d 50 01             	lea    0x1(%eax),%edx
f012b983:	89 d0                	mov    %edx,%eax
f012b985:	01 c0                	add    %eax,%eax
f012b987:	01 d0                	add    %edx,%eax
f012b989:	01 c0                	add    %eax,%eax
f012b98b:	01 d0                	add    %edx,%eax
f012b98d:	39 c1                	cmp    %eax,%ecx
f012b98f:	74 17                	je     f012b9a8 <test_krealloc+0x1b90>
			panic("krealloc: invalid read after re-allocations");
f012b991:	83 ec 04             	sub    $0x4,%esp
f012b994:	68 54 a9 13 f0       	push   $0xf013a954
f012b999:	68 c0 10 00 00       	push   $0x10c0
f012b99e:	68 0e 91 13 f0       	push   $0xf013910e
f012b9a3:	e8 08 48 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012b9a8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b9ae:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012b9b4:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b9bb:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012b9be:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b9c5:	eb 24                	jmp    f012b9eb <test_krealloc+0x1bd3>
			sums[0] += shortArr[i];
f012b9c7:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b9cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b9d0:	01 c0                	add    %eax,%eax
f012b9d2:	89 c1                	mov    %eax,%ecx
f012b9d4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b9da:	01 c8                	add    %ecx,%eax
f012b9dc:	66 8b 00             	mov    (%eax),%ax
f012b9df:	98                   	cwtl   
f012b9e0:	01 d0                	add    %edx,%eax
f012b9e2:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012b9e8:	ff 45 d8             	incl   -0x28(%ebp)
f012b9eb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b9f1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b9f4:	7d d1                	jge    f012b9c7 <test_krealloc+0x1baf>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012b9f6:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b9fc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ba02:	8d 48 01             	lea    0x1(%eax),%ecx
f012ba05:	89 c8                	mov    %ecx,%eax
f012ba07:	c1 e0 02             	shl    $0x2,%eax
f012ba0a:	01 c8                	add    %ecx,%eax
f012ba0c:	39 c2                	cmp    %eax,%edx
f012ba0e:	74 17                	je     f012ba27 <test_krealloc+0x1c0f>
			panic("krealloc: invalid read after re-allocations");
f012ba10:	83 ec 04             	sub    $0x4,%esp
f012ba13:	68 54 a9 13 f0       	push   $0xf013a954
f012ba18:	68 ca 10 00 00       	push   $0x10ca
f012ba1d:	68 0e 91 13 f0       	push   $0xf013910e
f012ba22:	e8 89 47 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012ba27:	e8 54 0f fe ff       	call   f010c980 <sys_calculate_free_frames>
f012ba2c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ba2f:	e8 f2 8b fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ba34:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012ba3a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ba40:	83 ec 08             	sub    $0x8,%esp
f012ba43:	6a 00                	push   $0x0
f012ba45:	50                   	push   %eax
f012ba46:	e8 6c c5 fd ff       	call   f0107fb7 <krealloc>
f012ba4b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ba4e:	e8 d3 8b fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ba53:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ba59:	74 17                	je     f012ba72 <test_krealloc+0x1c5a>
			panic(
f012ba5b:	83 ec 04             	sub    $0x4,%esp
f012ba5e:	68 28 91 13 f0       	push   $0xf0139128
f012ba63:	68 d2 10 00 00       	push   $0x10d2
f012ba68:	68 0e 91 13 f0       	push   $0xf013910e
f012ba6d:	e8 3e 47 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012ba72:	e8 09 0f fe ff       	call   f010c980 <sys_calculate_free_frames>
f012ba77:	89 c2                	mov    %eax,%edx
f012ba79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ba7c:	29 c2                	sub    %eax,%edx
f012ba7e:	89 d0                	mov    %edx,%eax
f012ba80:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012ba85:	74 17                	je     f012ba9e <test_krealloc+0x1c86>
			panic("krealloc: pages in memory are not freed correctly");
f012ba87:	83 ec 04             	sub    $0x4,%esp
f012ba8a:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012ba8f:	68 d4 10 00 00       	push   $0x10d4
f012ba94:	68 0e 91 13 f0       	push   $0xf013910e
f012ba99:	e8 12 47 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012ba9e:	e8 dd 0e fe ff       	call   f010c980 <sys_calculate_free_frames>
f012baa3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012baa6:	e8 7b 8b fd ff       	call   f0104626 <pf_calculate_free_frames>
f012baab:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012bab1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bab7:	83 ec 0c             	sub    $0xc,%esp
f012baba:	50                   	push   %eax
f012babb:	e8 5b c4 fd ff       	call   f0107f1b <kfree>
f012bac0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bac3:	e8 5e 8b fd ff       	call   f0104626 <pf_calculate_free_frames>
f012bac8:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bace:	74 17                	je     f012bae7 <test_krealloc+0x1ccf>
			panic(
f012bad0:	83 ec 04             	sub    $0x4,%esp
f012bad3:	68 28 91 13 f0       	push   $0xf0139128
f012bad8:	68 dc 10 00 00       	push   $0x10dc
f012badd:	68 0e 91 13 f0       	push   $0xf013910e
f012bae2:	e8 c9 46 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012bae7:	e8 94 0e fe ff       	call   f010c980 <sys_calculate_free_frames>
f012baec:	89 c2                	mov    %eax,%edx
f012baee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012baf1:	29 c2                	sub    %eax,%edx
f012baf3:	89 d0                	mov    %edx,%eax
f012baf5:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012bafa:	74 17                	je     f012bb13 <test_krealloc+0x1cfb>
			panic("krealloc: pages in memory are not freed correctly");
f012bafc:	83 ec 04             	sub    $0x4,%esp
f012baff:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012bb04:	68 de 10 00 00       	push   $0x10de
f012bb09:	68 0e 91 13 f0       	push   $0xf013910e
f012bb0e:	e8 9d 46 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bb13:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012bb1a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012bb21:	eb 48                	jmp    f012bb6b <test_krealloc+0x1d53>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012bb23:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012bb26:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012bb2b:	83 ec 04             	sub    $0x4,%esp
f012bb2e:	8d 8d 00 fe ff ff    	lea    -0x200(%ebp),%ecx
f012bb34:	51                   	push   %ecx
f012bb35:	52                   	push   %edx
f012bb36:	50                   	push   %eax
f012bb37:	e8 4d b9 fd ff       	call   f0107489 <get_page_table>
f012bb3c:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012bb3f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012bb45:	85 c0                	test   %eax,%eax
f012bb47:	75 17                	jne    f012bb60 <test_krealloc+0x1d48>
					panic(
f012bb49:	83 ec 04             	sub    $0x4,%esp
f012bb4c:	68 10 9a 13 f0       	push   $0xf0139a10
f012bb51:	68 eb 10 00 00       	push   $0x10eb
f012bb56:	68 0e 91 13 f0       	push   $0xf013910e
f012bb5b:	e8 50 46 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bb60:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012bb67:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012bb6b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bb6f:	78 b2                	js     f012bb23 <test_krealloc+0x1d0b>
f012bb71:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bb75:	7f 09                	jg     f012bb80 <test_krealloc+0x1d68>
f012bb77:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012bb7e:	76 a3                	jbe    f012bb23 <test_krealloc+0x1d0b>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012bb80:	83 ec 0c             	sub    $0xc,%esp
f012bb83:	68 f2 92 13 f0       	push   $0xf01392f2
f012bb88:	e8 a4 52 fd ff       	call   f0100e31 <cprintf>
f012bb8d:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012bb90:	83 ec 0c             	sub    $0xc,%esp
f012bb93:	68 80 a9 13 f0       	push   $0xf013a980
f012bb98:	e8 94 52 fd ff       	call   f0100e31 <cprintf>
f012bb9d:	83 c4 10             	add    $0x10,%esp
	return 0;
f012bba0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012bba5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012bba8:	5b                   	pop    %ebx
f012bba9:	5f                   	pop    %edi
f012bbaa:	5d                   	pop    %ebp
f012bbab:	c3                   	ret    

f012bbac <test_krealloc_BF>:


int test_krealloc_BF() {
f012bbac:	55                   	push   %ebp
f012bbad:	89 e5                	mov    %esp,%ebp
f012bbaf:	57                   	push   %edi
f012bbb0:	53                   	push   %ebx
f012bbb1:	81 ec 10 02 00 00    	sub    $0x210,%esp
	cprintf("==============================================\n");
f012bbb7:	83 ec 0c             	sub    $0xc,%esp
f012bbba:	68 50 90 13 f0       	push   $0xf0139050
f012bbbf:	e8 6d 52 fd ff       	call   f0100e31 <cprintf>
f012bbc4:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012bbc7:	83 ec 0c             	sub    $0xc,%esp
f012bbca:	68 80 90 13 f0       	push   $0xf0139080
f012bbcf:	e8 5d 52 fd ff       	call   f0100e31 <cprintf>
f012bbd4:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012bbd7:	83 ec 0c             	sub    $0xc,%esp
f012bbda:	68 50 90 13 f0       	push   $0xf0139050
f012bbdf:	e8 4d 52 fd ff       	call   f0100e31 <cprintf>
f012bbe4:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012bbe7:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012bbeb:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012bbef:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012bbf5:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012bbfb:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012bc02:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012bc09:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f012bc0f:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bc14:	b8 00 00 00 00       	mov    $0x0,%eax
f012bc19:	89 d7                	mov    %edx,%edi
f012bc1b:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012bc1d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012bc24:	8d 95 48 fe ff ff    	lea    -0x1b8(%ebp),%edx
f012bc2a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bc2f:	b8 00 00 00 00       	mov    $0x0,%eax
f012bc34:	89 d7                	mov    %edx,%edi
f012bc36:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012bc38:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f012bc3e:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bc43:	b8 00 00 00 00       	mov    $0x0,%eax
f012bc48:	89 d7                	mov    %edx,%edi
f012bc4a:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bc4c:	e8 2f 0d fe ff       	call   f010c980 <sys_calculate_free_frames>
f012bc51:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012bc54:	83 ec 08             	sub    $0x8,%esp
f012bc57:	68 00 fc 0f 00       	push   $0xffc00
f012bc5c:	6a 00                	push   $0x0
f012bc5e:	e8 54 c3 fd ff       	call   f0107fb7 <krealloc>
f012bc63:	83 c4 10             	add    $0x10,%esp
f012bc66:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012bc6c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bc72:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bc77:	77 17                	ja     f012bc90 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bc79:	83 ec 04             	sub    $0x4,%esp
f012bc7c:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012bc81:	68 1a 11 00 00       	push   $0x111a
f012bc86:	68 0e 91 13 f0       	push   $0xf013910e
f012bc8b:	e8 20 45 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012bc90:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bc96:	89 c1                	mov    %eax,%ecx
f012bc98:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012bc9f:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012bca4:	0f b6 d0             	movzbl %al,%edx
f012bca7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012bcaa:	01 d0                	add    %edx,%eax
f012bcac:	48                   	dec    %eax
f012bcad:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012bcb0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bcb3:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcb8:	f7 75 b4             	divl   -0x4c(%ebp)
f012bcbb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bcbe:	29 d0                	sub    %edx,%eax
f012bcc0:	89 c3                	mov    %eax,%ebx
f012bcc2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012bcc9:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012bcce:	0f b6 c0             	movzbl %al,%eax
f012bcd1:	c1 e0 04             	shl    $0x4,%eax
f012bcd4:	89 c2                	mov    %eax,%edx
f012bcd6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012bcd9:	01 d0                	add    %edx,%eax
f012bcdb:	48                   	dec    %eax
f012bcdc:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012bcdf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bce2:	ba 00 00 00 00       	mov    $0x0,%edx
f012bce7:	f7 75 ac             	divl   -0x54(%ebp)
f012bcea:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bced:	29 d0                	sub    %edx,%eax
f012bcef:	01 d8                	add    %ebx,%eax
f012bcf1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012bcf6:	39 c1                	cmp    %eax,%ecx
f012bcf8:	74 17                	je     f012bd11 <test_krealloc_BF+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012bcfa:	83 ec 04             	sub    $0x4,%esp
f012bcfd:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012bd02:	68 1c 11 00 00       	push   $0x111c
f012bd07:	68 0e 91 13 f0       	push   $0xf013910e
f012bd0c:	e8 9f 44 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bd11:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bd14:	e8 67 0c fe ff       	call   f010c980 <sys_calculate_free_frames>
f012bd19:	29 c3                	sub    %eax,%ebx
f012bd1b:	89 d8                	mov    %ebx,%eax
f012bd1d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bd22:	74 17                	je     f012bd3b <test_krealloc_BF+0x18f>
			panic("krealloc: Wrong allocation: ");
f012bd24:	83 ec 04             	sub    $0x4,%esp
f012bd27:	68 22 a4 13 f0       	push   $0xf013a422
f012bd2c:	68 1f 11 00 00       	push   $0x111f
f012bd31:	68 0e 91 13 f0       	push   $0xf013910e
f012bd36:	e8 75 44 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bd3b:	c7 85 48 fe ff ff ff 	movl   $0xffbff,-0x1b8(%ebp)
f012bd42:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bd45:	e8 36 0c fe ff       	call   f010c980 <sys_calculate_free_frames>
f012bd4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012bd4d:	83 ec 08             	sub    $0x8,%esp
f012bd50:	68 00 fc 0f 00       	push   $0xffc00
f012bd55:	6a 00                	push   $0x0
f012bd57:	e8 5b c2 fd ff       	call   f0107fb7 <krealloc>
f012bd5c:	83 c4 10             	add    $0x10,%esp
f012bd5f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012bd65:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012bd6b:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012bd70:	77 17                	ja     f012bd89 <test_krealloc_BF+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bd72:	83 ec 04             	sub    $0x4,%esp
f012bd75:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012bd7a:	68 27 11 00 00       	push   $0x1127
f012bd7f:	68 0e 91 13 f0       	push   $0xf013910e
f012bd84:	e8 27 44 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012bd89:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012bd8f:	89 c1                	mov    %eax,%ecx
f012bd91:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012bd98:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012bd9d:	0f b6 d0             	movzbl %al,%edx
f012bda0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012bda3:	01 d0                	add    %edx,%eax
f012bda5:	48                   	dec    %eax
f012bda6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012bda9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bdac:	ba 00 00 00 00       	mov    $0x0,%edx
f012bdb1:	f7 75 a4             	divl   -0x5c(%ebp)
f012bdb4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bdb7:	29 d0                	sub    %edx,%eax
f012bdb9:	89 c3                	mov    %eax,%ebx
f012bdbb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012bdc2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012bdc7:	0f b6 c0             	movzbl %al,%eax
f012bdca:	c1 e0 04             	shl    $0x4,%eax
f012bdcd:	89 c2                	mov    %eax,%edx
f012bdcf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012bdd2:	01 d0                	add    %edx,%eax
f012bdd4:	48                   	dec    %eax
f012bdd5:	89 45 98             	mov    %eax,-0x68(%ebp)
f012bdd8:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bddb:	ba 00 00 00 00       	mov    $0x0,%edx
f012bde0:	f7 75 9c             	divl   -0x64(%ebp)
f012bde3:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bde6:	29 d0                	sub    %edx,%eax
f012bde8:	01 d8                	add    %ebx,%eax
f012bdea:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012bdef:	39 c1                	cmp    %eax,%ecx
f012bdf1:	74 17                	je     f012be0a <test_krealloc_BF+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012bdf3:	83 ec 04             	sub    $0x4,%esp
f012bdf6:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012bdfb:	68 29 11 00 00       	push   $0x1129
f012be00:	68 0e 91 13 f0       	push   $0xf013910e
f012be05:	e8 a6 43 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012be0a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012be0d:	e8 6e 0b fe ff       	call   f010c980 <sys_calculate_free_frames>
f012be12:	29 c3                	sub    %eax,%ebx
f012be14:	89 d8                	mov    %ebx,%eax
f012be16:	3d 00 01 00 00       	cmp    $0x100,%eax
f012be1b:	74 17                	je     f012be34 <test_krealloc_BF+0x288>
			panic("krealloc: Wrong allocation: ");
f012be1d:	83 ec 04             	sub    $0x4,%esp
f012be20:	68 22 a4 13 f0       	push   $0xf013a422
f012be25:	68 2b 11 00 00       	push   $0x112b
f012be2a:	68 0e 91 13 f0       	push   $0xf013910e
f012be2f:	e8 7c 43 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012be34:	c7 85 4c fe ff ff ff 	movl   $0xffbff,-0x1b4(%ebp)
f012be3b:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012be3e:	e8 3d 0b fe ff       	call   f010c980 <sys_calculate_free_frames>
f012be43:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012be46:	83 ec 08             	sub    $0x8,%esp
f012be49:	68 00 fc 0f 00       	push   $0xffc00
f012be4e:	6a 00                	push   $0x0
f012be50:	e8 62 c1 fd ff       	call   f0107fb7 <krealloc>
f012be55:	83 c4 10             	add    $0x10,%esp
f012be58:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012be5e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012be64:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012be69:	77 17                	ja     f012be82 <test_krealloc_BF+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012be6b:	83 ec 04             	sub    $0x4,%esp
f012be6e:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012be73:	68 33 11 00 00       	push   $0x1133
f012be78:	68 0e 91 13 f0       	push   $0xf013910e
f012be7d:	e8 2e 43 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012be82:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012be88:	89 c1                	mov    %eax,%ecx
f012be8a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012be91:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012be96:	0f b6 d0             	movzbl %al,%edx
f012be99:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012be9c:	01 d0                	add    %edx,%eax
f012be9e:	48                   	dec    %eax
f012be9f:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bea2:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bea5:	ba 00 00 00 00       	mov    $0x0,%edx
f012beaa:	f7 75 94             	divl   -0x6c(%ebp)
f012bead:	8b 45 90             	mov    -0x70(%ebp),%eax
f012beb0:	29 d0                	sub    %edx,%eax
f012beb2:	89 c3                	mov    %eax,%ebx
f012beb4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012bebb:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012bec0:	0f b6 c0             	movzbl %al,%eax
f012bec3:	c1 e0 04             	shl    $0x4,%eax
f012bec6:	89 c2                	mov    %eax,%edx
f012bec8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012becb:	01 d0                	add    %edx,%eax
f012becd:	48                   	dec    %eax
f012bece:	89 45 88             	mov    %eax,-0x78(%ebp)
f012bed1:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bed4:	ba 00 00 00 00       	mov    $0x0,%edx
f012bed9:	f7 75 8c             	divl   -0x74(%ebp)
f012bedc:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bedf:	29 d0                	sub    %edx,%eax
f012bee1:	01 d8                	add    %ebx,%eax
f012bee3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bee8:	39 c1                	cmp    %eax,%ecx
f012beea:	74 17                	je     f012bf03 <test_krealloc_BF+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012beec:	83 ec 04             	sub    $0x4,%esp
f012beef:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012bef4:	68 35 11 00 00       	push   $0x1135
f012bef9:	68 0e 91 13 f0       	push   $0xf013910e
f012befe:	e8 ad 42 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bf03:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf06:	e8 75 0a fe ff       	call   f010c980 <sys_calculate_free_frames>
f012bf0b:	29 c3                	sub    %eax,%ebx
f012bf0d:	89 d8                	mov    %ebx,%eax
f012bf0f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bf14:	74 17                	je     f012bf2d <test_krealloc_BF+0x381>
			panic("krealloc: Wrong allocation: ");
f012bf16:	83 ec 04             	sub    $0x4,%esp
f012bf19:	68 22 a4 13 f0       	push   $0xf013a422
f012bf1e:	68 37 11 00 00       	push   $0x1137
f012bf23:	68 0e 91 13 f0       	push   $0xf013910e
f012bf28:	e8 83 42 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bf2d:	c7 85 50 fe ff ff ff 	movl   $0x3feff,-0x1b0(%ebp)
f012bf34:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bf37:	e8 44 0a fe ff       	call   f010c980 <sys_calculate_free_frames>
f012bf3c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bf3f:	83 ec 08             	sub    $0x8,%esp
f012bf42:	68 00 fc 0f 00       	push   $0xffc00
f012bf47:	6a 00                	push   $0x0
f012bf49:	e8 69 c0 fd ff       	call   f0107fb7 <krealloc>
f012bf4e:	83 c4 10             	add    $0x10,%esp
f012bf51:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bf57:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bf5d:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bf62:	77 17                	ja     f012bf7b <test_krealloc_BF+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf64:	83 ec 04             	sub    $0x4,%esp
f012bf67:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012bf6c:	68 3e 11 00 00       	push   $0x113e
f012bf71:	68 0e 91 13 f0       	push   $0xf013910e
f012bf76:	e8 35 42 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012bf7b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bf81:	89 c1                	mov    %eax,%ecx
f012bf83:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012bf8a:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012bf8f:	0f b6 d0             	movzbl %al,%edx
f012bf92:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf95:	01 d0                	add    %edx,%eax
f012bf97:	48                   	dec    %eax
f012bf98:	89 45 80             	mov    %eax,-0x80(%ebp)
f012bf9b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bf9e:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfa3:	f7 75 84             	divl   -0x7c(%ebp)
f012bfa6:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bfa9:	29 d0                	sub    %edx,%eax
f012bfab:	89 c3                	mov    %eax,%ebx
f012bfad:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012bfb4:	10 00 00 
f012bfb7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012bfbc:	0f b6 c0             	movzbl %al,%eax
f012bfbf:	c1 e0 04             	shl    $0x4,%eax
f012bfc2:	89 c2                	mov    %eax,%edx
f012bfc4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012bfca:	01 d0                	add    %edx,%eax
f012bfcc:	48                   	dec    %eax
f012bfcd:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012bfd3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bfd9:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfde:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012bfe4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bfea:	29 d0                	sub    %edx,%eax
f012bfec:	01 d8                	add    %ebx,%eax
f012bfee:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012bff3:	39 c1                	cmp    %eax,%ecx
f012bff5:	74 17                	je     f012c00e <test_krealloc_BF+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012bff7:	83 ec 04             	sub    $0x4,%esp
f012bffa:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012bfff:	68 40 11 00 00       	push   $0x1140
f012c004:	68 0e 91 13 f0       	push   $0xf013910e
f012c009:	e8 a2 41 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c00e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c011:	e8 6a 09 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c016:	29 c3                	sub    %eax,%ebx
f012c018:	89 d8                	mov    %ebx,%eax
f012c01a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c01f:	74 17                	je     f012c038 <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong allocation: ");
f012c021:	83 ec 04             	sub    $0x4,%esp
f012c024:	68 22 a4 13 f0       	push   $0xf013a422
f012c029:	68 42 11 00 00       	push   $0x1142
f012c02e:	68 0e 91 13 f0       	push   $0xf013910e
f012c033:	e8 78 41 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c038:	c7 85 54 fe ff ff ff 	movl   $0x3feff,-0x1ac(%ebp)
f012c03f:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c042:	e8 39 09 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c047:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c04a:	83 ec 08             	sub    $0x8,%esp
f012c04d:	68 00 fc 1f 00       	push   $0x1ffc00
f012c052:	6a 00                	push   $0x0
f012c054:	e8 5e bf fd ff       	call   f0107fb7 <krealloc>
f012c059:	83 c4 10             	add    $0x10,%esp
f012c05c:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c062:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c068:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c06d:	77 17                	ja     f012c086 <test_krealloc_BF+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c06f:	83 ec 04             	sub    $0x4,%esp
f012c072:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012c077:	68 49 11 00 00       	push   $0x1149
f012c07c:	68 0e 91 13 f0       	push   $0xf013910e
f012c081:	e8 2a 41 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c086:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c08c:	89 c1                	mov    %eax,%ecx
f012c08e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c095:	10 00 00 
f012c098:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012c09d:	0f b6 d0             	movzbl %al,%edx
f012c0a0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c0a6:	01 d0                	add    %edx,%eax
f012c0a8:	48                   	dec    %eax
f012c0a9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c0af:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c0b5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0ba:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c0c0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c0c6:	29 d0                	sub    %edx,%eax
f012c0c8:	89 c3                	mov    %eax,%ebx
f012c0ca:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c0d1:	10 00 00 
f012c0d4:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012c0d9:	0f b6 c0             	movzbl %al,%eax
f012c0dc:	c1 e0 04             	shl    $0x4,%eax
f012c0df:	89 c2                	mov    %eax,%edx
f012c0e1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c0e7:	01 d0                	add    %edx,%eax
f012c0e9:	48                   	dec    %eax
f012c0ea:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c0f0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c0f6:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0fb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c101:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c107:	29 d0                	sub    %edx,%eax
f012c109:	01 d8                	add    %ebx,%eax
f012c10b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c110:	39 c1                	cmp    %eax,%ecx
f012c112:	74 17                	je     f012c12b <test_krealloc_BF+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012c114:	83 ec 04             	sub    $0x4,%esp
f012c117:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012c11c:	68 4b 11 00 00       	push   $0x114b
f012c121:	68 0e 91 13 f0       	push   $0xf013910e
f012c126:	e8 85 40 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c12b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c12e:	e8 4d 08 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c133:	29 c3                	sub    %eax,%ebx
f012c135:	89 d8                	mov    %ebx,%eax
f012c137:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c13c:	74 17                	je     f012c155 <test_krealloc_BF+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012c13e:	83 ec 04             	sub    $0x4,%esp
f012c141:	68 22 a4 13 f0       	push   $0xf013a422
f012c146:	68 4d 11 00 00       	push   $0x114d
f012c14b:	68 0e 91 13 f0       	push   $0xf013910e
f012c150:	e8 5b 40 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c155:	c7 85 58 fe ff ff ff 	movl   $0xffdff,-0x1a8(%ebp)
f012c15c:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c15f:	e8 1c 08 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c164:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c167:	83 ec 08             	sub    $0x8,%esp
f012c16a:	68 00 fc 1f 00       	push   $0x1ffc00
f012c16f:	6a 00                	push   $0x0
f012c171:	e8 41 be fd ff       	call   f0107fb7 <krealloc>
f012c176:	83 c4 10             	add    $0x10,%esp
f012c179:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c17f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c185:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c18a:	77 17                	ja     f012c1a3 <test_krealloc_BF+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c18c:	83 ec 04             	sub    $0x4,%esp
f012c18f:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012c194:	68 54 11 00 00       	push   $0x1154
f012c199:	68 0e 91 13 f0       	push   $0xf013910e
f012c19e:	e8 0d 40 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c1a3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c1a9:	89 c1                	mov    %eax,%ecx
f012c1ab:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c1b2:	10 00 00 
f012c1b5:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012c1ba:	0f b6 d0             	movzbl %al,%edx
f012c1bd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c1c3:	01 d0                	add    %edx,%eax
f012c1c5:	48                   	dec    %eax
f012c1c6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c1cc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c1d2:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1d7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c1dd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c1e3:	29 d0                	sub    %edx,%eax
f012c1e5:	89 c3                	mov    %eax,%ebx
f012c1e7:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c1ee:	10 00 00 
f012c1f1:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012c1f6:	0f b6 c0             	movzbl %al,%eax
f012c1f9:	c1 e0 04             	shl    $0x4,%eax
f012c1fc:	89 c2                	mov    %eax,%edx
f012c1fe:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c204:	01 d0                	add    %edx,%eax
f012c206:	48                   	dec    %eax
f012c207:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c20d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c213:	ba 00 00 00 00       	mov    $0x0,%edx
f012c218:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c21e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c224:	29 d0                	sub    %edx,%eax
f012c226:	01 d8                	add    %ebx,%eax
f012c228:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c22d:	39 c1                	cmp    %eax,%ecx
f012c22f:	74 17                	je     f012c248 <test_krealloc_BF+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012c231:	83 ec 04             	sub    $0x4,%esp
f012c234:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012c239:	68 56 11 00 00       	push   $0x1156
f012c23e:	68 0e 91 13 f0       	push   $0xf013910e
f012c243:	e8 68 3f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c248:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c24b:	e8 30 07 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c250:	29 c3                	sub    %eax,%ebx
f012c252:	89 d8                	mov    %ebx,%eax
f012c254:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c259:	74 17                	je     f012c272 <test_krealloc_BF+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012c25b:	83 ec 04             	sub    $0x4,%esp
f012c25e:	68 22 a4 13 f0       	push   $0xf013a422
f012c263:	68 58 11 00 00       	push   $0x1158
f012c268:	68 0e 91 13 f0       	push   $0xf013910e
f012c26d:	e8 3e 3f fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c272:	c7 85 5c fe ff ff ff 	movl   $0xffdff,-0x1a4(%ebp)
f012c279:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c27c:	e8 ff 06 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c281:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c284:	83 ec 08             	sub    $0x8,%esp
f012c287:	68 00 fc 2f 00       	push   $0x2ffc00
f012c28c:	6a 00                	push   $0x0
f012c28e:	e8 24 bd fd ff       	call   f0107fb7 <krealloc>
f012c293:	83 c4 10             	add    $0x10,%esp
f012c296:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c29c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c2a2:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c2a7:	77 17                	ja     f012c2c0 <test_krealloc_BF+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c2a9:	83 ec 04             	sub    $0x4,%esp
f012c2ac:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012c2b1:	68 5f 11 00 00       	push   $0x115f
f012c2b6:	68 0e 91 13 f0       	push   $0xf013910e
f012c2bb:	e8 f0 3e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c2c0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c2c6:	89 c1                	mov    %eax,%ecx
f012c2c8:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c2cf:	10 00 00 
f012c2d2:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012c2d7:	0f b6 d0             	movzbl %al,%edx
f012c2da:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c2e0:	01 d0                	add    %edx,%eax
f012c2e2:	48                   	dec    %eax
f012c2e3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c2e9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c2ef:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2f4:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c2fa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c300:	29 d0                	sub    %edx,%eax
f012c302:	89 c3                	mov    %eax,%ebx
f012c304:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c30b:	10 00 00 
f012c30e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012c313:	0f b6 c0             	movzbl %al,%eax
f012c316:	c1 e0 04             	shl    $0x4,%eax
f012c319:	89 c2                	mov    %eax,%edx
f012c31b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c321:	01 d0                	add    %edx,%eax
f012c323:	48                   	dec    %eax
f012c324:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c32a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c330:	ba 00 00 00 00       	mov    $0x0,%edx
f012c335:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c33b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c341:	29 d0                	sub    %edx,%eax
f012c343:	01 d8                	add    %ebx,%eax
f012c345:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c34a:	39 c1                	cmp    %eax,%ecx
f012c34c:	74 17                	je     f012c365 <test_krealloc_BF+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012c34e:	83 ec 04             	sub    $0x4,%esp
f012c351:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012c356:	68 61 11 00 00       	push   $0x1161
f012c35b:	68 0e 91 13 f0       	push   $0xf013910e
f012c360:	e8 4b 3e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c365:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c368:	e8 13 06 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c36d:	29 c3                	sub    %eax,%ebx
f012c36f:	89 d8                	mov    %ebx,%eax
f012c371:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c376:	74 17                	je     f012c38f <test_krealloc_BF+0x7e3>
			panic("Wrong allocation: ");
f012c378:	83 ec 04             	sub    $0x4,%esp
f012c37b:	68 58 95 13 f0       	push   $0xf0139558
f012c380:	68 63 11 00 00       	push   $0x1163
f012c385:	68 0e 91 13 f0       	push   $0xf013910e
f012c38a:	e8 21 3e fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c38f:	c7 85 60 fe ff ff 7f 	movl   $0x5ff7f,-0x1a0(%ebp)
f012c396:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c399:	e8 e2 05 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c3a1:	83 ec 08             	sub    $0x8,%esp
f012c3a4:	68 00 fc 2f 00       	push   $0x2ffc00
f012c3a9:	6a 00                	push   $0x0
f012c3ab:	e8 07 bc fd ff       	call   f0107fb7 <krealloc>
f012c3b0:	83 c4 10             	add    $0x10,%esp
f012c3b3:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c3b9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c3bf:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c3c4:	77 17                	ja     f012c3dd <test_krealloc_BF+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c3c6:	83 ec 04             	sub    $0x4,%esp
f012c3c9:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012c3ce:	68 6a 11 00 00       	push   $0x116a
f012c3d3:	68 0e 91 13 f0       	push   $0xf013910e
f012c3d8:	e8 d3 3d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c3dd:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c3e3:	89 c1                	mov    %eax,%ecx
f012c3e5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c3ec:	10 00 00 
f012c3ef:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012c3f4:	0f b6 d0             	movzbl %al,%edx
f012c3f7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c3fd:	01 d0                	add    %edx,%eax
f012c3ff:	48                   	dec    %eax
f012c400:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c406:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c40c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c411:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c417:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c41d:	29 d0                	sub    %edx,%eax
f012c41f:	89 c3                	mov    %eax,%ebx
f012c421:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c428:	10 00 00 
f012c42b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012c430:	0f b6 c0             	movzbl %al,%eax
f012c433:	c1 e0 04             	shl    $0x4,%eax
f012c436:	89 c2                	mov    %eax,%edx
f012c438:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c43e:	01 d0                	add    %edx,%eax
f012c440:	48                   	dec    %eax
f012c441:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c447:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c44d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c452:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c458:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c45e:	29 d0                	sub    %edx,%eax
f012c460:	01 d8                	add    %ebx,%eax
f012c462:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c467:	39 c1                	cmp    %eax,%ecx
f012c469:	74 17                	je     f012c482 <test_krealloc_BF+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012c46b:	83 ec 04             	sub    $0x4,%esp
f012c46e:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012c473:	68 6c 11 00 00       	push   $0x116c
f012c478:	68 0e 91 13 f0       	push   $0xf013910e
f012c47d:	e8 2e 3d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c482:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c485:	e8 f6 04 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c48a:	29 c3                	sub    %eax,%ebx
f012c48c:	89 d8                	mov    %ebx,%eax
f012c48e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c493:	74 17                	je     f012c4ac <test_krealloc_BF+0x900>
			panic("krealloc: Wrong allocation: ");
f012c495:	83 ec 04             	sub    $0x4,%esp
f012c498:	68 22 a4 13 f0       	push   $0xf013a422
f012c49d:	68 6e 11 00 00       	push   $0x116e
f012c4a2:	68 0e 91 13 f0       	push   $0xf013910e
f012c4a7:	e8 04 3d fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c4ac:	c7 85 64 fe ff ff 7f 	movl   $0x5ff7f,-0x19c(%ebp)
f012c4b3:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c4b6:	e8 c5 04 fe ff       	call   f010c980 <sys_calculate_free_frames>
f012c4bb:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c4be:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012c4c5:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c4c8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c4ce:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012c4d4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c4da:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c4dd:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c4df:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012c4e5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c4eb:	01 c2                	add    %eax,%edx
f012c4ed:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c4f0:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c4f2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c4f8:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c4fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c505:	eb 11                	jmp    f012c518 <test_krealloc_BF+0x96c>
			ptr[i] = 2;
f012c507:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c50a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c510:	01 d0                	add    %edx,%eax
f012c512:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c515:	ff 45 f4             	incl   -0xc(%ebp)
f012c518:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c51e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c521:	7d e4                	jge    f012c507 <test_krealloc_BF+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c523:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c529:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012c52f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c535:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c53b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c541:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c548:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c54e:	01 d0                	add    %edx,%eax
f012c550:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c556:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c55c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c562:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c569:	eb 1b                	jmp    f012c586 <test_krealloc_BF+0x9da>
			intArr[i] = 4;
f012c56b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c56e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c575:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c57b:	01 d0                	add    %edx,%eax
f012c57d:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c583:	ff 45 f0             	incl   -0x10(%ebp)
f012c586:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c58c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c58f:	7d da                	jge    f012c56b <test_krealloc_BF+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c591:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c597:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c59d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c5a4:	eb 17                	jmp    f012c5bd <test_krealloc_BF+0xa11>
			shortArr[i] = 5;
f012c5a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c5a9:	01 c0                	add    %eax,%eax
f012c5ab:	89 c2                	mov    %eax,%edx
f012c5ad:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c5b3:	01 d0                	add    %edx,%eax
f012c5b5:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c5ba:	ff 45 ec             	incl   -0x14(%ebp)
f012c5bd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c5c3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c5c6:	7d de                	jge    f012c5a6 <test_krealloc_BF+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c5c8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c5ce:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012c5d4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c5da:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c5df:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c5e5:	01 c0                	add    %eax,%eax
f012c5e7:	89 c2                	mov    %eax,%edx
f012c5e9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c5ef:	01 d0                	add    %edx,%eax
f012c5f1:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c5f6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c5fc:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c602:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c609:	eb 49                	jmp    f012c654 <test_krealloc_BF+0xaa8>
			structArr[i].a = 7;
f012c60b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c60e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c615:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c61b:	01 d0                	add    %edx,%eax
f012c61d:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c620:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c623:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c62a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c630:	01 d0                	add    %edx,%eax
f012c632:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c638:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c63b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c642:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c648:	01 d0                	add    %edx,%eax
f012c64a:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c651:	ff 45 e8             	incl   -0x18(%ebp)
f012c654:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c65a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c65d:	7d ac                	jge    f012c60b <test_krealloc_BF+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c65f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c665:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012c66b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c671:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c674:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c67a:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c680:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c686:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c68d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c693:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c69a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6a0:	01 d0                	add    %edx,%eax
f012c6a2:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c6a5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c6ab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6b2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6b8:	01 d0                	add    %edx,%eax
f012c6ba:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c6c0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c6c6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6cd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6d3:	01 d0                	add    %edx,%eax
f012c6d5:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c6dc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c6e2:	8a 00                	mov    (%eax),%al
f012c6e4:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c6e7:	75 17                	jne    f012c700 <test_krealloc_BF+0xb54>
f012c6e9:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012c6ef:	89 c2                	mov    %eax,%edx
f012c6f1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c6f7:	01 d0                	add    %edx,%eax
f012c6f9:	8a 00                	mov    (%eax),%al
f012c6fb:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c6fe:	74 17                	je     f012c717 <test_krealloc_BF+0xb6b>
			panic(
f012c700:	83 ec 04             	sub    $0x4,%esp
f012c703:	68 40 a4 13 f0       	push   $0xf013a440
f012c708:	68 b1 11 00 00       	push   $0x11b1
f012c70d:	68 0e 91 13 f0       	push   $0xf013910e
f012c712:	e8 99 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c717:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c71d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c723:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c729:	8a 00                	mov    (%eax),%al
f012c72b:	3c 02                	cmp    $0x2,%al
f012c72d:	75 16                	jne    f012c745 <test_krealloc_BF+0xb99>
f012c72f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c735:	89 c2                	mov    %eax,%edx
f012c737:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c73d:	01 d0                	add    %edx,%eax
f012c73f:	8a 00                	mov    (%eax),%al
f012c741:	3c 02                	cmp    $0x2,%al
f012c743:	74 20                	je     f012c765 <test_krealloc_BF+0xbb9>
			panic(
f012c745:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c74b:	8a 00                	mov    (%eax),%al
f012c74d:	0f be c0             	movsbl %al,%eax
f012c750:	50                   	push   %eax
f012c751:	68 80 a4 13 f0       	push   $0xf013a480
f012c756:	68 b7 11 00 00       	push   $0x11b7
f012c75b:	68 0e 91 13 f0       	push   $0xf013910e
f012c760:	e8 4b 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c765:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c76b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c771:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c777:	8b 00                	mov    (%eax),%eax
f012c779:	83 f8 03             	cmp    $0x3,%eax
f012c77c:	75 1c                	jne    f012c79a <test_krealloc_BF+0xbee>
f012c77e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c784:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c78b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c791:	01 d0                	add    %edx,%eax
f012c793:	8b 00                	mov    (%eax),%eax
f012c795:	83 f8 03             	cmp    $0x3,%eax
f012c798:	74 17                	je     f012c7b1 <test_krealloc_BF+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012c79a:	83 ec 04             	sub    $0x4,%esp
f012c79d:	68 cc a4 13 f0       	push   $0xf013a4cc
f012c7a2:	68 bb 11 00 00       	push   $0x11bb
f012c7a7:	68 0e 91 13 f0       	push   $0xf013910e
f012c7ac:	e8 ff 39 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c7b1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c7b7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c7bd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c7c3:	8b 00                	mov    (%eax),%eax
f012c7c5:	83 f8 04             	cmp    $0x4,%eax
f012c7c8:	75 1c                	jne    f012c7e6 <test_krealloc_BF+0xc3a>
f012c7ca:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c7d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c7d7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c7dd:	01 d0                	add    %edx,%eax
f012c7df:	8b 00                	mov    (%eax),%eax
f012c7e1:	83 f8 04             	cmp    $0x4,%eax
f012c7e4:	74 17                	je     f012c7fd <test_krealloc_BF+0xc51>
			panic(
f012c7e6:	83 ec 04             	sub    $0x4,%esp
f012c7e9:	68 40 a4 13 f0       	push   $0xf013a440
f012c7ee:	68 c0 11 00 00       	push   $0x11c0
f012c7f3:	68 0e 91 13 f0       	push   $0xf013910e
f012c7f8:	e8 b3 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c7fd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c803:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c809:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c80f:	66 8b 00             	mov    (%eax),%ax
f012c812:	66 83 f8 05          	cmp    $0x5,%ax
f012c816:	75 1b                	jne    f012c833 <test_krealloc_BF+0xc87>
f012c818:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c81e:	01 c0                	add    %eax,%eax
f012c820:	89 c2                	mov    %eax,%edx
f012c822:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c828:	01 d0                	add    %edx,%eax
f012c82a:	66 8b 00             	mov    (%eax),%ax
f012c82d:	66 83 f8 05          	cmp    $0x5,%ax
f012c831:	74 17                	je     f012c84a <test_krealloc_BF+0xc9e>
			panic(
f012c833:	83 ec 04             	sub    $0x4,%esp
f012c836:	68 40 a4 13 f0       	push   $0xf013a440
f012c83b:	68 c5 11 00 00       	push   $0x11c5
f012c840:	68 0e 91 13 f0       	push   $0xf013910e
f012c845:	e8 66 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c84a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c850:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c856:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c85c:	66 8b 00             	mov    (%eax),%ax
f012c85f:	66 83 f8 06          	cmp    $0x6,%ax
f012c863:	75 1b                	jne    f012c880 <test_krealloc_BF+0xcd4>
f012c865:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c86b:	01 c0                	add    %eax,%eax
f012c86d:	89 c2                	mov    %eax,%edx
f012c86f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c875:	01 d0                	add    %edx,%eax
f012c877:	66 8b 00             	mov    (%eax),%ax
f012c87a:	66 83 f8 06          	cmp    $0x6,%ax
f012c87e:	74 17                	je     f012c897 <test_krealloc_BF+0xceb>
			panic(
f012c880:	83 ec 04             	sub    $0x4,%esp
f012c883:	68 40 a4 13 f0       	push   $0xf013a440
f012c888:	68 ca 11 00 00       	push   $0x11ca
f012c88d:	68 0e 91 13 f0       	push   $0xf013910e
f012c892:	e8 19 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c897:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c89d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c8a3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c8a9:	8a 00                	mov    (%eax),%al
f012c8ab:	3c 07                	cmp    $0x7,%al
f012c8ad:	75 1b                	jne    f012c8ca <test_krealloc_BF+0xd1e>
f012c8af:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c8b5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c8bc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c8c2:	01 d0                	add    %edx,%eax
f012c8c4:	8a 00                	mov    (%eax),%al
f012c8c6:	3c 07                	cmp    $0x7,%al
f012c8c8:	74 17                	je     f012c8e1 <test_krealloc_BF+0xd35>
			panic(
f012c8ca:	83 ec 04             	sub    $0x4,%esp
f012c8cd:	68 40 a4 13 f0       	push   $0xf013a440
f012c8d2:	68 cf 11 00 00       	push   $0x11cf
f012c8d7:	68 0e 91 13 f0       	push   $0xf013910e
f012c8dc:	e8 cf 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c8e1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c8e7:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c8eb:	66 83 f8 07          	cmp    $0x7,%ax
f012c8ef:	75 1f                	jne    f012c910 <test_krealloc_BF+0xd64>
f012c8f1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c8f7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c8fe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c904:	01 d0                	add    %edx,%eax
f012c906:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c90a:	66 83 f8 07          	cmp    $0x7,%ax
f012c90e:	74 17                	je     f012c927 <test_krealloc_BF+0xd7b>
			panic(
f012c910:	83 ec 04             	sub    $0x4,%esp
f012c913:	68 40 a4 13 f0       	push   $0xf013a440
f012c918:	68 d2 11 00 00       	push   $0x11d2
f012c91d:	68 0e 91 13 f0       	push   $0xf013910e
f012c922:	e8 89 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c927:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c92d:	8b 40 04             	mov    0x4(%eax),%eax
f012c930:	83 f8 07             	cmp    $0x7,%eax
f012c933:	75 1d                	jne    f012c952 <test_krealloc_BF+0xda6>
f012c935:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c93b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c942:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c948:	01 d0                	add    %edx,%eax
f012c94a:	8b 40 04             	mov    0x4(%eax),%eax
f012c94d:	83 f8 07             	cmp    $0x7,%eax
f012c950:	74 17                	je     f012c969 <test_krealloc_BF+0xdbd>
			panic(
f012c952:	83 ec 04             	sub    $0x4,%esp
f012c955:	68 40 a4 13 f0       	push   $0xf013a440
f012c95a:	68 d5 11 00 00       	push   $0x11d5
f012c95f:	68 0e 91 13 f0       	push   $0xf013910e
f012c964:	e8 47 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c969:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c96f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c975:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c97b:	8a 00                	mov    (%eax),%al
f012c97d:	3c 08                	cmp    $0x8,%al
f012c97f:	75 1b                	jne    f012c99c <test_krealloc_BF+0xdf0>
f012c981:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c987:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c98e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c994:	01 d0                	add    %edx,%eax
f012c996:	8a 00                	mov    (%eax),%al
f012c998:	3c 08                	cmp    $0x8,%al
f012c99a:	74 17                	je     f012c9b3 <test_krealloc_BF+0xe07>
			panic(
f012c99c:	83 ec 04             	sub    $0x4,%esp
f012c99f:	68 40 a4 13 f0       	push   $0xf013a440
f012c9a4:	68 da 11 00 00       	push   $0x11da
f012c9a9:	68 0e 91 13 f0       	push   $0xf013910e
f012c9ae:	e8 fd 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c9b3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9b9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c9bd:	66 83 f8 08          	cmp    $0x8,%ax
f012c9c1:	75 1f                	jne    f012c9e2 <test_krealloc_BF+0xe36>
f012c9c3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c9c9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9d0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9d6:	01 d0                	add    %edx,%eax
f012c9d8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c9dc:	66 83 f8 08          	cmp    $0x8,%ax
f012c9e0:	74 17                	je     f012c9f9 <test_krealloc_BF+0xe4d>
			panic(
f012c9e2:	83 ec 04             	sub    $0x4,%esp
f012c9e5:	68 40 a4 13 f0       	push   $0xf013a440
f012c9ea:	68 dd 11 00 00       	push   $0x11dd
f012c9ef:	68 0e 91 13 f0       	push   $0xf013910e
f012c9f4:	e8 b7 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c9f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9ff:	8b 40 04             	mov    0x4(%eax),%eax
f012ca02:	83 f8 08             	cmp    $0x8,%eax
f012ca05:	75 1d                	jne    f012ca24 <test_krealloc_BF+0xe78>
f012ca07:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca0d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca1a:	01 d0                	add    %edx,%eax
f012ca1c:	8b 40 04             	mov    0x4(%eax),%eax
f012ca1f:	83 f8 08             	cmp    $0x8,%eax
f012ca22:	74 17                	je     f012ca3b <test_krealloc_BF+0xe8f>
			panic(
f012ca24:	83 ec 04             	sub    $0x4,%esp
f012ca27:	68 40 a4 13 f0       	push   $0xf013a440
f012ca2c:	68 e0 11 00 00       	push   $0x11e0
f012ca31:	68 0e 91 13 f0       	push   $0xf013910e
f012ca36:	e8 75 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ca3b:	e8 40 ff fd ff       	call   f010c980 <sys_calculate_free_frames>
f012ca40:	89 c2                	mov    %eax,%edx
f012ca42:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ca45:	39 c2                	cmp    %eax,%edx
f012ca47:	74 17                	je     f012ca60 <test_krealloc_BF+0xeb4>
			panic(
f012ca49:	83 ec 04             	sub    $0x4,%esp
f012ca4c:	68 00 a5 13 f0       	push   $0xf013a500
f012ca51:	68 e4 11 00 00       	push   $0x11e4
f012ca56:	68 0e 91 13 f0       	push   $0xf013910e
f012ca5b:	e8 50 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ca60:	83 ec 0c             	sub    $0xc,%esp
f012ca63:	68 4c a5 13 f0       	push   $0xf013a54c
f012ca68:	e8 c4 43 fd ff       	call   f0100e31 <cprintf>
f012ca6d:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ca70:	e8 0b ff fd ff       	call   f010c980 <sys_calculate_free_frames>
f012ca75:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ca78:	e8 a9 7b fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ca7d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ca83:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012ca89:	83 ec 08             	sub    $0x8,%esp
f012ca8c:	6a 00                	push   $0x0
f012ca8e:	50                   	push   %eax
f012ca8f:	e8 23 b5 fd ff       	call   f0107fb7 <krealloc>
f012ca94:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ca97:	e8 8a 7b fd ff       	call   f0104626 <pf_calculate_free_frames>
f012ca9c:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012caa2:	74 17                	je     f012cabb <test_krealloc_BF+0xf0f>
			panic(
f012caa4:	83 ec 04             	sub    $0x4,%esp
f012caa7:	68 70 a5 13 f0       	push   $0xf013a570
f012caac:	68 f1 11 00 00       	push   $0x11f1
f012cab1:	68 0e 91 13 f0       	push   $0xf013910e
f012cab6:	e8 f5 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cabb:	e8 c0 fe fd ff       	call   f010c980 <sys_calculate_free_frames>
f012cac0:	89 c2                	mov    %eax,%edx
f012cac2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cac5:	29 c2                	sub    %eax,%edx
f012cac7:	89 d0                	mov    %edx,%eax
f012cac9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cace:	74 17                	je     f012cae7 <test_krealloc_BF+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012cad0:	83 ec 04             	sub    $0x4,%esp
f012cad3:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012cad8:	68 f3 11 00 00       	push   $0x11f3
f012cadd:	68 0e 91 13 f0       	push   $0xf013910e
f012cae2:	e8 c9 36 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012cae7:	e8 94 fe fd ff       	call   f010c980 <sys_calculate_free_frames>
f012caec:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012caef:	e8 32 7b fd ff       	call   f0104626 <pf_calculate_free_frames>
f012caf4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012cafa:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012cb00:	83 ec 08             	sub    $0x8,%esp
f012cb03:	6a 00                	push   $0x0
f012cb05:	50                   	push   %eax
f012cb06:	e8 ac b4 fd ff       	call   f0107fb7 <krealloc>
f012cb0b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cb0e:	e8 13 7b fd ff       	call   f0104626 <pf_calculate_free_frames>
f012cb13:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cb19:	74 17                	je     f012cb32 <test_krealloc_BF+0xf86>
			panic(
f012cb1b:	83 ec 04             	sub    $0x4,%esp
f012cb1e:	68 70 a5 13 f0       	push   $0xf013a570
f012cb23:	68 fc 11 00 00       	push   $0x11fc
f012cb28:	68 0e 91 13 f0       	push   $0xf013910e
f012cb2d:	e8 7e 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cb32:	e8 49 fe fd ff       	call   f010c980 <sys_calculate_free_frames>
f012cb37:	89 c2                	mov    %eax,%edx
f012cb39:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb3c:	29 c2                	sub    %eax,%edx
f012cb3e:	89 d0                	mov    %edx,%eax
f012cb40:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cb45:	74 17                	je     f012cb5e <test_krealloc_BF+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012cb47:	83 ec 04             	sub    $0x4,%esp
f012cb4a:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012cb4f:	68 fe 11 00 00       	push   $0x11fe
f012cb54:	68 0e 91 13 f0       	push   $0xf013910e
f012cb59:	e8 52 36 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012cb5e:	e8 1d fe fd ff       	call   f010c980 <sys_calculate_free_frames>
f012cb63:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cb66:	e8 bb 7a fd ff       	call   f0104626 <pf_calculate_free_frames>
f012cb6b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012cb71:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cb77:	83 ec 08             	sub    $0x8,%esp
f012cb7a:	6a 00                	push   $0x0
f012cb7c:	50                   	push   %eax
f012cb7d:	e8 35 b4 fd ff       	call   f0107fb7 <krealloc>
f012cb82:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cb85:	e8 9c 7a fd ff       	call   f0104626 <pf_calculate_free_frames>
f012cb8a:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cb90:	74 17                	je     f012cba9 <test_krealloc_BF+0xffd>
			panic(
f012cb92:	83 ec 04             	sub    $0x4,%esp
f012cb95:	68 28 91 13 f0       	push   $0xf0139128
f012cb9a:	68 06 12 00 00       	push   $0x1206
f012cb9f:	68 0e 91 13 f0       	push   $0xf013910e
f012cba4:	e8 07 36 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012cba9:	e8 d2 fd fd ff       	call   f010c980 <sys_calculate_free_frames>
f012cbae:	89 c2                	mov    %eax,%edx
f012cbb0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cbb3:	29 c2                	sub    %eax,%edx
f012cbb5:	89 d0                	mov    %edx,%eax
f012cbb7:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cbbc:	74 17                	je     f012cbd5 <test_krealloc_BF+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012cbbe:	83 ec 04             	sub    $0x4,%esp
f012cbc1:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012cbc6:	68 08 12 00 00       	push   $0x1208
f012cbcb:	68 0e 91 13 f0       	push   $0xf013910e
f012cbd0:	e8 db 35 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012cbd5:	e8 a6 fd fd ff       	call   f010c980 <sys_calculate_free_frames>
f012cbda:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cbdd:	e8 44 7a fd ff       	call   f0104626 <pf_calculate_free_frames>
f012cbe2:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012cbe8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012cbee:	83 ec 08             	sub    $0x8,%esp
f012cbf1:	6a 00                	push   $0x0
f012cbf3:	50                   	push   %eax
f012cbf4:	e8 be b3 fd ff       	call   f0107fb7 <krealloc>
f012cbf9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cbfc:	e8 25 7a fd ff       	call   f0104626 <pf_calculate_free_frames>
f012cc01:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cc07:	74 17                	je     f012cc20 <test_krealloc_BF+0x1074>
			panic(
f012cc09:	83 ec 04             	sub    $0x4,%esp
f012cc0c:	68 70 a5 13 f0       	push   $0xf013a570
f012cc11:	68 10 12 00 00       	push   $0x1210
f012cc16:	68 0e 91 13 f0       	push   $0xf013910e
f012cc1b:	e8 90 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012cc20:	e8 5b fd fd ff       	call   f010c980 <sys_calculate_free_frames>
f012cc25:	89 c2                	mov    %eax,%edx
f012cc27:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc2a:	29 c2                	sub    %eax,%edx
f012cc2c:	89 d0                	mov    %edx,%eax
f012cc2e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cc33:	74 17                	je     f012cc4c <test_krealloc_BF+0x10a0>
			panic(
f012cc35:	83 ec 04             	sub    $0x4,%esp
f012cc38:	68 18 a6 13 f0       	push   $0xf013a618
f012cc3d:	68 13 12 00 00       	push   $0x1213
f012cc42:	68 0e 91 13 f0       	push   $0xf013910e
f012cc47:	e8 64 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cc4c:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012cc53:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012cc5a:	eb 48                	jmp    f012cca4 <test_krealloc_BF+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012cc5c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012cc5f:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012cc64:	83 ec 04             	sub    $0x4,%esp
f012cc67:	8d 8d f4 fd ff ff    	lea    -0x20c(%ebp),%ecx
f012cc6d:	51                   	push   %ecx
f012cc6e:	52                   	push   %edx
f012cc6f:	50                   	push   %eax
f012cc70:	e8 14 a8 fd ff       	call   f0107489 <get_page_table>
f012cc75:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012cc78:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012cc7e:	85 c0                	test   %eax,%eax
f012cc80:	75 17                	jne    f012cc99 <test_krealloc_BF+0x10ed>
					panic(
f012cc82:	83 ec 04             	sub    $0x4,%esp
f012cc85:	68 10 9a 13 f0       	push   $0xf0139a10
f012cc8a:	68 1f 12 00 00       	push   $0x121f
f012cc8f:	68 0e 91 13 f0       	push   $0xf013910e
f012cc94:	e8 17 35 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cc99:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012cca0:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012cca4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cca8:	78 b2                	js     f012cc5c <test_krealloc_BF+0x10b0>
f012ccaa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ccae:	7f 09                	jg     f012ccb9 <test_krealloc_BF+0x110d>
f012ccb0:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012ccb7:	76 a3                	jbe    f012cc5c <test_krealloc_BF+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012ccb9:	83 ec 0c             	sub    $0xc,%esp
f012ccbc:	68 57 a6 13 f0       	push   $0xf013a657
f012ccc1:	e8 6b 41 fd ff       	call   f0100e31 <cprintf>
f012ccc6:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012ccc9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cccf:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ccd5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ccdc:	eb 21                	jmp    f012ccff <test_krealloc_BF+0x1153>
			sums[0] += ptr[i];
f012ccde:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012cce4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012cce7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cced:	01 c8                	add    %ecx,%eax
f012ccef:	8a 00                	mov    (%eax),%al
f012ccf1:	0f be c0             	movsbl %al,%eax
f012ccf4:	01 d0                	add    %edx,%eax
f012ccf6:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ccfc:	ff 45 dc             	incl   -0x24(%ebp)
f012ccff:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012cd05:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cd08:	7d d4                	jge    f012ccde <test_krealloc_BF+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cd0a:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012cd10:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012cd16:	42                   	inc    %edx
f012cd17:	01 d2                	add    %edx,%edx
f012cd19:	39 d0                	cmp    %edx,%eax
f012cd1b:	74 17                	je     f012cd34 <test_krealloc_BF+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012cd1d:	83 ec 04             	sub    $0x4,%esp
f012cd20:	68 60 a6 13 f0       	push   $0xf013a660
f012cd25:	68 31 12 00 00       	push   $0x1231
f012cd2a:	68 0e 91 13 f0       	push   $0xf013910e
f012cd2f:	e8 7c 34 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012cd34:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012cd3a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cd40:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cd47:	eb 25                	jmp    f012cd6e <test_krealloc_BF+0x11c2>
			sums[1] += intArr[i];
f012cd49:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012cd4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cd52:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012cd59:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cd5f:	01 c8                	add    %ecx,%eax
f012cd61:	8b 00                	mov    (%eax),%eax
f012cd63:	01 d0                	add    %edx,%eax
f012cd65:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cd6b:	ff 45 dc             	incl   -0x24(%ebp)
f012cd6e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012cd74:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cd77:	7d d0                	jge    f012cd49 <test_krealloc_BF+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012cd79:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012cd7f:	8b 95 54 fe ff ff    	mov    -0x1ac(%ebp),%edx
f012cd85:	42                   	inc    %edx
f012cd86:	c1 e2 02             	shl    $0x2,%edx
f012cd89:	39 d0                	cmp    %edx,%eax
f012cd8b:	74 17                	je     f012cda4 <test_krealloc_BF+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012cd8d:	83 ec 04             	sub    $0x4,%esp
f012cd90:	68 60 a6 13 f0       	push   $0xf013a660
f012cd95:	68 3b 12 00 00       	push   $0x123b
f012cd9a:	68 0e 91 13 f0       	push   $0xf013910e
f012cd9f:	e8 0c 34 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012cda4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cdaa:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cdb0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cdb7:	eb 24                	jmp    f012cddd <test_krealloc_BF+0x1231>
			sums[2] += shortArr[i];
f012cdb9:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012cdbf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cdc2:	01 c0                	add    %eax,%eax
f012cdc4:	89 c1                	mov    %eax,%ecx
f012cdc6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cdcc:	01 c8                	add    %ecx,%eax
f012cdce:	66 8b 00             	mov    (%eax),%ax
f012cdd1:	98                   	cwtl   
f012cdd2:	01 d0                	add    %edx,%eax
f012cdd4:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cdda:	ff 45 dc             	incl   -0x24(%ebp)
f012cddd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cde3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cde6:	7d d1                	jge    f012cdb9 <test_krealloc_BF+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012cde8:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012cdee:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cdf4:	8d 48 01             	lea    0x1(%eax),%ecx
f012cdf7:	89 c8                	mov    %ecx,%eax
f012cdf9:	c1 e0 02             	shl    $0x2,%eax
f012cdfc:	01 c8                	add    %ecx,%eax
f012cdfe:	39 c2                	cmp    %eax,%edx
f012ce00:	74 17                	je     f012ce19 <test_krealloc_BF+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012ce02:	83 ec 04             	sub    $0x4,%esp
f012ce05:	68 60 a6 13 f0       	push   $0xf013a660
f012ce0a:	68 45 12 00 00       	push   $0x1245
f012ce0f:	68 0e 91 13 f0       	push   $0xf013910e
f012ce14:	e8 97 33 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ce19:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ce1f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce25:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ce2c:	eb 70                	jmp    f012ce9e <test_krealloc_BF+0x12f2>
			sums[3] += structArr[i].a;
f012ce2e:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012ce34:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce37:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce3e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ce44:	01 c8                	add    %ecx,%eax
f012ce46:	8a 00                	mov    (%eax),%al
f012ce48:	0f be c0             	movsbl %al,%eax
f012ce4b:	01 d0                	add    %edx,%eax
f012ce4d:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
			sums[4] += structArr[i].b;
f012ce53:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ce59:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce5c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce63:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ce69:	01 c8                	add    %ecx,%eax
f012ce6b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ce6f:	98                   	cwtl   
f012ce70:	01 d0                	add    %edx,%eax
f012ce72:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[5] += structArr[i].c;
f012ce78:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012ce7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce81:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce88:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ce8e:	01 c8                	add    %ecx,%eax
f012ce90:	8b 40 04             	mov    0x4(%eax),%eax
f012ce93:	01 d0                	add    %edx,%eax
f012ce95:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce9b:	ff 45 dc             	incl   -0x24(%ebp)
f012ce9e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cea4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cea7:	7d 85                	jge    f012ce2e <test_krealloc_BF+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cea9:	8b 8d 04 fe ff ff    	mov    -0x1fc(%ebp),%ecx
f012ceaf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ceb5:	8d 50 01             	lea    0x1(%eax),%edx
f012ceb8:	89 d0                	mov    %edx,%eax
f012ceba:	01 c0                	add    %eax,%eax
f012cebc:	01 d0                	add    %edx,%eax
f012cebe:	01 c0                	add    %eax,%eax
f012cec0:	01 d0                	add    %edx,%eax
f012cec2:	39 c1                	cmp    %eax,%ecx
f012cec4:	75 3a                	jne    f012cf00 <test_krealloc_BF+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cec6:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012cecc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ced2:	8d 50 01             	lea    0x1(%eax),%edx
f012ced5:	89 d0                	mov    %edx,%eax
f012ced7:	01 c0                	add    %eax,%eax
f012ced9:	01 d0                	add    %edx,%eax
f012cedb:	01 c0                	add    %eax,%eax
f012cedd:	01 d0                	add    %edx,%eax
f012cedf:	39 c1                	cmp    %eax,%ecx
f012cee1:	75 1d                	jne    f012cf00 <test_krealloc_BF+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cee3:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012cee9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ceef:	8d 50 01             	lea    0x1(%eax),%edx
f012cef2:	89 d0                	mov    %edx,%eax
f012cef4:	01 c0                	add    %eax,%eax
f012cef6:	01 d0                	add    %edx,%eax
f012cef8:	01 c0                	add    %eax,%eax
f012cefa:	01 d0                	add    %edx,%eax
f012cefc:	39 c1                	cmp    %eax,%ecx
f012cefe:	74 17                	je     f012cf17 <test_krealloc_BF+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012cf00:	83 ec 04             	sub    $0x4,%esp
f012cf03:	68 60 a6 13 f0       	push   $0xf013a660
f012cf08:	68 53 12 00 00       	push   $0x1253
f012cf0d:	68 0e 91 13 f0       	push   $0xf013910e
f012cf12:	e8 99 32 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cf17:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012cf1e:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cf21:	e8 5a fa fd ff       	call   f010c980 <sys_calculate_free_frames>
f012cf26:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cf29:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cf2f:	83 ec 08             	sub    $0x8,%esp
f012cf32:	68 00 3c 00 00       	push   $0x3c00
f012cf37:	50                   	push   %eax
f012cf38:	e8 7a b0 fd ff       	call   f0107fb7 <krealloc>
f012cf3d:	83 c4 10             	add    $0x10,%esp
f012cf40:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf46:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cf4c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf51:	77 17                	ja     f012cf6a <test_krealloc_BF+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf53:	83 ec 04             	sub    $0x4,%esp
f012cf56:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012cf5b:	68 5f 12 00 00       	push   $0x125f
f012cf60:	68 0e 91 13 f0       	push   $0xf013910e
f012cf65:	e8 46 32 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012cf6a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cf70:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cf76:	74 17                	je     f012cf8f <test_krealloc_BF+0x13e3>
			panic(
f012cf78:	83 ec 04             	sub    $0x4,%esp
f012cf7b:	68 98 a6 13 f0       	push   $0xf013a698
f012cf80:	68 62 12 00 00       	push   $0x1262
f012cf85:	68 0e 91 13 f0       	push   $0xf013910e
f012cf8a:	e8 21 32 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cf8f:	e8 ec f9 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012cf94:	89 c2                	mov    %eax,%edx
f012cf96:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cf99:	39 c2                	cmp    %eax,%edx
f012cf9b:	74 17                	je     f012cfb4 <test_krealloc_BF+0x1408>
			panic(
f012cf9d:	83 ec 04             	sub    $0x4,%esp
f012cfa0:	68 04 a7 13 f0       	push   $0xf013a704
f012cfa5:	68 65 12 00 00       	push   $0x1265
f012cfaa:	68 0e 91 13 f0       	push   $0xf013910e
f012cfaf:	e8 fc 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cfb4:	e8 c7 f9 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012cfb9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012cfbc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cfc2:	83 ec 08             	sub    $0x8,%esp
f012cfc5:	68 00 fc 0f 00       	push   $0xffc00
f012cfca:	50                   	push   %eax
f012cfcb:	e8 e7 af fd ff       	call   f0107fb7 <krealloc>
f012cfd0:	83 c4 10             	add    $0x10,%esp
f012cfd3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cfd9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cfdf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cfe4:	77 17                	ja     f012cffd <test_krealloc_BF+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfe6:	83 ec 04             	sub    $0x4,%esp
f012cfe9:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012cfee:	68 6b 12 00 00       	push   $0x126b
f012cff3:	68 0e 91 13 f0       	push   $0xf013910e
f012cff8:	e8 b3 31 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012cffd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d003:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d009:	74 17                	je     f012d022 <test_krealloc_BF+0x1476>
			panic(
f012d00b:	83 ec 04             	sub    $0x4,%esp
f012d00e:	68 98 a6 13 f0       	push   $0xf013a698
f012d013:	68 6e 12 00 00       	push   $0x126e
f012d018:	68 0e 91 13 f0       	push   $0xf013910e
f012d01d:	e8 8e 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d022:	e8 59 f9 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d027:	89 c2                	mov    %eax,%edx
f012d029:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d02c:	39 c2                	cmp    %eax,%edx
f012d02e:	74 17                	je     f012d047 <test_krealloc_BF+0x149b>
			panic(
f012d030:	83 ec 04             	sub    $0x4,%esp
f012d033:	68 04 a7 13 f0       	push   $0xf013a704
f012d038:	68 71 12 00 00       	push   $0x1271
f012d03d:	68 0e 91 13 f0       	push   $0xf013910e
f012d042:	e8 69 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d047:	e8 34 f9 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d04c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d04f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d055:	83 ec 08             	sub    $0x8,%esp
f012d058:	68 00 fc 0f 00       	push   $0xffc00
f012d05d:	50                   	push   %eax
f012d05e:	e8 54 af fd ff       	call   f0107fb7 <krealloc>
f012d063:	83 c4 10             	add    $0x10,%esp
f012d066:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d06c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d072:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d077:	77 17                	ja     f012d090 <test_krealloc_BF+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d079:	83 ec 04             	sub    $0x4,%esp
f012d07c:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012d081:	68 77 12 00 00       	push   $0x1277
f012d086:	68 0e 91 13 f0       	push   $0xf013910e
f012d08b:	e8 20 31 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d090:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d096:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d09c:	74 17                	je     f012d0b5 <test_krealloc_BF+0x1509>
			panic(
f012d09e:	83 ec 04             	sub    $0x4,%esp
f012d0a1:	68 98 a6 13 f0       	push   $0xf013a698
f012d0a6:	68 7a 12 00 00       	push   $0x127a
f012d0ab:	68 0e 91 13 f0       	push   $0xf013910e
f012d0b0:	e8 fb 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d0b5:	e8 c6 f8 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d0ba:	89 c2                	mov    %eax,%edx
f012d0bc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d0bf:	39 c2                	cmp    %eax,%edx
f012d0c1:	74 17                	je     f012d0da <test_krealloc_BF+0x152e>
			panic(
f012d0c3:	83 ec 04             	sub    $0x4,%esp
f012d0c6:	68 04 a7 13 f0       	push   $0xf013a704
f012d0cb:	68 7d 12 00 00       	push   $0x127d
f012d0d0:	68 0e 91 13 f0       	push   $0xf013910e
f012d0d5:	e8 d6 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d0da:	e8 a1 f8 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d0df:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d0e2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d0e8:	83 ec 08             	sub    $0x8,%esp
f012d0eb:	68 00 fc 0f 00       	push   $0xffc00
f012d0f0:	50                   	push   %eax
f012d0f1:	e8 c1 ae fd ff       	call   f0107fb7 <krealloc>
f012d0f6:	83 c4 10             	add    $0x10,%esp
f012d0f9:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d0ff:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d105:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d10a:	77 17                	ja     f012d123 <test_krealloc_BF+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d10c:	83 ec 04             	sub    $0x4,%esp
f012d10f:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012d114:	68 85 12 00 00       	push   $0x1285
f012d119:	68 0e 91 13 f0       	push   $0xf013910e
f012d11e:	e8 8d 30 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012d123:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d129:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d12f:	74 17                	je     f012d148 <test_krealloc_BF+0x159c>
			panic(
f012d131:	83 ec 04             	sub    $0x4,%esp
f012d134:	68 48 a7 13 f0       	push   $0xf013a748
f012d139:	68 88 12 00 00       	push   $0x1288
f012d13e:	68 0e 91 13 f0       	push   $0xf013910e
f012d143:	e8 68 30 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d148:	e8 33 f8 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d14d:	89 c2                	mov    %eax,%edx
f012d14f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d152:	39 c2                	cmp    %eax,%edx
f012d154:	74 17                	je     f012d16d <test_krealloc_BF+0x15c1>
			panic(
f012d156:	83 ec 04             	sub    $0x4,%esp
f012d159:	68 04 a7 13 f0       	push   $0xf013a704
f012d15e:	68 8b 12 00 00       	push   $0x128b
f012d163:	68 0e 91 13 f0       	push   $0xf013910e
f012d168:	e8 43 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d16d:	83 ec 0c             	sub    $0xc,%esp
f012d170:	68 27 99 13 f0       	push   $0xf0139927
f012d175:	e8 b7 3c fd ff       	call   f0100e31 <cprintf>
f012d17a:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d17d:	e8 fe f7 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d182:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012d185:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d18b:	83 ec 08             	sub    $0x8,%esp
f012d18e:	68 00 18 10 00       	push   $0x101800
f012d193:	50                   	push   %eax
f012d194:	e8 1e ae fd ff       	call   f0107fb7 <krealloc>
f012d199:	83 c4 10             	add    $0x10,%esp
f012d19c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d19f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1a2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d1a7:	77 17                	ja     f012d1c0 <test_krealloc_BF+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1a9:	83 ec 04             	sub    $0x4,%esp
f012d1ac:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012d1b1:	68 93 12 00 00       	push   $0x1293
f012d1b6:	68 0e 91 13 f0       	push   $0xf013910e
f012d1bb:	e8 f0 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d1c0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d1c6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d1c9:	74 17                	je     f012d1e2 <test_krealloc_BF+0x1636>
			panic(
f012d1cb:	83 ec 04             	sub    $0x4,%esp
f012d1ce:	68 a8 a7 13 f0       	push   $0xf013a7a8
f012d1d3:	68 96 12 00 00       	push   $0x1296
f012d1d8:	68 0e 91 13 f0       	push   $0xf013910e
f012d1dd:	e8 ce 2f fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d1e2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d1e5:	e8 96 f7 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d1ea:	29 c3                	sub    %eax,%ebx
f012d1ec:	89 d8                	mov    %ebx,%eax
f012d1ee:	83 f8 02             	cmp    $0x2,%eax
f012d1f1:	74 17                	je     f012d20a <test_krealloc_BF+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d1f3:	83 ec 04             	sub    $0x4,%esp
f012d1f6:	68 24 a8 13 f0       	push   $0xf013a824
f012d1fb:	68 98 12 00 00       	push   $0x1298
f012d200:	68 0e 91 13 f0       	push   $0xf013910e
f012d205:	e8 a6 2f fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d20a:	e8 71 f7 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d20f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d212:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d218:	83 ec 08             	sub    $0x8,%esp
f012d21b:	68 00 fc 3f 00       	push   $0x3ffc00
f012d220:	50                   	push   %eax
f012d221:	e8 91 ad fd ff       	call   f0107fb7 <krealloc>
f012d226:	83 c4 10             	add    $0x10,%esp
f012d229:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d22c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d22f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d234:	77 17                	ja     f012d24d <test_krealloc_BF+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d236:	83 ec 04             	sub    $0x4,%esp
f012d239:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012d23e:	68 9e 12 00 00       	push   $0x129e
f012d243:	68 0e 91 13 f0       	push   $0xf013910e
f012d248:	e8 63 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d24d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d253:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d256:	74 17                	je     f012d26f <test_krealloc_BF+0x16c3>
			panic(
f012d258:	83 ec 04             	sub    $0x4,%esp
f012d25b:	68 a8 a7 13 f0       	push   $0xf013a7a8
f012d260:	68 a1 12 00 00       	push   $0x12a1
f012d265:	68 0e 91 13 f0       	push   $0xf013910e
f012d26a:	e8 41 2f fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d26f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d272:	e8 09 f7 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d277:	29 c3                	sub    %eax,%ebx
f012d279:	89 d8                	mov    %ebx,%eax
f012d27b:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d280:	74 17                	je     f012d299 <test_krealloc_BF+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012d282:	83 ec 04             	sub    $0x4,%esp
f012d285:	68 24 a8 13 f0       	push   $0xf013a824
f012d28a:	68 a4 12 00 00       	push   $0x12a4
f012d28f:	68 0e 91 13 f0       	push   $0xf013910e
f012d294:	e8 17 2f fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012d299:	83 ec 0c             	sub    $0xc,%esp
f012d29c:	68 6c 99 13 f0       	push   $0xf013996c
f012d2a1:	e8 8b 3b fd ff       	call   f0100e31 <cprintf>
f012d2a6:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d2a9:	e8 d2 f6 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d2ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d2b1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2b7:	83 ec 08             	sub    $0x8,%esp
f012d2ba:	68 00 fc 9f 00       	push   $0x9ffc00
f012d2bf:	50                   	push   %eax
f012d2c0:	e8 f2 ac fd ff       	call   f0107fb7 <krealloc>
f012d2c5:	83 c4 10             	add    $0x10,%esp
f012d2c8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d2cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d2ce:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d2d3:	77 17                	ja     f012d2ec <test_krealloc_BF+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2d5:	83 ec 04             	sub    $0x4,%esp
f012d2d8:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012d2dd:	68 af 12 00 00       	push   $0x12af
f012d2e2:	68 0e 91 13 f0       	push   $0xf013910e
f012d2e7:	e8 c4 2e fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012d2ec:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d2f3:	10 00 00 
f012d2f6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012d2fb:	0f b6 d0             	movzbl %al,%edx
f012d2fe:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d304:	01 d0                	add    %edx,%eax
f012d306:	48                   	dec    %eax
f012d307:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d30d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d313:	ba 00 00 00 00       	mov    $0x0,%edx
f012d318:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012d31e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d324:	29 d0                	sub    %edx,%eax
f012d326:	89 c1                	mov    %eax,%ecx
f012d328:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d32f:	10 00 00 
f012d332:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012d337:	0f b6 c0             	movzbl %al,%eax
f012d33a:	c1 e0 04             	shl    $0x4,%eax
f012d33d:	89 c2                	mov    %eax,%edx
f012d33f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012d345:	01 d0                	add    %edx,%eax
f012d347:	48                   	dec    %eax
f012d348:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012d34e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d354:	ba 00 00 00 00       	mov    $0x0,%edx
f012d359:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012d35f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d365:	29 d0                	sub    %edx,%eax
f012d367:	01 c8                	add    %ecx,%eax
f012d369:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012d36f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d372:	39 c2                	cmp    %eax,%edx
f012d374:	74 18                	je     f012d38e <test_krealloc_BF+0x17e2>
			panic(
f012d376:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d379:	50                   	push   %eax
f012d37a:	68 58 a8 13 f0       	push   $0xf013a858
f012d37f:	68 b3 12 00 00       	push   $0x12b3
f012d384:	68 0e 91 13 f0       	push   $0xf013910e
f012d389:	e8 22 2e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d38e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d394:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d397:	75 17                	jne    f012d3b0 <test_krealloc_BF+0x1804>
			panic(
f012d399:	83 ec 04             	sub    $0x4,%esp
f012d39c:	68 9c a8 13 f0       	push   $0xf013a89c
f012d3a1:	68 b6 12 00 00       	push   $0x12b6
f012d3a6:	68 0e 91 13 f0       	push   $0xf013910e
f012d3ab:	e8 00 2e fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d3b0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d3b3:	e8 c8 f5 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d3b8:	29 c3                	sub    %eax,%ebx
f012d3ba:	89 d8                	mov    %ebx,%eax
f012d3bc:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d3c1:	74 17                	je     f012d3da <test_krealloc_BF+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d3c3:	83 ec 04             	sub    $0x4,%esp
f012d3c6:	68 24 a8 13 f0       	push   $0xf013a824
f012d3cb:	68 b9 12 00 00       	push   $0x12b9
f012d3d0:	68 0e 91 13 f0       	push   $0xf013910e
f012d3d5:	e8 d6 2d fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012d3da:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3dd:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012d3e3:	e8 98 f5 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d3e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012d3eb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d3f1:	83 ec 08             	sub    $0x8,%esp
f012d3f4:	68 00 fc 3f 00       	push   $0x3ffc00
f012d3f9:	50                   	push   %eax
f012d3fa:	e8 b8 ab fd ff       	call   f0107fb7 <krealloc>
f012d3ff:	83 c4 10             	add    $0x10,%esp
f012d402:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d405:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d408:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d40d:	77 17                	ja     f012d426 <test_krealloc_BF+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d40f:	83 ec 04             	sub    $0x4,%esp
f012d412:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012d417:	68 c2 12 00 00       	push   $0x12c2
f012d41c:	68 0e 91 13 f0       	push   $0xf013910e
f012d421:	e8 8a 2d fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d426:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d42c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d42f:	75 17                	jne    f012d448 <test_krealloc_BF+0x189c>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d431:	83 ec 04             	sub    $0x4,%esp
f012d434:	68 9c a8 13 f0       	push   $0xf013a89c
f012d439:	68 c4 12 00 00       	push   $0x12c4
f012d43e:	68 0e 91 13 f0       	push   $0xf013910e
f012d443:	e8 68 2d fd ff       	call   f01001b0 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012d448:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d44f:	10 00 00 
f012d452:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012d457:	0f b6 d0             	movzbl %al,%edx
f012d45a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d460:	01 d0                	add    %edx,%eax
f012d462:	48                   	dec    %eax
f012d463:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d469:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d46f:	ba 00 00 00 00       	mov    $0x0,%edx
f012d474:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d47a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d480:	29 d0                	sub    %edx,%eax
f012d482:	89 c1                	mov    %eax,%ecx
f012d484:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d48b:	10 00 00 
f012d48e:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012d493:	0f b6 c0             	movzbl %al,%eax
f012d496:	c1 e0 04             	shl    $0x4,%eax
f012d499:	89 c2                	mov    %eax,%edx
f012d49b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d4a1:	01 d0                	add    %edx,%eax
f012d4a3:	48                   	dec    %eax
f012d4a4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d4aa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d4b0:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4b5:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d4bb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d4c1:	29 d0                	sub    %edx,%eax
f012d4c3:	01 c8                	add    %ecx,%eax
f012d4c5:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012d4cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d4ce:	39 c2                	cmp    %eax,%edx
f012d4d0:	74 17                	je     f012d4e9 <test_krealloc_BF+0x193d>
f012d4d2:	83 ec 04             	sub    $0x4,%esp
f012d4d5:	68 f0 a3 13 f0       	push   $0xf013a3f0
f012d4da:	68 c5 12 00 00       	push   $0x12c5
f012d4df:	68 0e 91 13 f0       	push   $0xf013910e
f012d4e4:	e8 c7 2c fd ff       	call   f01001b0 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012d4e9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d4ec:	e8 8f f4 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d4f1:	29 c3                	sub    %eax,%ebx
f012d4f3:	89 d8                	mov    %ebx,%eax
f012d4f5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d4fa:	74 17                	je     f012d513 <test_krealloc_BF+0x1967>
			panic("krealloc: pages in memory are not loaded correctly");
f012d4fc:	83 ec 04             	sub    $0x4,%esp
f012d4ff:	68 24 a8 13 f0       	push   $0xf013a824
f012d504:	68 c9 12 00 00       	push   $0x12c9
f012d509:	68 0e 91 13 f0       	push   $0xf013910e
f012d50e:	e8 9d 2c fd ff       	call   f01001b0 <_panic>
		ptr_allocations[6] = newAddress;
f012d513:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d516:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d51c:	e8 5f f4 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d521:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d524:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d52a:	83 ec 08             	sub    $0x8,%esp
f012d52d:	68 00 fc 3f 01       	push   $0x13ffc00
f012d532:	50                   	push   %eax
f012d533:	e8 7f aa fd ff       	call   f0107fb7 <krealloc>
f012d538:	83 c4 10             	add    $0x10,%esp
f012d53b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d53e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d541:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d546:	77 17                	ja     f012d55f <test_krealloc_BF+0x19b3>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d548:	83 ec 04             	sub    $0x4,%esp
f012d54b:	68 b4 a3 13 f0       	push   $0xf013a3b4
f012d550:	68 cf 12 00 00       	push   $0x12cf
f012d555:	68 0e 91 13 f0       	push   $0xf013910e
f012d55a:	e8 51 2c fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d55f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d565:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d568:	75 17                	jne    f012d581 <test_krealloc_BF+0x19d5>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d56a:	83 ec 04             	sub    $0x4,%esp
f012d56d:	68 9c a8 13 f0       	push   $0xf013a89c
f012d572:	68 d1 12 00 00       	push   $0x12d1
f012d577:	68 0e 91 13 f0       	push   $0xf013910e
f012d57c:	e8 2f 2c fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012d581:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012d588:	10 00 00 
f012d58b:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012d590:	0f b6 d0             	movzbl %al,%edx
f012d593:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012d599:	01 d0                	add    %edx,%eax
f012d59b:	48                   	dec    %eax
f012d59c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012d5a2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d5a8:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5ad:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012d5b3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d5b9:	29 d0                	sub    %edx,%eax
f012d5bb:	89 c1                	mov    %eax,%ecx
f012d5bd:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012d5c4:	10 00 00 
f012d5c7:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012d5cc:	0f b6 c0             	movzbl %al,%eax
f012d5cf:	c1 e0 04             	shl    $0x4,%eax
f012d5d2:	89 c2                	mov    %eax,%edx
f012d5d4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d5da:	01 d0                	add    %edx,%eax
f012d5dc:	48                   	dec    %eax
f012d5dd:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012d5e3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d5e9:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5ee:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012d5f4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d5fa:	29 d0                	sub    %edx,%eax
f012d5fc:	01 c8                	add    %ecx,%eax
f012d5fe:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012d604:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d607:	39 c2                	cmp    %eax,%edx
f012d609:	74 17                	je     f012d622 <test_krealloc_BF+0x1a76>
			panic("krealloc: Wrong start address for reallocated space\n");
f012d60b:	83 ec 04             	sub    $0x4,%esp
f012d60e:	68 bc a9 13 f0       	push   $0xf013a9bc
f012d613:	68 d3 12 00 00       	push   $0x12d3
f012d618:	68 0e 91 13 f0       	push   $0xf013910e
f012d61d:	e8 8e 2b fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012d622:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d625:	e8 56 f3 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d62a:	29 c3                	sub    %eax,%ebx
f012d62c:	89 d8                	mov    %ebx,%eax
f012d62e:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012d633:	74 17                	je     f012d64c <test_krealloc_BF+0x1aa0>
			panic("krealloc: pages in memory are not loaded correctly");
f012d635:	83 ec 04             	sub    $0x4,%esp
f012d638:	68 24 a8 13 f0       	push   $0xf013a824
f012d63d:	68 d6 12 00 00       	push   $0x12d6
f012d642:	68 0e 91 13 f0       	push   $0xf013910e
f012d647:	e8 64 2b fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012d64c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d64f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d655:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d65b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012d661:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d668:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d66b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d672:	eb 21                	jmp    f012d695 <test_krealloc_BF+0x1ae9>
			sums[0] += ptr[i];
f012d674:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d67a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d67d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d683:	01 c8                	add    %ecx,%eax
f012d685:	8a 00                	mov    (%eax),%al
f012d687:	0f be c0             	movsbl %al,%eax
f012d68a:	01 d0                	add    %edx,%eax
f012d68c:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d692:	ff 45 d8             	incl   -0x28(%ebp)
f012d695:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d69b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d69e:	7d d4                	jge    f012d674 <test_krealloc_BF+0x1ac8>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d6a0:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d6a6:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d6ac:	42                   	inc    %edx
f012d6ad:	01 d2                	add    %edx,%edx
f012d6af:	39 d0                	cmp    %edx,%eax
f012d6b1:	74 17                	je     f012d6ca <test_krealloc_BF+0x1b1e>
			panic("krealloc: invalid read after re-allocations");
f012d6b3:	83 ec 04             	sub    $0x4,%esp
f012d6b6:	68 54 a9 13 f0       	push   $0xf013a954
f012d6bb:	68 e4 12 00 00       	push   $0x12e4
f012d6c0:	68 0e 91 13 f0       	push   $0xf013910e
f012d6c5:	e8 e6 2a fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d6ca:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d6d0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012d6d6:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d6dd:	00 00 00 
		sums[1] = 0;
f012d6e0:	c7 85 fc fd ff ff 00 	movl   $0x0,-0x204(%ebp)
f012d6e7:	00 00 00 
		sums[2] = 0;
f012d6ea:	c7 85 00 fe ff ff 00 	movl   $0x0,-0x200(%ebp)
f012d6f1:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d6f4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d6fb:	eb 70                	jmp    f012d76d <test_krealloc_BF+0x1bc1>
			sums[0] += structArr[i].a;
f012d6fd:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d703:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d706:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d70d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d713:	01 c8                	add    %ecx,%eax
f012d715:	8a 00                	mov    (%eax),%al
f012d717:	0f be c0             	movsbl %al,%eax
f012d71a:	01 d0                	add    %edx,%eax
f012d71c:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			sums[1] += structArr[i].b;
f012d722:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012d728:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d72b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d732:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d738:	01 c8                	add    %ecx,%eax
f012d73a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d73e:	98                   	cwtl   
f012d73f:	01 d0                	add    %edx,%eax
f012d741:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			sums[2] += structArr[i].c;
f012d747:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d74d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d750:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d757:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d75d:	01 c8                	add    %ecx,%eax
f012d75f:	8b 40 04             	mov    0x4(%eax),%eax
f012d762:	01 d0                	add    %edx,%eax
f012d764:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d76a:	ff 45 d8             	incl   -0x28(%ebp)
f012d76d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d773:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d776:	7d 85                	jge    f012d6fd <test_krealloc_BF+0x1b51>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d778:	8b 8d f8 fd ff ff    	mov    -0x208(%ebp),%ecx
f012d77e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d784:	8d 50 01             	lea    0x1(%eax),%edx
f012d787:	89 d0                	mov    %edx,%eax
f012d789:	01 c0                	add    %eax,%eax
f012d78b:	01 d0                	add    %edx,%eax
f012d78d:	01 c0                	add    %eax,%eax
f012d78f:	01 d0                	add    %edx,%eax
f012d791:	39 c1                	cmp    %eax,%ecx
f012d793:	75 3a                	jne    f012d7cf <test_krealloc_BF+0x1c23>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d795:	8b 8d fc fd ff ff    	mov    -0x204(%ebp),%ecx
f012d79b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d7a1:	8d 50 01             	lea    0x1(%eax),%edx
f012d7a4:	89 d0                	mov    %edx,%eax
f012d7a6:	01 c0                	add    %eax,%eax
f012d7a8:	01 d0                	add    %edx,%eax
f012d7aa:	01 c0                	add    %eax,%eax
f012d7ac:	01 d0                	add    %edx,%eax
f012d7ae:	39 c1                	cmp    %eax,%ecx
f012d7b0:	75 1d                	jne    f012d7cf <test_krealloc_BF+0x1c23>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d7b2:	8b 8d 00 fe ff ff    	mov    -0x200(%ebp),%ecx
f012d7b8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d7be:	8d 50 01             	lea    0x1(%eax),%edx
f012d7c1:	89 d0                	mov    %edx,%eax
f012d7c3:	01 c0                	add    %eax,%eax
f012d7c5:	01 d0                	add    %edx,%eax
f012d7c7:	01 c0                	add    %eax,%eax
f012d7c9:	01 d0                	add    %edx,%eax
f012d7cb:	39 c1                	cmp    %eax,%ecx
f012d7cd:	74 17                	je     f012d7e6 <test_krealloc_BF+0x1c3a>
			panic("krealloc: invalid read after re-allocations");
f012d7cf:	83 ec 04             	sub    $0x4,%esp
f012d7d2:	68 54 a9 13 f0       	push   $0xf013a954
f012d7d7:	68 f6 12 00 00       	push   $0x12f6
f012d7dc:	68 0e 91 13 f0       	push   $0xf013910e
f012d7e1:	e8 ca 29 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d7e6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d7ec:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012d7f2:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d7f9:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d7fc:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d803:	eb 24                	jmp    f012d829 <test_krealloc_BF+0x1c7d>
			sums[0] += shortArr[i];
f012d805:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d80b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d80e:	01 c0                	add    %eax,%eax
f012d810:	89 c1                	mov    %eax,%ecx
f012d812:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d818:	01 c8                	add    %ecx,%eax
f012d81a:	66 8b 00             	mov    (%eax),%ax
f012d81d:	98                   	cwtl   
f012d81e:	01 d0                	add    %edx,%eax
f012d820:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d826:	ff 45 d8             	incl   -0x28(%ebp)
f012d829:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d82f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d832:	7d d1                	jge    f012d805 <test_krealloc_BF+0x1c59>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d834:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d83a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d840:	8d 48 01             	lea    0x1(%eax),%ecx
f012d843:	89 c8                	mov    %ecx,%eax
f012d845:	c1 e0 02             	shl    $0x2,%eax
f012d848:	01 c8                	add    %ecx,%eax
f012d84a:	39 c2                	cmp    %eax,%edx
f012d84c:	74 17                	je     f012d865 <test_krealloc_BF+0x1cb9>
			panic("krealloc: invalid read after re-allocations");
f012d84e:	83 ec 04             	sub    $0x4,%esp
f012d851:	68 54 a9 13 f0       	push   $0xf013a954
f012d856:	68 00 13 00 00       	push   $0x1300
f012d85b:	68 0e 91 13 f0       	push   $0xf013910e
f012d860:	e8 4b 29 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d865:	e8 16 f1 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d86a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d86d:	e8 b4 6d fd ff       	call   f0104626 <pf_calculate_free_frames>
f012d872:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d878:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d87e:	83 ec 08             	sub    $0x8,%esp
f012d881:	6a 00                	push   $0x0
f012d883:	50                   	push   %eax
f012d884:	e8 2e a7 fd ff       	call   f0107fb7 <krealloc>
f012d889:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d88c:	e8 95 6d fd ff       	call   f0104626 <pf_calculate_free_frames>
f012d891:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d897:	74 17                	je     f012d8b0 <test_krealloc_BF+0x1d04>
			panic(
f012d899:	83 ec 04             	sub    $0x4,%esp
f012d89c:	68 28 91 13 f0       	push   $0xf0139128
f012d8a1:	68 08 13 00 00       	push   $0x1308
f012d8a6:	68 0e 91 13 f0       	push   $0xf013910e
f012d8ab:	e8 00 29 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d8b0:	e8 cb f0 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d8b5:	89 c2                	mov    %eax,%edx
f012d8b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d8ba:	29 c2                	sub    %eax,%edx
f012d8bc:	89 d0                	mov    %edx,%eax
f012d8be:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d8c3:	74 17                	je     f012d8dc <test_krealloc_BF+0x1d30>
			panic("krealloc: pages in memory are not freed correctly");
f012d8c5:	83 ec 04             	sub    $0x4,%esp
f012d8c8:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012d8cd:	68 0a 13 00 00       	push   $0x130a
f012d8d2:	68 0e 91 13 f0       	push   $0xf013910e
f012d8d7:	e8 d4 28 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d8dc:	e8 9f f0 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d8e1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d8e4:	e8 3d 6d fd ff       	call   f0104626 <pf_calculate_free_frames>
f012d8e9:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012d8ef:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d8f5:	83 ec 0c             	sub    $0xc,%esp
f012d8f8:	50                   	push   %eax
f012d8f9:	e8 1d a6 fd ff       	call   f0107f1b <kfree>
f012d8fe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d901:	e8 20 6d fd ff       	call   f0104626 <pf_calculate_free_frames>
f012d906:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d90c:	74 17                	je     f012d925 <test_krealloc_BF+0x1d79>
			panic(
f012d90e:	83 ec 04             	sub    $0x4,%esp
f012d911:	68 28 91 13 f0       	push   $0xf0139128
f012d916:	68 12 13 00 00       	push   $0x1312
f012d91b:	68 0e 91 13 f0       	push   $0xf013910e
f012d920:	e8 8b 28 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d925:	e8 56 f0 fd ff       	call   f010c980 <sys_calculate_free_frames>
f012d92a:	89 c2                	mov    %eax,%edx
f012d92c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d92f:	29 c2                	sub    %eax,%edx
f012d931:	89 d0                	mov    %edx,%eax
f012d933:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d938:	74 17                	je     f012d951 <test_krealloc_BF+0x1da5>
			panic("krealloc: pages in memory are not freed correctly");
f012d93a:	83 ec 04             	sub    $0x4,%esp
f012d93d:	68 e4 a5 13 f0       	push   $0xf013a5e4
f012d942:	68 14 13 00 00       	push   $0x1314
f012d947:	68 0e 91 13 f0       	push   $0xf013910e
f012d94c:	e8 5f 28 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d951:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d958:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d95f:	eb 48                	jmp    f012d9a9 <test_krealloc_BF+0x1dfd>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d961:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d964:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012d969:	83 ec 04             	sub    $0x4,%esp
f012d96c:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
f012d972:	51                   	push   %ecx
f012d973:	52                   	push   %edx
f012d974:	50                   	push   %eax
f012d975:	e8 0f 9b fd ff       	call   f0107489 <get_page_table>
f012d97a:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d97d:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012d983:	85 c0                	test   %eax,%eax
f012d985:	75 17                	jne    f012d99e <test_krealloc_BF+0x1df2>
					panic(
f012d987:	83 ec 04             	sub    $0x4,%esp
f012d98a:	68 10 9a 13 f0       	push   $0xf0139a10
f012d98f:	68 21 13 00 00       	push   $0x1321
f012d994:	68 0e 91 13 f0       	push   $0xf013910e
f012d999:	e8 12 28 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d99e:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d9a5:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d9a9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d9ad:	78 b2                	js     f012d961 <test_krealloc_BF+0x1db5>
f012d9af:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d9b3:	7f 09                	jg     f012d9be <test_krealloc_BF+0x1e12>
f012d9b5:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d9bc:	76 a3                	jbe    f012d961 <test_krealloc_BF+0x1db5>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d9be:	83 ec 0c             	sub    $0xc,%esp
f012d9c1:	68 f2 92 13 f0       	push   $0xf01392f2
f012d9c6:	e8 66 34 fd ff       	call   f0100e31 <cprintf>
f012d9cb:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012d9ce:	83 ec 0c             	sub    $0xc,%esp
f012d9d1:	68 f4 a9 13 f0       	push   $0xf013a9f4
f012d9d6:	e8 56 34 fd ff       	call   f0100e31 <cprintf>
f012d9db:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d9de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d9e3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d9e6:	5b                   	pop    %ebx
f012d9e7:	5f                   	pop    %edi
f012d9e8:	5d                   	pop    %ebp
f012d9e9:	c3                   	ret    

f012d9ea <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012d9ea:	55                   	push   %ebp
f012d9eb:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
*/	return 0;
f012d9ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d9f2:	5d                   	pop    %ebp
f012d9f3:	c3                   	ret    

f012d9f4 <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012d9f4:	55                   	push   %ebp
f012d9f5:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f012d9f7:	c7 05 14 2b 25 f0 00 	movl   $0x0,0xf0252b14
f012d9fe:	00 00 00 
}
f012da01:	90                   	nop
f012da02:	5d                   	pop    %ebp
f012da03:	c3                   	ret    

f012da04 <inctst>:
void inctst()
{
f012da04:	55                   	push   %ebp
f012da05:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f012da07:	a1 14 2b 25 f0       	mov    0xf0252b14,%eax
f012da0c:	40                   	inc    %eax
f012da0d:	a3 14 2b 25 f0       	mov    %eax,0xf0252b14
}
f012da12:	90                   	nop
f012da13:	5d                   	pop    %ebp
f012da14:	c3                   	ret    

f012da15 <gettst>:
uint32 gettst()
{
f012da15:	55                   	push   %ebp
f012da16:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f012da18:	a1 14 2b 25 f0       	mov    0xf0252b14,%eax
}
f012da1d:	5d                   	pop    %ebp
f012da1e:	c3                   	ret    

f012da1f <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012da1f:	55                   	push   %ebp
f012da20:	89 e5                	mov    %esp,%ebp
f012da22:	83 ec 28             	sub    $0x28,%esp
f012da25:	8b 45 14             	mov    0x14(%ebp),%eax
f012da28:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012da2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012da32:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f012da36:	83 f8 65             	cmp    $0x65,%eax
f012da39:	74 5d                	je     f012da98 <tst+0x79>
f012da3b:	83 f8 65             	cmp    $0x65,%eax
f012da3e:	7f 0a                	jg     f012da4a <tst+0x2b>
f012da40:	83 f8 62             	cmp    $0x62,%eax
f012da43:	74 73                	je     f012dab8 <tst+0x99>
f012da45:	e9 91 00 00 00       	jmp    f012dadb <tst+0xbc>
f012da4a:	83 f8 67             	cmp    $0x67,%eax
f012da4d:	74 29                	je     f012da78 <tst+0x59>
f012da4f:	83 f8 6c             	cmp    $0x6c,%eax
f012da52:	0f 85 83 00 00 00    	jne    f012dadb <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012da58:	8b 45 08             	mov    0x8(%ebp),%eax
f012da5b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012da5e:	73 09                	jae    f012da69 <tst+0x4a>
			chk = 1;
f012da60:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012da67:	eb 68                	jmp    f012dad1 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012da69:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012da6d:	74 62                	je     f012dad1 <tst+0xb2>
			chk = 1;
f012da6f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012da76:	eb 59                	jmp    f012dad1 <tst+0xb2>
	case 'g':
		if (n > v1)
f012da78:	8b 45 08             	mov    0x8(%ebp),%eax
f012da7b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012da7e:	76 09                	jbe    f012da89 <tst+0x6a>
			chk = 1;
f012da80:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012da87:	eb 4b                	jmp    f012dad4 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012da89:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012da8d:	74 45                	je     f012dad4 <tst+0xb5>
			chk = 1;
f012da8f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012da96:	eb 3c                	jmp    f012dad4 <tst+0xb5>
	case 'e':
		if (n == v1)
f012da98:	8b 45 08             	mov    0x8(%ebp),%eax
f012da9b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012da9e:	75 09                	jne    f012daa9 <tst+0x8a>
			chk = 1;
f012daa0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012daa7:	eb 2e                	jmp    f012dad7 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012daa9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012daad:	74 28                	je     f012dad7 <tst+0xb8>
			chk = 1;
f012daaf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dab6:	eb 1f                	jmp    f012dad7 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012dab8:	8b 45 08             	mov    0x8(%ebp),%eax
f012dabb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dabe:	72 1a                	jb     f012dada <tst+0xbb>
f012dac0:	8b 45 08             	mov    0x8(%ebp),%eax
f012dac3:	3b 45 10             	cmp    0x10(%ebp),%eax
f012dac6:	77 12                	ja     f012dada <tst+0xbb>
			chk = 1;
f012dac8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dacf:	eb 09                	jmp    f012dada <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012dad1:	90                   	nop
f012dad2:	eb 07                	jmp    f012dadb <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012dad4:	90                   	nop
f012dad5:	eb 04                	jmp    f012dadb <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012dad7:	90                   	nop
f012dad8:	eb 01                	jmp    f012dadb <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012dada:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f012dadb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012dadf:	75 14                	jne    f012daf5 <tst+0xd6>
f012dae1:	83 ec 04             	sub    $0x4,%esp
f012dae4:	68 34 aa 13 f0       	push   $0xf013aa34
f012dae9:	6a 3c                	push   $0x3c
f012daeb:	68 47 aa 13 f0       	push   $0xf013aa47
f012daf0:	e8 bb 26 fd ff       	call   f01001b0 <_panic>
	tstcnt++ ;
f012daf5:	a1 14 2b 25 f0       	mov    0xf0252b14,%eax
f012dafa:	40                   	inc    %eax
f012dafb:	a3 14 2b 25 f0       	mov    %eax,0xf0252b14
	return;
f012db00:	90                   	nop
}
f012db01:	c9                   	leave  
f012db02:	c3                   	ret    

f012db03 <chktst>:

void chktst(uint32 n)
{
f012db03:	55                   	push   %ebp
f012db04:	89 e5                	mov    %esp,%ebp
f012db06:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f012db09:	a1 14 2b 25 f0       	mov    0xf0252b14,%eax
f012db0e:	3b 45 08             	cmp    0x8(%ebp),%eax
f012db11:	75 12                	jne    f012db25 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012db13:	83 ec 0c             	sub    $0xc,%esp
f012db16:	68 60 aa 13 f0       	push   $0xf013aa60
f012db1b:	e8 11 33 fd ff       	call   f0100e31 <cprintf>
f012db20:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012db23:	eb 14                	jmp    f012db39 <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f012db25:	83 ec 04             	sub    $0x4,%esp
f012db28:	68 8c aa 13 f0       	push   $0xf013aa8c
f012db2d:	6a 46                	push   $0x46
f012db2f:	68 47 aa 13 f0       	push   $0xf013aa47
f012db34:	e8 77 26 fd ff       	call   f01001b0 <_panic>
}
f012db39:	c9                   	leave  
f012db3a:	c3                   	ret    

f012db3b <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012db3b:	55                   	push   %ebp
f012db3c:	89 e5                	mov    %esp,%ebp
f012db3e:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012db41:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012db45:	77 07                	ja     f012db4e <nearest_pow2_ceil+0x13>
f012db47:	b8 01 00 00 00       	mov    $0x1,%eax
f012db4c:	eb 20                	jmp    f012db6e <nearest_pow2_ceil+0x33>
    int power = 2;
f012db4e:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012db55:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012db58:	eb 08                	jmp    f012db62 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012db5a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012db5d:	01 c0                	add    %eax,%eax
f012db5f:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012db62:	d1 6d 08             	shrl   0x8(%ebp)
f012db65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012db69:	75 ef                	jne    f012db5a <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012db6b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012db6e:	c9                   	leave  
f012db6f:	c3                   	ret    

f012db70 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012db70:	55                   	push   %ebp
f012db71:	89 e5                	mov    %esp,%ebp
f012db73:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012db76:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012db7a:	77 07                	ja     f012db83 <log2_ceil+0x13>
f012db7c:	b8 01 00 00 00       	mov    $0x1,%eax
f012db81:	eb 1b                	jmp    f012db9e <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012db83:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012db8a:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012db8d:	eb 03                	jmp    f012db92 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012db8f:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012db92:	d1 6d 08             	shrl   0x8(%ebp)
f012db95:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012db99:	75 f4                	jne    f012db8f <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012db9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012db9e:	c9                   	leave  
f012db9f:	c3                   	ret    

f012dba0 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012dba0:	55                   	push   %ebp
f012dba1:	89 e5                	mov    %esp,%ebp
f012dba3:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012dba6:	8b 45 08             	mov    0x8(%ebp),%eax
f012dba9:	8b 00                	mov    (%eax),%eax
f012dbab:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012dbae:	8b 45 08             	mov    0x8(%ebp),%eax
f012dbb1:	8b 00                	mov    (%eax),%eax
f012dbb3:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012dbb6:	eb 52                	jmp    f012dc0a <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012dbb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dbbb:	8b 00                	mov    (%eax),%eax
f012dbbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012dbc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dbc3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dbc6:	75 12                	jne    f012dbda <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012dbc8:	83 ec 0c             	sub    $0xc,%esp
f012dbcb:	68 a8 aa 13 f0       	push   $0xf013aaa8
f012dbd0:	e8 5c 32 fd ff       	call   f0100e31 <cprintf>
f012dbd5:	83 c4 10             	add    $0x10,%esp
			break;
f012dbd8:	eb 3f                	jmp    f012dc19 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012dbda:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012dbde:	74 38                	je     f012dc18 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012dbe0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dbe3:	8b 00                	mov    (%eax),%eax
f012dbe5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012dbe8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dbeb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dbee:	75 12                	jne    f012dc02 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012dbf0:	83 ec 0c             	sub    $0xc,%esp
f012dbf3:	68 c4 aa 13 f0       	push   $0xf013aac4
f012dbf8:	e8 34 32 fd ff       	call   f0100e31 <cprintf>
f012dbfd:	83 c4 10             	add    $0x10,%esp
			break;
f012dc00:	eb 17                	jmp    f012dc19 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012dc02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc05:	8b 00                	mov    (%eax),%eax
f012dc07:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012dc0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012dc0e:	74 09                	je     f012dc19 <detect_loop_in_FrameInfo_list+0x79>
f012dc10:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012dc14:	75 a2                	jne    f012dbb8 <detect_loop_in_FrameInfo_list+0x18>
f012dc16:	eb 01                	jmp    f012dc19 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012dc18:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012dc19:	83 ec 0c             	sub    $0xc,%esp
f012dc1c:	68 db aa 13 f0       	push   $0xf013aadb
f012dc21:	e8 0b 32 fd ff       	call   f0100e31 <cprintf>
f012dc26:	83 c4 10             	add    $0x10,%esp
}
f012dc29:	90                   	nop
f012dc2a:	c9                   	leave  
f012dc2b:	c3                   	ret    

f012dc2c <scarce_memory>:

void scarce_memory()
{
f012dc2c:	55                   	push   %ebp
f012dc2d:	89 e5                	mov    %esp,%ebp
f012dc2f:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012dc32:	a1 80 8a 2b f0       	mov    0xf02b8a80,%eax
f012dc37:	ba 64 00 00 00       	mov    $0x64,%edx
f012dc3c:	29 c2                	sub    %eax,%edx
f012dc3e:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f012dc43:	0f af c2             	imul   %edx,%eax
f012dc46:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012dc4b:	f7 e2                	mul    %edx
f012dc4d:	89 d0                	mov    %edx,%eax
f012dc4f:	c1 e8 05             	shr    $0x5,%eax
f012dc52:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012dc55:	a1 80 8a 2b f0       	mov    0xf02b8a80,%eax
f012dc5a:	ba 64 00 00 00       	mov    $0x64,%edx
f012dc5f:	29 c2                	sub    %eax,%edx
f012dc61:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f012dc66:	89 d1                	mov    %edx,%ecx
f012dc68:	0f af c8             	imul   %eax,%ecx
f012dc6b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dc70:	f7 e1                	mul    %ecx
f012dc72:	c1 ea 05             	shr    $0x5,%edx
f012dc75:	89 d0                	mov    %edx,%eax
f012dc77:	c1 e0 02             	shl    $0x2,%eax
f012dc7a:	01 d0                	add    %edx,%eax
f012dc7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dc83:	01 d0                	add    %edx,%eax
f012dc85:	c1 e0 02             	shl    $0x2,%eax
f012dc88:	29 c1                	sub    %eax,%ecx
f012dc8a:	89 ca                	mov    %ecx,%edx
f012dc8c:	85 d2                	test   %edx,%edx
f012dc8e:	74 03                	je     f012dc93 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012dc90:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012dc93:	8b 15 90 ae 2b f0    	mov    0xf02bae90,%edx
f012dc99:	a1 a4 ae 2b f0       	mov    0xf02baea4,%eax
f012dc9e:	29 c2                	sub    %eax,%edx
f012dca0:	89 d0                	mov    %edx,%eax
f012dca2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012dca5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dca8:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012dcab:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012dcae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dcb5:	eb 12                	jmp    f012dcc9 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012dcb7:	83 ec 0c             	sub    $0xc,%esp
f012dcba:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012dcbd:	50                   	push   %eax
f012dcbe:	e8 04 96 fd ff       	call   f01072c7 <allocate_frame>
f012dcc3:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dcc6:	ff 45 f0             	incl   -0x10(%ebp)
f012dcc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dccc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012dccf:	76 e6                	jbe    f012dcb7 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012dcd1:	90                   	nop
f012dcd2:	c9                   	leave  
f012dcd3:	c3                   	ret    

f012dcd4 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012dcd4:	55                   	push   %ebp
f012dcd5:	89 e5                	mov    %esp,%ebp
f012dcd7:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012dcda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012dce1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012dce8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012dcef:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dcf3:	0f 85 d3 01 00 00    	jne    f012decc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012dcf9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012dd00:	e9 e1 00 00 00       	jmp    f012dde6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012dd05:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012dd0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd0f:	c1 e0 04             	shl    $0x4,%eax
f012dd12:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f012dd17:	8b 00                	mov    (%eax),%eax
f012dd19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012dd1c:	e9 82 00 00 00       	jmp    f012dda3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012dd21:	83 ec 0c             	sub    $0xc,%esp
f012dd24:	ff 75 e4             	pushl  -0x1c(%ebp)
f012dd27:	e8 cb a4 fd ff       	call   f01081f7 <env_page_ws_get_size>
f012dd2c:	83 c4 10             	add    $0x10,%esp
f012dd2f:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012dd32:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012dd37:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012dd3d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012dd40:	0f af c2             	imul   %edx,%eax
f012dd43:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012dd48:	f7 e2                	mul    %edx
f012dd4a:	89 d0                	mov    %edx,%eax
f012dd4c:	c1 e8 05             	shr    $0x5,%eax
f012dd4f:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012dd52:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012dd57:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012dd5d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012dd60:	89 d1                	mov    %edx,%ecx
f012dd62:	0f af c8             	imul   %eax,%ecx
f012dd65:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dd6a:	f7 e1                	mul    %ecx
f012dd6c:	c1 ea 05             	shr    $0x5,%edx
f012dd6f:	89 d0                	mov    %edx,%eax
f012dd71:	c1 e0 02             	shl    $0x2,%eax
f012dd74:	01 d0                	add    %edx,%eax
f012dd76:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dd7d:	01 d0                	add    %edx,%eax
f012dd7f:	c1 e0 02             	shl    $0x2,%eax
f012dd82:	29 c1                	sub    %eax,%ecx
f012dd84:	89 ca                	mov    %ecx,%edx
f012dd86:	85 d2                	test   %edx,%edx
f012dd88:	74 03                	je     f012dd8d <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012dd8a:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012dd8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012dd90:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012dd93:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd96:	c1 e0 04             	shl    $0x4,%eax
f012dd99:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f012dd9e:	8b 00                	mov    (%eax),%eax
f012dda0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012dda3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012dda7:	74 08                	je     f012ddb1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012dda9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012ddac:	8b 40 44             	mov    0x44(%eax),%eax
f012ddaf:	eb 05                	jmp    f012ddb6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012ddb1:	b8 00 00 00 00       	mov    $0x0,%eax
f012ddb6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012ddb9:	c1 e2 04             	shl    $0x4,%edx
f012ddbc:	81 c2 28 2b 25 f0    	add    $0xf0252b28,%edx
f012ddc2:	89 02                	mov    %eax,(%edx)
f012ddc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ddc7:	c1 e0 04             	shl    $0x4,%eax
f012ddca:	05 28 2b 25 f0       	add    $0xf0252b28,%eax
f012ddcf:	8b 00                	mov    (%eax),%eax
f012ddd1:	85 c0                	test   %eax,%eax
f012ddd3:	0f 85 48 ff ff ff    	jne    f012dd21 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012ddd9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012dddd:	0f 85 3e ff ff ff    	jne    f012dd21 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012dde3:	ff 45 e8             	incl   -0x18(%ebp)
f012dde6:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012ddeb:	0f b6 c0             	movzbl %al,%eax
f012ddee:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ddf1:	0f 8f 0e ff ff ff    	jg     f012dd05 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012ddf7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012ddfe:	a1 84 8a 2b f0       	mov    0xf02b8a84,%eax
f012de03:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012de06:	eb 19                	jmp    f012de21 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012de08:	83 ec 0c             	sub    $0xc,%esp
f012de0b:	ff 75 dc             	pushl  -0x24(%ebp)
f012de0e:	e8 e4 a3 fd ff       	call   f01081f7 <env_page_ws_get_size>
f012de13:	83 c4 10             	add    $0x10,%esp
f012de16:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012de19:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f012de1e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012de21:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012de25:	74 08                	je     f012de2f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012de27:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012de2a:	8b 40 44             	mov    0x44(%eax),%eax
f012de2d:	eb 05                	jmp    f012de34 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012de2f:	b8 00 00 00 00       	mov    $0x0,%eax
f012de34:	a3 8c 8a 2b f0       	mov    %eax,0xf02b8a8c
f012de39:	a1 8c 8a 2b f0       	mov    0xf02b8a8c,%eax
f012de3e:	85 c0                	test   %eax,%eax
f012de40:	75 c6                	jne    f012de08 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012de42:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012de46:	75 c0                	jne    f012de08 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012de48:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012de4d:	85 c0                	test   %eax,%eax
f012de4f:	0f 84 ec 00 00 00    	je     f012df41 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012de55:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012de5a:	83 ec 0c             	sub    $0xc,%esp
f012de5d:	50                   	push   %eax
f012de5e:	e8 94 a3 fd ff       	call   f01081f7 <env_page_ws_get_size>
f012de63:	83 c4 10             	add    $0x10,%esp
f012de66:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012de69:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012de6e:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012de74:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012de77:	0f af c2             	imul   %edx,%eax
f012de7a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012de7f:	f7 e2                	mul    %edx
f012de81:	89 d0                	mov    %edx,%eax
f012de83:	c1 e8 05             	shr    $0x5,%eax
f012de86:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012de89:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012de8e:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012de94:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012de97:	89 d1                	mov    %edx,%ecx
f012de99:	0f af c8             	imul   %eax,%ecx
f012de9c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dea1:	f7 e1                	mul    %ecx
f012dea3:	c1 ea 05             	shr    $0x5,%edx
f012dea6:	89 d0                	mov    %edx,%eax
f012dea8:	c1 e0 02             	shl    $0x2,%eax
f012deab:	01 d0                	add    %edx,%eax
f012dead:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012deb4:	01 d0                	add    %edx,%eax
f012deb6:	c1 e0 02             	shl    $0x2,%eax
f012deb9:	29 c1                	sub    %eax,%ecx
f012debb:	89 ca                	mov    %ecx,%edx
f012debd:	85 d2                	test   %edx,%edx
f012debf:	74 03                	je     f012dec4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012dec1:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012dec4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012deca:	eb 75                	jmp    f012df41 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012decc:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012ded1:	83 ec 0c             	sub    $0xc,%esp
f012ded4:	50                   	push   %eax
f012ded5:	e8 1d a3 fd ff       	call   f01081f7 <env_page_ws_get_size>
f012deda:	83 c4 10             	add    $0x10,%esp
f012dedd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012dee0:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012dee5:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012deeb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012deee:	0f af c2             	imul   %edx,%eax
f012def1:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012def6:	f7 e2                	mul    %edx
f012def8:	89 d0                	mov    %edx,%eax
f012defa:	c1 e8 05             	shr    $0x5,%eax
f012defd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012df00:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012df05:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df0b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012df0e:	89 d1                	mov    %edx,%ecx
f012df10:	0f af c8             	imul   %eax,%ecx
f012df13:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012df18:	f7 e1                	mul    %ecx
f012df1a:	c1 ea 05             	shr    $0x5,%edx
f012df1d:	89 d0                	mov    %edx,%eax
f012df1f:	c1 e0 02             	shl    $0x2,%eax
f012df22:	01 d0                	add    %edx,%eax
f012df24:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012df2b:	01 d0                	add    %edx,%eax
f012df2d:	c1 e0 02             	shl    $0x2,%eax
f012df30:	29 c1                	sub    %eax,%ecx
f012df32:	89 ca                	mov    %ecx,%edx
f012df34:	85 d2                	test   %edx,%edx
f012df36:	74 03                	je     f012df3b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012df38:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012df3b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012df3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012df41:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012df44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012df47:	01 c2                	add    %eax,%edx
f012df49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012df4c:	01 d0                	add    %edx,%eax
}
f012df4e:	c9                   	leave  
f012df4f:	c3                   	ret    

f012df50 <schenv>:


void schenv()
{
f012df50:	55                   	push   %ebp
f012df51:	89 e5                	mov    %esp,%ebp
f012df53:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012df56:	c6 05 1c af 2b f0 00 	movb   $0x0,0xf02baf1c
	__ne = NULL;
f012df5d:	c7 05 b4 ae 2b f0 00 	movl   $0x0,0xf02baeb4
f012df64:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012df67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012df6e:	eb 3a                	jmp    f012dfaa <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012df70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012df73:	c1 e0 04             	shl    $0x4,%eax
f012df76:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f012df7b:	83 ec 0c             	sub    $0xc,%esp
f012df7e:	50                   	push   %eax
f012df7f:	e8 cb 6d fd ff       	call   f0104d4f <queue_size>
f012df84:	83 c4 10             	add    $0x10,%esp
f012df87:	85 c0                	test   %eax,%eax
f012df89:	74 1c                	je     f012dfa7 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012df8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012df8e:	c1 e0 04             	shl    $0x4,%eax
f012df91:	05 24 2b 25 f0       	add    $0xf0252b24,%eax
f012df96:	8b 00                	mov    (%eax),%eax
f012df98:	a3 b4 ae 2b f0       	mov    %eax,0xf02baeb4
			__nl = i;
f012df9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dfa0:	a2 1c af 2b f0       	mov    %al,0xf02baf1c
			break;
f012dfa5:	eb 10                	jmp    f012dfb7 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012dfa7:	ff 45 f4             	incl   -0xc(%ebp)
f012dfaa:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012dfaf:	0f b6 c0             	movzbl %al,%eax
f012dfb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dfb5:	7f b9                	jg     f012df70 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012dfb7:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012dfbc:	85 c0                	test   %eax,%eax
f012dfbe:	0f 84 86 00 00 00    	je     f012e04a <schenv+0xfa>
	{
		if (__ne != NULL)
f012dfc4:	a1 b4 ae 2b f0       	mov    0xf02baeb4,%eax
f012dfc9:	85 c0                	test   %eax,%eax
f012dfcb:	74 4b                	je     f012e018 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012dfcd:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012dfd2:	0f b6 c0             	movzbl %al,%eax
f012dfd5:	8d 50 01             	lea    0x1(%eax),%edx
f012dfd8:	a0 1c af 2b f0       	mov    0xf02baf1c,%al
f012dfdd:	0f b6 c0             	movzbl %al,%eax
f012dfe0:	39 c2                	cmp    %eax,%edx
f012dfe2:	7d 66                	jge    f012e04a <schenv+0xfa>
			{
				__ne = curenv;
f012dfe4:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012dfe9:	a3 b4 ae 2b f0       	mov    %eax,0xf02baeb4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012dfee:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012dff3:	0f b6 c0             	movzbl %al,%eax
f012dff6:	8a 15 f4 ae 2b f0    	mov    0xf02baef4,%dl
f012dffc:	0f b6 d2             	movzbl %dl,%edx
f012dfff:	4a                   	dec    %edx
f012e000:	39 d0                	cmp    %edx,%eax
f012e002:	7d 08                	jge    f012e00c <schenv+0xbc>
f012e004:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012e009:	40                   	inc    %eax
f012e00a:	eb 05                	jmp    f012e011 <schenv+0xc1>
f012e00c:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012e011:	a2 1c af 2b f0       	mov    %al,0xf02baf1c
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012e016:	eb 32                	jmp    f012e04a <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012e018:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012e01d:	a3 b4 ae 2b f0       	mov    %eax,0xf02baeb4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e022:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012e027:	0f b6 c0             	movzbl %al,%eax
f012e02a:	8a 15 f4 ae 2b f0    	mov    0xf02baef4,%dl
f012e030:	0f b6 d2             	movzbl %dl,%edx
f012e033:	4a                   	dec    %edx
f012e034:	39 d0                	cmp    %edx,%eax
f012e036:	7d 08                	jge    f012e040 <schenv+0xf0>
f012e038:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012e03d:	40                   	inc    %eax
f012e03e:	eb 05                	jmp    f012e045 <schenv+0xf5>
f012e040:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012e045:	a2 1c af 2b f0       	mov    %al,0xf02baf1c
		}
	}
}
f012e04a:	90                   	nop
f012e04b:	c9                   	leave  
f012e04c:	c3                   	ret    

f012e04d <chksch>:

void chksch(uint8 onoff)
{
f012e04d:	55                   	push   %ebp
f012e04e:	89 e5                	mov    %esp,%ebp
f012e050:	83 ec 04             	sub    $0x4,%esp
f012e053:	8b 45 08             	mov    0x8(%ebp),%eax
f012e056:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012e059:	c7 05 18 af 2b f0 00 	movl   $0x0,0xf02baf18
f012e060:	00 00 00 
	__ne = NULL;
f012e063:	c7 05 b4 ae 2b f0 00 	movl   $0x0,0xf02baeb4
f012e06a:	00 00 00 
	__pl = 0 ;
f012e06d:	c6 05 18 2b 25 f0 00 	movb   $0x0,0xf0252b18
	__nl = 0 ;
f012e074:	c6 05 1c af 2b f0 00 	movb   $0x0,0xf02baf1c
	__chkstatus = onoff;
f012e07b:	8a 45 fc             	mov    -0x4(%ebp),%al
f012e07e:	a2 b0 ae 2b f0       	mov    %al,0xf02baeb0
}
f012e083:	90                   	nop
f012e084:	c9                   	leave  
f012e085:	c3                   	ret    

f012e086 <chk1>:
void chk1()
{
f012e086:	55                   	push   %ebp
f012e087:	89 e5                	mov    %esp,%ebp
f012e089:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012e08c:	a0 b0 ae 2b f0       	mov    0xf02baeb0,%al
f012e091:	84 c0                	test   %al,%al
f012e093:	74 2b                	je     f012e0c0 <chk1+0x3a>
		return ;
	__pe = curenv;
f012e095:	a1 34 22 25 f0       	mov    0xf0252234,%eax
f012e09a:	a3 18 af 2b f0       	mov    %eax,0xf02baf18
	__pl = __nl ;
f012e09f:	a0 1c af 2b f0       	mov    0xf02baf1c,%al
f012e0a4:	a2 18 2b 25 f0       	mov    %al,0xf0252b18
	if (__pe == NULL)
f012e0a9:	a1 18 af 2b f0       	mov    0xf02baf18,%eax
f012e0ae:	85 c0                	test   %eax,%eax
f012e0b0:	75 07                	jne    f012e0b9 <chk1+0x33>
	{
		__pl = 0;
f012e0b2:	c6 05 18 2b 25 f0 00 	movb   $0x0,0xf0252b18
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012e0b9:	e8 92 fe ff ff       	call   f012df50 <schenv>
f012e0be:	eb 01                	jmp    f012e0c1 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012e0c0:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012e0c1:	c9                   	leave  
f012e0c2:	c3                   	ret    

f012e0c3 <chk2>:
void chk2(struct Env* __se)
{
f012e0c3:	55                   	push   %ebp
f012e0c4:	89 e5                	mov    %esp,%ebp
f012e0c6:	53                   	push   %ebx
f012e0c7:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012e0ca:	a0 b0 ae 2b f0       	mov    0xf02baeb0,%al
f012e0cf:	84 c0                	test   %al,%al
f012e0d1:	0f 84 35 02 00 00    	je     f012e30c <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012e0d7:	a1 b4 ae 2b f0       	mov    0xf02baeb4,%eax
f012e0dc:	39 45 08             	cmp    %eax,0x8(%ebp)
f012e0df:	74 19                	je     f012e0fa <chk2+0x37>
f012e0e1:	68 f5 aa 13 f0       	push   $0xf013aaf5
f012e0e6:	68 02 ab 13 f0       	push   $0xf013ab02
f012e0eb:	68 f8 00 00 00       	push   $0xf8
f012e0f0:	68 47 aa 13 f0       	push   $0xf013aa47
f012e0f5:	e8 6c 21 fd ff       	call   f0100266 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012e0fa:	a1 b4 ae 2b f0       	mov    0xf02baeb4,%eax
f012e0ff:	85 c0                	test   %eax,%eax
f012e101:	0f 84 1b 01 00 00    	je     f012e222 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012e107:	a0 1c af 2b f0       	mov    0xf02baf1c,%al
f012e10c:	0f b6 c0             	movzbl %al,%eax
f012e10f:	8a 80 a8 ae 2b f0    	mov    -0xfd45158(%eax),%al
f012e115:	0f b6 d8             	movzbl %al,%ebx
f012e118:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012e11d:	99                   	cltd   
f012e11e:	f7 fb                	idiv   %ebx
f012e120:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012e126:	a0 1c af 2b f0       	mov    0xf02baf1c,%al
f012e12b:	0f b6 c0             	movzbl %al,%eax
f012e12e:	8a 80 a8 ae 2b f0    	mov    -0xfd45158(%eax),%al
f012e134:	0f b6 d8             	movzbl %al,%ebx
f012e137:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012e13c:	99                   	cltd   
f012e13d:	f7 fb                	idiv   %ebx
f012e13f:	89 c3                	mov    %eax,%ebx
f012e141:	89 c8                	mov    %ecx,%eax
f012e143:	99                   	cltd   
f012e144:	f7 fb                	idiv   %ebx
f012e146:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012e14a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e14e:	83 e0 01             	and    $0x1,%eax
f012e151:	66 85 c0             	test   %ax,%ax
f012e154:	74 07                	je     f012e15d <chk2+0x9a>
f012e156:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e15a:	40                   	inc    %eax
f012e15b:	eb 04                	jmp    f012e161 <chk2+0x9e>
f012e15d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e161:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012e165:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012e169:	89 d0                	mov    %edx,%eax
f012e16b:	c1 e0 02             	shl    $0x2,%eax
f012e16e:	01 d0                	add    %edx,%eax
f012e170:	01 c0                	add    %eax,%eax
f012e172:	01 d0                	add    %edx,%eax
f012e174:	c1 e0 02             	shl    $0x2,%eax
f012e177:	01 d0                	add    %edx,%eax
f012e179:	01 c0                	add    %eax,%eax
f012e17b:	89 c1                	mov    %eax,%ecx
f012e17d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e182:	f7 e9                	imul   %ecx
f012e184:	c1 fa 05             	sar    $0x5,%edx
f012e187:	89 c8                	mov    %ecx,%eax
f012e189:	c1 f8 1f             	sar    $0x1f,%eax
f012e18c:	29 c2                	sub    %eax,%edx
f012e18e:	89 d0                	mov    %edx,%eax
f012e190:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012e194:	e8 bc 6a fd ff       	call   f0104c55 <kclock_read_cnt0>
f012e199:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012e19d:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e1a1:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012e1a5:	76 0a                	jbe    f012e1b1 <chk2+0xee>
f012e1a7:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e1ab:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012e1af:	76 19                	jbe    f012e1ca <chk2+0x107>
f012e1b1:	68 18 ab 13 f0       	push   $0xf013ab18
f012e1b6:	68 02 ab 13 f0       	push   $0xf013ab02
f012e1bb:	68 02 01 00 00       	push   $0x102
f012e1c0:	68 47 aa 13 f0       	push   $0xf013aa47
f012e1c5:	e8 9c 20 fd ff       	call   f0100266 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e1ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e1d1:	eb 42                	jmp    f012e215 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012e1d3:	a1 b4 ae 2b f0       	mov    0xf02baeb4,%eax
f012e1d8:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e1db:	89 c2                	mov    %eax,%edx
f012e1dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e1e0:	c1 e0 04             	shl    $0x4,%eax
f012e1e3:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f012e1e8:	83 ec 08             	sub    $0x8,%esp
f012e1eb:	52                   	push   %edx
f012e1ec:	50                   	push   %eax
f012e1ed:	e8 77 6d fd ff       	call   f0104f69 <find_env_in_queue>
f012e1f2:	83 c4 10             	add    $0x10,%esp
f012e1f5:	85 c0                	test   %eax,%eax
f012e1f7:	74 19                	je     f012e212 <chk2+0x14f>
f012e1f9:	68 3c ab 13 f0       	push   $0xf013ab3c
f012e1fe:	68 02 ab 13 f0       	push   $0xf013ab02
f012e203:	68 06 01 00 00       	push   $0x106
f012e208:	68 47 aa 13 f0       	push   $0xf013aa47
f012e20d:	e8 54 20 fd ff       	call   f0100266 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e212:	ff 45 f4             	incl   -0xc(%ebp)
f012e215:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012e21a:	0f b6 c0             	movzbl %al,%eax
f012e21d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e220:	7f b1                	jg     f012e1d3 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012e222:	a1 18 af 2b f0       	mov    0xf02baf18,%eax
f012e227:	85 c0                	test   %eax,%eax
f012e229:	0f 84 de 00 00 00    	je     f012e30d <chk2+0x24a>
f012e22f:	8b 15 18 af 2b f0    	mov    0xf02baf18,%edx
f012e235:	a1 b4 ae 2b f0       	mov    0xf02baeb4,%eax
f012e23a:	39 c2                	cmp    %eax,%edx
f012e23c:	0f 84 cb 00 00 00    	je     f012e30d <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012e242:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012e247:	0f b6 c0             	movzbl %al,%eax
f012e24a:	8a 15 f4 ae 2b f0    	mov    0xf02baef4,%dl
f012e250:	0f b6 d2             	movzbl %dl,%edx
f012e253:	4a                   	dec    %edx
f012e254:	39 d0                	cmp    %edx,%eax
f012e256:	74 08                	je     f012e260 <chk2+0x19d>
f012e258:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012e25d:	40                   	inc    %eax
f012e25e:	eb 05                	jmp    f012e265 <chk2+0x1a2>
f012e260:	a0 18 2b 25 f0       	mov    0xf0252b18,%al
f012e265:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012e268:	a1 18 af 2b f0       	mov    0xf02baf18,%eax
f012e26d:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e270:	89 c2                	mov    %eax,%edx
f012e272:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e276:	c1 e0 04             	shl    $0x4,%eax
f012e279:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f012e27e:	83 ec 08             	sub    $0x8,%esp
f012e281:	52                   	push   %edx
f012e282:	50                   	push   %eax
f012e283:	e8 e1 6c fd ff       	call   f0104f69 <find_env_in_queue>
f012e288:	83 c4 10             	add    $0x10,%esp
f012e28b:	85 c0                	test   %eax,%eax
f012e28d:	75 19                	jne    f012e2a8 <chk2+0x1e5>
f012e28f:	68 7c ab 13 f0       	push   $0xf013ab7c
f012e294:	68 02 ab 13 f0       	push   $0xf013ab02
f012e299:	68 0c 01 00 00       	push   $0x10c
f012e29e:	68 47 aa 13 f0       	push   $0xf013aa47
f012e2a3:	e8 be 1f fd ff       	call   f0100266 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e2a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e2af:	eb 4c                	jmp    f012e2fd <chk2+0x23a>
		{
			if (i == __tl) continue;
f012e2b1:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e2b5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e2b8:	74 3f                	je     f012e2f9 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012e2ba:	a1 18 af 2b f0       	mov    0xf02baf18,%eax
f012e2bf:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e2c2:	89 c2                	mov    %eax,%edx
f012e2c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e2c7:	c1 e0 04             	shl    $0x4,%eax
f012e2ca:	05 20 2b 25 f0       	add    $0xf0252b20,%eax
f012e2cf:	83 ec 08             	sub    $0x8,%esp
f012e2d2:	52                   	push   %edx
f012e2d3:	50                   	push   %eax
f012e2d4:	e8 90 6c fd ff       	call   f0104f69 <find_env_in_queue>
f012e2d9:	83 c4 10             	add    $0x10,%esp
f012e2dc:	85 c0                	test   %eax,%eax
f012e2de:	74 1a                	je     f012e2fa <chk2+0x237>
f012e2e0:	68 c0 ab 13 f0       	push   $0xf013abc0
f012e2e5:	68 02 ab 13 f0       	push   $0xf013ab02
f012e2ea:	68 10 01 00 00       	push   $0x110
f012e2ef:	68 47 aa 13 f0       	push   $0xf013aa47
f012e2f4:	e8 6d 1f fd ff       	call   f0100266 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012e2f9:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e2fa:	ff 45 f0             	incl   -0x10(%ebp)
f012e2fd:	a0 f4 ae 2b f0       	mov    0xf02baef4,%al
f012e302:	0f b6 c0             	movzbl %al,%eax
f012e305:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e308:	7f a7                	jg     f012e2b1 <chk2+0x1ee>
f012e30a:	eb 01                	jmp    f012e30d <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012e30c:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012e30d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e310:	c9                   	leave  
f012e311:	c3                   	ret    

f012e312 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012e312:	55                   	push   %ebp
f012e313:	89 e5                	mov    %esp,%ebp
f012e315:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e318:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e31f:	eb 40                	jmp    f012e361 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012e321:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e324:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012e32a:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012e32f:	83 ec 08             	sub    $0x8,%esp
f012e332:	52                   	push   %edx
f012e333:	50                   	push   %eax
f012e334:	e8 92 01 00 00       	call   f012e4cb <check_va2pa>
f012e339:	83 c4 10             	add    $0x10,%esp
f012e33c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e33f:	74 19                	je     f012e35a <check_boot_pgdir+0x48>
f012e341:	68 00 ac 13 f0       	push   $0xf013ac00
f012e346:	68 02 ab 13 f0       	push   $0xf013ab02
f012e34b:	68 37 01 00 00       	push   $0x137
f012e350:	68 47 aa 13 f0       	push   $0xf013aa47
f012e355:	e8 56 1e fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e35a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e361:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012e368:	75 b7                	jne    f012e321 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e36a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e371:	eb 74                	jmp    f012e3e7 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012e373:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e376:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012e37c:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012e381:	83 ec 08             	sub    $0x8,%esp
f012e384:	52                   	push   %edx
f012e385:	50                   	push   %eax
f012e386:	e8 40 01 00 00       	call   f012e4cb <check_va2pa>
f012e38b:	83 c4 10             	add    $0x10,%esp
f012e38e:	c7 45 f0 00 40 18 f0 	movl   $0xf0184000,-0x10(%ebp)
f012e395:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012e39c:	77 17                	ja     f012e3b5 <check_boot_pgdir+0xa3>
f012e39e:	ff 75 f0             	pushl  -0x10(%ebp)
f012e3a1:	68 38 ac 13 f0       	push   $0xf013ac38
f012e3a6:	68 3c 01 00 00       	push   $0x13c
f012e3ab:	68 47 aa 13 f0       	push   $0xf013aa47
f012e3b0:	e8 fb 1d fd ff       	call   f01001b0 <_panic>
f012e3b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012e3b8:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012e3be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e3c1:	01 ca                	add    %ecx,%edx
f012e3c3:	39 d0                	cmp    %edx,%eax
f012e3c5:	74 19                	je     f012e3e0 <check_boot_pgdir+0xce>
f012e3c7:	68 6c ac 13 f0       	push   $0xf013ac6c
f012e3cc:	68 02 ab 13 f0       	push   $0xf013ab02
f012e3d1:	68 3c 01 00 00       	push   $0x13c
f012e3d6:	68 47 aa 13 f0       	push   $0xf013aa47
f012e3db:	e8 d0 1d fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e3e0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e3e7:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012e3ee:	76 83                	jbe    f012e373 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e3f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e3f7:	e9 af 00 00 00       	jmp    f012e4ab <check_boot_pgdir+0x199>
		switch (i) {
f012e3fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e3ff:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e404:	74 11                	je     f012e417 <check_boot_pgdir+0x105>
f012e406:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e40b:	72 36                	jb     f012e443 <check_boot_pgdir+0x131>
f012e40d:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012e412:	83 f8 02             	cmp    $0x2,%eax
f012e415:	77 2c                	ja     f012e443 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012e417:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012e41c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e41f:	c1 e2 02             	shl    $0x2,%edx
f012e422:	01 d0                	add    %edx,%eax
f012e424:	8b 00                	mov    (%eax),%eax
f012e426:	85 c0                	test   %eax,%eax
f012e428:	75 7a                	jne    f012e4a4 <check_boot_pgdir+0x192>
f012e42a:	68 ee ac 13 f0       	push   $0xf013acee
f012e42f:	68 02 ab 13 f0       	push   $0xf013ab02
f012e434:	68 47 01 00 00       	push   $0x147
f012e439:	68 47 aa 13 f0       	push   $0xf013aa47
f012e43e:	e8 6d 1d fd ff       	call   f01001b0 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012e443:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012e44a:	76 2c                	jbe    f012e478 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012e44c:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012e451:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e454:	c1 e2 02             	shl    $0x2,%edx
f012e457:	01 d0                	add    %edx,%eax
f012e459:	8b 00                	mov    (%eax),%eax
f012e45b:	85 c0                	test   %eax,%eax
f012e45d:	75 48                	jne    f012e4a7 <check_boot_pgdir+0x195>
f012e45f:	68 ee ac 13 f0       	push   $0xf013acee
f012e464:	68 02 ab 13 f0       	push   $0xf013ab02
f012e469:	68 4b 01 00 00       	push   $0x14b
f012e46e:	68 47 aa 13 f0       	push   $0xf013aa47
f012e473:	e8 38 1d fd ff       	call   f01001b0 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012e478:	a1 f0 ae 2b f0       	mov    0xf02baef0,%eax
f012e47d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e480:	c1 e2 02             	shl    $0x2,%edx
f012e483:	01 d0                	add    %edx,%eax
f012e485:	8b 00                	mov    (%eax),%eax
f012e487:	85 c0                	test   %eax,%eax
f012e489:	74 1c                	je     f012e4a7 <check_boot_pgdir+0x195>
f012e48b:	68 04 ad 13 f0       	push   $0xf013ad04
f012e490:	68 02 ab 13 f0       	push   $0xf013ab02
f012e495:	68 4d 01 00 00       	push   $0x14d
f012e49a:	68 47 aa 13 f0       	push   $0xf013aa47
f012e49f:	e8 0c 1d fd ff       	call   f01001b0 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012e4a4:	90                   	nop
f012e4a5:	eb 01                	jmp    f012e4a8 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012e4a7:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e4a8:	ff 45 f4             	incl   -0xc(%ebp)
f012e4ab:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012e4b2:	0f 86 44 ff ff ff    	jbe    f012e3fc <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012e4b8:	83 ec 0c             	sub    $0xc,%esp
f012e4bb:	68 20 ad 13 f0       	push   $0xf013ad20
f012e4c0:	e8 6c 29 fd ff       	call   f0100e31 <cprintf>
f012e4c5:	83 c4 10             	add    $0x10,%esp
}
f012e4c8:	90                   	nop
f012e4c9:	c9                   	leave  
f012e4ca:	c3                   	ret    

f012e4cb <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012e4cb:	55                   	push   %ebp
f012e4cc:	89 e5                	mov    %esp,%ebp
f012e4ce:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012e4d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e4d4:	c1 e8 16             	shr    $0x16,%eax
f012e4d7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e4de:	8b 45 08             	mov    0x8(%ebp),%eax
f012e4e1:	01 d0                	add    %edx,%eax
f012e4e3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012e4e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e4e9:	8b 00                	mov    (%eax),%eax
f012e4eb:	83 e0 01             	and    $0x1,%eax
f012e4ee:	85 c0                	test   %eax,%eax
f012e4f0:	75 0a                	jne    f012e4fc <check_va2pa+0x31>
		return ~0;
f012e4f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e4f7:	e9 87 00 00 00       	jmp    f012e583 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012e4fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e4ff:	8b 00                	mov    (%eax),%eax
f012e501:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012e506:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e509:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e50c:	c1 e8 0c             	shr    $0xc,%eax
f012e50f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e512:	a1 90 ae 2b f0       	mov    0xf02bae90,%eax
f012e517:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012e51a:	72 17                	jb     f012e533 <check_va2pa+0x68>
f012e51c:	ff 75 f0             	pushl  -0x10(%ebp)
f012e51f:	68 40 ad 13 f0       	push   $0xf013ad40
f012e524:	68 63 01 00 00       	push   $0x163
f012e529:	68 47 aa 13 f0       	push   $0xf013aa47
f012e52e:	e8 7d 1c fd ff       	call   f01001b0 <_panic>
f012e533:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e536:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012e53b:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012e53e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e541:	c1 e8 0c             	shr    $0xc,%eax
f012e544:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e549:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e550:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e553:	01 d0                	add    %edx,%eax
f012e555:	8b 00                	mov    (%eax),%eax
f012e557:	83 e0 01             	and    $0x1,%eax
f012e55a:	85 c0                	test   %eax,%eax
f012e55c:	75 07                	jne    f012e565 <check_va2pa+0x9a>
		return ~0;
f012e55e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e563:	eb 1e                	jmp    f012e583 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012e565:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e568:	c1 e8 0c             	shr    $0xc,%eax
f012e56b:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e570:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e577:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e57a:	01 d0                	add    %edx,%eax
f012e57c:	8b 00                	mov    (%eax),%eax
f012e57e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012e583:	c9                   	leave  
f012e584:	c3                   	ret    

f012e585 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012e585:	55                   	push   %ebp
f012e586:	89 e5                	mov    %esp,%ebp
f012e588:	53                   	push   %ebx
f012e589:	83 ec 14             	sub    $0x14,%esp
f012e58c:	8b 45 10             	mov    0x10(%ebp),%eax
f012e58f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e592:	8b 45 14             	mov    0x14(%ebp),%eax
f012e595:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012e598:	8b 45 18             	mov    0x18(%ebp),%eax
f012e59b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5a0:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e5a3:	77 55                	ja     f012e5fa <printnum+0x75>
f012e5a5:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e5a8:	72 05                	jb     f012e5af <printnum+0x2a>
f012e5aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e5ad:	77 4b                	ja     f012e5fa <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012e5af:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012e5b2:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012e5b5:	8b 45 18             	mov    0x18(%ebp),%eax
f012e5b8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5bd:	52                   	push   %edx
f012e5be:	50                   	push   %eax
f012e5bf:	ff 75 f4             	pushl  -0xc(%ebp)
f012e5c2:	ff 75 f0             	pushl  -0x10(%ebp)
f012e5c5:	e8 0e 15 00 00       	call   f012fad8 <__udivdi3>
f012e5ca:	83 c4 10             	add    $0x10,%esp
f012e5cd:	83 ec 04             	sub    $0x4,%esp
f012e5d0:	ff 75 20             	pushl  0x20(%ebp)
f012e5d3:	53                   	push   %ebx
f012e5d4:	ff 75 18             	pushl  0x18(%ebp)
f012e5d7:	52                   	push   %edx
f012e5d8:	50                   	push   %eax
f012e5d9:	ff 75 0c             	pushl  0xc(%ebp)
f012e5dc:	ff 75 08             	pushl  0x8(%ebp)
f012e5df:	e8 a1 ff ff ff       	call   f012e585 <printnum>
f012e5e4:	83 c4 20             	add    $0x20,%esp
f012e5e7:	eb 1a                	jmp    f012e603 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012e5e9:	83 ec 08             	sub    $0x8,%esp
f012e5ec:	ff 75 0c             	pushl  0xc(%ebp)
f012e5ef:	ff 75 20             	pushl  0x20(%ebp)
f012e5f2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e5f5:	ff d0                	call   *%eax
f012e5f7:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012e5fa:	ff 4d 1c             	decl   0x1c(%ebp)
f012e5fd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012e601:	7f e6                	jg     f012e5e9 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012e603:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012e606:	bb 00 00 00 00       	mov    $0x0,%ebx
f012e60b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e60e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e611:	53                   	push   %ebx
f012e612:	51                   	push   %ecx
f012e613:	52                   	push   %edx
f012e614:	50                   	push   %eax
f012e615:	e8 ce 15 00 00       	call   f012fbe8 <__umoddi3>
f012e61a:	83 c4 10             	add    $0x10,%esp
f012e61d:	05 94 af 13 f0       	add    $0xf013af94,%eax
f012e622:	8a 00                	mov    (%eax),%al
f012e624:	0f be c0             	movsbl %al,%eax
f012e627:	83 ec 08             	sub    $0x8,%esp
f012e62a:	ff 75 0c             	pushl  0xc(%ebp)
f012e62d:	50                   	push   %eax
f012e62e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e631:	ff d0                	call   *%eax
f012e633:	83 c4 10             	add    $0x10,%esp
}
f012e636:	90                   	nop
f012e637:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e63a:	c9                   	leave  
f012e63b:	c3                   	ret    

f012e63c <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012e63c:	55                   	push   %ebp
f012e63d:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e63f:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e643:	7e 1c                	jle    f012e661 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012e645:	8b 45 08             	mov    0x8(%ebp),%eax
f012e648:	8b 00                	mov    (%eax),%eax
f012e64a:	8d 50 08             	lea    0x8(%eax),%edx
f012e64d:	8b 45 08             	mov    0x8(%ebp),%eax
f012e650:	89 10                	mov    %edx,(%eax)
f012e652:	8b 45 08             	mov    0x8(%ebp),%eax
f012e655:	8b 00                	mov    (%eax),%eax
f012e657:	83 e8 08             	sub    $0x8,%eax
f012e65a:	8b 50 04             	mov    0x4(%eax),%edx
f012e65d:	8b 00                	mov    (%eax),%eax
f012e65f:	eb 40                	jmp    f012e6a1 <getuint+0x65>
	else if (lflag)
f012e661:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e665:	74 1e                	je     f012e685 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012e667:	8b 45 08             	mov    0x8(%ebp),%eax
f012e66a:	8b 00                	mov    (%eax),%eax
f012e66c:	8d 50 04             	lea    0x4(%eax),%edx
f012e66f:	8b 45 08             	mov    0x8(%ebp),%eax
f012e672:	89 10                	mov    %edx,(%eax)
f012e674:	8b 45 08             	mov    0x8(%ebp),%eax
f012e677:	8b 00                	mov    (%eax),%eax
f012e679:	83 e8 04             	sub    $0x4,%eax
f012e67c:	8b 00                	mov    (%eax),%eax
f012e67e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e683:	eb 1c                	jmp    f012e6a1 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012e685:	8b 45 08             	mov    0x8(%ebp),%eax
f012e688:	8b 00                	mov    (%eax),%eax
f012e68a:	8d 50 04             	lea    0x4(%eax),%edx
f012e68d:	8b 45 08             	mov    0x8(%ebp),%eax
f012e690:	89 10                	mov    %edx,(%eax)
f012e692:	8b 45 08             	mov    0x8(%ebp),%eax
f012e695:	8b 00                	mov    (%eax),%eax
f012e697:	83 e8 04             	sub    $0x4,%eax
f012e69a:	8b 00                	mov    (%eax),%eax
f012e69c:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012e6a1:	5d                   	pop    %ebp
f012e6a2:	c3                   	ret    

f012e6a3 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012e6a3:	55                   	push   %ebp
f012e6a4:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e6a6:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e6aa:	7e 1c                	jle    f012e6c8 <getint+0x25>
		return va_arg(*ap, long long);
f012e6ac:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6af:	8b 00                	mov    (%eax),%eax
f012e6b1:	8d 50 08             	lea    0x8(%eax),%edx
f012e6b4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6b7:	89 10                	mov    %edx,(%eax)
f012e6b9:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6bc:	8b 00                	mov    (%eax),%eax
f012e6be:	83 e8 08             	sub    $0x8,%eax
f012e6c1:	8b 50 04             	mov    0x4(%eax),%edx
f012e6c4:	8b 00                	mov    (%eax),%eax
f012e6c6:	eb 38                	jmp    f012e700 <getint+0x5d>
	else if (lflag)
f012e6c8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e6cc:	74 1a                	je     f012e6e8 <getint+0x45>
		return va_arg(*ap, long);
f012e6ce:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6d1:	8b 00                	mov    (%eax),%eax
f012e6d3:	8d 50 04             	lea    0x4(%eax),%edx
f012e6d6:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6d9:	89 10                	mov    %edx,(%eax)
f012e6db:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6de:	8b 00                	mov    (%eax),%eax
f012e6e0:	83 e8 04             	sub    $0x4,%eax
f012e6e3:	8b 00                	mov    (%eax),%eax
f012e6e5:	99                   	cltd   
f012e6e6:	eb 18                	jmp    f012e700 <getint+0x5d>
	else
		return va_arg(*ap, int);
f012e6e8:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6eb:	8b 00                	mov    (%eax),%eax
f012e6ed:	8d 50 04             	lea    0x4(%eax),%edx
f012e6f0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6f3:	89 10                	mov    %edx,(%eax)
f012e6f5:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6f8:	8b 00                	mov    (%eax),%eax
f012e6fa:	83 e8 04             	sub    $0x4,%eax
f012e6fd:	8b 00                	mov    (%eax),%eax
f012e6ff:	99                   	cltd   
}
f012e700:	5d                   	pop    %ebp
f012e701:	c3                   	ret    

f012e702 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012e702:	55                   	push   %ebp
f012e703:	89 e5                	mov    %esp,%ebp
f012e705:	56                   	push   %esi
f012e706:	53                   	push   %ebx
f012e707:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e70a:	eb 17                	jmp    f012e723 <vprintfmt+0x21>
			if (ch == '\0')
f012e70c:	85 db                	test   %ebx,%ebx
f012e70e:	0f 84 af 03 00 00    	je     f012eac3 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012e714:	83 ec 08             	sub    $0x8,%esp
f012e717:	ff 75 0c             	pushl  0xc(%ebp)
f012e71a:	53                   	push   %ebx
f012e71b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e71e:	ff d0                	call   *%eax
f012e720:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e723:	8b 45 10             	mov    0x10(%ebp),%eax
f012e726:	8d 50 01             	lea    0x1(%eax),%edx
f012e729:	89 55 10             	mov    %edx,0x10(%ebp)
f012e72c:	8a 00                	mov    (%eax),%al
f012e72e:	0f b6 d8             	movzbl %al,%ebx
f012e731:	83 fb 25             	cmp    $0x25,%ebx
f012e734:	75 d6                	jne    f012e70c <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012e736:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012e73a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012e741:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012e748:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012e74f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012e756:	8b 45 10             	mov    0x10(%ebp),%eax
f012e759:	8d 50 01             	lea    0x1(%eax),%edx
f012e75c:	89 55 10             	mov    %edx,0x10(%ebp)
f012e75f:	8a 00                	mov    (%eax),%al
f012e761:	0f b6 d8             	movzbl %al,%ebx
f012e764:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012e767:	83 f8 55             	cmp    $0x55,%eax
f012e76a:	0f 87 2b 03 00 00    	ja     f012ea9b <vprintfmt+0x399>
f012e770:	8b 04 85 b8 af 13 f0 	mov    -0xfec5048(,%eax,4),%eax
f012e777:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012e779:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012e77d:	eb d7                	jmp    f012e756 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012e77f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012e783:	eb d1                	jmp    f012e756 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e785:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012e78c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e78f:	89 d0                	mov    %edx,%eax
f012e791:	c1 e0 02             	shl    $0x2,%eax
f012e794:	01 d0                	add    %edx,%eax
f012e796:	01 c0                	add    %eax,%eax
f012e798:	01 d8                	add    %ebx,%eax
f012e79a:	83 e8 30             	sub    $0x30,%eax
f012e79d:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012e7a0:	8b 45 10             	mov    0x10(%ebp),%eax
f012e7a3:	8a 00                	mov    (%eax),%al
f012e7a5:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012e7a8:	83 fb 2f             	cmp    $0x2f,%ebx
f012e7ab:	7e 3e                	jle    f012e7eb <vprintfmt+0xe9>
f012e7ad:	83 fb 39             	cmp    $0x39,%ebx
f012e7b0:	7f 39                	jg     f012e7eb <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e7b2:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012e7b5:	eb d5                	jmp    f012e78c <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012e7b7:	8b 45 14             	mov    0x14(%ebp),%eax
f012e7ba:	83 c0 04             	add    $0x4,%eax
f012e7bd:	89 45 14             	mov    %eax,0x14(%ebp)
f012e7c0:	8b 45 14             	mov    0x14(%ebp),%eax
f012e7c3:	83 e8 04             	sub    $0x4,%eax
f012e7c6:	8b 00                	mov    (%eax),%eax
f012e7c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012e7cb:	eb 1f                	jmp    f012e7ec <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012e7cd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e7d1:	79 83                	jns    f012e756 <vprintfmt+0x54>
				width = 0;
f012e7d3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012e7da:	e9 77 ff ff ff       	jmp    f012e756 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012e7df:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012e7e6:	e9 6b ff ff ff       	jmp    f012e756 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012e7eb:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012e7ec:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e7f0:	0f 89 60 ff ff ff    	jns    f012e756 <vprintfmt+0x54>
				width = precision, precision = -1;
f012e7f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e7f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e7fc:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012e803:	e9 4e ff ff ff       	jmp    f012e756 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012e808:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012e80b:	e9 46 ff ff ff       	jmp    f012e756 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012e810:	8b 45 14             	mov    0x14(%ebp),%eax
f012e813:	83 c0 04             	add    $0x4,%eax
f012e816:	89 45 14             	mov    %eax,0x14(%ebp)
f012e819:	8b 45 14             	mov    0x14(%ebp),%eax
f012e81c:	83 e8 04             	sub    $0x4,%eax
f012e81f:	8b 00                	mov    (%eax),%eax
f012e821:	83 ec 08             	sub    $0x8,%esp
f012e824:	ff 75 0c             	pushl  0xc(%ebp)
f012e827:	50                   	push   %eax
f012e828:	8b 45 08             	mov    0x8(%ebp),%eax
f012e82b:	ff d0                	call   *%eax
f012e82d:	83 c4 10             	add    $0x10,%esp
			break;
f012e830:	e9 89 02 00 00       	jmp    f012eabe <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012e835:	8b 45 14             	mov    0x14(%ebp),%eax
f012e838:	83 c0 04             	add    $0x4,%eax
f012e83b:	89 45 14             	mov    %eax,0x14(%ebp)
f012e83e:	8b 45 14             	mov    0x14(%ebp),%eax
f012e841:	83 e8 04             	sub    $0x4,%eax
f012e844:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012e846:	85 db                	test   %ebx,%ebx
f012e848:	79 02                	jns    f012e84c <vprintfmt+0x14a>
				err = -err;
f012e84a:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012e84c:	83 fb 64             	cmp    $0x64,%ebx
f012e84f:	7f 0b                	jg     f012e85c <vprintfmt+0x15a>
f012e851:	8b 34 9d 00 ae 13 f0 	mov    -0xfec5200(,%ebx,4),%esi
f012e858:	85 f6                	test   %esi,%esi
f012e85a:	75 19                	jne    f012e875 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012e85c:	53                   	push   %ebx
f012e85d:	68 a5 af 13 f0       	push   $0xf013afa5
f012e862:	ff 75 0c             	pushl  0xc(%ebp)
f012e865:	ff 75 08             	pushl  0x8(%ebp)
f012e868:	e8 5e 02 00 00       	call   f012eacb <printfmt>
f012e86d:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012e870:	e9 49 02 00 00       	jmp    f012eabe <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012e875:	56                   	push   %esi
f012e876:	68 ae af 13 f0       	push   $0xf013afae
f012e87b:	ff 75 0c             	pushl  0xc(%ebp)
f012e87e:	ff 75 08             	pushl  0x8(%ebp)
f012e881:	e8 45 02 00 00       	call   f012eacb <printfmt>
f012e886:	83 c4 10             	add    $0x10,%esp
			break;
f012e889:	e9 30 02 00 00       	jmp    f012eabe <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012e88e:	8b 45 14             	mov    0x14(%ebp),%eax
f012e891:	83 c0 04             	add    $0x4,%eax
f012e894:	89 45 14             	mov    %eax,0x14(%ebp)
f012e897:	8b 45 14             	mov    0x14(%ebp),%eax
f012e89a:	83 e8 04             	sub    $0x4,%eax
f012e89d:	8b 30                	mov    (%eax),%esi
f012e89f:	85 f6                	test   %esi,%esi
f012e8a1:	75 05                	jne    f012e8a8 <vprintfmt+0x1a6>
				p = "(null)";
f012e8a3:	be b1 af 13 f0       	mov    $0xf013afb1,%esi
			if (width > 0 && padc != '-')
f012e8a8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e8ac:	7e 6d                	jle    f012e91b <vprintfmt+0x219>
f012e8ae:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012e8b2:	74 67                	je     f012e91b <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012e8b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e8b7:	83 ec 08             	sub    $0x8,%esp
f012e8ba:	50                   	push   %eax
f012e8bb:	56                   	push   %esi
f012e8bc:	e8 12 05 00 00       	call   f012edd3 <strnlen>
f012e8c1:	83 c4 10             	add    $0x10,%esp
f012e8c4:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012e8c7:	eb 16                	jmp    f012e8df <vprintfmt+0x1dd>
					putch(padc, putdat);
f012e8c9:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012e8cd:	83 ec 08             	sub    $0x8,%esp
f012e8d0:	ff 75 0c             	pushl  0xc(%ebp)
f012e8d3:	50                   	push   %eax
f012e8d4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8d7:	ff d0                	call   *%eax
f012e8d9:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012e8dc:	ff 4d e4             	decl   -0x1c(%ebp)
f012e8df:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e8e3:	7f e4                	jg     f012e8c9 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e8e5:	eb 34                	jmp    f012e91b <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012e8e7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e8eb:	74 1c                	je     f012e909 <vprintfmt+0x207>
f012e8ed:	83 fb 1f             	cmp    $0x1f,%ebx
f012e8f0:	7e 05                	jle    f012e8f7 <vprintfmt+0x1f5>
f012e8f2:	83 fb 7e             	cmp    $0x7e,%ebx
f012e8f5:	7e 12                	jle    f012e909 <vprintfmt+0x207>
					putch('?', putdat);
f012e8f7:	83 ec 08             	sub    $0x8,%esp
f012e8fa:	ff 75 0c             	pushl  0xc(%ebp)
f012e8fd:	6a 3f                	push   $0x3f
f012e8ff:	8b 45 08             	mov    0x8(%ebp),%eax
f012e902:	ff d0                	call   *%eax
f012e904:	83 c4 10             	add    $0x10,%esp
f012e907:	eb 0f                	jmp    f012e918 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012e909:	83 ec 08             	sub    $0x8,%esp
f012e90c:	ff 75 0c             	pushl  0xc(%ebp)
f012e90f:	53                   	push   %ebx
f012e910:	8b 45 08             	mov    0x8(%ebp),%eax
f012e913:	ff d0                	call   *%eax
f012e915:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e918:	ff 4d e4             	decl   -0x1c(%ebp)
f012e91b:	89 f0                	mov    %esi,%eax
f012e91d:	8d 70 01             	lea    0x1(%eax),%esi
f012e920:	8a 00                	mov    (%eax),%al
f012e922:	0f be d8             	movsbl %al,%ebx
f012e925:	85 db                	test   %ebx,%ebx
f012e927:	74 24                	je     f012e94d <vprintfmt+0x24b>
f012e929:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e92d:	78 b8                	js     f012e8e7 <vprintfmt+0x1e5>
f012e92f:	ff 4d e0             	decl   -0x20(%ebp)
f012e932:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e936:	79 af                	jns    f012e8e7 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e938:	eb 13                	jmp    f012e94d <vprintfmt+0x24b>
				putch(' ', putdat);
f012e93a:	83 ec 08             	sub    $0x8,%esp
f012e93d:	ff 75 0c             	pushl  0xc(%ebp)
f012e940:	6a 20                	push   $0x20
f012e942:	8b 45 08             	mov    0x8(%ebp),%eax
f012e945:	ff d0                	call   *%eax
f012e947:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e94a:	ff 4d e4             	decl   -0x1c(%ebp)
f012e94d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e951:	7f e7                	jg     f012e93a <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012e953:	e9 66 01 00 00       	jmp    f012eabe <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012e958:	83 ec 08             	sub    $0x8,%esp
f012e95b:	ff 75 e8             	pushl  -0x18(%ebp)
f012e95e:	8d 45 14             	lea    0x14(%ebp),%eax
f012e961:	50                   	push   %eax
f012e962:	e8 3c fd ff ff       	call   f012e6a3 <getint>
f012e967:	83 c4 10             	add    $0x10,%esp
f012e96a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e96d:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012e970:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e973:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e976:	85 d2                	test   %edx,%edx
f012e978:	79 23                	jns    f012e99d <vprintfmt+0x29b>
				putch('-', putdat);
f012e97a:	83 ec 08             	sub    $0x8,%esp
f012e97d:	ff 75 0c             	pushl  0xc(%ebp)
f012e980:	6a 2d                	push   $0x2d
f012e982:	8b 45 08             	mov    0x8(%ebp),%eax
f012e985:	ff d0                	call   *%eax
f012e987:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012e98a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e98d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e990:	f7 d8                	neg    %eax
f012e992:	83 d2 00             	adc    $0x0,%edx
f012e995:	f7 da                	neg    %edx
f012e997:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e99a:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012e99d:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012e9a4:	e9 bc 00 00 00       	jmp    f012ea65 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012e9a9:	83 ec 08             	sub    $0x8,%esp
f012e9ac:	ff 75 e8             	pushl  -0x18(%ebp)
f012e9af:	8d 45 14             	lea    0x14(%ebp),%eax
f012e9b2:	50                   	push   %eax
f012e9b3:	e8 84 fc ff ff       	call   f012e63c <getuint>
f012e9b8:	83 c4 10             	add    $0x10,%esp
f012e9bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e9be:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012e9c1:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012e9c8:	e9 98 00 00 00       	jmp    f012ea65 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012e9cd:	83 ec 08             	sub    $0x8,%esp
f012e9d0:	ff 75 0c             	pushl  0xc(%ebp)
f012e9d3:	6a 58                	push   $0x58
f012e9d5:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9d8:	ff d0                	call   *%eax
f012e9da:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012e9dd:	83 ec 08             	sub    $0x8,%esp
f012e9e0:	ff 75 0c             	pushl  0xc(%ebp)
f012e9e3:	6a 58                	push   $0x58
f012e9e5:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9e8:	ff d0                	call   *%eax
f012e9ea:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012e9ed:	83 ec 08             	sub    $0x8,%esp
f012e9f0:	ff 75 0c             	pushl  0xc(%ebp)
f012e9f3:	6a 58                	push   $0x58
f012e9f5:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9f8:	ff d0                	call   *%eax
f012e9fa:	83 c4 10             	add    $0x10,%esp
			break;
f012e9fd:	e9 bc 00 00 00       	jmp    f012eabe <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012ea02:	83 ec 08             	sub    $0x8,%esp
f012ea05:	ff 75 0c             	pushl  0xc(%ebp)
f012ea08:	6a 30                	push   $0x30
f012ea0a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea0d:	ff d0                	call   *%eax
f012ea0f:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012ea12:	83 ec 08             	sub    $0x8,%esp
f012ea15:	ff 75 0c             	pushl  0xc(%ebp)
f012ea18:	6a 78                	push   $0x78
f012ea1a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea1d:	ff d0                	call   *%eax
f012ea1f:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012ea22:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea25:	83 c0 04             	add    $0x4,%eax
f012ea28:	89 45 14             	mov    %eax,0x14(%ebp)
f012ea2b:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea2e:	83 e8 04             	sub    $0x4,%eax
f012ea31:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012ea33:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ea36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012ea3d:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012ea44:	eb 1f                	jmp    f012ea65 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012ea46:	83 ec 08             	sub    $0x8,%esp
f012ea49:	ff 75 e8             	pushl  -0x18(%ebp)
f012ea4c:	8d 45 14             	lea    0x14(%ebp),%eax
f012ea4f:	50                   	push   %eax
f012ea50:	e8 e7 fb ff ff       	call   f012e63c <getuint>
f012ea55:	83 c4 10             	add    $0x10,%esp
f012ea58:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ea5b:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012ea5e:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012ea65:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012ea69:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ea6c:	83 ec 04             	sub    $0x4,%esp
f012ea6f:	52                   	push   %edx
f012ea70:	ff 75 e4             	pushl  -0x1c(%ebp)
f012ea73:	50                   	push   %eax
f012ea74:	ff 75 f4             	pushl  -0xc(%ebp)
f012ea77:	ff 75 f0             	pushl  -0x10(%ebp)
f012ea7a:	ff 75 0c             	pushl  0xc(%ebp)
f012ea7d:	ff 75 08             	pushl  0x8(%ebp)
f012ea80:	e8 00 fb ff ff       	call   f012e585 <printnum>
f012ea85:	83 c4 20             	add    $0x20,%esp
			break;
f012ea88:	eb 34                	jmp    f012eabe <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012ea8a:	83 ec 08             	sub    $0x8,%esp
f012ea8d:	ff 75 0c             	pushl  0xc(%ebp)
f012ea90:	53                   	push   %ebx
f012ea91:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea94:	ff d0                	call   *%eax
f012ea96:	83 c4 10             	add    $0x10,%esp
			break;
f012ea99:	eb 23                	jmp    f012eabe <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012ea9b:	83 ec 08             	sub    $0x8,%esp
f012ea9e:	ff 75 0c             	pushl  0xc(%ebp)
f012eaa1:	6a 25                	push   $0x25
f012eaa3:	8b 45 08             	mov    0x8(%ebp),%eax
f012eaa6:	ff d0                	call   *%eax
f012eaa8:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012eaab:	ff 4d 10             	decl   0x10(%ebp)
f012eaae:	eb 03                	jmp    f012eab3 <vprintfmt+0x3b1>
f012eab0:	ff 4d 10             	decl   0x10(%ebp)
f012eab3:	8b 45 10             	mov    0x10(%ebp),%eax
f012eab6:	48                   	dec    %eax
f012eab7:	8a 00                	mov    (%eax),%al
f012eab9:	3c 25                	cmp    $0x25,%al
f012eabb:	75 f3                	jne    f012eab0 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012eabd:	90                   	nop
		}
	}
f012eabe:	e9 47 fc ff ff       	jmp    f012e70a <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012eac3:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012eac4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012eac7:	5b                   	pop    %ebx
f012eac8:	5e                   	pop    %esi
f012eac9:	5d                   	pop    %ebp
f012eaca:	c3                   	ret    

f012eacb <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012eacb:	55                   	push   %ebp
f012eacc:	89 e5                	mov    %esp,%ebp
f012eace:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012ead1:	8d 45 10             	lea    0x10(%ebp),%eax
f012ead4:	83 c0 04             	add    $0x4,%eax
f012ead7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012eada:	8b 45 10             	mov    0x10(%ebp),%eax
f012eadd:	ff 75 f4             	pushl  -0xc(%ebp)
f012eae0:	50                   	push   %eax
f012eae1:	ff 75 0c             	pushl  0xc(%ebp)
f012eae4:	ff 75 08             	pushl  0x8(%ebp)
f012eae7:	e8 16 fc ff ff       	call   f012e702 <vprintfmt>
f012eaec:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012eaef:	90                   	nop
f012eaf0:	c9                   	leave  
f012eaf1:	c3                   	ret    

f012eaf2 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012eaf2:	55                   	push   %ebp
f012eaf3:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012eaf5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eaf8:	8b 40 08             	mov    0x8(%eax),%eax
f012eafb:	8d 50 01             	lea    0x1(%eax),%edx
f012eafe:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb01:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012eb04:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb07:	8b 10                	mov    (%eax),%edx
f012eb09:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb0c:	8b 40 04             	mov    0x4(%eax),%eax
f012eb0f:	39 c2                	cmp    %eax,%edx
f012eb11:	73 12                	jae    f012eb25 <sprintputch+0x33>
		*b->buf++ = ch;
f012eb13:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb16:	8b 00                	mov    (%eax),%eax
f012eb18:	8d 48 01             	lea    0x1(%eax),%ecx
f012eb1b:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eb1e:	89 0a                	mov    %ecx,(%edx)
f012eb20:	8b 55 08             	mov    0x8(%ebp),%edx
f012eb23:	88 10                	mov    %dl,(%eax)
}
f012eb25:	90                   	nop
f012eb26:	5d                   	pop    %ebp
f012eb27:	c3                   	ret    

f012eb28 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012eb28:	55                   	push   %ebp
f012eb29:	89 e5                	mov    %esp,%ebp
f012eb2b:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012eb2e:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb31:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012eb34:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb37:	8d 50 ff             	lea    -0x1(%eax),%edx
f012eb3a:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb3d:	01 d0                	add    %edx,%eax
f012eb3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012eb42:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012eb49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012eb4d:	74 06                	je     f012eb55 <vsnprintf+0x2d>
f012eb4f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012eb53:	7f 07                	jg     f012eb5c <vsnprintf+0x34>
		return -E_INVAL;
f012eb55:	b8 03 00 00 00       	mov    $0x3,%eax
f012eb5a:	eb 20                	jmp    f012eb7c <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012eb5c:	ff 75 14             	pushl  0x14(%ebp)
f012eb5f:	ff 75 10             	pushl  0x10(%ebp)
f012eb62:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012eb65:	50                   	push   %eax
f012eb66:	68 f2 ea 12 f0       	push   $0xf012eaf2
f012eb6b:	e8 92 fb ff ff       	call   f012e702 <vprintfmt>
f012eb70:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012eb73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012eb76:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012eb79:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012eb7c:	c9                   	leave  
f012eb7d:	c3                   	ret    

f012eb7e <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012eb7e:	55                   	push   %ebp
f012eb7f:	89 e5                	mov    %esp,%ebp
f012eb81:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012eb84:	8d 45 10             	lea    0x10(%ebp),%eax
f012eb87:	83 c0 04             	add    $0x4,%eax
f012eb8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012eb8d:	8b 45 10             	mov    0x10(%ebp),%eax
f012eb90:	ff 75 f4             	pushl  -0xc(%ebp)
f012eb93:	50                   	push   %eax
f012eb94:	ff 75 0c             	pushl  0xc(%ebp)
f012eb97:	ff 75 08             	pushl  0x8(%ebp)
f012eb9a:	e8 89 ff ff ff       	call   f012eb28 <vsnprintf>
f012eb9f:	83 c4 10             	add    $0x10,%esp
f012eba2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012eba5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012eba8:	c9                   	leave  
f012eba9:	c3                   	ret    

f012ebaa <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012ebaa:	55                   	push   %ebp
f012ebab:	89 e5                	mov    %esp,%ebp
f012ebad:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012ebb0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ebb4:	74 13                	je     f012ebc9 <readline+0x1f>
		cprintf("%s", prompt);
f012ebb6:	83 ec 08             	sub    $0x8,%esp
f012ebb9:	ff 75 08             	pushl  0x8(%ebp)
f012ebbc:	68 10 b1 13 f0       	push   $0xf013b110
f012ebc1:	e8 6b 22 fd ff       	call   f0100e31 <cprintf>
f012ebc6:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ebc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ebd0:	83 ec 0c             	sub    $0xc,%esp
f012ebd3:	6a 00                	push   $0x0
f012ebd5:	e8 00 22 fd ff       	call   f0100dda <iscons>
f012ebda:	83 c4 10             	add    $0x10,%esp
f012ebdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ebe0:	e8 dc 21 fd ff       	call   f0100dc1 <getchar>
f012ebe5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ebe8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ebec:	79 22                	jns    f012ec10 <readline+0x66>
			if (c != -E_EOF)
f012ebee:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ebf2:	0f 84 ad 00 00 00    	je     f012eca5 <readline+0xfb>
				cprintf("read error: %e\n", c);
f012ebf8:	83 ec 08             	sub    $0x8,%esp
f012ebfb:	ff 75 ec             	pushl  -0x14(%ebp)
f012ebfe:	68 13 b1 13 f0       	push   $0xf013b113
f012ec03:	e8 29 22 fd ff       	call   f0100e31 <cprintf>
f012ec08:	83 c4 10             	add    $0x10,%esp
			return;
f012ec0b:	e9 95 00 00 00       	jmp    f012eca5 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ec10:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ec14:	7e 34                	jle    f012ec4a <readline+0xa0>
f012ec16:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ec1d:	7f 2b                	jg     f012ec4a <readline+0xa0>
			if (echoing)
f012ec1f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ec23:	74 0e                	je     f012ec33 <readline+0x89>
				cputchar(c);
f012ec25:	83 ec 0c             	sub    $0xc,%esp
f012ec28:	ff 75 ec             	pushl  -0x14(%ebp)
f012ec2b:	e8 7a 21 fd ff       	call   f0100daa <cputchar>
f012ec30:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ec33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ec36:	8d 50 01             	lea    0x1(%eax),%edx
f012ec39:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ec3c:	89 c2                	mov    %eax,%edx
f012ec3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec41:	01 d0                	add    %edx,%eax
f012ec43:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ec46:	88 10                	mov    %dl,(%eax)
f012ec48:	eb 56                	jmp    f012eca0 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012ec4a:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ec4e:	75 1f                	jne    f012ec6f <readline+0xc5>
f012ec50:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ec54:	7e 19                	jle    f012ec6f <readline+0xc5>
			if (echoing)
f012ec56:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ec5a:	74 0e                	je     f012ec6a <readline+0xc0>
				cputchar(c);
f012ec5c:	83 ec 0c             	sub    $0xc,%esp
f012ec5f:	ff 75 ec             	pushl  -0x14(%ebp)
f012ec62:	e8 43 21 fd ff       	call   f0100daa <cputchar>
f012ec67:	83 c4 10             	add    $0x10,%esp

			i--;
f012ec6a:	ff 4d f4             	decl   -0xc(%ebp)
f012ec6d:	eb 31                	jmp    f012eca0 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012ec6f:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ec73:	74 0a                	je     f012ec7f <readline+0xd5>
f012ec75:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ec79:	0f 85 61 ff ff ff    	jne    f012ebe0 <readline+0x36>
			if (echoing)
f012ec7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ec83:	74 0e                	je     f012ec93 <readline+0xe9>
				cputchar(c);
f012ec85:	83 ec 0c             	sub    $0xc,%esp
f012ec88:	ff 75 ec             	pushl  -0x14(%ebp)
f012ec8b:	e8 1a 21 fd ff       	call   f0100daa <cputchar>
f012ec90:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012ec93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ec96:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec99:	01 d0                	add    %edx,%eax
f012ec9b:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012ec9e:	eb 06                	jmp    f012eca6 <readline+0xfc>
		}
	}
f012eca0:	e9 3b ff ff ff       	jmp    f012ebe0 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012eca5:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012eca6:	c9                   	leave  
f012eca7:	c3                   	ret    

f012eca8 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012eca8:	55                   	push   %ebp
f012eca9:	89 e5                	mov    %esp,%ebp
f012ecab:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012ecae:	e8 51 de fd ff       	call   f010cb04 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012ecb3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ecb7:	74 13                	je     f012eccc <atomic_readline+0x24>
		cprintf("%s", prompt);
f012ecb9:	83 ec 08             	sub    $0x8,%esp
f012ecbc:	ff 75 08             	pushl  0x8(%ebp)
f012ecbf:	68 10 b1 13 f0       	push   $0xf013b110
f012ecc4:	e8 68 21 fd ff       	call   f0100e31 <cprintf>
f012ecc9:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012eccc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ecd3:	83 ec 0c             	sub    $0xc,%esp
f012ecd6:	6a 00                	push   $0x0
f012ecd8:	e8 fd 20 fd ff       	call   f0100dda <iscons>
f012ecdd:	83 c4 10             	add    $0x10,%esp
f012ece0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ece3:	e8 d9 20 fd ff       	call   f0100dc1 <getchar>
f012ece8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012eceb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ecef:	79 23                	jns    f012ed14 <atomic_readline+0x6c>
			if (c != -E_EOF)
f012ecf1:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ecf5:	74 13                	je     f012ed0a <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012ecf7:	83 ec 08             	sub    $0x8,%esp
f012ecfa:	ff 75 ec             	pushl  -0x14(%ebp)
f012ecfd:	68 13 b1 13 f0       	push   $0xf013b113
f012ed02:	e8 2a 21 fd ff       	call   f0100e31 <cprintf>
f012ed07:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012ed0a:	e8 0f de fd ff       	call   f010cb1e <sys_enable_interrupt>
			return;
f012ed0f:	e9 9a 00 00 00       	jmp    f012edae <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ed14:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ed18:	7e 34                	jle    f012ed4e <atomic_readline+0xa6>
f012ed1a:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ed21:	7f 2b                	jg     f012ed4e <atomic_readline+0xa6>
			if (echoing)
f012ed23:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ed27:	74 0e                	je     f012ed37 <atomic_readline+0x8f>
				cputchar(c);
f012ed29:	83 ec 0c             	sub    $0xc,%esp
f012ed2c:	ff 75 ec             	pushl  -0x14(%ebp)
f012ed2f:	e8 76 20 fd ff       	call   f0100daa <cputchar>
f012ed34:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ed37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ed3a:	8d 50 01             	lea    0x1(%eax),%edx
f012ed3d:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ed40:	89 c2                	mov    %eax,%edx
f012ed42:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed45:	01 d0                	add    %edx,%eax
f012ed47:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ed4a:	88 10                	mov    %dl,(%eax)
f012ed4c:	eb 5b                	jmp    f012eda9 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f012ed4e:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ed52:	75 1f                	jne    f012ed73 <atomic_readline+0xcb>
f012ed54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ed58:	7e 19                	jle    f012ed73 <atomic_readline+0xcb>
			if (echoing)
f012ed5a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ed5e:	74 0e                	je     f012ed6e <atomic_readline+0xc6>
				cputchar(c);
f012ed60:	83 ec 0c             	sub    $0xc,%esp
f012ed63:	ff 75 ec             	pushl  -0x14(%ebp)
f012ed66:	e8 3f 20 fd ff       	call   f0100daa <cputchar>
f012ed6b:	83 c4 10             	add    $0x10,%esp
			i--;
f012ed6e:	ff 4d f4             	decl   -0xc(%ebp)
f012ed71:	eb 36                	jmp    f012eda9 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f012ed73:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ed77:	74 0a                	je     f012ed83 <atomic_readline+0xdb>
f012ed79:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ed7d:	0f 85 60 ff ff ff    	jne    f012ece3 <atomic_readline+0x3b>
			if (echoing)
f012ed83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ed87:	74 0e                	je     f012ed97 <atomic_readline+0xef>
				cputchar(c);
f012ed89:	83 ec 0c             	sub    $0xc,%esp
f012ed8c:	ff 75 ec             	pushl  -0x14(%ebp)
f012ed8f:	e8 16 20 fd ff       	call   f0100daa <cputchar>
f012ed94:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f012ed97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ed9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed9d:	01 d0                	add    %edx,%eax
f012ed9f:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012eda2:	e8 77 dd fd ff       	call   f010cb1e <sys_enable_interrupt>
			return;
f012eda7:	eb 05                	jmp    f012edae <atomic_readline+0x106>
		}
	}
f012eda9:	e9 35 ff ff ff       	jmp    f012ece3 <atomic_readline+0x3b>
}
f012edae:	c9                   	leave  
f012edaf:	c3                   	ret    

f012edb0 <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f012edb0:	55                   	push   %ebp
f012edb1:	89 e5                	mov    %esp,%ebp
f012edb3:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012edb6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012edbd:	eb 06                	jmp    f012edc5 <strlen+0x15>
		n++;
f012edbf:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012edc2:	ff 45 08             	incl   0x8(%ebp)
f012edc5:	8b 45 08             	mov    0x8(%ebp),%eax
f012edc8:	8a 00                	mov    (%eax),%al
f012edca:	84 c0                	test   %al,%al
f012edcc:	75 f1                	jne    f012edbf <strlen+0xf>
		n++;
	return n;
f012edce:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012edd1:	c9                   	leave  
f012edd2:	c3                   	ret    

f012edd3 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012edd3:	55                   	push   %ebp
f012edd4:	89 e5                	mov    %esp,%ebp
f012edd6:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012edd9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ede0:	eb 09                	jmp    f012edeb <strnlen+0x18>
		n++;
f012ede2:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012ede5:	ff 45 08             	incl   0x8(%ebp)
f012ede8:	ff 4d 0c             	decl   0xc(%ebp)
f012edeb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012edef:	74 09                	je     f012edfa <strnlen+0x27>
f012edf1:	8b 45 08             	mov    0x8(%ebp),%eax
f012edf4:	8a 00                	mov    (%eax),%al
f012edf6:	84 c0                	test   %al,%al
f012edf8:	75 e8                	jne    f012ede2 <strnlen+0xf>
		n++;
	return n;
f012edfa:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012edfd:	c9                   	leave  
f012edfe:	c3                   	ret    

f012edff <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012edff:	55                   	push   %ebp
f012ee00:	89 e5                	mov    %esp,%ebp
f012ee02:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012ee05:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee08:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012ee0b:	90                   	nop
f012ee0c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee0f:	8d 50 01             	lea    0x1(%eax),%edx
f012ee12:	89 55 08             	mov    %edx,0x8(%ebp)
f012ee15:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ee18:	8d 4a 01             	lea    0x1(%edx),%ecx
f012ee1b:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012ee1e:	8a 12                	mov    (%edx),%dl
f012ee20:	88 10                	mov    %dl,(%eax)
f012ee22:	8a 00                	mov    (%eax),%al
f012ee24:	84 c0                	test   %al,%al
f012ee26:	75 e4                	jne    f012ee0c <strcpy+0xd>
		/* do nothing */;
	return ret;
f012ee28:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee2b:	c9                   	leave  
f012ee2c:	c3                   	ret    

f012ee2d <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012ee2d:	55                   	push   %ebp
f012ee2e:	89 e5                	mov    %esp,%ebp
f012ee30:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012ee33:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee36:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f012ee39:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ee40:	eb 1f                	jmp    f012ee61 <strncpy+0x34>
		*dst++ = *src;
f012ee42:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee45:	8d 50 01             	lea    0x1(%eax),%edx
f012ee48:	89 55 08             	mov    %edx,0x8(%ebp)
f012ee4b:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ee4e:	8a 12                	mov    (%edx),%dl
f012ee50:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012ee52:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ee55:	8a 00                	mov    (%eax),%al
f012ee57:	84 c0                	test   %al,%al
f012ee59:	74 03                	je     f012ee5e <strncpy+0x31>
			src++;
f012ee5b:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012ee5e:	ff 45 fc             	incl   -0x4(%ebp)
f012ee61:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ee64:	3b 45 10             	cmp    0x10(%ebp),%eax
f012ee67:	72 d9                	jb     f012ee42 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f012ee69:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012ee6c:	c9                   	leave  
f012ee6d:	c3                   	ret    

f012ee6e <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012ee6e:	55                   	push   %ebp
f012ee6f:	89 e5                	mov    %esp,%ebp
f012ee71:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012ee74:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee77:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f012ee7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ee7e:	74 30                	je     f012eeb0 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012ee80:	eb 16                	jmp    f012ee98 <strlcpy+0x2a>
			*dst++ = *src++;
f012ee82:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee85:	8d 50 01             	lea    0x1(%eax),%edx
f012ee88:	89 55 08             	mov    %edx,0x8(%ebp)
f012ee8b:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ee8e:	8d 4a 01             	lea    0x1(%edx),%ecx
f012ee91:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012ee94:	8a 12                	mov    (%edx),%dl
f012ee96:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f012ee98:	ff 4d 10             	decl   0x10(%ebp)
f012ee9b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ee9f:	74 09                	je     f012eeaa <strlcpy+0x3c>
f012eea1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eea4:	8a 00                	mov    (%eax),%al
f012eea6:	84 c0                	test   %al,%al
f012eea8:	75 d8                	jne    f012ee82 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f012eeaa:	8b 45 08             	mov    0x8(%ebp),%eax
f012eead:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012eeb0:	8b 55 08             	mov    0x8(%ebp),%edx
f012eeb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eeb6:	29 c2                	sub    %eax,%edx
f012eeb8:	89 d0                	mov    %edx,%eax
}
f012eeba:	c9                   	leave  
f012eebb:	c3                   	ret    

f012eebc <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012eebc:	55                   	push   %ebp
f012eebd:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012eebf:	eb 06                	jmp    f012eec7 <strcmp+0xb>
		p++, q++;
f012eec1:	ff 45 08             	incl   0x8(%ebp)
f012eec4:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012eec7:	8b 45 08             	mov    0x8(%ebp),%eax
f012eeca:	8a 00                	mov    (%eax),%al
f012eecc:	84 c0                	test   %al,%al
f012eece:	74 0e                	je     f012eede <strcmp+0x22>
f012eed0:	8b 45 08             	mov    0x8(%ebp),%eax
f012eed3:	8a 10                	mov    (%eax),%dl
f012eed5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eed8:	8a 00                	mov    (%eax),%al
f012eeda:	38 c2                	cmp    %al,%dl
f012eedc:	74 e3                	je     f012eec1 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012eede:	8b 45 08             	mov    0x8(%ebp),%eax
f012eee1:	8a 00                	mov    (%eax),%al
f012eee3:	0f b6 d0             	movzbl %al,%edx
f012eee6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eee9:	8a 00                	mov    (%eax),%al
f012eeeb:	0f b6 c0             	movzbl %al,%eax
f012eeee:	29 c2                	sub    %eax,%edx
f012eef0:	89 d0                	mov    %edx,%eax
}
f012eef2:	5d                   	pop    %ebp
f012eef3:	c3                   	ret    

f012eef4 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012eef4:	55                   	push   %ebp
f012eef5:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012eef7:	eb 09                	jmp    f012ef02 <strncmp+0xe>
		n--, p++, q++;
f012eef9:	ff 4d 10             	decl   0x10(%ebp)
f012eefc:	ff 45 08             	incl   0x8(%ebp)
f012eeff:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012ef02:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ef06:	74 17                	je     f012ef1f <strncmp+0x2b>
f012ef08:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef0b:	8a 00                	mov    (%eax),%al
f012ef0d:	84 c0                	test   %al,%al
f012ef0f:	74 0e                	je     f012ef1f <strncmp+0x2b>
f012ef11:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef14:	8a 10                	mov    (%eax),%dl
f012ef16:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef19:	8a 00                	mov    (%eax),%al
f012ef1b:	38 c2                	cmp    %al,%dl
f012ef1d:	74 da                	je     f012eef9 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012ef1f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ef23:	75 07                	jne    f012ef2c <strncmp+0x38>
		return 0;
f012ef25:	b8 00 00 00 00       	mov    $0x0,%eax
f012ef2a:	eb 14                	jmp    f012ef40 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012ef2c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef2f:	8a 00                	mov    (%eax),%al
f012ef31:	0f b6 d0             	movzbl %al,%edx
f012ef34:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef37:	8a 00                	mov    (%eax),%al
f012ef39:	0f b6 c0             	movzbl %al,%eax
f012ef3c:	29 c2                	sub    %eax,%edx
f012ef3e:	89 d0                	mov    %edx,%eax
}
f012ef40:	5d                   	pop    %ebp
f012ef41:	c3                   	ret    

f012ef42 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f012ef42:	55                   	push   %ebp
f012ef43:	89 e5                	mov    %esp,%ebp
f012ef45:	83 ec 04             	sub    $0x4,%esp
f012ef48:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef4b:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012ef4e:	eb 12                	jmp    f012ef62 <strchr+0x20>
		if (*s == c)
f012ef50:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef53:	8a 00                	mov    (%eax),%al
f012ef55:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012ef58:	75 05                	jne    f012ef5f <strchr+0x1d>
			return (char *) s;
f012ef5a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef5d:	eb 11                	jmp    f012ef70 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012ef5f:	ff 45 08             	incl   0x8(%ebp)
f012ef62:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef65:	8a 00                	mov    (%eax),%al
f012ef67:	84 c0                	test   %al,%al
f012ef69:	75 e5                	jne    f012ef50 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012ef6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012ef70:	c9                   	leave  
f012ef71:	c3                   	ret    

f012ef72 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f012ef72:	55                   	push   %ebp
f012ef73:	89 e5                	mov    %esp,%ebp
f012ef75:	83 ec 04             	sub    $0x4,%esp
f012ef78:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef7b:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012ef7e:	eb 0d                	jmp    f012ef8d <strfind+0x1b>
		if (*s == c)
f012ef80:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef83:	8a 00                	mov    (%eax),%al
f012ef85:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012ef88:	74 0e                	je     f012ef98 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f012ef8a:	ff 45 08             	incl   0x8(%ebp)
f012ef8d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef90:	8a 00                	mov    (%eax),%al
f012ef92:	84 c0                	test   %al,%al
f012ef94:	75 ea                	jne    f012ef80 <strfind+0xe>
f012ef96:	eb 01                	jmp    f012ef99 <strfind+0x27>
		if (*s == c)
			break;
f012ef98:	90                   	nop
	return (char *) s;
f012ef99:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012ef9c:	c9                   	leave  
f012ef9d:	c3                   	ret    

f012ef9e <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012ef9e:	55                   	push   %ebp
f012ef9f:	89 e5                	mov    %esp,%ebp
f012efa1:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012efa4:	8b 45 08             	mov    0x8(%ebp),%eax
f012efa7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f012efaa:	8b 45 10             	mov    0x10(%ebp),%eax
f012efad:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012efb0:	eb 0e                	jmp    f012efc0 <memset+0x22>
		*p++ = c;
f012efb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012efb5:	8d 50 01             	lea    0x1(%eax),%edx
f012efb8:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012efbb:	8b 55 0c             	mov    0xc(%ebp),%edx
f012efbe:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012efc0:	ff 4d f8             	decl   -0x8(%ebp)
f012efc3:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012efc7:	79 e9                	jns    f012efb2 <memset+0x14>
		*p++ = c;

	return v;
f012efc9:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012efcc:	c9                   	leave  
f012efcd:	c3                   	ret    

f012efce <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012efce:	55                   	push   %ebp
f012efcf:	89 e5                	mov    %esp,%ebp
f012efd1:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012efd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efd7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012efda:	8b 45 08             	mov    0x8(%ebp),%eax
f012efdd:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012efe0:	eb 16                	jmp    f012eff8 <memcpy+0x2a>
		*d++ = *s++;
f012efe2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012efe5:	8d 50 01             	lea    0x1(%eax),%edx
f012efe8:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012efeb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012efee:	8d 4a 01             	lea    0x1(%edx),%ecx
f012eff1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012eff4:	8a 12                	mov    (%edx),%dl
f012eff6:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f012eff8:	8b 45 10             	mov    0x10(%ebp),%eax
f012effb:	8d 50 ff             	lea    -0x1(%eax),%edx
f012effe:	89 55 10             	mov    %edx,0x10(%ebp)
f012f001:	85 c0                	test   %eax,%eax
f012f003:	75 dd                	jne    f012efe2 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012f005:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f008:	c9                   	leave  
f012f009:	c3                   	ret    

f012f00a <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f012f00a:	55                   	push   %ebp
f012f00b:	89 e5                	mov    %esp,%ebp
f012f00d:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f010:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f013:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f016:	8b 45 08             	mov    0x8(%ebp),%eax
f012f019:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012f01c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f01f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f022:	73 50                	jae    f012f074 <memmove+0x6a>
f012f024:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f027:	8b 45 10             	mov    0x10(%ebp),%eax
f012f02a:	01 d0                	add    %edx,%eax
f012f02c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f02f:	76 43                	jbe    f012f074 <memmove+0x6a>
		s += n;
f012f031:	8b 45 10             	mov    0x10(%ebp),%eax
f012f034:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f012f037:	8b 45 10             	mov    0x10(%ebp),%eax
f012f03a:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012f03d:	eb 10                	jmp    f012f04f <memmove+0x45>
			*--d = *--s;
f012f03f:	ff 4d f8             	decl   -0x8(%ebp)
f012f042:	ff 4d fc             	decl   -0x4(%ebp)
f012f045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f048:	8a 10                	mov    (%eax),%dl
f012f04a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f04d:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012f04f:	8b 45 10             	mov    0x10(%ebp),%eax
f012f052:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f055:	89 55 10             	mov    %edx,0x10(%ebp)
f012f058:	85 c0                	test   %eax,%eax
f012f05a:	75 e3                	jne    f012f03f <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012f05c:	eb 23                	jmp    f012f081 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012f05e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f061:	8d 50 01             	lea    0x1(%eax),%edx
f012f064:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f067:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f06a:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f06d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f070:	8a 12                	mov    (%edx),%dl
f012f072:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f012f074:	8b 45 10             	mov    0x10(%ebp),%eax
f012f077:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f07a:	89 55 10             	mov    %edx,0x10(%ebp)
f012f07d:	85 c0                	test   %eax,%eax
f012f07f:	75 dd                	jne    f012f05e <memmove+0x54>
			*d++ = *s++;

	return dst;
f012f081:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f084:	c9                   	leave  
f012f085:	c3                   	ret    

f012f086 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012f086:	55                   	push   %ebp
f012f087:	89 e5                	mov    %esp,%ebp
f012f089:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012f08c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f08f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012f092:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f095:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f012f098:	eb 2a                	jmp    f012f0c4 <memcmp+0x3e>
		if (*s1 != *s2)
f012f09a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f09d:	8a 10                	mov    (%eax),%dl
f012f09f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0a2:	8a 00                	mov    (%eax),%al
f012f0a4:	38 c2                	cmp    %al,%dl
f012f0a6:	74 16                	je     f012f0be <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f012f0a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f0ab:	8a 00                	mov    (%eax),%al
f012f0ad:	0f b6 d0             	movzbl %al,%edx
f012f0b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0b3:	8a 00                	mov    (%eax),%al
f012f0b5:	0f b6 c0             	movzbl %al,%eax
f012f0b8:	29 c2                	sub    %eax,%edx
f012f0ba:	89 d0                	mov    %edx,%eax
f012f0bc:	eb 18                	jmp    f012f0d6 <memcmp+0x50>
		s1++, s2++;
f012f0be:	ff 45 fc             	incl   -0x4(%ebp)
f012f0c1:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012f0c4:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0c7:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f0ca:	89 55 10             	mov    %edx,0x10(%ebp)
f012f0cd:	85 c0                	test   %eax,%eax
f012f0cf:	75 c9                	jne    f012f09a <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012f0d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f0d6:	c9                   	leave  
f012f0d7:	c3                   	ret    

f012f0d8 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f012f0d8:	55                   	push   %ebp
f012f0d9:	89 e5                	mov    %esp,%ebp
f012f0db:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012f0de:	8b 55 08             	mov    0x8(%ebp),%edx
f012f0e1:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0e4:	01 d0                	add    %edx,%eax
f012f0e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f012f0e9:	eb 15                	jmp    f012f100 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f012f0eb:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0ee:	8a 00                	mov    (%eax),%al
f012f0f0:	0f b6 d0             	movzbl %al,%edx
f012f0f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f0f6:	0f b6 c0             	movzbl %al,%eax
f012f0f9:	39 c2                	cmp    %eax,%edx
f012f0fb:	74 0d                	je     f012f10a <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012f0fd:	ff 45 08             	incl   0x8(%ebp)
f012f100:	8b 45 08             	mov    0x8(%ebp),%eax
f012f103:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012f106:	72 e3                	jb     f012f0eb <memfind+0x13>
f012f108:	eb 01                	jmp    f012f10b <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f012f10a:	90                   	nop
	return (void *) s;
f012f10b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f10e:	c9                   	leave  
f012f10f:	c3                   	ret    

f012f110 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012f110:	55                   	push   %ebp
f012f111:	89 e5                	mov    %esp,%ebp
f012f113:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012f116:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012f11d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f124:	eb 03                	jmp    f012f129 <strtol+0x19>
		s++;
f012f126:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f129:	8b 45 08             	mov    0x8(%ebp),%eax
f012f12c:	8a 00                	mov    (%eax),%al
f012f12e:	3c 20                	cmp    $0x20,%al
f012f130:	74 f4                	je     f012f126 <strtol+0x16>
f012f132:	8b 45 08             	mov    0x8(%ebp),%eax
f012f135:	8a 00                	mov    (%eax),%al
f012f137:	3c 09                	cmp    $0x9,%al
f012f139:	74 eb                	je     f012f126 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012f13b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f13e:	8a 00                	mov    (%eax),%al
f012f140:	3c 2b                	cmp    $0x2b,%al
f012f142:	75 05                	jne    f012f149 <strtol+0x39>
		s++;
f012f144:	ff 45 08             	incl   0x8(%ebp)
f012f147:	eb 13                	jmp    f012f15c <strtol+0x4c>
	else if (*s == '-')
f012f149:	8b 45 08             	mov    0x8(%ebp),%eax
f012f14c:	8a 00                	mov    (%eax),%al
f012f14e:	3c 2d                	cmp    $0x2d,%al
f012f150:	75 0a                	jne    f012f15c <strtol+0x4c>
		s++, neg = 1;
f012f152:	ff 45 08             	incl   0x8(%ebp)
f012f155:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012f15c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f160:	74 06                	je     f012f168 <strtol+0x58>
f012f162:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f012f166:	75 20                	jne    f012f188 <strtol+0x78>
f012f168:	8b 45 08             	mov    0x8(%ebp),%eax
f012f16b:	8a 00                	mov    (%eax),%al
f012f16d:	3c 30                	cmp    $0x30,%al
f012f16f:	75 17                	jne    f012f188 <strtol+0x78>
f012f171:	8b 45 08             	mov    0x8(%ebp),%eax
f012f174:	40                   	inc    %eax
f012f175:	8a 00                	mov    (%eax),%al
f012f177:	3c 78                	cmp    $0x78,%al
f012f179:	75 0d                	jne    f012f188 <strtol+0x78>
		s += 2, base = 16;
f012f17b:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012f17f:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012f186:	eb 28                	jmp    f012f1b0 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f012f188:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f18c:	75 15                	jne    f012f1a3 <strtol+0x93>
f012f18e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f191:	8a 00                	mov    (%eax),%al
f012f193:	3c 30                	cmp    $0x30,%al
f012f195:	75 0c                	jne    f012f1a3 <strtol+0x93>
		s++, base = 8;
f012f197:	ff 45 08             	incl   0x8(%ebp)
f012f19a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012f1a1:	eb 0d                	jmp    f012f1b0 <strtol+0xa0>
	else if (base == 0)
f012f1a3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f1a7:	75 07                	jne    f012f1b0 <strtol+0xa0>
		base = 10;
f012f1a9:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012f1b0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1b3:	8a 00                	mov    (%eax),%al
f012f1b5:	3c 2f                	cmp    $0x2f,%al
f012f1b7:	7e 19                	jle    f012f1d2 <strtol+0xc2>
f012f1b9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1bc:	8a 00                	mov    (%eax),%al
f012f1be:	3c 39                	cmp    $0x39,%al
f012f1c0:	7f 10                	jg     f012f1d2 <strtol+0xc2>
			dig = *s - '0';
f012f1c2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1c5:	8a 00                	mov    (%eax),%al
f012f1c7:	0f be c0             	movsbl %al,%eax
f012f1ca:	83 e8 30             	sub    $0x30,%eax
f012f1cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f1d0:	eb 42                	jmp    f012f214 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012f1d2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1d5:	8a 00                	mov    (%eax),%al
f012f1d7:	3c 60                	cmp    $0x60,%al
f012f1d9:	7e 19                	jle    f012f1f4 <strtol+0xe4>
f012f1db:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1de:	8a 00                	mov    (%eax),%al
f012f1e0:	3c 7a                	cmp    $0x7a,%al
f012f1e2:	7f 10                	jg     f012f1f4 <strtol+0xe4>
			dig = *s - 'a' + 10;
f012f1e4:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1e7:	8a 00                	mov    (%eax),%al
f012f1e9:	0f be c0             	movsbl %al,%eax
f012f1ec:	83 e8 57             	sub    $0x57,%eax
f012f1ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f1f2:	eb 20                	jmp    f012f214 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012f1f4:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1f7:	8a 00                	mov    (%eax),%al
f012f1f9:	3c 40                	cmp    $0x40,%al
f012f1fb:	7e 39                	jle    f012f236 <strtol+0x126>
f012f1fd:	8b 45 08             	mov    0x8(%ebp),%eax
f012f200:	8a 00                	mov    (%eax),%al
f012f202:	3c 5a                	cmp    $0x5a,%al
f012f204:	7f 30                	jg     f012f236 <strtol+0x126>
			dig = *s - 'A' + 10;
f012f206:	8b 45 08             	mov    0x8(%ebp),%eax
f012f209:	8a 00                	mov    (%eax),%al
f012f20b:	0f be c0             	movsbl %al,%eax
f012f20e:	83 e8 37             	sub    $0x37,%eax
f012f211:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012f214:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f217:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f21a:	7d 19                	jge    f012f235 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012f21c:	ff 45 08             	incl   0x8(%ebp)
f012f21f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f222:	0f af 45 10          	imul   0x10(%ebp),%eax
f012f226:	89 c2                	mov    %eax,%edx
f012f228:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f22b:	01 d0                	add    %edx,%eax
f012f22d:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012f230:	e9 7b ff ff ff       	jmp    f012f1b0 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f012f235:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f012f236:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f23a:	74 08                	je     f012f244 <strtol+0x134>
		*endptr = (char *) s;
f012f23c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f23f:	8b 55 08             	mov    0x8(%ebp),%edx
f012f242:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f012f244:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f248:	74 07                	je     f012f251 <strtol+0x141>
f012f24a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f24d:	f7 d8                	neg    %eax
f012f24f:	eb 03                	jmp    f012f254 <strtol+0x144>
f012f251:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f254:	c9                   	leave  
f012f255:	c3                   	ret    

f012f256 <ltostr>:

void
ltostr(long value, char *str)
{
f012f256:	55                   	push   %ebp
f012f257:	89 e5                	mov    %esp,%ebp
f012f259:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012f25c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f012f263:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f012f26a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f26e:	79 13                	jns    f012f283 <ltostr+0x2d>
	{
		neg = 1;
f012f270:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f012f277:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f27a:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012f27d:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012f280:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012f283:	8b 45 08             	mov    0x8(%ebp),%eax
f012f286:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012f28b:	99                   	cltd   
f012f28c:	f7 f9                	idiv   %ecx
f012f28e:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f012f291:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f294:	8d 50 01             	lea    0x1(%eax),%edx
f012f297:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f29a:	89 c2                	mov    %eax,%edx
f012f29c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f29f:	01 d0                	add    %edx,%eax
f012f2a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f2a4:	83 c2 30             	add    $0x30,%edx
f012f2a7:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f012f2a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f2ac:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f2b1:	f7 e9                	imul   %ecx
f012f2b3:	c1 fa 02             	sar    $0x2,%edx
f012f2b6:	89 c8                	mov    %ecx,%eax
f012f2b8:	c1 f8 1f             	sar    $0x1f,%eax
f012f2bb:	29 c2                	sub    %eax,%edx
f012f2bd:	89 d0                	mov    %edx,%eax
f012f2bf:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f012f2c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f2c5:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f2ca:	f7 e9                	imul   %ecx
f012f2cc:	c1 fa 02             	sar    $0x2,%edx
f012f2cf:	89 c8                	mov    %ecx,%eax
f012f2d1:	c1 f8 1f             	sar    $0x1f,%eax
f012f2d4:	29 c2                	sub    %eax,%edx
f012f2d6:	89 d0                	mov    %edx,%eax
f012f2d8:	c1 e0 02             	shl    $0x2,%eax
f012f2db:	01 d0                	add    %edx,%eax
f012f2dd:	01 c0                	add    %eax,%eax
f012f2df:	29 c1                	sub    %eax,%ecx
f012f2e1:	89 ca                	mov    %ecx,%edx
f012f2e3:	85 d2                	test   %edx,%edx
f012f2e5:	75 9c                	jne    f012f283 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012f2e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f012f2ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f2f1:	48                   	dec    %eax
f012f2f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012f2f5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f2f9:	74 3d                	je     f012f338 <ltostr+0xe2>
		start = 1 ;
f012f2fb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012f302:	eb 34                	jmp    f012f338 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f012f304:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f307:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f30a:	01 d0                	add    %edx,%eax
f012f30c:	8a 00                	mov    (%eax),%al
f012f30e:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012f311:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f314:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f317:	01 c2                	add    %eax,%edx
f012f319:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f012f31c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f31f:	01 c8                	add    %ecx,%eax
f012f321:	8a 00                	mov    (%eax),%al
f012f323:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012f325:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f328:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f32b:	01 c2                	add    %eax,%edx
f012f32d:	8a 45 eb             	mov    -0x15(%ebp),%al
f012f330:	88 02                	mov    %al,(%edx)
		start++ ;
f012f332:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012f335:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012f338:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f33b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f33e:	7c c4                	jl     f012f304 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f012f340:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012f343:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f346:	01 d0                	add    %edx,%eax
f012f348:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012f34b:	90                   	nop
f012f34c:	c9                   	leave  
f012f34d:	c3                   	ret    

f012f34e <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012f34e:	55                   	push   %ebp
f012f34f:	89 e5                	mov    %esp,%ebp
f012f351:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f012f354:	ff 75 08             	pushl  0x8(%ebp)
f012f357:	e8 54 fa ff ff       	call   f012edb0 <strlen>
f012f35c:	83 c4 04             	add    $0x4,%esp
f012f35f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f012f362:	ff 75 0c             	pushl  0xc(%ebp)
f012f365:	e8 46 fa ff ff       	call   f012edb0 <strlen>
f012f36a:	83 c4 04             	add    $0x4,%esp
f012f36d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f012f370:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f012f377:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f37e:	eb 17                	jmp    f012f397 <strcconcat+0x49>
		final[s] = str1[s] ;
f012f380:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f383:	8b 45 10             	mov    0x10(%ebp),%eax
f012f386:	01 c2                	add    %eax,%edx
f012f388:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012f38b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f38e:	01 c8                	add    %ecx,%eax
f012f390:	8a 00                	mov    (%eax),%al
f012f392:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f012f394:	ff 45 fc             	incl   -0x4(%ebp)
f012f397:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f39a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f39d:	7c e1                	jl     f012f380 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012f39f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f012f3a6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012f3ad:	eb 1f                	jmp    f012f3ce <strcconcat+0x80>
		final[s++] = str2[i] ;
f012f3af:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f3b2:	8d 50 01             	lea    0x1(%eax),%edx
f012f3b5:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f3b8:	89 c2                	mov    %eax,%edx
f012f3ba:	8b 45 10             	mov    0x10(%ebp),%eax
f012f3bd:	01 c2                	add    %eax,%edx
f012f3bf:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f012f3c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f3c5:	01 c8                	add    %ecx,%eax
f012f3c7:	8a 00                	mov    (%eax),%al
f012f3c9:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f012f3cb:	ff 45 f8             	incl   -0x8(%ebp)
f012f3ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f3d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f3d4:	7c d9                	jl     f012f3af <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012f3d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f3d9:	8b 45 10             	mov    0x10(%ebp),%eax
f012f3dc:	01 d0                	add    %edx,%eax
f012f3de:	c6 00 00             	movb   $0x0,(%eax)
}
f012f3e1:	90                   	nop
f012f3e2:	c9                   	leave  
f012f3e3:	c3                   	ret    

f012f3e4 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f012f3e4:	55                   	push   %ebp
f012f3e5:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012f3e7:	8b 45 14             	mov    0x14(%ebp),%eax
f012f3ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f012f3f0:	8b 45 14             	mov    0x14(%ebp),%eax
f012f3f3:	8b 00                	mov    (%eax),%eax
f012f3f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f3fc:	8b 45 10             	mov    0x10(%ebp),%eax
f012f3ff:	01 d0                	add    %edx,%eax
f012f401:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f407:	eb 0c                	jmp    f012f415 <strsplit+0x31>
			*string++ = 0;
f012f409:	8b 45 08             	mov    0x8(%ebp),%eax
f012f40c:	8d 50 01             	lea    0x1(%eax),%edx
f012f40f:	89 55 08             	mov    %edx,0x8(%ebp)
f012f412:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f415:	8b 45 08             	mov    0x8(%ebp),%eax
f012f418:	8a 00                	mov    (%eax),%al
f012f41a:	84 c0                	test   %al,%al
f012f41c:	74 18                	je     f012f436 <strsplit+0x52>
f012f41e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f421:	8a 00                	mov    (%eax),%al
f012f423:	0f be c0             	movsbl %al,%eax
f012f426:	50                   	push   %eax
f012f427:	ff 75 0c             	pushl  0xc(%ebp)
f012f42a:	e8 13 fb ff ff       	call   f012ef42 <strchr>
f012f42f:	83 c4 08             	add    $0x8,%esp
f012f432:	85 c0                	test   %eax,%eax
f012f434:	75 d3                	jne    f012f409 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012f436:	8b 45 08             	mov    0x8(%ebp),%eax
f012f439:	8a 00                	mov    (%eax),%al
f012f43b:	84 c0                	test   %al,%al
f012f43d:	74 5a                	je     f012f499 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012f43f:	8b 45 14             	mov    0x14(%ebp),%eax
f012f442:	8b 00                	mov    (%eax),%eax
f012f444:	83 f8 0f             	cmp    $0xf,%eax
f012f447:	75 07                	jne    f012f450 <strsplit+0x6c>
		{
			return 0;
f012f449:	b8 00 00 00 00       	mov    $0x0,%eax
f012f44e:	eb 66                	jmp    f012f4b6 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f012f450:	8b 45 14             	mov    0x14(%ebp),%eax
f012f453:	8b 00                	mov    (%eax),%eax
f012f455:	8d 48 01             	lea    0x1(%eax),%ecx
f012f458:	8b 55 14             	mov    0x14(%ebp),%edx
f012f45b:	89 0a                	mov    %ecx,(%edx)
f012f45d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f464:	8b 45 10             	mov    0x10(%ebp),%eax
f012f467:	01 c2                	add    %eax,%edx
f012f469:	8b 45 08             	mov    0x8(%ebp),%eax
f012f46c:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f46e:	eb 03                	jmp    f012f473 <strsplit+0x8f>
			string++;
f012f470:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f473:	8b 45 08             	mov    0x8(%ebp),%eax
f012f476:	8a 00                	mov    (%eax),%al
f012f478:	84 c0                	test   %al,%al
f012f47a:	74 8b                	je     f012f407 <strsplit+0x23>
f012f47c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f47f:	8a 00                	mov    (%eax),%al
f012f481:	0f be c0             	movsbl %al,%eax
f012f484:	50                   	push   %eax
f012f485:	ff 75 0c             	pushl  0xc(%ebp)
f012f488:	e8 b5 fa ff ff       	call   f012ef42 <strchr>
f012f48d:	83 c4 08             	add    $0x8,%esp
f012f490:	85 c0                	test   %eax,%eax
f012f492:	74 dc                	je     f012f470 <strsplit+0x8c>
			string++;
	}
f012f494:	e9 6e ff ff ff       	jmp    f012f407 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f012f499:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012f49a:	8b 45 14             	mov    0x14(%ebp),%eax
f012f49d:	8b 00                	mov    (%eax),%eax
f012f49f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f4a6:	8b 45 10             	mov    0x10(%ebp),%eax
f012f4a9:	01 d0                	add    %edx,%eax
f012f4ab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f012f4b1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012f4b6:	c9                   	leave  
f012f4b7:	c3                   	ret    

f012f4b8 <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f012f4b8:	55                   	push   %ebp
f012f4b9:	89 e5                	mov    %esp,%ebp
f012f4bb:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	panic("process_command is not implemented yet");
f012f4be:	83 ec 04             	sub    $0x4,%esp
f012f4c1:	68 24 b1 13 f0       	push   $0xf013b124
f012f4c6:	68 3e 01 00 00       	push   $0x13e
f012f4cb:	68 4b b1 13 f0       	push   $0xf013b14b
f012f4d0:	e8 db 0c fd ff       	call   f01001b0 <_panic>

f012f4d5 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f012f4d5:	55                   	push   %ebp
f012f4d6:	89 e5                	mov    %esp,%ebp
f012f4d8:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012f4db:	90                   	nop
f012f4dc:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f012f4e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f4e6:	89 c2                	mov    %eax,%edx
f012f4e8:	ec                   	in     (%dx),%al
f012f4e9:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012f4ec:	8a 45 f7             	mov    -0x9(%ebp),%al
f012f4ef:	0f b6 c0             	movzbl %al,%eax
f012f4f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f012f4f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f4f8:	25 c0 00 00 00       	and    $0xc0,%eax
f012f4fd:	83 f8 40             	cmp    $0x40,%eax
f012f500:	75 da                	jne    f012f4dc <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f012f502:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f506:	74 11                	je     f012f519 <ide_wait_ready+0x44>
f012f508:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f50b:	83 e0 21             	and    $0x21,%eax
f012f50e:	85 c0                	test   %eax,%eax
f012f510:	74 07                	je     f012f519 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f012f512:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f517:	eb 05                	jmp    f012f51e <ide_wait_ready+0x49>
	}
	return 0;
f012f519:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f51e:	c9                   	leave  
f012f51f:	c3                   	ret    

f012f520 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f012f520:	55                   	push   %ebp
f012f521:	89 e5                	mov    %esp,%ebp
f012f523:	57                   	push   %edi
f012f524:	53                   	push   %ebx
f012f525:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012f528:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f52f:	76 16                	jbe    f012f547 <ide_read+0x27>
f012f531:	68 58 b1 13 f0       	push   $0xf013b158
f012f536:	68 65 b1 13 f0       	push   $0xf013b165
f012f53b:	6a 25                	push   $0x25
f012f53d:	68 7a b1 13 f0       	push   $0xf013b17a
f012f542:	e8 69 0c fd ff       	call   f01001b0 <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f012f547:	83 ec 0c             	sub    $0xc,%esp
f012f54a:	6a 00                	push   $0x0
f012f54c:	e8 84 ff ff ff       	call   f012f4d5 <ide_wait_ready>
f012f551:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f012f554:	8b 45 10             	mov    0x10(%ebp),%eax
f012f557:	0f b6 c0             	movzbl %al,%eax
f012f55a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f561:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f564:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f567:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f56a:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f56b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f56e:	0f b6 c0             	movzbl %al,%eax
f012f571:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f578:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f57b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f57e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f581:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f582:	8b 45 08             	mov    0x8(%ebp),%eax
f012f585:	c1 e8 08             	shr    $0x8,%eax
f012f588:	0f b6 c0             	movzbl %al,%eax
f012f58b:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f592:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f595:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f598:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f59b:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f59c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f59f:	c1 e8 10             	shr    $0x10,%eax
f012f5a2:	0f b6 c0             	movzbl %al,%eax
f012f5a5:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f5ac:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f5af:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f5b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f5b5:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f5b6:	a1 ec 2a 25 f0       	mov    0xf0252aec,%eax
f012f5bb:	83 e0 01             	and    $0x1,%eax
f012f5be:	c1 e0 04             	shl    $0x4,%eax
f012f5c1:	88 c2                	mov    %al,%dl
f012f5c3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f5c6:	c1 e8 18             	shr    $0x18,%eax
f012f5c9:	83 e0 0f             	and    $0xf,%eax
f012f5cc:	09 d0                	or     %edx,%eax
f012f5ce:	83 c8 e0             	or     $0xffffffe0,%eax
f012f5d1:	0f b6 c0             	movzbl %al,%eax
f012f5d4:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f5db:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f5de:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f5e1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f5e4:	ee                   	out    %al,(%dx)
f012f5e5:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f5ec:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f012f5f0:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f5f3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f5f6:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f5f7:	eb 55                	jmp    f012f64e <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f5f9:	83 ec 0c             	sub    $0xc,%esp
f012f5fc:	6a 01                	push   $0x1
f012f5fe:	e8 d2 fe ff ff       	call   f012f4d5 <ide_wait_ready>
f012f603:	83 c4 10             	add    $0x10,%esp
f012f606:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f609:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f60d:	79 05                	jns    f012f614 <ide_read+0xf4>
			return r;
f012f60f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f612:	eb 45                	jmp    f012f659 <ide_read+0x139>
f012f614:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f61b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f61e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f621:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012f628:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f62b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f62e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f631:	89 cb                	mov    %ecx,%ebx
f012f633:	89 df                	mov    %ebx,%edi
f012f635:	89 c1                	mov    %eax,%ecx
f012f637:	fc                   	cld    
f012f638:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012f63a:	89 c8                	mov    %ecx,%eax
f012f63c:	89 fb                	mov    %edi,%ebx
f012f63e:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f641:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f644:	ff 4d 10             	decl   0x10(%ebp)
f012f647:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f64e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f652:	75 a5                	jne    f012f5f9 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f012f654:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f659:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f65c:	5b                   	pop    %ebx
f012f65d:	5f                   	pop    %edi
f012f65e:	5d                   	pop    %ebp
f012f65f:	c3                   	ret    

f012f660 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f012f660:	55                   	push   %ebp
f012f661:	89 e5                	mov    %esp,%ebp
f012f663:	56                   	push   %esi
f012f664:	53                   	push   %ebx
f012f665:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f012f668:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f66f:	76 16                	jbe    f012f687 <ide_write+0x27>
f012f671:	68 58 b1 13 f0       	push   $0xf013b158
f012f676:	68 65 b1 13 f0       	push   $0xf013b165
f012f67b:	6a 3f                	push   $0x3f
f012f67d:	68 7a b1 13 f0       	push   $0xf013b17a
f012f682:	e8 29 0b fd ff       	call   f01001b0 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f012f687:	83 ec 0c             	sub    $0xc,%esp
f012f68a:	6a 00                	push   $0x0
f012f68c:	e8 44 fe ff ff       	call   f012f4d5 <ide_wait_ready>
f012f691:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f012f694:	8b 45 10             	mov    0x10(%ebp),%eax
f012f697:	0f b6 c0             	movzbl %al,%eax
f012f69a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f6a1:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f6a4:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f6a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f6aa:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f6ab:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6ae:	0f b6 c0             	movzbl %al,%eax
f012f6b1:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f6b8:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f6bb:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f6be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f6c1:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f6c2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6c5:	c1 e8 08             	shr    $0x8,%eax
f012f6c8:	0f b6 c0             	movzbl %al,%eax
f012f6cb:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f6d2:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f6d5:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f6d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f6db:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f6dc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6df:	c1 e8 10             	shr    $0x10,%eax
f012f6e2:	0f b6 c0             	movzbl %al,%eax
f012f6e5:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f6ec:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f6ef:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f6f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f6f5:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f6f6:	a1 ec 2a 25 f0       	mov    0xf0252aec,%eax
f012f6fb:	83 e0 01             	and    $0x1,%eax
f012f6fe:	c1 e0 04             	shl    $0x4,%eax
f012f701:	88 c2                	mov    %al,%dl
f012f703:	8b 45 08             	mov    0x8(%ebp),%eax
f012f706:	c1 e8 18             	shr    $0x18,%eax
f012f709:	83 e0 0f             	and    $0xf,%eax
f012f70c:	09 d0                	or     %edx,%eax
f012f70e:	83 c8 e0             	or     $0xffffffe0,%eax
f012f711:	0f b6 c0             	movzbl %al,%eax
f012f714:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f71b:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f71e:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f721:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f724:	ee                   	out    %al,(%dx)
f012f725:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f72c:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f012f730:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f733:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f736:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f737:	eb 55                	jmp    f012f78e <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f739:	83 ec 0c             	sub    $0xc,%esp
f012f73c:	6a 01                	push   $0x1
f012f73e:	e8 92 fd ff ff       	call   f012f4d5 <ide_wait_ready>
f012f743:	83 c4 10             	add    $0x10,%esp
f012f746:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f749:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f74d:	79 05                	jns    f012f754 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f012f74f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f752:	eb 45                	jmp    f012f799 <ide_write+0x139>
f012f754:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f75b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f75e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f761:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f012f768:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f76b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f76e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f771:	89 cb                	mov    %ecx,%ebx
f012f773:	89 de                	mov    %ebx,%esi
f012f775:	89 c1                	mov    %eax,%ecx
f012f777:	fc                   	cld    
f012f778:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012f77a:	89 c8                	mov    %ecx,%eax
f012f77c:	89 f3                	mov    %esi,%ebx
f012f77e:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f781:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f784:	ff 4d 10             	decl   0x10(%ebp)
f012f787:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f78e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f792:	75 a5                	jne    f012f739 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f012f794:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f799:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f79c:	5b                   	pop    %ebx
f012f79d:	5e                   	pop    %esi
f012f79e:	5d                   	pop    %ebp
f012f79f:	c3                   	ret    

f012f7a0 <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va)
{
f012f7a0:	55                   	push   %ebp
f012f7a1:	89 e5                	mov    %esp,%ebp
f012f7a3:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f7a6:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7a9:	83 e8 10             	sub    $0x10,%eax
f012f7ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size ;
f012f7af:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f7b2:	8b 00                	mov    (%eax),%eax
}
f012f7b4:	c9                   	leave  
f012f7b5:	c3                   	ret    

f012f7b6 <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va)
{
f012f7b6:	55                   	push   %ebp
f012f7b7:	89 e5                	mov    %esp,%ebp
f012f7b9:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f7bc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7bf:	83 e8 10             	sub    $0x10,%eax
f012f7c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free ;
f012f7c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f7c8:	8a 40 04             	mov    0x4(%eax),%al
}
f012f7cb:	c9                   	leave  
f012f7cc:	c3                   	ret    

f012f7cd <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f012f7cd:	55                   	push   %ebp
f012f7ce:	89 e5                	mov    %esp,%ebp
f012f7d0:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f012f7d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f012f7da:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7dd:	83 f8 02             	cmp    $0x2,%eax
f012f7e0:	74 2b                	je     f012f80d <alloc_block+0x40>
f012f7e2:	83 f8 02             	cmp    $0x2,%eax
f012f7e5:	7f 07                	jg     f012f7ee <alloc_block+0x21>
f012f7e7:	83 f8 01             	cmp    $0x1,%eax
f012f7ea:	74 0e                	je     f012f7fa <alloc_block+0x2d>
f012f7ec:	eb 58                	jmp    f012f846 <alloc_block+0x79>
f012f7ee:	83 f8 03             	cmp    $0x3,%eax
f012f7f1:	74 2d                	je     f012f820 <alloc_block+0x53>
f012f7f3:	83 f8 04             	cmp    $0x4,%eax
f012f7f6:	74 3b                	je     f012f833 <alloc_block+0x66>
f012f7f8:	eb 4c                	jmp    f012f846 <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f012f7fa:	83 ec 0c             	sub    $0xc,%esp
f012f7fd:	ff 75 08             	pushl  0x8(%ebp)
f012f800:	e8 26 01 00 00       	call   f012f92b <alloc_block_FF>
f012f805:	83 c4 10             	add    $0x10,%esp
f012f808:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f80b:	eb 4a                	jmp    f012f857 <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012f80d:	83 ec 0c             	sub    $0xc,%esp
f012f810:	ff 75 08             	pushl  0x8(%ebp)
f012f813:	e8 64 01 00 00       	call   f012f97c <alloc_block_NF>
f012f818:	83 c4 10             	add    $0x10,%esp
f012f81b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f81e:	eb 37                	jmp    f012f857 <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012f820:	83 ec 0c             	sub    $0xc,%esp
f012f823:	ff 75 08             	pushl  0x8(%ebp)
f012f826:	e8 1a 01 00 00       	call   f012f945 <alloc_block_BF>
f012f82b:	83 c4 10             	add    $0x10,%esp
f012f82e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f831:	eb 24                	jmp    f012f857 <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f012f833:	83 ec 0c             	sub    $0xc,%esp
f012f836:	ff 75 08             	pushl  0x8(%ebp)
f012f839:	e8 21 01 00 00       	call   f012f95f <alloc_block_WF>
f012f83e:	83 c4 10             	add    $0x10,%esp
f012f841:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f844:	eb 11                	jmp    f012f857 <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f012f846:	83 ec 0c             	sub    $0xc,%esp
f012f849:	68 88 b1 13 f0       	push   $0xf013b188
f012f84e:	e8 de 15 fd ff       	call   f0100e31 <cprintf>
f012f853:	83 c4 10             	add    $0x10,%esp
		break;
f012f856:	90                   	nop
	}
	return va;
f012f857:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012f85a:	c9                   	leave  
f012f85b:	c3                   	ret    

f012f85c <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f012f85c:	55                   	push   %ebp
f012f85d:	89 e5                	mov    %esp,%ebp
f012f85f:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f012f862:	83 ec 0c             	sub    $0xc,%esp
f012f865:	68 a8 b1 13 f0       	push   $0xf013b1a8
f012f86a:	e8 c2 15 fd ff       	call   f0100e31 <cprintf>
f012f86f:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f012f872:	83 ec 0c             	sub    $0xc,%esp
f012f875:	68 d3 b1 13 f0       	push   $0xf013b1d3
f012f87a:	e8 b2 15 fd ff       	call   f0100e31 <cprintf>
f012f87f:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f012f882:	8b 45 08             	mov    0x8(%ebp),%eax
f012f885:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f888:	eb 26                	jmp    f012f8b0 <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
f012f88a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f88d:	8a 40 04             	mov    0x4(%eax),%al
f012f890:	0f b6 d0             	movzbl %al,%edx
f012f893:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f896:	8b 00                	mov    (%eax),%eax
f012f898:	83 ec 04             	sub    $0x4,%esp
f012f89b:	52                   	push   %edx
f012f89c:	50                   	push   %eax
f012f89d:	68 eb b1 13 f0       	push   $0xf013b1eb
f012f8a2:	e8 8a 15 fd ff       	call   f0100e31 <cprintf>
f012f8a7:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012f8aa:	8b 45 10             	mov    0x10(%ebp),%eax
f012f8ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f8b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f8b4:	74 08                	je     f012f8be <print_blocks_list+0x62>
f012f8b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f8b9:	8b 40 08             	mov    0x8(%eax),%eax
f012f8bc:	eb 05                	jmp    f012f8c3 <print_blocks_list+0x67>
f012f8be:	b8 00 00 00 00       	mov    $0x0,%eax
f012f8c3:	89 45 10             	mov    %eax,0x10(%ebp)
f012f8c6:	8b 45 10             	mov    0x10(%ebp),%eax
f012f8c9:	85 c0                	test   %eax,%eax
f012f8cb:	75 bd                	jne    f012f88a <print_blocks_list+0x2e>
f012f8cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f8d1:	75 b7                	jne    f012f88a <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
	}
	cprintf("=========================================\n");
f012f8d3:	83 ec 0c             	sub    $0xc,%esp
f012f8d6:	68 a8 b1 13 f0       	push   $0xf013b1a8
f012f8db:	e8 51 15 fd ff       	call   f0100e31 <cprintf>
f012f8e0:	83 c4 10             	add    $0x10,%esp

}
f012f8e3:	90                   	nop
f012f8e4:	c9                   	leave  
f012f8e5:	c3                   	ret    

f012f8e6 <initialize_dynamic_allocator>:

//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart , uint32 initSizeOfAllocatedSpace)
{
f012f8e6:	55                   	push   %ebp
f012f8e7:	89 e5                	mov    %esp,%ebp
f012f8e9:	83 ec 10             	sub    $0x10,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
f012f8ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f8f0:	74 36                	je     f012f928 <initialize_dynamic_allocator+0x42>
	//=========================================
	//=========================================

	//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
	//panic("initialize_dynamic_allocator is not implemented yet");
	struct BlockMetaData* firstMeta=(struct BlockMetaData*)daStart;;
f012f8f2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	Heap_MetaBlock.lh_first = firstMeta;
f012f8f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f8fb:	a3 2c d6 2d f0       	mov    %eax,0xf02dd62c
	firstMeta->prev_next_info.le_next = NULL;
f012f900:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f903:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	firstMeta->prev_next_info.le_prev = NULL;
f012f90a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f90d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	firstMeta->is_free = 1;
f012f914:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f917:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	firstMeta->size = initSizeOfAllocatedSpace-sizeOfMetaData();
f012f91b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f91e:	8d 50 f0             	lea    -0x10(%eax),%edx
f012f921:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f924:	89 10                	mov    %edx,(%eax)
f012f926:	eb 01                	jmp    f012f929 <initialize_dynamic_allocator+0x43>
void initialize_dynamic_allocator(uint32 daStart , uint32 initSizeOfAllocatedSpace)
{
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
		return ;
f012f928:	90                   	nop
	firstMeta->prev_next_info.le_prev = NULL;
	firstMeta->is_free = 1;
	firstMeta->size = initSizeOfAllocatedSpace-sizeOfMetaData();


}
f012f929:	c9                   	leave  
f012f92a:	c3                   	ret    

f012f92b <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
f012f92b:	55                   	push   %ebp
f012f92c:	89 e5                	mov    %esp,%ebp
f012f92e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #6] [3] DYNAMIC ALLOCATOR - alloc_block_FF()
	panic("alloc_block_FF is not implemented yet");
f012f931:	83 ec 04             	sub    $0x4,%esp
f012f934:	68 04 b2 13 f0       	push   $0xf013b204
f012f939:	6a 74                	push   $0x74
f012f93b:	68 2a b2 13 f0       	push   $0xf013b22a
f012f940:	e8 6b 08 fd ff       	call   f01001b0 <_panic>

f012f945 <alloc_block_BF>:
}
//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f012f945:	55                   	push   %ebp
f012f946:	89 e5                	mov    %esp,%ebp
f012f948:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF()
	panic("alloc_block_BF is not implemented yet");
f012f94b:	83 ec 04             	sub    $0x4,%esp
f012f94e:	68 44 b2 13 f0       	push   $0xf013b244
f012f953:	6a 7d                	push   $0x7d
f012f955:	68 2a b2 13 f0       	push   $0xf013b22a
f012f95a:	e8 51 08 fd ff       	call   f01001b0 <_panic>

f012f95f <alloc_block_WF>:

//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f012f95f:	55                   	push   %ebp
f012f960:	89 e5                	mov    %esp,%ebp
f012f962:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f012f965:	83 ec 04             	sub    $0x4,%esp
f012f968:	68 6c b2 13 f0       	push   $0xf013b26c
f012f96d:	68 86 00 00 00       	push   $0x86
f012f972:	68 2a b2 13 f0       	push   $0xf013b22a
f012f977:	e8 34 08 fd ff       	call   f01001b0 <_panic>

f012f97c <alloc_block_NF>:

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f012f97c:	55                   	push   %ebp
f012f97d:	89 e5                	mov    %esp,%ebp
f012f97f:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f012f982:	83 ec 04             	sub    $0x4,%esp
f012f985:	68 94 b2 13 f0       	push   $0xf013b294
f012f98a:	68 8f 00 00 00       	push   $0x8f
f012f98f:	68 2a b2 13 f0       	push   $0xf013b22a
f012f994:	e8 17 08 fd ff       	call   f01001b0 <_panic>

f012f999 <free_block>:

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
f012f999:	55                   	push   %ebp
f012f99a:	89 e5                	mov    %esp,%ebp
f012f99c:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()

	struct BlockMetaData *currBlock = ((struct BlockMetaData *)va - 1) ;
f012f99f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9a2:	83 e8 10             	sub    $0x10,%eax
f012f9a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct BlockMetaData *nextBlock= currBlock->prev_next_info.le_next;
f012f9a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9ab:	8b 40 08             	mov    0x8(%eax),%eax
f012f9ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
	struct BlockMetaData *prevBlock =currBlock->prev_next_info.le_prev;
f012f9b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9b4:	8b 40 0c             	mov    0xc(%eax),%eax
f012f9b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(va==NULL){
f012f9ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f9be:	0f 84 03 01 00 00    	je     f012fac7 <free_block+0x12e>
		//cpritf("Enter a valid address");
		return;
	}
	else if(is_free_block(va)){
f012f9c4:	ff 75 08             	pushl  0x8(%ebp)
f012f9c7:	e8 ea fd ff ff       	call   f012f7b6 <is_free_block>
f012f9cc:	83 c4 04             	add    $0x4,%esp
f012f9cf:	84 c0                	test   %al,%al
f012f9d1:	0f 85 f3 00 00 00    	jne    f012faca <free_block+0x131>
		//cpritf("block is already free");
		return;
	}
	else if (!is_free_block(va)&&!nextBlock->is_free&&!prevBlock->is_free){
f012f9d7:	ff 75 08             	pushl  0x8(%ebp)
f012f9da:	e8 d7 fd ff ff       	call   f012f7b6 <is_free_block>
f012f9df:	83 c4 04             	add    $0x4,%esp
f012f9e2:	84 c0                	test   %al,%al
f012f9e4:	75 20                	jne    f012fa06 <free_block+0x6d>
f012f9e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f9e9:	8a 40 04             	mov    0x4(%eax),%al
f012f9ec:	84 c0                	test   %al,%al
f012f9ee:	75 16                	jne    f012fa06 <free_block+0x6d>
f012f9f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f9f3:	8a 40 04             	mov    0x4(%eax),%al
f012f9f6:	84 c0                	test   %al,%al
f012f9f8:	75 0c                	jne    f012fa06 <free_block+0x6d>
		currBlock->is_free=1;
f012f9fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9fd:	c6 40 04 01          	movb   $0x1,0x4(%eax)
f012fa01:	e9 c5 00 00 00       	jmp    f012facb <free_block+0x132>
	}
	else if(prevBlock->is_free&&!nextBlock->is_free){
f012fa06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa09:	8a 40 04             	mov    0x4(%eax),%al
f012fa0c:	84 c0                	test   %al,%al
f012fa0e:	74 32                	je     f012fa42 <free_block+0xa9>
f012fa10:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa13:	8a 40 04             	mov    0x4(%eax),%al
f012fa16:	84 c0                	test   %al,%al
f012fa18:	75 28                	jne    f012fa42 <free_block+0xa9>
		prevBlock->size+=currBlock->size;
f012fa1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa1d:	8b 10                	mov    (%eax),%edx
f012fa1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa22:	8b 00                	mov    (%eax),%eax
f012fa24:	01 c2                	add    %eax,%edx
f012fa26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa29:	89 10                	mov    %edx,(%eax)
		nextBlock->prev_next_info.le_prev=prevBlock;
f012fa2b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fa31:	89 50 0c             	mov    %edx,0xc(%eax)
		prevBlock->prev_next_info.le_next=nextBlock;
f012fa34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa37:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012fa3a:	89 50 08             	mov    %edx,0x8(%eax)
f012fa3d:	e9 89 00 00 00       	jmp    f012facb <free_block+0x132>

	}
	else if(!prevBlock->is_free&&nextBlock->is_free){
f012fa42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa45:	8a 40 04             	mov    0x4(%eax),%al
f012fa48:	84 c0                	test   %al,%al
f012fa4a:	75 35                	jne    f012fa81 <free_block+0xe8>
f012fa4c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa4f:	8a 40 04             	mov    0x4(%eax),%al
f012fa52:	84 c0                	test   %al,%al
f012fa54:	74 2b                	je     f012fa81 <free_block+0xe8>
		currBlock->size+=nextBlock->size;
f012fa56:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa59:	8b 10                	mov    (%eax),%edx
f012fa5b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa5e:	8b 00                	mov    (%eax),%eax
f012fa60:	01 c2                	add    %eax,%edx
f012fa62:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa65:	89 10                	mov    %edx,(%eax)
		nextBlock->prev_next_info.le_next->prev_next_info.le_prev=currBlock;
f012fa67:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa6a:	8b 40 08             	mov    0x8(%eax),%eax
f012fa6d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012fa70:	89 50 0c             	mov    %edx,0xc(%eax)
		currBlock->prev_next_info.le_next=nextBlock->prev_next_info.le_next;
f012fa73:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa76:	8b 50 08             	mov    0x8(%eax),%edx
f012fa79:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa7c:	89 50 08             	mov    %edx,0x8(%eax)
f012fa7f:	eb 4a                	jmp    f012facb <free_block+0x132>
	}
	else if(prevBlock->is_free&&nextBlock->is_free){
f012fa81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa84:	8a 40 04             	mov    0x4(%eax),%al
f012fa87:	84 c0                	test   %al,%al
f012fa89:	74 40                	je     f012facb <free_block+0x132>
f012fa8b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa8e:	8a 40 04             	mov    0x4(%eax),%al
f012fa91:	84 c0                	test   %al,%al
f012fa93:	74 36                	je     f012facb <free_block+0x132>
		prevBlock->size+=nextBlock->size+currBlock->size;
f012fa95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa98:	8b 10                	mov    (%eax),%edx
f012fa9a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa9d:	8b 08                	mov    (%eax),%ecx
f012fa9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012faa2:	8b 00                	mov    (%eax),%eax
f012faa4:	01 c8                	add    %ecx,%eax
f012faa6:	01 c2                	add    %eax,%edx
f012faa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012faab:	89 10                	mov    %edx,(%eax)
		nextBlock->prev_next_info.le_next->prev_next_info.le_prev=prevBlock;
f012faad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fab0:	8b 40 08             	mov    0x8(%eax),%eax
f012fab3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fab6:	89 50 0c             	mov    %edx,0xc(%eax)
		prevBlock->prev_next_info.le_next=nextBlock->prev_next_info.le_next;
f012fab9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fabc:	8b 50 08             	mov    0x8(%eax),%edx
f012fabf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fac2:	89 50 08             	mov    %edx,0x8(%eax)
f012fac5:	eb 04                	jmp    f012facb <free_block+0x132>
	struct BlockMetaData *currBlock = ((struct BlockMetaData *)va - 1) ;
	struct BlockMetaData *nextBlock= currBlock->prev_next_info.le_next;
	struct BlockMetaData *prevBlock =currBlock->prev_next_info.le_prev;
	if(va==NULL){
		//cpritf("Enter a valid address");
		return;
f012fac7:	90                   	nop
f012fac8:	eb 01                	jmp    f012facb <free_block+0x132>
	}
	else if(is_free_block(va)){
		//cpritf("block is already free");
		return;
f012faca:	90                   	nop
	//struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;




}
f012facb:	c9                   	leave  
f012facc:	c3                   	ret    

f012facd <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f012facd:	55                   	push   %ebp
f012face:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	//panic("realloc_block_FF is not implemented yet");
	return NULL;
f012fad0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fad5:	5d                   	pop    %ebp
f012fad6:	c3                   	ret    
f012fad7:	90                   	nop

f012fad8 <__udivdi3>:
f012fad8:	55                   	push   %ebp
f012fad9:	57                   	push   %edi
f012fada:	56                   	push   %esi
f012fadb:	53                   	push   %ebx
f012fadc:	83 ec 1c             	sub    $0x1c,%esp
f012fadf:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f012fae3:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f012fae7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012faeb:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f012faef:	89 ca                	mov    %ecx,%edx
f012faf1:	89 f8                	mov    %edi,%eax
f012faf3:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f012faf7:	85 f6                	test   %esi,%esi
f012faf9:	75 2d                	jne    f012fb28 <__udivdi3+0x50>
f012fafb:	39 cf                	cmp    %ecx,%edi
f012fafd:	77 65                	ja     f012fb64 <__udivdi3+0x8c>
f012faff:	89 fd                	mov    %edi,%ebp
f012fb01:	85 ff                	test   %edi,%edi
f012fb03:	75 0b                	jne    f012fb10 <__udivdi3+0x38>
f012fb05:	b8 01 00 00 00       	mov    $0x1,%eax
f012fb0a:	31 d2                	xor    %edx,%edx
f012fb0c:	f7 f7                	div    %edi
f012fb0e:	89 c5                	mov    %eax,%ebp
f012fb10:	31 d2                	xor    %edx,%edx
f012fb12:	89 c8                	mov    %ecx,%eax
f012fb14:	f7 f5                	div    %ebp
f012fb16:	89 c1                	mov    %eax,%ecx
f012fb18:	89 d8                	mov    %ebx,%eax
f012fb1a:	f7 f5                	div    %ebp
f012fb1c:	89 cf                	mov    %ecx,%edi
f012fb1e:	89 fa                	mov    %edi,%edx
f012fb20:	83 c4 1c             	add    $0x1c,%esp
f012fb23:	5b                   	pop    %ebx
f012fb24:	5e                   	pop    %esi
f012fb25:	5f                   	pop    %edi
f012fb26:	5d                   	pop    %ebp
f012fb27:	c3                   	ret    
f012fb28:	39 ce                	cmp    %ecx,%esi
f012fb2a:	77 28                	ja     f012fb54 <__udivdi3+0x7c>
f012fb2c:	0f bd fe             	bsr    %esi,%edi
f012fb2f:	83 f7 1f             	xor    $0x1f,%edi
f012fb32:	75 40                	jne    f012fb74 <__udivdi3+0x9c>
f012fb34:	39 ce                	cmp    %ecx,%esi
f012fb36:	72 0a                	jb     f012fb42 <__udivdi3+0x6a>
f012fb38:	3b 44 24 08          	cmp    0x8(%esp),%eax
f012fb3c:	0f 87 9e 00 00 00    	ja     f012fbe0 <__udivdi3+0x108>
f012fb42:	b8 01 00 00 00       	mov    $0x1,%eax
f012fb47:	89 fa                	mov    %edi,%edx
f012fb49:	83 c4 1c             	add    $0x1c,%esp
f012fb4c:	5b                   	pop    %ebx
f012fb4d:	5e                   	pop    %esi
f012fb4e:	5f                   	pop    %edi
f012fb4f:	5d                   	pop    %ebp
f012fb50:	c3                   	ret    
f012fb51:	8d 76 00             	lea    0x0(%esi),%esi
f012fb54:	31 ff                	xor    %edi,%edi
f012fb56:	31 c0                	xor    %eax,%eax
f012fb58:	89 fa                	mov    %edi,%edx
f012fb5a:	83 c4 1c             	add    $0x1c,%esp
f012fb5d:	5b                   	pop    %ebx
f012fb5e:	5e                   	pop    %esi
f012fb5f:	5f                   	pop    %edi
f012fb60:	5d                   	pop    %ebp
f012fb61:	c3                   	ret    
f012fb62:	66 90                	xchg   %ax,%ax
f012fb64:	89 d8                	mov    %ebx,%eax
f012fb66:	f7 f7                	div    %edi
f012fb68:	31 ff                	xor    %edi,%edi
f012fb6a:	89 fa                	mov    %edi,%edx
f012fb6c:	83 c4 1c             	add    $0x1c,%esp
f012fb6f:	5b                   	pop    %ebx
f012fb70:	5e                   	pop    %esi
f012fb71:	5f                   	pop    %edi
f012fb72:	5d                   	pop    %ebp
f012fb73:	c3                   	ret    
f012fb74:	bd 20 00 00 00       	mov    $0x20,%ebp
f012fb79:	89 eb                	mov    %ebp,%ebx
f012fb7b:	29 fb                	sub    %edi,%ebx
f012fb7d:	89 f9                	mov    %edi,%ecx
f012fb7f:	d3 e6                	shl    %cl,%esi
f012fb81:	89 c5                	mov    %eax,%ebp
f012fb83:	88 d9                	mov    %bl,%cl
f012fb85:	d3 ed                	shr    %cl,%ebp
f012fb87:	89 e9                	mov    %ebp,%ecx
f012fb89:	09 f1                	or     %esi,%ecx
f012fb8b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f012fb8f:	89 f9                	mov    %edi,%ecx
f012fb91:	d3 e0                	shl    %cl,%eax
f012fb93:	89 c5                	mov    %eax,%ebp
f012fb95:	89 d6                	mov    %edx,%esi
f012fb97:	88 d9                	mov    %bl,%cl
f012fb99:	d3 ee                	shr    %cl,%esi
f012fb9b:	89 f9                	mov    %edi,%ecx
f012fb9d:	d3 e2                	shl    %cl,%edx
f012fb9f:	8b 44 24 08          	mov    0x8(%esp),%eax
f012fba3:	88 d9                	mov    %bl,%cl
f012fba5:	d3 e8                	shr    %cl,%eax
f012fba7:	09 c2                	or     %eax,%edx
f012fba9:	89 d0                	mov    %edx,%eax
f012fbab:	89 f2                	mov    %esi,%edx
f012fbad:	f7 74 24 0c          	divl   0xc(%esp)
f012fbb1:	89 d6                	mov    %edx,%esi
f012fbb3:	89 c3                	mov    %eax,%ebx
f012fbb5:	f7 e5                	mul    %ebp
f012fbb7:	39 d6                	cmp    %edx,%esi
f012fbb9:	72 19                	jb     f012fbd4 <__udivdi3+0xfc>
f012fbbb:	74 0b                	je     f012fbc8 <__udivdi3+0xf0>
f012fbbd:	89 d8                	mov    %ebx,%eax
f012fbbf:	31 ff                	xor    %edi,%edi
f012fbc1:	e9 58 ff ff ff       	jmp    f012fb1e <__udivdi3+0x46>
f012fbc6:	66 90                	xchg   %ax,%ax
f012fbc8:	8b 54 24 08          	mov    0x8(%esp),%edx
f012fbcc:	89 f9                	mov    %edi,%ecx
f012fbce:	d3 e2                	shl    %cl,%edx
f012fbd0:	39 c2                	cmp    %eax,%edx
f012fbd2:	73 e9                	jae    f012fbbd <__udivdi3+0xe5>
f012fbd4:	8d 43 ff             	lea    -0x1(%ebx),%eax
f012fbd7:	31 ff                	xor    %edi,%edi
f012fbd9:	e9 40 ff ff ff       	jmp    f012fb1e <__udivdi3+0x46>
f012fbde:	66 90                	xchg   %ax,%ax
f012fbe0:	31 c0                	xor    %eax,%eax
f012fbe2:	e9 37 ff ff ff       	jmp    f012fb1e <__udivdi3+0x46>
f012fbe7:	90                   	nop

f012fbe8 <__umoddi3>:
f012fbe8:	55                   	push   %ebp
f012fbe9:	57                   	push   %edi
f012fbea:	56                   	push   %esi
f012fbeb:	53                   	push   %ebx
f012fbec:	83 ec 1c             	sub    $0x1c,%esp
f012fbef:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f012fbf3:	8b 74 24 34          	mov    0x34(%esp),%esi
f012fbf7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012fbfb:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f012fbff:	89 44 24 0c          	mov    %eax,0xc(%esp)
f012fc03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f012fc07:	89 f3                	mov    %esi,%ebx
f012fc09:	89 fa                	mov    %edi,%edx
f012fc0b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012fc0f:	89 34 24             	mov    %esi,(%esp)
f012fc12:	85 c0                	test   %eax,%eax
f012fc14:	75 1a                	jne    f012fc30 <__umoddi3+0x48>
f012fc16:	39 f7                	cmp    %esi,%edi
f012fc18:	0f 86 a2 00 00 00    	jbe    f012fcc0 <__umoddi3+0xd8>
f012fc1e:	89 c8                	mov    %ecx,%eax
f012fc20:	89 f2                	mov    %esi,%edx
f012fc22:	f7 f7                	div    %edi
f012fc24:	89 d0                	mov    %edx,%eax
f012fc26:	31 d2                	xor    %edx,%edx
f012fc28:	83 c4 1c             	add    $0x1c,%esp
f012fc2b:	5b                   	pop    %ebx
f012fc2c:	5e                   	pop    %esi
f012fc2d:	5f                   	pop    %edi
f012fc2e:	5d                   	pop    %ebp
f012fc2f:	c3                   	ret    
f012fc30:	39 f0                	cmp    %esi,%eax
f012fc32:	0f 87 ac 00 00 00    	ja     f012fce4 <__umoddi3+0xfc>
f012fc38:	0f bd e8             	bsr    %eax,%ebp
f012fc3b:	83 f5 1f             	xor    $0x1f,%ebp
f012fc3e:	0f 84 ac 00 00 00    	je     f012fcf0 <__umoddi3+0x108>
f012fc44:	bf 20 00 00 00       	mov    $0x20,%edi
f012fc49:	29 ef                	sub    %ebp,%edi
f012fc4b:	89 fe                	mov    %edi,%esi
f012fc4d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f012fc51:	89 e9                	mov    %ebp,%ecx
f012fc53:	d3 e0                	shl    %cl,%eax
f012fc55:	89 d7                	mov    %edx,%edi
f012fc57:	89 f1                	mov    %esi,%ecx
f012fc59:	d3 ef                	shr    %cl,%edi
f012fc5b:	09 c7                	or     %eax,%edi
f012fc5d:	89 e9                	mov    %ebp,%ecx
f012fc5f:	d3 e2                	shl    %cl,%edx
f012fc61:	89 14 24             	mov    %edx,(%esp)
f012fc64:	89 d8                	mov    %ebx,%eax
f012fc66:	d3 e0                	shl    %cl,%eax
f012fc68:	89 c2                	mov    %eax,%edx
f012fc6a:	8b 44 24 08          	mov    0x8(%esp),%eax
f012fc6e:	d3 e0                	shl    %cl,%eax
f012fc70:	89 44 24 04          	mov    %eax,0x4(%esp)
f012fc74:	8b 44 24 08          	mov    0x8(%esp),%eax
f012fc78:	89 f1                	mov    %esi,%ecx
f012fc7a:	d3 e8                	shr    %cl,%eax
f012fc7c:	09 d0                	or     %edx,%eax
f012fc7e:	d3 eb                	shr    %cl,%ebx
f012fc80:	89 da                	mov    %ebx,%edx
f012fc82:	f7 f7                	div    %edi
f012fc84:	89 d3                	mov    %edx,%ebx
f012fc86:	f7 24 24             	mull   (%esp)
f012fc89:	89 c6                	mov    %eax,%esi
f012fc8b:	89 d1                	mov    %edx,%ecx
f012fc8d:	39 d3                	cmp    %edx,%ebx
f012fc8f:	0f 82 87 00 00 00    	jb     f012fd1c <__umoddi3+0x134>
f012fc95:	0f 84 91 00 00 00    	je     f012fd2c <__umoddi3+0x144>
f012fc9b:	8b 54 24 04          	mov    0x4(%esp),%edx
f012fc9f:	29 f2                	sub    %esi,%edx
f012fca1:	19 cb                	sbb    %ecx,%ebx
f012fca3:	89 d8                	mov    %ebx,%eax
f012fca5:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f012fca9:	d3 e0                	shl    %cl,%eax
f012fcab:	89 e9                	mov    %ebp,%ecx
f012fcad:	d3 ea                	shr    %cl,%edx
f012fcaf:	09 d0                	or     %edx,%eax
f012fcb1:	89 e9                	mov    %ebp,%ecx
f012fcb3:	d3 eb                	shr    %cl,%ebx
f012fcb5:	89 da                	mov    %ebx,%edx
f012fcb7:	83 c4 1c             	add    $0x1c,%esp
f012fcba:	5b                   	pop    %ebx
f012fcbb:	5e                   	pop    %esi
f012fcbc:	5f                   	pop    %edi
f012fcbd:	5d                   	pop    %ebp
f012fcbe:	c3                   	ret    
f012fcbf:	90                   	nop
f012fcc0:	89 fd                	mov    %edi,%ebp
f012fcc2:	85 ff                	test   %edi,%edi
f012fcc4:	75 0b                	jne    f012fcd1 <__umoddi3+0xe9>
f012fcc6:	b8 01 00 00 00       	mov    $0x1,%eax
f012fccb:	31 d2                	xor    %edx,%edx
f012fccd:	f7 f7                	div    %edi
f012fccf:	89 c5                	mov    %eax,%ebp
f012fcd1:	89 f0                	mov    %esi,%eax
f012fcd3:	31 d2                	xor    %edx,%edx
f012fcd5:	f7 f5                	div    %ebp
f012fcd7:	89 c8                	mov    %ecx,%eax
f012fcd9:	f7 f5                	div    %ebp
f012fcdb:	89 d0                	mov    %edx,%eax
f012fcdd:	e9 44 ff ff ff       	jmp    f012fc26 <__umoddi3+0x3e>
f012fce2:	66 90                	xchg   %ax,%ax
f012fce4:	89 c8                	mov    %ecx,%eax
f012fce6:	89 f2                	mov    %esi,%edx
f012fce8:	83 c4 1c             	add    $0x1c,%esp
f012fceb:	5b                   	pop    %ebx
f012fcec:	5e                   	pop    %esi
f012fced:	5f                   	pop    %edi
f012fcee:	5d                   	pop    %ebp
f012fcef:	c3                   	ret    
f012fcf0:	3b 04 24             	cmp    (%esp),%eax
f012fcf3:	72 06                	jb     f012fcfb <__umoddi3+0x113>
f012fcf5:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f012fcf9:	77 0f                	ja     f012fd0a <__umoddi3+0x122>
f012fcfb:	89 f2                	mov    %esi,%edx
f012fcfd:	29 f9                	sub    %edi,%ecx
f012fcff:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f012fd03:	89 14 24             	mov    %edx,(%esp)
f012fd06:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012fd0a:	8b 44 24 04          	mov    0x4(%esp),%eax
f012fd0e:	8b 14 24             	mov    (%esp),%edx
f012fd11:	83 c4 1c             	add    $0x1c,%esp
f012fd14:	5b                   	pop    %ebx
f012fd15:	5e                   	pop    %esi
f012fd16:	5f                   	pop    %edi
f012fd17:	5d                   	pop    %ebp
f012fd18:	c3                   	ret    
f012fd19:	8d 76 00             	lea    0x0(%esi),%esi
f012fd1c:	2b 04 24             	sub    (%esp),%eax
f012fd1f:	19 fa                	sbb    %edi,%edx
f012fd21:	89 d1                	mov    %edx,%ecx
f012fd23:	89 c6                	mov    %eax,%esi
f012fd25:	e9 71 ff ff ff       	jmp    f012fc9b <__umoddi3+0xb3>
f012fd2a:	66 90                	xchg   %ax,%ax
f012fd2c:	39 44 24 04          	cmp    %eax,0x4(%esp)
f012fd30:	72 ea                	jb     f012fd1c <__umoddi3+0x134>
f012fd32:	89 d9                	mov    %ebx,%ecx
f012fd34:	e9 62 ff ff ff       	jmp    f012fc9b <__umoddi3+0xb3>
